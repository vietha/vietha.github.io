
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'rm1_200', true, true);
Module['FS_createDataFile']('/rm1_200', 'feat.params', [45, 110, 102, 105, 108, 116, 32, 52, 48, 10, 45, 108, 111, 119, 101, 114, 102, 32, 49, 51, 51, 46, 51, 51, 51, 52, 10, 45, 117, 112, 112, 101, 114, 102, 32, 54, 56, 53, 53, 46, 52, 57, 55, 54, 10, 45, 102, 101, 97, 116, 32, 49, 115, 95, 99, 95, 100, 95, 100, 100, 10, 45, 97, 103, 99, 32, 110, 111, 110, 101, 10, 45, 99, 109, 110, 32, 99, 117, 114, 114, 101, 110, 116, 10, 45, 118, 97, 114, 110, 111, 114, 109, 32, 110, 111, 10], true, true);
Module['FS_createDataFile']('/rm1_200', 'variances', [115, 51, 10, 118, 101, 114, 115, 105, 111, 110, 32, 49, 46, 48, 10, 99, 104, 107, 115, 117, 109, 48, 32, 121, 101, 115, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 104, 100, 114, 10, 68, 51, 34, 17, 157, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 39, 0, 0, 0, 172, 95, 0, 0, 3, 131, 213, 63, 21, 57, 100, 62, 73, 89, 195, 61, 29, 72, 29, 61, 130, 48, 138, 60, 245, 174, 138, 60, 173, 150, 248, 60, 35, 202, 6, 61, 170, 161, 32, 61, 126, 197, 35, 60, 50, 128, 2, 61, 44, 147, 185, 60, 164, 44, 243, 59, 13, 55, 223, 63, 161, 214, 178, 62, 147, 102, 175, 62, 243, 249, 162, 61, 195, 162, 182, 61, 247, 163, 75, 61, 35, 251, 26, 61, 107, 30, 59, 61, 1, 113, 238, 60, 152, 31, 204, 60, 226, 152, 48, 61, 165, 153, 5, 61, 255, 217, 246, 60, 240, 31, 95, 64, 53, 146, 0, 63, 93, 181, 65, 62, 70, 220, 201, 61, 249, 175, 23, 62, 226, 226, 157, 61, 69, 4, 131, 61, 146, 133, 189, 61, 9, 116, 138, 61, 71, 116, 90, 61, 18, 95, 176, 61, 61, 37, 90, 61, 62, 163, 98, 61, 18, 168, 73, 63, 96, 60, 100, 62, 242, 45, 125, 61, 99, 167, 36, 61, 56, 181, 140, 60, 141, 198, 82, 60, 25, 74, 194, 60, 35, 32, 125, 60, 26, 253, 66, 60, 23, 200, 183, 60, 241, 9, 201, 60, 66, 154, 32, 60, 200, 2, 174, 59, 240, 126, 51, 64, 33, 229, 187, 62, 35, 171, 129, 62, 113, 138, 246, 61, 179, 76, 32, 62, 167, 8, 141, 61, 182, 75, 86, 61, 39, 111, 152, 61, 148, 47, 29, 61, 99, 94, 163, 61, 231, 87, 133, 61, 58, 158, 0, 61, 249, 55, 161, 61, 113, 102, 20, 64, 95, 150, 173, 62, 57, 120, 48, 62, 135, 123, 15, 62, 194, 79, 173, 61, 222, 37, 14, 61, 243, 167, 196, 61, 243, 100, 72, 61, 130, 127, 82, 61, 249, 23, 98, 61, 69, 11, 213, 61, 210, 110, 166, 61, 184, 91, 69, 61, 254, 109, 122, 62, 207, 101, 185, 61, 203, 78, 150, 61, 95, 209, 102, 61, 46, 203, 2, 61, 248, 88, 230, 60, 49, 115, 161, 60, 24, 158, 92, 60, 190, 123, 93, 60, 198, 211, 88, 60, 38, 73, 50, 60, 8, 151, 208, 59, 137, 166, 39, 60, 187, 58, 246, 62, 212, 200, 255, 61, 33, 176, 242, 61, 82, 228, 167, 61, 221, 128, 214, 61, 41, 23, 36, 61, 122, 18, 79, 61, 172, 172, 52, 61, 224, 152, 53, 61, 16, 253, 245, 60, 100, 221, 52, 61, 47, 39, 143, 60, 126, 46, 158, 60, 68, 26, 91, 63, 11, 174, 113, 62, 118, 240, 31, 62, 108, 62, 172, 61, 142, 177, 27, 62, 102, 129, 160, 61, 247, 228, 158, 61, 149, 65, 132, 61, 252, 169, 54, 61, 132, 192, 204, 61, 195, 17, 28, 61, 186, 172, 132, 61, 136, 213, 243, 60, 226, 192, 48, 63, 137, 28, 207, 61, 81, 117, 160, 61, 63, 78, 48, 61, 119, 236, 129, 61, 162, 67, 221, 60, 171, 149, 147, 60, 122, 159, 23, 61, 41, 75, 11, 61, 114, 70, 32, 60, 12, 73, 253, 60, 33, 158, 175, 60, 101, 240, 147, 60, 19, 64, 248, 62, 113, 208, 37, 62, 119, 27, 135, 62, 220, 47, 59, 62, 153, 101, 54, 62, 160, 143, 27, 61, 94, 11, 148, 61, 197, 21, 131, 61, 147, 232, 92, 61, 169, 136, 181, 61, 206, 215, 0, 61, 254, 158, 105, 61, 234, 65, 123, 61, 44, 153, 67, 63, 192, 244, 105, 62, 11, 117, 128, 61, 6, 92, 3, 62, 94, 125, 18, 62, 158, 192, 191, 61, 153, 21, 147, 61, 28, 130, 110, 61, 225, 189, 29, 61, 37, 127, 65, 61, 42, 60, 132, 61, 73, 52, 51, 61, 250, 244, 130, 61, 61, 69, 204, 62, 185, 32, 170, 61, 30, 135, 196, 61, 69, 103, 59, 61, 80, 21, 147, 61, 109, 209, 28, 61, 247, 109, 18, 61, 220, 110, 72, 61, 26, 157, 151, 60, 254, 148, 213, 60, 25, 132, 146, 60, 200, 127, 188, 60, 65, 234, 102, 60, 190, 135, 130, 63, 104, 217, 71, 62, 148, 55, 199, 61, 73, 177, 134, 61, 105, 94, 159, 60, 28, 167, 135, 60, 52, 134, 86, 61, 208, 144, 52, 61, 96, 149, 196, 60, 238, 89, 10, 61, 160, 231, 94, 61, 179, 63, 204, 60, 85, 77, 160, 60, 16, 58, 8, 64, 151, 2, 122, 62, 223, 32, 1, 62, 39, 222, 255, 61, 103, 135, 232, 61, 217, 234, 20, 61, 53, 233, 155, 61, 124, 124, 151, 61, 97, 44, 87, 61, 188, 253, 84, 61, 190, 42, 232, 60, 239, 30, 141, 61, 15, 67, 17, 61, 10, 62, 204, 63, 73, 211, 196, 61, 46, 30, 132, 62, 65, 105, 134, 61, 183, 198, 176, 61, 142, 80, 44, 61, 52, 84, 222, 60, 164, 25, 85, 61, 135, 186, 173, 60, 79, 188, 133, 61, 148, 41, 134, 61, 252, 55, 96, 61, 185, 250, 162, 61, 203, 33, 137, 64, 112, 168, 211, 62, 202, 127, 149, 62, 94, 80, 210, 61, 4, 244, 17, 62, 40, 170, 102, 61, 137, 228, 137, 61, 113, 128, 138, 61, 79, 114, 138, 61, 107, 34, 76, 61, 10, 168, 195, 61, 202, 162, 156, 61, 219, 49, 164, 61, 232, 112, 80, 64, 240, 111, 171, 62, 253, 138, 17, 63, 162, 227, 14, 62, 82, 78, 92, 62, 60, 162, 170, 61, 95, 179, 10, 62, 134, 84, 2, 62, 156, 72, 47, 61, 212, 241, 210, 61, 4, 102, 173, 61, 47, 31, 102, 61, 48, 206, 168, 61, 238, 239, 118, 63, 231, 197, 184, 61, 11, 34, 201, 61, 242, 110, 41, 61, 183, 230, 155, 61, 45, 246, 18, 61, 178, 105, 97, 61, 249, 53, 208, 60, 105, 199, 152, 60, 17, 135, 75, 61, 119, 106, 146, 60, 47, 220, 64, 61, 237, 148, 23, 61, 132, 169, 243, 62, 114, 79, 74, 61, 163, 108, 3, 62, 248, 35, 96, 61, 185, 215, 18, 61, 239, 81, 49, 61, 76, 83, 43, 61, 7, 202, 59, 61, 9, 201, 20, 61, 12, 225, 162, 60, 212, 216, 32, 61, 52, 130, 18, 61, 86, 94, 30, 61, 184, 190, 63, 63, 103, 43, 164, 61, 250, 186, 7, 62, 254, 125, 147, 61, 195, 54, 149, 61, 227, 205, 98, 61, 76, 27, 109, 61, 247, 78, 96, 61, 225, 54, 85, 61, 142, 20, 44, 61, 39, 155, 93, 61, 25, 159, 61, 61, 191, 85, 40, 61, 152, 45, 148, 63, 201, 153, 14, 62, 112, 252, 213, 61, 40, 226, 76, 61, 18, 138, 10, 61, 198, 217, 116, 61, 116, 137, 14, 61, 233, 175, 239, 60, 182, 207, 169, 60, 43, 243, 146, 60, 86, 65, 69, 61, 144, 28, 181, 60, 8, 15, 232, 60, 194, 67, 172, 63, 63, 31, 146, 62, 238, 27, 160, 61, 227, 187, 179, 61, 0, 67, 160, 61, 34, 122, 138, 61, 230, 30, 186, 61, 248, 65, 177, 61, 19, 165, 200, 60, 11, 218, 225, 60, 103, 135, 0, 62, 40, 201, 56, 61, 212, 214, 21, 61, 88, 26, 179, 63, 7, 58, 178, 62, 148, 238, 124, 62, 191, 110, 226, 61, 157, 152, 79, 61, 61, 210, 131, 61, 238, 133, 238, 61, 29, 177, 155, 61, 165, 0, 145, 61, 0, 136, 56, 61, 26, 227, 13, 61, 216, 248, 95, 61, 1, 232, 248, 60, 250, 227, 155, 63, 45, 75, 2, 62, 60, 115, 186, 61, 243, 91, 200, 61, 249, 166, 245, 60, 238, 4, 138, 60, 220, 173, 226, 60, 73, 62, 175, 60, 12, 146, 124, 60, 190, 144, 174, 60, 119, 164, 21, 61, 111, 217, 27, 61, 197, 91, 111, 60, 33, 38, 195, 61, 160, 14, 145, 61, 83, 50, 60, 61, 162, 123, 1, 61, 179, 235, 243, 60, 47, 218, 129, 60, 240, 217, 173, 60, 199, 159, 172, 60, 208, 167, 195, 60, 111, 14, 165, 60, 141, 191, 209, 60, 165, 6, 228, 60, 172, 195, 86, 60, 77, 82, 188, 61, 150, 85, 64, 61, 160, 84, 50, 61, 55, 103, 22, 61, 225, 240, 220, 60, 226, 95, 204, 60, 168, 172, 27, 61, 62, 61, 251, 60, 146, 43, 12, 61, 145, 208, 191, 60, 38, 71, 0, 61, 79, 66, 19, 61, 216, 3, 225, 60, 253, 22, 118, 63, 189, 140, 8, 62, 104, 123, 229, 61, 243, 45, 55, 61, 202, 249, 42, 61, 69, 53, 22, 61, 224, 225, 6, 61, 240, 102, 177, 60, 141, 197, 32, 61, 90, 206, 51, 61, 250, 165, 0, 61, 30, 104, 104, 61, 83, 156, 14, 61, 10, 235, 32, 63, 124, 230, 47, 61, 6, 8, 58, 61, 128, 34, 41, 61, 142, 101, 229, 60, 12, 166, 191, 60, 184, 208, 158, 60, 89, 218, 199, 60, 7, 164, 152, 60, 149, 24, 130, 60, 49, 43, 158, 60, 3, 113, 136, 60, 205, 144, 116, 60, 69, 33, 90, 62, 17, 128, 64, 61, 28, 96, 52, 61, 218, 166, 53, 61, 61, 91, 42, 61, 57, 215, 26, 61, 68, 58, 234, 60, 243, 120, 38, 61, 203, 55, 213, 60, 66, 115, 198, 60, 175, 117, 242, 60, 188, 50, 205, 60, 18, 39, 184, 60, 79, 32, 158, 62, 194, 87, 171, 61, 216, 79, 48, 61, 56, 242, 25, 61, 180, 126, 207, 60, 214, 112, 171, 60, 25, 241, 195, 60, 191, 120, 214, 60, 54, 159, 136, 60, 155, 223, 47, 60, 212, 26, 200, 60, 197, 171, 24, 60, 70, 140, 217, 59, 135, 102, 247, 61, 181, 128, 145, 60, 241, 251, 145, 60, 231, 246, 83, 60, 95, 52, 33, 60, 27, 84, 11, 60, 164, 47, 53, 60, 103, 100, 48, 60, 237, 97, 11, 60, 71, 199, 8, 60, 14, 34, 10, 60, 185, 178, 11, 60, 5, 194, 236, 59, 22, 61, 171, 61, 31, 67, 158, 60, 225, 159, 144, 60, 214, 33, 129, 60, 125, 116, 111, 60, 2, 202, 76, 60, 245, 174, 103, 60, 109, 129, 78, 60, 146, 124, 75, 60, 48, 231, 63, 60, 223, 194, 57, 60, 27, 128, 64, 60, 137, 2, 41, 60, 11, 167, 155, 63, 132, 47, 168, 61, 81, 243, 140, 61, 29, 244, 222, 60, 183, 254, 62, 61, 247, 123, 39, 61, 170, 169, 231, 60, 198, 158, 158, 60, 30, 6, 243, 60, 81, 5, 100, 61, 69, 147, 209, 60, 241, 204, 112, 60, 165, 32, 35, 61, 174, 233, 134, 62, 217, 141, 200, 60, 243, 164, 183, 60, 229, 203, 128, 60, 135, 186, 142, 60, 85, 235, 134, 60, 29, 83, 69, 60, 195, 133, 90, 60, 209, 164, 87, 60, 111, 0, 14, 60, 170, 4, 85, 60, 1, 24, 74, 60, 109, 184, 51, 60, 135, 57, 227, 61, 114, 1, 198, 60, 231, 219, 5, 61, 251, 137, 222, 60, 17, 187, 215, 60, 53, 175, 247, 60, 93, 162, 162, 60, 126, 217, 156, 60, 65, 72, 173, 60, 78, 249, 101, 60, 18, 14, 138, 60, 50, 72, 137, 60, 92, 24, 116, 60, 92, 140, 90, 63, 241, 221, 134, 63, 61, 152, 203, 61, 2, 26, 63, 62, 120, 5, 179, 60, 229, 106, 191, 60, 162, 152, 170, 60, 118, 143, 162, 60, 92, 197, 172, 60, 20, 215, 112, 60, 52, 44, 86, 60, 160, 190, 20, 60, 106, 20, 119, 60, 250, 201, 83, 63, 171, 253, 135, 63, 170, 68, 76, 62, 243, 140, 14, 62, 59, 51, 42, 61, 151, 246, 7, 61, 33, 192, 205, 60, 55, 214, 249, 60, 230, 236, 247, 60, 141, 139, 205, 60, 109, 242, 135, 60, 60, 178, 68, 60, 149, 245, 187, 60, 106, 150, 148, 63, 224, 43, 58, 63, 72, 144, 242, 61, 240, 26, 145, 61, 65, 60, 88, 61, 123, 141, 90, 61, 36, 116, 105, 61, 27, 75, 181, 60, 47, 46, 39, 61, 200, 130, 128, 61, 89, 164, 9, 61, 171, 236, 31, 61, 167, 186, 14, 61, 16, 105, 77, 63, 249, 154, 152, 62, 90, 14, 224, 61, 161, 174, 196, 61, 140, 159, 138, 61, 247, 213, 7, 61, 235, 13, 188, 60, 223, 193, 95, 60, 141, 166, 214, 60, 113, 123, 252, 60, 113, 83, 147, 60, 255, 192, 85, 60, 236, 151, 20, 60, 32, 196, 247, 62, 34, 159, 165, 62, 167, 137, 200, 62, 194, 169, 108, 61, 130, 221, 130, 61, 177, 175, 53, 61, 21, 193, 162, 61, 36, 41, 99, 60, 153, 51, 78, 61, 215, 235, 55, 61, 246, 96, 2, 61, 205, 214, 26, 61, 133, 50, 23, 61, 77, 212, 200, 63, 36, 230, 135, 62, 217, 64, 123, 62, 9, 184, 0, 62, 180, 153, 38, 62, 65, 49, 168, 61, 128, 150, 45, 61, 7, 67, 90, 61, 32, 224, 134, 61, 89, 30, 134, 61, 147, 63, 94, 61, 84, 158, 26, 61, 115, 42, 3, 61, 38, 15, 141, 63, 46, 147, 135, 62, 9, 234, 165, 61, 183, 8, 141, 61, 94, 145, 13, 61, 177, 98, 141, 60, 191, 156, 125, 60, 245, 177, 119, 60, 3, 95, 50, 60, 81, 239, 111, 60, 61, 28, 75, 60, 37, 217, 61, 60, 115, 63, 58, 60, 246, 108, 20, 64, 255, 119, 25, 62, 28, 242, 46, 62, 122, 197, 35, 62, 155, 73, 16, 62, 152, 89, 173, 61, 107, 39, 246, 61, 48, 63, 99, 61, 11, 229, 58, 61, 141, 68, 99, 61, 188, 77, 250, 60, 22, 205, 254, 60, 195, 248, 240, 60, 156, 32, 68, 64, 2, 13, 230, 62, 98, 232, 63, 62, 70, 169, 40, 62, 246, 119, 182, 61, 73, 17, 189, 61, 36, 83, 179, 61, 128, 220, 203, 61, 126, 125, 142, 61, 158, 185, 143, 61, 79, 210, 36, 61, 117, 175, 15, 61, 161, 65, 125, 61, 129, 110, 224, 62, 67, 181, 119, 61, 129, 128, 246, 60, 161, 163, 70, 61, 18, 94, 149, 61, 134, 98, 26, 61, 132, 226, 84, 61, 117, 184, 98, 60, 165, 228, 156, 60, 126, 196, 108, 60, 31, 119, 137, 60, 91, 219, 131, 60, 155, 74, 123, 60, 219, 78, 219, 63, 137, 222, 119, 62, 25, 40, 93, 62, 226, 52, 24, 62, 148, 227, 68, 61, 211, 75, 171, 61, 226, 112, 214, 61, 157, 206, 98, 61, 175, 179, 97, 61, 30, 155, 176, 61, 243, 207, 44, 61, 155, 35, 224, 60, 11, 97, 134, 61, 177, 252, 151, 63, 212, 185, 98, 62, 60, 146, 100, 62, 45, 69, 43, 62, 244, 11, 250, 61, 115, 147, 189, 61, 96, 49, 0, 62, 86, 24, 56, 61, 105, 251, 68, 61, 107, 194, 150, 61, 107, 203, 129, 61, 221, 197, 210, 60, 204, 12, 48, 61, 12, 242, 92, 63, 14, 229, 115, 62, 151, 134, 213, 61, 192, 150, 182, 61, 164, 117, 49, 61, 47, 58, 217, 61, 180, 17, 138, 61, 240, 88, 126, 60, 234, 241, 222, 60, 45, 244, 210, 60, 208, 122, 137, 60, 25, 46, 199, 60, 128, 12, 7, 61, 120, 132, 93, 63, 8, 184, 65, 62, 212, 140, 37, 62, 165, 167, 27, 62, 56, 110, 141, 61, 67, 198, 253, 61, 5, 110, 144, 61, 70, 124, 41, 61, 114, 38, 30, 61, 68, 132, 89, 61, 76, 30, 156, 60, 229, 223, 222, 60, 123, 43, 75, 61, 90, 20, 134, 63, 118, 219, 204, 62, 38, 147, 53, 62, 125, 162, 191, 61, 214, 59, 187, 61, 47, 191, 68, 62, 18, 162, 233, 61, 6, 206, 139, 61, 108, 252, 53, 61, 26, 118, 61, 61, 108, 188, 6, 61, 221, 224, 25, 61, 127, 35, 8, 61, 167, 181, 77, 63, 178, 142, 200, 61, 103, 0, 199, 61, 85, 142, 57, 62, 19, 192, 173, 61, 238, 199, 150, 61, 203, 106, 248, 60, 179, 13, 173, 60, 113, 29, 14, 61, 82, 222, 14, 61, 179, 21, 106, 61, 210, 244, 15, 61, 126, 95, 150, 61, 233, 101, 205, 63, 77, 36, 84, 62, 58, 54, 34, 62, 3, 135, 161, 61, 17, 12, 220, 61, 148, 137, 29, 61, 79, 50, 177, 61, 108, 131, 21, 61, 141, 222, 52, 61, 155, 251, 78, 61, 114, 88, 44, 61, 246, 107, 61, 61, 124, 81, 9, 61, 150, 211, 187, 63, 2, 157, 145, 62, 88, 37, 1, 62, 108, 204, 98, 62, 110, 11, 38, 62, 163, 137, 44, 62, 174, 98, 229, 61, 21, 25, 117, 61, 225, 204, 179, 61, 68, 41, 241, 61, 160, 33, 198, 61, 217, 229, 69, 61, 56, 49, 183, 61, 60, 245, 219, 62, 111, 225, 148, 61, 23, 90, 189, 61, 149, 150, 253, 60, 147, 244, 133, 60, 89, 77, 112, 61, 131, 207, 37, 61, 72, 122, 124, 60, 151, 238, 46, 61, 17, 168, 129, 61, 201, 117, 59, 60, 172, 53, 163, 60, 8, 143, 48, 61, 8, 106, 159, 62, 13, 201, 45, 61, 121, 95, 165, 61, 174, 4, 6, 61, 196, 75, 31, 61, 14, 110, 12, 61, 45, 186, 164, 61, 11, 126, 169, 60, 213, 58, 194, 60, 113, 140, 209, 60, 249, 92, 250, 60, 76, 125, 143, 60, 10, 27, 165, 60, 106, 154, 96, 62, 109, 244, 87, 61, 1, 1, 142, 61, 135, 215, 123, 61, 232, 239, 18, 61, 232, 200, 29, 61, 140, 191, 95, 61, 108, 200, 206, 60, 130, 143, 28, 61, 237, 110, 232, 60, 224, 213, 252, 60, 158, 124, 183, 60, 255, 69, 14, 61, 205, 47, 148, 63, 82, 104, 240, 61, 242, 245, 228, 61, 136, 45, 1, 62, 233, 135, 2, 62, 118, 138, 172, 61, 195, 67, 35, 61, 132, 146, 11, 61, 243, 110, 98, 61, 94, 208, 73, 61, 126, 111, 15, 61, 116, 204, 223, 60, 217, 78, 14, 61, 147, 217, 254, 63, 83, 182, 144, 62, 52, 50, 238, 61, 83, 128, 68, 62, 79, 101, 42, 62, 40, 179, 57, 62, 64, 93, 146, 61, 172, 47, 205, 60, 188, 1, 159, 61, 80, 104, 198, 60, 146, 96, 146, 61, 87, 188, 245, 60, 255, 102, 145, 61, 232, 0, 207, 63, 47, 185, 198, 62, 50, 165, 185, 62, 199, 50, 138, 62, 18, 243, 142, 62, 30, 123, 206, 61, 152, 39, 208, 61, 150, 211, 203, 61, 141, 73, 238, 61, 204, 228, 164, 61, 218, 196, 86, 61, 137, 223, 35, 61, 162, 210, 98, 61, 200, 76, 158, 63, 147, 34, 146, 61, 136, 88, 225, 61, 240, 144, 57, 62, 71, 149, 161, 60, 36, 169, 111, 61, 224, 222, 75, 61, 202, 135, 3, 61, 121, 113, 159, 60, 227, 195, 236, 60, 224, 120, 75, 61, 230, 170, 161, 60, 131, 207, 1, 61, 146, 31, 61, 63, 127, 165, 142, 61, 218, 109, 208, 61, 11, 29, 141, 61, 153, 158, 71, 61, 240, 232, 31, 61, 218, 155, 55, 61, 230, 136, 174, 60, 119, 248, 55, 61, 4, 6, 220, 60, 63, 234, 163, 60, 234, 43, 157, 60, 131, 148, 219, 60, 87, 196, 99, 63, 120, 216, 190, 61, 161, 241, 11, 62, 87, 4, 176, 61, 226, 63, 12, 61, 233, 216, 47, 61, 224, 243, 27, 61, 200, 253, 0, 61, 155, 236, 43, 61, 211, 103, 30, 61, 220, 136, 2, 61, 130, 121, 10, 61, 15, 34, 246, 60, 208, 89, 136, 63, 55, 87, 80, 62, 164, 11, 75, 62, 37, 76, 38, 62, 209, 228, 92, 61, 90, 241, 132, 61, 138, 145, 17, 61, 190, 151, 159, 60, 191, 161, 93, 61, 81, 201, 207, 60, 25, 125, 81, 61, 230, 108, 128, 60, 92, 62, 183, 60, 79, 188, 7, 63, 20, 194, 78, 61, 82, 188, 15, 62, 59, 192, 163, 61, 128, 200, 9, 61, 6, 75, 31, 61, 254, 188, 15, 61, 62, 198, 137, 60, 144, 114, 111, 60, 148, 158, 185, 60, 156, 110, 150, 60, 77, 93, 183, 60, 106, 108, 149, 60, 105, 70, 135, 62, 43, 34, 24, 61, 47, 152, 59, 61, 153, 217, 26, 61, 140, 127, 24, 61, 254, 186, 22, 61, 203, 144, 19, 61, 124, 44, 183, 60, 77, 117, 157, 60, 2, 134, 243, 60, 164, 152, 156, 60, 123, 203, 161, 60, 230, 145, 205, 60, 120, 90, 181, 63, 116, 247, 209, 61, 124, 132, 50, 62, 126, 3, 177, 61, 40, 74, 163, 61, 49, 185, 129, 61, 5, 47, 83, 61, 174, 202, 191, 60, 79, 149, 232, 60, 150, 30, 253, 60, 68, 51, 93, 61, 251, 222, 157, 60, 54, 102, 247, 60, 191, 113, 45, 63, 249, 94, 128, 61, 124, 123, 64, 61, 183, 236, 95, 61, 101, 179, 246, 60, 93, 62, 241, 60, 60, 218, 66, 61, 124, 60, 186, 60, 146, 11, 189, 60, 99, 95, 157, 60, 233, 191, 190, 60, 143, 113, 158, 60, 118, 194, 155, 60, 159, 155, 42, 63, 30, 40, 177, 61, 152, 133, 172, 61, 87, 95, 74, 61, 194, 19, 20, 61, 203, 59, 247, 60, 13, 44, 34, 61, 120, 18, 222, 60, 172, 53, 225, 60, 173, 49, 209, 60, 199, 128, 220, 60, 223, 127, 250, 60, 244, 242, 199, 60, 249, 194, 199, 63, 162, 185, 159, 61, 30, 15, 61, 62, 83, 16, 8, 62, 144, 171, 12, 61, 240, 209, 63, 61, 111, 113, 239, 60, 112, 206, 208, 60, 84, 200, 178, 60, 61, 123, 22, 61, 180, 226, 218, 60, 60, 220, 143, 60, 57, 250, 253, 60, 66, 80, 153, 62, 243, 135, 56, 61, 63, 162, 64, 61, 174, 216, 200, 61, 90, 193, 224, 60, 118, 243, 40, 61, 187, 56, 206, 60, 206, 211, 217, 60, 173, 154, 225, 60, 154, 17, 9, 61, 64, 164, 136, 60, 66, 183, 142, 60, 53, 159, 157, 60, 205, 106, 16, 62, 18, 54, 123, 61, 128, 116, 48, 61, 100, 92, 116, 61, 11, 227, 25, 61, 171, 128, 25, 61, 164, 41, 21, 61, 225, 56, 16, 61, 1, 230, 23, 61, 180, 117, 24, 61, 156, 37, 215, 60, 177, 21, 0, 61, 81, 89, 232, 60, 32, 27, 59, 62, 98, 106, 69, 61, 131, 97, 129, 61, 36, 4, 179, 60, 185, 64, 32, 61, 216, 249, 95, 60, 76, 29, 33, 61, 164, 0, 246, 60, 120, 111, 142, 60, 73, 132, 212, 60, 164, 223, 127, 60, 71, 194, 193, 60, 91, 94, 105, 60, 25, 6, 69, 63, 150, 187, 102, 62, 179, 93, 148, 61, 232, 222, 167, 61, 163, 224, 61, 61, 243, 100, 49, 61, 181, 237, 104, 61, 234, 43, 7, 61, 170, 29, 173, 60, 25, 87, 10, 61, 20, 158, 239, 60, 99, 167, 131, 60, 247, 42, 202, 60, 240, 85, 45, 63, 134, 53, 89, 62, 182, 87, 65, 62, 179, 41, 15, 62, 166, 93, 210, 61, 137, 193, 137, 61, 239, 160, 187, 61, 37, 131, 72, 61, 189, 227, 146, 61, 219, 23, 74, 61, 148, 242, 81, 61, 236, 53, 89, 61, 156, 118, 215, 60, 245, 4, 157, 62, 183, 164, 142, 60, 250, 121, 214, 60, 38, 76, 178, 60, 107, 247, 247, 60, 238, 102, 60, 60, 219, 194, 9, 61, 173, 145, 127, 60, 74, 247, 121, 60, 8, 184, 115, 60, 243, 123, 22, 60, 30, 142, 214, 59, 114, 119, 102, 60, 35, 114, 147, 62, 216, 174, 13, 62, 167, 251, 220, 61, 207, 159, 70, 61, 102, 241, 143, 61, 70, 241, 198, 60, 182, 24, 231, 60, 240, 229, 157, 60, 215, 167, 207, 60, 138, 8, 134, 60, 123, 250, 216, 60, 51, 118, 0, 61, 32, 53, 141, 60, 228, 230, 210, 63, 62, 215, 129, 62, 171, 203, 165, 61, 26, 15, 91, 61, 176, 249, 64, 61, 253, 164, 125, 61, 198, 67, 179, 61, 64, 107, 3, 61, 113, 215, 230, 60, 19, 4, 42, 61, 246, 87, 220, 60, 94, 100, 235, 60, 51, 10, 24, 61, 76, 169, 169, 62, 0, 5, 52, 61, 31, 15, 207, 60, 168, 8, 121, 60, 241, 120, 26, 60, 124, 221, 96, 60, 189, 180, 38, 60, 4, 78, 24, 60, 209, 122, 2, 60, 7, 95, 24, 60, 228, 0, 121, 60, 91, 36, 34, 60, 130, 208, 1, 60, 185, 1, 166, 63, 44, 213, 35, 63, 126, 6, 19, 62, 1, 176, 220, 61, 91, 111, 5, 62, 103, 157, 144, 61, 205, 54, 187, 61, 120, 233, 28, 61, 129, 53, 8, 61, 189, 119, 238, 60, 120, 126, 16, 61, 122, 4, 226, 60, 141, 106, 212, 60, 7, 244, 185, 63, 249, 251, 228, 62, 231, 187, 69, 62, 72, 10, 2, 62, 105, 205, 6, 62, 177, 219, 149, 61, 88, 124, 163, 61, 23, 123, 168, 61, 97, 176, 42, 61, 140, 180, 231, 60, 11, 78, 76, 61, 210, 111, 17, 61, 251, 166, 183, 60, 211, 57, 63, 62, 168, 220, 47, 61, 56, 218, 132, 61, 131, 66, 87, 61, 161, 44, 251, 59, 166, 246, 152, 60, 216, 114, 1, 60, 147, 87, 106, 61, 64, 110, 247, 60, 97, 139, 244, 59, 20, 216, 135, 60, 40, 91, 54, 60, 125, 13, 49, 60, 32, 29, 159, 61, 163, 93, 40, 61, 25, 250, 65, 61, 129, 96, 92, 61, 39, 50, 57, 61, 173, 46, 144, 60, 145, 119, 180, 60, 204, 161, 33, 61, 192, 94, 108, 60, 86, 156, 60, 60, 226, 166, 41, 61, 70, 184, 247, 60, 81, 185, 44, 61, 236, 63, 63, 62, 250, 48, 19, 61, 155, 98, 96, 61, 188, 47, 83, 61, 191, 163, 147, 61, 208, 243, 23, 61, 255, 98, 239, 60, 178, 59, 44, 61, 40, 136, 237, 60, 234, 242, 154, 60, 59, 203, 116, 61, 224, 168, 92, 61, 204, 221, 148, 60, 197, 44, 223, 62, 204, 49, 21, 62, 158, 83, 0, 62, 177, 203, 180, 62, 63, 51, 254, 61, 46, 158, 139, 60, 26, 108, 178, 61, 107, 23, 32, 61, 163, 53, 73, 61, 107, 18, 246, 60, 119, 11, 93, 60, 221, 249, 145, 60, 80, 182, 30, 60, 237, 0, 30, 64, 26, 215, 11, 63, 250, 4, 149, 61, 240, 89, 15, 62, 67, 249, 160, 61, 200, 9, 243, 60, 248, 190, 95, 61, 194, 2, 29, 61, 8, 122, 1, 61, 71, 158, 24, 61, 230, 50, 12, 61, 148, 26, 149, 60, 36, 42, 193, 60, 196, 151, 147, 63, 144, 236, 114, 62, 151, 105, 33, 62, 198, 47, 10, 62, 48, 40, 235, 61, 56, 200, 65, 61, 42, 129, 104, 61, 17, 35, 242, 60, 179, 70, 73, 61, 48, 238, 238, 60, 233, 119, 38, 61, 11, 141, 63, 61, 212, 57, 10, 61, 99, 143, 95, 63, 59, 41, 221, 61, 76, 184, 229, 61, 128, 132, 157, 61, 135, 141, 92, 61, 142, 70, 49, 61, 115, 254, 46, 61, 12, 57, 151, 60, 180, 204, 130, 61, 143, 115, 209, 60, 66, 198, 64, 61, 246, 127, 247, 60, 223, 223, 152, 60, 162, 44, 40, 63, 124, 236, 190, 61, 153, 177, 207, 61, 151, 213, 152, 61, 160, 188, 89, 61, 41, 76, 20, 61, 94, 173, 193, 60, 160, 29, 208, 60, 31, 220, 212, 60, 100, 228, 167, 60, 221, 55, 175, 60, 31, 192, 171, 60, 196, 97, 197, 60, 108, 66, 159, 63, 132, 204, 143, 62, 148, 34, 242, 61, 234, 49, 247, 61, 154, 57, 136, 61, 191, 229, 81, 61, 113, 97, 48, 61, 43, 47, 32, 61, 32, 222, 45, 61, 118, 98, 7, 61, 6, 152, 10, 61, 13, 234, 33, 61, 112, 129, 3, 61, 120, 101, 178, 63, 87, 233, 54, 62, 163, 209, 25, 62, 47, 134, 153, 61, 216, 72, 128, 61, 45, 69, 16, 61, 41, 206, 30, 61, 235, 156, 205, 60, 128, 207, 222, 60, 187, 161, 196, 60, 44, 33, 148, 60, 77, 29, 96, 60, 149, 30, 184, 60, 40, 240, 1, 64, 180, 109, 146, 62, 240, 251, 85, 62, 192, 90, 241, 61, 239, 198, 239, 61, 238, 243, 128, 61, 190, 197, 92, 61, 232, 175, 25, 61, 163, 129, 69, 61, 104, 62, 103, 61, 146, 153, 246, 60, 251, 94, 217, 60, 221, 109, 2, 61, 96, 24, 11, 64, 14, 151, 222, 62, 130, 237, 4, 62, 216, 157, 21, 62, 155, 231, 28, 62, 204, 107, 111, 61, 103, 199, 107, 61, 240, 33, 134, 61, 173, 148, 27, 61, 42, 218, 48, 61, 236, 137, 18, 61, 131, 160, 33, 61, 55, 214, 28, 61, 130, 14, 80, 64, 88, 89, 25, 63, 14, 176, 197, 61, 13, 95, 104, 62, 232, 240, 192, 61, 233, 140, 72, 61, 205, 67, 4, 61, 148, 227, 103, 61, 62, 244, 52, 61, 74, 141, 188, 60, 138, 142, 189, 60, 164, 206, 5, 61, 252, 216, 69, 60, 152, 95, 20, 64, 161, 134, 186, 62, 176, 136, 123, 62, 92, 228, 210, 61, 234, 143, 6, 62, 37, 87, 113, 61, 152, 23, 67, 61, 178, 23, 55, 61, 94, 220, 101, 61, 53, 193, 19, 61, 16, 68, 41, 61, 10, 124, 233, 60, 184, 108, 134, 60, 119, 105, 146, 64, 45, 229, 153, 63, 75, 78, 209, 62, 53, 110, 129, 62, 44, 128, 67, 62, 169, 115, 90, 61, 58, 243, 134, 61, 105, 89, 150, 61, 51, 173, 96, 61, 203, 249, 153, 61, 163, 82, 26, 61, 0, 253, 51, 61, 0, 176, 21, 61, 131, 117, 58, 63, 51, 108, 9, 61, 162, 3, 59, 62, 148, 155, 224, 60, 25, 195, 234, 60, 235, 205, 215, 60, 129, 153, 179, 60, 186, 6, 223, 60, 32, 158, 157, 60, 7, 133, 60, 60, 175, 200, 200, 60, 81, 67, 139, 60, 182, 245, 143, 60, 59, 201, 72, 62, 197, 141, 153, 60, 35, 91, 6, 61, 85, 199, 71, 61, 169, 187, 250, 60, 14, 26, 62, 61, 97, 8, 164, 60, 133, 53, 166, 60, 193, 105, 134, 60, 157, 10, 159, 60, 65, 122, 171, 60, 156, 139, 147, 60, 74, 22, 99, 60, 80, 49, 12, 62, 76, 207, 5, 61, 120, 245, 57, 61, 84, 20, 51, 61, 221, 2, 242, 60, 0, 239, 245, 60, 5, 105, 199, 60, 33, 39, 9, 61, 12, 65, 242, 60, 80, 159, 16, 61, 2, 205, 10, 61, 126, 89, 205, 60, 157, 74, 189, 60, 159, 8, 163, 62, 182, 202, 132, 61, 232, 216, 42, 61, 81, 54, 112, 61, 155, 129, 125, 60, 63, 24, 253, 60, 105, 205, 158, 60, 224, 212, 60, 61, 189, 51, 176, 60, 131, 135, 28, 60, 226, 98, 151, 60, 146, 166, 63, 60, 1, 177, 23, 60, 164, 86, 25, 62, 46, 5, 71, 60, 209, 193, 235, 60, 129, 120, 58, 60, 124, 80, 42, 60, 160, 128, 67, 60, 108, 35, 40, 60, 139, 85, 21, 60, 151, 148, 219, 59, 113, 0, 236, 59, 19, 7, 17, 60, 102, 213, 215, 59, 104, 74, 232, 59, 69, 52, 65, 61, 230, 199, 119, 60, 117, 233, 129, 60, 176, 160, 107, 60, 126, 2, 34, 60, 133, 92, 81, 60, 244, 193, 45, 60, 254, 209, 93, 60, 35, 253, 21, 60, 239, 216, 51, 60, 81, 17, 39, 60, 1, 250, 46, 60, 94, 183, 27, 60, 252, 150, 129, 63, 26, 169, 5, 62, 168, 212, 254, 61, 122, 84, 142, 61, 152, 202, 108, 61, 20, 102, 119, 61, 129, 50, 55, 61, 33, 141, 232, 60, 242, 201, 49, 61, 23, 91, 7, 61, 94, 70, 178, 60, 26, 98, 190, 60, 106, 245, 219, 60, 228, 157, 51, 62, 64, 150, 229, 60, 229, 89, 214, 60, 72, 39, 20, 61, 77, 72, 173, 60, 147, 138, 204, 60, 21, 212, 224, 60, 128, 157, 172, 60, 148, 216, 145, 60, 154, 45, 90, 60, 2, 39, 107, 60, 171, 81, 137, 60, 28, 203, 66, 60, 7, 69, 6, 62, 81, 116, 245, 60, 15, 39, 15, 61, 187, 241, 32, 61, 86, 241, 6, 61, 217, 236, 203, 60, 249, 17, 193, 60, 211, 91, 202, 60, 115, 23, 208, 60, 9, 163, 171, 60, 251, 124, 168, 60, 22, 192, 176, 60, 91, 18, 139, 60, 2, 8, 226, 63, 245, 230, 247, 61, 140, 173, 28, 62, 25, 154, 214, 61, 225, 10, 69, 61, 146, 162, 22, 61, 185, 139, 240, 60, 35, 77, 227, 60, 55, 125, 179, 60, 18, 137, 6, 61, 135, 77, 86, 60, 171, 88, 116, 60, 93, 240, 110, 60, 155, 76, 92, 62, 198, 96, 117, 61, 221, 97, 45, 61, 183, 97, 148, 61, 30, 134, 11, 61, 150, 65, 90, 61, 123, 101, 13, 61, 244, 222, 191, 60, 50, 178, 226, 60, 40, 188, 174, 60, 183, 134, 138, 60, 125, 160, 183, 60, 236, 33, 143, 60, 30, 83, 100, 62, 227, 132, 126, 61, 155, 210, 74, 61, 186, 5, 114, 61, 114, 16, 39, 61, 138, 183, 44, 61, 42, 90, 3, 61, 171, 74, 24, 61, 109, 5, 22, 61, 58, 252, 255, 60, 203, 42, 218, 60, 17, 42, 212, 60, 253, 128, 168, 60, 177, 198, 67, 63, 183, 7, 56, 62, 92, 8, 48, 61, 236, 108, 108, 61, 74, 147, 37, 61, 154, 176, 200, 60, 189, 73, 12, 61, 218, 15, 50, 60, 206, 140, 153, 60, 111, 238, 78, 60, 102, 78, 91, 60, 117, 190, 74, 60, 248, 99, 198, 59, 220, 180, 111, 64, 180, 51, 125, 62, 103, 193, 85, 61, 24, 198, 32, 62, 205, 178, 134, 61, 69, 168, 84, 61, 227, 171, 176, 60, 40, 36, 49, 60, 152, 154, 112, 60, 120, 37, 169, 60, 139, 193, 205, 61, 11, 12, 241, 60, 68, 112, 181, 61, 196, 130, 61, 63, 161, 23, 209, 62, 223, 217, 193, 62, 186, 242, 92, 62, 51, 91, 138, 61, 61, 208, 83, 61, 68, 150, 167, 61, 210, 88, 12, 61, 195, 201, 76, 61, 168, 190, 83, 61, 43, 7, 52, 61, 86, 125, 68, 61, 87, 8, 35, 61, 83, 48, 244, 62, 155, 182, 11, 61, 146, 114, 149, 60, 129, 211, 194, 60, 112, 240, 67, 60, 209, 57, 11, 60, 152, 154, 1, 60, 135, 42, 16, 60, 102, 51, 18, 60, 62, 43, 39, 60, 130, 21, 210, 59, 96, 76, 193, 59, 101, 119, 8, 60, 174, 214, 73, 64, 213, 203, 11, 63, 131, 196, 254, 61, 215, 66, 198, 61, 19, 227, 179, 61, 115, 156, 149, 61, 215, 101, 67, 61, 13, 210, 30, 61, 193, 159, 11, 61, 123, 62, 159, 60, 114, 241, 8, 61, 10, 238, 73, 60, 25, 21, 199, 60, 133, 199, 9, 64, 125, 51, 12, 63, 64, 186, 138, 62, 116, 61, 17, 62, 149, 21, 202, 61, 173, 191, 178, 61, 19, 106, 121, 61, 216, 199, 133, 61, 203, 176, 28, 61, 32, 171, 112, 61, 23, 167, 116, 61, 234, 70, 19, 61, 92, 174, 50, 61, 93, 26, 22, 63, 162, 61, 94, 61, 191, 243, 70, 61, 3, 175, 147, 60, 64, 130, 215, 60, 219, 188, 192, 60, 57, 229, 167, 60, 13, 181, 137, 60, 180, 147, 78, 60, 128, 146, 114, 60, 83, 151, 19, 60, 138, 69, 140, 59, 14, 117, 68, 60, 39, 138, 12, 64, 128, 30, 133, 62, 140, 112, 95, 62, 108, 137, 148, 61, 2, 240, 192, 61, 27, 31, 65, 61, 181, 61, 121, 61, 35, 45, 99, 61, 212, 232, 18, 61, 9, 191, 163, 61, 24, 109, 230, 60, 190, 233, 43, 61, 149, 105, 210, 60, 77, 43, 250, 63, 186, 69, 149, 62, 30, 62, 97, 62, 169, 110, 211, 61, 120, 64, 190, 61, 253, 29, 218, 61, 225, 190, 166, 61, 127, 63, 96, 61, 216, 100, 71, 61, 97, 126, 204, 61, 232, 186, 48, 61, 103, 101, 25, 61, 145, 40, 198, 60, 230, 232, 3, 63, 30, 236, 178, 62, 117, 140, 104, 61, 195, 131, 156, 61, 15, 20, 172, 60, 53, 184, 214, 60, 107, 197, 119, 60, 206, 170, 22, 60, 56, 195, 59, 60, 164, 254, 58, 60, 72, 7, 108, 60, 67, 34, 72, 60, 195, 184, 6, 60, 57, 201, 247, 62, 123, 125, 140, 62, 85, 28, 150, 61, 142, 116, 126, 61, 193, 60, 224, 60, 110, 170, 198, 60, 113, 33, 225, 60, 21, 21, 187, 60, 78, 15, 111, 60, 176, 116, 115, 60, 18, 155, 142, 60, 236, 41, 203, 60, 40, 56, 134, 60, 217, 20, 68, 62, 159, 131, 109, 62, 208, 188, 130, 61, 175, 159, 158, 61, 80, 142, 129, 61, 105, 32, 245, 60, 68, 230, 38, 61, 97, 85, 18, 61, 116, 60, 34, 61, 215, 222, 14, 61, 17, 130, 0, 61, 50, 160, 175, 60, 82, 104, 230, 60, 81, 32, 72, 64, 58, 185, 126, 62, 116, 128, 74, 62, 232, 183, 195, 61, 194, 44, 208, 61, 224, 186, 104, 61, 216, 150, 95, 61, 189, 196, 95, 61, 21, 223, 136, 60, 99, 154, 133, 60, 63, 114, 226, 60, 192, 72, 137, 60, 99, 247, 181, 60, 14, 148, 55, 64, 46, 57, 84, 63, 81, 78, 234, 62, 170, 112, 30, 62, 59, 158, 240, 61, 34, 164, 5, 62, 242, 114, 101, 61, 242, 227, 176, 61, 48, 235, 52, 61, 230, 114, 22, 61, 24, 63, 134, 61, 51, 200, 246, 60, 28, 53, 77, 61, 154, 49, 175, 64, 243, 33, 4, 63, 44, 168, 153, 62, 84, 215, 94, 62, 21, 94, 65, 62, 158, 149, 255, 61, 145, 219, 192, 61, 81, 34, 186, 61, 228, 122, 56, 61, 94, 107, 104, 61, 200, 55, 147, 61, 15, 55, 19, 61, 201, 33, 106, 61, 155, 72, 198, 63, 217, 120, 227, 61, 119, 169, 2, 62, 95, 96, 125, 61, 77, 180, 111, 61, 17, 102, 25, 61, 198, 68, 96, 61, 37, 231, 21, 61, 176, 5, 25, 61, 125, 220, 18, 61, 34, 202, 48, 61, 177, 60, 178, 60, 247, 105, 127, 61, 45, 48, 128, 63, 231, 151, 226, 61, 81, 179, 254, 61, 229, 108, 124, 61, 98, 2, 14, 61, 80, 43, 30, 61, 88, 142, 81, 61, 75, 53, 236, 60, 252, 247, 241, 60, 191, 93, 246, 60, 214, 221, 4, 61, 149, 112, 187, 60, 88, 52, 254, 60, 43, 118, 156, 63, 101, 210, 43, 62, 190, 233, 245, 61, 21, 164, 101, 61, 239, 49, 157, 61, 217, 252, 80, 61, 141, 7, 121, 61, 11, 251, 48, 61, 8, 102, 67, 61, 165, 3, 105, 61, 202, 114, 34, 61, 227, 64, 217, 60, 231, 131, 56, 61, 51, 141, 161, 63, 99, 193, 255, 61, 151, 100, 33, 62, 23, 86, 133, 61, 12, 236, 36, 61, 117, 105, 7, 61, 143, 118, 91, 61, 2, 179, 195, 60, 3, 253, 239, 60, 226, 192, 103, 61, 141, 36, 161, 60, 12, 159, 105, 60, 253, 149, 72, 60, 80, 150, 42, 64, 157, 111, 119, 62, 188, 171, 60, 62, 55, 65, 53, 61, 13, 53, 15, 61, 16, 158, 132, 61, 63, 59, 104, 61, 227, 102, 170, 60, 193, 5, 48, 61, 212, 46, 151, 61, 243, 5, 178, 60, 65, 36, 40, 61, 170, 124, 23, 61, 81, 150, 19, 64, 46, 111, 154, 62, 134, 126, 136, 62, 248, 215, 204, 61, 117, 222, 84, 61, 141, 95, 141, 61, 36, 219, 173, 61, 196, 39, 2, 61, 25, 254, 90, 61, 149, 215, 6, 62, 74, 153, 4, 61, 59, 240, 88, 61, 108, 152, 56, 61, 160, 169, 12, 64, 72, 194, 73, 62, 37, 28, 14, 62, 38, 62, 77, 61, 18, 238, 165, 61, 177, 16, 239, 60, 97, 76, 154, 60, 153, 251, 195, 60, 176, 85, 198, 60, 81, 212, 11, 61, 12, 210, 107, 60, 226, 71, 241, 60, 97, 19, 178, 60, 76, 115, 62, 64, 33, 114, 190, 62, 22, 46, 125, 62, 213, 221, 202, 61, 98, 91, 175, 61, 65, 237, 201, 61, 31, 204, 125, 61, 129, 217, 191, 60, 6, 30, 106, 61, 144, 48, 229, 61, 162, 39, 247, 60, 179, 193, 246, 60, 238, 38, 24, 61, 22, 208, 65, 64, 27, 180, 9, 63, 233, 199, 159, 62, 162, 103, 181, 61, 202, 126, 11, 62, 240, 219, 148, 61, 114, 135, 129, 61, 14, 148, 50, 61, 186, 22, 136, 61, 134, 132, 88, 61, 204, 161, 53, 61, 33, 62, 106, 61, 245, 86, 67, 61, 161, 100, 91, 62, 218, 49, 190, 61, 126, 74, 224, 60, 45, 34, 77, 61, 77, 71, 201, 60, 238, 123, 177, 60, 144, 192, 124, 60, 179, 123, 8, 61, 218, 19, 208, 60, 175, 30, 68, 60, 174, 84, 136, 60, 31, 206, 125, 60, 231, 219, 4, 60, 19, 151, 54, 62, 22, 185, 233, 60, 118, 221, 242, 60, 196, 218, 152, 60, 182, 99, 128, 60, 249, 6, 40, 60, 22, 169, 80, 60, 83, 192, 69, 60, 189, 156, 148, 60, 97, 253, 115, 60, 141, 206, 118, 60, 10, 198, 86, 60, 174, 45, 81, 60, 70, 235, 199, 61, 220, 23, 189, 60, 10, 222, 25, 61, 221, 85, 158, 60, 97, 174, 169, 60, 120, 200, 135, 60, 184, 211, 130, 60, 78, 119, 116, 60, 90, 91, 200, 60, 176, 184, 171, 60, 224, 169, 168, 60, 66, 34, 136, 60, 235, 76, 131, 60, 107, 153, 229, 62, 102, 200, 4, 62, 69, 202, 7, 62, 78, 189, 216, 61, 13, 225, 31, 61, 178, 44, 240, 60, 163, 172, 11, 61, 78, 94, 165, 60, 126, 18, 129, 60, 228, 33, 91, 60, 225, 164, 91, 60, 218, 211, 99, 60, 18, 203, 131, 60, 119, 198, 33, 62, 189, 199, 100, 61, 83, 162, 130, 61, 37, 243, 42, 61, 119, 165, 249, 60, 139, 56, 192, 60, 145, 79, 189, 60, 213, 92, 185, 60, 80, 56, 192, 60, 184, 164, 159, 60, 118, 164, 140, 60, 214, 13, 136, 60, 245, 174, 169, 60, 40, 3, 19, 62, 9, 43, 78, 61, 234, 162, 18, 61, 100, 64, 46, 61, 229, 126, 40, 61, 136, 56, 16, 61, 28, 57, 4, 61, 140, 141, 0, 61, 173, 19, 5, 61, 51, 77, 9, 61, 214, 100, 216, 60, 232, 230, 220, 60, 226, 229, 234, 60, 212, 210, 187, 63, 27, 170, 79, 62, 147, 168, 60, 62, 90, 158, 21, 62, 109, 13, 127, 61, 51, 209, 131, 61, 212, 120, 17, 61, 215, 196, 16, 61, 83, 2, 42, 61, 223, 255, 31, 61, 221, 101, 229, 60, 174, 118, 6, 61, 100, 111, 87, 61, 241, 20, 76, 63, 37, 172, 157, 61, 77, 143, 214, 61, 17, 225, 35, 61, 136, 23, 44, 61, 200, 55, 20, 61, 244, 208, 193, 60, 85, 24, 2, 61, 8, 247, 208, 60, 36, 168, 232, 60, 61, 155, 194, 60, 127, 107, 223, 60, 175, 235, 198, 60, 218, 191, 138, 62, 157, 55, 130, 61, 197, 92, 138, 61, 169, 98, 83, 61, 230, 70, 79, 61, 159, 132, 30, 61, 233, 46, 246, 60, 128, 31, 46, 61, 52, 232, 35, 61, 153, 169, 11, 61, 166, 221, 248, 60, 175, 65, 28, 61, 135, 47, 251, 60, 45, 65, 179, 63, 165, 248, 147, 61, 155, 209, 222, 61, 205, 93, 148, 61, 86, 76, 23, 61, 44, 136, 18, 61, 115, 203, 219, 60, 68, 45, 149, 60, 233, 110, 187, 60, 4, 69, 74, 61, 60, 207, 48, 61, 40, 163, 147, 60, 175, 161, 74, 61, 46, 184, 120, 62, 217, 28, 0, 61, 7, 40, 224, 60, 182, 61, 184, 60, 127, 178, 184, 60, 189, 241, 157, 60, 38, 189, 130, 60, 79, 30, 75, 60, 4, 211, 109, 60, 80, 61, 130, 60, 20, 46, 98, 60, 200, 129, 123, 60, 246, 44, 59, 60, 70, 68, 64, 62, 179, 54, 64, 61, 254, 255, 7, 61, 28, 9, 217, 60, 38, 188, 251, 60, 120, 124, 157, 60, 242, 134, 196, 60, 84, 179, 155, 60, 128, 32, 164, 60, 218, 87, 181, 60, 159, 227, 166, 60, 232, 1, 169, 60, 1, 59, 145, 60, 74, 3, 45, 63, 168, 3, 56, 62, 98, 18, 135, 61, 44, 172, 170, 61, 76, 204, 38, 61, 211, 202, 32, 61, 70, 225, 19, 61, 23, 216, 46, 61, 27, 99, 213, 60, 145, 170, 190, 60, 82, 91, 154, 60, 252, 249, 82, 60, 118, 253, 215, 60, 179, 40, 108, 62, 253, 217, 109, 62, 20, 94, 175, 61, 224, 173, 172, 61, 11, 125, 22, 61, 1, 122, 247, 60, 90, 202, 13, 61, 82, 124, 233, 60, 249, 179, 6, 61, 128, 219, 10, 61, 77, 37, 152, 60, 2, 105, 244, 60, 225, 15, 230, 60, 208, 109, 166, 62, 65, 246, 143, 62, 239, 148, 1, 62, 79, 93, 240, 61, 191, 137, 131, 61, 152, 76, 56, 61, 30, 79, 24, 61, 86, 113, 64, 61, 20, 157, 49, 61, 159, 210, 52, 61, 94, 29, 26, 61, 181, 90, 30, 61, 111, 44, 61, 61, 12, 150, 170, 62, 72, 55, 234, 60, 211, 206, 238, 60, 180, 83, 86, 60, 51, 125, 93, 60, 62, 171, 57, 60, 232, 168, 102, 60, 106, 127, 67, 60, 39, 58, 96, 60, 240, 254, 125, 60, 164, 219, 55, 60, 110, 198, 97, 60, 61, 214, 237, 60, 188, 121, 59, 62, 47, 52, 63, 62, 43, 230, 141, 61, 15, 148, 178, 61, 23, 248, 55, 61, 78, 96, 102, 60, 219, 246, 246, 60, 27, 230, 185, 60, 206, 202, 194, 60, 165, 105, 168, 60, 141, 0, 140, 60, 137, 45, 227, 60, 200, 195, 154, 60, 100, 8, 54, 63, 136, 81, 231, 62, 178, 164, 26, 62, 234, 70, 172, 61, 156, 20, 100, 61, 211, 154, 121, 61, 253, 239, 97, 61, 161, 34, 72, 61, 246, 69, 29, 61, 33, 86, 32, 61, 160, 107, 211, 60, 116, 237, 20, 61, 202, 152, 224, 60, 92, 118, 138, 63, 230, 173, 61, 62, 235, 149, 36, 62, 50, 231, 135, 61, 27, 51, 28, 61, 191, 52, 155, 60, 247, 247, 251, 60, 53, 147, 255, 60, 113, 149, 142, 60, 174, 237, 133, 60, 1, 149, 163, 60, 141, 189, 125, 60, 25, 189, 140, 60, 159, 167, 217, 62, 161, 51, 88, 62, 247, 178, 197, 61, 4, 217, 116, 61, 162, 2, 255, 60, 181, 230, 221, 60, 48, 169, 237, 60, 217, 35, 222, 60, 77, 210, 181, 60, 237, 152, 215, 60, 59, 26, 146, 60, 157, 112, 80, 60, 43, 70, 144, 60, 55, 101, 163, 63, 33, 115, 152, 62, 240, 156, 136, 62, 173, 254, 116, 61, 91, 46, 131, 61, 147, 94, 134, 61, 98, 120, 161, 61, 41, 32, 93, 61, 74, 184, 115, 61, 176, 132, 47, 61, 243, 207, 8, 61, 89, 72, 24, 61, 136, 104, 215, 60, 191, 158, 133, 62, 113, 30, 140, 61, 11, 17, 27, 61, 54, 133, 158, 60, 38, 17, 147, 60, 142, 240, 85, 60, 125, 149, 137, 60, 14, 50, 111, 60, 212, 68, 70, 60, 119, 104, 64, 60, 60, 88, 1, 60, 239, 48, 21, 60, 29, 175, 153, 60, 3, 28, 151, 62, 6, 3, 249, 61, 57, 89, 83, 61, 57, 138, 217, 60, 180, 98, 204, 60, 247, 148, 164, 60, 213, 203, 181, 60, 146, 225, 116, 60, 148, 121, 203, 60, 203, 123, 116, 60, 80, 132, 50, 60, 17, 68, 115, 60, 245, 236, 149, 60, 20, 44, 61, 62, 185, 213, 146, 61, 17, 120, 86, 61, 182, 54, 247, 60, 51, 118, 82, 61, 70, 50, 170, 60, 247, 223, 18, 61, 193, 238, 202, 60, 37, 16, 40, 61, 25, 19, 169, 60, 161, 117, 161, 60, 75, 226, 216, 60, 118, 17, 202, 60, 62, 65, 179, 63, 10, 160, 100, 62, 33, 235, 248, 61, 91, 6, 84, 61, 20, 202, 188, 60, 107, 194, 43, 61, 45, 51, 92, 61, 210, 219, 135, 60, 72, 243, 152, 60, 235, 46, 100, 60, 76, 140, 79, 60, 14, 46, 96, 60, 187, 252, 118, 60, 213, 41, 180, 63, 31, 237, 223, 62, 34, 37, 61, 62, 219, 205, 236, 61, 184, 165, 179, 61, 1, 27, 149, 61, 53, 163, 110, 61, 198, 19, 130, 61, 7, 106, 26, 61, 14, 139, 24, 61, 251, 240, 38, 61, 160, 94, 47, 61, 21, 229, 244, 60, 170, 32, 187, 63, 253, 106, 2, 63, 136, 94, 160, 62, 106, 228, 23, 62, 69, 108, 185, 61, 52, 250, 168, 61, 192, 92, 153, 61, 197, 53, 145, 61, 101, 159, 131, 61, 17, 65, 185, 61, 56, 146, 9, 61, 185, 51, 99, 61, 109, 236, 154, 61, 49, 70, 150, 63, 212, 79, 225, 61, 92, 74, 56, 62, 47, 84, 105, 62, 137, 204, 178, 61, 240, 97, 131, 61, 206, 50, 49, 61, 244, 39, 6, 61, 92, 40, 18, 61, 6, 215, 40, 61, 236, 162, 72, 61, 64, 204, 26, 61, 126, 151, 66, 61, 95, 21, 141, 63, 47, 238, 205, 61, 247, 178, 33, 62, 74, 141, 147, 61, 116, 20, 143, 61, 76, 186, 158, 61, 47, 169, 169, 61, 252, 42, 32, 61, 41, 135, 3, 61, 134, 224, 243, 60, 204, 39, 40, 61, 112, 21, 68, 61, 46, 48, 19, 61, 38, 0, 138, 63, 106, 105, 31, 62, 64, 134, 58, 62, 105, 220, 198, 61, 189, 203, 153, 61, 253, 242, 209, 61, 68, 190, 124, 61, 212, 237, 103, 61, 114, 167, 139, 61, 81, 196, 60, 61, 177, 147, 126, 61, 226, 18, 146, 61, 113, 23, 82, 61, 35, 27, 151, 63, 221, 188, 162, 61, 12, 247, 42, 62, 179, 159, 39, 62, 204, 200, 153, 61, 85, 149, 120, 61, 42, 139, 78, 61, 146, 163, 97, 61, 153, 197, 14, 61, 77, 240, 86, 61, 158, 56, 38, 61, 181, 92, 203, 60, 3, 204, 65, 61, 217, 220, 181, 63, 133, 107, 185, 62, 243, 215, 68, 62, 35, 63, 32, 62, 108, 88, 151, 61, 195, 93, 203, 61, 199, 38, 155, 61, 83, 239, 15, 61, 190, 178, 36, 61, 148, 215, 75, 61, 203, 20, 114, 61, 13, 98, 79, 61, 106, 113, 145, 61, 70, 108, 192, 63, 29, 127, 140, 62, 240, 144, 146, 62, 217, 180, 45, 62, 146, 237, 228, 61, 36, 169, 187, 61, 114, 67, 165, 61, 128, 68, 214, 61, 88, 13, 89, 61, 193, 251, 139, 61, 133, 152, 68, 61, 228, 118, 135, 61, 243, 251, 101, 61, 9, 48, 212, 63, 199, 79, 85, 63, 187, 74, 207, 61, 223, 233, 129, 61, 171, 97, 85, 61, 71, 129, 143, 61, 149, 87, 98, 61, 82, 205, 3, 61, 86, 199, 10, 61, 158, 203, 196, 60, 175, 116, 250, 60, 173, 160, 251, 60, 2, 159, 98, 60, 72, 204, 133, 63, 166, 180, 115, 63, 74, 50, 143, 62, 218, 128, 77, 62, 53, 15, 44, 62, 64, 114, 166, 61, 23, 9, 168, 61, 238, 59, 195, 61, 17, 117, 34, 61, 32, 249, 37, 61, 179, 213, 129, 61, 85, 35, 104, 61, 5, 114, 160, 61, 117, 28, 131, 63, 111, 157, 178, 62, 30, 171, 50, 62, 109, 44, 169, 61, 23, 4, 199, 61, 113, 197, 182, 61, 211, 3, 223, 61, 176, 225, 166, 61, 159, 212, 107, 61, 82, 195, 42, 61, 174, 239, 106, 61, 215, 14, 83, 61, 199, 248, 61, 61, 77, 19, 151, 62, 75, 156, 1, 62, 196, 238, 47, 61, 49, 7, 125, 61, 33, 187, 237, 60, 12, 78, 157, 60, 160, 251, 95, 60, 76, 216, 45, 60, 177, 181, 124, 60, 195, 10, 87, 60, 22, 137, 152, 60, 183, 15, 70, 60, 203, 179, 48, 60, 31, 111, 189, 61, 130, 140, 143, 60, 58, 182, 118, 61, 165, 251, 146, 60, 225, 208, 214, 60, 209, 216, 69, 60, 245, 109, 91, 60, 234, 122, 82, 60, 31, 198, 128, 60, 249, 88, 7, 60, 40, 234, 78, 60, 48, 6, 14, 60, 187, 120, 36, 60, 233, 40, 129, 61, 22, 180, 154, 60, 236, 175, 133, 60, 232, 234, 168, 60, 203, 32, 166, 60, 40, 73, 143, 60, 203, 105, 131, 60, 7, 73, 114, 60, 241, 118, 120, 60, 204, 128, 75, 60, 211, 144, 136, 60, 25, 137, 90, 60, 209, 123, 83, 60, 110, 83, 5, 63, 4, 74, 8, 62, 140, 78, 209, 61, 92, 218, 73, 61, 14, 74, 129, 61, 51, 178, 123, 61, 197, 199, 179, 60, 101, 86, 184, 60, 60, 91, 128, 60, 92, 238, 157, 60, 74, 41, 123, 60, 78, 239, 76, 60, 214, 223, 156, 60, 1, 112, 233, 61, 109, 12, 18, 61, 149, 211, 246, 60, 151, 29, 248, 60, 230, 211, 251, 60, 171, 113, 176, 60, 254, 13, 211, 60, 134, 75, 170, 60, 200, 33, 136, 60, 199, 189, 132, 60, 15, 96, 157, 60, 37, 87, 134, 60, 126, 93, 155, 60, 123, 79, 155, 61, 48, 140, 217, 60, 231, 118, 221, 60, 44, 222, 248, 60, 205, 35, 216, 60, 150, 94, 199, 60, 168, 103, 223, 60, 42, 30, 222, 60, 237, 204, 221, 60, 223, 252, 189, 60, 19, 215, 216, 60, 19, 43, 206, 60, 28, 245, 159, 60, 181, 104, 190, 62, 197, 175, 48, 62, 213, 210, 23, 61, 22, 194, 248, 60, 11, 187, 58, 61, 148, 220, 201, 60, 19, 9, 64, 60, 86, 62, 66, 60, 128, 125, 142, 60, 175, 251, 97, 60, 114, 6, 60, 60, 30, 87, 66, 60, 26, 245, 81, 60, 227, 109, 38, 62, 49, 109, 183, 61, 136, 18, 95, 61, 107, 198, 197, 60, 135, 137, 244, 60, 151, 106, 251, 60, 140, 183, 177, 60, 170, 121, 165, 60, 0, 239, 172, 60, 70, 182, 145, 60, 181, 154, 154, 60, 14, 119, 149, 60, 55, 217, 163, 60, 165, 60, 4, 62, 216, 120, 155, 61, 119, 245, 16, 61, 223, 62, 3, 61, 58, 241, 72, 61, 71, 112, 30, 61, 229, 38, 250, 60, 27, 165, 229, 60, 110, 147, 15, 61, 73, 16, 231, 60, 35, 67, 240, 60, 51, 68, 3, 61, 85, 253, 11, 61, 137, 155, 139, 63, 102, 163, 201, 61, 240, 151, 65, 62, 91, 70, 157, 61, 63, 191, 172, 61, 162, 246, 13, 61, 115, 188, 6, 61, 139, 9, 183, 60, 66, 209, 220, 60, 214, 46, 11, 61, 188, 167, 19, 61, 148, 169, 178, 60, 42, 25, 232, 60, 98, 96, 226, 62, 77, 151, 86, 61, 238, 36, 204, 61, 76, 11, 230, 60, 252, 114, 239, 60, 209, 109, 153, 60, 19, 20, 62, 61, 84, 29, 168, 60, 47, 224, 139, 60, 160, 14, 181, 60, 45, 42, 191, 60, 203, 176, 142, 60, 53, 210, 205, 60, 19, 107, 53, 62, 93, 24, 133, 61, 60, 87, 140, 61, 60, 30, 23, 61, 218, 16, 42, 61, 242, 71, 187, 60, 128, 39, 22, 61, 5, 46, 0, 61, 108, 6, 204, 60, 9, 136, 150, 60, 128, 41, 254, 60, 232, 25, 210, 60, 19, 32, 210, 60, 66, 130, 172, 62, 198, 148, 174, 60, 229, 237, 86, 60, 202, 41, 88, 60, 15, 226, 108, 60, 195, 36, 48, 61, 69, 66, 221, 59, 97, 96, 243, 59, 176, 235, 10, 60, 46, 204, 72, 60, 37, 94, 2, 60, 199, 53, 110, 60, 164, 115, 28, 59, 178, 169, 246, 61, 77, 219, 255, 60, 39, 101, 228, 60, 185, 223, 136, 60, 136, 67, 206, 60, 238, 27, 255, 60, 241, 104, 154, 60, 208, 220, 110, 60, 147, 70, 141, 60, 138, 119, 149, 60, 166, 61, 137, 60, 167, 176, 128, 60, 129, 30, 205, 59, 77, 36, 43, 63, 93, 75, 219, 61, 162, 51, 231, 61, 50, 158, 33, 61, 54, 94, 51, 61, 53, 76, 86, 61, 202, 137, 255, 60, 186, 10, 226, 60, 115, 102, 84, 61, 178, 249, 249, 60, 122, 133, 44, 61, 75, 186, 178, 60, 55, 23, 64, 60, 28, 245, 32, 63, 129, 2, 1, 62, 156, 113, 178, 61, 247, 24, 159, 61, 235, 185, 0, 61, 153, 74, 210, 60, 21, 83, 40, 60, 107, 128, 36, 60, 153, 147, 49, 60, 65, 218, 65, 60, 253, 200, 53, 60, 107, 187, 44, 60, 165, 188, 73, 60, 136, 28, 185, 63, 21, 130, 142, 62, 234, 127, 130, 62, 54, 142, 76, 62, 30, 108, 18, 62, 6, 17, 199, 61, 81, 35, 9, 62, 155, 140, 136, 61, 50, 225, 59, 61, 159, 161, 160, 61, 201, 232, 235, 60, 43, 91, 60, 61, 236, 10, 129, 61, 172, 127, 186, 63, 131, 164, 117, 62, 198, 84, 89, 62, 217, 203, 113, 62, 187, 135, 244, 61, 96, 122, 33, 62, 237, 12, 20, 62, 128, 21, 209, 61, 253, 135, 79, 61, 111, 195, 175, 61, 132, 205, 46, 61, 22, 11, 121, 61, 162, 209, 133, 61, 254, 218, 52, 62, 236, 78, 148, 61, 220, 146, 194, 60, 41, 159, 4, 60, 197, 161, 98, 60, 181, 237, 139, 60, 123, 118, 75, 60, 49, 16, 210, 59, 152, 33, 136, 60, 136, 134, 140, 59, 251, 2, 84, 60, 237, 239, 91, 59, 30, 109, 10, 60, 177, 195, 214, 62, 11, 133, 13, 62, 170, 55, 103, 61, 245, 88, 227, 60, 169, 188, 178, 60, 128, 92, 211, 60, 108, 216, 24, 60, 186, 98, 113, 60, 62, 118, 9, 60, 143, 163, 73, 60, 251, 20, 39, 60, 132, 103, 253, 59, 215, 15, 40, 60, 254, 55, 154, 62, 29, 191, 109, 62, 93, 65, 21, 62, 203, 127, 207, 61, 173, 100, 128, 61, 83, 253, 35, 61, 44, 134, 195, 60, 7, 80, 9, 61, 186, 184, 5, 61, 241, 27, 151, 60, 61, 47, 119, 60, 10, 99, 143, 60, 66, 245, 191, 60, 177, 214, 120, 62, 223, 183, 23, 61, 142, 23, 46, 61, 113, 196, 168, 60, 162, 145, 161, 60, 181, 138, 7, 61, 171, 83, 191, 60, 241, 152, 249, 59, 164, 197, 97, 60, 207, 244, 136, 60, 130, 156, 119, 60, 240, 100, 72, 60, 10, 29, 169, 59, 56, 36, 192, 63, 218, 199, 91, 62, 103, 76, 134, 62, 121, 83, 70, 62, 254, 90, 89, 62, 254, 201, 21, 61, 64, 214, 194, 61, 77, 169, 45, 61, 20, 17, 157, 61, 178, 24, 118, 61, 166, 81, 185, 60, 186, 92, 176, 60, 210, 22, 28, 61, 11, 167, 119, 63, 30, 254, 135, 62, 72, 93, 103, 62, 6, 114, 223, 61, 42, 254, 235, 61, 171, 175, 245, 61, 182, 0, 204, 61, 224, 170, 16, 61, 132, 195, 140, 61, 24, 172, 188, 61, 18, 132, 83, 61, 171, 208, 61, 61, 154, 62, 157, 60, 64, 44, 1, 65, 26, 220, 140, 62, 35, 101, 15, 62, 104, 188, 34, 62, 199, 113, 129, 61, 5, 25, 56, 61, 108, 12, 184, 61, 82, 211, 136, 61, 239, 150, 128, 61, 251, 238, 35, 61, 217, 57, 184, 60, 160, 78, 128, 60, 185, 153, 150, 60, 214, 47, 152, 64, 44, 20, 252, 62, 191, 253, 244, 62, 235, 111, 209, 61, 90, 233, 213, 61, 254, 62, 154, 61, 233, 87, 97, 61, 105, 17, 63, 61, 117, 50, 44, 61, 242, 174, 17, 61, 35, 19, 85, 61, 121, 195, 16, 61, 15, 85, 128, 60, 40, 26, 171, 64, 158, 92, 42, 63, 106, 77, 174, 62, 227, 166, 132, 61, 28, 161, 195, 61, 61, 206, 186, 61, 79, 155, 149, 61, 115, 13, 116, 61, 196, 3, 144, 61, 241, 221, 67, 61, 76, 71, 99, 61, 208, 248, 17, 61, 180, 82, 219, 60, 193, 162, 77, 63, 17, 108, 185, 61, 249, 243, 252, 61, 84, 56, 136, 61, 34, 236, 106, 61, 64, 81, 175, 61, 214, 157, 191, 61, 198, 255, 81, 61, 231, 54, 21, 61].concat([109, 76, 52, 61, 66, 111, 20, 61, 101, 231, 193, 60, 101, 156, 158, 60, 125, 114, 214, 63, 101, 52, 190, 62, 40, 211, 138, 62, 65, 150, 114, 62, 231, 71, 132, 61, 0, 111, 129, 62, 27, 74, 216, 61, 38, 181, 55, 61, 235, 221, 120, 61, 76, 169, 12, 62, 56, 155, 78, 61, 173, 208, 24, 61, 28, 136, 3, 61, 193, 25, 41, 64, 36, 162, 161, 62, 54, 43, 131, 62, 100, 191, 86, 62, 130, 175, 144, 61, 223, 120, 26, 62, 127, 242, 100, 62, 253, 52, 135, 61, 112, 149, 180, 61, 7, 173, 198, 61, 67, 96, 100, 61, 83, 7, 46, 61, 106, 125, 128, 61, 156, 154, 191, 62, 212, 21, 172, 61, 58, 206, 98, 61, 217, 203, 119, 61, 13, 108, 177, 61, 37, 120, 67, 61, 103, 140, 205, 60, 253, 64, 63, 60, 211, 110, 190, 60, 109, 142, 167, 60, 72, 91, 178, 60, 160, 104, 206, 60, 223, 103, 160, 60, 30, 153, 90, 63, 236, 57, 125, 61, 117, 149, 243, 61, 58, 97, 157, 61, 146, 19, 157, 61, 211, 209, 59, 61, 220, 17, 24, 61, 145, 156, 18, 61, 186, 39, 157, 60, 157, 38, 178, 60, 34, 140, 138, 60, 146, 100, 233, 60, 105, 235, 168, 60, 208, 132, 113, 62, 239, 140, 122, 61, 247, 255, 222, 61, 178, 165, 143, 61, 4, 240, 202, 61, 222, 75, 250, 61, 54, 164, 104, 61, 213, 143, 60, 61, 203, 122, 55, 61, 233, 142, 1, 61, 197, 160, 227, 60, 69, 216, 26, 61, 175, 181, 236, 60, 50, 31, 195, 63, 96, 157, 40, 62, 33, 29, 100, 62, 111, 39, 170, 61, 184, 79, 213, 61, 102, 203, 5, 61, 111, 194, 34, 61, 81, 138, 166, 60, 134, 112, 24, 61, 143, 195, 12, 61, 2, 229, 176, 60, 25, 135, 134, 60, 153, 17, 159, 60, 27, 46, 152, 63, 177, 226, 227, 61, 82, 164, 18, 62, 85, 254, 188, 61, 203, 234, 231, 61, 224, 102, 160, 61, 6, 173, 197, 61, 162, 19, 83, 61, 197, 126, 232, 61, 15, 198, 151, 61, 120, 37, 24, 61, 129, 144, 29, 61, 23, 255, 231, 60, 171, 165, 129, 63, 231, 85, 85, 62, 62, 94, 141, 62, 194, 74, 62, 62, 120, 139, 52, 62, 142, 44, 231, 61, 237, 126, 8, 62, 132, 203, 169, 61, 105, 156, 212, 61, 165, 153, 188, 61, 105, 93, 17, 61, 167, 48, 75, 61, 167, 71, 94, 61, 166, 66, 154, 62, 14, 240, 43, 61, 35, 25, 50, 61, 232, 79, 106, 61, 250, 187, 147, 60, 164, 254, 126, 60, 142, 33, 153, 60, 2, 206, 55, 61, 209, 167, 93, 60, 138, 28, 29, 60, 167, 69, 65, 60, 21, 177, 61, 60, 17, 230, 96, 60, 92, 34, 233, 61, 99, 152, 197, 60, 33, 255, 149, 60, 38, 52, 132, 60, 43, 103, 46, 60, 250, 186, 32, 60, 7, 223, 93, 60, 8, 112, 21, 60, 216, 137, 58, 60, 245, 145, 50, 60, 56, 167, 87, 60, 66, 39, 57, 60, 226, 91, 72, 60, 45, 246, 93, 61, 83, 20, 182, 60, 35, 146, 146, 60, 199, 132, 145, 60, 140, 216, 61, 60, 254, 36, 60, 60, 22, 234, 136, 60, 185, 213, 107, 60, 130, 168, 63, 60, 120, 190, 103, 60, 25, 254, 78, 60, 250, 125, 106, 60, 227, 124, 127, 60, 137, 113, 158, 63, 19, 4, 103, 61, 224, 12, 188, 61, 97, 214, 55, 61, 249, 126, 169, 61, 238, 255, 20, 61, 71, 194, 235, 60, 240, 80, 51, 61, 43, 86, 160, 60, 146, 205, 155, 60, 159, 5, 134, 60, 253, 134, 173, 60, 104, 140, 191, 60, 130, 188, 162, 62, 58, 28, 41, 61, 98, 12, 149, 61, 192, 162, 0, 61, 147, 207, 85, 61, 9, 34, 40, 61, 91, 180, 247, 60, 42, 58, 196, 60, 24, 12, 205, 60, 252, 138, 148, 60, 52, 238, 122, 60, 156, 9, 190, 60, 174, 221, 151, 60, 216, 36, 31, 62, 247, 181, 81, 61, 77, 233, 29, 61, 120, 81, 51, 61, 228, 33, 147, 61, 195, 113, 63, 61, 164, 5, 25, 61, 38, 28, 41, 61, 49, 183, 219, 60, 243, 193, 179, 60, 99, 152, 191, 60, 155, 51, 2, 61, 85, 160, 221, 60, 252, 168, 181, 63, 137, 198, 69, 62, 248, 66, 178, 62, 123, 248, 96, 61, 219, 206, 182, 61, 100, 135, 145, 61, 6, 207, 21, 61, 158, 245, 146, 60, 106, 181, 72, 60, 242, 71, 37, 60, 159, 203, 108, 60, 176, 221, 179, 59, 253, 70, 89, 60, 113, 34, 23, 62, 244, 12, 116, 61, 112, 155, 200, 60, 160, 107, 231, 60, 207, 234, 26, 61, 58, 146, 160, 60, 131, 48, 191, 60, 65, 202, 163, 60, 41, 132, 115, 60, 5, 167, 208, 60, 133, 14, 113, 60, 141, 106, 24, 60, 139, 91, 57, 60, 172, 202, 233, 61, 219, 4, 126, 61, 153, 238, 231, 60, 95, 175, 13, 61, 189, 36, 17, 61, 84, 193, 17, 61, 204, 15, 32, 61, 226, 183, 1, 61, 40, 113, 220, 60, 231, 179, 39, 61, 10, 252, 209, 60, 136, 238, 138, 60, 109, 5, 179, 60, 229, 126, 167, 63, 187, 43, 180, 61, 55, 50, 148, 61, 42, 179, 3, 61, 75, 68, 54, 61, 208, 21, 17, 61, 12, 117, 47, 61, 45, 63, 238, 60, 101, 122, 242, 60, 52, 45, 185, 60, 54, 218, 174, 60, 215, 101, 159, 60, 157, 235, 162, 60, 144, 249, 17, 63, 43, 87, 78, 61, 63, 244, 187, 61, 74, 35, 205, 60, 164, 128, 203, 60, 12, 127, 140, 60, 1, 200, 27, 61, 18, 243, 150, 60, 128, 37, 190, 60, 131, 145, 117, 60, 137, 16, 98, 60, 226, 195, 70, 60, 240, 212, 117, 60, 181, 223, 54, 62, 138, 30, 73, 61, 44, 186, 109, 61, 176, 228, 222, 60, 43, 11, 38, 61, 3, 103, 18, 61, 246, 171, 9, 61, 177, 253, 207, 60, 144, 81, 196, 60, 225, 27, 190, 60, 18, 225, 146, 60, 226, 191, 194, 60, 139, 48, 255, 60, 159, 7, 85, 64, 5, 80, 186, 61, 231, 148, 118, 61, 123, 243, 159, 61, 124, 119, 176, 60, 157, 21, 109, 60, 185, 110, 103, 60, 37, 3, 223, 60, 44, 216, 81, 60, 5, 4, 42, 60, 132, 49, 41, 60, 183, 33, 100, 60, 136, 12, 64, 60, 0, 37, 98, 62, 4, 116, 138, 61, 13, 86, 27, 61, 38, 200, 250, 60, 156, 66, 228, 60, 29, 184, 226, 60, 36, 100, 181, 60, 120, 56, 220, 60, 149, 225, 136, 60, 17, 73, 136, 60, 113, 210, 163, 60, 214, 232, 140, 60, 34, 203, 119, 60, 157, 125, 229, 61, 221, 209, 44, 61, 93, 125, 36, 61, 60, 198, 19, 61, 201, 40, 15, 61, 154, 214, 12, 61, 168, 177, 6, 61, 126, 37, 11, 61, 126, 161, 211, 60, 6, 226, 231, 60, 27, 70, 225, 60, 183, 161, 211, 60, 126, 187, 229, 60, 205, 175, 100, 62, 113, 170, 130, 60, 56, 8, 113, 60, 4, 16, 33, 60, 87, 43, 64, 60, 209, 129, 29, 60, 134, 204, 15, 60, 105, 219, 10, 60, 224, 23, 29, 60, 32, 241, 253, 59, 61, 180, 7, 60, 111, 106, 2, 60, 198, 221, 236, 59, 230, 1, 62, 61, 194, 186, 164, 60, 64, 215, 111, 60, 46, 120, 127, 60, 63, 8, 101, 60, 21, 27, 97, 60, 38, 68, 101, 60, 223, 158, 125, 60, 27, 47, 110, 60, 17, 152, 88, 60, 222, 47, 82, 60, 242, 187, 91, 60, 214, 123, 92, 60, 60, 46, 147, 61, 115, 19, 20, 61, 186, 31, 235, 60, 108, 240, 6, 61, 95, 165, 254, 60, 83, 223, 231, 60, 124, 48, 217, 60, 231, 27, 1, 61, 199, 173, 226, 60, 83, 108, 209, 60, 160, 192, 191, 60, 130, 249, 219, 60, 217, 102, 208, 60, 51, 206, 16, 62, 88, 72, 68, 60, 233, 40, 56, 60, 76, 94, 18, 60, 117, 106, 17, 60, 238, 147, 247, 59, 212, 242, 238, 59, 123, 180, 236, 59, 166, 33, 250, 59, 209, 26, 247, 59, 175, 37, 224, 59, 17, 209, 238, 59, 24, 241, 223, 59, 110, 206, 34, 61, 88, 35, 148, 60, 64, 83, 134, 60, 153, 148, 127, 60, 127, 137, 128, 60, 123, 34, 111, 60, 76, 10, 82, 60, 113, 21, 102, 60, 188, 34, 100, 60, 157, 52, 92, 60, 5, 141, 102, 60, 2, 52, 79, 60, 127, 121, 69, 60, 86, 174, 140, 61, 96, 214, 2, 61, 73, 96, 4, 61, 255, 251, 237, 60, 15, 16, 236, 60, 174, 113, 236, 60, 205, 0, 208, 60, 193, 243, 226, 60, 24, 253, 234, 60, 57, 90, 204, 60, 147, 215, 215, 60, 122, 232, 184, 60, 30, 42, 191, 60, 234, 207, 232, 63, 49, 123, 197, 60, 143, 112, 148, 60, 222, 78, 128, 60, 196, 83, 106, 60, 38, 111, 79, 60, 126, 219, 52, 60, 210, 201, 56, 60, 0, 225, 122, 60, 149, 201, 80, 60, 28, 24, 61, 60, 236, 205, 53, 60, 18, 33, 2, 60, 218, 152, 187, 61, 15, 130, 36, 61, 86, 156, 225, 60, 174, 41, 173, 60, 203, 7, 153, 60, 26, 146, 145, 60, 243, 12, 150, 60, 146, 110, 131, 60, 216, 123, 128, 60, 19, 68, 120, 60, 18, 57, 75, 60, 184, 128, 93, 60, 82, 75, 102, 60, 12, 140, 5, 62, 47, 188, 82, 61, 78, 96, 20, 61, 89, 6, 13, 61, 102, 5, 222, 60, 0, 115, 3, 61, 98, 136, 6, 61, 207, 183, 247, 60, 42, 6, 228, 60, 75, 28, 204, 60, 133, 158, 209, 60, 99, 240, 212, 60, 73, 104, 194, 60, 57, 209, 76, 62, 208, 134, 220, 60, 39, 159, 135, 60, 180, 162, 68, 60, 153, 115, 85, 60, 119, 222, 51, 60, 38, 244, 21, 60, 92, 161, 12, 60, 154, 132, 22, 60, 78, 104, 23, 60, 182, 94, 15, 60, 25, 65, 3, 60, 118, 94, 18, 60, 44, 48, 55, 61, 175, 78, 186, 60, 180, 188, 165, 60, 90, 228, 146, 60, 170, 82, 130, 60, 250, 136, 131, 60, 87, 188, 123, 60, 151, 255, 115, 60, 5, 89, 105, 60, 50, 95, 111, 60, 239, 149, 101, 60, 27, 16, 105, 60, 109, 100, 92, 60, 25, 121, 172, 61, 2, 17, 55, 61, 105, 247, 31, 61, 31, 8, 234, 60, 127, 154, 233, 60, 44, 198, 225, 60, 234, 217, 2, 61, 85, 125, 249, 60, 1, 52, 247, 60, 237, 199, 205, 60, 180, 39, 211, 60, 195, 177, 215, 60, 95, 74, 185, 60, 98, 151, 37, 62, 193, 252, 133, 60, 13, 25, 71, 60, 15, 117, 35, 60, 60, 145, 16, 60, 222, 73, 254, 59, 140, 189, 6, 60, 9, 82, 242, 59, 220, 65, 238, 59, 48, 199, 235, 59, 0, 180, 232, 59, 55, 88, 238, 59, 231, 227, 16, 60, 4, 54, 35, 61, 123, 177, 163, 60, 208, 180, 144, 60, 173, 99, 113, 60, 181, 196, 90, 60, 185, 183, 75, 60, 106, 193, 88, 60, 23, 238, 109, 60, 154, 152, 112, 60, 202, 231, 78, 60, 13, 200, 113, 60, 139, 83, 93, 60, 4, 111, 80, 60, 14, 104, 136, 61, 84, 233, 12, 61, 29, 187, 250, 60, 252, 35, 234, 60, 85, 44, 223, 60, 119, 206, 248, 60, 179, 174, 235, 60, 141, 249, 206, 60, 124, 28, 198, 60, 47, 192, 205, 60, 58, 237, 212, 60, 177, 36, 215, 60, 191, 11, 221, 60, 69, 242, 38, 62, 225, 209, 28, 60, 207, 199, 6, 60, 245, 184, 252, 59, 11, 79, 241, 59, 152, 23, 251, 59, 34, 36, 222, 59, 1, 230, 235, 59, 101, 43, 211, 59, 165, 19, 215, 59, 233, 102, 241, 59, 155, 71, 210, 59, 3, 181, 192, 59, 231, 223, 17, 61, 24, 103, 136, 60, 109, 49, 134, 60, 215, 200, 112, 60, 213, 43, 79, 60, 43, 26, 98, 60, 84, 39, 122, 60, 129, 83, 103, 60, 62, 177, 96, 60, 113, 229, 91, 60, 220, 26, 62, 60, 166, 175, 64, 60, 16, 152, 61, 60, 22, 172, 109, 61, 57, 96, 3, 61, 234, 81, 0, 61, 176, 115, 241, 60, 124, 138, 234, 60, 164, 86, 237, 60, 93, 178, 234, 60, 91, 169, 230, 60, 114, 11, 201, 60, 71, 215, 208, 60, 202, 141, 204, 60, 141, 153, 198, 60, 38, 232, 181, 60, 167, 187, 111, 62, 73, 60, 223, 60, 25, 155, 154, 60, 119, 92, 200, 60, 209, 28, 135, 60, 192, 122, 48, 60, 93, 143, 81, 60, 150, 66, 22, 60, 247, 197, 52, 60, 141, 197, 51, 60, 39, 191, 44, 60, 197, 112, 18, 60, 129, 189, 76, 60, 35, 134, 55, 61, 61, 183, 146, 60, 52, 198, 132, 60, 150, 82, 141, 60, 132, 235, 115, 60, 255, 73, 134, 60, 63, 242, 111, 60, 88, 196, 86, 60, 36, 158, 117, 60, 81, 43, 92, 60, 152, 17, 105, 60, 226, 102, 100, 60, 69, 89, 100, 60, 246, 118, 137, 61, 177, 7, 11, 61, 182, 47, 249, 60, 68, 195, 254, 60, 67, 26, 227, 60, 11, 20, 2, 61, 56, 159, 236, 60, 29, 132, 207, 60, 83, 5, 247, 60, 91, 224, 218, 60, 111, 165, 242, 60, 179, 93, 221, 60, 57, 43, 224, 60, 174, 48, 116, 62, 115, 37, 145, 61, 42, 250, 51, 61, 82, 69, 230, 60, 185, 122, 149, 60, 11, 192, 58, 60, 12, 188, 3, 60, 233, 198, 194, 59, 119, 224, 12, 60, 183, 69, 244, 59, 6, 162, 210, 59, 158, 48, 203, 59, 179, 128, 251, 59, 45, 99, 46, 62, 153, 164, 220, 61, 65, 113, 134, 61, 164, 214, 227, 60, 114, 23, 170, 60, 143, 123, 211, 60, 56, 240, 142, 60, 22, 225, 164, 60, 166, 212, 144, 60, 14, 134, 59, 60, 130, 201, 84, 60, 44, 237, 128, 60, 247, 166, 244, 59, 102, 23, 103, 62, 194, 89, 195, 61, 224, 197, 138, 61, 242, 155, 78, 61, 131, 80, 157, 61, 107, 156, 59, 61, 208, 73, 190, 60, 41, 157, 9, 61, 135, 207, 5, 61, 113, 88, 247, 60, 231, 162, 8, 61, 107, 249, 252, 60, 252, 37, 211, 60, 222, 143, 4, 63, 212, 164, 227, 60, 231, 201, 190, 60, 198, 255, 105, 60, 168, 216, 77, 60, 154, 153, 235, 59, 102, 164, 18, 60, 158, 221, 16, 60, 182, 1, 226, 59, 79, 52, 11, 60, 108, 10, 239, 59, 73, 22, 232, 59, 23, 61, 4, 60, 182, 139, 56, 62, 216, 155, 242, 61, 161, 65, 158, 61, 83, 43, 79, 61, 28, 194, 199, 60, 89, 21, 103, 60, 89, 158, 138, 60, 113, 15, 163, 60, 191, 93, 173, 60, 245, 191, 171, 60, 119, 93, 146, 60, 204, 67, 146, 60, 132, 5, 129, 60, 161, 165, 195, 62, 143, 86, 50, 62, 246, 62, 166, 61, 78, 154, 78, 61, 187, 252, 73, 61, 184, 123, 61, 61, 131, 85, 109, 61, 211, 214, 116, 61, 116, 46, 72, 61, 247, 23, 216, 60, 138, 241, 0, 61, 74, 200, 2, 61, 31, 52, 3, 61, 5, 96, 116, 62, 102, 177, 54, 61, 216, 161, 20, 61, 42, 57, 166, 60, 239, 211, 161, 60, 57, 118, 65, 60, 10, 25, 137, 60, 3, 184, 178, 60, 204, 62, 105, 60, 80, 141, 85, 60, 235, 6, 67, 60, 97, 3, 25, 60, 47, 18, 62, 60, 67, 224, 11, 63, 208, 68, 194, 62, 42, 19, 29, 62, 59, 120, 194, 61, 145, 0, 121, 61, 221, 72, 28, 61, 76, 222, 71, 61, 62, 52, 71, 61, 66, 187, 7, 61, 91, 231, 222, 60, 135, 7, 225, 60, 8, 182, 192, 60, 165, 197, 83, 60, 248, 97, 142, 63, 76, 220, 1, 63, 193, 236, 22, 62, 22, 203, 252, 61, 116, 131, 244, 61, 156, 57, 203, 61, 76, 102, 199, 61, 157, 41, 159, 61, 197, 203, 89, 61, 208, 21, 65, 61, 52, 169, 64, 61, 57, 237, 7, 61, 45, 174, 53, 61, 12, 69, 38, 62, 84, 144, 217, 61, 26, 60, 112, 61, 177, 242, 136, 60, 1, 204, 56, 60, 230, 245, 67, 60, 174, 56, 84, 60, 52, 37, 3, 60, 205, 23, 64, 60, 60, 133, 244, 59, 82, 50, 77, 60, 187, 150, 39, 60, 160, 173, 242, 59, 197, 119, 154, 62, 190, 188, 5, 62, 252, 71, 138, 61, 204, 116, 78, 61, 6, 36, 172, 60, 230, 80, 173, 60, 58, 102, 173, 60, 235, 175, 190, 60, 91, 184, 152, 60, 74, 150, 114, 60, 224, 254, 166, 60, 226, 198, 162, 60, 134, 157, 90, 60, 62, 174, 202, 62, 216, 83, 54, 62, 119, 1, 164, 61, 177, 77, 85, 61, 17, 82, 61, 61, 78, 16, 72, 61, 45, 203, 80, 61, 234, 136, 92, 61, 184, 93, 12, 61, 10, 219, 212, 60, 52, 195, 3, 61, 33, 61, 235, 60, 22, 107, 155, 60, 51, 244, 135, 62, 129, 46, 188, 60, 46, 171, 116, 60, 123, 140, 75, 60, 218, 96, 57, 60, 121, 5, 238, 59, 38, 45, 30, 60, 22, 3, 13, 60, 252, 135, 9, 60, 9, 174, 21, 60, 91, 63, 239, 59, 137, 229, 11, 60, 75, 130, 39, 60, 144, 154, 13, 61, 39, 97, 113, 60, 210, 230, 95, 60, 66, 214, 91, 60, 233, 222, 138, 60, 80, 190, 137, 60, 208, 194, 98, 60, 86, 8, 106, 60, 4, 163, 80, 60, 50, 233, 109, 60, 129, 105, 76, 60, 0, 210, 60, 60, 22, 218, 71, 60, 242, 110, 134, 61, 50, 63, 22, 61, 127, 68, 234, 60, 254, 66, 255, 60, 34, 124, 22, 61, 148, 87, 0, 61, 28, 33, 232, 60, 163, 7, 226, 60, 19, 118, 234, 60, 187, 135, 210, 60, 139, 220, 196, 60, 255, 242, 190, 60, 62, 230, 202, 60, 74, 14, 133, 62, 165, 163, 141, 60, 67, 185, 103, 60, 140, 146, 39, 60, 179, 96, 37, 60, 201, 101, 64, 60, 135, 6, 5, 60, 191, 85, 250, 59, 100, 226, 0, 60, 16, 151, 221, 59, 11, 37, 200, 59, 156, 91, 224, 59, 146, 157, 17, 60, 153, 73, 242, 60, 89, 112, 98, 60, 86, 153, 82, 60, 170, 92, 102, 60, 1, 17, 74, 60, 34, 0, 49, 60, 56, 120, 53, 60, 77, 121, 62, 60, 64, 235, 95, 60, 164, 191, 45, 60, 114, 141, 52, 60, 107, 246, 95, 60, 79, 203, 26, 60, 68, 163, 143, 61, 88, 149, 15, 61, 142, 225, 4, 61, 62, 175, 249, 60, 135, 26, 181, 60, 56, 252, 200, 60, 46, 75, 219, 60, 148, 223, 212, 60, 173, 5, 205, 60, 133, 194, 199, 60, 29, 143, 204, 60, 236, 49, 241, 60, 43, 109, 177, 60, 179, 100, 92, 62, 117, 195, 186, 60, 253, 36, 138, 60, 151, 9, 27, 60, 163, 112, 45, 60, 157, 47, 243, 59, 165, 33, 3, 60, 104, 54, 231, 59, 53, 209, 9, 60, 221, 209, 8, 60, 14, 239, 242, 59, 92, 89, 250, 59, 141, 12, 222, 59, 22, 229, 21, 61, 124, 23, 155, 60, 43, 223, 84, 60, 6, 250, 122, 60, 43, 225, 132, 60, 80, 66, 107, 60, 112, 141, 146, 60, 142, 173, 80, 60, 101, 144, 124, 60, 41, 86, 101, 60, 28, 242, 128, 60, 138, 204, 98, 60, 160, 111, 71, 60, 216, 144, 89, 61, 50, 81, 2, 61, 184, 23, 215, 60, 205, 202, 246, 60, 138, 148, 240, 60, 181, 110, 227, 60, 137, 155, 6, 61, 197, 162, 208, 60, 11, 190, 247, 60, 1, 62, 1, 61, 152, 64, 2, 61, 35, 85, 187, 60, 173, 56, 179, 60, 78, 71, 57, 62, 3, 250, 86, 60, 111, 185, 20, 60, 30, 173, 3, 60, 137, 101, 17, 60, 121, 33, 6, 60, 98, 77, 235, 59, 215, 8, 243, 59, 113, 52, 241, 59, 92, 239, 5, 60, 9, 155, 179, 59, 84, 116, 239, 59, 38, 61, 204, 59, 170, 212, 128, 61, 168, 69, 255, 60, 74, 123, 183, 60, 114, 11, 184, 60, 111, 12, 155, 60, 113, 119, 130, 60, 112, 56, 62, 60, 156, 78, 125, 60, 95, 136, 110, 60, 183, 6, 120, 60, 190, 52, 124, 60, 128, 77, 95, 60, 165, 36, 115, 60, 156, 43, 209, 61, 7, 122, 57, 61, 94, 28, 231, 60, 171, 151, 1, 61, 18, 218, 16, 61, 77, 236, 11, 61, 85, 38, 216, 60, 12, 212, 240, 60, 177, 119, 211, 60, 224, 7, 218, 60, 45, 83, 207, 60, 119, 65, 227, 60, 224, 118, 3, 61, 167, 61, 134, 62, 80, 253, 104, 60, 240, 107, 52, 60, 44, 42, 106, 60, 200, 130, 80, 60, 152, 156, 241, 59, 193, 169, 46, 60, 170, 30, 220, 59, 62, 235, 14, 60, 223, 179, 27, 60, 159, 226, 38, 60, 59, 23, 232, 59, 127, 230, 220, 59, 24, 23, 87, 61, 215, 160, 185, 60, 76, 189, 178, 60, 115, 113, 139, 60, 115, 1, 132, 60, 126, 19, 93, 60, 49, 163, 148, 60, 129, 155, 113, 60, 36, 12, 97, 60, 103, 168, 127, 60, 177, 40, 131, 60, 161, 41, 81, 60, 46, 28, 74, 60, 110, 230, 169, 61, 64, 112, 40, 61, 166, 4, 13, 61, 5, 59, 248, 60, 41, 74, 5, 61, 166, 122, 212, 60, 102, 189, 23, 61, 143, 154, 247, 60, 153, 35, 218, 60, 25, 188, 234, 60, 134, 68, 5, 61, 223, 187, 180, 60, 233, 230, 188, 60, 82, 20, 203, 61, 242, 41, 30, 60, 254, 245, 7, 60, 196, 152, 2, 60, 173, 166, 239, 59, 151, 32, 241, 59, 142, 255, 206, 59, 97, 33, 236, 59, 78, 110, 188, 59, 214, 14, 241, 59, 133, 227, 207, 59, 196, 113, 213, 59, 116, 129, 206, 59, 38, 248, 70, 61, 147, 102, 142, 60, 147, 38, 144, 60, 97, 90, 108, 60, 102, 43, 118, 60, 232, 35, 96, 60, 180, 139, 79, 60, 29, 44, 80, 60, 19, 222, 86, 60, 211, 160, 88, 60, 210, 182, 114, 60, 1, 167, 83, 60, 146, 128, 87, 60, 120, 177, 132, 61, 211, 84, 13, 61, 166, 204, 227, 60, 143, 23, 225, 60, 133, 1, 220, 60, 24, 70, 214, 60, 57, 68, 212, 60, 15, 117, 185, 60, 65, 148, 149, 60, 190, 134, 195, 60, 52, 99, 228, 60, 92, 49, 199, 60, 62, 254, 192, 60, 167, 3, 215, 61, 102, 60, 99, 60, 67, 181, 24, 60, 73, 152, 11, 60, 40, 25, 236, 59, 255, 203, 214, 59, 231, 42, 252, 59, 157, 125, 242, 59, 111, 15, 246, 59, 185, 24, 238, 59, 200, 239, 15, 60, 66, 36, 254, 59, 120, 60, 222, 59, 246, 180, 12, 61, 122, 146, 146, 60, 35, 34, 120, 60, 249, 24, 87, 60, 169, 81, 65, 60, 199, 31, 82, 60, 155, 101, 55, 60, 113, 83, 133, 60, 106, 180, 76, 60, 43, 3, 123, 60, 231, 244, 136, 60, 138, 49, 102, 60, 241, 198, 80, 60, 234, 13, 178, 61, 198, 201, 14, 61, 155, 200, 239, 60, 76, 192, 199, 60, 153, 38, 199, 60, 122, 148, 254, 60, 232, 157, 203, 60, 66, 134, 201, 60, 38, 87, 202, 60, 38, 236, 192, 60, 159, 144, 244, 60, 105, 144, 198, 60, 199, 187, 218, 60, 255, 86, 33, 62, 172, 19, 14, 61, 206, 74, 227, 60, 216, 129, 171, 61, 17, 130, 90, 60, 175, 190, 248, 59, 235, 213, 232, 59, 120, 191, 246, 59, 54, 44, 243, 59, 112, 114, 52, 60, 103, 145, 42, 60, 101, 74, 191, 59, 163, 238, 234, 59, 130, 254, 4, 61, 248, 120, 115, 60, 36, 8, 63, 60, 159, 93, 116, 60, 235, 107, 166, 60, 238, 243, 92, 60, 187, 118, 27, 60, 78, 4, 66, 60, 17, 106, 92, 60, 67, 76, 94, 60, 255, 210, 74, 60, 19, 204, 53, 60, 27, 128, 90, 60, 28, 205, 128, 61, 186, 3, 37, 61, 248, 63, 6, 61, 65, 85, 3, 61, 86, 106, 3, 61, 40, 135, 210, 60, 21, 90, 187, 60, 136, 11, 198, 60, 46, 199, 199, 60, 38, 139, 225, 60, 128, 182, 189, 60, 146, 186, 200, 60, 44, 211, 230, 60, 139, 50, 50, 63, 12, 182, 124, 61, 224, 22, 218, 60, 34, 248, 138, 60, 47, 175, 15, 61, 163, 30, 169, 60, 114, 0, 251, 59, 183, 136, 126, 60, 109, 209, 33, 60, 14, 115, 85, 60, 73, 55, 234, 59, 83, 48, 27, 60, 188, 106, 144, 60, 36, 186, 132, 62, 23, 230, 82, 62, 181, 255, 21, 62, 76, 255, 206, 60, 194, 74, 135, 60, 235, 248, 175, 60, 0, 131, 128, 60, 57, 230, 223, 60, 30, 165, 25, 61, 7, 129, 155, 60, 94, 171, 126, 60, 162, 112, 61, 60, 205, 193, 164, 60, 13, 50, 63, 63, 33, 130, 42, 63, 167, 119, 207, 61, 149, 213, 10, 62, 202, 45, 132, 61, 215, 179, 110, 61, 224, 202, 102, 61, 21, 202, 62, 61, 181, 172, 25, 61, 119, 46, 22, 62, 127, 80, 4, 61, 107, 15, 38, 61, 187, 152, 28, 61, 15, 110, 50, 62, 78, 86, 69, 60, 0, 250, 31, 60, 208, 111, 56, 60, 223, 92, 30, 60, 135, 185, 63, 60, 123, 232, 7, 60, 109, 254, 41, 60, 201, 235, 198, 59, 83, 138, 231, 59, 191, 203, 69, 60, 61, 6, 244, 59, 161, 51, 212, 59, 20, 37, 150, 62, 121, 225, 185, 61, 72, 5, 0, 62, 34, 162, 15, 61, 66, 84, 194, 60, 190, 76, 195, 60, 236, 86, 185, 60, 62, 114, 247, 60, 69, 136, 40, 61, 68, 167, 129, 60, 101, 118, 218, 60, 215, 114, 132, 60, 251, 209, 56, 60, 45, 246, 60, 62, 143, 3, 205, 61, 159, 39, 9, 62, 59, 184, 67, 61, 154, 81, 184, 60, 179, 235, 10, 61, 59, 210, 27, 61, 158, 160, 155, 60, 207, 139, 37, 61, 10, 195, 237, 60, 20, 114, 51, 61, 144, 156, 5, 61, 57, 141, 11, 61, 10, 220, 167, 62, 19, 189, 46, 61, 63, 81, 3, 61, 247, 25, 141, 60, 6, 223, 173, 60, 224, 79, 197, 60, 6, 23, 232, 59, 158, 74, 214, 60, 247, 154, 21, 60, 36, 35, 238, 59, 100, 219, 133, 60, 219, 10, 96, 60, 74, 252, 71, 60, 168, 74, 209, 62, 224, 35, 81, 62, 250, 107, 192, 61, 66, 0, 145, 61, 114, 13, 170, 60, 254, 197, 146, 60, 206, 36, 24, 61, 100, 153, 222, 60, 233, 43, 152, 60, 78, 168, 18, 61, 206, 173, 237, 60, 0, 65, 158, 60, 87, 136, 109, 60, 14, 224, 242, 62, 106, 17, 157, 62, 119, 195, 226, 61, 32, 14, 205, 61, 155, 218, 13, 61, 25, 100, 33, 61, 89, 118, 3, 61, 163, 133, 125, 61, 53, 158, 29, 61, 170, 92, 11, 61, 219, 3, 21, 61, 234, 12, 7, 61, 17, 49, 115, 60, 236, 33, 144, 62, 152, 71, 230, 60, 218, 216, 99, 60, 171, 159, 172, 59, 197, 7, 78, 60, 101, 69, 144, 59, 39, 42, 8, 60, 244, 130, 20, 60, 243, 230, 1, 60, 1, 134, 137, 60, 127, 42, 43, 59, 232, 160, 55, 60, 171, 35, 37, 60, 192, 29, 93, 62, 217, 33, 234, 61, 141, 138, 6, 62, 47, 190, 65, 61, 38, 88, 64, 61, 238, 56, 4, 61, 232, 224, 220, 60, 1, 251, 229, 60, 195, 235, 161, 60, 30, 35, 222, 60, 60, 152, 75, 60, 138, 173, 188, 60, 59, 241, 70, 60, 107, 179, 1, 62, 205, 158, 244, 61, 126, 74, 203, 61, 58, 45, 109, 61, 52, 94, 96, 61, 179, 227, 38, 61, 149, 248, 83, 61, 17, 60, 229, 60, 38, 153, 19, 61, 244, 131, 87, 61, 141, 129, 6, 61, 137, 179, 23, 61, 155, 64, 235, 60, 225, 31, 39, 63, 24, 83, 135, 61, 240, 136, 57, 61, 231, 216, 81, 61, 151, 29, 156, 60, 79, 108, 201, 60, 174, 35, 82, 60, 208, 247, 166, 60, 120, 238, 81, 60, 211, 160, 180, 60, 168, 48, 93, 60, 9, 10, 24, 60, 236, 163, 29, 60, 65, 171, 216, 61, 58, 52, 46, 61, 2, 206, 253, 60, 228, 68, 13, 61, 31, 5, 177, 60, 31, 225, 156, 60, 221, 99, 148, 60, 195, 215, 187, 60, 30, 16, 129, 60, 38, 40, 147, 60, 201, 92, 86, 60, 102, 41, 155, 60, 81, 85, 128, 60, 15, 232, 19, 62, 255, 191, 192, 61, 240, 0, 57, 61, 222, 32, 73, 61, 51, 215, 210, 60, 82, 174, 50, 61, 254, 145, 227, 60, 155, 69, 38, 61, 200, 7, 239, 60, 230, 79, 18, 61, 139, 113, 207, 60, 53, 46, 218, 60, 89, 114, 242, 60, 56, 207, 254, 61, 46, 14, 120, 60, 133, 153, 109, 60, 205, 76, 59, 60, 198, 170, 38, 60, 232, 167, 39, 60, 155, 162, 17, 60, 51, 64, 237, 59, 76, 130, 249, 59, 115, 91, 17, 60, 111, 205, 17, 60, 11, 247, 20, 60, 118, 225, 8, 60, 200, 154, 94, 61, 106, 40, 201, 60, 248, 67, 143, 60, 245, 157, 108, 60, 28, 22, 123, 60, 14, 0, 130, 60, 227, 225, 111, 60, 69, 8, 112, 60, 194, 137, 88, 60, 41, 244, 93, 60, 242, 49, 108, 60, 157, 199, 73, 60, 76, 229, 92, 60, 67, 175, 132, 61, 188, 254, 50, 61, 63, 88, 43, 61, 251, 30, 36, 61, 179, 52, 37, 61, 133, 45, 27, 61, 170, 187, 4, 61, 207, 6, 240, 60, 131, 98, 213, 60, 16, 70, 232, 60, 92, 90, 240, 60, 167, 49, 229, 60, 20, 194, 232, 60, 96, 92, 42, 62, 104, 231, 137, 60, 165, 202, 103, 60, 63, 159, 5, 60, 113, 246, 24, 60, 73, 90, 21, 60, 72, 207, 253, 59, 237, 59, 248, 59, 48, 207, 9, 60, 18, 229, 3, 60, 13, 87, 223, 59, 230, 203, 254, 59, 151, 248, 227, 59, 47, 238, 58, 61, 245, 238, 157, 60, 127, 84, 141, 60, 209, 158, 80, 60, 213, 131, 116, 60, 108, 107, 80, 60, 1, 223, 119, 60, 53, 167, 71, 60, 140, 107, 96, 60, 252, 134, 107, 60, 253, 62, 91, 60, 152, 26, 91, 60, 186, 214, 67, 60, 28, 50, 176, 61, 217, 86, 50, 61, 51, 214, 12, 61, 58, 67, 216, 60, 14, 128, 7, 61, 16, 137, 226, 60, 233, 19, 225, 60, 10, 165, 213, 60, 151, 140, 234, 60, 231, 140, 247, 60, 245, 157, 248, 60, 113, 210, 218, 60, 197, 117, 227, 60, 235, 88, 29, 63, 125, 123, 228, 61, 247, 35, 12, 61, 147, 219, 182, 60, 60, 27, 182, 60, 31, 38, 230, 60, 66, 36, 190, 60, 48, 30, 154, 60, 225, 88, 153, 60, 60, 84, 180, 60, 141, 223, 170, 60, 230, 241, 138, 60, 183, 128, 144, 60, 68, 168, 46, 62, 253, 11, 22, 61, 147, 167, 241, 60, 14, 43, 44, 61, 233, 82, 12, 61, 42, 218, 22, 61, 86, 175, 126, 60, 35, 147, 6, 61, 57, 100, 182, 60, 23, 253, 199, 60, 67, 8, 88, 60, 1, 33, 118, 60, 176, 46, 153, 60, 164, 12, 22, 62, 105, 162, 94, 61, 8, 252, 72, 61, 190, 74, 42, 61, 113, 233, 129, 61, 226, 11, 105, 61, 43, 22, 230, 60, 179, 10, 60, 61, 235, 103, 43, 61, 243, 59, 31, 61, 82, 163, 212, 60, 81, 79, 226, 60, 201, 247, 1, 61, 48, 80, 55, 62, 203, 72, 174, 60, 97, 239, 166, 60, 176, 194, 142, 60, 119, 15, 183, 60, 90, 166, 41, 60, 199, 234, 39, 60, 63, 63, 6, 60, 21, 78, 11, 60, 121, 95, 97, 60, 251, 96, 53, 60, 55, 97, 43, 60, 210, 163, 27, 60, 213, 238, 103, 61, 139, 38, 202, 60, 253, 4, 143, 60, 92, 193, 163, 60, 1, 146, 143, 60, 103, 236, 141, 60, 84, 235, 138, 60, 161, 88, 95, 60, 238, 205, 149, 60, 85, 237, 125, 60, 87, 164, 149, 60, 71, 68, 133, 60, 96, 38, 88, 60, 56, 94, 154, 61, 159, 65, 35, 61, 97, 254, 24, 61, 39, 143, 200, 60, 56, 173, 235, 60, 218, 65, 229, 60, 153, 6, 199, 60, 120, 219, 184, 60, 28, 4, 181, 60, 50, 203, 183, 60, 137, 132, 195, 60, 28, 203, 201, 60, 141, 115, 227, 60, 173, 166, 220, 61, 142, 134, 115, 60, 227, 28, 101, 60, 242, 133, 10, 60, 77, 249, 2, 60, 58, 146, 6, 60, 250, 167, 229, 59, 118, 203, 224, 59, 11, 74, 20, 60, 75, 236, 31, 60, 154, 42, 3, 60, 151, 255, 248, 59, 69, 195, 202, 59, 255, 165, 13, 61, 71, 75, 117, 60, 15, 103, 107, 60, 237, 157, 72, 60, 156, 198, 140, 60, 111, 136, 106, 60, 74, 248, 100, 60, 12, 138, 88, 60, 30, 33, 113, 60, 9, 230, 121, 60, 43, 166, 107, 60, 212, 162, 115, 60, 8, 43, 80, 60, 193, 152, 92, 61, 110, 184, 195, 60, 79, 34, 193, 60, 226, 150, 193, 60, 45, 112, 0, 61, 53, 8, 0, 61, 255, 128, 2, 61, 60, 231, 204, 60, 192, 197, 211, 60, 74, 114, 227, 60, 74, 105, 216, 60, 123, 191, 204, 60, 106, 61, 219, 60, 120, 214, 202, 61, 24, 220, 28, 60, 172, 134, 231, 59, 162, 240, 231, 59, 96, 35, 220, 59, 178, 231, 209, 59, 136, 215, 251, 59, 175, 171, 217, 59, 200, 13, 217, 59, 139, 3, 219, 59, 160, 35, 253, 59, 151, 228, 254, 59, 55, 64, 216, 59, 41, 81, 41, 61, 104, 207, 134, 60, 34, 119, 90, 60, 51, 105, 86, 60, 73, 99, 124, 60, 206, 69, 92, 60, 59, 204, 115, 60, 16, 219, 69, 60, 28, 62, 131, 60, 29, 103, 152, 60, 251, 167, 128, 60, 86, 190, 82, 60, 7, 72, 110, 60, 64, 26, 143, 61, 117, 21, 240, 60, 175, 230, 211, 60, 41, 238, 210, 60, 46, 191, 231, 60, 46, 80, 206, 60, 209, 55, 237, 60, 71, 225, 213, 60, 58, 23, 9, 61, 4, 140, 10, 61, 66, 10, 221, 60, 245, 253, 196, 60, 126, 38, 204, 60, 243, 30, 78, 62, 75, 240, 190, 60, 234, 96, 228, 60, 155, 42, 153, 60, 120, 246, 134, 60, 92, 76, 72, 60, 129, 198, 83, 60, 54, 109, 242, 59, 124, 18, 91, 60, 144, 249, 99, 60, 246, 177, 42, 60, 230, 16, 36, 60, 144, 80, 42, 60, 176, 68, 76, 61, 137, 228, 180, 60, 54, 198, 171, 60, 155, 141, 145, 60, 178, 61, 120, 60, 138, 186, 111, 60, 188, 75, 74, 60, 44, 119, 89, 60, 212, 114, 129, 60, 237, 23, 78, 60, 86, 79, 75, 60, 104, 74, 59, 60, 12, 252, 74, 60, 168, 130, 206, 61, 87, 199, 45, 61, 135, 176, 251, 60, 160, 240, 14, 61, 96, 143, 19, 61, 227, 236, 6, 61, 196, 19, 254, 60, 152, 232, 2, 61, 250, 144, 36, 61, 225, 135, 251, 60, 78, 252, 240, 60, 7, 190, 214, 60, 229, 124, 169, 60, 162, 206, 65, 62, 223, 122, 238, 60, 1, 165, 96, 60, 212, 133, 72, 60, 225, 176, 114, 60, 165, 152, 223, 59, 142, 67, 42, 60, 172, 134, 101, 60, 232, 99, 85, 60, 139, 6, 50, 60, 9, 108, 119, 60, 188, 69, 34, 60, 218, 193, 6, 60, 159, 164, 16, 62, 101, 208, 253, 60, 92, 251, 251, 60, 184, 166, 186, 60, 128, 193, 229, 60, 172, 220, 181, 60, 86, 195, 136, 60, 42, 130, 177, 60, 186, 10, 122, 60, 64, 0, 121, 60, 215, 234, 166, 60, 234, 107, 67, 60, 186, 134, 68, 60, 34, 235, 105, 63, 92, 137, 188, 62, 218, 37, 167, 61, 64, 245, 165, 61, 166, 139, 209, 61, 145, 202, 103, 61, 174, 123, 101, 61, 246, 100, 222, 60, 248, 245, 13, 61, 10, 33, 28, 61, 127, 119, 57, 61, 77, 210, 62, 61, 73, 204, 235, 60, 236, 180, 149, 63, 186, 17, 47, 60, 130, 40, 51, 60, 27, 95, 60, 60, 164, 113, 59, 60, 145, 173, 49, 60, 12, 140, 6, 60, 172, 214, 17, 60, 97, 182, 61, 60, 207, 9, 128, 60, 192, 82, 168, 59, 43, 91, 248, 59, 135, 84, 44, 60, 31, 183, 58, 62, 66, 114, 92, 60, 49, 70, 165, 60, 7, 57, 172, 60, 133, 90, 145, 60, 45, 160, 148, 60, 74, 71, 162, 60, 16, 145, 68, 60, 110, 78, 229, 60, 38, 243, 95, 60, 85, 101, 91, 60, 176, 128, 139, 60, 229, 44, 154, 60, 166, 199, 47, 62, 64, 117, 1, 61, 213, 2, 28, 61, 42, 2, 40, 61, 122, 217, 2, 61, 10, 163, 35, 61, 180, 37, 28, 61, 178, 207, 229, 60, 4, 119, 107, 61, 6, 68, 229, 60, 128, 65, 211, 60, 192, 181, 230, 60, 237, 243, 2, 61, 18, 23, 29, 61, 220, 237, 53, 60, 227, 132, 16, 60, 248, 181, 227, 59, 10, 183, 6, 60, 242, 92, 28, 60, 213, 170, 72, 60, 60, 36, 50, 60, 66, 131, 12, 60, 38, 74, 205, 59, 41, 77, 184, 59, 78, 141, 38, 60, 226, 19, 6, 60, 184, 118, 196, 61, 96, 107, 220, 60, 237, 70, 11, 61, 138, 124, 168, 60, 89, 91, 117, 60, 25, 62, 135, 60, 25, 115, 175, 60, 185, 212, 236, 60, 193, 115, 182, 60, 245, 133, 97, 60, 169, 121, 96, 60, 223, 174, 115, 60, 91, 193, 130, 60, 106, 92, 74, 62, 181, 151, 97, 61, 202, 53, 169, 61, 196, 25, 249, 60, 192, 18, 5, 61, 201, 165, 216, 60, 18, 47, 32, 61, 2, 60, 64, 61, 193, 210, 75, 61, 119, 198, 162, 60, 233, 80, 0, 61, 62, 225, 214, 60, 99, 234, 17, 61, 147, 179, 122, 62, 231, 73, 146, 60, 223, 11, 201, 60, 26, 37, 154, 60, 13, 30, 117, 60, 219, 80, 113, 60, 191, 201, 119, 60, 224, 82, 216, 60, 180, 78, 163, 60, 153, 74, 20, 60, 141, 93, 52, 60, 115, 227, 71, 60, 213, 80, 77, 60, 46, 14, 18, 62, 0, 206, 218, 60, 165, 25, 21, 61, 66, 38, 247, 60, 95, 35, 40, 61, 174, 186, 221, 60, 133, 209, 220, 60, 58, 73, 180, 60, 244, 103, 183, 60, 94, 133, 105, 60, 168, 124, 194, 60, 182, 154, 226, 60, 229, 26, 155, 60, 101, 138, 223, 61, 194, 137, 75, 61, 14, 125, 123, 61, 187, 3, 231, 60, 99, 74, 83, 61, 147, 18, 74, 61, 255, 62, 7, 61, 223, 73, 102, 61, 231, 46, 44, 61, 194, 198, 224, 60, 34, 175, 1, 61, 76, 56, 227, 60, 178, 62, 211, 60, 117, 71, 239, 62, 64, 167, 240, 61, 120, 52, 137, 61, 123, 196, 103, 61, 113, 87, 244, 60, 45, 68, 148, 60, 169, 80, 182, 60, 14, 158, 174, 60, 211, 73, 222, 60, 201, 251, 148, 60, 250, 118, 137, 60, 101, 248, 179, 60, 226, 163, 243, 60, 37, 91, 14, 63, 154, 215, 75, 63, 254, 211, 251, 61, 184, 160, 219, 62, 158, 15, 142, 61, 255, 247, 99, 61, 210, 249, 61, 61, 244, 113, 156, 61, 6, 103, 43, 61, 52, 156, 126, 61, 168, 179, 180, 60, 85, 196, 226, 60, 199, 136, 1, 61, 12, 204, 233, 62, 4, 173, 77, 63, 66, 58, 80, 62, 231, 174, 155, 62, 149, 104, 255, 61, 211, 211, 179, 61, 203, 168, 150, 61, 139, 229, 160, 61, 6, 91, 129, 61, 132, 83, 149, 61, 188, 21, 45, 61, 188, 167, 42, 61, 155, 127, 67, 61, 105, 139, 69, 63, 57, 15, 78, 61, 250, 59, 188, 60, 76, 222, 89, 61, 153, 121, 116, 60, 31, 65, 119, 60, 104, 39, 83, 60, 22, 189, 86, 59, 39, 137, 254, 59, 121, 52, 119, 60, 110, 128, 101, 60, 6, 195, 76, 60, 132, 184, 123, 60, 88, 217, 1, 64, 218, 253, 145, 63, 227, 243, 112, 62, 103, 121, 18, 62, 23, 208, 101, 60, 65, 5, 96, 61, 68, 172, 244, 60, 107, 173, 98, 60, 32, 171, 149, 60, 145, 174, 198, 61, 114, 81, 128, 60, 203, 59, 142, 61, 46, 245, 9, 60, 52, 217, 167, 63, 52, 67, 42, 63, 24, 219, 136, 62, 99, 72, 43, 62, 191, 191, 50, 61, 88, 120, 159, 61, 90, 35, 231, 60, 123, 33, 7, 61, 176, 33, 46, 61, 210, 1, 113, 61, 90, 186, 19, 61, 178, 70, 114, 61, 143, 128, 29, 61, 41, 34, 102, 63, 152, 113, 126, 62, 6, 242, 201, 61, 173, 101, 154, 61, 211, 11, 199, 60, 38, 154, 203, 60, 8, 181, 6, 61, 156, 62, 249, 60, 111, 172, 30, 61, 250, 174, 213, 60, 13, 95, 159, 60, 141, 40, 168, 60, 98, 191, 184, 60, 251, 151, 141, 63, 186, 136, 237, 62, 101, 141, 220, 61, 37, 58, 175, 62, 109, 95, 253, 61, 179, 249, 166, 61, 251, 247, 255, 60, 124, 200, 69, 61, 12, 166, 67, 61, 230, 78, 88, 61, 221, 137, 91, 61, 19, 189, 0, 61, 202, 54, 194, 60, 159, 138, 208, 63, 99, 218, 44, 63, 155, 106, 145, 62, 171, 210, 137, 62, 178, 250, 29, 62, 122, 18, 141, 61, 59, 218, 137, 61, 44, 28, 125, 61, 252, 103, 195, 61, 219, 157, 111, 61, 164, 120, 181, 61, 90, 117, 65, 61, 119, 164, 67, 61, 62, 28, 118, 63, 167, 0, 241, 60, 86, 15, 89, 61, 114, 7, 81, 61, 201, 209, 151, 60, 123, 90, 212, 60, 240, 148, 218, 60, 215, 52, 189, 60, 171, 33, 74, 61, 200, 103, 52, 61, 216, 79, 67, 60, 7, 41, 156, 60, 229, 122, 207, 60, 46, 85, 68, 62, 251, 40, 231, 61, 229, 118, 22, 62, 215, 133, 172, 61, 234, 19, 61, 61, 116, 29, 247, 60, 57, 130, 107, 61, 10, 135, 90, 61, 238, 116, 63, 61, 174, 66, 152, 61, 215, 103, 179, 60, 29, 219, 8, 61, 154, 204, 193, 60, 139, 33, 99, 62, 45, 193, 176, 61, 98, 248, 45, 62, 147, 160, 58, 62, 42, 187, 147, 61, 118, 179, 81, 61, 144, 168, 178, 61, 42, 64, 200, 61, 88, 223, 132, 61, 148, 210, 172, 61, 51, 7, 5, 61, 15, 1, 101, 61, 181, 41, 15, 61, 164, 233, 87, 63, 104, 39, 229, 62, 67, 98, 24, 61, 133, 84, 150, 60, 164, 92, 12, 62, 32, 210, 88, 61, 176, 154, 93, 60, 113, 218, 69, 60, 30, 77, 224, 60, 68, 4, 150, 60, 196, 93, 214, 59, 38, 46, 62, 61, 69, 169, 141, 60, 141, 82, 58, 64, 49, 31, 122, 63, 115, 35, 72, 62, 140, 136, 50, 62, 111, 44, 53, 62, 204, 56, 144, 61, 233, 19, 16, 61, 220, 159, 22, 61, 14, 80, 187, 60, 56, 189, 46, 61, 130, 77, 118, 60, 189, 91, 228, 60, 56, 84, 11, 61, 74, 29, 139, 64, 74, 111, 29, 63, 106, 212, 130, 62, 27, 195, 112, 62, 134, 63, 150, 62, 26, 115, 179, 61, 50, 46, 129, 61, 1, 169, 107, 61, 155, 26, 36, 61, 64, 130, 142, 61, 85, 72, 166, 60, 0, 204, 200, 61, 167, 160, 161, 61, 26, 147, 165, 63, 2, 207, 77, 62, 221, 180, 191, 61, 115, 32, 209, 61, 110, 114, 85, 61, 30, 174, 39, 61, 229, 79, 210, 60, 10, 209, 108, 61, 143, 178, 217, 60, 139, 7, 253, 60, 113, 187, 136, 60, 180, 21, 162, 60, 53, 15, 52, 60, 34, 83, 101, 63, 43, 129, 160, 62, 98, 109, 232, 61, 38, 9, 61, 62, 78, 40, 24, 62, 173, 20, 55, 61, 132, 214, 27, 61, 78, 80, 53, 61, 182, 1, 74, 61, 79, 2, 91, 61, 222, 183, 50, 61, 207, 106, 22, 61, 5, 15, 50, 61, 138, 111, 79, 63, 38, 62, 151, 62, 192, 170, 16, 62, 32, 230, 87, 62, 4, 231, 166, 61, 124, 79, 177, 61, 14, 37, 36, 61, 168, 255, 84, 61, 175, 219, 2, 61, 197, 41, 70, 61, 100, 125, 25, 61, 57, 153, 21, 61, 58, 118, 33, 61, 232, 6, 51, 63, 168, 171, 10, 62, 139, 129, 130, 61, 51, 2, 21, 62, 84, 239, 232, 61, 23, 146, 33, 61, 122, 10, 210, 60, 245, 2, 25, 61, 122, 89, 28, 61, 121, 64, 132, 61, 47, 223, 43, 61, 121, 249, 211, 60, 128, 119, 219, 60, 251, 193, 175, 63, 217, 109, 130, 62, 127, 113, 213, 61, 176, 45, 152, 62, 123, 31, 22, 62, 78, 103, 107, 61, 115, 215, 58, 61, 165, 180, 83, 61, 80, 66, 96, 61, 242, 0, 182, 61, 94, 190, 188, 60, 238, 45, 33, 61, 170, 83, 64, 61, 127, 218, 120, 63, 55, 51, 242, 62, 210, 219, 104, 62, 134, 129, 56, 62, 197, 46, 240, 61, 136, 125, 152, 61, 128, 128, 142, 61, 125, 52, 94, 61, 250, 41, 115, 61, 140, 78, 125, 61, 189, 247, 45, 61, 216, 196, 48, 61, 169, 121, 56, 61, 218, 238, 145, 64, 67, 14, 152, 62, 87, 231, 175, 62, 36, 143, 62, 61, 21, 141, 174, 61, 5, 230, 210, 60, 61, 166, 180, 60, 53, 144, 237, 60, 179, 125, 108, 61, 169, 22, 135, 61, 56, 177, 83, 61, 82, 176, 248, 60, 26, 179, 251, 60, 202, 4, 33, 64, 202, 180, 118, 63, 250, 21, 143, 62, 235, 254, 18, 62, 172, 46, 232, 61, 100, 71, 5, 62, 32, 15, 83, 61, 10, 218, 168, 60, 102, 21, 151, 61, 236, 203, 156, 61, 40, 31, 190, 61, 126, 108, 161, 60, 74, 150, 41, 61, 76, 164, 216, 64, 209, 191, 23, 63, 150, 81, 99, 63, 28, 159, 114, 62, 219, 225, 134, 62, 51, 163, 170, 61, 111, 104, 145, 61, 36, 91, 215, 60, 107, 23, 186, 61, 222, 46, 24, 62, 29, 199, 26, 62, 159, 228, 18, 61, 223, 214, 123, 61, 101, 188, 206, 62, 37, 70, 139, 61, 53, 215, 131, 60, 18, 36, 48, 61, 197, 6, 59, 61, 0, 131, 172, 60, 174, 85, 25, 60, 137, 108, 64, 60, 12, 78, 124, 60, 255, 130, 82, 60, 182, 22, 116, 60, 106, 204, 49, 60, 22, 143, 10, 60, 203, 119, 107, 62, 24, 118, 42, 61, 234, 70, 220, 60, 137, 134, 157, 61, 150, 177, 103, 61, 209, 169, 249, 60, 191, 98, 166, 60, 255, 103, 163, 60, 172, 172, 57, 60, 97, 133, 157, 60, 91, 98, 36, 60, 50, 152, 99, 60, 110, 8, 69, 60, 231, 66, 41, 62, 186, 96, 57, 61, 130, 10, 212, 60, 62, 62, 72, 61, 172, 143, 71, 61, 234, 195, 28, 61, 109, 111, 226, 60, 166, 43, 252, 60, 155, 51, 175, 60, 178, 156, 223, 60, 2, 104, 152, 60, 172, 118, 200, 60, 84, 176, 169, 60, 72, 46, 75, 64, 62, 84, 31, 62, 95, 205, 137, 62, 67, 79, 81, 62, 3, 72, 149, 61, 55, 222, 108, 61, 159, 137, 234, 60, 230, 153, 197, 60, 163, 206, 53, 61, 195, 16, 53, 61, 186, 178, 186, 60, 167, 198, 211, 60, 194, 16, 140, 60, 215, 218, 216, 62, 60, 126, 89, 61, 74, 191, 78, 61, 232, 60, 151, 61, 147, 193, 4, 61, 244, 16, 56, 61, 195, 250, 232, 60, 190, 96, 4, 61, 173, 57, 238, 60, 102, 147, 70, 61, 230, 116, 201, 60, 96, 194, 170, 60, 217, 70, 179, 60, 109, 0, 219, 62, 18, 196, 225, 61, 188, 123, 163, 61, 78, 63, 16, 62, 46, 28, 96, 61, 51, 18, 147, 61, 204, 206, 39, 61, 14, 114, 83, 61, 154, 110, 79, 61, 180, 3, 99, 61, 244, 241, 21, 61, 142, 167, 15, 61, 247, 29, 164, 60, 113, 224, 99, 63, 99, 211, 135, 61, 207, 84, 174, 60, 202, 102, 253, 61, 154, 201, 36, 61, 235, 96, 193, 61, 221, 193, 168, 60, 39, 173, 202, 60, 72, 242, 205, 60, 14, 252, 48, 60, 69, 135, 141, 60, 51, 109, 96, 60, 212, 203, 170, 60, 229, 254, 189, 62, 135, 41, 41, 61, 21, 230, 201, 60, 193, 152, 244, 60, 171, 154, 190, 60, 106, 249, 32, 61, 131, 146, 125, 60, 154, 101, 134, 60, 220, 251, 138, 60, 68, 56, 85, 60, 3, 241, 122, 60, 17, 253, 148, 60, 112, 84, 131, 60, 92, 122, 88, 62, 90, 66, 126, 61, 109, 183, 12, 61, 61, 107, 129, 61, 85, 166, 26, 61, 69, 129, 17, 61, 182, 34, 160, 60, 205, 237, 208, 60, 220, 89, 220, 60, 211, 127, 194, 60, 128, 188, 189, 60, 165, 70, 204, 60, 116, 243, 176, 60, 119, 120, 139, 63, 135, 65, 214, 61, 110, 238, 69, 61, 137, 52, 243, 61, 83, 93, 173, 61, 200, 242, 177, 61, 156, 142, 176, 60, 208, 212, 203, 60, 176, 117, 33, 61, 71, 176, 153, 61, 243, 127, 214, 60, 160, 126, 217, 60, 245, 170, 14, 61, 164, 169, 26, 63, 168, 10, 185, 61, 18, 36, 19, 61, 249, 123, 156, 61, 179, 163, 92, 61, 96, 49, 36, 61, 166, 248, 179, 60, 47, 99, 6, 61, 214, 172, 5, 61, 179, 58, 26, 61, 76, 53, 224, 60, 154, 218, 210, 60, 116, 12, 103, 60, 59, 46, 174, 62, 182, 94, 186, 61, 130, 19, 93, 61, 170, 180, 121, 61, 37, 53, 88, 61, 147, 36, 75, 61, 227, 112, 6, 61, 72, 183, 37, 61, 228, 63, 46, 61, 114, 185, 31, 61, 111, 186, 11, 61, 154, 11, 234, 60, 173, 84, 159, 60, 202, 109, 37, 62, 97, 162, 63, 60, 75, 198, 29, 60, 56, 219, 41, 60, 226, 79, 251, 59, 20, 120, 253, 59, 91, 150, 237, 59, 234, 69, 4, 60, 200, 179, 8, 60, 174, 245, 218, 59, 197, 68, 197, 59, 13, 89, 186, 59, 182, 186, 235, 59, 125, 18, 2, 61, 66, 252, 78, 60, 208, 252, 70, 60, 105, 92, 100, 60, 106, 116, 89, 60, 138, 238, 89, 60, 85, 255, 81, 60, 74, 244, 77, 60, 2, 175, 52, 60, 203, 54, 70, 60, 225, 68, 83, 60, 84, 34, 51, 60, 166, 95, 74, 60, 24, 47, 139, 61, 124, 203, 225, 60, 51, 183, 200, 60, 132, 5, 240, 60, 145, 78, 237, 60, 242, 69, 251, 60, 197, 208, 231, 60, 168, 149, 251, 60, 100, 144, 230, 60, 114, 175, 173, 60, 8, 51, 197, 60, 130, 129, 183, 60, 145, 136, 148, 60, 71, 78, 125, 62, 167, 147, 91, 60, 221, 247, 53, 60, 134, 151, 22, 60, 72, 126, 7, 60, 250, 60, 54, 60, 22, 236, 3, 60, 171, 204, 233, 59, 81, 23, 219, 59, 54, 35, 213, 59, 84, 236, 241, 59, 29, 5, 226, 59, 59, 48, 204, 59, 248, 6, 107, 61, 186, 253, 134, 60, 39, 112, 119, 60, 235, 199, 135, 60, 155, 131, 115, 60, 131, 252, 131, 60, 11, 213, 128, 60, 45, 47, 98, 60, 103, 55, 99, 60, 248, 57, 113, 60, 20, 175, 69, 60, 119, 96, 76, 60, 19, 211, 87, 60, 44, 206, 101, 61, 45, 111, 209, 60, 121, 115, 225, 60, 69, 234, 177, 60, 67, 42, 210, 60, 223, 77, 221, 60, 146, 154, 5, 61, 252, 55, 186, 60, 63, 44, 209, 60, 120, 92, 191, 60, 18, 71, 201, 60, 32, 37, 174, 60, 176, 18, 198, 60, 57, 252, 153, 62, 15, 241, 97, 60, 168, 157, 44, 60, 124, 93, 73, 60, 22, 133, 40, 60, 98, 198, 14, 60, 58, 113, 45, 60, 99, 204, 31, 60, 43, 186, 11, 60, 55, 251, 17, 60, 140, 192, 22, 60, 172, 195, 17, 60, 49, 80, 22, 60, 218, 64, 119, 61, 79, 155, 201, 60, 162, 222, 173, 60, 23, 134, 122, 60, 183, 104, 131, 60, 235, 96, 145, 60, 241, 161, 164, 60, 4, 98, 140, 60, 146, 158, 133, 60, 87, 9, 136, 60, 57, 231, 125, 60, 63, 78, 141, 60, 4, 53, 68, 60, 229, 75, 160, 61, 50, 244, 4, 61, 89, 140, 222, 60, 42, 128, 245, 60, 5, 124, 193, 60, 63, 255, 237, 60, 189, 168, 9, 61, 71, 82, 243, 60, 131, 254, 221, 60, 149, 46, 225, 60, 240, 51, 198, 60, 85, 220, 238, 60, 26, 174, 211, 60, 215, 37, 72, 62, 8, 48, 71, 60, 199, 253, 247, 59, 244, 99, 19, 60, 173, 32, 14, 60, 182, 124, 0, 60, 149, 22, 205, 59, 113, 233, 5, 60, 230, 204, 21, 60, 182, 107, 12, 60, 105, 195, 231, 59, 146, 79, 193, 59, 245, 199, 218, 59, 215, 167, 107, 61, 9, 151, 178, 60, 145, 176, 136, 60, 224, 8, 89, 60, 37, 53, 72, 60, 42, 91, 131, 60, 104, 23, 112, 60, 196, 158, 124, 60, 145, 248, 124, 60, 64, 67, 80, 60, 107, 64, 35, 60, 182, 238, 67, 60, 243, 95, 53, 60, 75, 72, 90, 61, 247, 246, 230, 60, 101, 0, 208, 60, 159, 5, 233, 60, 61, 28, 216, 60, 143, 185, 240, 60, 238, 50, 234, 60, 148, 23, 238, 60, 10, 118, 226, 60, 21, 64, 215, 60, 165, 64, 162, 60, 110, 235, 160, 60, 190, 46, 137, 60, 60, 235, 226, 62, 81, 197, 250, 60, 61, 218, 130, 60, 73, 100, 0, 61, 239, 41, 225, 60, 3, 186, 129, 60, 255, 135, 86, 60, 106, 120, 106, 60, 189, 110, 95, 60, 62, 228, 148, 60, 108, 192, 87, 60, 253, 184, 196, 59, 202, 177, 175, 60, 247, 33, 33, 62, 25, 9, 245, 60, 127, 10, 178, 60, 51, 122, 230, 60, 89, 80, 213, 60, 214, 197, 157, 60, 169, 142, 186, 60, 100, 6, 176, 60, 175, 172, 144, 60, 120, 16, 148, 60, 2, 40, 142, 60, 65, 155, 93, 60, 199, 18, 155, 60, 91, 124, 39, 62, 39, 1, 97, 61, 201, 42, 0, 61, 84, 7, 37, 61, 243, 11, 45, 61, 157, 2, 27, 61, 53, 124, 18, 61, 25, 147, 78, 61, 236, 170, 234, 60, 103, 199, 254, 60, 20, 139, 13, 61, 180, 7, 215, 60, 235, 76, 252, 60, 157, 111, 200, 62, 228, 18, 207, 60, 217, 200, 91, 60, 238, 177, 123, 60, 22, 168, 53, 60, 196, 119, 35, 60, 9, 75, 246, 59, 20, 255, 54, 60, 154, 179, 40, 60, 151, 66, 39, 60, 246, 135, 233, 59, 133, 108, 234, 59, 2, 196, 31, 60, 77, 205, 34, 61, 53, 166, 145, 60, 100, 207, 151, 60, 101, 88, 112, 60, 218, 121, 133, 60, 110, 247, 152, 60, 67, 79, 119, 60, 109, 23, 105, 60, 112, 81, 125, 60, 220, 255, 97, 60, 201, 209, 87, 60, 189, 120, 58, 60, 64, 120, 51, 60, 54, 77, 142, 61, 6, 179, 9, 61, 214, 122, 4, 61, 76, 211, 47, 61, 59, 204, 1, 61, 152, 240, 33, 61, 65, 184, 255, 60, 3, 126, 251, 60, 157, 160, 8, 61, 83, 168, 16, 61, 31, 128, 181, 60, 250, 47, 185, 60, 133, 166, 231, 60, 58, 193, 227, 62, 195, 179, 18, 60, 118, 5, 117, 60, 43, 172, 165, 60, 54, 87, 19, 60, 241, 46, 13, 60, 15, 29, 254, 59, 145, 6, 13, 60, 41, 85, 210, 59, 185, 225, 30, 60, 76, 55, 228, 59, 70, 212, 245, 59, 157, 191, 8, 60, 168, 141, 37, 61, 249, 161, 104, 60, 193, 71, 138, 60, 187, 169, 159, 60, 242, 228, 129, 60, 235, 219, 65, 60, 24, 102, 89, 60, 123, 229, 138, 60, 0, 245, 141, 60, 182, 232, 149, 60, 9, 30, 88, 60, 39, 158, 109, 60, 162, 88, 135, 60, 228, 108, 129, 61, 206, 117, 221, 60, 19, 226, 3, 61, 139, 90, 9, 61, 105, 157, 227, 60, 96, 31, 206, 60, 110, 57, 221, 60, 213, 156, 225, 60, 212, 153, 248, 60, 44, 18, 190, 60, 87, 214, 168, 60, 197, 133, 149, 60, 143, 136, 216, 60, 57, 23, 41, 63, 120, 74, 27, 61, 5, 210, 165, 60, 96, 217, 137, 60, 225, 108, 185, 60, 188, 191, 96, 60, 20, 4, 154, 60, 97, 100, 60, 60, 237, 250, 42, 60, 10, 181, 35, 60, 224, 230, 25, 60, 230, 202, 225, 59, 204, 73, 68, 60, 40, 247, 17, 62, 169, 36, 50, 61, 164, 144, 216, 60, 87, 217, 184, 60, 204, 156, 25, 61, 62, 255, 204, 60, 122, 35, 194, 60, 14, 222, 144, 60, 196, 159, 135, 60, 173, 124, 132, 60, 5, 64, 163, 60, 137, 75, 113, 60, 169, 39, 212, 60, 89, 91, 132, 62, 182, 31, 151, 61, 87, 76, 122, 61, 6, 204, 61, 61, 151, 26, 118, 61, 10, 26, 47, 61, 34, 143, 68, 61, 78, 4, 217, 60, 60, 203, 242, 60, 63, 103, 181, 60, 196, 159, 238, 60, 205, 159, 198, 60, 52, 186, 58, 61, 109, 222, 209, 62, 121, 211, 164, 60, 180, 144, 28, 61, 40, 237, 73, 60, 99, 163, 102, 60, 230, 111, 132, 60, 26, 61, 38, 60, 1, 17, 238, 59, 71, 94, 30, 60, 116, 145, 61, 60, 137, 207, 42, 60, 179, 147, 253, 59, 220, 175, 240, 59, 170, 132, 126, 63, 157, 142, 20, 62, 235, 118, 140, 61, 241, 37, 25, 61, 90, 139, 82, 61, 191, 202, 17, 61, 65, 240, 15, 61, 14, 242, 152, 60, 111, 166, 172, 60, 224, 213, 166, 60, 32, 120, 88, 60, 217, 234, 131, 60, 75, 164, 135, 60, 168, 23, 43, 63, 76, 42, 222, 61, 255, 236, 131, 61, 179, 80, 112, 61, 20, 199, 81, 61, 109, 102, 19, 61, 182, 114, 71, 61, 128, 35, 229, 60, 204, 113, 248, 60, 15, 20, 30, 61, 240, 37, 15, 61, 133, 34, 218, 60, 236, 210, 204, 60, 175, 134, 134, 63, 48, 114, 2, 62, 213, 56, 217, 61, 242, 22, 5, 61, 235, 248, 154, 61, 225, 152, 200, 60, 162, 202, 15, 61, 106, 166, 156, 60, 192, 233, 85, 60, 21, 219, 140, 60, 130, 228, 190, 60, 136, 88, 197, 60, 84, 100, 94, 60, 57, 110, 240, 62, 90, 174, 105, 61, 162, 76, 123, 61, 232, 152, 190, 60, 136, 89, 79, 61, 118, 247, 198, 60, 92, 185, 239, 60, 127, 49, 219, 60, 23, 22, 178, 60, 151, 181, 135, 60, 225, 5, 138, 60, 254, 144, 217, 60, 221, 161, 143, 60, 101, 74, 74, 64, 192, 208, 43, 63, 150, 224, 245, 61, 165, 214, 120, 61, 45, 145, 28, 62, 63, 65, 97, 61, 240, 53, 48, 61, 180, 221, 49, 61, 210, 97, 236, 60, 68, 141, 248, 60, 117, 236, 19, 61, 97, 166, 44, 61, 174, 18, 27, 61, 245, 115, 251, 62, 160, 96, 98, 61, 85, 232, 26, 60, 253, 135, 169, 60, 216, 234, 167, 60, 71, 24, 117, 60, 48, 135, 116, 60, 44, 102, 29, 60, 188, 140, 24, 60, 66, 199, 27, 60, 24, 109, 215, 59, 89, 96, 62, 60, 107, 101, 234, 59, 51, 24, 167, 62, 148, 95, 150, 61, 174, 92, 57, 61, 128, 180, 12, 61, 36, 190, 248, 60, 169, 118, 228, 60, 220, 120, 247, 60, 225, 162, 187, 60, 111, 115, 191, 60, 114, 53, 9, 61, 90, 243, 202, 60, 183, 222, 163, 60, 206, 3, 126, 60, 36, 193, 243, 62, 64, 210, 93, 62, 131, 21, 128, 61, 188, 12, 76, 61, 56, 0, 42, 61, 18, 62, 129, 61, 19, 252, 48, 61, 115, 232, 99, 61]).concat([152, 199, 47, 61, 184, 54, 59, 61, 67, 199, 45, 61, 197, 12, 33, 61, 148, 33, 5, 61, 133, 32, 25, 63, 228, 54, 162, 61, 237, 60, 2, 61, 187, 251, 158, 61, 116, 58, 94, 61, 159, 244, 136, 61, 17, 217, 19, 61, 171, 148, 255, 60, 119, 152, 221, 60, 251, 250, 204, 60, 50, 54, 94, 60, 145, 32, 104, 60, 2, 176, 9, 60, 163, 246, 56, 63, 17, 26, 110, 62, 150, 221, 57, 61, 1, 86, 29, 61, 27, 185, 21, 61, 127, 250, 46, 61, 68, 104, 204, 60, 13, 78, 6, 61, 166, 119, 51, 61, 16, 239, 13, 61, 150, 138, 109, 60, 214, 183, 243, 59, 103, 60, 168, 60, 151, 138, 252, 62, 161, 134, 89, 62, 17, 12, 183, 61, 135, 149, 183, 61, 179, 47, 239, 61, 164, 174, 200, 61, 201, 224, 106, 61, 103, 169, 144, 61, 131, 191, 75, 61, 108, 12, 76, 61, 179, 213, 50, 61, 221, 102, 213, 60, 206, 117, 242, 60, 108, 35, 136, 62, 20, 20, 134, 61, 2, 105, 39, 61, 21, 1, 18, 61, 200, 190, 191, 60, 215, 69, 149, 60, 198, 190, 163, 60, 218, 153, 88, 60, 33, 109, 39, 60, 44, 89, 34, 60, 125, 133, 46, 60, 85, 7, 19, 60, 183, 251, 27, 60, 119, 135, 2, 62, 195, 68, 15, 61, 63, 13, 7, 61, 77, 251, 1, 61, 186, 196, 208, 60, 115, 92, 143, 60, 98, 22, 185, 60, 190, 7, 174, 60, 51, 121, 123, 60, 25, 232, 131, 60, 109, 96, 132, 60, 167, 108, 56, 60, 10, 103, 60, 60, 175, 215, 211, 61, 191, 16, 68, 61, 238, 23, 64, 61, 172, 149, 32, 61, 237, 23, 1, 61, 118, 194, 222, 60, 62, 130, 16, 61, 116, 74, 209, 60, 98, 126, 200, 60, 144, 35, 201, 60, 35, 173, 207, 60, 212, 35, 182, 60, 160, 201, 190, 60, 123, 31, 155, 62, 80, 95, 53, 60, 24, 48, 91, 60, 28, 123, 18, 60, 144, 220, 8, 60, 52, 144, 5, 60, 44, 242, 218, 59, 245, 227, 244, 59, 107, 174, 224, 59, 135, 205, 221, 59, 186, 237, 250, 59, 115, 149, 230, 59, 184, 139, 223, 59, 30, 100, 48, 61, 146, 245, 129, 60, 198, 231, 131, 60, 110, 108, 108, 60, 244, 255, 104, 60, 78, 104, 104, 60, 34, 75, 102, 60, 231, 33, 67, 60, 197, 169, 82, 60, 213, 152, 70, 60, 128, 5, 117, 60, 3, 171, 102, 60, 174, 104, 74, 60, 218, 183, 141, 61, 246, 184, 1, 61, 68, 193, 235, 60, 99, 177, 216, 60, 142, 69, 217, 60, 4, 195, 214, 60, 120, 144, 238, 60, 33, 51, 216, 60, 231, 243, 216, 60, 95, 18, 165, 60, 34, 53, 212, 60, 245, 63, 218, 60, 117, 184, 212, 60, 132, 49, 168, 62, 227, 232, 72, 60, 91, 174, 82, 60, 224, 2, 227, 59, 219, 62, 18, 60, 74, 90, 249, 59, 245, 125, 17, 60, 25, 220, 221, 59, 167, 247, 241, 59, 97, 24, 1, 60, 94, 137, 3, 60, 182, 248, 241, 59, 61, 60, 228, 59, 52, 202, 247, 60, 165, 1, 129, 60, 93, 188, 104, 60, 180, 13, 76, 60, 87, 49, 105, 60, 189, 102, 85, 60, 104, 118, 80, 60, 219, 30, 66, 60, 252, 73, 51, 60, 234, 181, 71, 60, 252, 54, 69, 60, 16, 215, 69, 60, 187, 251, 62, 60, 117, 159, 99, 61, 121, 143, 0, 61, 121, 103, 7, 61, 87, 103, 222, 60, 35, 14, 1, 61, 162, 93, 208, 60, 253, 84, 2, 61, 134, 88, 1, 61, 64, 223, 241, 60, 143, 131, 222, 60, 29, 16, 237, 60, 242, 134, 206, 60, 205, 191, 169, 60, 181, 203, 169, 62, 2, 32, 136, 60, 205, 80, 98, 60, 140, 104, 17, 60, 62, 253, 38, 60, 97, 204, 32, 60, 28, 70, 26, 60, 134, 162, 14, 60, 185, 99, 242, 59, 215, 38, 16, 60, 206, 242, 13, 60, 205, 128, 209, 59, 94, 174, 199, 59, 174, 62, 48, 61, 193, 113, 165, 60, 247, 112, 142, 60, 126, 225, 112, 60, 101, 113, 98, 60, 29, 50, 86, 60, 176, 184, 129, 60, 72, 72, 131, 60, 173, 120, 103, 60, 147, 236, 91, 60, 242, 43, 103, 60, 47, 38, 135, 60, 126, 126, 64, 60, 146, 191, 167, 61, 137, 146, 29, 61, 13, 26, 11, 61, 90, 64, 1, 61, 93, 64, 230, 60, 120, 200, 215, 60, 109, 114, 240, 60, 156, 153, 191, 60, 61, 241, 211, 60, 149, 12, 212, 60, 35, 60, 212, 60, 89, 234, 218, 60, 235, 136, 194, 60, 180, 13, 71, 62, 70, 50, 151, 60, 77, 186, 70, 60, 202, 215, 91, 60, 44, 84, 25, 60, 228, 207, 14, 60, 26, 8, 219, 59, 52, 162, 17, 60, 189, 171, 27, 60, 246, 115, 33, 60, 112, 229, 193, 59, 144, 107, 221, 59, 165, 28, 3, 60, 98, 101, 240, 61, 240, 154, 186, 61, 127, 229, 92, 61, 28, 56, 29, 61, 131, 184, 235, 60, 68, 178, 160, 60, 155, 118, 179, 60, 95, 81, 151, 60, 123, 221, 123, 60, 242, 100, 103, 60, 8, 4, 119, 60, 117, 221, 115, 60, 20, 189, 130, 60, 168, 240, 78, 62, 29, 27, 16, 62, 93, 192, 170, 61, 33, 111, 109, 61, 15, 237, 80, 61, 23, 106, 119, 61, 130, 102, 85, 61, 45, 233, 55, 61, 211, 189, 19, 61, 177, 231, 0, 61, 169, 77, 239, 60, 35, 129, 179, 60, 61, 234, 239, 60, 95, 9, 163, 61, 98, 172, 116, 60, 191, 30, 107, 60, 54, 242, 85, 60, 216, 163, 97, 60, 108, 64, 237, 59, 7, 36, 245, 59, 251, 128, 237, 59, 26, 234, 2, 60, 250, 90, 29, 60, 10, 182, 20, 60, 184, 104, 160, 59, 174, 99, 231, 59, 163, 165, 244, 60, 55, 246, 149, 60, 66, 16, 76, 60, 58, 149, 84, 60, 135, 170, 87, 60, 183, 108, 86, 60, 88, 21, 56, 60, 51, 19, 51, 60, 237, 133, 73, 60, 41, 230, 62, 60, 144, 70, 82, 60, 138, 179, 75, 60, 253, 107, 64, 60, 200, 180, 111, 61, 100, 22, 22, 61, 8, 84, 206, 60, 1, 170, 210, 60, 59, 30, 210, 60, 230, 116, 221, 60, 157, 5, 197, 60, 80, 158, 205, 60, 191, 206, 197, 60, 114, 50, 226, 60, 94, 211, 194, 60, 232, 129, 194, 60, 57, 122, 198, 60, 168, 174, 47, 62, 86, 123, 183, 60, 241, 103, 93, 61, 73, 13, 237, 60, 132, 203, 120, 60, 194, 150, 108, 60, 101, 223, 61, 60, 56, 167, 18, 60, 125, 96, 17, 60, 222, 121, 2, 60, 157, 159, 5, 60, 244, 102, 222, 59, 83, 214, 248, 59, 177, 122, 94, 61, 120, 96, 168, 60, 156, 181, 178, 60, 35, 107, 149, 60, 156, 22, 143, 60, 96, 123, 149, 60, 73, 82, 129, 60, 89, 123, 116, 60, 42, 151, 101, 60, 165, 190, 134, 60, 148, 96, 93, 60, 209, 60, 27, 60, 77, 116, 43, 60, 41, 72, 105, 61, 141, 114, 10, 61, 196, 183, 34, 61, 157, 18, 7, 61, 104, 236, 238, 60, 13, 142, 22, 61, 228, 15, 11, 61, 183, 92, 185, 60, 46, 215, 195, 60, 130, 179, 244, 60, 40, 11, 241, 60, 255, 114, 150, 60, 96, 115, 179, 60, 100, 240, 175, 62, 154, 169, 104, 61, 227, 160, 34, 61, 125, 191, 0, 61, 145, 247, 162, 60, 155, 126, 70, 60, 196, 245, 65, 60, 249, 165, 70, 60, 187, 64, 45, 60, 198, 128, 202, 59, 250, 50, 14, 60, 4, 230, 49, 60, 189, 180, 27, 60, 147, 139, 76, 62, 255, 54, 234, 61, 17, 83, 95, 61, 68, 58, 48, 61, 125, 163, 22, 61, 217, 196, 175, 60, 203, 85, 198, 60, 206, 72, 148, 60, 241, 232, 98, 60, 141, 18, 117, 60, 161, 84, 64, 60, 195, 72, 96, 60, 39, 19, 137, 60, 57, 158, 203, 62, 81, 215, 69, 62, 176, 213, 214, 61, 101, 69, 147, 61, 104, 158, 145, 61, 123, 250, 43, 61, 237, 204, 9, 61, 104, 202, 31, 61, 224, 96, 219, 60, 17, 66, 179, 60, 236, 1, 192, 60, 143, 132, 250, 60, 23, 184, 214, 60, 205, 159, 162, 62, 50, 167, 107, 61, 143, 136, 234, 60, 163, 57, 180, 60, 167, 9, 199, 60, 31, 251, 154, 60, 122, 82, 57, 60, 210, 39, 37, 60, 164, 160, 147, 60, 190, 62, 62, 60, 188, 206, 49, 60, 242, 188, 46, 60, 238, 73, 84, 60, 174, 205, 205, 61, 201, 202, 227, 60, 100, 80, 186, 60, 32, 231, 157, 60, 39, 126, 133, 60, 86, 229, 159, 60, 254, 133, 137, 60, 168, 171, 154, 60, 89, 134, 121, 60, 205, 136, 73, 60, 226, 245, 71, 60, 130, 245, 3, 60, 243, 163, 150, 60, 131, 145, 146, 62, 192, 46, 39, 62, 89, 178, 142, 61, 104, 10, 151, 61, 193, 24, 59, 61, 8, 127, 53, 61, 255, 39, 50, 61, 136, 43, 63, 61, 204, 238, 28, 61, 49, 175, 7, 61, 49, 137, 201, 60, 216, 132, 12, 61, 3, 242, 176, 60, 22, 215, 184, 62, 194, 241, 181, 61, 127, 75, 250, 60, 186, 172, 157, 60, 79, 132, 57, 60, 79, 225, 111, 60, 86, 11, 13, 60, 89, 187, 6, 60, 29, 231, 36, 60, 250, 165, 204, 59, 139, 132, 15, 60, 1, 194, 202, 59, 18, 204, 17, 60, 65, 53, 210, 62, 89, 140, 55, 62, 143, 74, 196, 61, 146, 49, 142, 61, 69, 92, 106, 61, 241, 212, 9, 61, 56, 65, 176, 60, 135, 228, 156, 60, 99, 197, 158, 60, 135, 86, 71, 60, 199, 20, 76, 60, 158, 34, 146, 60, 185, 126, 150, 60, 201, 163, 128, 62, 240, 104, 69, 62, 78, 110, 237, 61, 113, 233, 189, 61, 248, 80, 165, 61, 20, 78, 129, 61, 133, 3, 84, 61, 120, 38, 21, 61, 31, 115, 212, 60, 125, 122, 157, 60, 133, 93, 178, 60, 36, 17, 223, 60, 131, 88, 19, 61, 227, 222, 214, 62, 163, 56, 253, 61, 116, 155, 223, 61, 76, 33, 46, 62, 176, 188, 176, 61, 189, 101, 18, 61, 77, 108, 103, 61, 175, 159, 17, 61, 114, 237, 107, 60, 26, 16, 11, 61, 130, 178, 106, 60, 198, 96, 143, 60, 209, 120, 10, 61, 223, 177, 70, 63, 114, 69, 154, 62, 212, 157, 72, 62, 97, 194, 162, 61, 223, 130, 204, 61, 170, 126, 248, 61, 64, 47, 157, 61, 206, 6, 117, 61, 113, 86, 230, 60, 238, 219, 207, 60, 38, 148, 186, 60, 4, 44, 130, 60, 239, 0, 140, 60, 50, 232, 215, 62, 252, 227, 17, 62, 170, 175, 50, 62, 85, 146, 69, 62, 238, 226, 71, 62, 244, 98, 185, 61, 35, 124, 93, 61, 84, 204, 141, 61, 238, 27, 139, 61, 77, 109, 74, 61, 222, 63, 4, 61, 139, 63, 0, 61, 177, 125, 12, 61, 237, 164, 156, 62, 171, 76, 178, 61, 130, 148, 88, 61, 61, 251, 249, 60, 106, 69, 88, 60, 134, 235, 12, 60, 81, 175, 129, 60, 249, 39, 21, 60, 221, 116, 19, 60, 192, 135, 229, 59, 11, 27, 248, 59, 242, 132, 16, 60, 217, 121, 32, 60, 150, 89, 131, 62, 180, 126, 5, 62, 189, 47, 148, 61, 249, 34, 37, 61, 161, 155, 100, 61, 7, 185, 208, 60, 107, 174, 11, 61, 197, 148, 203, 60, 99, 179, 162, 60, 77, 43, 91, 60, 28, 29, 68, 60, 6, 118, 82, 60, 10, 84, 215, 59, 222, 31, 243, 62, 162, 96, 51, 62, 214, 122, 216, 61, 81, 150, 118, 61, 133, 132, 139, 61, 163, 139, 71, 61, 24, 147, 205, 61, 118, 162, 29, 61, 167, 222, 188, 60, 0, 11, 46, 61, 56, 94, 1, 61, 6, 124, 200, 60, 18, 137, 204, 60, 164, 192, 39, 62, 212, 235, 208, 60, 183, 175, 136, 60, 93, 50, 152, 60, 150, 46, 179, 60, 157, 177, 168, 60, 22, 96, 76, 60, 253, 216, 28, 60, 97, 163, 16, 60, 135, 15, 26, 60, 145, 63, 8, 60, 60, 175, 11, 60, 113, 14, 96, 60, 186, 93, 85, 61, 146, 76, 228, 60, 65, 7, 166, 60, 164, 6, 245, 60, 82, 82, 241, 60, 47, 223, 151, 60, 164, 68, 172, 60, 43, 132, 138, 60, 187, 175, 101, 60, 131, 43, 99, 60, 82, 203, 64, 60, 98, 105, 99, 60, 215, 198, 104, 60, 109, 252, 184, 61, 211, 66, 57, 61, 68, 10, 2, 61, 238, 97, 9, 61, 43, 79, 19, 61, 208, 139, 162, 60, 207, 168, 254, 60, 130, 240, 241, 60, 199, 182, 15, 61, 13, 236, 216, 60, 217, 48, 203, 60, 149, 32, 234, 60, 227, 16, 199, 60, 83, 201, 24, 62, 96, 25, 44, 61, 57, 111, 73, 60, 150, 180, 18, 61, 17, 162, 72, 61, 150, 177, 2, 61, 28, 78, 56, 60, 210, 164, 56, 60, 173, 168, 7, 60, 197, 210, 96, 60, 129, 254, 120, 60, 15, 102, 31, 60, 149, 156, 67, 60, 107, 30, 143, 61, 69, 5, 22, 61, 210, 25, 3, 61, 154, 48, 224, 60, 39, 105, 178, 60, 137, 89, 188, 60, 219, 190, 154, 60, 136, 18, 98, 60, 114, 236, 133, 60, 8, 202, 184, 60, 164, 120, 133, 60, 180, 190, 92, 60, 178, 179, 105, 60, 28, 188, 0, 62, 31, 53, 32, 61, 175, 95, 22, 61, 62, 235, 42, 61, 21, 44, 244, 60, 76, 235, 241, 60, 72, 253, 220, 60, 174, 73, 202, 60, 48, 185, 198, 60, 236, 222, 21, 61, 40, 62, 242, 60, 125, 122, 199, 60, 248, 40, 203, 60, 164, 188, 74, 62, 211, 243, 125, 61, 83, 101, 3, 61, 92, 54, 132, 61, 210, 239, 152, 61, 87, 183, 250, 60, 141, 127, 154, 60, 87, 168, 69, 60, 58, 130, 132, 60, 69, 193, 136, 60, 250, 245, 88, 60, 230, 252, 26, 60, 149, 116, 98, 60, 96, 21, 141, 61, 145, 113, 33, 61, 227, 164, 223, 60, 41, 166, 221, 60, 203, 111, 159, 60, 37, 223, 132, 60, 226, 132, 174, 60, 235, 232, 122, 60, 31, 82, 150, 60, 123, 25, 125, 60, 114, 145, 123, 60, 247, 125, 131, 60, 93, 6, 110, 60, 35, 2, 175, 61, 218, 109, 63, 61, 45, 117, 43, 61, 167, 189, 62, 61, 71, 134, 26, 61, 3, 78, 15, 61, 187, 183, 17, 61, 251, 65, 235, 60, 140, 200, 1, 61, 183, 1, 236, 60, 52, 221, 240, 60, 209, 158, 213, 60, 152, 179, 233, 60, 177, 251, 15, 64, 29, 204, 199, 61, 103, 207, 114, 60, 66, 24, 202, 60, 119, 179, 142, 60, 113, 187, 70, 60, 177, 198, 109, 60, 223, 148, 15, 60, 217, 16, 12, 60, 72, 124, 59, 60, 69, 239, 27, 60, 159, 178, 249, 59, 72, 166, 193, 59, 11, 146, 85, 61, 137, 46, 223, 60, 241, 155, 200, 60, 238, 222, 140, 60, 237, 129, 213, 60, 114, 34, 140, 60, 171, 173, 94, 60, 94, 118, 142, 60, 190, 128, 139, 60, 112, 68, 139, 60, 182, 224, 122, 60, 20, 224, 121, 60, 40, 188, 70, 60, 179, 93, 124, 61, 38, 156, 61, 61, 201, 137, 66, 61, 97, 182, 199, 60, 227, 203, 61, 61, 231, 151, 11, 61, 194, 29, 233, 60, 190, 150, 14, 61, 138, 99, 4, 61, 10, 161, 249, 60, 168, 74, 219, 60, 29, 221, 217, 60, 208, 200, 182, 60, 155, 33, 52, 62, 69, 101, 175, 60, 146, 213, 66, 60, 91, 201, 61, 60, 4, 220, 129, 60, 220, 242, 61, 60, 197, 150, 38, 60, 162, 5, 36, 60, 19, 202, 7, 60, 6, 98, 46, 60, 67, 119, 24, 60, 165, 40, 229, 59, 62, 97, 61, 60, 183, 255, 57, 61, 155, 114, 196, 60, 179, 227, 138, 60, 140, 11, 145, 60, 49, 173, 107, 60, 188, 30, 103, 60, 118, 203, 99, 60, 19, 156, 125, 60, 226, 142, 122, 60, 224, 124, 115, 60, 69, 142, 122, 60, 205, 105, 87, 60, 0, 233, 122, 60, 181, 197, 162, 61, 191, 172, 55, 61, 162, 104, 43, 61, 229, 249, 7, 61, 4, 209, 249, 60, 207, 19, 234, 60, 63, 49, 6, 61, 109, 216, 231, 60, 22, 245, 225, 60, 3, 165, 203, 60, 169, 109, 185, 60, 51, 56, 193, 60, 182, 126, 23, 61, 77, 114, 152, 62, 144, 183, 44, 60, 83, 111, 86, 60, 207, 88, 46, 60, 151, 178, 54, 60, 16, 180, 44, 60, 23, 109, 204, 59, 110, 78, 253, 59, 246, 84, 236, 59, 206, 100, 242, 59, 9, 139, 201, 59, 229, 138, 207, 59, 25, 69, 211, 59, 128, 95, 8, 61, 202, 177, 106, 60, 122, 167, 132, 60, 96, 137, 131, 60, 152, 3, 104, 60, 121, 15, 120, 60, 82, 194, 96, 60, 192, 16, 104, 60, 5, 229, 117, 60, 132, 175, 115, 60, 163, 109, 107, 60, 198, 73, 102, 60, 102, 135, 83, 60, 113, 165, 125, 61, 114, 7, 244, 60, 0, 39, 216, 60, 114, 252, 243, 60, 120, 153, 226, 60, 98, 30, 217, 60, 233, 11, 225, 60, 102, 209, 188, 60, 152, 170, 223, 60, 26, 248, 212, 60, 26, 155, 192, 60, 222, 255, 212, 60, 45, 53, 188, 60, 18, 186, 129, 62, 50, 113, 16, 60, 139, 164, 16, 60, 176, 21, 81, 60, 248, 105, 31, 60, 10, 91, 114, 60, 64, 97, 34, 60, 205, 70, 20, 60, 38, 85, 14, 60, 213, 26, 0, 60, 242, 6, 10, 60, 115, 69, 243, 59, 169, 172, 8, 60, 61, 93, 63, 61, 184, 80, 168, 60, 248, 122, 130, 60, 213, 92, 129, 60, 140, 232, 137, 60, 18, 176, 131, 60, 64, 103, 144, 60, 110, 105, 90, 60, 51, 204, 134, 60, 252, 90, 101, 60, 60, 252, 119, 60, 236, 88, 72, 60, 99, 201, 84, 60, 225, 57, 143, 61, 2, 229, 243, 60, 144, 249, 231, 60, 189, 246, 225, 60, 162, 177, 235, 60, 113, 242, 249, 60, 187, 80, 19, 61, 159, 241, 10, 61, 55, 230, 226, 60, 177, 57, 178, 60, 62, 53, 230, 60, 220, 238, 185, 60, 117, 90, 211, 60, 80, 95, 154, 62, 250, 249, 55, 60, 95, 180, 65, 60, 245, 64, 18, 60, 46, 214, 253, 59, 56, 104, 2, 60, 85, 58, 10, 60, 207, 85, 0, 60, 8, 68, 229, 59, 31, 109, 244, 59, 252, 121, 181, 59, 228, 158, 220, 59, 122, 209, 240, 59, 159, 93, 9, 61, 173, 61, 149, 60, 125, 72, 133, 60, 107, 107, 99, 60, 54, 147, 118, 60, 156, 85, 107, 60, 112, 100, 102, 60, 65, 59, 113, 60, 45, 147, 120, 60, 172, 125, 92, 60, 208, 110, 58, 60, 32, 247, 63, 60, 205, 253, 85, 60, 227, 170, 138, 61, 198, 248, 244, 60, 245, 149, 213, 60, 55, 22, 211, 60, 32, 148, 201, 60, 156, 24, 199, 60, 66, 210, 207, 60, 30, 124, 221, 60, 81, 38, 208, 60, 143, 73, 205, 60, 24, 67, 166, 60, 236, 165, 173, 60, 50, 139, 174, 60, 176, 146, 124, 61, 139, 109, 245, 59, 131, 247, 208, 59, 87, 179, 236, 59, 221, 83, 197, 59, 238, 24, 191, 59, 161, 107, 27, 60, 238, 38, 155, 59, 193, 12, 80, 59, 65, 142, 219, 59, 83, 224, 198, 59, 156, 173, 236, 59, 41, 253, 104, 59, 81, 199, 170, 61, 178, 1, 185, 61, 37, 37, 71, 61, 123, 239, 7, 61, 7, 18, 148, 60, 77, 42, 176, 60, 174, 105, 229, 60, 62, 45, 139, 60, 88, 126, 111, 60, 15, 150, 11, 60, 136, 215, 35, 60, 180, 160, 27, 60, 96, 243, 150, 60, 32, 131, 202, 61, 125, 249, 30, 61, 141, 42, 236, 60, 190, 11, 58, 61, 192, 102, 68, 61, 116, 104, 69, 61, 179, 63, 11, 61, 234, 93, 249, 60, 93, 114, 183, 60, 126, 101, 7, 61, 187, 246, 232, 60, 218, 131, 49, 61, 77, 169, 109, 60, 190, 21, 57, 62, 106, 148, 181, 61, 205, 97, 122, 61, 180, 0, 219, 60, 190, 14, 128, 60, 50, 204, 73, 60, 122, 11, 66, 60, 127, 149, 16, 60, 83, 115, 15, 60, 133, 52, 201, 59, 201, 174, 79, 60, 5, 183, 61, 59, 217, 131, 217, 59, 31, 138, 143, 62, 123, 123, 212, 61, 117, 12, 54, 61, 25, 118, 25, 61, 213, 135, 175, 60, 154, 74, 192, 60, 255, 176, 162, 60, 71, 254, 133, 60, 202, 212, 128, 60, 77, 5, 91, 60, 249, 76, 174, 60, 67, 178, 135, 60, 18, 218, 96, 60, 139, 75, 73, 62, 4, 86, 155, 61, 75, 173, 152, 61, 188, 160, 80, 61, 98, 158, 35, 61, 183, 152, 176, 60, 144, 207, 203, 60, 153, 78, 135, 60, 167, 54, 139, 60, 0, 68, 172, 60, 192, 184, 47, 61, 217, 155, 172, 60, 83, 175, 139, 60, 244, 121, 225, 62, 57, 99, 52, 61, 94, 81, 182, 60, 206, 221, 167, 60, 81, 130, 164, 60, 163, 110, 46, 60, 250, 111, 82, 60, 154, 187, 13, 60, 120, 97, 25, 60, 31, 53, 42, 60, 27, 151, 216, 59, 69, 122, 35, 60, 152, 50, 127, 60, 214, 244, 162, 62, 209, 204, 43, 62, 146, 243, 1, 62, 5, 251, 196, 61, 130, 37, 222, 60, 22, 110, 179, 60, 125, 133, 150, 60, 27, 47, 151, 60, 46, 125, 101, 60, 210, 44, 174, 60, 16, 81, 170, 60, 104, 163, 136, 60, 237, 181, 132, 60, 201, 131, 134, 63, 72, 115, 154, 62, 238, 33, 210, 61, 112, 105, 18, 62, 49, 124, 151, 61, 213, 159, 128, 61, 30, 100, 233, 61, 74, 143, 127, 61, 246, 112, 107, 61, 208, 184, 149, 61, 13, 54, 4, 61, 8, 12, 48, 61, 214, 116, 139, 61, 151, 96, 209, 61, 107, 18, 245, 60, 112, 17, 59, 60, 47, 242, 11, 60, 129, 181, 14, 60, 241, 239, 228, 59, 149, 17, 59, 60, 20, 242, 43, 59, 107, 75, 179, 59, 26, 217, 88, 60, 154, 1, 95, 60, 197, 20, 68, 60, 31, 45, 97, 60, 143, 217, 130, 61, 68, 121, 188, 60, 24, 201, 228, 60, 181, 88, 196, 60, 149, 90, 120, 60, 160, 12, 114, 60, 101, 22, 197, 59, 141, 35, 69, 60, 142, 41, 99, 60, 217, 127, 81, 60, 197, 223, 135, 60, 215, 57, 149, 60, 149, 40, 175, 60, 124, 147, 39, 62, 85, 253, 59, 61, 210, 82, 245, 60, 134, 144, 183, 60, 246, 207, 233, 60, 177, 45, 236, 60, 114, 137, 223, 60, 89, 191, 188, 60, 133, 45, 185, 60, 40, 14, 18, 61, 249, 97, 95, 60, 26, 125, 81, 60, 142, 92, 29, 61, 101, 112, 110, 63, 254, 58, 102, 62, 222, 63, 226, 61, 81, 85, 64, 61, 252, 178, 150, 60, 120, 20, 33, 61, 246, 179, 139, 60, 175, 65, 151, 60, 141, 63, 106, 60, 120, 149, 132, 60, 92, 186, 125, 60, 49, 37, 204, 60, 127, 205, 32, 60, 198, 87, 44, 64, 120, 171, 248, 62, 196, 18, 252, 61, 204, 34, 214, 61, 156, 52, 135, 61, 236, 3, 165, 61, 152, 29, 154, 61, 189, 29, 12, 61, 224, 234, 169, 60, 5, 252, 197, 60, 153, 48, 236, 60, 53, 179, 223, 60, 173, 187, 235, 60, 159, 232, 95, 63, 131, 42, 10, 63, 61, 127, 89, 62, 15, 62, 204, 61, 139, 190, 141, 61, 237, 186, 115, 61, 140, 9, 145, 61, 218, 184, 140, 61, 20, 212, 9, 61, 107, 215, 45, 61, 65, 77, 87, 60, 124, 150, 203, 60, 182, 117, 224, 60, 68, 233, 104, 63, 97, 164, 19, 62, 204, 31, 37, 61, 210, 31, 37, 61, 145, 121, 249, 60, 192, 22, 101, 61, 208, 196, 170, 61, 179, 148, 252, 60, 210, 67, 189, 60, 71, 170, 90, 61, 188, 246, 129, 60, 48, 29, 17, 61, 23, 84, 62, 60, 72, 212, 105, 63, 134, 215, 27, 62, 11, 58, 6, 61, 151, 24, 46, 61, 32, 12, 16, 61, 152, 103, 104, 61, 211, 255, 133, 61, 125, 179, 131, 61, 254, 91, 74, 61, 150, 37, 56, 61, 201, 17, 173, 60, 33, 127, 13, 61, 35, 62, 199, 60, 189, 21, 149, 63, 160, 59, 204, 62, 160, 63, 19, 62, 31, 161, 170, 61, 1, 122, 28, 61, 116, 146, 225, 61, 138, 15, 253, 61, 118, 10, 176, 61, 246, 64, 162, 61, 130, 157, 101, 61, 186, 169, 226, 60, 82, 48, 20, 61, 26, 111, 25, 61, 93, 231, 149, 63, 51, 40, 47, 61, 41, 222, 135, 61, 55, 99, 130, 61, 13, 83, 112, 61, 240, 255, 165, 61, 168, 187, 22, 61, 181, 122, 139, 60, 14, 155, 247, 60, 246, 78, 191, 60, 9, 228, 159, 60, 31, 140, 133, 60, 170, 95, 71, 60, 113, 110, 179, 62, 26, 189, 90, 61, 252, 220, 71, 61, 74, 223, 103, 61, 23, 231, 246, 60, 240, 37, 88, 61, 148, 14, 9, 61, 25, 151, 15, 61, 229, 124, 31, 61, 120, 0, 208, 60, 10, 77, 236, 60, 116, 74, 107, 60, 228, 59, 100, 60, 55, 249, 161, 62, 236, 19, 70, 61, 212, 148, 136, 61, 13, 192, 155, 61, 73, 40, 68, 61, 86, 66, 173, 61, 105, 224, 68, 61, 153, 150, 132, 61, 251, 192, 148, 61, 74, 206, 41, 61, 15, 17, 22, 61, 203, 102, 214, 60, 13, 94, 14, 61, 255, 229, 145, 62, 253, 179, 62, 61, 247, 147, 178, 60, 215, 88, 189, 60, 168, 122, 75, 60, 103, 220, 93, 60, 163, 213, 18, 60, 242, 73, 35, 60, 159, 92, 51, 60, 155, 191, 235, 59, 35, 225, 226, 59, 127, 117, 231, 59, 30, 164, 144, 59, 46, 153, 212, 63, 143, 225, 221, 62, 222, 16, 8, 62, 224, 137, 5, 62, 226, 238, 129, 61, 21, 172, 228, 61, 7, 42, 22, 61, 199, 23, 7, 61, 238, 133, 19, 61, 213, 57, 199, 60, 97, 239, 1, 61, 31, 139, 205, 60, 134, 37, 220, 60, 248, 192, 1, 64, 67, 97, 2, 63, 130, 74, 7, 62, 91, 92, 230, 61, 28, 165, 142, 61, 98, 197, 13, 62, 13, 21, 152, 61, 100, 60, 107, 61, 205, 70, 131, 61, 13, 170, 238, 60, 85, 234, 14, 61, 145, 213, 11, 61, 163, 173, 70, 61, 117, 237, 170, 63, 222, 69, 97, 62, 221, 53, 211, 61, 183, 175, 148, 61, 208, 255, 67, 61, 5, 121, 3, 61, 189, 71, 241, 60, 75, 3, 162, 60, 204, 215, 86, 61, 138, 12, 94, 61, 223, 50, 144, 61, 180, 57, 61, 61, 1, 215, 5, 61, 213, 208, 88, 64, 102, 242, 80, 63, 17, 138, 27, 62, 171, 204, 25, 62, 138, 148, 171, 61, 72, 236, 221, 61, 33, 104, 116, 61, 48, 91, 167, 61, 97, 43, 123, 61, 113, 152, 40, 61, 39, 60, 38, 61, 117, 234, 60, 61, 189, 229, 57, 61, 72, 151, 20, 64, 52, 85, 20, 63, 255, 182, 77, 62, 90, 105, 24, 62, 39, 60, 11, 62, 190, 35, 167, 61, 24, 243, 215, 61, 226, 106, 161, 61, 211, 241, 97, 61, 101, 139, 88, 61, 37, 102, 140, 61, 42, 200, 106, 61, 85, 0, 71, 61, 69, 171, 101, 64, 90, 113, 192, 61, 37, 151, 5, 62, 207, 97, 37, 61, 96, 64, 35, 61, 130, 192, 59, 61, 82, 254, 209, 60, 176, 124, 221, 60, 235, 37, 247, 60, 27, 6, 157, 60, 8, 203, 115, 60, 74, 86, 146, 60, 173, 83, 180, 60, 184, 206, 3, 64, 58, 197, 231, 62, 48, 59, 188, 61, 137, 184, 159, 61, 218, 161, 128, 61, 193, 90, 113, 61, 169, 26, 38, 61, 211, 42, 246, 60, 126, 18, 193, 60, 73, 21, 30, 61, 137, 87, 144, 60, 113, 4, 27, 61, 78, 2, 18, 61, 198, 49, 132, 63, 111, 233, 32, 63, 216, 223, 142, 62, 93, 188, 201, 61, 106, 88, 166, 61, 119, 42, 180, 61, 87, 63, 135, 61, 254, 30, 91, 61, 201, 173, 83, 61, 32, 167, 11, 61, 122, 4, 8, 61, 98, 210, 19, 61, 169, 247, 31, 61, 214, 48, 237, 63, 247, 0, 39, 62, 141, 74, 226, 61, 88, 158, 72, 61, 145, 75, 25, 61, 92, 225, 202, 61, 146, 96, 5, 61, 141, 133, 27, 61, 101, 6, 224, 60, 251, 23, 56, 61, 68, 117, 10, 61, 47, 99, 186, 60, 139, 172, 133, 60, 57, 155, 144, 63, 146, 219, 200, 62, 84, 97, 39, 62, 136, 112, 166, 61, 156, 179, 148, 61, 113, 219, 169, 61, 187, 78, 112, 61, 163, 214, 68, 61, 98, 13, 63, 61, 201, 198, 230, 60, 111, 203, 71, 61, 31, 248, 1, 61, 204, 249, 68, 61, 113, 226, 211, 63, 157, 202, 183, 62, 255, 141, 14, 62, 195, 3, 15, 62, 161, 173, 243, 61, 247, 19, 89, 61, 41, 213, 145, 61, 192, 47, 122, 61, 136, 91, 33, 61, 142, 26, 10, 61, 186, 223, 29, 61, 202, 29, 75, 61, 71, 194, 221, 60, 225, 217, 194, 64, 52, 99, 179, 62, 18, 193, 249, 61, 134, 249, 243, 61, 91, 234, 147, 61, 231, 81, 221, 61, 91, 154, 142, 61, 124, 17, 150, 61, 20, 240, 96, 61, 1, 142, 211, 61, 41, 232, 34, 61, 111, 122, 27, 61, 44, 232, 10, 61, 136, 99, 26, 64, 70, 69, 171, 62, 140, 159, 253, 61, 5, 35, 249, 61, 187, 133, 140, 61, 96, 241, 3, 62, 58, 217, 137, 61, 56, 149, 121, 61, 155, 90, 168, 61, 106, 32, 71, 61, 5, 213, 19, 61, 19, 161, 141, 61, 217, 99, 66, 61, 127, 91, 105, 64, 23, 176, 22, 63, 51, 72, 89, 62, 157, 191, 81, 62, 1, 115, 35, 62, 100, 228, 77, 62, 125, 8, 243, 61, 245, 119, 242, 61, 249, 254, 4, 62, 92, 68, 172, 61, 33, 131, 102, 61, 117, 145, 210, 61, 209, 233, 152, 61, 151, 6, 150, 62, 56, 1, 128, 61, 77, 8, 168, 60, 97, 143, 185, 60, 31, 215, 245, 60, 101, 180, 128, 60, 106, 173, 108, 60, 106, 15, 136, 60, 76, 181, 25, 60, 71, 204, 151, 60, 35, 221, 6, 60, 79, 72, 241, 59, 24, 62, 227, 59, 144, 158, 151, 61, 165, 92, 10, 61, 44, 81, 211, 60, 236, 99, 203, 60, 201, 21, 200, 60, 147, 213, 147, 60, 234, 75, 171, 60, 249, 230, 210, 60, 58, 83, 130, 60, 34, 80, 206, 60, 96, 149, 116, 60, 52, 245, 116, 60, 133, 150, 97, 60, 26, 212, 207, 61, 15, 231, 48, 61, 226, 58, 0, 61, 59, 126, 222, 60, 75, 60, 5, 61, 201, 171, 0, 61, 154, 191, 20, 61, 198, 193, 11, 61, 20, 198, 191, 60, 97, 37, 26, 61, 77, 96, 202, 60, 241, 192, 203, 60, 153, 235, 204, 60, 230, 192, 61, 62, 153, 99, 74, 61, 63, 165, 209, 61, 242, 2, 110, 60, 104, 62, 204, 60, 174, 171, 43, 61, 0, 93, 147, 60, 34, 137, 182, 60, 232, 99, 129, 60, 26, 31, 130, 60, 117, 88, 102, 60, 39, 253, 165, 60, 212, 161, 120, 60, 219, 234, 7, 62, 230, 249, 208, 60, 185, 155, 90, 61, 107, 147, 0, 61, 180, 242, 171, 60, 34, 160, 123, 60, 120, 251, 206, 60, 124, 210, 175, 60, 142, 91, 192, 60, 152, 164, 184, 60, 74, 136, 133, 60, 47, 15, 104, 60, 106, 100, 190, 60, 47, 29, 11, 62, 227, 22, 18, 61, 251, 190, 2, 61, 45, 23, 200, 60, 164, 29, 183, 60, 215, 249, 195, 60, 105, 205, 171, 60, 72, 180, 148, 60, 193, 152, 184, 60, 152, 58, 194, 60, 209, 159, 183, 60, 226, 8, 192, 60, 27, 30, 223, 60, 173, 28, 112, 63, 55, 255, 9, 62, 214, 246, 220, 61, 32, 75, 17, 61, 144, 44, 126, 61, 24, 51, 29, 61, 216, 78, 37, 61, 80, 17, 168, 60, 73, 251, 5, 61, 135, 241, 222, 60, 135, 112, 176, 60, 183, 70, 184, 60, 255, 243, 23, 61, 78, 117, 23, 63, 120, 175, 50, 61, 232, 218, 213, 61, 194, 8, 8, 61, 252, 210, 150, 61, 145, 14, 17, 61, 167, 251, 8, 61, 123, 190, 219, 60, 225, 188, 232, 60, 217, 219, 180, 60, 16, 185, 157, 60, 62, 230, 190, 60, 154, 59, 251, 60, 140, 241, 159, 62, 151, 254, 154, 61, 155, 85, 231, 61, 138, 153, 57, 61, 236, 45, 107, 61, 101, 196, 48, 61, 71, 230, 48, 61, 38, 198, 31, 61, 255, 224, 14, 61, 80, 228, 232, 60, 39, 92, 210, 60, 72, 187, 1, 61, 220, 194, 12, 61, 135, 123, 248, 62, 217, 58, 18, 62, 125, 173, 18, 61, 35, 40, 76, 61, 91, 67, 6, 61, 91, 110, 218, 60, 241, 127, 178, 60, 232, 97, 152, 60, 208, 187, 144, 60, 181, 41, 222, 60, 153, 138, 121, 60, 131, 52, 31, 60, 31, 132, 41, 60, 33, 249, 147, 61, 159, 237, 38, 61, 28, 19, 15, 61, 10, 29, 52, 61, 200, 55, 236, 60, 165, 172, 250, 60, 67, 194, 216, 60, 122, 80, 167, 60, 90, 161, 164, 60, 118, 199, 209, 60, 32, 85, 139, 60, 140, 152, 129, 60, 255, 191, 137, 60, 15, 59, 235, 61, 72, 47, 132, 61, 168, 49, 79, 61, 183, 97, 53, 61, 0, 251, 30, 61, 84, 66, 64, 61, 32, 235, 47, 61, 242, 55, 15, 61, 96, 59, 19, 61, 241, 25, 25, 61, 209, 101, 228, 60, 67, 194, 230, 60, 189, 245, 2, 61, 1, 162, 163, 62, 97, 42, 108, 61, 71, 168, 151, 60, 117, 94, 27, 60, 4, 128, 159, 60, 253, 142, 109, 60, 125, 23, 74, 60, 99, 147, 225, 59, 13, 118, 30, 60, 45, 186, 28, 60, 94, 177, 52, 60, 66, 100, 239, 59, 195, 56, 107, 59, 228, 58, 69, 62, 160, 187, 143, 62, 178, 186, 59, 62, 152, 24, 171, 61, 173, 185, 56, 61, 187, 130, 119, 60, 77, 217, 204, 60, 99, 0, 143, 60, 71, 203, 20, 61, 125, 249, 146, 60, 193, 31, 161, 60, 140, 69, 94, 60, 76, 45, 7, 60, 76, 197, 52, 63, 77, 76, 159, 62, 121, 172, 42, 62, 121, 13, 12, 62, 150, 52, 197, 61, 194, 96, 43, 61, 248, 70, 94, 61, 5, 217, 143, 60, 174, 145, 36, 61, 46, 222, 116, 61, 68, 185, 129, 61, 81, 143, 33, 61, 151, 110, 221, 60, 40, 192, 223, 62, 249, 227, 14, 62, 227, 125, 138, 61, 129, 41, 135, 61, 56, 71, 50, 61, 197, 89, 4, 60, 85, 193, 140, 60, 21, 46, 105, 60, 190, 242, 217, 59, 109, 108, 92, 60, 180, 55, 219, 59, 163, 126, 26, 60, 58, 121, 20, 60, 177, 244, 21, 63, 71, 239, 102, 62, 28, 54, 142, 61, 68, 205, 112, 61, 73, 168, 159, 61, 207, 115, 25, 61, 77, 220, 178, 60, 218, 133, 231, 60, 173, 131, 190, 60, 193, 113, 157, 60, 0, 185, 70, 60, 190, 249, 201, 60, 64, 212, 164, 60, 135, 73, 138, 63, 161, 86, 222, 62, 216, 130, 11, 62, 177, 254, 229, 61, 110, 192, 14, 62, 69, 172, 128, 61, 27, 150, 120, 61, 15, 240, 7, 61, 16, 118, 12, 61, 73, 242, 202, 60, 241, 95, 11, 61, 92, 43, 13, 61, 65, 54, 253, 60, 194, 117, 17, 63, 235, 181, 241, 61, 133, 110, 247, 60, 46, 14, 209, 60, 9, 1, 158, 60, 150, 100, 254, 60, 107, 136, 130, 60, 31, 203, 57, 60, 31, 148, 18, 60, 90, 109, 222, 59, 100, 117, 233, 59, 202, 37, 29, 60, 131, 79, 50, 60, 76, 181, 8, 62, 221, 42, 160, 61, 89, 241, 146, 61, 210, 14, 24, 61, 180, 77, 106, 61, 199, 177, 30, 61, 174, 138, 13, 60, 145, 246, 80, 60, 117, 159, 129, 60, 154, 139, 171, 60, 224, 105, 45, 60, 11, 41, 146, 60, 62, 215, 53, 60, 186, 119, 68, 62, 17, 214, 53, 62, 169, 30, 249, 61, 45, 135, 82, 61, 181, 66, 42, 61, 176, 75, 54, 61, 79, 42, 112, 61, 17, 112, 155, 61, 34, 163, 21, 61, 104, 223, 36, 61, 110, 11, 129, 60, 174, 148, 74, 61, 119, 25, 111, 60, 129, 188, 56, 62, 132, 81, 252, 61, 136, 58, 64, 61, 125, 153, 144, 60, 251, 189, 50, 61, 80, 87, 208, 60, 46, 231, 214, 60, 11, 112, 192, 60, 17, 64, 85, 60, 208, 12, 88, 59, 198, 177, 190, 59, 214, 83, 192, 59, 35, 70, 60, 60, 55, 81, 245, 62, 19, 147, 40, 62, 17, 170, 43, 61, 153, 43, 20, 61, 154, 92, 39, 61, 255, 42, 186, 60, 59, 53, 53, 61, 64, 152, 250, 60, 130, 36, 188, 60, 177, 144, 141, 60, 142, 189, 0, 61, 135, 36, 3, 61, 143, 221, 24, 61, 160, 183, 138, 62, 159, 81, 49, 62, 26, 137, 200, 61, 109, 136, 238, 60, 248, 85, 175, 61, 253, 37, 72, 61, 237, 64, 26, 62, 56, 130, 236, 61, 88, 26, 68, 61, 215, 201, 79, 60, 189, 219, 167, 60, 160, 251, 221, 60, 238, 5, 218, 60, 201, 140, 36, 63, 24, 174, 119, 61, 8, 59, 140, 61, 8, 244, 152, 60, 61, 2, 82, 61, 117, 15, 156, 61, 42, 211, 251, 60, 105, 133, 79, 61, 21, 104, 243, 60, 249, 20, 172, 60, 65, 201, 125, 60, 183, 210, 158, 60, 115, 40, 85, 60, 71, 205, 152, 63, 196, 186, 17, 62, 14, 17, 206, 61, 254, 95, 235, 61, 161, 27, 82, 62, 73, 68, 67, 61, 186, 17, 69, 61, 10, 143, 84, 61, 142, 86, 214, 60, 32, 185, 232, 60, 241, 183, 174, 60, 21, 230, 13, 61, 134, 231, 77, 60, 71, 167, 224, 63, 41, 254, 132, 62, 166, 168, 91, 62, 19, 136, 141, 61, 32, 19, 58, 62, 145, 84, 179, 61, 162, 53, 151, 61, 149, 220, 133, 61, 120, 2, 235, 60, 21, 250, 12, 61, 19, 171, 10, 61, 187, 121, 89, 61, 90, 22, 185, 60, 240, 242, 197, 62, 176, 135, 206, 61, 185, 17, 185, 60, 228, 171, 11, 61, 247, 87, 118, 61, 85, 4, 172, 60, 67, 159, 56, 60, 5, 6, 94, 60, 242, 76, 132, 60, 58, 208, 31, 60, 251, 19, 252, 59, 135, 111, 54, 60, 117, 151, 23, 60, 105, 221, 38, 63, 22, 227, 125, 62, 27, 26, 141, 61, 251, 104, 174, 61, 175, 4, 161, 61, 89, 5, 89, 61, 214, 170, 41, 61, 143, 42, 16, 61, 201, 145, 0, 61, 232, 119, 146, 60, 117, 29, 130, 60, 135, 148, 125, 60, 122, 190, 115, 60, 82, 93, 20, 63, 15, 72, 131, 62, 214, 94, 20, 62, 4, 89, 230, 61, 129, 143, 8, 62, 21, 42, 146, 61, 243, 50, 99, 61, 148, 220, 137, 61, 31, 22, 155, 61, 184, 60, 23, 61, 41, 15, 183, 60, 15, 13, 248, 60, 42, 163, 212, 60, 90, 188, 198, 63, 228, 232, 4, 62, 7, 73, 155, 61, 45, 87, 62, 61, 145, 61, 92, 62, 31, 166, 75, 61, 25, 151, 142, 61, 222, 109, 168, 60, 76, 114, 172, 60, 89, 150, 138, 60, 232, 7, 35, 61, 153, 80, 26, 60, 64, 132, 223, 60, 74, 0, 19, 64, 236, 123, 33, 62, 133, 52, 213, 61, 117, 228, 58, 62, 211, 199, 50, 62, 168, 142, 41, 61, 240, 148, 99, 61, 166, 158, 124, 61, 189, 91, 48, 61, 123, 228, 67, 61, 224, 82, 129, 60, 180, 223, 223, 60, 8, 78, 197, 60, 157, 122, 12, 64, 7, 98, 85, 62, 117, 134, 129, 62, 99, 93, 24, 62, 20, 91, 159, 62, 130, 255, 132, 61, 212, 236, 138, 61, 200, 109, 91, 61, 23, 72, 71, 61, 237, 141, 139, 61, 192, 39, 35, 61, 16, 30, 46, 61, 92, 64, 246, 60, 34, 75, 215, 62, 165, 229, 43, 62, 158, 32, 110, 61, 11, 142, 74, 61, 162, 216, 130, 61, 166, 0, 73, 60, 109, 133, 45, 61, 45, 69, 234, 60, 56, 160, 119, 60, 76, 111, 77, 60, 41, 100, 136, 60, 220, 32, 212, 59, 67, 237, 89, 60, 22, 250, 44, 63, 119, 111, 100, 62, 6, 194, 40, 62, 212, 2, 157, 61, 94, 37, 69, 62, 80, 64, 224, 60, 9, 157, 25, 62, 46, 197, 54, 61, 239, 4, 3, 61, 201, 5, 96, 60, 225, 60, 169, 60, 227, 209, 80, 60, 221, 23, 1, 61, 66, 70, 122, 63, 111, 179, 144, 62, 98, 152, 40, 62, 70, 166, 254, 61, 97, 218, 253, 61, 174, 190, 130, 61, 199, 84, 24, 62, 246, 158, 162, 61, 96, 58, 85, 61, 220, 125, 193, 60, 243, 243, 179, 60, 173, 147, 1, 61, 141, 26, 227, 60, 19, 66, 80, 62, 194, 208, 208, 60, 14, 107, 157, 60, 165, 251, 128, 60, 81, 107, 58, 61, 233, 122, 55, 60, 131, 168, 126, 60, 116, 38, 132, 60, 18, 238, 89, 60, 114, 124, 130, 60, 145, 129, 9, 60, 236, 150, 49, 60, 155, 30, 1, 60, 137, 51, 189, 61, 87, 197, 187, 60, 200, 144, 78, 60, 4, 0, 222, 60, 111, 15, 198, 60, 49, 109, 138, 60, 159, 109, 174, 60, 239, 132, 137, 60, 194, 81, 82, 60, 63, 61, 102, 60, 138, 59, 40, 60, 198, 133, 103, 60, 66, 142, 73, 60, 152, 234, 128, 61, 24, 95, 166, 60, 102, 74, 190, 60, 241, 56, 217, 60, 79, 31, 151, 60, 123, 245, 183, 60, 13, 93, 241, 60, 245, 156, 179, 60, 160, 223, 157, 60, 13, 2, 134, 60, 173, 188, 71, 60, 215, 213, 154, 60, 236, 222, 152, 60, 105, 196, 41, 62, 13, 2, 127, 61, 131, 171, 151, 60, 79, 121, 144, 60, 169, 16, 69, 61, 43, 22, 56, 61, 200, 13, 165, 60, 7, 168, 99, 60, 241, 180, 39, 60, 71, 170, 130, 60, 201, 226, 100, 60, 204, 244, 15, 60, 3, 219, 108, 60, 145, 52, 231, 61, 76, 144, 203, 60, 140, 249, 104, 60, 86, 70, 174, 60, 65, 104, 177, 60, 10, 99, 126, 60, 158, 117, 98, 60, 200, 6, 127, 60, 53, 200, 93, 60, 255, 75, 137, 60, 155, 61, 58, 60, 12, 211, 52, 60, 232, 4, 105, 60, 221, 164, 165, 61, 9, 47, 203, 60, 162, 143, 187, 60, 238, 132, 234, 60, 241, 230, 241, 60, 191, 178, 193, 60, 172, 219, 185, 60, 192, 40, 224, 60, 249, 184, 195, 60, 112, 192, 186, 60, 250, 112, 180, 60, 58, 138, 168, 60, 81, 183, 175, 60, 44, 66, 104, 63, 10, 146, 108, 62, 53, 4, 164, 61, 88, 33, 46, 61, 15, 16, 196, 61, 163, 119, 61, 61, 191, 103, 155, 60, 172, 205, 124, 60, 166, 42, 191, 60, 21, 64, 151, 60, 52, 114, 203, 60, 226, 213, 121, 60, 203, 108, 197, 60, 2, 229, 162, 62, 21, 82, 176, 61, 127, 205, 11, 61, 61, 216, 23, 61, 40, 71, 54, 61, 201, 101, 222, 60, 134, 42, 222, 60, 172, 172, 152, 60, 122, 239, 164, 60, 113, 235, 201, 60, 116, 148, 179, 60, 205, 125, 170, 60, 19, 202, 206, 60, 214, 222, 29, 62, 153, 84, 128, 61, 22, 20, 30, 61, 254, 202, 60, 61, 27, 118, 38, 61, 92, 126, 227, 60, 100, 171, 44, 61, 105, 203, 21, 61, 227, 36, 223, 60, 111, 11, 1, 61, 164, 74, 229, 60, 184, 215, 5, 61, 211, 169, 27, 61, 57, 145, 245, 62, 174, 159, 140, 61, 117, 252, 135, 61, 44, 205, 141, 61, 223, 238, 27, 61, 172, 63, 195, 61, 16, 182, 69, 61, 20, 16, 78, 61, 20, 94, 51, 61, 219, 183, 209, 60, 88, 71, 238, 60, 120, 51, 225, 60, 113, 183, 249, 60, 234, 14, 95, 62, 174, 29, 205, 60, 25, 241, 179, 60, 44, 174, 216, 60, 107, 11, 203, 60, 171, 227, 191, 60, 111, 255, 162, 60, 206, 115, 239, 60, 64, 54, 244, 60, 33, 184, 210, 60, 23, 24, 149, 60, 126, 255, 119, 60, 174, 52, 152, 60, 231, 207, 220, 61, 208, 27, 222, 60, 95, 250, 24, 61, 86, 176, 40, 61, 45, 252, 21, 61, 202, 109, 25, 61, 25, 216, 242, 60, 122, 234, 7, 61, 82, 165, 0, 61, 134, 91, 18, 61, 194, 122, 241, 60, 31, 43, 4, 61, 116, 254, 234, 60, 242, 170, 243, 62, 40, 5, 25, 61, 120, 93, 55, 61, 33, 153, 195, 61, 124, 187, 6, 61, 203, 189, 235, 60, 137, 184, 16, 61, 140, 11, 171, 60, 200, 1, 5, 61, 206, 247, 158, 60, 184, 122, 76, 60, 105, 229, 113, 60, 223, 83, 5, 60, 77, 254, 197, 62, 108, 64, 72, 61, 247, 18, 230, 60, 109, 217, 180, 61, 134, 59, 104, 61, 186, 162, 122, 61, 133, 64, 172, 60, 218, 181, 146, 60, 93, 190, 204, 60, 203, 93, 255, 60, 213, 131, 221, 60, 139, 78, 151, 60, 83, 231, 24, 60, 219, 247, 97, 62, 71, 144, 190, 61, 211, 239, 125, 61, 237, 63, 237, 61, 207, 185, 101, 61, 153, 48, 136, 61, 237, 4, 101, 61, 204, 169, 74, 61, 127, 165, 195, 60, 100, 206, 38, 61, 31, 199, 235, 60, 94, 224, 234, 60, 201, 237, 146, 60, 214, 46, 81, 65, 227, 173, 20, 63, 122, 49, 177, 62, 64, 8, 239, 61, 129, 137, 76, 62, 23, 75, 183, 61, 106, 156, 75, 61, 117, 180, 100, 61, 125, 238, 30, 61, 1, 56, 0, 61, 193, 231, 111, 60, 153, 32, 197, 60, 118, 159, 15, 61, 163, 178, 21, 64, 112, 248, 198, 62, 255, 37, 224, 61, 87, 182, 67, 61, 101, 121, 45, 62, 255, 81, 151, 61, 129, 141, 210, 61, 120, 174, 205, 61, 114, 139, 142, 61, 246, 237, 230, 60, 4, 250, 69, 60, 161, 125, 79, 61, 72, 80, 196, 60, 68, 88, 33, 64, 69, 123, 7, 63, 43, 105, 74, 62, 242, 114, 67, 61, 107, 176, 25, 62, 131, 154, 203, 61, 178, 166, 57, 62, 164, 88, 241, 61, 199, 184, 180, 61, 27, 145, 78, 61, 126, 72, 180, 60, 159, 1, 48, 61, 201, 176, 32, 61, 68, 251, 193, 62, 250, 12, 15, 61, 108, 104, 230, 60, 217, 71, 123, 61, 88, 235, 213, 61, 82, 170, 110, 61, 148, 124, 244, 60, 163, 129, 55, 60, 29, 246, 190, 60, 63, 206, 118, 60, 195, 247, 109, 60, 126, 126, 41, 60, 139, 2, 75, 60, 9, 166, 67, 62, 132, 193, 136, 61, 60, 79, 139, 60, 236, 230, 131, 61, 6, 74, 61, 61, 220, 247, 6, 61, 178, 150, 206, 60, 78, 180, 171, 60, 127, 221, 237, 60, 63, 20, 217, 60, 225, 55, 149, 60, 46, 185, 125, 60, 44, 71, 183, 60, 162, 251, 94, 62, 31, 159, 244, 61, 15, 33, 79, 61, 87, 253, 152, 61, 239, 6, 80, 61, 104, 110, 47, 61, 249, 66, 90, 61, 235, 232, 41, 61, 81, 236, 250, 60, 184, 21, 33, 61, 150, 176, 219, 60, 64, 191, 166, 60, 15, 115, 177, 60, 154, 108, 89, 63, 73, 53, 223, 61, 11, 78, 145, 61, 91, 238, 238, 60, 136, 110, 122, 61, 23, 167, 67, 61, 98, 236, 100, 61, 131, 42, 202, 60, 40, 98, 133, 60, 252, 42, 169, 60, 149, 129, 70, 60, 124, 52, 167, 60, 95, 237, 48, 60, 49, 187, 169, 63, 99, 132, 98, 62, 192, 230, 21, 62, 252, 9, 43, 62, 27, 147, 157, 61, 53, 201, 68, 61, 115, 27, 88, 61, 26, 141, 232, 60, 80, 170, 231, 60, 45, 150, 223, 60, 94, 146, 135, 60, 159, 238, 167, 60, 199, 5, 191, 60, 168, 20, 66, 63, 226, 127, 177, 62, 124, 103, 241, 61, 116, 247, 217, 61, 117, 57, 207, 61, 185, 89, 226, 61, 153, 240, 224, 61, 176, 90, 156, 61, 151, 230, 239, 60, 139, 228, 45, 61, 6, 241, 207, 60, 216, 166, 53, 61, 253, 214, 231, 60, 18, 40, 139, 63, 130, 49, 154, 61, 75, 122, 104, 61, 112, 160, 246, 61, 150, 146, 191, 60, 138, 118, 60, 61, 233, 6, 95, 61, 89, 99, 15, 61, 22, 3, 68, 61, 254, 41, 150, 60, 19, 36, 49, 60, 35, 239, 64, 60, 149, 10, 8, 60, 29, 155, 247, 62, 200, 3, 174, 60, 146, 181, 123, 61, 140, 85, 37, 61, 68, 65, 189, 60, 25, 139, 220, 60, 21, 138, 27, 61, 20, 180, 143, 60, 206, 249, 37, 61, 4, 28, 10, 61, 168, 197, 29, 60, 160, 200, 64, 60, 98, 183, 8, 60, 184, 217, 21, 62, 216, 101, 228, 60, 1, 70, 5, 61, 181, 164, 111, 61, 85, 177, 251, 60, 86, 5, 55, 61, 57, 135, 19, 61, 101, 144, 5, 61, 121, 51, 66, 61, 69, 156, 49, 61, 59, 226, 110, 60, 82, 31, 108, 60, 6, 229, 118, 60, 211, 252, 38, 63, 211, 135, 235, 61, 209, 21, 9, 61, 32, 55, 101, 61, 197, 10, 61, 61, 89, 89, 19, 61, 174, 248, 245, 60, 143, 39, 138, 60, 6, 43, 163, 60, 104, 144, 146, 60, 41, 60, 71, 60, 175, 129, 20, 60, 91, 35, 144, 60, 174, 47, 229, 62, 54, 242, 58, 61, 247, 220, 173, 60, 212, 78, 72, 61, 62, 150, 137, 61, 200, 2, 37, 61, 230, 46, 16, 61, 201, 250, 171, 60, 100, 145, 158, 60, 93, 8, 187, 60, 249, 155, 54, 60, 79, 125, 49, 60, 150, 228, 67, 60, 29, 117, 228, 61, 142, 4, 62, 61, 159, 220, 56, 61, 39, 67, 83, 61, 31, 218, 59, 61, 153, 13, 12, 61, 91, 53, 31, 61, 187, 44, 10, 61, 150, 43, 19, 61, 23, 33, 2, 61, 142, 140, 193, 60, 166, 116, 144, 60, 144, 200, 145, 60, 76, 140, 32, 62, 3, 145, 6, 61, 105, 61, 112, 60, 254, 168, 77, 61, 80, 79, 76, 60, 46, 179, 145, 60, 203, 147, 130, 60, 96, 56, 147, 60, 114, 212, 84, 60, 246, 18, 88, 60, 242, 168, 18, 60, 210, 145, 221, 59, 163, 227, 54, 60, 20, 121, 222, 61, 179, 152, 183, 60, 185, 64, 110, 60, 46, 58, 167, 60, 145, 247, 195, 60, 211, 39, 149, 60, 32, 2, 83, 60, 28, 182, 79, 60, 107, 150, 69, 60, 105, 187, 60, 60, 62, 58, 62, 60, 53, 100, 6, 60, 182, 71, 46, 60, 92, 72, 181, 61, 71, 140, 14, 61, 96, 32, 214, 60, 88, 20, 226, 60, 83, 71, 198, 60, 37, 171, 199, 60, 51, 80, 206, 60, 246, 151, 175, 60, 120, 142, 135, 60, 182, 16, 150, 60, 13, 228, 138, 60, 77, 38, 90, 60, 238, 135, 145, 60, 5, 204, 251, 61, 47, 126, 63, 60, 180, 119, 175, 60, 87, 125, 135, 60, 204, 115, 47, 60, 158, 116, 56, 60, 13, 140, 66, 60, 105, 246, 153, 59, 248, 218, 89, 60, 155, 171, 233, 59, 142, 65, 211, 59, 208, 220, 249, 59, 246, 193, 54, 60, 161, 192, 122, 61, 28, 51, 55, 60, 40, 112, 148, 60, 120, 6, 216, 60, 60, 79, 108, 60, 92, 139, 86, 60, 122, 115, 87, 60, 53, 90, 30, 60, 149, 201, 92, 60, 14, 229, 41, 60, 112, 135, 3, 60, 80, 37, 16, 60, 33, 85, 30, 60, 207, 120, 117, 61, 239, 186, 113, 60, 79, 28, 181, 60, 221, 88, 203, 60, 4, 87, 168, 60, 8, 48, 185, 60, 78, 180, 135, 60, 149, 43, 154, 60, 11, 1, 145, 60, 188, 56, 130, 60, 222, 108, 91, 60, 202, 6, 114, 60, 30, 238, 119, 60, 77, 63, 186, 62, 245, 35, 152, 61, 209, 205, 207, 60, 166, 90, 40, 61, 215, 71, 16, 61, 115, 164, 9, 61, 28, 27, 214, 60, 115, 41, 179, 60, 21, 200, 158, 60, 175, 83, 80, 60, 6, 28, 202, 59, 232, 163, 248, 59, 255, 9, 165, 59, 90, 59, 152, 61, 48, 132, 64, 61, 122, 206, 193, 60, 106, 16, 245, 60, 178, 89, 15, 61, 13, 15, 214, 60, 8, 133, 180, 60, 155, 187, 162, 60, 235, 104, 151, 60, 104, 117, 154, 60, 136, 139, 133, 60, 117, 247, 138, 60, 29, 99, 94, 60, 33, 76, 2, 62, 142, 181, 147, 61, 224, 185, 102, 61, 43, 109, 69, 61, 109, 211, 84, 61, 247, 36, 70, 61, 201, 5, 53, 61, 177, 90, 41, 61, 196, 49, 32, 61, 210, 191, 25, 61, 236, 242, 9, 61, 212, 32, 189, 60, 55, 64, 150, 60, 14, 144, 214, 62, 166, 98, 126, 61, 158, 182, 211, 60, 145, 220, 64, 61, 160, 112, 228, 60, 7, 145, 94, 60, 111, 132, 151, 60, 27, 193, 158, 60, 10, 210, 102, 60, 165, 67, 78, 60, 208, 227, 51, 60, 24, 12, 66, 60, 147, 58, 219, 59, 140, 105, 151, 62, 107, 185, 229, 61, 117, 246, 206, 60, 119, 74, 68, 61, 27, 158, 96, 61, 156, 2, 4, 61, 214, 159, 191, 60, 49, 255, 113, 60, 149, 0, 250, 60, 169, 206, 17, 61, 89, 180, 64, 60, 192, 163, 137, 60, 30, 226, 114, 60, 235, 211, 13, 62, 99, 157, 105, 61, 48, 35, 246, 60, 169, 72, 33, 61, 69, 207, 94, 61, 160, 135, 234, 60, 182, 153, 38, 61, 180, 187, 245, 60, 102, 138, 14, 61, 163, 169, 39, 61, 231, 31, 188, 60, 111, 223, 208, 60, 141, 121, 208, 60, 210, 153, 130, 62, 76, 134, 123, 61, 235, 67, 153, 60, 120, 148, 142, 60, 220, 94, 116, 60, 52, 112, 66, 60, 104, 36, 122, 60, 82, 237, 142, 60, 126, 146, 48, 60, 46, 50, 59, 60, 5, 234, 64, 60, 110, 14, 69, 60, 240, 23, 53, 60, 118, 107, 141, 61, 134, 148, 16, 61, 33, 40, 139, 60, 101, 25, 194, 60, 185, 75, 157, 60, 248, 20, 133, 60, 132, 108, 153, 60, 197, 93, 141, 60, 58, 23, 156, 60, 174, 4, 155, 60, 47, 171, 141, 60, 231, 90, 126, 60, 240, 156, 101, 60, 56, 144, 212, 61, 184, 249, 97, 61, 232, 235, 28, 61, 46, 4, 20, 61, 111, 73, 29, 61, 162, 89, 232, 60, 201, 224, 225, 60, 218, 144, 41, 61, 15, 115, 237, 60, 20, 184, 4, 61, 50, 159, 244, 60, 30, 141, 5, 61, 253, 218, 194, 60, 243, 249, 111, 62, 147, 88, 44, 61, 177, 62, 254, 60, 243, 108, 236, 60, 211, 203, 158, 60, 26, 123, 88, 60, 14, 155, 135, 60, 23, 189, 139, 60, 76, 131, 35, 60, 163, 98, 33, 60, 20, 211, 52, 60, 84, 56, 198, 59, 167, 251, 27, 60, 26, 85, 197, 61, 101, 187, 81, 61, 122, 7, 208, 60, 130, 72, 186, 60, 234, 70, 196, 60, 203, 55, 115, 60, 117, 146, 118, 60, 143, 17, 147, 60, 96, 254, 130, 60, 105, 211, 44, 60, 220, 226, 113, 60, 160, 32, 45, 60, 135, 140, 73, 60, 226, 199, 16, 62, 74, 145, 156, 61, 28, 184, 68, 61, 241, 90, 42, 61, 114, 228, 47, 61, 159, 239, 18, 61, 110, 55, 235, 60, 242, 152, 1, 61, 234, 149, 18, 61, 250, 21, 148, 60, 41, 22, 201, 60, 37, 144, 153, 60, 163, 124, 198, 60, 40, 5, 96, 62, 120, 168, 242, 60, 5, 130, 53, 60, 4, 212, 19, 60, 27, 200, 233, 59, 197, 180, 49, 60, 137, 181, 91, 60, 21, 94, 44, 60, 38, 212, 88, 60, 137, 28, 34, 60, 211, 148, 55, 60, 9, 166, 209, 59, 141, 42, 253, 59, 218, 103, 88, 61, 79, 5, 208, 60, 94, 241, 130, 60, 115, 235, 152, 60, 169, 177, 141, 60, 118, 27, 128, 60, 237, 245, 137, 60, 91, 198, 73, 60, 107, 121, 109, 60, 57, 79, 114, 60, 115, 235, 81, 60, 218, 74, 45, 60, 137, 250, 80, 60, 144, 228, 155, 61, 128, 93, 31, 61, 138, 81, 203, 60, 125, 224, 249, 60, 90, 74, 250, 60, 21, 177, 252, 60, 220, 247, 3, 61, 38, 24, 197, 60, 4, 115, 214, 60, 115, 8, 206, 60, 55, 117, 222, 60, 139, 187, 170, 60, 88, 21, 179, 60, 153, 251, 190, 62, 127, 173, 69, 61, 239, 54, 85, 61, 168, 93, 55, 61, 236, 127, 13, 61, 71, 5, 80, 60, 183, 10, 224, 60, 132, 98, 129, 60, 217, 39, 181, 60, 132, 154, 98, 60, 144, 0, 77, 60, 223, 225, 1, 60, 38, 188, 84, 60, 186, 84, 184, 61, 77, 19, 158, 60, 89, 222, 186, 60, 33, 4, 17, 61, 73, 76, 2, 61, 157, 218, 35, 61, 104, 60, 130, 60, 38, 198, 7, 61, 53, 185, 177, 60, 69, 147, 82, 60, 27, 148, 175, 60, 67, 238, 154, 60, 152, 139, 112, 60, 243, 232, 159, 61, 67, 93, 238, 60, 220, 64, 36, 61, 106, 109, 43, 61, 200, 111, 49, 61, 67, 10, 121, 61, 15, 122, 243, 60, 123, 193, 22, 61, 99, 21, 7, 61, 211, 242, 211, 60, 154, 73, 15, 61, 223, 242, 232, 60, 157, 157, 237, 60, 106, 183, 61, 64, 135, 168, 31, 61, 113, 201, 26, 61, 159, 43, 212, 60, 201, 16, 166, 60, 222, 220, 115, 60, 115, 45, 174, 60, 158, 9, 66, 60, 2, 110, 13, 60, 164, 199, 9, 60, 200, 62, 40, 60, 129, 86, 246, 59, 220, 78, 43, 60, 159, 140, 190, 61, 30, 149, 55, 61, 5, 130, 234, 60, 80, 252, 177, 60, 25, 166, 163, 60, 225, 29, 138, 60, 64, 145, 146, 60, 90, 206, 140, 60, 8, 129, 123, 60, 65, 48, 101, 60, 200, 153, 99, 60, 195, 70, 82, 60, 153, 206, 106, 60, 118, 29, 164, 61, 215, 22, 60, 61, 20, 47, 253, 60, 36, 31, 223, 60, 79, 104, 0, 61, 61, 135, 219, 60, 155, 251, 217, 60, 245, 1, 253, 60, 64, 190, 210, 60, 47, 112, 187, 60, 93, 86, 210, 60, 151, 213, 201, 60, 25, 165, 223, 60, 254, 57, 19, 63, 148, 27, 173, 61, 186, 6, 146, 61, 166, 235, 184, 61, 6, 129, 194, 60, 61, 185, 223, 60, 183, 118, 104, 61, 62, 254, 229, 60, 237, 105, 184, 60, 20, 204, 146, 60, 209, 78, 74, 60, 39, 167, 23, 60, 139, 184, 64, 60, 214, 244, 231, 61, 81, 8, 97, 61, 186, 39, 245, 60, 105, 241, 60, 61, 171, 109, 177, 60, 59, 204, 144, 60, 64, 218, 134, 60, 144, 71, 118, 60, 210, 93, 161, 60, 44, 253, 210, 60, 243, 206, 174, 60, 90, 59, 114, 60, 10, 8, 130, 60, 182, 220, 215, 61, 68, 48, 57, 61, 200, 50, 223, 60, 222, 150, 18, 61, 132, 232, 241, 60, 145, 168, 245, 60, 96, 84, 7, 61, 239, 66, 2, 61, 52, 36, 250, 60, 214, 12, 27, 61, 166, 30, 0, 61, 168, 58, 182, 60, 90, 154, 176, 60, 248, 210, 102, 62, 81, 91, 29, 61, 50, 163, 107, 60, 10, 58, 165, 60, 185, 79, 141, 60, 157, 184, 62, 60, 2, 39, 41, 60, 81, 6, 67, 60, 59, 106, 10, 60, 225, 159, 81, 60, 130, 145, 60, 60, 104, 174, 24, 60, 90, 152, 34, 60, 90, 146, 132, 61, 43, 202, 221, 60, 168, 243, 164, 60, 107, 181, 176, 60, 45, 44, 129, 60, 34, 66, 112, 60, 179, 244, 130, 60]).concat([164, 100, 150, 60, 64, 136, 62, 60, 158, 190, 105, 60, 130, 244, 75, 60, 148, 43, 82, 60, 158, 19, 65, 60, 146, 153, 245, 61, 87, 219, 110, 61, 191, 83, 36, 61, 219, 59, 36, 61, 149, 138, 2, 61, 227, 46, 221, 60, 213, 169, 245, 60, 65, 224, 8, 61, 214, 177, 187, 60, 244, 199, 232, 60, 254, 219, 5, 61, 109, 254, 212, 60, 155, 48, 194, 60, 209, 178, 119, 62, 97, 178, 203, 60, 57, 92, 68, 60, 131, 34, 70, 60, 203, 66, 54, 60, 40, 122, 109, 60, 193, 167, 28, 60, 248, 56, 17, 60, 22, 225, 3, 60, 102, 195, 235, 59, 247, 57, 2, 60, 238, 31, 249, 59, 90, 183, 13, 60, 230, 2, 6, 61, 139, 118, 139, 60, 139, 127, 98, 60, 186, 2, 53, 60, 102, 229, 100, 60, 26, 72, 111, 60, 60, 183, 125, 60, 76, 6, 107, 60, 192, 35, 81, 60, 142, 93, 76, 60, 51, 190, 77, 60, 59, 49, 93, 60, 209, 21, 55, 60, 119, 37, 107, 61, 101, 208, 0, 61, 36, 215, 178, 60, 86, 211, 200, 60, 168, 146, 220, 60, 201, 51, 248, 60, 203, 44, 1, 61, 76, 71, 240, 60, 187, 4, 224, 60, 150, 206, 205, 60, 135, 63, 225, 60, 222, 96, 0, 61, 206, 165, 219, 60, 162, 168, 164, 62, 136, 82, 7, 60, 131, 207, 235, 59, 130, 246, 33, 60, 207, 57, 214, 59, 225, 183, 237, 59, 161, 183, 253, 59, 146, 164, 190, 59, 105, 236, 179, 59, 205, 34, 210, 59, 254, 197, 220, 59, 7, 210, 198, 59, 189, 38, 187, 59, 202, 48, 29, 61, 158, 99, 133, 60, 160, 44, 119, 60, 225, 40, 77, 60, 1, 179, 112, 60, 94, 77, 129, 60, 80, 158, 132, 60, 149, 64, 73, 60, 141, 13, 107, 60, 232, 22, 119, 60, 150, 4, 105, 60, 177, 17, 72, 60, 211, 153, 96, 60, 89, 78, 99, 61, 16, 69, 240, 60, 4, 232, 232, 60, 157, 242, 232, 60, 28, 172, 246, 60, 207, 93, 249, 60, 230, 19, 4, 61, 199, 0, 197, 60, 81, 169, 208, 60, 241, 88, 231, 60, 185, 141, 216, 60, 123, 227, 166, 60, 192, 214, 189, 60, 43, 121, 169, 62, 90, 199, 83, 60, 138, 91, 46, 60, 6, 165, 27, 60, 192, 248, 26, 60, 64, 31, 18, 60, 223, 160, 10, 60, 239, 202, 240, 59, 235, 100, 13, 60, 43, 15, 253, 59, 235, 177, 10, 60, 252, 116, 202, 59, 112, 119, 211, 59, 222, 153, 28, 61, 87, 31, 161, 60, 94, 8, 152, 60, 34, 9, 125, 60, 55, 43, 137, 60, 183, 219, 122, 60, 187, 94, 125, 60, 223, 241, 91, 60, 89, 156, 63, 60, 64, 68, 75, 60, 62, 63, 68, 60, 234, 40, 61, 60, 233, 81, 71, 60, 143, 125, 109, 61, 55, 155, 224, 60, 73, 55, 221, 60, 5, 214, 204, 60, 69, 223, 222, 60, 116, 8, 225, 60, 55, 220, 228, 60, 150, 180, 204, 60, 73, 104, 206, 60, 23, 68, 210, 60, 138, 162, 164, 60, 128, 69, 165, 60, 80, 173, 196, 60, 205, 28, 234, 62, 34, 232, 139, 61, 250, 249, 153, 60, 46, 204, 128, 60, 196, 183, 48, 60, 202, 255, 3, 60, 164, 144, 16, 60, 247, 121, 161, 60, 85, 237, 58, 60, 38, 15, 85, 60, 252, 24, 41, 60, 173, 63, 39, 60, 0, 214, 43, 60, 183, 127, 35, 62, 237, 57, 96, 62, 220, 97, 112, 61, 44, 116, 161, 61, 249, 170, 235, 60, 74, 20, 18, 61, 155, 196, 21, 61, 46, 63, 20, 61, 116, 35, 225, 60, 234, 253, 183, 60, 187, 38, 6, 61, 232, 150, 129, 60, 126, 55, 242, 60, 47, 20, 4, 62, 244, 81, 50, 62, 238, 220, 165, 61, 162, 52, 135, 61, 237, 79, 53, 61, 25, 106, 20, 61, 220, 137, 246, 60, 197, 163, 75, 61, 125, 215, 28, 61, 222, 25, 254, 60, 4, 80, 41, 61, 235, 120, 35, 61, 120, 146, 21, 61, 225, 66, 187, 62, 235, 45, 18, 61, 136, 39, 164, 60, 236, 211, 145, 60, 193, 168, 126, 60, 156, 176, 32, 60, 178, 4, 10, 60, 180, 134, 34, 60, 47, 242, 101, 60, 0, 255, 43, 60, 9, 11, 238, 59, 18, 55, 28, 60, 104, 10, 70, 60, 227, 250, 169, 61, 191, 159, 77, 61, 166, 37, 62, 61, 20, 33, 41, 61, 158, 194, 158, 60, 183, 137, 158, 60, 111, 167, 206, 60, 83, 102, 219, 60, 48, 163, 178, 60, 158, 0, 9, 61, 241, 48, 139, 60, 74, 19, 111, 60, 240, 68, 144, 60, 241, 52, 53, 62, 54, 180, 125, 61, 86, 23, 70, 61, 54, 107, 145, 61, 59, 213, 11, 61, 201, 73, 17, 61, 204, 5, 32, 61, 12, 49, 24, 61, 56, 11, 65, 61, 32, 177, 62, 61, 103, 245, 26, 61, 34, 101, 3, 61, 165, 243, 24, 61, 74, 236, 102, 62, 228, 250, 233, 60, 129, 249, 110, 60, 237, 222, 177, 60, 48, 58, 132, 60, 234, 44, 88, 60, 245, 103, 39, 60, 149, 23, 59, 60, 36, 46, 222, 59, 81, 48, 123, 60, 53, 220, 252, 59, 35, 148, 23, 60, 88, 138, 72, 60, 90, 229, 58, 62, 167, 164, 204, 61, 224, 31, 144, 61, 140, 140, 80, 61, 7, 132, 28, 61, 3, 171, 244, 60, 168, 13, 192, 60, 205, 254, 2, 61, 37, 48, 147, 60, 210, 15, 192, 60, 41, 15, 155, 60, 156, 170, 193, 60, 158, 142, 147, 60, 233, 47, 4, 62, 116, 156, 208, 61, 41, 143, 132, 61, 103, 76, 145, 61, 224, 198, 47, 61, 1, 154, 34, 61, 140, 238, 128, 61, 39, 1, 83, 61, 217, 98, 239, 60, 155, 153, 20, 61, 115, 172, 13, 61, 29, 111, 26, 61, 129, 22, 5, 61, 5, 221, 239, 61, 217, 10, 190, 60, 170, 106, 46, 60, 208, 187, 86, 60, 71, 182, 29, 60, 199, 63, 110, 60, 113, 86, 164, 60, 57, 99, 120, 60, 209, 166, 81, 60, 182, 94, 34, 60, 182, 175, 60, 60, 77, 74, 49, 60, 242, 77, 92, 60, 6, 41, 178, 62, 79, 92, 131, 61, 139, 151, 66, 61, 46, 82, 98, 61, 204, 50, 189, 60, 125, 183, 5, 61, 240, 45, 4, 61, 114, 216, 151, 60, 151, 105, 173, 60, 36, 237, 72, 60, 45, 142, 170, 60, 236, 110, 123, 60, 243, 115, 220, 60, 205, 71, 24, 62, 202, 156, 234, 61, 196, 78, 143, 61, 210, 156, 89, 61, 20, 154, 114, 61, 149, 132, 110, 61, 18, 184, 171, 61, 53, 158, 44, 61, 234, 57, 241, 60, 255, 93, 214, 60, 153, 189, 202, 60, 29, 65, 49, 61, 135, 213, 51, 61, 241, 148, 88, 64, 237, 245, 122, 62, 47, 123, 223, 61, 217, 23, 175, 61, 253, 60, 8, 61, 100, 82, 238, 60, 58, 139, 33, 61, 46, 34, 183, 60, 38, 14, 204, 60, 182, 151, 149, 60, 144, 217, 40, 60, 28, 173, 108, 60, 71, 227, 85, 60, 159, 149, 42, 62, 117, 226, 251, 60, 86, 160, 186, 60, 145, 195, 213, 60, 228, 88, 155, 60, 83, 138, 134, 60, 193, 203, 85, 60, 132, 83, 133, 60, 15, 21, 125, 60, 3, 4, 65, 60, 5, 230, 89, 60, 42, 209, 97, 60, 185, 154, 120, 60, 211, 96, 235, 61, 54, 115, 28, 61, 244, 211, 13, 61, 44, 77, 249, 60, 241, 158, 232, 60, 117, 114, 171, 60, 22, 177, 131, 60, 76, 135, 135, 60, 118, 80, 194, 60, 23, 153, 163, 60, 86, 45, 137, 60, 221, 151, 164, 60, 48, 238, 135, 60, 120, 201, 86, 64, 126, 20, 197, 62, 220, 7, 156, 62, 218, 109, 23, 62, 185, 29, 145, 61, 132, 154, 101, 61, 34, 65, 16, 61, 90, 12, 12, 61, 199, 203, 18, 61, 41, 245, 210, 60, 235, 13, 2, 61, 137, 39, 174, 60, 14, 194, 124, 60, 219, 103, 17, 64, 154, 66, 124, 62, 4, 68, 64, 62, 65, 186, 162, 61, 250, 113, 140, 61, 226, 0, 67, 61, 9, 140, 199, 60, 213, 155, 2, 61, 206, 23, 249, 60, 106, 104, 199, 60, 191, 212, 5, 61, 102, 74, 0, 61, 209, 93, 134, 60, 78, 12, 183, 63, 69, 193, 103, 62, 161, 24, 38, 62, 189, 5, 152, 61, 96, 149, 144, 61, 202, 183, 58, 61, 99, 4, 11, 61, 30, 152, 7, 61, 195, 230, 43, 61, 56, 213, 53, 61, 95, 56, 39, 61, 184, 152, 244, 60, 72, 57, 165, 60, 6, 165, 7, 64, 19, 70, 86, 62, 242, 173, 143, 62, 182, 86, 94, 62, 245, 19, 170, 61, 149, 161, 221, 61, 190, 36, 40, 61, 90, 91, 204, 60, 106, 47, 251, 60, 106, 25, 30, 61, 187, 61, 187, 60, 100, 81, 47, 61, 31, 219, 163, 60, 200, 12, 193, 62, 40, 160, 133, 61, 218, 8, 128, 61, 25, 16, 168, 61, 68, 148, 30, 61, 108, 110, 26, 61, 45, 100, 145, 60, 163, 222, 199, 60, 42, 191, 213, 60, 151, 75, 201, 60, 43, 117, 175, 60, 189, 83, 181, 60, 228, 149, 141, 60, 169, 125, 66, 62, 240, 79, 88, 61, 123, 211, 46, 61, 97, 180, 64, 61, 143, 91, 45, 61, 48, 147, 27, 61, 121, 57, 230, 60, 199, 123, 28, 61, 155, 51, 6, 61, 79, 233, 236, 60, 185, 87, 224, 60, 16, 54, 210, 60, 235, 134, 189, 60, 109, 189, 208, 64, 206, 183, 6, 63, 2, 90, 79, 62, 231, 40, 37, 62, 28, 120, 216, 61, 200, 193, 156, 61, 218, 46, 197, 61, 186, 173, 71, 61, 39, 103, 5, 61, 26, 25, 9, 61, 60, 203, 220, 60, 109, 129, 229, 60, 244, 193, 24, 61, 76, 47, 87, 64, 19, 209, 133, 62, 182, 13, 15, 62, 149, 236, 222, 61, 91, 193, 248, 61, 125, 1, 122, 61, 246, 135, 188, 61, 39, 75, 97, 61, 18, 116, 20, 61, 158, 26, 30, 61, 89, 245, 236, 60, 204, 105, 30, 61, 185, 147, 21, 61, 173, 167, 155, 64, 76, 154, 233, 62, 96, 215, 84, 62, 102, 123, 25, 62, 172, 192, 254, 61, 29, 163, 175, 61, 91, 113, 0, 62, 13, 41, 194, 61, 74, 193, 76, 61, 34, 132, 139, 61, 248, 207, 69, 61, 207, 121, 63, 61, 71, 238, 56, 61, 47, 119, 112, 63, 154, 176, 240, 61, 37, 42, 42, 61, 157, 2, 11, 61, 74, 196, 234, 60, 187, 91, 152, 60, 101, 17, 85, 60, 152, 253, 186, 60, 95, 183, 108, 60, 88, 128, 73, 60, 169, 151, 86, 60, 103, 12, 58, 60, 177, 124, 111, 60, 24, 244, 21, 62, 235, 20, 58, 61, 207, 26, 253, 60, 100, 58, 17, 61, 142, 213, 18, 61, 79, 25, 164, 60, 37, 229, 149, 60, 73, 187, 179, 60, 32, 232, 164, 60, 141, 193, 132, 60, 15, 134, 121, 60, 110, 116, 149, 60, 53, 146, 155, 60, 90, 160, 231, 61, 104, 190, 52, 61, 3, 235, 44, 61, 76, 22, 37, 61, 186, 147, 27, 61, 99, 225, 223, 60, 251, 254, 12, 61, 59, 172, 6, 61, 139, 202, 213, 60, 43, 10, 192, 60, 65, 112, 215, 60, 79, 199, 205, 60, 32, 32, 193, 60, 72, 152, 104, 62, 108, 70, 74, 61, 146, 86, 240, 60, 80, 11, 225, 60, 103, 25, 170, 60, 67, 131, 85, 60, 208, 43, 22, 60, 112, 190, 21, 60, 146, 169, 0, 60, 184, 169, 65, 60, 95, 156, 147, 60, 163, 100, 81, 60, 56, 194, 86, 60, 72, 236, 30, 62, 5, 75, 158, 61, 14, 149, 208, 60, 39, 238, 216, 60, 162, 216, 212, 60, 59, 216, 196, 60, 112, 125, 151, 60, 206, 102, 152, 60, 242, 110, 134, 60, 115, 128, 119, 60, 227, 11, 147, 60, 44, 39, 115, 60, 128, 213, 122, 60, 110, 115, 245, 61, 74, 194, 132, 61, 105, 179, 21, 61, 124, 71, 34, 61, 169, 25, 14, 61, 250, 140, 233, 60, 23, 184, 230, 60, 126, 57, 241, 60, 227, 94, 228, 60, 99, 253, 218, 60, 50, 79, 1, 61, 143, 58, 223, 60, 170, 185, 224, 60, 102, 76, 4, 63, 212, 66, 194, 61, 248, 148, 64, 61, 250, 254, 212, 60, 201, 82, 97, 60, 84, 207, 107, 60, 135, 158, 112, 60, 60, 252, 141, 60, 46, 206, 49, 60, 109, 0, 72, 60, 71, 202, 40, 60, 167, 3, 57, 60, 139, 8, 20, 60, 247, 241, 152, 61, 158, 27, 3, 61, 219, 154, 248, 60, 63, 240, 217, 60, 242, 29, 218, 60, 252, 50, 228, 60, 164, 64, 183, 60, 164, 170, 141, 60, 97, 47, 158, 60, 7, 87, 123, 60, 250, 184, 143, 60, 76, 5, 125, 60, 226, 54, 129, 60, 187, 86, 3, 62, 240, 11, 84, 61, 13, 116, 55, 61, 134, 213, 38, 61, 111, 236, 22, 61, 179, 87, 10, 61, 32, 144, 20, 61, 44, 187, 232, 60, 106, 83, 239, 60, 252, 53, 3, 61, 17, 199, 2, 61, 171, 249, 254, 60, 210, 33, 1, 61, 138, 93, 43, 64, 4, 246, 8, 63, 76, 52, 23, 62, 88, 254, 234, 61, 64, 213, 130, 61, 172, 133, 97, 61, 183, 83, 25, 61, 146, 193, 241, 60, 205, 90, 224, 60, 120, 239, 245, 60, 14, 209, 152, 60, 119, 29, 205, 60, 159, 102, 156, 60, 48, 99, 241, 62, 249, 200, 3, 62, 62, 222, 128, 61, 21, 82, 37, 61, 128, 37, 29, 61, 254, 217, 18, 61, 7, 212, 229, 60, 26, 30, 220, 60, 135, 61, 163, 60, 99, 123, 135, 60, 91, 57, 116, 60, 147, 118, 168, 60, 133, 97, 159, 60, 194, 209, 123, 62, 84, 11, 145, 61, 226, 157, 37, 61, 46, 103, 44, 61, 142, 79, 40, 61, 30, 109, 45, 61, 205, 187, 28, 61, 101, 151, 14, 61, 18, 154, 16, 61, 12, 244, 178, 60, 253, 194, 181, 60, 91, 158, 235, 60, 74, 126, 225, 60, 11, 20, 146, 63, 134, 238, 179, 62, 156, 93, 196, 61, 13, 172, 126, 61, 160, 136, 244, 60, 60, 55, 202, 60, 202, 55, 164, 60, 199, 183, 151, 60, 39, 136, 111, 60, 84, 82, 87, 60, 251, 74, 87, 60, 162, 104, 85, 60, 234, 23, 63, 60, 39, 167, 160, 63, 120, 80, 72, 62, 194, 135, 17, 62, 185, 44, 81, 61, 253, 111, 68, 61, 170, 74, 18, 61, 12, 168, 254, 60, 68, 80, 237, 60, 18, 112, 179, 60, 12, 171, 186, 60, 211, 247, 174, 60, 48, 82, 164, 60, 12, 15, 134, 60, 235, 32, 180, 63, 57, 123, 117, 62, 8, 158, 42, 62, 146, 87, 132, 61, 110, 26, 128, 61, 0, 55, 108, 61, 16, 24, 86, 61, 40, 36, 84, 61, 80, 78, 34, 61, 75, 230, 33, 61, 161, 225, 13, 61, 183, 184, 14, 61, 65, 10, 250, 60, 22, 241, 58, 63, 28, 74, 87, 61, 130, 86, 86, 61, 96, 230, 130, 60, 250, 138, 131, 60, 66, 16, 112, 60, 175, 9, 40, 60, 4, 83, 67, 60, 17, 210, 41, 60, 118, 156, 70, 60, 84, 96, 22, 60, 20, 116, 5, 60, 80, 35, 37, 60, 136, 82, 145, 61, 194, 226, 180, 60, 195, 212, 168, 60, 158, 34, 131, 60, 180, 174, 152, 60, 15, 186, 129, 60, 60, 251, 104, 60, 3, 113, 126, 60, 20, 74, 127, 60, 128, 37, 135, 60, 35, 212, 103, 60, 197, 144, 99, 60, 116, 190, 105, 60, 237, 179, 231, 61, 113, 194, 38, 61, 134, 225, 31, 61, 233, 219, 254, 60, 54, 53, 13, 61, 104, 190, 238, 60, 65, 83, 218, 60, 214, 48, 234, 60, 198, 178, 238, 60, 141, 218, 229, 60, 9, 86, 224, 60, 192, 51, 211, 60, 160, 163, 223, 60, 187, 228, 166, 62, 76, 0, 244, 60, 190, 207, 145, 60, 234, 201, 97, 60, 58, 190, 43, 60, 10, 129, 36, 60, 97, 103, 239, 59, 167, 53, 11, 60, 245, 221, 10, 60, 208, 46, 7, 60, 104, 212, 252, 59, 32, 51, 252, 59, 98, 97, 223, 59, 29, 219, 65, 61, 251, 114, 171, 60, 82, 81, 150, 60, 110, 128, 143, 60, 15, 124, 130, 60, 230, 157, 118, 60, 197, 169, 99, 60, 172, 39, 129, 60, 64, 75, 111, 60, 175, 17, 130, 60, 103, 26, 97, 60, 71, 35, 91, 60, 49, 179, 96, 60, 127, 29, 144, 61, 252, 44, 12, 61, 210, 117, 243, 60, 190, 38, 245, 60, 255, 21, 237, 60, 108, 227, 219, 60, 231, 221, 210, 60, 71, 33, 235, 60, 249, 35, 213, 60, 155, 127, 233, 60, 243, 157, 185, 60, 162, 179, 199, 60, 24, 224, 185, 60, 65, 119, 74, 64, 114, 36, 42, 63, 91, 60, 224, 62, 84, 20, 179, 62, 41, 122, 249, 61, 209, 194, 82, 61, 226, 72, 70, 61, 27, 109, 38, 61, 254, 66, 9, 61, 66, 243, 239, 60, 43, 155, 255, 60, 132, 149, 242, 60, 144, 62, 176, 60, 109, 252, 99, 64, 161, 176, 193, 62, 13, 155, 67, 62, 132, 83, 49, 62, 54, 86, 169, 61, 245, 97, 105, 61, 127, 199, 13, 61, 38, 13, 29, 61, 215, 158, 253, 60, 230, 100, 218, 60, 138, 130, 198, 60, 20, 69, 196, 60, 229, 162, 202, 60, 159, 234, 93, 64, 28, 83, 177, 62, 148, 192, 116, 62, 163, 204, 18, 62, 65, 199, 165, 61, 238, 208, 134, 61, 138, 96, 44, 61, 101, 144, 49, 61, 11, 103, 58, 61, 2, 159, 40, 61, 42, 246, 22, 61, 32, 238, 8, 61, 97, 97, 11, 61, 19, 97, 28, 65, 165, 46, 133, 62, 247, 216, 56, 60, 54, 245, 170, 62, 174, 75, 174, 61, 42, 38, 13, 61, 83, 204, 26, 60, 147, 248, 186, 61, 207, 154, 173, 60, 103, 103, 79, 60, 29, 42, 4, 60, 222, 49, 223, 59, 139, 19, 12, 60, 120, 101, 252, 61, 82, 241, 220, 60, 213, 20, 183, 60, 164, 136, 38, 61, 26, 205, 184, 60, 117, 104, 175, 60, 91, 216, 129, 60, 73, 105, 180, 60, 237, 154, 151, 60, 150, 230, 167, 60, 250, 99, 123, 60, 201, 213, 147, 60, 115, 79, 128, 60, 127, 111, 118, 61, 212, 103, 50, 61, 82, 84, 0, 61, 93, 29, 50, 61, 231, 133, 247, 60, 235, 151, 1, 61, 1, 82, 232, 60, 110, 155, 242, 60, 216, 91, 221, 60, 69, 139, 212, 60, 148, 205, 203, 60, 185, 193, 237, 60, 9, 229, 189, 60, 105, 72, 158, 62, 227, 3, 42, 61, 28, 71, 202, 60, 38, 72, 240, 60, 79, 178, 185, 60, 6, 121, 139, 60, 210, 86, 87, 60, 174, 121, 129, 60, 103, 14, 240, 59, 58, 46, 45, 60, 105, 108, 56, 60, 242, 96, 55, 60, 184, 192, 37, 60, 8, 32, 151, 61, 126, 99, 23, 61, 242, 96, 210, 60, 1, 205, 203, 60, 57, 47, 148, 60, 157, 237, 155, 60, 85, 45, 133, 60, 101, 20, 141, 60, 40, 226, 88, 60, 125, 244, 90, 60, 228, 191, 65, 60, 131, 226, 98, 60, 130, 118, 107, 60, 65, 109, 182, 61, 218, 145, 49, 61, 255, 169, 29, 61, 195, 3, 46, 61, 158, 119, 10, 61, 87, 133, 238, 60, 156, 227, 220, 60, 242, 26, 247, 60, 72, 14, 202, 60, 228, 250, 233, 60, 229, 62, 186, 60, 52, 114, 212, 60, 78, 209, 233, 60, 74, 212, 233, 62, 23, 110, 128, 61, 124, 228, 14, 61, 227, 242, 1, 61, 158, 110, 191, 60, 230, 120, 14, 61, 227, 184, 2, 61, 147, 130, 164, 60, 99, 146, 135, 60, 18, 140, 43, 60, 62, 173, 97, 60, 139, 27, 66, 60, 75, 170, 102, 60, 22, 67, 3, 62, 68, 86, 35, 61, 255, 253, 20, 61, 90, 176, 38, 61, 162, 222, 206, 60, 108, 204, 242, 60, 18, 156, 223, 60, 32, 249, 148, 60, 124, 2, 143, 60, 9, 215, 174, 60, 162, 162, 137, 60, 216, 211, 160, 60, 74, 121, 139, 60, 83, 92, 237, 61, 202, 220, 136, 61, 105, 219, 131, 61, 8, 197, 66, 61, 185, 193, 27, 61, 90, 122, 8, 61, 185, 139, 42, 61, 241, 116, 38, 61, 161, 200, 26, 61, 214, 62, 11, 61, 224, 110, 245, 60, 187, 250, 22, 61, 143, 103, 235, 60, 254, 46, 11, 65, 219, 211, 39, 62, 167, 238, 112, 61, 164, 200, 110, 62, 109, 252, 183, 61, 226, 99, 231, 61, 66, 194, 147, 60, 185, 40, 147, 60, 85, 195, 195, 60, 31, 182, 140, 60, 110, 10, 54, 60, 199, 245, 4, 60, 135, 181, 33, 60, 213, 67, 100, 62, 131, 33, 27, 61, 48, 85, 26, 61, 161, 126, 130, 61, 70, 174, 11, 61, 227, 143, 235, 60, 45, 29, 140, 60, 231, 153, 218, 60, 161, 141, 112, 60, 122, 165, 175, 60, 159, 48, 112, 60, 52, 122, 95, 60, 248, 31, 123, 60, 42, 218, 192, 61, 17, 124, 6, 61, 3, 42, 1, 61, 122, 208, 9, 61, 63, 155, 21, 61, 218, 176, 220, 60, 2, 239, 179, 60, 211, 107, 180, 60, 132, 101, 165, 60, 99, 122, 245, 60, 38, 144, 186, 60, 21, 61, 202, 60, 143, 146, 198, 60, 223, 121, 182, 62, 71, 107, 136, 60, 111, 4, 153, 60, 20, 22, 74, 60, 84, 63, 37, 60, 82, 116, 33, 60, 178, 49, 240, 59, 237, 216, 254, 59, 55, 55, 253, 59, 103, 129, 26, 60, 229, 131, 22, 60, 251, 155, 254, 59, 225, 60, 234, 59, 217, 106, 50, 61, 152, 52, 145, 60, 57, 6, 100, 60, 68, 155, 126, 60, 30, 156, 110, 60, 184, 37, 96, 60, 237, 232, 132, 60, 156, 198, 137, 60, 218, 199, 109, 60, 52, 63, 72, 60, 20, 99, 88, 60, 7, 215, 78, 60, 10, 230, 84, 60, 178, 170, 149, 61, 216, 158, 238, 60, 177, 46, 208, 60, 80, 244, 231, 60, 242, 173, 207, 60, 60, 213, 234, 60, 68, 118, 230, 60, 59, 12, 212, 60, 61, 62, 232, 60, 10, 229, 186, 60, 137, 165, 243, 60, 47, 219, 200, 60, 236, 249, 215, 60, 210, 117, 243, 62, 57, 103, 182, 60, 34, 252, 81, 60, 104, 43, 65, 60, 81, 253, 35, 60, 43, 113, 56, 60, 47, 42, 12, 60, 4, 92, 9, 60, 84, 203, 5, 60, 196, 118, 5, 60, 63, 50, 24, 60, 192, 40, 236, 59, 111, 176, 246, 59, 19, 207, 4, 61, 132, 148, 149, 60, 19, 208, 82, 60, 67, 121, 86, 60, 132, 247, 87, 60, 206, 25, 78, 60, 140, 164, 120, 60, 255, 126, 133, 60, 252, 255, 119, 60, 218, 131, 88, 60, 219, 180, 113, 60, 14, 41, 73, 60, 33, 36, 81, 60, 101, 73, 100, 61, 191, 179, 9, 61, 106, 155, 218, 60, 248, 196, 207, 60, 7, 40, 231, 60, 168, 183, 227, 60, 255, 132, 247, 60, 109, 72, 231, 60, 45, 158, 255, 60, 235, 111, 200, 60, 157, 63, 199, 60, 18, 211, 168, 60, 6, 214, 207, 60, 247, 21, 140, 62, 221, 220, 1, 60, 184, 221, 206, 59, 68, 137, 226, 59, 88, 63, 21, 60, 135, 133, 211, 59, 158, 21, 226, 59, 145, 233, 204, 59, 237, 216, 184, 59, 227, 11, 173, 59, 46, 156, 228, 59, 26, 237, 240, 59, 190, 245, 196, 59, 114, 190, 253, 60, 32, 193, 135, 60, 49, 189, 124, 60, 200, 7, 92, 60, 178, 44, 64, 60, 87, 38, 93, 60, 254, 45, 96, 60, 14, 50, 73, 60, 73, 20, 96, 60, 212, 172, 87, 60, 28, 22, 112, 60, 36, 194, 91, 60, 146, 157, 96, 60, 179, 46, 83, 61, 206, 55, 233, 60, 34, 208, 196, 60, 247, 3, 200, 60, 155, 63, 175, 60, 197, 176, 183, 60, 29, 252, 198, 60, 93, 81, 223, 60, 90, 121, 210, 60, 183, 146, 207, 60, 183, 134, 212, 60, 118, 106, 235, 60, 133, 93, 203, 60, 111, 180, 183, 62, 236, 208, 189, 60, 34, 176, 43, 60, 186, 202, 57, 60, 223, 55, 44, 60, 248, 57, 15, 60, 127, 71, 224, 59, 77, 154, 236, 59, 30, 208, 33, 60, 223, 231, 0, 60, 223, 51, 218, 59, 120, 140, 208, 59, 7, 56, 3, 60, 83, 2, 45, 61, 4, 64, 168, 60, 73, 30, 141, 60, 99, 6, 146, 60, 95, 132, 110, 60, 210, 94, 128, 60, 59, 49, 67, 60, 145, 209, 77, 60, 78, 225, 134, 60, 123, 42, 110, 60, 233, 247, 131, 60, 225, 210, 78, 60, 104, 245, 68, 60, 190, 183, 102, 61, 58, 246, 209, 60, 187, 85, 232, 60, 134, 74, 2, 61, 177, 230, 218, 60, 144, 244, 223, 60, 105, 15, 231, 60, 199, 235, 191, 60, 22, 44, 200, 60, 181, 106, 196, 60, 102, 170, 201, 60, 248, 198, 176, 60, 47, 94, 197, 60, 78, 127, 251, 61, 171, 115, 53, 60, 132, 53, 71, 60, 29, 80, 3, 60, 8, 202, 88, 60, 104, 132, 158, 59, 140, 21, 214, 59, 71, 204, 188, 59, 130, 231, 17, 60, 193, 154, 169, 59, 178, 246, 48, 60, 1, 199, 63, 60, 56, 137, 176, 59, 250, 89, 235, 60, 198, 141, 147, 60, 14, 67, 210, 60, 123, 174, 143, 60, 202, 205, 114, 60, 94, 187, 40, 60, 46, 131, 119, 60, 41, 53, 55, 60, 144, 76, 131, 60, 117, 53, 57, 60, 160, 229, 172, 60, 221, 20, 104, 60, 45, 19, 24, 60, 225, 44, 62, 61, 32, 75, 12, 61, 200, 22, 78, 61, 68, 209, 37, 61, 1, 103, 0, 61, 154, 151, 205, 60, 62, 30, 181, 60, 122, 11, 174, 60, 252, 202, 13, 61, 229, 131, 182, 60, 215, 110, 40, 61, 183, 160, 184, 60, 89, 23, 176, 60, 245, 155, 4, 62, 246, 4, 140, 60, 171, 96, 104, 60, 39, 112, 101, 60, 203, 130, 67, 60, 229, 63, 39, 60, 61, 91, 34, 60, 180, 199, 15, 60, 43, 103, 3, 60, 224, 35, 43, 60, 175, 250, 225, 59, 223, 89, 13, 60, 35, 211, 202, 59, 223, 70, 89, 61, 46, 255, 177, 60, 117, 28, 93, 60, 69, 240, 102, 60, 187, 186, 132, 60, 0, 112, 111, 60, 174, 52, 118, 60, 64, 225, 126, 60, 125, 212, 135, 60, 98, 244, 39, 60, 80, 71, 41, 60, 32, 27, 7, 60, 212, 248, 101, 60, 218, 11, 185, 61, 117, 97, 79, 61, 209, 47, 44, 61, 141, 226, 12, 61, 60, 59, 1, 61, 30, 137, 14, 61, 177, 125, 198, 60, 215, 24, 0, 61, 232, 241, 208, 60, 99, 201, 242, 60, 168, 105, 185, 60, 86, 181, 231, 60, 33, 239, 210, 60, 97, 198, 7, 62, 170, 35, 110, 60, 247, 78, 14, 60, 40, 162, 61, 60, 149, 201, 99, 60, 15, 163, 7, 60, 243, 151, 18, 60, 182, 171, 0, 60, 103, 225, 253, 59, 181, 30, 229, 59, 140, 11, 26, 60, 131, 70, 214, 59, 235, 5, 223, 59, 92, 147, 222, 60, 214, 214, 106, 60, 136, 7, 83, 60, 219, 238, 119, 60, 211, 253, 93, 60, 33, 237, 91, 60, 126, 20, 80, 60, 100, 220, 59, 60, 159, 103, 48, 60, 35, 83, 40, 60, 139, 104, 47, 60, 107, 24, 103, 60, 241, 97, 40, 60, 255, 185, 149, 61, 24, 128, 223, 60, 146, 9, 196, 60, 62, 89, 211, 60, 180, 245, 18, 61, 146, 91, 9, 61, 235, 16, 9, 61, 64, 18, 205, 60, 233, 90, 225, 60, 135, 175, 180, 60, 18, 235, 169, 60, 148, 131, 197, 60, 42, 79, 194, 60, 121, 158, 211, 62, 228, 241, 247, 60, 23, 82, 183, 60, 172, 74, 131, 60, 220, 220, 135, 60, 25, 174, 85, 60, 229, 27, 51, 60, 159, 5, 228, 59, 88, 208, 46, 60, 40, 22, 48, 60, 206, 208, 206, 59, 220, 88, 213, 59, 31, 46, 27, 60, 176, 210, 179, 61, 39, 121, 57, 61, 122, 50, 10, 61, 237, 157, 35, 61, 19, 50, 202, 60, 30, 176, 225, 60, 103, 128, 204, 60, 252, 151, 164, 60, 7, 111, 177, 60, 10, 11, 182, 60, 40, 104, 136, 60, 37, 136, 148, 60, 20, 120, 117, 60, 240, 155, 83, 62, 189, 44, 245, 61, 161, 88, 134, 61, 91, 66, 151, 61, 53, 62, 61, 61, 134, 108, 93, 61, 110, 89, 60, 61, 190, 139, 39, 61, 85, 56, 65, 61, 62, 10, 34, 61, 192, 218, 217, 60, 232, 159, 220, 60, 16, 148, 246, 60, 3, 131, 213, 63, 21, 57, 100, 62, 73, 89, 195, 61, 29, 72, 29, 61, 130, 48, 138, 60, 245, 174, 138, 60, 173, 150, 248, 60, 35, 202, 6, 61, 170, 161, 32, 61, 126, 197, 35, 60, 50, 128, 2, 61, 44, 147, 185, 60, 164, 44, 243, 59, 13, 55, 223, 63, 161, 214, 178, 62, 147, 102, 175, 62, 243, 249, 162, 61, 195, 162, 182, 61, 247, 163, 75, 61, 35, 251, 26, 61, 107, 30, 59, 61, 1, 113, 238, 60, 152, 31, 204, 60, 226, 152, 48, 61, 165, 153, 5, 61, 255, 217, 246, 60, 240, 31, 95, 64, 53, 146, 0, 63, 93, 181, 65, 62, 70, 220, 201, 61, 249, 175, 23, 62, 226, 226, 157, 61, 69, 4, 131, 61, 146, 133, 189, 61, 9, 116, 138, 61, 71, 116, 90, 61, 18, 95, 176, 61, 61, 37, 90, 61, 62, 163, 98, 61, 18, 168, 73, 63, 96, 60, 100, 62, 242, 45, 125, 61, 99, 167, 36, 61, 56, 181, 140, 60, 141, 198, 82, 60, 25, 74, 194, 60, 35, 32, 125, 60, 26, 253, 66, 60, 23, 200, 183, 60, 241, 9, 201, 60, 66, 154, 32, 60, 200, 2, 174, 59, 240, 126, 51, 64, 33, 229, 187, 62, 35, 171, 129, 62, 113, 138, 246, 61, 179, 76, 32, 62, 167, 8, 141, 61, 182, 75, 86, 61, 39, 111, 152, 61, 148, 47, 29, 61, 99, 94, 163, 61, 231, 87, 133, 61, 58, 158, 0, 61, 249, 55, 161, 61, 113, 102, 20, 64, 95, 150, 173, 62, 57, 120, 48, 62, 135, 123, 15, 62, 194, 79, 173, 61, 222, 37, 14, 61, 243, 167, 196, 61, 243, 100, 72, 61, 130, 127, 82, 61, 249, 23, 98, 61, 69, 11, 213, 61, 210, 110, 166, 61, 184, 91, 69, 61, 254, 109, 122, 62, 207, 101, 185, 61, 203, 78, 150, 61, 95, 209, 102, 61, 46, 203, 2, 61, 248, 88, 230, 60, 49, 115, 161, 60, 24, 158, 92, 60, 190, 123, 93, 60, 198, 211, 88, 60, 38, 73, 50, 60, 8, 151, 208, 59, 137, 166, 39, 60, 187, 58, 246, 62, 212, 200, 255, 61, 33, 176, 242, 61, 82, 228, 167, 61, 221, 128, 214, 61, 41, 23, 36, 61, 122, 18, 79, 61, 172, 172, 52, 61, 224, 152, 53, 61, 16, 253, 245, 60, 100, 221, 52, 61, 47, 39, 143, 60, 126, 46, 158, 60, 68, 26, 91, 63, 11, 174, 113, 62, 118, 240, 31, 62, 108, 62, 172, 61, 142, 177, 27, 62, 102, 129, 160, 61, 247, 228, 158, 61, 149, 65, 132, 61, 252, 169, 54, 61, 132, 192, 204, 61, 195, 17, 28, 61, 186, 172, 132, 61, 136, 213, 243, 60, 226, 192, 48, 63, 137, 28, 207, 61, 81, 117, 160, 61, 63, 78, 48, 61, 119, 236, 129, 61, 162, 67, 221, 60, 171, 149, 147, 60, 122, 159, 23, 61, 41, 75, 11, 61, 114, 70, 32, 60, 12, 73, 253, 60, 33, 158, 175, 60, 101, 240, 147, 60, 19, 64, 248, 62, 113, 208, 37, 62, 119, 27, 135, 62, 220, 47, 59, 62, 153, 101, 54, 62, 160, 143, 27, 61, 94, 11, 148, 61, 197, 21, 131, 61, 147, 232, 92, 61, 169, 136, 181, 61, 206, 215, 0, 61, 254, 158, 105, 61, 234, 65, 123, 61, 44, 153, 67, 63, 192, 244, 105, 62, 11, 117, 128, 61, 6, 92, 3, 62, 94, 125, 18, 62, 158, 192, 191, 61, 153, 21, 147, 61, 28, 130, 110, 61, 225, 189, 29, 61, 37, 127, 65, 61, 42, 60, 132, 61, 73, 52, 51, 61, 250, 244, 130, 61, 61, 69, 204, 62, 185, 32, 170, 61, 30, 135, 196, 61, 69, 103, 59, 61, 80, 21, 147, 61, 109, 209, 28, 61, 247, 109, 18, 61, 220, 110, 72, 61, 26, 157, 151, 60, 254, 148, 213, 60, 25, 132, 146, 60, 200, 127, 188, 60, 65, 234, 102, 60, 190, 135, 130, 63, 104, 217, 71, 62, 148, 55, 199, 61, 73, 177, 134, 61, 105, 94, 159, 60, 28, 167, 135, 60, 52, 134, 86, 61, 208, 144, 52, 61, 96, 149, 196, 60, 238, 89, 10, 61, 160, 231, 94, 61, 179, 63, 204, 60, 85, 77, 160, 60, 16, 58, 8, 64, 151, 2, 122, 62, 223, 32, 1, 62, 39, 222, 255, 61, 103, 135, 232, 61, 217, 234, 20, 61, 53, 233, 155, 61, 124, 124, 151, 61, 97, 44, 87, 61, 188, 253, 84, 61, 190, 42, 232, 60, 239, 30, 141, 61, 15, 67, 17, 61, 10, 62, 204, 63, 73, 211, 196, 61, 46, 30, 132, 62, 65, 105, 134, 61, 183, 198, 176, 61, 142, 80, 44, 61, 52, 84, 222, 60, 164, 25, 85, 61, 135, 186, 173, 60, 79, 188, 133, 61, 148, 41, 134, 61, 252, 55, 96, 61, 185, 250, 162, 61, 203, 33, 137, 64, 112, 168, 211, 62, 202, 127, 149, 62, 94, 80, 210, 61, 4, 244, 17, 62, 40, 170, 102, 61, 137, 228, 137, 61, 113, 128, 138, 61, 79, 114, 138, 61, 107, 34, 76, 61, 10, 168, 195, 61, 202, 162, 156, 61, 219, 49, 164, 61, 232, 112, 80, 64, 240, 111, 171, 62, 253, 138, 17, 63, 162, 227, 14, 62, 82, 78, 92, 62, 60, 162, 170, 61, 95, 179, 10, 62, 134, 84, 2, 62, 156, 72, 47, 61, 212, 241, 210, 61, 4, 102, 173, 61, 47, 31, 102, 61, 48, 206, 168, 61, 238, 239, 118, 63, 231, 197, 184, 61, 11, 34, 201, 61, 242, 110, 41, 61, 183, 230, 155, 61, 45, 246, 18, 61, 178, 105, 97, 61, 249, 53, 208, 60, 105, 199, 152, 60, 17, 135, 75, 61, 119, 106, 146, 60, 47, 220, 64, 61, 237, 148, 23, 61, 132, 169, 243, 62, 114, 79, 74, 61, 163, 108, 3, 62, 248, 35, 96, 61, 185, 215, 18, 61, 239, 81, 49, 61, 76, 83, 43, 61, 7, 202, 59, 61, 9, 201, 20, 61, 12, 225, 162, 60, 212, 216, 32, 61, 52, 130, 18, 61, 86, 94, 30, 61, 184, 190, 63, 63, 103, 43, 164, 61, 250, 186, 7, 62, 254, 125, 147, 61, 195, 54, 149, 61, 227, 205, 98, 61, 76, 27, 109, 61, 247, 78, 96, 61, 225, 54, 85, 61, 142, 20, 44, 61, 39, 155, 93, 61, 25, 159, 61, 61, 191, 85, 40, 61, 152, 45, 148, 63, 201, 153, 14, 62, 112, 252, 213, 61, 40, 226, 76, 61, 18, 138, 10, 61, 198, 217, 116, 61, 116, 137, 14, 61, 233, 175, 239, 60, 182, 207, 169, 60, 43, 243, 146, 60, 86, 65, 69, 61, 144, 28, 181, 60, 8, 15, 232, 60, 194, 67, 172, 63, 63, 31, 146, 62, 238, 27, 160, 61, 227, 187, 179, 61, 0, 67, 160, 61, 34, 122, 138, 61, 230, 30, 186, 61, 248, 65, 177, 61, 19, 165, 200, 60, 11, 218, 225, 60, 103, 135, 0, 62, 40, 201, 56, 61, 212, 214, 21, 61, 88, 26, 179, 63, 7, 58, 178, 62, 148, 238, 124, 62, 191, 110, 226, 61, 157, 152, 79, 61, 61, 210, 131, 61, 238, 133, 238, 61, 29, 177, 155, 61, 165, 0, 145, 61, 0, 136, 56, 61, 26, 227, 13, 61, 216, 248, 95, 61, 1, 232, 248, 60, 158, 225, 150, 63, 131, 150, 18, 62, 166, 20, 222, 61, 25, 198, 191, 61, 82, 113, 251, 60, 104, 61, 147, 60, 105, 60, 231, 60, 0, 148, 194, 60, 77, 191, 135, 60, 187, 29, 218, 60, 170, 247, 46, 61, 83, 120, 52, 61, 118, 42, 161, 60, 11, 61, 6, 62, 196, 181, 129, 61, 91, 225, 49, 61, 66, 87, 54, 61, 32, 197, 1, 61, 230, 20, 154, 60, 103, 121, 173, 60, 41, 210, 181, 60, 96, 216, 208, 60, 186, 60, 163, 60, 15, 14, 212, 60, 4, 206, 211, 60, 175, 93, 100, 60, 197, 77, 235, 61, 159, 14, 65, 61, 102, 185, 45, 61, 136, 99, 27, 61, 87, 238, 4, 61, 171, 177, 229, 60, 223, 211, 23, 61, 188, 207, 5, 61, 200, 73, 8, 61, 162, 40, 186, 60, 139, 218, 2, 61, 83, 8, 13, 61, 103, 247, 208, 60, 250, 241, 19, 63, 252, 189, 67, 61, 250, 240, 142, 60, 158, 142, 22, 61, 93, 24, 134, 61, 2, 2, 9, 61, 247, 226, 26, 61, 112, 114, 179, 60, 73, 149, 233, 60, 163, 2, 93, 60, 2, 67, 166, 60, 89, 63, 2, 61, 203, 129, 102, 60, 197, 27, 132, 62, 107, 84, 236, 60, 112, 251, 5, 61, 63, 46, 213, 60, 152, 10, 179, 60, 62, 87, 160, 60, 76, 50, 110, 60, 228, 80, 220, 60, 94, 178, 140, 60, 255, 141, 97, 60, 61, 226, 129, 60, 120, 249, 68, 60, 37, 67, 88, 60, 104, 199, 229, 61, 0, 57, 10, 61, 173, 66, 46, 61, 137, 91, 13, 61, 117, 42, 244, 60, 239, 247, 14, 61, 82, 64, 189, 60, 81, 47, 51, 61, 159, 76, 224, 60, 170, 5, 177, 60, 209, 29, 184, 60, 246, 125, 129, 60, 125, 73, 148, 60, 22, 41, 153, 62, 72, 141, 154, 61, 154, 65, 214, 60, 215, 191, 167, 60, 14, 230, 161, 60, 39, 39, 157, 60, 236, 105, 184, 60, 147, 33, 215, 60, 98, 115, 141, 60, 56, 124, 107, 60, 41, 67, 138, 60, 163, 168, 127, 60, 89, 246, 223, 59, 156, 23, 213, 61, 62, 3, 145, 60, 70, 242, 124, 60, 134, 2, 76, 60, 24, 133, 25, 60, 174, 59, 11, 60, 135, 13, 61, 60, 185, 38, 59, 60, 175, 116, 14, 60, 185, 40, 12, 60, 44, 227, 10, 60, 81, 25, 10, 60, 170, 54, 222, 59, 10, 103, 128, 61, 165, 93, 157, 60, 102, 227, 129, 60, 164, 218, 126, 60, 195, 144, 108, 60, 176, 210, 72, 60, 248, 173, 108, 60, 191, 68, 80, 60, 182, 29, 79, 60, 73, 199, 61, 60, 42, 130, 59, 60, 87, 39, 67, 60, 9, 52, 38, 60, 89, 62, 70, 63, 140, 139, 62, 61, 234, 30, 42, 61, 59, 113, 6, 61, 80, 222, 192, 60, 211, 31, 179, 60, 32, 213, 125, 60, 72, 238, 80, 60, 176, 36, 152, 60, 155, 224, 75, 61, 253, 221, 214, 60, 119, 122, 70, 60, 64, 239, 60, 60, 251, 67, 31, 63, 16, 33, 8, 61, 4, 210, 249, 60, 80, 104, 247, 60, 163, 129, 168, 60, 12, 210, 149, 60, 253, 49, 120, 60, 73, 229, 69, 60, 159, 170, 74, 60, 53, 159, 34, 60, 236, 71, 112, 60, 239, 176, 74, 60, 233, 51, 50, 60, 64, 230, 17, 62, 198, 132, 14, 61, 196, 214, 4, 61, 146, 28, 16, 61, 78, 20, 17, 61, 226, 153, 5, 61, 44, 35, 190, 60, 189, 121, 140, 60, 221, 190, 177, 60, 48, 220, 144, 60, 103, 113, 187, 60, 136, 94, 163, 60, 188, 77, 132, 60, 117, 122, 10, 63, 82, 41, 122, 60, 157, 81, 151, 60, 177, 42, 27, 60, 187, 216, 160, 60, 42, 129, 174, 60, 244, 164, 129, 60, 132, 91, 32, 60, 150, 246, 244, 59, 92, 159, 4, 61, 56, 176, 123, 61, 247, 207, 97, 61, 37, 148, 47, 60, 49, 19, 32, 63, 15, 11, 94, 60, 143, 222, 6, 61, 243, 168, 108, 60, 106, 111, 21, 60, 141, 234, 162, 60, 64, 125, 100, 59, 214, 52, 251, 59, 135, 47, 27, 60, 86, 51, 144, 60, 126, 13, 206, 59, 118, 19, 160, 59, 59, 160, 2, 60, 72, 170, 144, 62, 172, 234, 176, 60, 215, 231, 252, 60, 253, 208, 167, 60, 95, 51, 92, 60, 34, 17, 181, 60, 94, 40, 2, 60, 128, 135, 128, 60, 20, 236, 31, 60, 2, 206, 140, 60, 76, 95, 73, 60, 208, 250, 22, 60, 239, 208, 85, 60, 74, 69, 131, 62, 243, 183, 51, 61, 23, 246, 52, 60, 113, 5, 237, 59, 59, 58, 133, 60, 113, 7, 41, 60, 74, 234, 162, 60, 160, 109, 166, 59, 85, 255, 221, 59, 74, 51, 83, 60, 193, 187, 27, 60, 60, 90, 52, 60, 197, 76, 252, 59, 54, 186, 180, 62, 254, 156, 192, 60, 85, 193, 54, 60, 162, 206, 174, 60, 242, 245, 165, 60, 47, 61, 183, 60, 200, 186, 180, 60, 16, 116, 9, 60, 78, 39, 22, 60, 187, 202, 17, 60, 88, 121, 45, 60, 250, 202, 151, 60, 12, 64, 166, 60, 159, 198, 44, 62, 157, 135, 6, 61, 191, 156, 7, 61, 208, 29, 210, 60, 143, 130, 8, 61, 221, 171, 19, 61, 100, 70, 180, 60, 27, 4, 56, 60, 206, 178, 92, 60, 168, 30, 90, 60, 195, 133, 147, 60, 152, 160, 1, 61, 53, 46, 12, 61, 190, 146, 48, 64, 169, 120, 117, 62, 182, 62, 237, 62, 237, 254, 204, 60, 60, 218, 8, 60, 117, 203, 148, 60, 74, 127, 112, 60, 165, 163, 45, 60, 179, 40, 136, 61, 174, 112, 113, 60, 150, 37, 145, 60, 196, 165, 145, 61, 222, 41, 218, 60, 192, 52, 20, 62, 56, 206, 90, 60, 146, 21, 186, 60, 35, 242, 87, 60, 93, 80, 139, 60, 128, 129, 148, 60, 139, 63, 58, 60, 211, 184, 40, 60, 145, 10, 71, 60, 112, 206, 242, 59, 83, 225, 164, 60, 233, 163, 124, 60, 120, 157, 50, 60, 238, 54, 181, 61, 193, 239, 129, 60, 53, 203, 1, 61, 229, 211, 176, 60, 46, 117, 236, 60, 114, 129, 253, 60, 52, 108, 151, 60, 126, 79, 141, 60, 131, 235, 157, 60, 141, 80, 3, 60, 139, 69, 157, 60, 120, 249, 161, 60, 129, 249, 99, 60, 52, 13, 195, 61, 135, 62, 240, 60, 53, 234, 156, 60, 28, 202, 113, 60, 148, 17, 195, 59, 94, 79, 90, 59, 110, 204, 237, 59, 202, 153, 174, 59, 124, 214, 94, 59, 83, 82, 196, 59, 80, 161, 42, 60, 143, 228, 107, 59, 97, 84, 133, 59, 58, 214, 115, 62, 237, 73, 157, 60, 110, 253, 201, 60, 76, 133, 66, 60, 139, 88, 9, 60, 255, 99, 164, 59, 195, 136, 48, 60, 230, 203, 3, 60, 127, 159, 234, 59, 34, 166, 235, 59, 202, 73, 217, 59, 123, 200, 52, 60, 150, 122, 235, 59, 144, 202, 73, 62, 134, 25, 179, 60, 52, 62, 237, 60, 21, 81, 58, 60, 198, 110, 56, 60, 182, 12, 15, 60, 163, 23, 117, 60, 114, 164, 26, 60, 118, 186, 65, 60, 178, 251, 102, 60, 247, 29, 255, 59, 136, 86, 80, 60, 22, 208, 3, 60, 92, 140, 90, 63, 241, 221, 134, 63, 61, 152, 203, 61, 2, 26, 63, 62, 120, 5, 179, 60, 229, 106, 191, 60, 162, 152, 170, 60, 118, 143, 162, 60, 92, 197, 172, 60, 20, 215, 112, 60, 52, 44, 86, 60, 160, 190, 20, 60, 106, 20, 119, 60, 250, 201, 83, 63, 171, 253, 135, 63, 170, 68, 76, 62, 243, 140, 14, 62, 59, 51, 42, 61, 151, 246, 7, 61, 33, 192, 205, 60, 55, 214, 249, 60, 230, 236, 247, 60, 141, 139, 205, 60, 109, 242, 135, 60, 60, 178, 68, 60, 149, 245, 187, 60, 106, 150, 148, 63, 224, 43, 58, 63, 72, 144, 242, 61, 240, 26, 145, 61, 65, 60, 88, 61, 123, 141, 90, 61, 36, 116, 105, 61, 27, 75, 181, 60, 47, 46, 39, 61, 200, 130, 128, 61, 89, 164, 9, 61, 171, 236, 31, 61, 167, 186, 14, 61, 16, 105, 77, 63, 249, 154, 152, 62, 90, 14, 224, 61, 161, 174, 196, 61, 140, 159, 138, 61, 247, 213, 7, 61, 235, 13, 188, 60, 223, 193, 95, 60, 141, 166, 214, 60, 113, 123, 252, 60, 113, 83, 147, 60, 255, 192, 85, 60, 236, 151, 20, 60, 32, 196, 247, 62, 34, 159, 165, 62, 167, 137, 200, 62, 194, 169, 108, 61, 130, 221, 130, 61, 177, 175, 53, 61, 21, 193, 162, 61, 36, 41, 99, 60, 153, 51, 78, 61, 215, 235, 55, 61, 246, 96, 2, 61, 205, 214, 26, 61, 133, 50, 23, 61, 77, 212, 200, 63, 36, 230, 135, 62, 217, 64, 123, 62, 9, 184, 0, 62, 180, 153, 38, 62, 65, 49, 168, 61, 128, 150, 45, 61, 7, 67, 90, 61, 32, 224, 134, 61, 89, 30, 134, 61, 147, 63, 94, 61, 84, 158, 26, 61, 115, 42, 3, 61, 38, 15, 141, 63, 46, 147, 135, 62, 9, 234, 165, 61, 183, 8, 141, 61, 94, 145, 13, 61, 177, 98, 141, 60, 191, 156, 125, 60, 245, 177, 119, 60, 3, 95, 50, 60, 81, 239, 111, 60, 61, 28, 75, 60, 37, 217, 61, 60, 115, 63, 58, 60, 246, 108, 20, 64, 255, 119, 25, 62, 28, 242, 46, 62, 122, 197, 35, 62, 155, 73, 16, 62, 152, 89, 173, 61, 107, 39, 246, 61, 48, 63, 99, 61, 11, 229, 58, 61, 141, 68, 99, 61, 188, 77, 250, 60, 22, 205, 254, 60, 195, 248, 240, 60, 156, 32, 68, 64, 2, 13, 230, 62, 98, 232, 63, 62, 70, 169, 40, 62, 246, 119, 182, 61, 73, 17, 189, 61, 36, 83, 179, 61, 128, 220, 203, 61, 126, 125, 142, 61, 158, 185, 143, 61, 79, 210, 36, 61, 117, 175, 15, 61, 161, 65, 125, 61, 129, 110, 224, 62, 67, 181, 119, 61, 129, 128, 246, 60, 161, 163, 70, 61, 18, 94, 149, 61, 134, 98, 26, 61, 132, 226, 84, 61, 117, 184, 98, 60, 165, 228, 156, 60, 126, 196, 108, 60, 31, 119, 137, 60, 91, 219, 131, 60, 155, 74, 123, 60, 219, 78, 219, 63, 137, 222, 119, 62, 25, 40, 93, 62, 226, 52, 24, 62, 148, 227, 68, 61, 211, 75, 171, 61, 226, 112, 214, 61, 157, 206, 98, 61, 175, 179, 97, 61, 30, 155, 176, 61, 243, 207, 44, 61, 155, 35, 224, 60, 11, 97, 134, 61, 177, 252, 151, 63, 212, 185, 98, 62, 60, 146, 100, 62, 45, 69, 43, 62, 244, 11, 250, 61, 115, 147, 189, 61, 96, 49, 0, 62, 86, 24, 56, 61, 105, 251, 68, 61, 107, 194, 150, 61, 107, 203, 129, 61, 221, 197, 210, 60, 204, 12, 48, 61, 238, 231, 214, 63, 170, 229, 236, 62, 204, 234, 48, 62, 165, 246, 11, 62, 246, 208, 158, 61, 67, 194, 11, 62, 252, 4, 195, 61, 50, 78, 162, 60, 24, 135, 150, 60, 0, 135, 189, 60, 218, 34, 169, 59, 68, 70, 204, 60, 135, 232, 52, 60, 62, 110, 112, 63, 13, 138, 95, 62, 202, 218, 26, 62, 227, 253, 113, 62, 231, 253, 129, 61, 21, 145, 43, 62, 177, 234, 158, 61, 202, 30, 81, 61, 100, 64, 227, 60, 201, 130, 75, 61, 153, 51, 182, 60, 245, 49, 51, 60, 208, 239, 189, 60, 101, 8, 143, 63, 147, 249, 239, 62, 64, 132, 88, 62, 190, 153, 244, 61, 247, 135, 141, 61, 125, 18, 200, 61, 228, 195, 207, 61, 49, 248, 189, 61, 134, 0, 47, 61, 38, 23, 255, 60, 251, 48, 155, 60, 19, 205, 189, 60, 172, 163, 189, 60, 240, 224, 67, 63, 28, 21, 229, 61, 67, 53, 9, 62, 188, 117, 69, 62, 186, 100, 212, 61, 221, 110, 253, 61, 217, 254, 0, 61, 251, 150, 179, 60, 138, 63, 20, 61, 130, 129, 232, 60, 180, 61, 251, 60, 248, 38, 45, 61, 138, 19, 47, 61, 12, 78, 7, 64, 145, 177, 227, 62, 177, 156, 19, 62, 112, 47, 160, 61, 55, 199, 86, 62, 202, 243, 226, 61, 63, 143, 217, 61, 216, 147, 47, 61, 118, 86, 69, 61, 81, 176, 81, 61, 159, 128, 32, 61, 63, 106, 63, 61, 61, 182, 18, 61, 73, 16, 217, 63, 45, 99, 134, 62, 68, 235, 63, 62, 106, 43, 120, 62, 96, 19, 75, 62, 6, 20, 142, 62, 134, 242, 171, 61, 15, 153, 123, 61, 156, 245, 139, 61, 250, 20, 231, 61, 72, 98, 146, 61, 2, 133, 124, 61, 236, 225, 163, 61, 234, 126, 15, 63, 13, 130, 110, 61, 70, 31, 249, 61, 248, 4, 248, 60, 188, 3, 11, 60, 165, 251, 180, 60, 11, 222, 68, 61, 13, 90, 89, 60, 176, 213, 48, 60, 234, 244, 151, 60, 42, 55, 63, 60, 197, 168, 123, 60, 199, 205, 133, 60, 108, 83, 23, 63, 105, 7, 92, 61, 70, 87, 196, 61, 225, 244, 98, 61, 1, 196, 150, 61, 38, 253, 195, 60, 115, 172, 244, 61, 97, 41, 200, 60, 221, 2, 25, 61, 66, 55, 198, 60, 204, 2, 18, 61, 43, 195, 158, 60, 107, 113, 150, 60, 243, 7, 150, 62, 13, 203, 20, 62, 20, 153, 179, 61, 130, 29, 173, 61, 13, 62, 100, 61, 174, 200, 130, 61, 33, 114, 127, 61, 227, 4, 187, 60, 96, 178, 36, 61, 243, 98, 207, 60, 253, 70, 170, 60, 137, 192, 222, 60, 72, 10, 237, 60, 53, 159, 140, 63, 207, 238, 74, 61, 54, 39, 240, 61, 52, 234, 235, 61, 65, 43, 179, 61, 137, 143, 38, 61, 183, 157, 38, 61, 245, 215, 4, 61, 133, 29, 5, 61, 154, 38, 44, 61, 150, 249, 232, 60, 73, 230, 236, 60, 70, 178, 192, 60, 112, 154, 29, 64, 145, 157, 95, 62, 18, 196, 171, 61, 253, 157, 79, 62, 110, 215, 28, 62, 16, 88, 17, 62, 248, 179, 123, 61, 180, 131, 208, 60, 5, 23, 168, 61, 80, 194, 19, 60, 233, 160, 159, 61, 66, 169, 2, 61, 48, 245, 110, 61, 18, 170, 206, 63, 97, 107, 204, 62, 247, 166, 208, 62, 103, 140, 158, 62, 74, 76, 42, 62, 69, 34, 120, 61, 95, 223, 205, 61, 53, 126, 212, 61, 195, 207, 189, 61, 149, 61, 107, 61, 160, 208, 118, 61, 65, 248, 48, 61, 100, 25, 30, 61, 192, 250, 154, 62, 156, 214, 43, 62, 43, 215, 72, 61, 96, 20, 87, 60, 97, 163, 151, 60, 150, 76, 238, 60, 217, 247, 7, 61, 182, 112, 22, 60, 207, 142, 47, 60, 213, 91, 47, 59, 0, 47, 246, 59, 93, 194, 165, 60, 185, 22, 176, 59, 124, 30, 186, 62, 78, 228, 33, 62, 251, 125, 144, 61, 189, 134, 131, 61, 210, 194, 100, 61, 86, 190, 137, 61, 122, 200, 171, 59, 13, 109, 127, 60, 146, 141, 23, 61, 84, 246, 178, 60, 162, 103, 49, 60, 6, 181, 235, 60, 164, 152, 8, 61, 224, 96, 154, 62, 185, 211, 17, 62, 68, 167, 246, 61, 223, 165, 158, 61, 38, 104, 129, 61, 142, 134, 210, 61, 89, 105, 14, 62, 19, 140, 210, 60, 97, 26, 100, 61, 119, 167, 25, 61, 85, 24, 30, 61, 87, 39, 43, 61, 53, 163, 188, 60, 118, 84, 170, 62, 217, 176, 75, 61, 174, 194, 99, 61, 26, 44, 189, 60, 199, 177, 76, 60, 194, 6, 10, 61, 238, 0, 207, 60, 176, 185, 80, 60, 176, 29, 14, 60, 196, 116, 30, 60, 32, 92, 29, 60, 167, 89, 182, 60, 200, 55, 155, 60, 193, 108, 69, 62, 160, 82, 202, 60, 204, 111, 60, 61, 191, 153, 191, 60, 72, 24, 199, 60, 62, 14, 63, 61, 164, 30, 53, 61, 23, 63, 192, 60, 227, 6, 129, 60, 2, 86, 154, 60, 134, 205, 193, 60, 245, 217, 67, 60, 121, 179, 163, 60, 163, 68, 129, 62, 243, 237, 3, 61, 94, 91, 183, 61, 87, 21, 1, 61, 200, 95, 245, 60, 43, 251, 230, 60, 148, 87, 18, 61, 106, 73, 209, 60, 93, 58, 209, 60, 12, 76, 130, 60, 5, 134, 23, 61, 127, 75, 187, 60, 18, 25, 17, 61, 115, 65, 53, 63, 61, 31, 87, 61, 110, 97, 76, 61, 115, 70, 121, 61, 36, 142, 65, 61, 130, 75, 202, 60, 185, 170, 33, 60, 230, 154, 221, 59, 191, 131, 1, 60, 244, 35, 181, 59, 101, 118, 69, 60, 24, 46, 179, 60, 29, 145, 2, 61, 4, 65, 41, 63, 200, 152, 5, 61, 213, 66, 244, 61, 148, 29, 250, 60, 123, 45, 12, 62, 57, 167, 66, 61, 167, 64, 3, 62, 185, 96, 91, 60, 119, 103, 109, 60, 151, 54, 14, 61, 204, 41, 160, 61, 46, 138, 89, 60, 200, 89, 163, 61, 52, 143, 167, 62, 226, 80, 119, 62, 97, 145, 51, 62, 163, 212, 236, 61, 171, 167, 27, 62, 123, 117, 183, 61, 99, 237, 4, 62, 2, 162, 96, 61, 238, 180, 111, 61, 111, 55, 109, 61, 9, 9, 59, 61, 119, 157, 219, 60, 91, 94, 66, 61, 132, 116, 71, 62, 89, 161, 136, 61, 140, 85, 115, 61, 176, 251, 210, 60, 52, 247, 104, 60, 44, 110, 219, 61, 176, 236, 75, 60, 212, 140, 224, 59, 17, 13, 30, 60, 191, 100, 13, 60, 105, 36, 154, 59, 75, 208, 223, 60, 205, 128, 136, 60, 81, 52, 101, 63, 204, 165, 136, 62, 216, 86, 186, 61, 0, 90, 139, 61, 45, 206, 68, 61, 85, 6, 142, 61, 217, 57, 19, 61, 76, 207, 195, 60, 106, 35, 207, 60, 206, 110, 139, 60, 241, 76, 137, 60, 55, 247, 173, 60, 27, 232, 255, 60, 17, 150, 57, 63, 127, 94, 220, 62, 121, 227, 139, 61, 3, 75, 11, 61, 114, 193, 206, 61, 203, 100, 58, 62, 204, 70, 83, 61, 87, 170, 85, 61, 80, 244, 25, 61, 141, 212, 19, 61, 158, 40, 138, 60, 214, 235, 98, 61, 8, 230, 24, 61, 58, 189, 231, 62, 100, 72, 239, 60, 193, 147, 171, 61, 218, 157, 28, 60, 78, 190, 86, 60, 52, 151, 135, 60, 56, 188, 1, 60, 12, 75, 77, 60, 212, 140, 162, 60, 172, 99, 157, 60, 120, 120, 10, 60, 39, 23, 197, 60, 47, 105, 134, 60, 169, 17, 119, 62, 140, 209, 26, 61, 35, 227, 4, 61, 90, 84, 40, 61, 214, 134, 156, 60, 22, 254, 248, 60, 123, 7, 113, 61, 214, 124, 181, 60, 11, 62, 161, 60, 126, 36, 28, 60, 118, 154, 190, 59, 149, 24, 240, 59, 169, 61, 163, 60, 74, 161, 100, 62, 183, 137, 4, 61, 177, 128, 37, 61, 203, 206, 234, 60, 179, 71, 17, 61, 169, 56, 14, 61, 46, 241, 133, 61, 231, 202, 51, 61, 81, 42, 23, 61, 0, 39, 25, 60, 4, 139, 96, 60, 208, 173, 100, 60, 132, 77, 186, 60, 221, 145, 14, 64, 255, 201, 85, 61, 171, 147, 25, 62, 125, 120, 134, 62, 167, 42, 157, 61, 169, 153, 52, 61, 162, 16, 76, 61, 228, 23, 198, 60, 58, 159, 238, 60, 16, 210, 38, 61, 240, 49, 92, 61, 234, 231, 209, 60, 207, 70, 154, 60, 243, 203, 221, 62, 143, 157, 60, 61, 53, 124, 171, 61, 230, 255, 210, 61, 25, 93, 40, 61, 234, 41, 226, 60, 223, 29, 24, 61, 69, 114, 142, 60, 122, 178, 134, 60, 124, 176, 27, 61, 140, 140, 116, 60, 98, 28, 48, 61, 88, 69, 92, 60, 223, 233, 231, 62, 186, 138, 126, 61, 220, 43, 238, 61, 126, 68, 193, 61, 191, 94, 218, 60, 42, 153, 22, 61, 203, 71, 167, 60, 13, 53, 169, 60, 242, 249, 191, 60, 229, 104, 127, 61, 51, 77, 3, 61, 86, 120, 166, 60, 158, 99, 168, 60, 253, 245, 164, 63, 68, 167, 174, 61, 123, 161, 39, 62, 116, 174, 236, 62, 178, 117, 74, 62, 247, 37, 230, 60, 120, 35, 37, 62, 6, 185, 115, 60, 229, 17, 173, 60, 216, 76, 15, 61, 74, 65, 193, 60, 15, 207, 131, 60, 119, 144, 206, 60, 244, 95, 179, 62, 85, 33, 159, 61, 201, 148, 218, 61, 189, 150, 184, 61, 96, 74, 52, 61, 46, 161, 196, 60, 9, 111, 48, 61, 92, 206, 138, 60, 165, 187, 16, 61, 21, 226, 166, 60, 253, 242, 128, 60, 80, 206, 235, 60, 73, 236, 75, 60, 147, 115, 126, 62, 78, 215, 249, 61, 162, 112, 219, 61, 89, 66, 177, 61, 126, 42, 159, 61, 110, 7, 9, 61, 108, 177, 66, 61, 235, 44, 251, 60, 14, 111, 59, 61, 10, 117, 166, 60, 111, 130, 3, 61, 133, 90, 120, 60, 189, 88, 249, 60, 158, 218, 70, 63, 80, 112, 113, 60, 223, 139, 169, 61, 49, 137, 14, 61, 205, 175, 6, 60, 205, 9, 87, 60, 82, 180, 32, 61, 81, 212, 56, 60, 165, 121, 140, 60, 11, 78, 81, 61, 128, 111, 105, 60, 178, 82, 232, 60, 45, 17, 230, 60, 99, 10, 195, 61, 245, 1, 2, 61, 90, 127, 28, 60, 52, 52, 20, 61, 243, 5, 186, 60, 121, 141, 223, 60, 57, 15, 21, 61, 128, 192, 18, 60, 178, 182, 181, 60, 56, 174, 232, 60, 115, 147, 152, 60, 132, 80, 169, 60, 206, 64, 30, 60, 32, 98, 60, 62, 94, 247, 38, 61, 53, 168, 127, 60, 208, 57, 248, 60, 204, 202, 57, 61, 120, 170, 186, 60, 171, 23, 32, 61, 40, 253, 101, 60, 37, 239, 118, 60, 79, 237, 28, 61, 133, 114, 142, 60, 252, 164, 230, 60, 80, 40, 67, 60, 100, 15, 248, 62, 167, 12, 10, 61, 43, 45, 249, 61, 102, 254, 129, 61, 237, 55, 33, 61, 35, 179, 166, 61, 73, 236, 101, 60, 1, 137, 174, 60, 67, 161, 68, 60, 203, 20, 46, 60, 13, 1, 54, 60, 191, 23, 97, 60, 29, 199, 29, 60, 31, 14, 27, 63, 109, 142, 69, 61, 150, 79, 146, 61, 225, 110, 190, 61, 70, 69, 173, 60, 6, 232, 76, 61, 26, 211, 140, 60, 131, 7, 129, 60, 56, 67, 85, 60, 178, 52, 103, 60, 154, 149, 159, 60, 225, 123, 148, 60, 137, 112, 108, 60, 15, 126, 9, 63, 208, 24, 125, 61, 14, 227, 145, 61, 147, 198, 15, 61, 30, 76, 236, 60, 165, 10, 16, 61, 142, 109, 246, 60, 71, 184, 144, 60, 42, 97, 159, 60, 64, 243, 181, 60, 4, 67, 144, 60, 51, 185, 178, 60, 205, 207, 227, 60, 126, 30, 86, 63, 236, 132, 81, 61, 189, 67, 154, 61, 172, 21, 46, 61, 163, 137, 141, 60, 217, 91, 184, 60, 216, 195, 184, 61, 129, 76, 131, 60, 241, 99, 49, 61, 54, 27, 137, 60, 171, 79, 229, 60, 149, 156, 138, 60, 128, 35, 46, 60, 130, 57, 194, 62, 49, 239, 61, 61, 142, 97, 162, 61, 65, 82, 10, 61, 26, 147, 18, 61, 108, 116, 197, 60, 17, 160, 20, 61, 176, 111, 131, 60, 229, 23, 86, 61, 210, 31, 245, 60, 156, 135, 126, 60, 251, 136, 47, 61, 76, 248, 136, 60, 238, 96, 151, 62, 7, 178, 132, 61, 187, 51, 70, 61, 119, 0, 203, 60, 146, 61, 178, 60, 204, 109, 156, 60, 72, 153, 106, 61, 110, 253, 155, 60, 125, 18, 128, 61, 65, 103, 25, 61, 211, 18, 223, 60, 95, 9, 4, 61, 217, 56, 163, 60, 55, 72, 165, 63, 212, 162, 16, 62, 27, 174, 39, 62, 162, 14, 126, 61, 165, 134, 33, 61, 85, 252, 47, 61]).concat([47, 44, 134, 60, 246, 17, 3, 61, 165, 152, 5, 61, 80, 183, 80, 60, 187, 64, 17, 61, 167, 70, 173, 60, 114, 176, 156, 60, 126, 34, 132, 63, 103, 223, 210, 61, 69, 162, 4, 62, 219, 57, 155, 61, 21, 225, 94, 61, 6, 152, 60, 61, 220, 18, 164, 60, 92, 28, 209, 60, 6, 182, 177, 60, 69, 179, 131, 60, 249, 34, 190, 60, 111, 253, 159, 60, 247, 198, 149, 60, 253, 108, 177, 63, 135, 219, 198, 61, 4, 59, 43, 62, 247, 214, 161, 61, 93, 140, 37, 61, 241, 116, 63, 61, 54, 66, 251, 60, 137, 241, 16, 61, 4, 149, 10, 61, 127, 134, 167, 60, 97, 111, 18, 61, 11, 131, 250, 60, 225, 31, 0, 61, 248, 251, 71, 63, 246, 166, 166, 61, 169, 49, 156, 61, 177, 121, 213, 61, 123, 186, 205, 60, 223, 65, 0, 61, 11, 120, 231, 60, 3, 60, 128, 60, 136, 47, 196, 60, 126, 210, 37, 61, 254, 248, 79, 60, 71, 209, 61, 60, 167, 77, 85, 60, 41, 119, 172, 62, 140, 160, 119, 61, 192, 195, 237, 60, 128, 125, 177, 61, 219, 12, 161, 60, 82, 140, 231, 60, 84, 219, 5, 61, 201, 120, 203, 60, 231, 21, 253, 60, 50, 161, 43, 61, 66, 10, 179, 60, 42, 154, 174, 60, 215, 119, 190, 60, 135, 236, 87, 62, 89, 40, 165, 61, 195, 94, 78, 61, 112, 242, 106, 61, 186, 240, 233, 60, 163, 85, 2, 61, 42, 18, 58, 61, 74, 98, 53, 61, 116, 182, 71, 61, 7, 207, 114, 61, 175, 23, 25, 61, 242, 86, 50, 61, 103, 5, 233, 60, 165, 70, 70, 62, 77, 140, 168, 61, 5, 12, 3, 62, 124, 186, 38, 61, 95, 100, 3, 61, 53, 120, 156, 61, 158, 174, 191, 60, 175, 146, 225, 60, 176, 74, 144, 60, 141, 113, 159, 60, 8, 22, 88, 60, 227, 195, 175, 60, 225, 226, 0, 61, 61, 93, 102, 61, 187, 186, 229, 60, 166, 96, 182, 60, 228, 127, 32, 61, 184, 59, 247, 60, 248, 64, 133, 60, 4, 27, 172, 60, 193, 193, 6, 60, 3, 112, 121, 60, 128, 58, 133, 60, 105, 53, 153, 60, 160, 30, 111, 60, 198, 80, 141, 60, 177, 81, 120, 61, 196, 99, 173, 60, 199, 254, 0, 61, 73, 185, 41, 61, 91, 172, 22, 61, 126, 100, 156, 60, 60, 83, 254, 60, 218, 78, 161, 60, 218, 237, 152, 60, 240, 39, 237, 60, 6, 61, 115, 60, 108, 26, 198, 60, 79, 153, 197, 60, 45, 169, 109, 62, 40, 36, 139, 61, 147, 114, 156, 61, 128, 126, 158, 61, 194, 176, 186, 60, 82, 183, 30, 61, 145, 220, 244, 60, 144, 39, 203, 60, 146, 251, 124, 60, 228, 60, 174, 60, 79, 25, 134, 60, 230, 102, 146, 60, 32, 75, 145, 60, 200, 197, 145, 62, 35, 234, 8, 61, 130, 72, 81, 61, 63, 12, 191, 61, 191, 201, 173, 60, 125, 92, 35, 61, 148, 203, 162, 60, 182, 70, 217, 60, 3, 30, 135, 60, 134, 98, 171, 60, 124, 142, 76, 60, 14, 55, 92, 60, 86, 201, 132, 60, 146, 210, 234, 61, 104, 175, 71, 61, 130, 126, 66, 61, 27, 14, 106, 61, 253, 6, 177, 60, 245, 205, 53, 61, 116, 60, 213, 60, 244, 222, 192, 60, 156, 62, 232, 60, 104, 182, 8, 61, 180, 5, 165, 60, 139, 38, 200, 60, 214, 64, 180, 60, 50, 236, 202, 63, 47, 224, 223, 59, 65, 199, 142, 60, 165, 131, 23, 62, 65, 218, 40, 61, 133, 41, 220, 59, 67, 198, 195, 60, 219, 188, 181, 60, 5, 26, 6, 61, 188, 120, 107, 60, 11, 200, 15, 61, 224, 131, 197, 60, 158, 97, 191, 60, 243, 168, 86, 62, 181, 226, 72, 61, 150, 63, 225, 60, 252, 197, 138, 61, 238, 48, 85, 61, 0, 41, 17, 61, 56, 188, 201, 60, 45, 255, 42, 61, 231, 78, 209, 60, 150, 116, 192, 60, 117, 201, 176, 60, 43, 117, 200, 60, 249, 4, 21, 60, 44, 93, 148, 61, 108, 198, 48, 61, 208, 153, 197, 60, 134, 62, 150, 61, 188, 134, 161, 61, 213, 113, 231, 60, 151, 121, 16, 61, 205, 195, 49, 61, 231, 58, 0, 61, 168, 217, 40, 61, 220, 176, 189, 60, 62, 229, 2, 61, 167, 114, 219, 60, 237, 59, 40, 63, 30, 143, 114, 61, 16, 139, 185, 61, 158, 217, 237, 61, 126, 106, 234, 60, 152, 2, 77, 61, 186, 221, 195, 61, 226, 35, 67, 60, 28, 40, 162, 60, 186, 124, 199, 60, 100, 101, 231, 60, 14, 126, 44, 60, 232, 117, 55, 61, 207, 95, 12, 62, 180, 189, 243, 60, 212, 90, 55, 61, 40, 50, 27, 61, 105, 12, 206, 60, 163, 78, 192, 60, 51, 77, 50, 61, 171, 186, 135, 60, 16, 164, 84, 61, 249, 125, 138, 60, 237, 116, 175, 60, 75, 190, 149, 60, 108, 194, 201, 60, 119, 125, 226, 61, 42, 88, 145, 61, 204, 251, 81, 61, 91, 47, 116, 61, 102, 191, 48, 61, 36, 223, 113, 61, 66, 20, 105, 61, 254, 194, 5, 61, 250, 171, 52, 61, 180, 181, 230, 60, 231, 136, 168, 60, 207, 88, 248, 60, 188, 169, 37, 61, 32, 27, 59, 62, 98, 106, 69, 61, 131, 97, 129, 61, 36, 4, 179, 60, 185, 64, 32, 61, 216, 249, 95, 60, 76, 29, 33, 61, 164, 0, 246, 60, 120, 111, 142, 60, 73, 132, 212, 60, 164, 223, 127, 60, 71, 194, 193, 60, 91, 94, 105, 60, 25, 6, 69, 63, 150, 187, 102, 62, 179, 93, 148, 61, 232, 222, 167, 61, 163, 224, 61, 61, 243, 100, 49, 61, 181, 237, 104, 61, 234, 43, 7, 61, 170, 29, 173, 60, 25, 87, 10, 61, 20, 158, 239, 60, 99, 167, 131, 60, 247, 42, 202, 60, 240, 85, 45, 63, 134, 53, 89, 62, 182, 87, 65, 62, 179, 41, 15, 62, 166, 93, 210, 61, 137, 193, 137, 61, 239, 160, 187, 61, 37, 131, 72, 61, 189, 227, 146, 61, 219, 23, 74, 61, 148, 242, 81, 61, 236, 53, 89, 61, 156, 118, 215, 60, 245, 4, 157, 62, 183, 164, 142, 60, 250, 121, 214, 60, 38, 76, 178, 60, 107, 247, 247, 60, 238, 102, 60, 60, 219, 194, 9, 61, 173, 145, 127, 60, 74, 247, 121, 60, 8, 184, 115, 60, 243, 123, 22, 60, 30, 142, 214, 59, 114, 119, 102, 60, 35, 114, 147, 62, 216, 174, 13, 62, 167, 251, 220, 61, 207, 159, 70, 61, 102, 241, 143, 61, 70, 241, 198, 60, 182, 24, 231, 60, 240, 229, 157, 60, 215, 167, 207, 60, 138, 8, 134, 60, 123, 250, 216, 60, 51, 118, 0, 61, 32, 53, 141, 60, 228, 230, 210, 63, 62, 215, 129, 62, 171, 203, 165, 61, 26, 15, 91, 61, 176, 249, 64, 61, 253, 164, 125, 61, 198, 67, 179, 61, 64, 107, 3, 61, 113, 215, 230, 60, 19, 4, 42, 61, 246, 87, 220, 60, 94, 100, 235, 60, 51, 10, 24, 61, 76, 169, 169, 62, 0, 5, 52, 61, 31, 15, 207, 60, 168, 8, 121, 60, 241, 120, 26, 60, 124, 221, 96, 60, 189, 180, 38, 60, 4, 78, 24, 60, 209, 122, 2, 60, 7, 95, 24, 60, 228, 0, 121, 60, 91, 36, 34, 60, 130, 208, 1, 60, 185, 1, 166, 63, 44, 213, 35, 63, 126, 6, 19, 62, 1, 176, 220, 61, 91, 111, 5, 62, 103, 157, 144, 61, 205, 54, 187, 61, 120, 233, 28, 61, 129, 53, 8, 61, 189, 119, 238, 60, 120, 126, 16, 61, 122, 4, 226, 60, 141, 106, 212, 60, 7, 244, 185, 63, 249, 251, 228, 62, 231, 187, 69, 62, 72, 10, 2, 62, 105, 205, 6, 62, 177, 219, 149, 61, 88, 124, 163, 61, 23, 123, 168, 61, 97, 176, 42, 61, 140, 180, 231, 60, 11, 78, 76, 61, 210, 111, 17, 61, 251, 166, 183, 60, 211, 57, 63, 62, 168, 220, 47, 61, 56, 218, 132, 61, 131, 66, 87, 61, 161, 44, 251, 59, 166, 246, 152, 60, 216, 114, 1, 60, 147, 87, 106, 61, 64, 110, 247, 60, 97, 139, 244, 59, 20, 216, 135, 60, 40, 91, 54, 60, 125, 13, 49, 60, 32, 29, 159, 61, 163, 93, 40, 61, 25, 250, 65, 61, 129, 96, 92, 61, 39, 50, 57, 61, 173, 46, 144, 60, 145, 119, 180, 60, 204, 161, 33, 61, 192, 94, 108, 60, 86, 156, 60, 60, 226, 166, 41, 61, 70, 184, 247, 60, 81, 185, 44, 61, 236, 63, 63, 62, 250, 48, 19, 61, 155, 98, 96, 61, 188, 47, 83, 61, 191, 163, 147, 61, 208, 243, 23, 61, 255, 98, 239, 60, 178, 59, 44, 61, 40, 136, 237, 60, 234, 242, 154, 60, 59, 203, 116, 61, 224, 168, 92, 61, 204, 221, 148, 60, 197, 44, 223, 62, 204, 49, 21, 62, 158, 83, 0, 62, 177, 203, 180, 62, 63, 51, 254, 61, 46, 158, 139, 60, 26, 108, 178, 61, 107, 23, 32, 61, 163, 53, 73, 61, 107, 18, 246, 60, 119, 11, 93, 60, 221, 249, 145, 60, 80, 182, 30, 60, 237, 0, 30, 64, 26, 215, 11, 63, 250, 4, 149, 61, 240, 89, 15, 62, 67, 249, 160, 61, 200, 9, 243, 60, 248, 190, 95, 61, 194, 2, 29, 61, 8, 122, 1, 61, 71, 158, 24, 61, 230, 50, 12, 61, 148, 26, 149, 60, 36, 42, 193, 60, 196, 151, 147, 63, 144, 236, 114, 62, 151, 105, 33, 62, 198, 47, 10, 62, 48, 40, 235, 61, 56, 200, 65, 61, 42, 129, 104, 61, 17, 35, 242, 60, 179, 70, 73, 61, 48, 238, 238, 60, 233, 119, 38, 61, 11, 141, 63, 61, 212, 57, 10, 61, 99, 143, 95, 63, 59, 41, 221, 61, 76, 184, 229, 61, 128, 132, 157, 61, 135, 141, 92, 61, 142, 70, 49, 61, 115, 254, 46, 61, 12, 57, 151, 60, 180, 204, 130, 61, 143, 115, 209, 60, 66, 198, 64, 61, 246, 127, 247, 60, 223, 223, 152, 60, 162, 44, 40, 63, 124, 236, 190, 61, 153, 177, 207, 61, 151, 213, 152, 61, 160, 188, 89, 61, 41, 76, 20, 61, 94, 173, 193, 60, 160, 29, 208, 60, 31, 220, 212, 60, 100, 228, 167, 60, 221, 55, 175, 60, 31, 192, 171, 60, 196, 97, 197, 60, 108, 66, 159, 63, 132, 204, 143, 62, 148, 34, 242, 61, 234, 49, 247, 61, 154, 57, 136, 61, 191, 229, 81, 61, 113, 97, 48, 61, 43, 47, 32, 61, 32, 222, 45, 61, 118, 98, 7, 61, 6, 152, 10, 61, 13, 234, 33, 61, 112, 129, 3, 61, 120, 101, 178, 63, 87, 233, 54, 62, 163, 209, 25, 62, 47, 134, 153, 61, 216, 72, 128, 61, 45, 69, 16, 61, 41, 206, 30, 61, 235, 156, 205, 60, 128, 207, 222, 60, 187, 161, 196, 60, 44, 33, 148, 60, 77, 29, 96, 60, 149, 30, 184, 60, 40, 240, 1, 64, 180, 109, 146, 62, 240, 251, 85, 62, 192, 90, 241, 61, 239, 198, 239, 61, 238, 243, 128, 61, 190, 197, 92, 61, 232, 175, 25, 61, 163, 129, 69, 61, 104, 62, 103, 61, 146, 153, 246, 60, 251, 94, 217, 60, 221, 109, 2, 61, 96, 24, 11, 64, 14, 151, 222, 62, 130, 237, 4, 62, 216, 157, 21, 62, 155, 231, 28, 62, 204, 107, 111, 61, 103, 199, 107, 61, 240, 33, 134, 61, 173, 148, 27, 61, 42, 218, 48, 61, 236, 137, 18, 61, 131, 160, 33, 61, 55, 214, 28, 61, 130, 14, 80, 64, 88, 89, 25, 63, 14, 176, 197, 61, 13, 95, 104, 62, 232, 240, 192, 61, 233, 140, 72, 61, 205, 67, 4, 61, 148, 227, 103, 61, 62, 244, 52, 61, 74, 141, 188, 60, 138, 142, 189, 60, 164, 206, 5, 61, 252, 216, 69, 60, 152, 95, 20, 64, 161, 134, 186, 62, 176, 136, 123, 62, 92, 228, 210, 61, 234, 143, 6, 62, 37, 87, 113, 61, 152, 23, 67, 61, 178, 23, 55, 61, 94, 220, 101, 61, 53, 193, 19, 61, 16, 68, 41, 61, 10, 124, 233, 60, 184, 108, 134, 60, 119, 105, 146, 64, 45, 229, 153, 63, 75, 78, 209, 62, 53, 110, 129, 62, 44, 128, 67, 62, 169, 115, 90, 61, 58, 243, 134, 61, 105, 89, 150, 61, 51, 173, 96, 61, 203, 249, 153, 61, 163, 82, 26, 61, 0, 253, 51, 61, 0, 176, 21, 61, 224, 170, 50, 63, 203, 101, 14, 62, 126, 170, 18, 61, 199, 192, 83, 62, 100, 164, 156, 61, 6, 24, 206, 60, 32, 82, 58, 61, 2, 206, 187, 60, 140, 223, 233, 60, 184, 136, 41, 61, 134, 104, 115, 60, 183, 20, 142, 60, 140, 120, 131, 60, 45, 26, 183, 62, 65, 42, 22, 61, 192, 9, 240, 60, 142, 159, 72, 61, 194, 62, 221, 60, 143, 12, 220, 60, 104, 245, 233, 60, 222, 118, 22, 61, 96, 65, 201, 60, 208, 143, 139, 60, 23, 139, 123, 60, 171, 247, 202, 60, 84, 54, 108, 60, 191, 250, 53, 62, 98, 16, 36, 61, 238, 52, 224, 60, 166, 91, 117, 61, 13, 114, 213, 60, 189, 227, 42, 61, 15, 40, 255, 60, 176, 182, 70, 61, 230, 242, 9, 61, 39, 239, 241, 60, 27, 181, 181, 60, 243, 157, 230, 60, 96, 26, 162, 60, 127, 142, 190, 62, 217, 57, 153, 61, 253, 234, 246, 61, 152, 234, 162, 61, 59, 227, 18, 61, 250, 171, 82, 61, 75, 194, 11, 61, 142, 95, 1, 61, 78, 97, 216, 60, 103, 174, 64, 60, 105, 200, 152, 60, 151, 35, 109, 60, 239, 36, 120, 60, 183, 57, 103, 62, 82, 16, 39, 61, 240, 220, 55, 61, 134, 12, 116, 61, 241, 229, 154, 60, 213, 69, 86, 61, 84, 187, 198, 60, 227, 205, 223, 60, 17, 31, 162, 60, 189, 186, 147, 60, 248, 227, 107, 60, 249, 161, 177, 60, 32, 142, 134, 60, 216, 30, 36, 62, 179, 68, 212, 60, 63, 201, 139, 61, 171, 1, 142, 61, 170, 170, 37, 61, 170, 41, 37, 61, 74, 210, 171, 60, 7, 129, 206, 60, 71, 150, 240, 60, 190, 8, 204, 60, 203, 248, 136, 60, 3, 80, 4, 61, 65, 161, 199, 60, 66, 102, 80, 63, 74, 180, 149, 61, 245, 10, 51, 61, 150, 241, 222, 61, 93, 55, 167, 61, 31, 71, 231, 60, 51, 209, 10, 61, 152, 23, 2, 61, 235, 17, 138, 60, 89, 42, 23, 61, 190, 225, 136, 60, 64, 192, 92, 60, 63, 232, 136, 60, 236, 108, 158, 61, 37, 248, 113, 61, 123, 61, 19, 61, 203, 45, 76, 61, 70, 156, 7, 61, 109, 144, 184, 60, 56, 87, 204, 60, 176, 153, 176, 60, 213, 130, 164, 60, 24, 6, 138, 60, 59, 1, 141, 60, 109, 99, 134, 60, 178, 62, 146, 60, 164, 144, 214, 61, 246, 173, 71, 61, 158, 170, 32, 61, 39, 157, 112, 61, 181, 94, 49, 61, 176, 239, 250, 60, 155, 122, 213, 60, 3, 209, 7, 61, 60, 250, 250, 60, 138, 138, 197, 60, 167, 229, 2, 61, 232, 38, 206, 60, 112, 40, 186, 60, 78, 20, 17, 63, 243, 179, 229, 60, 146, 114, 53, 61, 50, 0, 10, 61, 4, 108, 59, 61, 99, 70, 149, 61, 80, 160, 21, 61, 183, 115, 104, 60, 13, 192, 19, 61, 19, 48, 149, 60, 43, 167, 151, 60, 54, 7, 21, 60, 123, 190, 128, 60, 66, 206, 41, 61, 194, 111, 64, 60, 0, 232, 105, 60, 211, 223, 185, 60, 215, 222, 184, 60, 184, 190, 92, 60, 42, 4, 231, 60, 128, 213, 132, 60, 156, 43, 59, 60, 33, 109, 51, 60, 118, 237, 7, 60, 134, 188, 121, 60, 158, 157, 12, 60, 94, 2, 43, 61, 218, 111, 185, 60, 242, 73, 176, 60, 16, 29, 237, 60, 65, 101, 32, 61, 231, 133, 191, 60, 131, 55, 8, 61, 97, 223, 207, 60, 77, 77, 139, 60, 39, 244, 103, 60, 104, 254, 95, 60, 70, 220, 134, 60, 20, 64, 62, 60, 45, 60, 143, 61, 14, 139, 56, 61, 64, 90, 159, 59, 132, 254, 142, 61, 227, 235, 173, 60, 199, 223, 253, 60, 37, 174, 98, 60, 69, 82, 108, 61, 76, 32, 69, 60, 90, 148, 53, 60, 65, 131, 42, 61, 220, 5, 39, 60, 74, 29, 48, 60, 197, 81, 168, 61, 66, 112, 64, 60, 229, 240, 106, 60, 83, 166, 166, 60, 119, 217, 192, 60, 214, 207, 201, 60, 55, 134, 139, 60, 155, 1, 45, 60, 158, 153, 194, 59, 161, 28, 34, 60, 189, 37, 60, 60, 134, 78, 5, 60, 221, 22, 7, 60, 20, 220, 108, 61, 66, 24, 125, 60, 40, 176, 160, 60, 23, 239, 176, 60, 20, 97, 191, 60, 121, 81, 94, 60, 102, 63, 69, 60, 240, 246, 155, 60, 211, 194, 31, 60, 7, 206, 19, 60, 168, 117, 16, 60, 101, 41, 2, 60, 79, 75, 63, 60, 203, 142, 197, 63, 122, 73, 12, 62, 39, 114, 44, 62, 185, 69, 26, 61, 105, 146, 197, 60, 202, 66, 171, 60, 26, 56, 143, 60, 215, 108, 152, 60, 209, 140, 64, 61, 23, 109, 39, 61, 233, 155, 201, 60, 214, 163, 50, 61, 109, 64, 97, 60, 238, 38, 157, 62, 224, 245, 188, 60, 110, 73, 76, 61, 200, 105, 137, 61, 188, 75, 189, 60, 44, 149, 208, 60, 111, 113, 254, 60, 61, 99, 194, 60, 217, 111, 172, 60, 63, 120, 36, 60, 238, 244, 196, 60, 13, 185, 175, 60, 60, 134, 71, 60, 240, 130, 209, 61, 3, 143, 209, 60, 97, 13, 3, 61, 250, 97, 44, 61, 127, 160, 2, 61, 166, 133, 169, 60, 106, 15, 203, 60, 168, 16, 19, 61, 2, 36, 32, 61, 189, 58, 123, 60, 19, 99, 29, 61, 159, 21, 184, 60, 162, 227, 59, 60, 238, 217, 223, 63, 39, 110, 165, 61, 191, 47, 110, 62, 225, 213, 57, 61, 195, 133, 115, 60, 31, 152, 97, 60, 48, 70, 57, 60, 233, 5, 122, 60, 56, 111, 209, 60, 110, 118, 196, 60, 179, 137, 41, 60, 22, 121, 239, 60, 245, 76, 105, 60, 124, 135, 156, 61, 41, 255, 115, 60, 175, 9, 189, 60, 91, 70, 153, 60, 3, 38, 144, 60, 21, 26, 141, 60, 19, 210, 71, 60, 31, 125, 11, 60, 60, 252, 55, 60, 14, 147, 21, 60, 158, 245, 48, 60, 204, 125, 45, 60, 31, 228, 213, 59, 16, 109, 211, 61, 13, 188, 221, 60, 181, 5, 225, 60, 88, 193, 159, 60, 24, 224, 183, 60, 172, 118, 174, 60, 249, 19, 98, 60, 252, 227, 102, 60, 31, 51, 79, 60, 74, 17, 145, 60, 163, 239, 183, 60, 171, 216, 115, 60, 200, 240, 74, 60, 226, 112, 20, 61, 166, 237, 113, 60, 166, 111, 2, 61, 250, 179, 129, 60, 45, 127, 64, 60, 91, 214, 101, 60, 229, 99, 6, 60, 201, 91, 59, 60, 92, 242, 10, 60, 183, 152, 7, 60, 80, 180, 11, 60, 97, 183, 86, 60, 75, 207, 115, 60, 241, 238, 16, 62, 249, 73, 16, 61, 44, 75, 71, 60, 58, 253, 122, 61, 12, 135, 157, 60, 15, 143, 40, 60, 38, 71, 170, 60, 112, 9, 242, 59, 169, 227, 74, 60, 175, 144, 68, 60, 77, 195, 141, 60, 84, 124, 40, 60, 113, 230, 144, 60, 7, 170, 8, 62, 220, 250, 53, 61, 43, 65, 101, 60, 206, 12, 135, 61, 117, 15, 198, 60, 128, 60, 181, 60, 100, 215, 33, 61, 110, 255, 142, 60, 83, 114, 232, 60, 74, 59, 244, 60, 103, 109, 188, 60, 25, 35, 142, 60, 239, 0, 19, 61, 143, 202, 169, 62, 42, 131, 48, 61, 163, 4, 241, 60, 72, 55, 147, 60, 97, 5, 79, 60, 166, 95, 192, 60, 254, 140, 119, 60, 85, 221, 253, 60, 64, 152, 149, 60, 86, 80, 253, 59, 120, 81, 250, 59, 254, 145, 247, 59, 47, 123, 8, 60, 97, 249, 31, 62, 36, 177, 81, 60, 26, 197, 2, 61, 90, 61, 13, 60, 71, 36, 0, 60, 110, 161, 51, 60, 95, 221, 23, 60, 82, 57, 10, 60, 121, 241, 233, 59, 3, 121, 187, 59, 207, 234, 20, 60, 153, 97, 213, 59, 24, 81, 220, 59, 185, 86, 47, 61, 1, 105, 123, 60, 58, 57, 129, 60, 218, 174, 65, 60, 190, 215, 7, 60, 55, 95, 63, 60, 236, 111, 45, 60, 54, 218, 55, 60, 159, 131, 18, 60, 228, 168, 29, 60, 233, 138, 38, 60, 222, 228, 47, 60, 128, 80, 23, 60, 157, 98, 112, 63, 180, 110, 3, 61, 243, 73, 36, 62, 113, 218, 201, 60, 252, 7, 212, 60, 61, 165, 192, 60, 137, 228, 112, 60, 57, 27, 220, 60, 93, 40, 137, 60, 22, 111, 58, 60, 124, 197, 187, 60, 163, 127, 59, 60, 187, 18, 55, 60, 125, 134, 4, 62, 154, 200, 154, 60, 66, 150, 62, 61, 245, 66, 58, 61, 103, 59, 33, 61, 175, 115, 131, 61, 161, 210, 149, 60, 111, 156, 164, 60, 101, 163, 122, 60, 250, 141, 168, 60, 245, 229, 170, 60, 102, 49, 142, 60, 140, 179, 89, 60, 251, 100, 218, 61, 9, 28, 6, 61, 185, 199, 75, 61, 64, 163, 254, 60, 220, 99, 211, 60, 29, 52, 237, 60, 24, 154, 194, 60, 188, 139, 237, 60, 200, 78, 189, 60, 233, 27, 25, 61, 104, 238, 6, 61, 149, 64, 206, 60, 182, 61, 191, 60, 172, 57, 0, 64, 223, 78, 240, 61, 111, 235, 27, 62, 69, 173, 143, 61, 96, 50, 206, 60, 26, 219, 15, 61, 27, 67, 159, 60, 131, 129, 183, 60, 223, 20, 188, 60, 98, 204, 144, 60, 106, 190, 119, 60, 146, 7, 154, 60, 5, 39, 54, 60, 33, 53, 241, 62, 169, 161, 72, 61, 33, 242, 76, 61, 22, 131, 140, 61, 57, 72, 180, 60, 240, 84, 130, 61, 180, 252, 51, 61, 9, 26, 181, 60, 125, 111, 238, 60, 8, 200, 178, 60, 126, 223, 146, 60, 54, 63, 170, 60, 117, 252, 59, 60, 106, 109, 166, 62, 102, 210, 141, 61, 189, 66, 79, 61, 151, 183, 143, 61, 142, 136, 34, 61, 133, 155, 64, 61, 151, 150, 0, 61, 86, 107, 15, 61, 161, 200, 37, 61, 203, 249, 19, 61, 19, 170, 228, 60, 112, 124, 238, 60, 236, 145, 156, 60, 51, 108, 184, 62, 72, 21, 114, 61, 183, 146, 116, 60, 21, 71, 180, 60, 171, 127, 175, 60, 22, 70, 234, 60, 69, 186, 147, 60, 92, 78, 165, 60, 82, 60, 213, 60, 59, 105, 33, 60, 40, 2, 34, 60, 21, 126, 137, 60, 8, 116, 26, 60, 93, 56, 26, 62, 155, 163, 214, 60, 104, 77, 91, 60, 8, 255, 98, 60, 2, 53, 186, 60, 90, 59, 22, 60, 42, 55, 202, 60, 18, 182, 148, 60, 175, 22, 125, 60, 43, 253, 47, 60, 211, 251, 59, 60, 149, 20, 21, 60, 38, 173, 32, 60, 68, 246, 218, 61, 251, 45, 224, 60, 135, 70, 170, 60, 134, 10, 184, 60, 13, 71, 213, 60, 163, 235, 120, 60, 69, 195, 129, 60, 90, 87, 166, 60, 149, 224, 185, 60, 153, 23, 144, 60, 209, 117, 129, 60, 179, 91, 97, 60, 132, 25, 82, 60, 177, 198, 67, 63, 183, 7, 56, 62, 92, 8, 48, 61, 236, 108, 108, 61, 74, 147, 37, 61, 154, 176, 200, 60, 189, 73, 12, 61, 218, 15, 50, 60, 206, 140, 153, 60, 111, 238, 78, 60, 102, 78, 91, 60, 117, 190, 74, 60, 248, 99, 198, 59, 220, 180, 111, 64, 180, 51, 125, 62, 103, 193, 85, 61, 24, 198, 32, 62, 205, 178, 134, 61, 69, 168, 84, 61, 227, 171, 176, 60, 40, 36, 49, 60, 152, 154, 112, 60, 120, 37, 169, 60, 139, 193, 205, 61, 11, 12, 241, 60, 68, 112, 181, 61, 196, 130, 61, 63, 161, 23, 209, 62, 223, 217, 193, 62, 186, 242, 92, 62, 51, 91, 138, 61, 61, 208, 83, 61, 68, 150, 167, 61, 210, 88, 12, 61, 195, 201, 76, 61, 168, 190, 83, 61, 43, 7, 52, 61, 86, 125, 68, 61, 87, 8, 35, 61, 83, 48, 244, 62, 155, 182, 11, 61, 146, 114, 149, 60, 129, 211, 194, 60, 112, 240, 67, 60, 209, 57, 11, 60, 152, 154, 1, 60, 135, 42, 16, 60, 102, 51, 18, 60, 62, 43, 39, 60, 130, 21, 210, 59, 96, 76, 193, 59, 101, 119, 8, 60, 174, 214, 73, 64, 213, 203, 11, 63, 131, 196, 254, 61, 215, 66, 198, 61, 19, 227, 179, 61, 115, 156, 149, 61, 215, 101, 67, 61, 13, 210, 30, 61, 193, 159, 11, 61, 123, 62, 159, 60, 114, 241, 8, 61, 10, 238, 73, 60, 25, 21, 199, 60, 133, 199, 9, 64, 125, 51, 12, 63, 64, 186, 138, 62, 116, 61, 17, 62, 149, 21, 202, 61, 173, 191, 178, 61, 19, 106, 121, 61, 216, 199, 133, 61, 203, 176, 28, 61, 32, 171, 112, 61, 23, 167, 116, 61, 234, 70, 19, 61, 92, 174, 50, 61, 93, 26, 22, 63, 162, 61, 94, 61, 191, 243, 70, 61, 3, 175, 147, 60, 64, 130, 215, 60, 219, 188, 192, 60, 57, 229, 167, 60, 13, 181, 137, 60, 180, 147, 78, 60, 128, 146, 114, 60, 83, 151, 19, 60, 138, 69, 140, 59, 14, 117, 68, 60, 39, 138, 12, 64, 128, 30, 133, 62, 140, 112, 95, 62, 108, 137, 148, 61, 2, 240, 192, 61, 27, 31, 65, 61, 181, 61, 121, 61, 35, 45, 99, 61, 212, 232, 18, 61, 9, 191, 163, 61, 24, 109, 230, 60, 190, 233, 43, 61, 149, 105, 210, 60, 77, 43, 250, 63, 186, 69, 149, 62, 30, 62, 97, 62, 169, 110, 211, 61, 120, 64, 190, 61, 253, 29, 218, 61, 225, 190, 166, 61, 127, 63, 96, 61, 216, 100, 71, 61, 97, 126, 204, 61, 232, 186, 48, 61, 103, 101, 25, 61, 145, 40, 198, 60, 230, 232, 3, 63, 30, 236, 178, 62, 117, 140, 104, 61, 195, 131, 156, 61, 15, 20, 172, 60, 53, 184, 214, 60, 107, 197, 119, 60, 206, 170, 22, 60, 56, 195, 59, 60, 164, 254, 58, 60, 72, 7, 108, 60, 67, 34, 72, 60, 195, 184, 6, 60, 57, 201, 247, 62, 123, 125, 140, 62, 85, 28, 150, 61, 142, 116, 126, 61, 193, 60, 224, 60, 110, 170, 198, 60, 113, 33, 225, 60, 21, 21, 187, 60, 78, 15, 111, 60, 176, 116, 115, 60, 18, 155, 142, 60, 236, 41, 203, 60, 40, 56, 134, 60, 217, 20, 68, 62, 159, 131, 109, 62, 208, 188, 130, 61, 175, 159, 158, 61, 80, 142, 129, 61, 105, 32, 245, 60, 68, 230, 38, 61, 97, 85, 18, 61, 116, 60, 34, 61, 215, 222, 14, 61, 17, 130, 0, 61, 50, 160, 175, 60, 82, 104, 230, 60, 81, 32, 72, 64, 58, 185, 126, 62, 116, 128, 74, 62, 232, 183, 195, 61, 194, 44, 208, 61, 224, 186, 104, 61, 216, 150, 95, 61, 189, 196, 95, 61, 21, 223, 136, 60, 99, 154, 133, 60, 63, 114, 226, 60, 192, 72, 137, 60, 99, 247, 181, 60, 14, 148, 55, 64, 46, 57, 84, 63, 81, 78, 234, 62, 170, 112, 30, 62, 59, 158, 240, 61, 34, 164, 5, 62, 242, 114, 101, 61, 242, 227, 176, 61, 48, 235, 52, 61, 230, 114, 22, 61, 24, 63, 134, 61, 51, 200, 246, 60, 28, 53, 77, 61, 154, 49, 175, 64, 243, 33, 4, 63, 44, 168, 153, 62, 84, 215, 94, 62, 21, 94, 65, 62, 158, 149, 255, 61, 145, 219, 192, 61, 81, 34, 186, 61, 228, 122, 56, 61, 94, 107, 104, 61, 200, 55, 147, 61, 15, 55, 19, 61, 201, 33, 106, 61, 155, 72, 198, 63, 217, 120, 227, 61, 119, 169, 2, 62, 95, 96, 125, 61, 77, 180, 111, 61, 17, 102, 25, 61, 198, 68, 96, 61, 37, 231, 21, 61, 176, 5, 25, 61, 125, 220, 18, 61, 34, 202, 48, 61, 177, 60, 178, 60, 247, 105, 127, 61, 45, 48, 128, 63, 231, 151, 226, 61, 81, 179, 254, 61, 229, 108, 124, 61, 98, 2, 14, 61, 80, 43, 30, 61, 88, 142, 81, 61, 75, 53, 236, 60, 252, 247, 241, 60, 191, 93, 246, 60, 214, 221, 4, 61, 149, 112, 187, 60, 88, 52, 254, 60, 43, 118, 156, 63, 101, 210, 43, 62, 190, 233, 245, 61, 21, 164, 101, 61, 239, 49, 157, 61, 217, 252, 80, 61, 141, 7, 121, 61, 11, 251, 48, 61, 8, 102, 67, 61, 165, 3, 105, 61, 202, 114, 34, 61, 227, 64, 217, 60, 231, 131, 56, 61, 51, 141, 161, 63, 99, 193, 255, 61, 151, 100, 33, 62, 23, 86, 133, 61, 12, 236, 36, 61, 117, 105, 7, 61, 143, 118, 91, 61, 2, 179, 195, 60, 3, 253, 239, 60, 226, 192, 103, 61, 141, 36, 161, 60, 12, 159, 105, 60, 253, 149, 72, 60, 80, 150, 42, 64, 157, 111, 119, 62, 188, 171, 60, 62, 55, 65, 53, 61, 13, 53, 15, 61, 16, 158, 132, 61, 63, 59, 104, 61, 227, 102, 170, 60, 193, 5, 48, 61, 212, 46, 151, 61, 243, 5, 178, 60, 65, 36, 40, 61, 170, 124, 23, 61, 81, 150, 19, 64, 46, 111, 154, 62, 134, 126, 136, 62, 248, 215, 204, 61, 117, 222, 84, 61, 141, 95, 141, 61, 36, 219, 173, 61, 196, 39, 2, 61, 25, 254, 90, 61, 149, 215, 6, 62, 74, 153, 4, 61, 59, 240, 88, 61, 108, 152, 56, 61, 160, 169, 12, 64, 72, 194, 73, 62, 37, 28, 14, 62, 38, 62, 77, 61, 18, 238, 165, 61, 177, 16, 239, 60, 97, 76, 154, 60, 153, 251, 195, 60, 176, 85, 198, 60, 81, 212, 11, 61, 12, 210, 107, 60, 226, 71, 241, 60, 97, 19, 178, 60, 76, 115, 62, 64, 33, 114, 190, 62, 22, 46, 125, 62, 213, 221, 202, 61, 98, 91, 175, 61, 65, 237, 201, 61, 31, 204, 125, 61, 129, 217, 191, 60, 6, 30, 106, 61, 144, 48, 229, 61, 162, 39, 247, 60, 179, 193, 246, 60, 238, 38, 24, 61, 22, 208, 65, 64, 27, 180, 9, 63, 233, 199, 159, 62, 162, 103, 181, 61, 202, 126, 11, 62, 240, 219, 148, 61, 114, 135, 129, 61, 14, 148, 50, 61, 186, 22, 136, 61, 134, 132, 88, 61, 204, 161, 53, 61, 33, 62, 106, 61, 245, 86, 67, 61, 175, 144, 246, 60, 141, 81, 42, 60, 104, 22, 222, 59, 93, 107, 33, 60, 7, 10, 68, 60, 132, 7, 101, 59, 56, 218, 130, 59, 156, 80, 185, 59, 224, 2, 32, 60, 216, 85, 40, 59, 185, 118, 148, 59, 131, 71, 154, 59, 152, 153, 134, 59, 18, 38, 34, 60, 202, 39, 92, 60, 194, 26, 28, 60, 10, 241, 192, 60, 4, 76, 101, 60, 177, 188, 247, 59, 38, 220, 63, 60, 35, 219, 202, 59, 39, 209, 147, 60, 58, 212, 2, 60, 37, 21, 12, 60, 108, 26, 34, 60, 53, 83, 178, 59, 138, 86, 11, 61, 58, 33, 143, 60, 43, 48, 36, 60, 24, 9, 217, 60, 66, 119, 133, 60, 87, 56, 48, 60, 134, 158, 138, 60, 29, 134, 226, 59, 77, 66, 164, 60, 191, 22, 130, 60, 166, 125, 125, 60, 173, 55, 67, 60, 19, 242, 16, 60, 150, 2, 121, 64, 42, 245, 146, 61, 159, 203, 186, 62, 219, 0, 48, 61, 63, 30, 14, 61, 81, 240, 171, 60, 218, 245, 102, 60, 199, 79, 143, 60, 118, 94, 151, 60, 211, 6, 227, 60, 116, 124, 243, 59, 172, 57, 54, 60, 224, 79, 39, 60, 247, 212, 142, 63, 238, 116, 252, 61, 22, 190, 134, 61, 109, 233, 123, 60, 15, 72, 40, 61, 141, 152, 197, 60, 160, 171, 158, 60, 204, 7, 4, 61, 40, 82, 142, 60, 139, 83, 175, 60, 130, 143, 105, 60, 28, 237, 183, 60, 56, 13, 37, 60, 127, 144, 74, 62, 58, 42, 151, 61, 205, 225, 69, 61, 214, 74, 187, 60, 229, 239, 93, 61, 205, 113, 199, 60, 3, 37, 7, 61, 74, 129, 46, 61, 246, 220, 4, 61, 129, 226, 229, 60, 133, 55, 198, 60, 31, 225, 2, 61, 81, 141, 186, 60, 97, 223, 10, 64, 0, 30, 175, 62, 186, 242, 154, 62, 229, 62, 193, 61, 40, 12, 171, 60, 161, 169, 21, 62, 33, 249, 108, 60, 133, 16, 226, 60, 27, 85, 141, 59, 128, 216, 119, 60, 76, 115, 65, 60, 34, 229, 115, 61, 60, 4, 160, 59, 223, 165, 35, 62, 12, 254, 123, 60, 201, 128, 15, 60, 127, 16, 53, 60, 217, 205, 98, 60, 48, 91, 129, 60, 170, 82, 89, 60, 255, 183, 117, 60, 125, 244, 127, 60, 205, 78, 200, 59, 175, 114, 23, 60, 148, 101, 40, 60, 44, 228, 228, 59, 72, 20, 239, 61, 109, 165, 169, 61, 190, 158, 168, 60, 67, 55, 246, 60, 19, 177, 244, 60, 208, 96, 136, 60, 59, 127, 37, 60, 165, 219, 228, 60, 29, 57, 195, 60, 35, 119, 158, 60, 49, 204, 80, 60, 160, 0, 218, 60, 128, 141, 171, 60, 191, 25, 142, 62, 219, 15, 68, 61, 134, 7, 41, 60, 10, 67, 26, 61, 191, 142, 11, 60, 95, 101, 244, 59, 209, 59, 232, 59, 226, 204, 76, 60, 213, 31, 170, 60, 197, 161, 216, 59, 17, 174, 47, 60, 136, 40, 121, 60, 86, 3, 133, 59, 208, 160, 201, 62, 165, 171, 233, 60, 245, 104, 90, 61, 64, 207, 18, 61, 70, 208, 112, 60, 48, 202, 137, 60, 162, 225, 149, 60, 58, 199, 58, 60, 73, 86, 121, 60, 93, 112, 95, 60, 81, 240, 132, 60, 39, 19, 152, 59, 96, 177, 192, 59, 144, 184, 108, 62, 37, 15, 225, 60, 65, 225, 103, 61, 59, 185, 21, 61, 133, 123, 215, 60, 148, 214, 167, 60, 59, 54, 183, 60, 99, 106, 50, 60, 135, 86, 207, 60, 235, 44, 174, 60, 68, 173, 154, 60, 99, 53, 236, 59, 60, 102, 102, 60, 163, 167, 89, 62, 54, 237, 142, 61, 215, 169, 139, 60, 214, 54, 71, 60, 146, 116, 175, 60, 62, 206, 144, 60, 157, 40, 131, 60, 53, 105, 186, 60, 74, 231, 178, 60, 238, 3, 85, 60, 147, 250, 101, 60, 91, 107, 140, 60, 112, 107, 9, 60, 142, 213, 24, 62, 162, 199, 222, 60, 43, 74, 214, 60, 98, 180, 102, 60, 28, 28, 109, 60, 182, 81, 24, 60, 230, 211, 70, 60, 122, 179, 85, 60, 186, 6, 151, 60, 245, 52, 131, 60, 255, 223, 123, 60, 184, 93, 91, 60, 232, 171, 98, 60, 22, 77, 185, 61, 180, 149, 176, 60, 174, 118, 32, 61, 194, 146, 138, 60, 12, 180, 163, 60, 226, 248, 135, 60, 13, 180, 130, 60, 187, 96, 132, 60, 214, 3, 196, 60, 69, 142, 172, 60, 131, 6, 182, 60, 220, 15, 141, 60, 250, 238, 128, 60, 103, 229, 197, 63, 29, 122, 31, 62, 85, 213, 37, 62, 99, 45, 27, 62, 235, 24, 43, 61, 29, 56, 156, 61, 246, 30, 204, 60, 83, 15, 3, 61, 27, 53, 138, 60, 79, 58, 171, 60, 109, 34, 241, 60, 149, 44, 251, 60, 202, 236, 27, 61, 113, 193, 164, 62, 227, 28, 146, 61, 16, 175, 208, 61, 125, 6, 42, 61, 53, 44, 15, 61, 89, 46, 24, 61, 91, 176, 148, 60, 165, 10, 229, 60, 132, 225, 204, 60, 254, 161, 234, 60, 216, 123, 181, 60, 93, 236, 207, 60, 200, 236, 220, 60, 59, 9, 151, 62, 245, 142, 134, 61, 130, 197, 136, 61, 162, 106, 42, 61, 156, 235, 72, 61, 2, 29, 32, 61, 165, 59, 208, 60, 91, 232, 33, 61, 28, 190, 12, 61, 159, 121, 33, 61, 214, 31, 11, 61, 239, 32, 16, 61, 43, 244, 10, 61, 130, 53, 31, 63, 176, 74, 212, 61, 50, 205, 69, 61, 98, 42, 99, 61, 199, 141, 166, 60, 135, 146, 154, 60, 162, 47, 151, 60, 39, 15, 167, 60, 78, 166, 125, 60, 104, 51, 2, 61, 178, 192, 166, 60, 248, 154, 131, 60, 107, 205, 249, 60, 32, 216, 240, 62, 218, 70, 13, 61, 167, 93, 91, 61, 90, 111, 174, 60, 242, 249, 173, 60, 198, 12, 191, 60, 150, 137, 97, 60, 60, 169, 52, 60, 0, 165, 146, 60, 7, 219, 128, 60, 207, 110, 74, 60, 233, 3, 78, 60, 79, 94, 80, 60, 4, 163, 126, 62, 35, 243, 79, 61, 101, 80, 244, 60, 245, 97, 175, 60, 152, 202, 7, 61, 165, 149, 93, 60, 131, 139, 151, 60, 215, 155, 139, 60, 157, 41, 200, 60, 105, 165, 203, 60, 1, 123, 154, 60, 173, 39, 153, 60, 105, 221, 156, 60, 63, 181, 155, 62, 64, 65, 240, 61, 69, 246, 139, 61, 28, 16, 36, 61, 242, 82, 242, 60, 18, 211, 170, 60, 158, 113, 137, 60, 145, 61, 20, 60, 11, 120, 77, 60, 207, 232, 64, 60, 245, 4, 244, 59, 204, 255, 16, 60, 167, 203, 45, 60, 215, 10, 1, 62, 103, 54, 119, 61, 94, 207, 54, 61, 141, 5, 22, 61, 219, 173, 206, 60, 237, 190, 184, 60, 16, 129, 185, 60, 222, 43, 153, 60, 175, 207, 172, 60, 231, 164, 150, 60, 86, 107, 122, 60, 161, 179, 99, 60, 197, 74, 122, 60, 147, 111, 200, 61, 54, 139, 61, 61, 143, 174, 227, 60, 56, 124, 28, 61, 70, 11, 34, 61, 6, 86, 14, 61, 12, 15, 221, 60, 16, 192, 215, 60, 13, 9, 251, 60, 117, 22, 12, 61, 6, 1, 203, 60, 4, 5, 191, 60, 185, 199, 227, 60, 43, 240, 63, 63, 39, 247, 137, 61, 47, 41, 62, 61, 82, 84, 122, 61, 116, 198, 162, 60, 197, 100, 227, 60, 126, 146, 5, 61, 0, 145, 166, 60, 219, 204, 103, 60, 137, 255, 139, 60, 37, 216, 154, 60, 99, 250, 9, 60, 119, 216, 43, 60, 72, 176, 250, 61, 235, 80, 173, 60, 70, 174, 7, 61, 141, 187, 251, 60, 130, 191, 239, 60, 202, 70, 41, 61, 120, 77, 19, 61, 80, 34, 194, 60, 18, 177, 232, 60, 19, 17, 169, 60, 191, 130, 167, 60, 54, 6, 215, 60, 153, 83, 136, 60, 223, 96, 18, 62, 78, 16, 251, 60, 61, 253, 6, 61, 65, 110, 255, 60, 198, 37, 13, 61, 13, 146, 26, 61, 171, 63, 71, 61, 13, 212, 242, 60, 152, 70, 4, 61, 42, 75, 3, 61, 11, 122, 138, 60, 114, 1, 14, 61, 189, 224, 236, 60, 43, 188, 49, 63, 231, 76, 228, 60, 255, 228, 121, 61, 27, 36, 5, 61, 199, 205, 39, 61, 232, 245, 71, 60, 64, 101, 153, 60, 208, 108, 155, 60, 29, 148, 0, 61, 32, 7, 172, 60, 103, 220, 8, 61, 49, 139, 176, 60, 60, 73, 21, 61, 104, 16, 23, 63, 111, 22, 7, 61, 235, 185, 77, 61, 136, 160, 29, 61, 38, 129, 12, 61, 158, 105, 172, 60, 59, 106, 170, 60, 168, 41, 83, 60, 181, 174, 160, 60, 215, 231, 150, 60, 228, 225, 154, 60, 168, 237, 205, 60, 53, 88, 159, 60, 245, 67, 39, 62, 8, 183, 29, 61, 157, 37, 26, 61, 64, 227, 32, 61, 92, 126, 40, 61, 197, 0, 217, 60, 207, 19, 6, 61, 25, 74, 198, 60, 99, 190, 200, 60, 153, 36, 195, 60, 17, 61, 184, 60, 24, 206, 3, 61, 213, 172, 179, 60, 107, 227, 39, 64, 33, 204, 222, 61, 165, 38, 143, 61, 158, 168, 15, 61, 130, 246, 123, 61, 93, 233, 84, 60, 119, 64, 153, 61, 20, 61, 50, 61, 94, 13, 146, 61, 46, 74, 21, 61, 251, 238, 119, 60, 132, 254, 255, 60, 148, 48, 61, 61, 63, 123, 18, 63, 238, 245, 188, 61, 49, 194, 90, 61, 143, 94, 45, 61, 57, 61, 179, 60, 24, 211, 224, 60, 119, 22, 226, 60, 54, 128, 63, 61, 29, 84, 205, 60, 138, 198, 207, 60, 137, 223, 179, 60, 43, 76, 211, 60, 189, 109, 223, 60, 114, 241, 81, 62, 245, 26, 136, 61, 239, 69, 133, 61, 156, 254, 121, 61, 209, 83, 35, 61, 210, 185, 40, 61, 228, 231, 0, 61, 134, 234, 137, 61, 132, 209, 53, 61, 1, 109, 251, 60, 242, 124, 15, 61, 23, 24, 30, 61, 32, 139, 190, 60, 173, 226, 137, 63, 156, 87, 62, 62, 95, 152, 16, 61, 249, 58, 224, 60, 49, 84, 171, 60, 106, 184, 183, 60, 133, 24, 186, 60, 60, 55, 14, 61, 3, 249, 189, 60, 194, 150, 28, 60, 209, 255, 61, 60, 25, 246, 130, 60, 250, 135, 24, 61, 94, 164, 122, 61, 133, 79, 59, 61, 130, 21, 159, 60, 164, 23, 2, 61, 175, 132, 249, 60, 209, 220, 185, 60, 36, 50, 183, 60, 58, 255, 108, 60, 255, 212, 162, 60, 225, 119, 120, 60, 179, 172, 84, 60, 100, 236, 46, 60, 66, 217, 77, 60, 35, 56, 188, 61, 199, 119, 122, 61, 3, 56, 29, 61, 27, 133, 124, 61, 25, 211, 41, 61, 107, 154, 24, 61, 45, 157, 55, 61, 167, 48, 184, 60, 203, 156, 32, 61, 35, 42, 195, 60, 13, 41, 215, 60, 251, 61, 199, 60, 7, 218, 221, 60, 74, 3, 45, 63, 168, 3, 56, 62, 98, 18, 135, 61, 44, 172, 170, 61, 76, 204, 38, 61, 211, 202, 32, 61, 70, 225, 19, 61, 23, 216, 46, 61, 27, 99, 213, 60, 145, 170, 190, 60, 82, 91, 154, 60, 252, 249, 82, 60, 118, 253, 215, 60, 179, 40, 108, 62, 253, 217, 109, 62, 20, 94, 175, 61, 224, 173, 172, 61, 11, 125, 22, 61, 1, 122, 247, 60, 90, 202, 13, 61, 82, 124, 233, 60, 249, 179, 6, 61, 128, 219, 10, 61, 77, 37, 152, 60, 2, 105, 244, 60, 225, 15, 230, 60, 208, 109, 166, 62, 65, 246, 143, 62, 239, 148, 1, 62, 79, 93, 240, 61, 191, 137, 131, 61, 152, 76, 56, 61, 30, 79, 24, 61, 86, 113, 64, 61, 20, 157, 49, 61, 159, 210, 52, 61, 94, 29, 26, 61, 181, 90, 30, 61, 111, 44, 61, 61, 12, 150, 170, 62, 72, 55, 234, 60, 211, 206, 238, 60, 180, 83, 86, 60, 51, 125, 93, 60, 62, 171, 57, 60, 232, 168, 102, 60, 106, 127, 67, 60, 39, 58, 96, 60, 240, 254, 125, 60, 164, 219, 55, 60, 110, 198, 97, 60, 61, 214, 237, 60, 188, 121, 59, 62, 47, 52, 63, 62, 43, 230, 141, 61, 15, 148, 178, 61, 23, 248, 55, 61, 78, 96, 102, 60, 219, 246, 246, 60, 27, 230, 185, 60, 206, 202, 194, 60, 165, 105, 168, 60, 141, 0, 140, 60, 137, 45, 227, 60, 200, 195, 154, 60, 100, 8, 54, 63, 136, 81, 231, 62, 178, 164, 26, 62, 234, 70, 172, 61, 156, 20, 100, 61, 211, 154, 121, 61, 253, 239, 97, 61, 161, 34, 72, 61, 246, 69, 29, 61, 33, 86, 32, 61, 160, 107, 211, 60, 116, 237, 20, 61, 202, 152, 224, 60, 92, 118, 138, 63, 230, 173, 61, 62, 235, 149, 36, 62, 50, 231, 135, 61, 27, 51, 28, 61, 191, 52, 155, 60, 247, 247, 251, 60, 53, 147, 255, 60, 113, 149, 142, 60, 174, 237, 133, 60, 1, 149, 163, 60, 141, 189, 125, 60, 25, 189, 140, 60, 159, 167, 217, 62, 161, 51, 88, 62, 247, 178, 197, 61, 4, 217, 116, 61, 162, 2, 255, 60, 181, 230, 221, 60, 48, 169, 237, 60, 217, 35, 222, 60, 77, 210, 181, 60, 237, 152, 215, 60, 59, 26, 146, 60, 157, 112, 80, 60, 43, 70, 144, 60, 55, 101, 163, 63, 33, 115, 152, 62, 240, 156, 136, 62, 173, 254, 116, 61, 91, 46, 131, 61, 147, 94, 134, 61, 98, 120, 161, 61, 41, 32, 93, 61, 74, 184, 115, 61, 176, 132, 47, 61, 243, 207, 8, 61, 89, 72, 24, 61, 136, 104, 215, 60, 191, 158, 133, 62, 113, 30, 140, 61, 11, 17, 27, 61, 54, 133, 158, 60, 38, 17, 147, 60, 142, 240, 85, 60, 125, 149, 137, 60, 14, 50, 111, 60, 212, 68, 70, 60, 119, 104, 64, 60, 60, 88, 1, 60, 239, 48, 21, 60, 29, 175, 153, 60, 3, 28, 151, 62, 6, 3, 249, 61, 57, 89, 83, 61, 57, 138, 217, 60, 180, 98, 204, 60, 247, 148, 164, 60, 213, 203, 181, 60, 146, 225, 116, 60, 148, 121, 203, 60, 203, 123, 116, 60, 80, 132, 50, 60, 17, 68, 115, 60, 245, 236, 149, 60, 20, 44, 61, 62, 185, 213, 146, 61, 17, 120, 86, 61, 182, 54, 247, 60, 51, 118, 82, 61, 70, 50, 170, 60, 247, 223, 18, 61, 193, 238, 202, 60, 37, 16, 40, 61, 25, 19, 169, 60, 161, 117, 161, 60, 75, 226, 216, 60, 118, 17, 202, 60, 62, 65, 179, 63, 10, 160, 100, 62, 33, 235, 248, 61, 91, 6, 84, 61, 20, 202, 188, 60, 107, 194, 43, 61, 45, 51, 92, 61, 210, 219, 135, 60, 72, 243, 152, 60, 235, 46, 100, 60, 76, 140, 79, 60, 14, 46, 96, 60, 187, 252, 118, 60, 213, 41, 180, 63, 31, 237, 223, 62, 34, 37, 61, 62, 219, 205, 236, 61, 184, 165, 179, 61, 1, 27, 149, 61, 53, 163, 110, 61, 198, 19, 130, 61, 7, 106, 26, 61, 14, 139, 24, 61, 251, 240, 38, 61, 160, 94, 47, 61, 21, 229, 244, 60, 170, 32, 187, 63, 253, 106, 2, 63, 136, 94, 160, 62, 106, 228, 23, 62, 69, 108, 185, 61, 52, 250, 168, 61, 192, 92, 153, 61, 197, 53, 145, 61, 101, 159, 131, 61, 17, 65, 185, 61, 56, 146, 9, 61, 185, 51, 99, 61, 109, 236, 154, 61, 49, 70, 150, 63, 212, 79, 225, 61, 92, 74, 56, 62, 47, 84, 105, 62, 137, 204, 178, 61, 240, 97, 131, 61, 206, 50, 49, 61, 244, 39, 6, 61, 92, 40, 18, 61, 6, 215, 40, 61, 236, 162, 72, 61, 64, 204, 26, 61, 126, 151, 66, 61, 95, 21, 141, 63, 47, 238, 205, 61, 247, 178, 33, 62, 74, 141, 147, 61, 116, 20, 143, 61, 76, 186, 158, 61, 47, 169, 169, 61, 252, 42, 32, 61, 41, 135, 3, 61, 134, 224, 243, 60, 204, 39, 40, 61, 112, 21, 68, 61, 46, 48, 19, 61, 38, 0, 138, 63, 106, 105, 31, 62, 64, 134, 58, 62, 105, 220, 198, 61, 189, 203, 153, 61, 253, 242, 209, 61, 68, 190, 124, 61, 212, 237, 103, 61, 114, 167, 139, 61, 81, 196, 60, 61, 177, 147, 126, 61, 226, 18, 146, 61, 113, 23, 82, 61, 35, 27, 151, 63, 221, 188, 162, 61, 12, 247, 42, 62, 179, 159, 39, 62, 204, 200, 153, 61, 85, 149, 120, 61, 42, 139, 78, 61, 146, 163, 97, 61, 153, 197, 14, 61, 77, 240, 86, 61, 158, 56, 38, 61, 181, 92, 203, 60, 3, 204, 65, 61, 217, 220, 181, 63, 133, 107, 185, 62, 243, 215, 68, 62, 35, 63, 32, 62, 108, 88, 151, 61, 195, 93, 203, 61, 199, 38, 155, 61, 83, 239, 15, 61, 190, 178, 36, 61, 148, 215, 75, 61, 203, 20, 114, 61, 13, 98, 79, 61, 106, 113, 145, 61, 70, 108, 192, 63, 29, 127, 140, 62, 240, 144, 146, 62, 217, 180, 45, 62, 146, 237, 228, 61, 36, 169, 187, 61, 114, 67, 165, 61, 128, 68, 214, 61, 88, 13, 89, 61, 193, 251, 139, 61, 133, 152, 68, 61, 228, 118, 135, 61, 243, 251, 101, 61, 9, 48, 212, 63, 199, 79, 85, 63, 187, 74, 207, 61, 223, 233, 129, 61, 171, 97, 85, 61, 71, 129, 143, 61, 149, 87, 98, 61, 82, 205, 3, 61, 86, 199, 10, 61, 158, 203, 196, 60, 175, 116, 250, 60, 173, 160, 251, 60, 2, 159, 98, 60, 72, 204, 133, 63, 166, 180, 115, 63, 74, 50, 143, 62, 218, 128, 77, 62, 53, 15, 44, 62, 64, 114, 166, 61, 23, 9, 168, 61, 238, 59, 195, 61, 17, 117, 34, 61, 32, 249, 37, 61, 179, 213, 129, 61, 85, 35, 104, 61, 5, 114, 160, 61, 117, 28, 131, 63, 111, 157, 178, 62, 30, 171, 50, 62, 109, 44, 169, 61, 23, 4, 199, 61, 113, 197, 182, 61, 211, 3, 223, 61, 176, 225, 166, 61, 159, 212, 107, 61, 82, 195, 42, 61, 174, 239, 106, 61, 215, 14, 83, 61, 199, 248, 61, 61, 2, 33, 100, 62, 22, 77, 150, 61, 1, 74, 48, 61, 9, 122, 136, 61, 129, 164, 245, 60, 165, 223, 144, 60, 102, 181, 75, 60, 228, 46, 65, 60, 184, 129, 113, 60, 22, 37, 32, 60, 52, 213, 131, 60, 162, 136, 40, 60, 95, 27, 29, 60, 214, 99, 161, 61, 70, 75, 63, 60, 100, 128, 133, 61, 244, 156, 141, 60, 31, 238, 199, 60, 30, 10, 80, 60, 246, 74, 69, 60, 54, 134, 93, 60, 177, 75, 138, 60, 88, 1, 5, 60, 191, 243, 73, 60, 68, 147, 11, 60, 42, 142, 56, 60, 57, 74, 124, 61, 114, 217, 107, 60, 227, 19, 131, 60, 151, 33, 169, 60, 72, 11, 158, 60, 212, 44, 155, 60, 49, 202, 130, 60, 245, 245, 104, 60, 122, 186, 118, 60, 30, 223, 90, 60, 236, 205, 135, 60, 100, 101, 88, 60, 237, 192, 90, 60, 94, 209, 4, 63, 224, 250, 37, 62, 139, 81, 2, 62, 77, 44, 69, 61, 49, 201, 66, 61, 246, 31, 55, 61, 100, 132, 187, 60, 220, 191, 140, 60, 101, 121, 51, 60, 91, 224, 85, 60, 244, 180, 21, 60, 247, 43, 55, 60, 100, 175, 60, 60, 43, 203, 0, 62, 241, 174, 236, 60, 221, 145, 4, 61, 50, 91, 8, 61, 134, 35, 234, 60, 23, 244, 155, 60, 13, 221, 239, 60, 15, 219, 151, 60, 164, 6, 118, 60, 65, 172, 113, 60, 251, 88, 132, 60, 199, 121, 128, 60, 129, 114, 129, 60, 4, 123, 146, 61, 213, 251, 249, 60, 65, 54, 240, 60, 21, 102, 244, 60, 111, 130, 186, 60, 11, 22, 177, 60, 2, 135, 247, 60, 211, 191, 203, 60, 82, 19, 220, 60, 43, 47, 202, 60, 253, 213, 217, 60, 117, 112, 208, 60, 135, 183, 158, 60, 167, 20, 179, 62, 139, 14, 7, 62, 139, 99, 31, 61, 203, 135, 189, 60, 22, 250, 34, 61, 223, 245, 143, 60, 222, 16, 45, 60, 54, 93, 43, 60, 25, 177, 47, 60, 12, 2, 54, 60, 48, 244, 35, 60, 149, 143, 49, 60, 88, 231, 73, 60, 128, 90, 5, 62, 7, 45, 154, 61, 189, 192, 48, 61, 146, 103, 184, 60, 107, 175, 240, 60, 112, 7, 218, 60, 135, 63, 163, 60, 211, 84, 156, 60, 141, 95, 143, 60, 232, 191, 120, 60, 193, 226, 135, 60, 36, 131, 141, 60, 252, 96, 170, 60, 175, 207, 7, 62, 68, 250, 161, 61, 48, 196, 22, 61, 105, 15, 0, 61, 217, 55, 81, 61, 187, 189, 31, 61, 142, 58, 217, 60, 214, 217, 228, 60, 233, 129, 226, 60, 120, 75, 214, 60, 114, 112, 236, 60, 101, 134, 253, 60, 50, 74, 14, 61, 217, 22, 3, 63, 75, 104, 132, 61, 252, 6, 47, 62, 183, 140, 56, 61, 135, 153, 173, 61, 126, 20, 143, 60, 151, 186, 189, 60, 166, 178, 53, 60, 129, 3, 87, 60, 76, 190, 122, 60, 15, 123, 159, 60, 59, 205, 139, 60, 160, 210, 98, 60, 194, 70, 191, 62, 94, 163, 214, 60, 77, 233, 146, 61, 73, 183, 117, 60, 191, 223, 10, 61, 61, 90, 81, 60, 50, 104, 52, 61, 36, 195, 112, 60, 219, 129, 72, 60, 92, 202, 145, 60, 37, 242, 132, 60, 73, 227, 42, 60, 56, 173, 143, 60, 52, 8, 181, 61, 11, 253, 252, 60, 101, 51, 99, 61, 138, 79, 145, 60, 189, 140, 13, 61, 191, 77, 135, 60, 85, 58, 211, 60, 140, 216, 179, 60, 223, 184, 150, 60, 17, 25, 126, 60, 156, 114, 189, 60, 55, 241, 144, 60, 42, 121, 70, 60, 85, 128, 74, 63, 71, 203, 78, 62, 148, 151, 212, 61, 71, 171, 17, 61, 229, 2, 2, 61, 2, 57, 32, 60, 213, 2, 8, 61, 246, 222, 137, 59, 247, 183, 132, 60, 1, 195, 8, 60, 141, 174, 5, 61, 234, 81, 66, 60, 199, 211, 127, 60, 95, 174, 192, 62, 239, 122, 4, 62, 161, 188, 148, 61, 51, 84, 217, 60, 15, 208, 213, 60, 131, 84, 63, 60, 225, 69, 167, 60, 145, 9, 48, 60, 67, 104, 57, 60, 190, 109, 49, 60, 168, 187, 153, 60, 141, 177, 58, 60, 126, 18, 242, 59, 181, 90, 124, 61, 212, 123, 23, 61, 229, 164, 230, 60, 87, 93, 252, 60, 165, 138, 213, 60, 125, 255, 51, 60, 20, 43, 163, 60, 98, 217, 140, 60, 96, 108, 186, 60, 246, 148, 63, 60, 170, 204, 202, 60, 100, 63, 124, 60, 166, 92, 65, 60, 235, 188, 29, 63, 50, 250, 81, 61, 30, 200, 199, 61, 45, 228, 167, 60, 40, 161, 28, 61, 42, 198, 196, 61, 165, 52, 236, 60, 196, 178, 161, 60, 20, 236, 222, 60, 154, 205, 170, 60, 244, 225, 209, 60, 196, 13, 92, 60, 18, 240, 170, 60, 231, 193, 252, 61, 158, 63, 139, 61, 15, 57, 166, 60, 213, 72, 136, 60, 207, 74, 19, 61, 231, 33, 211, 60, 160, 217, 229, 60, 63, 29, 202, 60, 35, 33, 191, 60, 121, 236, 62, 60, 251, 180, 151, 60, 165, 37, 153, 60, 162, 134, 174, 60, 15, 131, 41, 62, 20, 254, 73, 61, 114, 126, 250, 60, 243, 221, 168, 60, 50, 26, 35, 61, 90, 16, 241, 60, 87, 100, 25, 61, 139, 243, 52, 61, 169, 94, 32, 61, 218, 129, 159, 60, 236, 156, 185, 60, 221, 225, 25, 61, 122, 16, 230, 60, 204, 43, 160, 63, 212, 183, 45, 62, 46, 242, 18, 62, 58, 160, 149, 60, 106, 206, 134, 60, 186, 162, 229, 59, 207, 57, 152, 60, 178, 14, 33, 60, 79, 50, 182, 60, 84, 70, 15, 60, 17, 171, 69, 60, 222, 73, 139, 60, 119, 189, 159, 59, 98, 87, 176, 62, 242, 244, 2, 62, 100, 24, 127, 61, 231, 65, 249, 60, 225, 215, 207, 60, 240, 118, 112, 60, 48, 41, 36, 61, 84, 15, 111, 60, 184, 82, 197, 60, 125, 158, 145, 60, 219, 243, 143, 60, 57, 63, 96, 60, 229, 119, 178, 59, 87, 254, 209, 62, 197, 153, 106, 62, 104, 213, 240, 61, 110, 243, 128, 61, 198, 146, 43, 61, 252, 63, 117, 60, 92, 158, 117, 61, 221, 253, 204, 60, 124, 59, 154, 60, 251, 74, 159, 60, 4, 69, 219, 60, 38, 189, 172, 60, 253, 40, 51, 60, 176, 237, 0, 64, 94, 223, 68, 62, 231, 150, 197, 62, 92, 100, 91, 61, 242, 157, 36, 61, 215, 2, 117, 61, 46, 148, 49, 61, 63, 87, 250, 60, 21, 190, 42, 61, 38, 207, 32, 61, 239, 243, 110, 60, 133, 238, 81, 60, 75, 188, 146, 60, 161, 83, 102, 62, 163, 56, 49, 61, 156, 67, 157, 61, 160, 4, 4, 61, 62, 175, 150, 60, 207, 157, 86, 60, 213, 86, 194, 60, 112, 164, 254, 59, 92, 26, 105, 60, 205, 255, 205, 60, 147, 116, 137, 60, 141, 160, 18, 60, 182, 167, 25, 60, 44, 57, 176, 61, 157, 28, 255, 60, 21, 223, 112, 61, 97, 246, 155, 60, 218, 134, 23, 61, 73, 230, 164, 60, 26, 35, 5, 61, 238, 60, 170, 60, 141, 148, 146, 60, 223, 47, 146, 60, 213, 19, 126, 60, 203, 25, 105, 60, 129, 254, 32, 60, 6, 190, 128, 62, 194, 242, 84, 61, 205, 219, 20, 61, 67, 108, 201, 61, 41, 132, 163, 61, 175, 222, 249, 60, 175, 87, 124, 60, 55, 177, 213, 60, 220, 192, 9, 61, 168, 190, 150, 60, 21, 137, 94, 61, 130, 94, 223, 60, 116, 18, 177, 60, 4, 92, 34, 62, 93, 63, 179, 60, 23, 194, 91, 61, 62, 51, 1, 61, 63, 107, 74, 61, 81, 213, 235, 60, 187, 43, 172, 60, 138, 202, 7, 61, 156, 164, 106, 60, 81, 81, 41, 60, 131, 119, 232, 60, 87, 30, 169, 60, 208, 247, 211, 60, 55, 38, 212, 61, 40, 192, 13, 61, 54, 135, 115, 61, 76, 240, 84, 61, 113, 106, 25, 61, 240, 29, 229, 60, 233, 29, 153, 60, 127, 157, 51, 61, 114, 182, 244, 60, 81, 55, 186, 60, 116, 168, 56, 61, 249, 169, 10, 61, 102, 220, 198, 60, 51, 27, 137, 62, 117, 48, 182, 60, 245, 119, 0, 61, 80, 239, 147, 60, 104, 155, 25, 61, 176, 5, 191, 60, 148, 237, 14, 60, 70, 99, 10, 61, 184, 82, 66, 60, 124, 144, 46, 60, 127, 184, 144, 60, 232, 174, 6, 60, 116, 153, 139, 60, 99, 251, 93, 61, 60, 52, 192, 60, 244, 184, 100, 60, 128, 249, 168, 60, 7, 97, 161, 60, 117, 55, 185, 60, 74, 169, 9, 60, 60, 231, 69, 60, 34, 18, 148, 60, 180, 193, 47, 60, 225, 47, 105, 60, 185, 161, 251, 59, 243, 79, 81, 60, 206, 143, 130, 61, 177, 127, 219, 60, 150, 35, 160, 60, 243, 69, 195, 60, 241, 128, 169, 60, 46, 226, 194, 60, 131, 251, 61, 60, 145, 34, 180, 60, 102, 84, 196, 60, 38, 171, 125, 60, 81, 98, 186, 60, 24, 240, 69, 60, 112, 97, 166, 60, 165, 106, 233, 62, 236, 95, 35, 61, 159, 206, 122, 61, 128, 192, 128, 61, 44, 209, 221, 61, 95, 239, 28, 61, 12, 240, 43, 61, 249, 32, 153, 60, 3, 21, 192, 60, 120, 90, 112, 60, 94, 255, 144, 60, 90, 129, 124, 60, 3, 188, 206, 60, 191, 85, 107, 62, 93, 234, 66, 61, 25, 182, 133, 61, 242, 228, 16, 61, 17, 128, 28, 61, 194, 92, 138, 60, 92, 242, 70, 61, 212, 100, 207, 60, 84, 68, 129, 60, 171, 178, 168, 60, 210, 171, 222, 60, 37, 177, 216, 60, 196, 153, 241, 60, 81, 141, 107, 62, 54, 124, 170, 61, 148, 31, 156, 61, 155, 245, 58, 61, 240, 166, 113, 61, 6, 112, 20, 61, 236, 107, 28, 61, 122, 229, 13, 61, 7, 73, 2, 61, 162, 86, 136, 60, 176, 244, 6, 61, 1, 94, 12, 61, 143, 32, 73, 61, 82, 61, 34, 62, 48, 231, 73, 60, 207, 23, 45, 61, 202, 50, 169, 60, 214, 164, 158, 60, 109, 163, 75, 61, 243, 194, 180, 60, 86, 158, 18, 60, 140, 34, 10, 61, 63, 23, 179, 60, 177, 234, 145, 60, 184, 133, 141, 60, 31, 65, 131, 60, 236, 152, 48, 61, 141, 156, 247, 60, 91, 48, 163, 60, 93, 110, 251, 60, 155, 116, 146, 60, 130, 63, 249, 60, 6, 212, 8, 61, 223, 20, 180, 60, 2, 179, 170, 60, 230, 238, 177, 60, 197, 7, 206, 60, 55, 28, 204, 60, 49, 94, 152, 60, 3, 215, 123, 61, 108, 94, 211, 60, 92, 197, 210, 60, 64, 146, 90, 61, 62, 90, 38, 61]).concat([250, 183, 36, 61, 70, 121, 84, 61, 163, 214, 205, 60, 244, 116, 70, 61, 90, 180, 42, 61, 9, 55, 16, 61, 139, 39, 25, 61, 10, 192, 211, 60, 66, 130, 172, 62, 198, 148, 174, 60, 229, 237, 86, 60, 202, 41, 88, 60, 15, 226, 108, 60, 195, 36, 48, 61, 69, 66, 221, 59, 97, 96, 243, 59, 176, 235, 10, 60, 46, 204, 72, 60, 37, 94, 2, 60, 199, 53, 110, 60, 164, 115, 28, 59, 178, 169, 246, 61, 77, 219, 255, 60, 39, 101, 228, 60, 185, 223, 136, 60, 136, 67, 206, 60, 238, 27, 255, 60, 241, 104, 154, 60, 208, 220, 110, 60, 147, 70, 141, 60, 138, 119, 149, 60, 166, 61, 137, 60, 167, 176, 128, 60, 129, 30, 205, 59, 77, 36, 43, 63, 93, 75, 219, 61, 162, 51, 231, 61, 50, 158, 33, 61, 54, 94, 51, 61, 53, 76, 86, 61, 202, 137, 255, 60, 186, 10, 226, 60, 115, 102, 84, 61, 178, 249, 249, 60, 122, 133, 44, 61, 75, 186, 178, 60, 55, 23, 64, 60, 28, 245, 32, 63, 129, 2, 1, 62, 156, 113, 178, 61, 247, 24, 159, 61, 235, 185, 0, 61, 153, 74, 210, 60, 21, 83, 40, 60, 107, 128, 36, 60, 153, 147, 49, 60, 65, 218, 65, 60, 253, 200, 53, 60, 107, 187, 44, 60, 165, 188, 73, 60, 136, 28, 185, 63, 21, 130, 142, 62, 234, 127, 130, 62, 54, 142, 76, 62, 30, 108, 18, 62, 6, 17, 199, 61, 81, 35, 9, 62, 155, 140, 136, 61, 50, 225, 59, 61, 159, 161, 160, 61, 201, 232, 235, 60, 43, 91, 60, 61, 236, 10, 129, 61, 172, 127, 186, 63, 131, 164, 117, 62, 198, 84, 89, 62, 217, 203, 113, 62, 187, 135, 244, 61, 96, 122, 33, 62, 237, 12, 20, 62, 128, 21, 209, 61, 253, 135, 79, 61, 111, 195, 175, 61, 132, 205, 46, 61, 22, 11, 121, 61, 162, 209, 133, 61, 254, 218, 52, 62, 236, 78, 148, 61, 220, 146, 194, 60, 41, 159, 4, 60, 197, 161, 98, 60, 181, 237, 139, 60, 123, 118, 75, 60, 49, 16, 210, 59, 152, 33, 136, 60, 136, 134, 140, 59, 251, 2, 84, 60, 237, 239, 91, 59, 30, 109, 10, 60, 177, 195, 214, 62, 11, 133, 13, 62, 170, 55, 103, 61, 245, 88, 227, 60, 169, 188, 178, 60, 128, 92, 211, 60, 108, 216, 24, 60, 186, 98, 113, 60, 62, 118, 9, 60, 143, 163, 73, 60, 251, 20, 39, 60, 132, 103, 253, 59, 215, 15, 40, 60, 254, 55, 154, 62, 29, 191, 109, 62, 93, 65, 21, 62, 203, 127, 207, 61, 173, 100, 128, 61, 83, 253, 35, 61, 44, 134, 195, 60, 7, 80, 9, 61, 186, 184, 5, 61, 241, 27, 151, 60, 61, 47, 119, 60, 10, 99, 143, 60, 66, 245, 191, 60, 177, 214, 120, 62, 223, 183, 23, 61, 142, 23, 46, 61, 113, 196, 168, 60, 162, 145, 161, 60, 181, 138, 7, 61, 171, 83, 191, 60, 241, 152, 249, 59, 164, 197, 97, 60, 207, 244, 136, 60, 130, 156, 119, 60, 240, 100, 72, 60, 10, 29, 169, 59, 56, 36, 192, 63, 218, 199, 91, 62, 103, 76, 134, 62, 121, 83, 70, 62, 254, 90, 89, 62, 254, 201, 21, 61, 64, 214, 194, 61, 77, 169, 45, 61, 20, 17, 157, 61, 178, 24, 118, 61, 166, 81, 185, 60, 186, 92, 176, 60, 210, 22, 28, 61, 11, 167, 119, 63, 30, 254, 135, 62, 72, 93, 103, 62, 6, 114, 223, 61, 42, 254, 235, 61, 171, 175, 245, 61, 182, 0, 204, 61, 224, 170, 16, 61, 132, 195, 140, 61, 24, 172, 188, 61, 18, 132, 83, 61, 171, 208, 61, 61, 154, 62, 157, 60, 36, 202, 18, 64, 42, 41, 58, 61, 194, 199, 175, 62, 158, 11, 204, 60, 179, 169, 81, 61, 243, 91, 136, 61, 114, 173, 25, 61, 94, 229, 161, 60, 172, 225, 75, 61, 175, 148, 182, 60, 176, 244, 26, 61, 64, 153, 132, 60, 189, 142, 14, 60, 70, 38, 22, 63, 244, 34, 144, 61, 47, 23, 204, 61, 47, 204, 16, 61, 21, 3, 152, 60, 108, 204, 155, 61, 238, 84, 81, 61, 205, 255, 156, 60, 150, 230, 88, 61, 59, 109, 171, 60, 176, 15, 3, 61, 123, 37, 206, 60, 115, 101, 9, 60, 0, 254, 90, 64, 190, 51, 208, 61, 194, 10, 35, 63, 222, 161, 18, 61, 98, 118, 0, 62, 163, 219, 36, 62, 201, 157, 75, 61, 91, 16, 27, 61, 13, 100, 226, 61, 8, 60, 93, 61, 84, 1, 161, 61, 122, 117, 215, 60, 166, 222, 187, 60, 107, 31, 90, 63, 206, 180, 17, 62, 89, 75, 27, 62, 84, 143, 176, 61, 253, 155, 62, 61, 1, 226, 165, 61, 113, 108, 197, 61, 57, 154, 66, 61, 214, 184, 36, 61, 36, 85, 114, 61, 96, 160, 137, 60, 53, 39, 224, 60, 128, 249, 206, 60, 249, 7, 250, 63, 185, 124, 128, 62, 246, 168, 141, 62, 244, 223, 183, 62, 32, 85, 65, 61, 16, 216, 9, 62, 122, 186, 8, 62, 59, 187, 134, 61, 147, 202, 127, 61, 60, 24, 136, 61, 217, 228, 22, 61, 36, 181, 28, 61, 33, 28, 9, 61, 62, 103, 219, 63, 133, 163, 172, 62, 201, 4, 160, 62, 122, 44, 105, 62, 179, 54, 199, 61, 173, 149, 1, 62, 103, 123, 94, 62, 97, 220, 74, 61, 122, 217, 226, 61, 181, 171, 243, 61, 79, 24, 36, 61, 216, 0, 116, 61, 11, 7, 138, 61, 183, 177, 42, 65, 133, 193, 166, 62, 10, 67, 46, 62, 72, 40, 12, 62, 129, 188, 136, 61, 16, 239, 223, 61, 38, 7, 139, 61, 240, 65, 139, 61, 212, 177, 92, 60, 116, 100, 83, 61, 151, 254, 231, 60, 214, 130, 167, 60, 36, 110, 149, 60, 59, 191, 164, 64, 74, 240, 62, 63, 248, 48, 168, 62, 112, 192, 13, 62, 245, 79, 185, 61, 111, 110, 71, 61, 12, 162, 119, 61, 109, 228, 99, 61, 15, 35, 151, 60, 41, 217, 19, 61, 75, 14, 243, 60, 106, 9, 214, 60, 226, 182, 171, 60, 253, 228, 233, 64, 67, 115, 100, 63, 246, 32, 194, 62, 22, 243, 181, 61, 171, 186, 230, 61, 48, 183, 19, 62, 20, 231, 152, 61, 180, 100, 137, 61, 116, 132, 81, 61, 250, 84, 84, 61, 84, 148, 10, 61, 191, 63, 26, 61, 156, 119, 248, 60, 158, 226, 136, 63, 190, 223, 4, 62, 112, 249, 11, 62, 235, 25, 97, 61, 45, 23, 59, 61, 158, 3, 206, 60, 7, 34, 53, 61, 224, 168, 160, 60, 56, 143, 63, 61, 213, 199, 56, 61, 186, 150, 201, 60, 54, 25, 173, 60, 5, 80, 152, 60, 153, 94, 190, 63, 200, 150, 39, 62, 98, 155, 72, 62, 137, 251, 174, 61, 125, 164, 72, 61, 34, 160, 232, 60, 251, 65, 212, 61, 230, 240, 41, 61, 85, 176, 206, 61, 51, 252, 150, 61, 112, 46, 14, 61, 183, 119, 27, 61, 88, 40, 220, 60, 59, 162, 135, 63, 84, 242, 134, 62, 213, 217, 58, 62, 5, 150, 20, 62, 110, 205, 156, 61, 116, 64, 140, 61, 131, 225, 54, 62, 95, 100, 186, 61, 218, 59, 229, 61, 16, 93, 30, 62, 203, 178, 62, 61, 216, 244, 132, 61, 228, 45, 137, 61, 13, 247, 140, 62, 209, 59, 104, 61, 87, 165, 127, 61, 194, 225, 29, 61, 9, 97, 219, 61, 119, 140, 93, 61, 14, 163, 159, 60, 51, 130, 47, 60, 248, 116, 166, 60, 64, 119, 173, 60, 200, 200, 113, 60, 209, 73, 186, 60, 233, 88, 188, 60, 36, 100, 183, 62, 146, 68, 133, 61, 101, 200, 5, 61, 144, 241, 133, 61, 77, 155, 176, 61, 145, 7, 0, 61, 30, 44, 43, 61, 45, 116, 71, 61, 130, 224, 152, 60, 43, 182, 190, 60, 181, 201, 164, 60, 99, 7, 235, 60, 197, 22, 189, 60, 224, 81, 137, 62, 172, 40, 163, 61, 135, 88, 156, 61, 225, 108, 108, 61, 136, 181, 204, 61, 71, 250, 143, 61, 41, 33, 198, 61, 104, 44, 76, 61, 138, 230, 215, 60, 152, 20, 28, 61, 142, 183, 9, 61, 145, 254, 181, 60, 230, 57, 22, 61, 142, 193, 144, 62, 59, 117, 247, 61, 102, 45, 127, 61, 61, 114, 152, 61, 204, 95, 44, 62, 73, 124, 50, 61, 26, 56, 171, 60, 243, 191, 167, 60, 69, 195, 183, 60, 90, 224, 43, 60, 127, 55, 157, 60, 247, 251, 94, 60, 167, 171, 33, 60, 198, 42, 42, 63, 34, 12, 166, 61, 75, 165, 192, 61, 215, 190, 88, 61, 238, 170, 162, 61, 249, 189, 12, 62, 6, 82, 67, 61, 24, 63, 164, 60, 162, 151, 177, 61, 42, 236, 76, 61, 77, 183, 81, 61, 207, 172, 11, 61, 103, 202, 242, 60, 20, 31, 208, 62, 179, 11, 76, 62, 57, 210, 1, 62, 126, 47, 239, 61, 46, 78, 128, 62, 77, 120, 30, 62, 218, 17, 179, 61, 162, 13, 41, 61, 244, 5, 164, 61, 62, 234, 142, 60, 227, 220, 53, 61, 103, 192, 250, 60, 76, 26, 45, 61, 146, 191, 199, 62, 186, 90, 165, 61, 92, 44, 168, 60, 10, 177, 123, 61, 110, 21, 115, 61, 243, 205, 42, 61, 88, 61, 166, 60, 209, 4, 8, 60, 46, 255, 166, 60, 79, 170, 140, 60, 76, 188, 166, 60, 198, 255, 118, 60, 98, 143, 119, 60, 10, 253, 193, 62, 181, 33, 106, 61, 133, 139, 205, 61, 121, 214, 71, 61, 230, 169, 109, 61, 86, 89, 105, 61, 214, 135, 180, 60, 150, 88, 140, 60, 172, 254, 155, 60, 131, 56, 149, 60, 47, 118, 79, 60, 221, 124, 181, 60, 223, 101, 77, 60, 35, 111, 65, 62, 235, 83, 251, 60, 187, 64, 121, 61, 235, 103, 162, 61, 254, 43, 163, 61, 83, 99, 23, 62, 72, 186, 209, 60, 54, 10, 47, 61, 136, 45, 72, 61, 97, 171, 205, 60, 46, 45, 151, 60, 65, 67, 195, 60, 77, 254, 87, 60, 120, 197, 49, 63, 217, 184, 103, 62, 93, 1, 98, 61, 60, 174, 179, 61, 182, 213, 154, 61, 206, 12, 29, 61, 201, 200, 58, 60, 145, 96, 133, 60, 27, 175, 247, 60, 120, 27, 212, 59, 243, 44, 159, 60, 94, 205, 155, 60, 115, 249, 193, 60, 44, 164, 218, 62, 147, 191, 205, 61, 15, 14, 153, 61, 123, 99, 186, 61, 203, 170, 7, 62, 93, 214, 146, 61, 45, 1, 88, 61, 53, 96, 167, 60, 103, 71, 65, 61, 227, 114, 19, 61, 198, 43, 142, 60, 74, 76, 158, 60, 65, 204, 161, 60, 156, 192, 104, 63, 0, 136, 174, 62, 233, 31, 74, 62, 198, 217, 216, 61, 88, 30, 132, 62, 41, 160, 224, 61, 109, 174, 64, 61, 66, 103, 106, 61, 86, 233, 158, 61, 135, 101, 109, 61, 148, 34, 190, 60, 152, 128, 15, 61, 218, 131, 20, 61, 91, 57, 64, 62, 238, 134, 173, 60, 68, 207, 171, 60, 87, 213, 127, 60, 11, 48, 125, 60, 223, 187, 138, 60, 198, 208, 146, 60, 235, 19, 24, 60, 185, 104, 26, 60, 182, 154, 36, 60, 93, 67, 62, 60, 131, 155, 46, 60, 113, 98, 112, 60, 73, 229, 11, 62, 99, 195, 197, 60, 12, 162, 158, 60, 230, 96, 132, 60, 19, 31, 40, 60, 58, 21, 8, 60, 254, 252, 70, 60, 149, 205, 250, 59, 137, 142, 57, 60, 164, 191, 46, 60, 68, 43, 102, 60, 0, 231, 61, 60, 116, 186, 51, 60, 131, 64, 84, 61, 216, 142, 122, 60, 156, 34, 118, 60, 231, 129, 127, 60, 229, 50, 41, 60, 76, 215, 58, 60, 65, 207, 121, 60, 212, 60, 75, 60, 120, 46, 57, 60, 155, 248, 93, 60, 53, 135, 25, 60, 108, 255, 129, 60, 45, 31, 136, 60, 12, 71, 100, 63, 218, 207, 113, 61, 179, 235, 190, 61, 166, 244, 193, 60, 69, 188, 52, 61, 114, 233, 25, 61, 92, 169, 28, 61, 1, 215, 46, 61, 153, 118, 226, 60, 227, 139, 173, 60, 88, 214, 168, 60, 236, 205, 190, 60, 35, 99, 171, 60, 224, 76, 35, 62, 58, 8, 125, 61, 67, 59, 83, 61, 63, 179, 225, 60, 21, 29, 86, 61, 128, 190, 28, 61, 234, 114, 219, 60, 148, 43, 193, 60, 179, 64, 161, 60, 188, 240, 155, 60, 63, 158, 106, 60, 240, 107, 201, 60, 15, 165, 136, 60, 41, 200, 78, 62, 31, 219, 60, 61, 9, 84, 136, 61, 133, 218, 5, 61, 44, 205, 112, 61, 78, 79, 88, 61, 204, 196, 35, 61, 84, 236, 60, 61, 186, 215, 206, 60, 110, 254, 203, 60, 154, 225, 172, 60, 237, 162, 4, 61, 144, 109, 239, 60, 83, 39, 72, 64, 146, 26, 167, 62, 218, 1, 190, 61, 163, 3, 53, 61, 93, 63, 41, 62, 174, 195, 39, 61, 88, 33, 79, 61, 187, 208, 144, 61, 93, 44, 207, 60, 188, 129, 208, 60, 115, 219, 152, 60, 172, 59, 72, 60, 196, 255, 184, 60, 10, 119, 227, 62, 99, 93, 58, 61, 206, 159, 103, 61, 42, 50, 182, 60, 155, 114, 249, 60, 73, 29, 144, 60, 39, 138, 35, 61, 205, 226, 100, 60, 93, 148, 2, 61, 221, 241, 156, 60, 78, 199, 96, 60, 229, 191, 80, 60, 10, 135, 121, 60, 98, 57, 153, 62, 214, 90, 103, 61, 73, 64, 141, 61, 211, 98, 229, 60, 254, 162, 239, 60, 123, 78, 7, 61, 176, 48, 50, 61, 130, 173, 190, 60, 248, 229, 196, 60, 230, 211, 221, 60, 104, 104, 145, 60, 42, 153, 135, 60, 200, 39, 235, 60, 246, 156, 238, 62, 60, 11, 202, 61, 187, 30, 161, 60, 168, 61, 247, 60, 10, 149, 165, 60, 72, 228, 51, 60, 119, 110, 24, 60, 47, 130, 163, 60, 229, 176, 132, 59, 117, 31, 18, 60, 214, 178, 88, 60, 3, 149, 7, 60, 152, 70, 66, 60, 204, 161, 182, 61, 84, 83, 231, 60, 9, 239, 152, 60, 115, 229, 131, 60, 63, 247, 65, 60, 18, 17, 39, 60, 139, 53, 101, 60, 245, 147, 87, 60, 102, 106, 249, 59, 219, 249, 51, 60, 155, 73, 44, 60, 187, 99, 27, 60, 177, 119, 96, 60, 161, 128, 130, 61, 214, 206, 35, 61, 231, 59, 214, 60, 133, 91, 184, 60, 138, 242, 109, 60, 174, 57, 65, 60, 53, 190, 160, 60, 64, 127, 188, 60, 242, 124, 54, 60, 76, 165, 136, 60, 39, 173, 158, 60, 244, 217, 92, 60, 199, 216, 98, 60, 107, 21, 229, 62, 143, 79, 152, 61, 159, 251, 78, 60, 32, 39, 13, 61, 56, 24, 8, 61, 161, 137, 17, 61, 194, 162, 59, 60, 122, 202, 235, 60, 89, 68, 103, 60, 158, 10, 151, 60, 5, 35, 21, 60, 40, 174, 53, 60, 145, 230, 174, 60, 152, 182, 202, 61, 3, 1, 160, 60, 254, 29, 169, 60, 82, 192, 217, 60, 204, 136, 109, 61, 101, 176, 10, 61, 175, 55, 232, 60, 58, 207, 229, 60, 93, 92, 206, 60, 65, 184, 170, 60, 153, 157, 104, 60, 169, 199, 185, 60, 53, 167, 140, 60, 170, 224, 244, 61, 34, 108, 7, 61, 189, 2, 255, 60, 127, 106, 72, 61, 166, 234, 147, 61, 192, 225, 50, 61, 225, 171, 49, 61, 127, 150, 22, 61, 146, 220, 247, 60, 245, 80, 217, 60, 149, 70, 214, 60, 186, 230, 217, 60, 72, 66, 195, 60, 107, 41, 189, 60, 32, 127, 157, 59, 56, 186, 60, 60, 164, 218, 98, 60, 178, 145, 23, 59, 160, 239, 151, 59, 53, 4, 250, 59, 136, 189, 49, 59, 166, 221, 225, 59, 166, 59, 37, 58, 234, 61, 64, 59, 164, 255, 57, 59, 132, 144, 34, 60, 18, 209, 30, 62, 114, 57, 240, 60, 252, 115, 208, 60, 235, 67, 46, 61, 169, 106, 48, 60, 242, 174, 137, 60, 13, 49, 182, 60, 164, 190, 240, 58, 181, 17, 174, 60, 167, 203, 87, 59, 78, 98, 0, 60, 178, 15, 190, 59, 48, 161, 26, 60, 212, 226, 144, 61, 235, 230, 205, 61, 164, 217, 26, 61, 159, 202, 34, 61, 169, 164, 56, 61, 138, 186, 62, 60, 89, 82, 129, 59, 160, 205, 112, 59, 134, 134, 48, 61, 177, 35, 81, 60, 224, 214, 49, 60, 34, 26, 36, 60, 100, 54, 149, 60, 38, 184, 149, 62, 143, 112, 97, 61, 209, 137, 41, 60, 60, 182, 225, 60, 177, 41, 254, 60, 86, 136, 114, 60, 20, 118, 133, 60, 144, 139, 144, 60, 102, 3, 48, 60, 149, 81, 253, 59, 220, 151, 4, 60, 228, 5, 155, 59, 10, 212, 3, 60, 213, 228, 157, 61, 214, 88, 17, 61, 240, 237, 144, 60, 243, 33, 213, 60, 241, 77, 206, 60, 227, 91, 163, 60, 107, 147, 166, 60, 207, 181, 209, 60, 137, 86, 129, 60, 99, 127, 160, 60, 22, 249, 114, 60, 68, 99, 18, 60, 95, 96, 47, 60, 28, 251, 184, 61, 82, 248, 101, 61, 242, 102, 233, 60, 224, 218, 4, 61, 78, 101, 10, 61, 179, 39, 16, 61, 0, 188, 11, 61, 33, 170, 16, 61, 209, 221, 227, 60, 76, 23, 17, 61, 74, 80, 221, 60, 3, 82, 145, 60, 220, 242, 209, 60, 13, 27, 7, 61, 254, 121, 57, 60, 213, 129, 143, 60, 3, 113, 6, 60, 98, 166, 46, 60, 137, 188, 37, 60, 240, 41, 143, 59, 211, 28, 131, 59, 195, 147, 45, 59, 123, 9, 0, 59, 160, 95, 89, 60, 95, 66, 86, 60, 64, 142, 75, 60, 240, 52, 38, 62, 66, 221, 134, 60, 253, 243, 101, 60, 255, 176, 32, 60, 32, 135, 187, 60, 157, 204, 226, 60, 67, 40, 6, 61, 112, 0, 133, 60, 228, 241, 158, 59, 152, 230, 121, 59, 47, 23, 79, 60, 66, 114, 99, 60, 66, 235, 234, 59, 223, 9, 157, 61, 81, 65, 160, 60, 115, 242, 139, 60, 170, 20, 91, 60, 208, 168, 13, 61, 159, 199, 234, 60, 235, 175, 159, 60, 222, 67, 215, 60, 183, 30, 106, 60, 177, 230, 252, 59, 120, 244, 190, 60, 19, 77, 190, 60, 100, 237, 83, 60, 253, 50, 146, 62, 181, 46, 140, 60, 65, 157, 136, 60, 190, 176, 64, 61, 105, 106, 99, 60, 100, 134, 50, 60, 22, 148, 237, 59, 28, 2, 105, 60, 115, 234, 234, 59, 199, 69, 207, 59, 72, 26, 205, 59, 230, 142, 3, 60, 18, 143, 219, 59, 176, 38, 122, 61, 49, 221, 142, 60, 190, 237, 158, 60, 201, 40, 104, 60, 150, 12, 134, 60, 55, 52, 117, 60, 199, 219, 71, 60, 49, 201, 116, 60, 119, 125, 80, 60, 65, 227, 114, 60, 3, 95, 80, 60, 76, 26, 70, 60, 231, 236, 91, 60, 24, 100, 161, 61, 231, 39, 5, 61, 193, 122, 42, 61, 176, 213, 237, 60, 219, 120, 233, 60, 170, 171, 247, 60, 191, 53, 213, 60, 31, 227, 227, 60, 110, 245, 216, 60, 27, 153, 198, 60, 45, 116, 191, 60, 235, 31, 157, 60, 172, 216, 221, 60, 165, 196, 157, 61, 129, 97, 159, 60, 208, 58, 61, 60, 107, 44, 74, 60, 123, 36, 3, 60, 62, 150, 4, 60, 236, 30, 220, 59, 142, 127, 249, 59, 131, 227, 20, 60, 3, 115, 243, 59, 180, 119, 74, 60, 230, 133, 15, 60, 124, 217, 210, 59, 6, 118, 151, 61, 209, 173, 199, 60, 52, 162, 120, 60, 6, 1, 122, 60, 118, 253, 65, 60, 57, 57, 132, 60, 208, 253, 52, 60, 36, 121, 90, 60, 234, 225, 13, 60, 118, 101, 131, 60, 203, 171, 121, 60, 3, 97, 59, 60, 234, 155, 47, 60, 66, 119, 161, 61, 46, 251, 19, 61, 247, 42, 233, 60, 81, 206, 6, 61, 221, 75, 220, 60, 153, 34, 216, 60, 11, 133, 157, 60, 151, 110, 229, 60, 142, 109, 154, 60, 236, 217, 227, 60, 40, 154, 205, 60, 233, 228, 211, 60, 158, 51, 183, 60, 198, 212, 90, 61, 50, 194, 121, 60, 126, 57, 106, 60, 166, 66, 30, 60, 43, 53, 91, 60, 179, 147, 53, 60, 237, 153, 59, 60, 157, 37, 240, 59, 149, 149, 10, 60, 54, 182, 28, 60, 92, 1, 11, 60, 170, 99, 24, 60, 155, 45, 230, 59, 75, 218, 240, 60, 209, 154, 149, 60, 213, 55, 62, 60, 92, 88, 155, 60, 42, 165, 165, 60, 46, 94, 113, 60, 53, 63, 86, 60, 60, 78, 133, 60, 210, 35, 141, 60, 231, 124, 82, 60, 208, 137, 97, 60, 34, 77, 76, 60, 206, 177, 104, 60, 96, 52, 84, 61, 182, 136, 40, 61, 191, 102, 192, 60, 153, 122, 2, 61, 107, 137, 6, 61, 20, 39, 233, 60, 159, 108, 188, 60, 143, 190, 226, 60, 236, 167, 22, 61, 75, 234, 246, 60, 101, 10, 242, 60, 142, 33, 202, 60, 179, 169, 224, 60, 152, 64, 141, 63, 28, 145, 158, 60, 237, 233, 102, 60, 184, 128, 2, 61, 154, 234, 107, 60, 92, 164, 29, 60, 49, 67, 27, 60, 212, 84, 141, 60, 4, 146, 218, 60, 198, 13, 166, 60, 82, 42, 226, 59, 97, 125, 60, 60, 223, 190, 7, 60, 232, 164, 27, 61, 104, 90, 204, 60, 211, 28, 118, 60, 16, 184, 53, 60, 94, 128, 135, 60, 178, 84, 87, 60, 176, 160, 118, 60, 180, 122, 75, 60, 185, 246, 95, 60, 252, 159, 137, 60, 112, 191, 58, 60, 202, 204, 96, 60, 140, 176, 110, 60, 47, 177, 143, 61, 15, 211, 63, 61, 196, 16, 239, 60, 251, 89, 195, 60, 213, 202, 213, 60, 27, 154, 184, 60, 26, 89, 212, 60, 154, 149, 211, 60, 175, 67, 215, 60, 69, 94, 254, 60, 166, 200, 190, 60, 167, 170, 205, 60, 106, 225, 234, 60, 176, 149, 72, 62, 132, 216, 26, 61, 67, 185, 47, 61, 61, 143, 12, 61, 36, 23, 132, 60, 194, 146, 131, 60, 106, 53, 106, 60, 119, 62, 90, 60, 167, 139, 81, 60, 96, 253, 56, 60, 205, 5, 62, 60, 117, 47, 52, 60, 189, 215, 17, 60, 163, 165, 64, 62, 212, 84, 57, 61, 58, 71, 70, 61, 41, 110, 249, 60, 240, 123, 20, 61, 55, 186, 8, 61, 182, 90, 222, 60, 231, 161, 216, 60, 163, 141, 156, 60, 221, 164, 165, 60, 227, 30, 226, 60, 4, 112, 160, 60, 31, 193, 78, 60, 35, 160, 60, 62, 196, 24, 53, 61, 149, 216, 50, 61, 250, 161, 43, 61, 188, 162, 255, 60, 107, 68, 3, 61, 70, 177, 24, 61, 9, 57, 22, 61, 134, 167, 209, 60, 128, 255, 254, 60, 109, 113, 8, 61, 247, 55, 210, 60, 65, 184, 171, 60, 220, 249, 187, 61, 67, 184, 120, 60, 214, 87, 93, 60, 214, 24, 44, 60, 22, 101, 33, 60, 91, 26, 34, 60, 163, 80, 5, 60, 11, 94, 6, 60, 244, 229, 17, 60, 136, 243, 247, 59, 245, 22, 255, 59, 84, 224, 6, 60, 125, 107, 255, 59, 81, 119, 32, 61, 59, 171, 135, 60, 183, 75, 101, 60, 116, 4, 119, 60, 226, 12, 95, 60, 179, 161, 105, 60, 155, 18, 120, 60, 2, 36, 125, 60, 26, 171, 108, 60, 99, 103, 98, 60, 52, 11, 82, 60, 168, 240, 92, 60, 92, 172, 92, 60, 163, 253, 156, 61, 35, 74, 10, 61, 49, 52, 4, 61, 101, 95, 11, 61, 52, 134, 247, 60, 251, 74, 233, 60, 54, 21, 231, 60, 227, 246, 9, 61, 139, 142, 241, 60, 121, 21, 228, 60, 6, 15, 227, 60, 237, 157, 240, 60, 123, 240, 219, 60, 71, 158, 158, 61, 223, 185, 20, 60, 193, 201, 20, 60, 118, 25, 19, 60, 142, 61, 249, 59, 219, 4, 208, 59, 147, 72, 219, 59, 104, 106, 237, 59, 84, 57, 1, 60, 43, 1, 214, 59, 52, 136, 226, 59, 142, 84, 242, 59, 169, 124, 197, 59, 120, 49, 7, 61, 69, 147, 129, 60, 201, 88, 120, 60, 186, 129, 108, 60, 154, 149, 112, 60, 2, 113, 104, 60, 235, 137, 61, 60, 204, 162, 96, 60, 63, 1, 97, 60, 97, 18, 82, 60, 54, 148, 92, 60, 181, 237, 64, 60, 226, 151, 49, 60, 99, 85, 123, 61, 188, 12, 253, 60, 192, 45, 8, 61, 199, 253, 255, 60, 29, 198, 234, 60, 150, 165, 222, 60, 246, 171, 193, 60, 59, 101, 222, 60, 206, 28, 219, 60, 247, 148, 196, 60, 82, 245, 216, 60, 212, 255, 194, 60, 128, 168, 179, 60, 227, 219, 216, 61, 164, 176, 95, 60, 224, 50, 136, 60, 20, 41, 124, 60, 59, 78, 57, 60, 197, 254, 20, 60, 100, 103, 43, 60, 5, 76, 36, 60, 135, 132, 62, 60, 146, 219, 9, 60, 197, 251, 45, 60, 101, 38, 14, 60, 62, 137, 240, 59, 54, 84, 91, 61, 52, 115, 204, 60, 22, 113, 209, 60, 61, 248, 221, 60, 92, 49, 170, 60, 231, 229, 141, 60, 165, 46, 148, 60, 175, 239, 163, 60, 78, 33, 136, 60, 230, 132, 93, 60, 179, 148, 71, 60, 8, 94, 70, 60, 39, 66, 102, 60, 105, 76, 247, 61, 13, 151, 64, 61, 127, 74, 27, 61, 194, 39, 1, 61, 93, 218, 222, 60, 167, 86, 4, 61, 22, 224, 12, 61, 161, 233, 226, 60, 127, 223, 222, 60, 131, 65, 212, 60, 6, 191, 229, 60, 25, 14, 225, 60, 6, 190, 194, 60, 43, 167, 36, 62, 101, 221, 210, 60, 122, 34, 162, 60, 167, 57, 214, 60, 137, 181, 28, 61, 197, 227, 142, 60, 217, 177, 135, 60, 224, 83, 139, 60, 162, 59, 75, 60, 67, 94, 234, 59, 239, 83, 0, 60, 134, 22, 216, 59, 246, 123, 241, 59, 242, 139, 75, 61, 24, 10, 0, 61, 189, 142, 221, 60, 18, 122, 16, 61, 140, 84, 8, 61, 55, 180, 146, 60, 41, 135, 174, 60, 252, 176, 186, 60, 170, 96, 152, 60, 67, 205, 61, 60, 155, 232, 52, 60, 145, 21, 53, 60, 17, 126, 64, 60, 158, 60, 151, 61, 132, 169, 62, 61, 126, 106, 30, 61, 162, 251, 30, 61, 254, 242, 220, 60, 110, 98, 248, 60, 122, 49, 35, 61, 235, 48, 35, 61, 174, 81, 24, 61, 173, 25, 163, 60, 252, 48, 172, 60, 8, 62, 166, 60, 159, 3, 212, 60, 159, 57, 219, 61, 89, 232, 167, 60, 254, 19, 19, 60, 246, 3, 16, 60, 177, 139, 37, 60, 87, 16, 12, 60, 74, 157, 249, 59, 198, 226, 226, 59, 98, 80, 248, 59, 211, 7, 26, 60, 101, 195, 13, 60, 19, 226, 5, 60, 200, 253, 225, 59, 162, 27, 3, 61, 168, 213, 131, 60, 237, 18, 117, 60, 245, 139, 115, 60, 241, 82, 109, 60, 64, 189, 96, 60, 83, 238, 62, 60, 16, 212, 126, 60, 26, 193, 105, 60, 8, 91, 59, 60, 104, 237, 88, 60, 63, 233, 53, 60, 70, 233, 108, 60, 131, 178, 149, 61, 154, 141, 17, 61, 220, 60, 4, 61, 5, 11, 10, 61, 37, 77, 239, 60, 62, 130, 231, 60, 210, 209, 198, 60, 65, 67, 204, 60, 237, 212, 210, 60, 195, 233, 175, 60, 30, 114, 185, 60, 211, 42, 243, 60, 70, 69, 231, 60, 148, 174, 208, 61, 8, 181, 127, 60, 39, 196, 98, 60, 187, 224, 47, 60, 162, 172, 145, 60, 28, 22, 20, 60, 101, 165, 26, 60, 221, 168, 14, 60, 108, 211, 30, 60, 41, 186, 241, 59, 227, 113, 213, 59, 210, 226, 232, 59, 218, 207, 18, 60, 108, 120, 47, 61, 147, 77, 158, 60, 247, 153, 111, 60, 86, 213, 100, 60, 211, 85, 144, 60, 25, 138, 127, 60, 254, 71, 128, 60, 192, 154, 90, 60, 28, 119, 96, 60, 154, 21, 109, 60, 150, 10, 42, 60, 143, 126, 65, 60, 97, 90, 66, 60, 212, 128, 171, 61, 62, 26, 42, 61, 169, 57, 0, 61, 42, 210, 253, 60, 75, 138, 13, 61, 36, 38, 236, 60, 210, 0, 216, 60, 13, 0, 233, 60, 103, 134, 239, 60, 172, 183, 232, 60, 68, 28, 216, 60, 202, 188, 185, 60, 31, 200, 230, 60, 48, 9, 146, 62, 253, 219, 26, 61, 26, 5, 142, 60, 3, 114, 85, 60, 65, 33, 57, 60, 179, 127, 77, 60, 72, 204, 76, 60, 70, 113, 100, 60, 65, 143, 49, 60, 89, 37, 13, 60, 61, 151, 16, 60, 169, 180, 252, 59, 174, 32, 14, 60, 202, 87, 71, 61, 89, 241, 0, 61, 85, 78, 201, 60, 15, 5, 175, 60, 15, 153, 159, 60, 57, 69, 221, 60, 83, 79, 143, 60, 56, 95, 163, 60, 44, 239, 98, 60, 239, 213, 102, 60, 30, 82, 97, 60, 102, 18, 141, 60, 222, 151, 144, 60, 95, 115, 126, 61, 114, 18, 59, 61, 128, 236, 15, 61, 231, 133, 35, 61, 0, 34, 9, 61, 145, 48, 7, 61, 138, 255, 234, 60, 99, 124, 4, 61, 78, 62, 176, 60, 237, 218, 210, 60, 73, 126, 194, 60, 242, 5, 14, 61, 118, 162, 13, 61, 16, 214, 59, 62, 160, 178, 71, 60, 45, 60, 19, 60, 26, 18, 27, 60, 233, 245, 40, 60, 95, 52, 22, 60, 247, 151, 16, 60, 188, 35, 21, 60, 45, 70, 14, 60, 103, 194, 248, 59, 234, 192, 242, 59, 27, 174, 229, 59, 244, 227, 230, 59, 91, 72, 70, 61, 66, 26, 153, 60, 155, 235, 158, 60, 58, 189, 142, 60, 22, 206, 132, 60, 141, 172, 130, 60, 160, 90, 96, 60, 81, 110, 91, 60, 14, 158, 95, 60, 231, 112, 101, 60, 6, 148, 81, 60, 171, 247, 61, 60, 61, 124, 86, 60, 156, 174, 151, 61, 224, 3, 38, 61, 93, 141, 45, 61, 115, 132, 254, 60, 231, 146, 251, 60, 115, 178, 233, 60, 245, 91, 244, 60, 21, 0, 249, 60, 255, 114, 253, 60, 199, 79, 208, 60, 82, 56, 227, 60, 223, 172, 216, 60, 74, 229, 207, 60, 171, 12, 53, 62, 99, 112, 106, 60, 195, 12, 62, 60, 253, 165, 25, 60, 57, 249, 12, 60, 203, 202, 3, 60, 231, 150, 5, 60, 147, 104, 222, 59, 171, 85, 231, 59, 24, 243, 213, 59, 40, 211, 202, 59, 85, 49, 217, 59, 129, 142, 3, 60, 3, 216, 18, 61, 18, 157, 144, 60, 244, 197, 140, 60, 6, 65, 98, 60, 64, 157, 77, 60, 245, 170, 63, 60, 7, 97, 91, 60, 135, 80, 114, 60, 232, 241, 107, 60, 126, 80, 65, 60, 232, 35, 104, 60, 17, 200, 82, 60, 138, 224, 73, 60, 146, 226, 133, 61, 95, 110, 9, 61, 180, 210, 246, 60, 207, 95, 225, 60, 187, 39, 223, 60, 86, 207, 232, 60, 103, 68, 246, 60, 86, 97, 222, 60, 204, 162, 198, 60, 211, 11, 184, 60, 60, 83, 203, 60, 22, 62, 215, 60, 11, 245, 212, 60, 42, 108, 56, 62, 240, 146, 22, 60, 126, 10, 6, 60, 211, 135, 3, 60, 179, 195, 1, 60, 240, 128, 1, 60, 4, 25, 241, 59, 152, 243, 243, 59, 113, 97, 217, 59, 199, 245, 198, 59, 89, 204, 218, 59, 107, 95, 203, 59, 177, 45, 200, 59, 104, 74, 36, 61, 150, 38, 162, 60, 202, 56, 142, 60, 184, 129, 124, 60, 67, 52, 113, 60, 109, 137, 135, 60, 164, 184, 132, 60, 167, 71, 94, 60, 3, 46, 97, 60, 231, 74, 84, 60, 170, 10, 55, 60, 226, 217, 77, 60, 29, 49, 63, 60, 241, 157, 111, 61, 90, 65, 0, 61, 220, 141, 4, 61, 37, 20, 248, 60, 230, 75, 225, 60, 86, 199, 240, 60, 8, 94, 233, 60, 52, 8, 226, 60, 62, 141, 199, 60, 24, 6, 197, 60, 121, 189, 182, 60, 230, 123, 166, 60, 211, 46, 162, 60, 197, 24, 57, 62, 21, 105, 54, 60, 178, 170, 17, 60, 62, 126, 16, 60, 179, 234, 228, 59, 206, 121, 0, 60, 26, 143, 255, 59, 139, 28, 242, 59, 61, 156, 254, 59, 93, 111, 222, 59, 39, 239, 216, 59, 106, 109, 215, 59, 62, 204, 208, 59, 21, 153, 23, 61, 117, 190, 87, 60, 202, 253, 107, 60, 73, 237, 105, 60, 154, 203, 81, 60, 239, 25, 65, 60, 87, 216, 107, 60, 233, 249, 121, 60, 21, 160, 93, 60, 89, 215, 97, 60, 234, 158, 80, 60, 185, 241, 70, 60, 95, 252, 61, 60, 187, 139, 96, 61, 188, 233, 227, 60, 117, 30, 196, 60, 111, 117, 205, 60, 132, 229, 230, 60, 248, 218, 227, 60, 182, 246, 239, 60, 185, 249, 232, 60, 151, 48, 216, 60, 225, 149, 214, 60, 64, 178, 185, 60, 37, 235, 191, 60, 222, 187, 215, 60, 180, 132, 215, 61, 150, 22, 251, 60, 144, 218, 202, 60, 109, 0, 118, 60, 8, 129, 139, 60, 202, 150, 40, 60, 138, 126, 27, 60, 215, 172, 182, 59, 82, 170, 13, 60, 124, 128, 46, 60, 8, 228, 32, 60, 56, 6, 4, 60, 145, 62, 230, 59, 143, 205, 140, 61, 61, 222, 55, 61, 17, 239, 6, 61, 89, 72, 216, 60, 96, 159, 194, 60, 157, 170, 132, 60, 36, 130, 131, 60, 101, 230, 24, 60, 253, 61, 155, 60, 99, 162, 123, 60, 144, 62, 121, 60, 63, 146, 141, 60, 214, 250, 87, 60, 1, 73, 34, 62, 182, 210, 145, 61, 137, 44, 134, 61, 211, 204, 26, 61, 41, 240, 255, 60, 232, 48, 28, 61, 152, 109, 250, 60, 248, 156, 5, 61, 99, 20, 20, 61, 11, 235, 218, 60, 182, 238, 3, 61, 243, 102, 213, 60, 56, 12, 144, 60, 190, 129, 143, 61, 27, 120, 80, 60, 98, 204, 7, 60, 221, 132, 93, 60, 41, 114, 106, 60, 213, 11, 9, 60, 10, 204, 35, 60, 153, 48, 7, 60, 22, 78, 16, 60, 123, 135, 240, 59, 154, 125, 31, 60, 209, 135, 199, 59, 116, 160, 217, 59, 0, 253, 248, 60, 177, 118, 110, 60, 240, 128, 130, 60, 143, 55, 108, 60, 116, 90, 52, 60, 93, 152, 132, 60, 105, 42, 101, 60, 162, 41, 55, 60, 172, 27, 109, 60, 69, 233, 68, 60, 11, 24, 130, 60, 202, 171, 92, 60, 61, 131, 121, 60, 78, 95, 90, 61, 88, 127, 228, 60, 51, 187, 188, 60, 235, 120, 237, 60, 202, 74, 173, 60, 237, 77, 196, 60, 242, 155, 174, 60, 181, 69, 152, 60, 99, 124, 225, 60, 212, 11, 170, 60, 51, 146, 238, 60, 80, 174, 170, 60, 182, 152, 195, 60, 175, 21, 175, 61, 167, 159, 206, 60, 245, 1, 30, 60, 157, 200, 15, 60, 14, 156, 138, 60, 62, 43, 62, 60, 179, 227, 229, 59, 202, 167, 217, 59, 92, 65, 228, 59, 59, 198, 4, 60, 38, 193, 206, 59, 161, 54, 219, 59, 89, 183, 200, 59, 192, 239, 3, 61, 96, 131, 96, 60, 47, 159, 63, 60, 109, 48, 145, 60, 156, 161, 114, 60, 34, 112, 122, 60, 160, 21, 48, 60, 161, 152, 50, 60, 195, 76, 16, 60, 137, 17, 46, 60, 97, 29, 96, 60, 6, 152, 103, 60, 142, 223, 61, 60, 104, 251, 103, 61, 92, 200, 226, 60, 197, 4, 3, 61, 29, 134, 5, 61, 105, 98, 22, 61, 127, 27, 48, 61, 75, 170, 210, 60, 7, 78, 177, 60, 168, 227, 192, 60, 44, 8, 195, 60, 215, 255, 199, 60, 70, 131, 225, 60, 198, 119, 226, 60, 32, 110, 159, 61, 4, 71, 107, 60, 230, 200, 250, 59, 144, 105, 95, 60, 37, 83, 120, 60, 78, 134, 245, 59, 244, 86, 22, 60, 212, 129, 2, 60, 126, 54, 240, 59, 218, 26, 252, 59, 189, 178, 6, 60, 59, 31, 194, 59, 227, 198, 248, 59, 175, 39, 8, 61, 208, 159, 150, 60, 28, 238, 115, 60, 84, 154, 123, 60, 12, 213, 48, 60, 247, 12, 127, 60, 207, 59, 103, 60, 85, 80, 132, 60, 93, 209, 144, 60, 208, 57, 76, 60, 81, 27, 55, 60, 236, 226, 64, 60, 239, 170, 87, 60, 60, 4, 115, 61, 231, 155, 7, 61, 213, 197, 234, 60, 97, 151, 254, 60, 8, 213, 184, 60, 100, 199, 229, 60, 164, 253, 253, 60, 207, 59, 181, 60, 218, 82, 194, 60, 214, 135, 198, 60, 4, 71, 201, 60, 216, 216, 201, 60, 49, 249, 190, 60, 71, 83, 188, 62, 189, 223, 11, 61, 154, 141, 30, 61, 80, 226, 153, 60, 46, 134, 67, 60, 205, 209, 74, 60, 67, 230, 245, 59, 235, 205, 61, 60, 221, 227, 49, 60, 177, 150, 19, 60, 0, 14, 23, 60, 232, 126, 16, 60, 72, 221, 169, 59, 145, 6, 51, 61, 145, 211, 204, 60, 241, 46, 153, 60, 65, 71, 240, 59, 135, 109, 78, 60, 191, 38, 114, 60, 133, 52, 100, 60, 157, 187, 138, 60, 21, 214, 123, 60, 3, 7, 135, 60, 232, 138, 99, 60, 220, 78, 128, 60, 54, 43, 54, 60, 211, 242, 177, 61, 238, 162, 66, 61, 140, 61, 45, 61, 184, 167, 176, 60, 158, 158, 157, 60, 242, 10, 194, 60, 89, 23, 253, 60, 41, 205, 26, 61, 187, 58, 7, 61, 10, 24, 193, 60, 56, 74, 170, 60, 0, 31, 248, 60, 52, 40, 183, 60, 235, 77, 157, 61, 178, 16, 213, 60, 60, 14, 6, 61, 235, 11, 54, 61, 168, 94, 123, 60, 168, 103, 147, 60, 98, 234, 35, 60, 186, 107, 108, 60, 182, 65, 123, 60, 222, 70, 125, 60, 81, 170, 255, 59, 246, 1, 127, 60, 231, 133, 69, 60, 19, 51, 105, 61, 163, 13, 25, 61, 124, 10, 15, 61, 214, 104, 29, 61, 138, 204, 245, 60, 116, 119, 221, 60, 228, 230, 158, 60, 23, 125, 146, 60, 105, 156, 191, 60, 165, 81, 173, 60, 217, 54, 151, 60, 164, 191, 245, 60, 17, 118, 202, 60, 120, 231, 129, 61, 227, 232, 63, 61, 73, 168, 22, 61, 49, 105, 54, 61, 246, 127, 42, 61, 114, 19, 61, 61, 107, 46, 1, 61, 210, 29, 188, 60, 169, 155, 31, 61, 125, 241, 75, 61, 170, 3, 29, 61, 206, 180, 49, 61, 248, 49, 216, 60, 128, 201, 232, 62, 132, 254, 137, 60, 202, 133, 206, 60, 143, 230, 47, 61, 236, 185, 81, 60, 24, 178, 40, 60, 86, 11, 174, 60, 177, 136, 61, 60, 113, 208, 11, 60, 25, 100, 54, 60, 193, 134, 56, 60, 69, 252, 43, 60, 146, 175, 56, 60, 125, 40, 28, 61, 32, 227, 137, 60, 101, 132, 127, 60, 130, 15, 93, 60, 150, 169, 134, 60, 116, 154, 85, 60, 254, 180, 146, 60, 147, 3, 112, 60, 242, 181, 48, 60, 109, 38, 41, 60, 110, 147, 147, 60, 46, 112, 128, 60, 106, 97, 140, 60, 192, 112, 154, 61, 219, 170, 1, 61, 233, 100, 255, 60, 205, 133, 210, 60, 161, 169, 9, 61, 94, 229, 239, 60, 57, 98, 14, 61, 224, 115, 232, 60, 87, 241, 180, 60, 178, 170, 207, 60, 91, 220, 19, 61, 104, 149, 214, 60, 106, 49, 234, 60, 169, 39, 241, 61, 101, 225, 26, 60, 106, 228, 76, 60, 26, 16, 104, 60, 2, 207, 10, 60, 42, 110, 64, 60, 24, 238, 32, 60, 178, 130, 6, 60, 20, 81, 44, 60, 8, 42, 216, 59, 193, 138, 1, 60, 250, 131, 250, 59, 82, 2, 187, 59, 233, 228, 44, 61, 34, 218, 136, 60, 69, 211, 50, 60, 249, 142, 141, 60, 209, 233, 32, 60, 162, 35, 120, 60, 0, 26, 117, 60, 133, 224, 92, 60, 171, 7, 97, 60, 240, 88, 113, 60, 65, 158, 101, 60, 111, 159, 33, 60, 234, 54, 35, 60, 114, 195, 83, 61, 191, 81, 13, 61, 150, 238, 219, 60, 31, 213, 225, 60, 56, 218, 180, 60, 78, 62, 235, 60, 81, 96, 249, 60, 63, 111, 214, 60, 163, 69, 215, 60, 18, 149, 210, 60, 152, 136, 177, 60, 36, 43, 222, 60, 138, 52, 253, 60, 174, 48, 116, 62, 115, 37, 145, 61, 42, 250, 51, 61, 82, 69, 230, 60, 185, 122, 149, 60, 11, 192, 58, 60, 12, 188, 3, 60, 233, 198, 194, 59, 119, 224, 12, 60, 183, 69, 244, 59, 6, 162, 210, 59, 158, 48, 203, 59, 179, 128, 251, 59, 45, 99, 46, 62, 153, 164, 220, 61, 65, 113, 134, 61, 164, 214, 227, 60, 114, 23, 170, 60, 143, 123, 211, 60, 56, 240, 142, 60, 22, 225, 164, 60, 166, 212, 144, 60, 14, 134, 59, 60, 130, 201, 84, 60, 44, 237, 128, 60, 247, 166, 244, 59, 102, 23, 103, 62, 194, 89, 195, 61, 224, 197, 138, 61, 242, 155, 78, 61, 131, 80, 157, 61, 107, 156, 59, 61, 208, 73, 190, 60, 41, 157, 9, 61, 135, 207, 5, 61, 113, 88, 247, 60, 231, 162, 8, 61, 107, 249, 252, 60, 252, 37, 211, 60, 222, 143, 4, 63, 212, 164, 227, 60, 231, 201, 190, 60, 198, 255, 105, 60, 168, 216, 77, 60, 154, 153, 235, 59, 102, 164, 18, 60, 158, 221, 16, 60, 182, 1, 226, 59, 79, 52, 11, 60, 108, 10, 239, 59, 73, 22, 232, 59, 23, 61, 4, 60, 182, 139, 56, 62, 216, 155, 242, 61, 161, 65, 158, 61, 83, 43, 79, 61, 28, 194, 199, 60, 89, 21, 103, 60, 89, 158, 138, 60, 113, 15, 163, 60, 191, 93, 173, 60, 245, 191, 171, 60, 119, 93, 146, 60, 204, 67, 146, 60, 132, 5, 129, 60, 161, 165, 195, 62, 143, 86, 50, 62, 246, 62, 166, 61, 78, 154, 78, 61, 187, 252, 73, 61, 184, 123, 61, 61, 131, 85, 109, 61, 211, 214, 116, 61, 116, 46, 72, 61, 247, 23, 216, 60, 138, 241, 0, 61, 74, 200, 2, 61, 31, 52, 3, 61, 5, 96, 116, 62, 102, 177, 54, 61, 216, 161, 20, 61, 42, 57, 166, 60, 239, 211, 161, 60, 57, 118, 65, 60, 10, 25, 137, 60, 3, 184, 178, 60, 204, 62, 105, 60, 80, 141, 85, 60, 235, 6, 67, 60, 97, 3, 25, 60, 47, 18, 62, 60, 67, 224, 11, 63, 208, 68, 194, 62, 42, 19, 29, 62, 59, 120, 194, 61, 145, 0, 121, 61, 221, 72, 28, 61, 76, 222, 71, 61, 62, 52, 71, 61, 66, 187, 7, 61, 91, 231, 222, 60, 135, 7, 225, 60, 8, 182, 192, 60, 165, 197, 83, 60, 248, 97, 142, 63, 76, 220, 1, 63, 193, 236, 22, 62, 22, 203, 252, 61, 116, 131, 244, 61, 156, 57, 203, 61, 76, 102, 199, 61, 157, 41, 159, 61, 197, 203, 89, 61, 208, 21, 65, 61, 52, 169, 64, 61, 57, 237, 7, 61, 45, 174, 53, 61, 12, 69, 38, 62, 84, 144, 217, 61, 26, 60, 112, 61, 177, 242, 136, 60, 1, 204, 56, 60, 230, 245, 67, 60, 174, 56, 84, 60, 52, 37, 3, 60, 205, 23, 64, 60, 60, 133, 244, 59, 82, 50, 77, 60, 187, 150, 39, 60, 160, 173, 242, 59, 197, 119, 154, 62, 190, 188, 5, 62, 252, 71, 138, 61, 204, 116, 78, 61, 6, 36, 172, 60, 230, 80, 173, 60, 58, 102, 173, 60, 235, 175, 190, 60, 91, 184, 152, 60, 74, 150, 114, 60, 224, 254, 166, 60, 226, 198, 162, 60, 134, 157, 90, 60, 62, 174, 202, 62, 216, 83, 54, 62, 119, 1, 164, 61, 177, 77, 85, 61, 17, 82, 61, 61, 78, 16, 72, 61, 45, 203, 80, 61, 234, 136, 92, 61, 184, 93, 12, 61, 10, 219, 212, 60, 52, 195, 3, 61, 33, 61, 235, 60, 22, 107, 155, 60, 187, 17, 1, 62, 115, 245, 193, 60, 230, 20, 193, 60, 61, 183, 145, 60, 171, 218, 104, 60, 236, 214, 137, 60, 135, 187, 98, 60, 65, 152, 31, 60, 182, 160, 13, 60, 95, 64, 9, 60, 232, 60, 67, 60, 250, 164, 0, 60, 244, 152, 212, 59, 39, 193, 236, 60, 215, 246, 123, 60, 91, 236, 20, 60, 115, 54, 108, 60, 80, 182, 141, 60, 158, 164, 123, 60, 228, 164, 99, 60, 127, 250, 84, 60, 163, 150, 114, 60, 112, 148, 139, 60, 90, 249, 90, 60, 99, 24, 85, 60, 131, 130, 50, 60, 155, 118, 128, 61, 13, 231, 51, 61, 185, 152, 10, 61, 214, 19, 17, 61, 205, 98, 10, 61, 133, 122, 217, 60, 135, 78, 7, 61, 144, 82, 255, 60, 98, 77, 2, 61, 245, 56, 190, 60, 70, 87, 166, 60, 94, 108, 2, 61, 73, 5, 201, 60, 230, 191, 27, 62, 185, 174, 140, 60, 80, 215, 88, 60, 117, 6, 33, 60, 53, 225, 29, 60, 1, 221, 79, 60, 28, 136, 16, 60, 64, 14, 250, 59, 82, 142, 3, 60, 97, 99, 239, 59, 254, 21, 217, 59, 174, 115, 206, 59, 11, 180, 230, 59, 139, 58, 53, 61, 233, 231, 180, 60, 192, 125, 103, 60, 121, 151, 141, 60, 245, 178, 127, 60, 140, 170, 131, 60, 103, 97, 95, 60, 171, 90, 96, 60, 147, 67, 103, 60, 188, 187, 90, 60, 77, 188, 79, 60, 84, 2, 139, 60, 152, 177, 103, 60, 110, 210, 205, 61, 73, 207, 27, 61, 16, 86, 206, 60, 149, 193, 215, 60, 181, 224, 176, 60, 10, 57, 250, 60, 73, 140, 218, 60, 86, 41, 255, 60, 79, 107, 220, 60, 28, 38, 241, 60, 137, 255, 193, 60, 47, 89, 206, 60, 23, 215, 203, 60, 195, 197, 192, 61, 92, 163, 54, 60, 59, 220, 232, 59, 232, 206, 214, 59, 129, 102, 252, 59, 149, 78, 9, 60, 78, 55, 227, 59, 139, 180, 221, 59, 109, 212, 246, 59, 36, 157, 235, 59, 135, 159, 162, 59, 53, 140, 203, 59, 106, 82, 234, 59, 34, 202, 6, 61, 30, 172, 107, 60, 141, 79, 100, 60, 187, 58, 48, 60, 180, 2, 41, 60, 220, 9, 126, 60, 214, 89, 136, 60, 200, 136, 101, 60, 123, 233, 89, 60, 228, 118, 53, 60, 219, 190, 66, 60, 161, 180, 84, 60, 125, 147, 60, 60, 245, 29, 129, 61, 39, 231, 229, 60, 1, 12, 210, 60, 158, 208, 197, 60, 167, 9, 186, 60, 231, 65, 225, 60, 213, 50, 218, 60, 179, 83, 231, 60, 103, 250, 233, 60, 110, 144, 212, 60, 25, 161, 216, 60, 19, 98, 170, 60, 178, 221, 173, 60, 41, 115, 253, 61, 139, 134, 38, 60, 48, 253, 241, 59, 228, 230, 43, 60, 165, 226, 58, 60, 68, 162, 1, 60, 70, 28, 213, 59, 225, 196, 229, 59, 43, 171, 221, 59, 61, 192, 8, 60, 36, 141, 234, 59, 199, 136, 22, 60, 249, 13, 251, 59, 193, 192, 135, 61, 107, 82, 220, 60, 45, 9, 165, 60, 223, 172, 150, 60, 118, 138, 91, 60, 129, 161, 97, 60, 56, 209, 36, 60, 16, 170, 101, 60, 247, 84, 50, 60, 171, 156, 110, 60, 65, 80, 105, 60, 155, 5, 67, 60, 172, 203, 101, 60, 222, 90, 148, 61, 90, 198, 49, 61, 111, 156, 219, 60, 255, 33, 216, 60, 212, 224, 213, 60, 65, 28, 214, 60, 70, 3, 198, 60, 240, 233, 160, 60, 91, 212, 152, 60, 147, 100, 246, 60, 9, 215, 217, 60, 113, 40, 216, 60, 50, 189, 196, 60, 145, 164, 165, 61, 252, 139, 136, 60, 245, 238, 36, 60, 163, 119, 104, 60, 255, 158, 77, 60, 215, 231, 189, 59, 126, 43, 243, 59, 128, 166, 21, 60, 25, 128, 3, 60, 70, 236, 216, 59, 153, 123, 209, 59, 139, 56, 181, 59, 89, 95, 15, 60, 204, 16, 0, 61, 48, 149, 137, 60, 2, 244, 153, 60, 69, 89, 127, 60, 48, 67, 74, 60, 4, 213, 62, 60, 197, 164, 80, 60, 241, 220, 101, 60, 135, 100, 77, 60, 35, 136, 4, 60, 181, 206, 55, 60, 103, 179, 88, 60, 100, 181, 50, 60, 196, 28, 102, 61, 61, 228, 2, 61, 87, 223, 5, 61, 177, 121, 13, 61, 169, 22, 198, 60, 76, 71, 178, 60, 78, 95, 209, 60, 64, 218, 225, 60, 42, 58, 199, 60, 148, 21, 160, 60, 171, 53, 177, 60, 171, 213, 196, 60, 60, 195, 193, 60, 1, 232, 96, 62, 45, 103, 42, 60, 182, 40, 55, 60, 145, 38, 64, 60, 140, 173, 143, 60, 204, 54, 22, 60, 168, 62, 235, 59, 189, 150, 223, 59, 49, 67, 252, 59, 136, 94, 26, 60, 121, 201, 18, 60, 69, 131, 38, 60, 73, 246, 2, 60, 120, 182, 35, 61, 157, 168, 170, 60, 76, 3, 62, 60, 220, 44, 86, 60, 214, 93, 181, 60, 220, 190, 92, 60, 21, 165, 116, 60, 125, 157, 91, 60, 96, 207, 141, 60, 93, 77, 125, 60, 135, 254, 77, 60, 247, 244, 93, 60, 148, 70, 50, 60, 83, 152, 119, 61, 117, 117, 23, 61, 177, 245, 244, 60, 189, 159, 9, 61, 140, 157, 64, 61, 18, 203, 12, 61, 239, 188, 240, 60, 138, 133, 169, 60, 239, 15, 215, 60, 244, 25, 217, 60, 51, 241, 231, 60, 56, 132, 167, 60, 44, 129, 232, 60, 9, 170, 49, 61, 36, 217, 61, 60, 104, 98, 28, 60, 120, 156, 245, 59, 197, 135, 81, 60, 145, 23, 15, 60, 123, 12, 221, 59, 173, 57, 210, 59, 226, 226, 176, 59, 25, 132, 222, 59, 173, 66, 204, 59, 173, 187, 213, 59, 190, 21, 150, 59, 57, 67, 14, 61, 60, 146, 118, 60, 132, 191, 97, 60, 38, 93, 127, 60, 170, 141, 129, 60, 234, 228, 127, 60, 0, 149, 93, 60, 220, 38, 93, 60, 14, 144, 94, 60, 104, 145, 46, 60, 238, 222, 46, 60, 10, 1, 3, 60, 103, 174, 58, 60, 251, 105, 121, 61, 56, 214, 213, 60, 32, 254, 239, 60, 239, 155, 238, 60, 7, 114, 23, 61, 196, 247, 238, 60, 205, 160, 201, 60, 48, 154, 239, 60, 113, 106, 4, 61, 177, 243, 217, 60, 24, 192, 239, 60, 190, 208, 179, 60, 136, 197, 156, 60, 214, 187, 58, 62, 53, 75, 74, 60, 94, 58, 42, 60, 211, 204, 223, 59, 188, 237, 132, 60, 108, 11, 251, 59, 122, 208, 231, 59, 6, 216, 234, 59, 213, 168, 232, 59, 155, 157, 1, 60, 246, 240, 151, 59, 245, 255, 237, 59, 166, 243, 164, 59, 103, 145, 254, 60, 71, 210, 128, 60, 254, 179, 133, 60, 56, 39, 176, 60, 62, 168, 146, 60, 215, 29, 94, 60, 140, 192, 163, 60, 180, 135, 127, 60, 176, 104, 104, 60, 234, 126, 102, 60, 238, 77, 135, 60, 117, 10, 104, 60, 65, 49, 120, 60, 32, 240, 58, 61, 64, 139, 208, 60, 215, 15, 156, 60, 185, 121, 3, 61, 234, 227, 232, 60, 173, 195, 208, 60, 37, 61, 227, 60, 244, 81, 180, 60, 226, 228, 2, 61, 121, 228, 253, 60, 205, 180, 220, 60, 156, 196, 225, 60, 206, 76, 168, 60, 109, 240, 145, 61, 71, 211, 133, 60, 184, 24, 85, 60, 3, 43, 23, 60, 170, 90, 41, 60, 148, 22, 244, 59, 12, 110, 8, 60, 21, 77, 39, 60, 224, 16, 24, 60, 1, 209, 7, 60, 145, 68, 27, 60, 183, 119, 250, 59, 237, 61, 9, 60, 217, 116, 82, 61, 130, 175, 143, 60, 181, 170, 68, 60, 96, 180, 69, 60, 47, 135, 138, 60, 68, 221, 78, 60, 84, 82, 83, 60, 176, 253, 131, 60, 169, 95, 143, 60, 236, 201, 74, 60, 212, 211, 108, 60, 98, 185, 105, 60, 139, 60, 142, 60, 50, 119, 132, 61, 191, 29, 33, 61, 82, 250, 35, 61, 213, 187, 249, 60, 145, 27, 30, 61, 113, 138, 242, 60, 57, 53, 209, 60, 161, 36, 213, 60, 131, 86, 231, 60, 214, 125, 12, 61, 168, 206, 19, 61, 26, 189, 11, 61, 215, 77, 36, 61, 19, 62, 186, 61, 82, 19, 22, 60, 86, 153, 8, 60, 209, 73, 9, 60, 31, 82, 189, 59, 144, 205, 231, 59, 5, 220, 193, 59, 72, 215, 211, 59, 31, 62, 155, 59, 153, 137, 1, 60, 114, 243, 170, 59, 247, 183, 208, 59, 87, 184, 169, 59, 63, 251, 46, 61, 212, 38, 120, 60, 117, 165, 136, 60, 149, 34, 79, 60, 197, 69, 105, 60, 146, 109, 99, 60, 199, 196, 69, 60, 40, 246, 41, 60, 239, 83, 44, 60, 27, 91, 40, 60, 239, 140, 73, 60, 14, 30, 21, 60, 93, 112, 36, 60, 234, 168, 139, 61, 220, 81, 3, 61, 208, 110, 217, 60, 219, 118, 241, 60, 246, 168, 183, 60, 150, 37, 161, 60, 59, 195, 183, 60, 32, 183, 194, 60, 75, 141, 152, 60, 97, 146, 183, 60, 121, 55, 187, 60, 227, 132, 153, 60, 223, 32, 149, 60, 237, 46, 144, 61, 228, 251, 37, 60, 81, 49, 3, 60, 9, 247, 225, 59, 106, 89, 198, 59, 240, 152, 198, 59, 79, 70, 225, 59, 31, 49, 192, 59, 218, 47, 252, 59, 213, 193, 186, 59, 250, 46, 232, 59, 1, 244, 240, 59, 15, 241, 133, 59, 193, 189, 198, 60, 111, 161, 82, 60, 214, 122, 120, 60, 106, 83, 77, 60, 118, 165, 10, 60, 11, 127, 112, 60, 227, 53, 38, 60, 254, 38, 94, 60, 170, 160, 3, 60, 110, 157, 121, 60, 205, 164, 81, 60, 95, 186, 81, 60, 88, 75, 43, 60, 62, 242, 111, 61, 231, 186, 250, 60, 107, 150, 192, 60, 14, 62, 166, 60, 128, 124, 181, 60, 49, 160, 21, 61, 231, 99, 212, 60, 152, 92, 192, 60, 30, 231, 151, 60, 180, 221, 251, 60, 160, 24, 21, 61, 209, 1, 232, 60, 159, 121, 150, 60, 191, 89, 166, 61, 73, 251, 25, 60, 242, 233, 9, 60, 64, 117, 28, 60, 128, 23, 231, 59, 61, 232, 234, 59, 223, 217, 234, 59, 88, 207, 10, 60, 227, 94, 6, 60, 68, 170, 237, 59, 208, 152, 249, 59, 35, 201, 239, 59, 132, 74, 249, 59, 163, 19, 41, 61, 66, 107, 153, 60, 52, 251, 141, 60, 247, 66, 110, 60, 248, 12, 73, 60, 210, 248, 64, 60, 41, 54, 50, 60, 147, 219, 40, 60, 116, 142, 69, 60, 248, 2, 67, 60, 14, 12, 113, 60, 71, 236, 79, 60, 180, 43, 98, 60, 230, 94, 173, 61, 9, 232, 250, 60, 94, 180, 5, 61, 35, 181, 204, 60, 73, 204, 208, 60, 77, 235, 176, 60, 218, 251, 199, 60, 95, 16, 254, 60, 212, 114, 8, 61, 173, 215, 171, 60, 134, 76, 201, 60, 150, 183, 142, 60, 181, 68, 226, 60, 57, 42, 35, 62, 238, 213, 109, 60, 181, 209, 64, 60, 171, 20, 95, 60, 184, 57, 79, 60, 78, 212, 232, 59, 124, 197, 12, 60, 24, 242, 219, 59, 123, 44, 41, 60, 120, 132, 48, 60, 166, 179, 28, 60, 79, 16, 245, 59, 170, 92, 2, 60, 233, 45, 93, 61, 229, 169, 254, 60, 166, 21, 225, 60, 170, 44, 128, 60, 47, 9, 121, 60, 177, 147, 54, 60, 100, 250, 129, 60, 139, 107, 112, 60, 204, 160, 92, 60, 55, 14, 107, 60, 251, 13, 148, 60, 36, 71, 72, 60, 185, 250, 101, 60, 204, 82, 172, 61, 31, 194, 72, 61, 251, 159, 49, 61, 37, 235, 248, 60, 98, 58, 255, 60, 54, 212, 221, 60, 228, 93, 0, 61, 187, 197, 216, 60, 104, 191, 197, 60, 205, 116, 217, 60, 155, 42, 20, 61, 231, 217, 155, 60, 2, 100, 243, 60, 74, 111, 6, 61, 141, 89, 18, 60, 194, 180, 129, 60, 94, 247, 150, 60, 68, 119, 95, 60, 251, 177, 222, 59, 89, 125, 140, 59, 54, 52, 192, 59, 76, 26, 217, 59, 38, 73, 38, 60, 84, 57, 246, 59, 81, 192, 175, 59, 19, 123, 239, 59, 111, 66, 184, 60, 208, 22, 165, 60, 34, 125, 16, 60, 164, 177, 73, 60, 182, 108, 158, 60, 108, 108, 107, 60, 3, 179, 209, 59, 190, 203, 61, 60, 145, 208, 17, 60, 25, 194, 112, 60, 20, 224, 50, 60, 157, 50, 29, 60, 71, 69, 150, 60, 189, 96, 122, 61, 111, 254, 48, 61, 68, 14, 149, 60, 181, 115, 212, 60, 64, 81, 2, 61, 129, 19, 246, 60, 26, 224, 97, 60, 109, 182, 175, 60, 251, 86, 168, 60, 9, 25, 10, 61, 95, 97, 169, 60, 254, 27, 156, 60, 252, 31, 12, 61, 110, 100, 68, 62, 178, 55, 90, 60, 187, 129, 57, 60, 232, 121, 76, 60, 12, 24, 53, 60, 250, 181, 231, 59, 26, 5, 241, 59, 224, 178, 217, 59, 63, 235, 197, 59, 153, 24, 219, 59, 195, 23, 202, 59, 136, 147, 171, 59, 91, 253, 177, 59, 76, 119, 72, 61, 71, 215, 139, 60, 195, 230, 145, 60, 45, 146, 137, 60, 166, 35, 141, 60, 31, 33, 117, 60, 217, 15, 157, 60, 148, 151, 114, 60, 57, 251, 107, 60, 212, 27, 138, 60, 176, 136, 128, 60, 136, 82, 84, 60, 154, 37, 57, 60, 68, 124, 158, 61, 123, 10, 15, 61, 68, 238, 229, 60, 77, 178, 231, 60, 117, 124, 246, 60, 119, 230, 210, 60, 214, 91, 26, 61, 180, 6, 245, 60, 222, 123, 206, 60, 249, 36, 226, 60, 222, 235, 239, 60, 113, 64, 200, 60, 203, 217, 148, 60, 183, 56, 153, 62, 31, 220, 223, 60, 181, 37, 133, 60, 168, 195, 36, 60, 239, 115, 134, 60, 101, 88, 7, 60, 205, 246, 27, 60, 194, 152, 234, 59, 70, 77, 1, 60, 144, 105, 21, 60, 92, 4, 232, 59, 96, 182, 185, 59, 3, 203, 248, 59, 2, 242, 19, 61, 160, 241, 73, 60, 63, 171, 61, 60, 188, 237, 129, 60, 117, 169, 159, 60, 40, 181, 83, 60, 224, 55, 54, 60, 194, 67, 95, 60, 224, 46, 69, 60, 127, 239, 84, 60, 39, 193, 118, 60, 20, 28, 116, 60, 255, 24, 55, 60, 74, 249, 193, 61, 101, 118, 20, 61, 237, 5, 18, 61, 58, 124, 14, 61, 227, 217, 232, 60, 66, 6, 180, 60, 238, 176, 188, 60, 39, 189, 185, 60, 79, 115, 198, 60, 41, 219, 184, 60, 63, 187, 198, 60, 233, 81, 243, 60, 36, 62, 218, 60, 139, 50, 50, 63, 12, 182, 124, 61, 224, 22, 218, 60, 34, 248, 138, 60, 47, 175, 15, 61, 163, 30, 169, 60, 114, 0, 251, 59, 183, 136, 126, 60, 109, 209, 33, 60, 14, 115, 85, 60, 73, 55, 234, 59, 83, 48, 27, 60, 188, 106, 144, 60, 36, 186, 132, 62, 23, 230, 82, 62, 181, 255, 21, 62, 76, 255, 206, 60, 194, 74, 135, 60, 235, 248, 175, 60, 0, 131, 128, 60, 57, 230, 223, 60, 30, 165, 25, 61, 7, 129, 155, 60, 94, 171, 126, 60, 162, 112, 61, 60, 205, 193, 164, 60, 13, 50, 63, 63, 33, 130, 42, 63, 167, 119, 207, 61, 149, 213, 10, 62, 202, 45, 132, 61, 215, 179, 110, 61, 224, 202, 102, 61, 21, 202, 62, 61, 181, 172, 25, 61, 119, 46, 22, 62, 127, 80, 4, 61, 107, 15, 38, 61, 187, 152, 28, 61, 15, 110, 50, 62, 78, 86, 69, 60, 0, 250, 31, 60, 208, 111, 56, 60, 223, 92, 30, 60, 135, 185, 63, 60, 123, 232, 7, 60, 109, 254, 41, 60, 201, 235, 198, 59, 83, 138, 231, 59, 191, 203, 69, 60, 61, 6, 244, 59, 161, 51, 212, 59, 20, 37, 150, 62, 121, 225, 185, 61, 72, 5, 0, 62, 34, 162, 15, 61]).concat([66, 84, 194, 60, 190, 76, 195, 60, 236, 86, 185, 60, 62, 114, 247, 60, 69, 136, 40, 61, 68, 167, 129, 60, 101, 118, 218, 60, 215, 114, 132, 60, 251, 209, 56, 60, 45, 246, 60, 62, 143, 3, 205, 61, 159, 39, 9, 62, 59, 184, 67, 61, 154, 81, 184, 60, 179, 235, 10, 61, 59, 210, 27, 61, 158, 160, 155, 60, 207, 139, 37, 61, 10, 195, 237, 60, 20, 114, 51, 61, 144, 156, 5, 61, 57, 141, 11, 61, 10, 220, 167, 62, 19, 189, 46, 61, 63, 81, 3, 61, 247, 25, 141, 60, 6, 223, 173, 60, 224, 79, 197, 60, 6, 23, 232, 59, 158, 74, 214, 60, 247, 154, 21, 60, 36, 35, 238, 59, 100, 219, 133, 60, 219, 10, 96, 60, 74, 252, 71, 60, 168, 74, 209, 62, 224, 35, 81, 62, 250, 107, 192, 61, 66, 0, 145, 61, 114, 13, 170, 60, 254, 197, 146, 60, 206, 36, 24, 61, 100, 153, 222, 60, 233, 43, 152, 60, 78, 168, 18, 61, 206, 173, 237, 60, 0, 65, 158, 60, 87, 136, 109, 60, 14, 224, 242, 62, 106, 17, 157, 62, 119, 195, 226, 61, 32, 14, 205, 61, 155, 218, 13, 61, 25, 100, 33, 61, 89, 118, 3, 61, 163, 133, 125, 61, 53, 158, 29, 61, 170, 92, 11, 61, 219, 3, 21, 61, 234, 12, 7, 61, 17, 49, 115, 60, 236, 33, 144, 62, 152, 71, 230, 60, 218, 216, 99, 60, 171, 159, 172, 59, 197, 7, 78, 60, 101, 69, 144, 59, 39, 42, 8, 60, 244, 130, 20, 60, 243, 230, 1, 60, 1, 134, 137, 60, 127, 42, 43, 59, 232, 160, 55, 60, 171, 35, 37, 60, 192, 29, 93, 62, 217, 33, 234, 61, 141, 138, 6, 62, 47, 190, 65, 61, 38, 88, 64, 61, 238, 56, 4, 61, 232, 224, 220, 60, 1, 251, 229, 60, 195, 235, 161, 60, 30, 35, 222, 60, 60, 152, 75, 60, 138, 173, 188, 60, 59, 241, 70, 60, 107, 179, 1, 62, 205, 158, 244, 61, 126, 74, 203, 61, 58, 45, 109, 61, 52, 94, 96, 61, 179, 227, 38, 61, 149, 248, 83, 61, 17, 60, 229, 60, 38, 153, 19, 61, 244, 131, 87, 61, 141, 129, 6, 61, 137, 179, 23, 61, 155, 64, 235, 60, 7, 33, 235, 61, 202, 68, 107, 60, 143, 144, 79, 60, 125, 11, 21, 60, 205, 159, 1, 60, 195, 218, 24, 60, 28, 96, 17, 60, 163, 132, 254, 59, 72, 2, 8, 60, 105, 202, 216, 59, 143, 217, 205, 59, 183, 248, 219, 59, 235, 137, 19, 60, 85, 225, 138, 61, 20, 239, 229, 60, 65, 45, 149, 60, 55, 144, 83, 60, 208, 6, 88, 60, 56, 33, 93, 60, 209, 225, 81, 60, 70, 14, 91, 60, 183, 198, 45, 60, 40, 11, 73, 60, 138, 115, 105, 60, 76, 156, 95, 60, 215, 109, 66, 60, 46, 170, 145, 61, 191, 48, 66, 61, 236, 15, 41, 61, 64, 13, 25, 61, 99, 123, 24, 61, 77, 242, 23, 61, 126, 192, 3, 61, 183, 234, 206, 60, 39, 220, 199, 60, 168, 108, 204, 60, 66, 122, 199, 60, 161, 1, 185, 60, 235, 173, 218, 60, 66, 152, 18, 62, 162, 19, 159, 60, 59, 49, 59, 60, 182, 40, 255, 59, 75, 23, 26, 60, 197, 24, 50, 60, 163, 195, 2, 60, 177, 22, 255, 59, 170, 66, 7, 60, 244, 162, 250, 59, 152, 68, 254, 59, 111, 177, 8, 60, 61, 203, 190, 59, 169, 14, 244, 60, 217, 60, 98, 60, 62, 229, 87, 60, 244, 110, 52, 60, 141, 235, 56, 60, 137, 37, 80, 60, 54, 68, 136, 60, 206, 68, 87, 60, 237, 137, 82, 60, 43, 1, 33, 60, 121, 88, 73, 60, 242, 240, 29, 60, 251, 134, 41, 60, 94, 218, 123, 61, 239, 148, 7, 61, 122, 28, 254, 60, 196, 77, 232, 60, 136, 245, 9, 61, 216, 20, 5, 61, 199, 237, 225, 60, 124, 184, 219, 60, 90, 212, 205, 60, 174, 100, 225, 60, 30, 118, 2, 61, 50, 80, 227, 60, 214, 92, 232, 60, 50, 158, 1, 62, 129, 46, 110, 60, 68, 151, 95, 60, 165, 48, 27, 60, 153, 180, 20, 60, 196, 97, 14, 60, 177, 29, 234, 59, 11, 96, 220, 59, 207, 12, 249, 59, 102, 21, 230, 59, 238, 209, 232, 59, 153, 188, 246, 59, 217, 43, 243, 59, 54, 40, 145, 61, 34, 47, 8, 61, 255, 147, 175, 60, 72, 186, 103, 60, 10, 43, 123, 60, 161, 47, 74, 60, 197, 187, 107, 60, 129, 43, 57, 60, 248, 215, 122, 60, 171, 220, 156, 60, 54, 183, 135, 60, 98, 200, 138, 60, 141, 59, 83, 60, 242, 83, 195, 61, 205, 121, 42, 61, 136, 83, 231, 60, 166, 238, 224, 60, 208, 78, 220, 60, 254, 157, 213, 60, 62, 186, 226, 60, 177, 112, 208, 60, 37, 146, 2, 61, 249, 170, 216, 60, 32, 219, 225, 60, 243, 109, 211, 60, 146, 23, 215, 60, 168, 217, 188, 62, 108, 132, 202, 60, 143, 178, 198, 60, 16, 151, 55, 60, 106, 151, 1, 60, 249, 48, 18, 60, 144, 91, 55, 60, 173, 203, 23, 60, 174, 95, 14, 60, 46, 231, 61, 60, 82, 177, 1, 60, 98, 26, 51, 60, 101, 29, 3, 60, 100, 173, 85, 61, 27, 24, 207, 60, 65, 150, 183, 60, 184, 18, 83, 60, 43, 20, 72, 60, 50, 238, 152, 60, 66, 234, 133, 60, 240, 111, 129, 60, 37, 232, 91, 60, 176, 115, 130, 60, 45, 63, 90, 60, 33, 114, 82, 60, 189, 217, 111, 60, 232, 49, 195, 61, 96, 193, 126, 61, 105, 207, 77, 61, 145, 32, 242, 60, 0, 192, 4, 61, 102, 95, 21, 61, 88, 216, 18, 61, 89, 24, 19, 61, 175, 199, 177, 60, 79, 212, 206, 60, 56, 255, 242, 60, 79, 239, 241, 60, 38, 4, 198, 60, 156, 194, 142, 62, 215, 188, 148, 61, 116, 137, 155, 60, 226, 154, 70, 61, 145, 82, 170, 60, 29, 100, 206, 60, 7, 19, 80, 60, 156, 106, 171, 60, 26, 223, 106, 60, 199, 246, 150, 60, 58, 3, 62, 60, 193, 197, 7, 60, 187, 74, 67, 60, 216, 141, 77, 61, 157, 201, 8, 61, 3, 68, 246, 60, 165, 85, 249, 60, 203, 71, 185, 60, 176, 24, 198, 60, 89, 59, 138, 60, 189, 169, 199, 60, 179, 174, 162, 60, 165, 13, 135, 60, 64, 169, 79, 60, 198, 232, 137, 60, 119, 196, 130, 60, 153, 119, 249, 61, 82, 191, 139, 61, 47, 186, 237, 60, 31, 109, 62, 61, 213, 45, 8, 61, 29, 186, 72, 61, 68, 60, 185, 60, 192, 37, 27, 61, 158, 221, 10, 61, 248, 134, 11, 61, 66, 37, 180, 60, 215, 39, 204, 60, 138, 21, 234, 60, 238, 205, 118, 62, 112, 93, 28, 60, 27, 212, 12, 60, 211, 176, 55, 60, 99, 150, 39, 60, 139, 103, 226, 59, 101, 30, 15, 60, 165, 11, 167, 59, 176, 60, 186, 59, 113, 74, 24, 60, 139, 99, 12, 60, 189, 128, 198, 59, 125, 248, 57, 60, 25, 54, 231, 60, 191, 5, 111, 60, 113, 66, 63, 60, 224, 240, 46, 60, 187, 236, 157, 60, 146, 221, 49, 60, 93, 136, 81, 60, 228, 72, 72, 60, 241, 137, 11, 60, 61, 218, 128, 60, 41, 92, 18, 60, 244, 177, 197, 59, 52, 221, 13, 60, 159, 131, 38, 61, 9, 125, 251, 60, 70, 192, 239, 60, 32, 169, 204, 60, 235, 121, 31, 61, 217, 48, 195, 60, 82, 78, 186, 60, 221, 119, 186, 60, 239, 197, 170, 60, 200, 92, 255, 60, 126, 22, 232, 60, 22, 33, 174, 60, 54, 144, 176, 60, 108, 33, 20, 63, 194, 155, 215, 61, 183, 234, 25, 61, 10, 252, 201, 60, 55, 86, 184, 60, 75, 222, 240, 60, 62, 229, 198, 60, 61, 136, 150, 60, 174, 182, 152, 60, 108, 221, 182, 60, 98, 158, 173, 60, 79, 167, 139, 60, 165, 118, 135, 60, 119, 91, 53, 62, 223, 152, 25, 61, 29, 210, 252, 60, 102, 248, 45, 61, 53, 48, 20, 61, 36, 91, 16, 61, 160, 86, 90, 60, 164, 177, 0, 61, 221, 242, 156, 60, 143, 10, 202, 60, 135, 5, 90, 60, 76, 65, 117, 60, 207, 212, 165, 60, 12, 242, 31, 62, 168, 213, 96, 61, 54, 153, 89, 61, 202, 61, 37, 61, 196, 234, 124, 61, 51, 106, 77, 61, 36, 39, 244, 60, 202, 73, 57, 61, 65, 241, 38, 61, 174, 211, 30, 61, 43, 232, 220, 60, 234, 99, 232, 60, 186, 38, 5, 61, 159, 138, 52, 62, 170, 88, 78, 60, 59, 102, 201, 59, 79, 89, 6, 60, 78, 214, 30, 60, 96, 94, 195, 59, 52, 54, 7, 60, 112, 47, 180, 59, 187, 32, 188, 59, 72, 159, 32, 60, 243, 34, 250, 59, 12, 203, 36, 60, 85, 200, 171, 59, 100, 181, 179, 60, 175, 28, 57, 60, 82, 8, 134, 60, 97, 129, 76, 60, 120, 60, 138, 60, 1, 244, 49, 60, 48, 161, 130, 60, 159, 93, 57, 60, 15, 133, 85, 60, 216, 74, 85, 60, 218, 230, 110, 60, 75, 29, 79, 60, 19, 58, 63, 60, 4, 242, 13, 61, 69, 7, 180, 60, 165, 31, 231, 60, 180, 143, 209, 60, 216, 219, 71, 61, 97, 58, 238, 60, 59, 23, 6, 61, 146, 161, 227, 60, 161, 135, 161, 60, 216, 14, 255, 60, 241, 142, 156, 60, 68, 87, 236, 60, 50, 80, 250, 60, 238, 139, 215, 61, 21, 7, 9, 60, 69, 141, 40, 60, 177, 209, 26, 60, 78, 183, 31, 60, 158, 168, 23, 60, 150, 216, 8, 60, 22, 36, 223, 59, 7, 135, 191, 59, 172, 208, 4, 60, 207, 203, 8, 60, 149, 121, 15, 60, 48, 125, 0, 60, 157, 41, 42, 61, 20, 128, 128, 60, 14, 125, 87, 60, 122, 212, 78, 60, 117, 42, 108, 60, 176, 15, 98, 60, 40, 118, 76, 60, 49, 149, 143, 60, 44, 204, 105, 60, 230, 111, 28, 60, 38, 229, 92, 60, 38, 225, 82, 60, 81, 76, 34, 60, 197, 77, 132, 61, 105, 100, 215, 60, 234, 207, 0, 61, 45, 182, 250, 60, 169, 22, 204, 60, 176, 143, 209, 60, 158, 205, 201, 60, 187, 68, 4, 61, 58, 170, 231, 60, 188, 176, 5, 61, 33, 46, 7, 61, 105, 144, 185, 60, 100, 224, 194, 60, 222, 9, 169, 61, 245, 118, 68, 60, 67, 25, 4, 60, 75, 168, 246, 59, 115, 25, 208, 59, 240, 22, 244, 59, 8, 41, 220, 59, 252, 89, 203, 59, 126, 159, 239, 59, 34, 73, 240, 59, 174, 149, 6, 60, 169, 145, 0, 60, 151, 247, 252, 59, 216, 81, 201, 60, 172, 205, 83, 60, 83, 83, 95, 60, 124, 135, 98, 60, 76, 36, 146, 60, 0, 62, 98, 60, 120, 193, 97, 60, 79, 208, 82, 60, 214, 5, 110, 60, 74, 226, 111, 60, 72, 58, 91, 60, 169, 78, 105, 60, 221, 157, 74, 60, 123, 213, 93, 61, 158, 82, 218, 60, 49, 31, 212, 60, 182, 69, 176, 60, 2, 127, 14, 61, 39, 66, 242, 60, 44, 12, 3, 61, 221, 224, 147, 60, 246, 184, 204, 60, 121, 253, 251, 60, 192, 209, 211, 60, 155, 163, 206, 60, 51, 36, 232, 60, 11, 231, 186, 61, 128, 27, 35, 60, 69, 203, 215, 59, 0, 162, 235, 59, 153, 13, 181, 59, 63, 115, 192, 59, 169, 58, 8, 60, 58, 68, 208, 59, 118, 236, 230, 59, 61, 156, 231, 59, 216, 113, 243, 59, 5, 7, 19, 60, 48, 148, 228, 59, 152, 191, 41, 61, 50, 65, 61, 60, 39, 161, 25, 60, 184, 172, 74, 60, 74, 194, 102, 60, 126, 193, 93, 60, 76, 100, 133, 60, 160, 172, 60, 60, 0, 129, 97, 60, 240, 251, 153, 60, 140, 48, 137, 60, 99, 135, 76, 60, 140, 250, 94, 60, 233, 65, 118, 61, 171, 198, 238, 60, 134, 178, 210, 60, 252, 254, 220, 60, 93, 116, 255, 60, 118, 31, 197, 60, 5, 68, 192, 60, 77, 215, 233, 60, 170, 135, 8, 61, 55, 108, 25, 61, 18, 225, 18, 61, 6, 235, 242, 60, 159, 81, 190, 60, 104, 222, 249, 61, 211, 101, 75, 60, 180, 25, 23, 60, 243, 178, 243, 59, 176, 166, 246, 59, 130, 225, 0, 60, 83, 155, 242, 59, 0, 33, 190, 59, 186, 197, 207, 59, 30, 133, 19, 60, 150, 77, 240, 59, 232, 43, 250, 59, 136, 247, 192, 59, 204, 209, 68, 61, 177, 225, 134, 60, 131, 54, 96, 60, 54, 54, 81, 60, 100, 196, 130, 60, 11, 86, 99, 60, 245, 64, 104, 60, 61, 178, 83, 60, 246, 225, 148, 60, 148, 61, 149, 60, 87, 135, 104, 60, 195, 95, 63, 60, 247, 141, 115, 60, 129, 200, 129, 61, 12, 186, 198, 60, 154, 170, 190, 60, 0, 188, 202, 60, 85, 36, 181, 60, 212, 240, 196, 60, 26, 12, 163, 60, 10, 199, 192, 60, 241, 137, 182, 60, 225, 41, 204, 60, 245, 225, 198, 60, 157, 2, 163, 60, 161, 119, 188, 60, 61, 74, 3, 62, 96, 2, 159, 60, 31, 60, 125, 60, 138, 0, 60, 60, 203, 171, 33, 60, 217, 34, 23, 60, 13, 204, 38, 60, 110, 3, 13, 60, 34, 21, 48, 60, 160, 205, 58, 60, 24, 82, 63, 60, 245, 137, 183, 59, 16, 112, 11, 60, 33, 189, 28, 61, 148, 239, 118, 60, 116, 77, 96, 60, 116, 187, 91, 60, 143, 199, 139, 60, 136, 149, 111, 60, 221, 97, 65, 60, 3, 48, 85, 60, 39, 172, 96, 60, 172, 248, 26, 60, 195, 82, 146, 60, 201, 235, 73, 60, 242, 56, 72, 60, 85, 133, 97, 61, 86, 202, 10, 61, 116, 188, 228, 60, 39, 209, 139, 60, 175, 169, 212, 60, 251, 220, 9, 61, 80, 85, 178, 60, 135, 109, 193, 60, 56, 166, 206, 60, 90, 208, 43, 60, 81, 11, 202, 60, 74, 253, 135, 60, 12, 71, 189, 60, 38, 198, 42, 63, 250, 36, 115, 60, 17, 73, 94, 61, 51, 115, 34, 61, 233, 218, 41, 60, 182, 184, 78, 60, 36, 249, 95, 60, 111, 2, 65, 60, 58, 222, 16, 61, 161, 184, 150, 60, 21, 124, 19, 60, 194, 234, 77, 60, 205, 44, 164, 59, 127, 93, 143, 61, 222, 173, 162, 60, 53, 18, 243, 60, 228, 243, 11, 61, 68, 178, 100, 60, 9, 103, 153, 60, 121, 57, 18, 61, 200, 2, 103, 60, 188, 237, 17, 61, 233, 242, 55, 61, 167, 193, 161, 60, 125, 68, 109, 60, 251, 68, 107, 60, 29, 135, 4, 62, 91, 153, 41, 61, 246, 139, 104, 61, 49, 59, 64, 61, 96, 201, 27, 61, 120, 168, 149, 60, 57, 61, 32, 61, 107, 121, 200, 60, 123, 24, 47, 61, 89, 149, 65, 61, 121, 69, 144, 60, 129, 200, 14, 61, 170, 187, 236, 60, 239, 82, 44, 62, 246, 205, 96, 60, 89, 73, 30, 60, 160, 181, 128, 60, 244, 34, 135, 60, 38, 29, 26, 60, 32, 223, 33, 60, 209, 233, 240, 59, 176, 116, 2, 60, 142, 102, 72, 60, 97, 71, 31, 60, 240, 211, 172, 59, 8, 224, 11, 60, 74, 24, 127, 61, 252, 36, 229, 60, 84, 166, 199, 60, 21, 221, 160, 60, 239, 58, 194, 60, 46, 237, 124, 60, 219, 204, 102, 60, 119, 241, 132, 60, 251, 78, 128, 60, 71, 248, 44, 60, 239, 69, 41, 60, 134, 201, 84, 60, 152, 205, 94, 60, 181, 178, 193, 61, 108, 102, 18, 61, 25, 102, 47, 61, 228, 222, 15, 61, 247, 120, 34, 61, 237, 69, 183, 60, 195, 254, 236, 60, 123, 9, 225, 60, 99, 152, 220, 60, 64, 172, 188, 60, 88, 2, 182, 60, 104, 198, 132, 60, 193, 162, 196, 60, 143, 244, 217, 61, 65, 147, 148, 60, 201, 151, 122, 60, 71, 21, 204, 60, 46, 136, 90, 60, 52, 61, 52, 60, 162, 176, 221, 59, 195, 27, 31, 60, 140, 56, 102, 60, 128, 227, 28, 60, 219, 133, 132, 60, 56, 22, 43, 60, 150, 128, 189, 59, 206, 24, 28, 61, 148, 13, 208, 60, 88, 232, 103, 60, 197, 194, 205, 60, 61, 0, 160, 60, 115, 82, 192, 60, 157, 1, 117, 60, 103, 155, 77, 60, 73, 219, 187, 60, 23, 188, 116, 60, 43, 213, 54, 60, 41, 126, 126, 60, 129, 91, 55, 60, 157, 95, 195, 61, 246, 14, 27, 61, 107, 29, 155, 60, 223, 234, 30, 61, 106, 80, 42, 61, 121, 20, 34, 61, 30, 19, 0, 61, 21, 245, 211, 60, 243, 156, 64, 61, 139, 185, 65, 61, 10, 204, 232, 60, 48, 93, 233, 60, 164, 39, 157, 60, 147, 242, 247, 61, 3, 152, 122, 60, 71, 184, 78, 60, 226, 113, 44, 60, 179, 176, 227, 59, 157, 175, 58, 60, 132, 152, 250, 59, 118, 8, 21, 60, 178, 27, 202, 59, 132, 134, 198, 59, 202, 118, 69, 60, 13, 215, 88, 60, 68, 23, 14, 60, 68, 26, 89, 61, 10, 222, 211, 60, 179, 87, 204, 60, 182, 214, 139, 60, 222, 165, 68, 60, 16, 171, 135, 60, 86, 28, 89, 60, 169, 209, 23, 60, 115, 48, 15, 60, 105, 179, 113, 60, 69, 19, 111, 60, 31, 97, 93, 60, 240, 203, 80, 60, 47, 119, 144, 61, 241, 27, 207, 60, 208, 249, 231, 60, 51, 45, 205, 60, 198, 63, 247, 60, 54, 243, 251, 60, 236, 167, 213, 60, 232, 163, 161, 60, 67, 220, 99, 60, 105, 20, 174, 60, 183, 48, 243, 60, 133, 39, 244, 60, 157, 222, 226, 60, 173, 186, 130, 61, 153, 70, 90, 60, 154, 188, 8, 60, 125, 150, 38, 60, 218, 203, 238, 59, 86, 210, 250, 59, 128, 197, 205, 59, 10, 226, 163, 59, 0, 131, 16, 60, 171, 215, 36, 60, 199, 23, 197, 59, 240, 212, 163, 59, 43, 20, 142, 59, 6, 248, 23, 61, 231, 50, 193, 60, 22, 29, 134, 60, 183, 31, 129, 60, 217, 136, 73, 60, 86, 228, 130, 60, 119, 20, 59, 60, 187, 228, 7, 60, 102, 215, 83, 60, 246, 41, 56, 60, 209, 192, 233, 59, 191, 142, 13, 60, 235, 199, 239, 59, 222, 66, 166, 61, 35, 19, 2, 61, 7, 117, 1, 61, 52, 164, 24, 61, 230, 61, 220, 60, 249, 158, 0, 61, 50, 216, 168, 60, 35, 79, 162, 60, 200, 176, 190, 60, 73, 164, 195, 60, 206, 138, 170, 60, 95, 253, 165, 60, 139, 229, 160, 60, 26, 180, 180, 61, 104, 197, 84, 60, 55, 197, 1, 60, 48, 206, 211, 59, 60, 68, 133, 60, 102, 157, 14, 60, 219, 80, 1, 60, 97, 144, 208, 59, 238, 97, 209, 59, 44, 64, 134, 59, 92, 175, 142, 59, 110, 212, 175, 59, 216, 135, 92, 59, 54, 74, 71, 61, 73, 244, 183, 60, 116, 26, 131, 60, 75, 235, 94, 60, 123, 161, 82, 60, 116, 225, 128, 60, 243, 133, 161, 60, 194, 95, 43, 60, 243, 33, 80, 60, 6, 157, 99, 60, 44, 36, 170, 60, 122, 98, 156, 60, 192, 5, 30, 60, 91, 28, 179, 61, 141, 125, 134, 61, 246, 247, 217, 60, 115, 75, 248, 60, 42, 6, 184, 60, 14, 82, 224, 60, 175, 9, 0, 61, 203, 24, 172, 60, 248, 115, 207, 60, 105, 232, 201, 60, 8, 58, 145, 60, 178, 0, 183, 60, 20, 17, 208, 60, 149, 1, 45, 62, 121, 220, 155, 60, 186, 120, 77, 60, 23, 41, 27, 60, 165, 236, 74, 60, 253, 15, 243, 59, 242, 84, 27, 60, 208, 57, 184, 59, 52, 246, 17, 60, 233, 183, 201, 59, 252, 181, 237, 59, 8, 5, 117, 59, 20, 120, 27, 60, 137, 238, 235, 60, 197, 10, 119, 60, 178, 8, 116, 60, 243, 135, 80, 60, 155, 120, 126, 60, 128, 23, 139, 60, 57, 49, 148, 60, 250, 10, 50, 60, 250, 236, 158, 60, 166, 146, 104, 60, 179, 77, 137, 60, 81, 146, 130, 60, 63, 146, 149, 60, 174, 47, 107, 61, 228, 213, 195, 60, 230, 134, 224, 60, 110, 175, 150, 60, 221, 30, 162, 60, 246, 84, 210, 60, 29, 8, 213, 60, 184, 46, 177, 60, 35, 190, 35, 61, 78, 38, 140, 60, 34, 144, 0, 61, 219, 243, 215, 60, 53, 27, 1, 61, 44, 129, 51, 62, 58, 211, 21, 61, 59, 217, 128, 60, 92, 46, 4, 60, 214, 99, 202, 59, 35, 170, 207, 59, 253, 169, 52, 60, 111, 73, 74, 60, 48, 30, 111, 60, 73, 147, 97, 60, 80, 144, 42, 60, 119, 46, 219, 59, 124, 51, 22, 60, 16, 94, 86, 61, 134, 142, 12, 61, 44, 247, 236, 60, 212, 202, 219, 60, 78, 114, 138, 60, 141, 6, 173, 60, 111, 213, 32, 60, 171, 219, 136, 60, 108, 1, 73, 60, 139, 95, 69, 60, 4, 160, 154, 60, 90, 171, 14, 60, 74, 190, 44, 60, 91, 39, 251, 62, 113, 190, 229, 62, 19, 1, 244, 61, 100, 206, 184, 61, 216, 97, 231, 61, 170, 218, 138, 61, 191, 204, 49, 61, 88, 127, 54, 60, 177, 12, 203, 60, 216, 207, 46, 61, 10, 149, 14, 61, 166, 184, 253, 60, 235, 178, 56, 61, 165, 17, 235, 61, 230, 94, 53, 61, 255, 132, 221, 60, 111, 172, 204, 60, 91, 53, 223, 60, 248, 53, 76, 60, 33, 238, 131, 60, 12, 182, 152, 60, 250, 255, 77, 60, 99, 69, 158, 59, 15, 155, 53, 60, 148, 195, 115, 60, 189, 154, 180, 59, 107, 87, 20, 61, 136, 222, 135, 60, 151, 44, 236, 60, 48, 132, 81, 60, 116, 58, 181, 60, 131, 25, 214, 60, 197, 40, 176, 60, 143, 34, 168, 60, 13, 231, 149, 60, 174, 99, 241, 59, 245, 202, 58, 60, 236, 123, 113, 60, 68, 161, 168, 59, 173, 250, 83, 61, 183, 22, 135, 61, 251, 29, 150, 61, 205, 164, 173, 60, 69, 4, 4, 61, 155, 11, 155, 61, 48, 107, 203, 60, 180, 91, 51, 61, 72, 68, 38, 61, 134, 125, 112, 60, 2, 68, 250, 60, 137, 195, 163, 60, 63, 186, 77, 60, 6, 254, 131, 62, 189, 57, 101, 60, 199, 77, 235, 60, 31, 90, 192, 60, 28, 230, 238, 60, 79, 254, 153, 60, 49, 249, 45, 60, 164, 33, 176, 60, 65, 43, 182, 60, 153, 137, 209, 59, 185, 221, 209, 59, 12, 158, 52, 60, 3, 175, 24, 60, 116, 214, 81, 61, 199, 116, 134, 60, 44, 208, 203, 60, 65, 164, 253, 60, 51, 8, 93, 61, 225, 164, 198, 60, 4, 161, 159, 60, 226, 139, 90, 60, 209, 170, 213, 60, 161, 168, 85, 60, 51, 93, 189, 59, 73, 107, 166, 60, 62, 120, 4, 61, 83, 101, 119, 62, 15, 14, 226, 60, 146, 118, 57, 61, 23, 178, 36, 61, 34, 90, 65, 61, 152, 109, 230, 60, 26, 72, 229, 60, 114, 14, 55, 61, 126, 195, 42, 61, 142, 43, 25, 61, 97, 117, 216, 60, 55, 155, 158, 60, 19, 57, 5, 61, 91, 38, 91, 62, 239, 0, 191, 60, 148, 59, 11, 60, 75, 254, 90, 60, 242, 53, 62, 60, 138, 176, 92, 59, 213, 196, 252, 59, 223, 3, 117, 59, 193, 20, 38, 60, 185, 112, 182, 59, 220, 63, 3, 60, 188, 231, 206, 59, 240, 35, 28, 60, 209, 144, 71, 62, 225, 129, 93, 61, 55, 202, 92, 61, 139, 5, 193, 60, 124, 217, 13, 61, 156, 82, 193, 60, 167, 169, 170, 60, 26, 147, 178, 60, 121, 155, 140, 60, 164, 186, 68, 60, 245, 39, 116, 60, 171, 143, 107, 60, 93, 209, 3, 60, 74, 138, 88, 63, 175, 144, 69, 62, 54, 175, 79, 61, 33, 127, 97, 61, 173, 129, 164, 61, 55, 128, 58, 61, 136, 184, 91, 61, 36, 33, 33, 61, 253, 104, 14, 61, 202, 102, 186, 60, 74, 177, 15, 61, 1, 28, 36, 61, 212, 213, 133, 60, 109, 213, 53, 62, 31, 91, 146, 59, 148, 187, 145, 60, 103, 121, 255, 58, 123, 144, 125, 60, 202, 72, 224, 59, 222, 53, 150, 60, 128, 83, 215, 60, 97, 61, 145, 59, 143, 32, 81, 60, 171, 64, 253, 60, 199, 160, 41, 60, 254, 9, 228, 59, 250, 123, 178, 61, 0, 48, 8, 61, 191, 241, 136, 60, 43, 112, 13, 61, 198, 250, 163, 60, 60, 78, 42, 60, 182, 233, 219, 59, 180, 69, 49, 61, 51, 93, 144, 60, 207, 204, 10, 60, 47, 92, 250, 60, 149, 155, 222, 60, 124, 54, 137, 60, 164, 249, 56, 62, 1, 60, 71, 62, 30, 233, 19, 61, 46, 137, 30, 61, 109, 57, 149, 61, 193, 212, 198, 60, 5, 212, 6, 61, 140, 194, 243, 60, 38, 192, 86, 61, 215, 248, 99, 60, 165, 248, 118, 61, 38, 134, 3, 61, 64, 157, 88, 60, 51, 24, 13, 61, 247, 245, 44, 60, 30, 82, 21, 60, 29, 178, 206, 59, 213, 92, 15, 60, 113, 203, 28, 60, 207, 188, 74, 60, 11, 141, 52, 60, 101, 172, 253, 59, 145, 192, 171, 59, 115, 153, 185, 59, 108, 144, 24, 60, 87, 237, 8, 60, 98, 188, 68, 61, 160, 21, 173, 60, 242, 236, 160, 60, 65, 73, 69, 60, 195, 158, 123, 60, 67, 166, 135, 60, 166, 227, 158, 60, 243, 67, 236, 60, 132, 229, 155, 60, 171, 166, 45, 60, 192, 95, 82, 60, 95, 180, 95, 60, 168, 66, 108, 60, 125, 59, 202, 61, 220, 208, 80, 61, 150, 106, 40, 61, 60, 228, 180, 60, 79, 209, 240, 60, 211, 240, 215, 60, 118, 111, 25, 61, 144, 78, 75, 61, 182, 26, 31, 61, 214, 43, 150, 60, 253, 158, 234, 60, 60, 57, 221, 60, 99, 130, 21, 61, 155, 132, 44, 60, 246, 26, 173, 59, 107, 123, 13, 60, 42, 227, 42, 60, 53, 166, 213, 59, 144, 179, 41, 60, 210, 63, 4, 60, 113, 157, 0, 60, 178, 198, 68, 60, 94, 2, 26, 60, 27, 43, 220, 59, 216, 237, 7, 60, 81, 250, 65, 60, 119, 122, 200, 60, 211, 5, 11, 60, 75, 51, 133, 60, 255, 45, 141, 60, 103, 190, 128, 60, 151, 136, 87, 60, 161, 117, 117, 60, 38, 222, 86, 60, 42, 255, 225, 60, 81, 159, 61, 60, 68, 222, 100, 60, 245, 161, 147, 60, 177, 120, 162, 60, 233, 193, 142, 61, 242, 205, 163, 60, 59, 224, 214, 60, 11, 11, 37, 61, 191, 77, 222, 60, 243, 175, 207, 60, 255, 245, 229, 60, 237, 117, 236, 60, 69, 44, 132, 61, 151, 49, 233, 60, 25, 56, 222, 60, 82, 113, 2, 61, 29, 201, 9, 61, 18, 251, 156, 63, 206, 91, 137, 61, 232, 180, 7, 62, 94, 156, 124, 60, 89, 152, 46, 60, 178, 25, 245, 58, 137, 84, 56, 60, 124, 223, 34, 61, 132, 235, 194, 60, 99, 134, 246, 60, 210, 156, 205, 59, 94, 195, 239, 59, 161, 240, 133, 60, 126, 234, 52, 63, 211, 165, 164, 61, 252, 1, 188, 61, 115, 219, 147, 61, 101, 21, 205, 60, 228, 44, 153, 60, 100, 236, 13, 61, 123, 11, 244, 59, 60, 151, 210, 60, 100, 158, 48, 61, 47, 111, 151, 60, 34, 203, 43, 61, 2, 144, 241, 60, 47, 19, 252, 62, 96, 170, 204, 61, 230, 208, 24, 62, 56, 250, 68, 61, 21, 200, 118, 61, 236, 56, 38, 61, 10, 239, 253, 60, 183, 41, 249, 60, 145, 143, 83, 61, 185, 31, 253, 60, 205, 253, 161, 60, 17, 162, 143, 60, 161, 179, 159, 60, 117, 71, 239, 62, 64, 167, 240, 61, 120, 52, 137, 61, 123, 196, 103, 61, 113, 87, 244, 60, 45, 68, 148, 60, 169, 80, 182, 60, 14, 158, 174, 60, 211, 73, 222, 60, 201, 251, 148, 60, 250, 118, 137, 60, 101, 248, 179, 60, 226, 163, 243, 60, 37, 91, 14, 63, 154, 215, 75, 63, 254, 211, 251, 61, 184, 160, 219, 62, 158, 15, 142, 61, 255, 247, 99, 61, 210, 249, 61, 61, 244, 113, 156, 61, 6, 103, 43, 61, 52, 156, 126, 61, 168, 179, 180, 60, 85, 196, 226, 60, 199, 136, 1, 61, 12, 204, 233, 62, 4, 173, 77, 63, 66, 58, 80, 62, 231, 174, 155, 62, 149, 104, 255, 61, 211, 211, 179, 61, 203, 168, 150, 61, 139, 229, 160, 61, 6, 91, 129, 61, 132, 83, 149, 61, 188, 21, 45, 61, 188, 167, 42, 61, 155, 127, 67, 61, 105, 139, 69, 63, 57, 15, 78, 61, 250, 59, 188, 60, 76, 222, 89, 61, 153, 121, 116, 60, 31, 65, 119, 60, 104, 39, 83, 60, 22, 189, 86, 59, 39, 137, 254, 59, 121, 52, 119, 60, 110, 128, 101, 60, 6, 195, 76, 60, 132, 184, 123, 60, 88, 217, 1, 64, 218, 253, 145, 63, 227, 243, 112, 62, 103, 121, 18, 62, 23, 208, 101, 60, 65, 5, 96, 61, 68, 172, 244, 60, 107, 173, 98, 60, 32, 171, 149, 60, 145, 174, 198, 61, 114, 81, 128, 60, 203, 59, 142, 61, 46, 245, 9, 60, 52, 217, 167, 63, 52, 67, 42, 63, 24, 219, 136, 62, 99, 72, 43, 62, 191, 191, 50, 61, 88, 120, 159, 61, 90, 35, 231, 60, 123, 33, 7, 61, 176, 33, 46, 61, 210, 1, 113, 61, 90, 186, 19, 61, 178, 70, 114, 61, 143, 128, 29, 61, 41, 34, 102, 63, 152, 113, 126, 62, 6, 242, 201, 61, 173, 101, 154, 61, 211, 11, 199, 60, 38, 154, 203, 60, 8, 181, 6, 61, 156, 62, 249, 60, 111, 172, 30, 61, 250, 174, 213, 60, 13, 95, 159, 60, 141, 40, 168, 60, 98, 191, 184, 60, 251, 151, 141, 63, 186, 136, 237, 62, 101, 141, 220, 61, 37, 58, 175, 62, 109, 95, 253, 61, 179, 249, 166, 61, 251, 247, 255, 60, 124, 200, 69, 61, 12, 166, 67, 61, 230, 78, 88, 61, 221, 137, 91, 61, 19, 189, 0, 61, 202, 54, 194, 60, 159, 138, 208, 63, 99, 218, 44, 63, 155, 106, 145, 62, 171, 210, 137, 62, 178, 250, 29, 62, 122, 18, 141, 61, 59, 218, 137, 61, 44, 28, 125, 61, 252, 103, 195, 61, 219, 157, 111, 61, 164, 120, 181, 61, 90, 117, 65, 61, 119, 164, 67, 61, 62, 28, 118, 63, 167, 0, 241, 60, 86, 15, 89, 61, 114, 7, 81, 61, 201, 209, 151, 60, 123, 90, 212, 60, 240, 148, 218, 60, 215, 52, 189, 60, 171, 33, 74, 61, 200, 103, 52, 61, 216, 79, 67, 60, 7, 41, 156, 60, 229, 122, 207, 60, 46, 85, 68, 62, 251, 40, 231, 61, 229, 118, 22, 62, 215, 133, 172, 61, 234, 19, 61, 61, 116, 29, 247, 60, 57, 130, 107, 61, 10, 135, 90, 61, 238, 116, 63, 61, 174, 66, 152, 61, 215, 103, 179, 60, 29, 219, 8, 61, 154, 204, 193, 60, 139, 33, 99, 62, 45, 193, 176, 61, 98, 248, 45, 62, 147, 160, 58, 62, 42, 187, 147, 61, 118, 179, 81, 61, 144, 168, 178, 61, 42, 64, 200, 61, 88, 223, 132, 61, 148, 210, 172, 61, 51, 7, 5, 61, 15, 1, 101, 61, 181, 41, 15, 61, 164, 233, 87, 63, 104, 39, 229, 62, 67, 98, 24, 61, 133, 84, 150, 60, 164, 92, 12, 62, 32, 210, 88, 61, 176, 154, 93, 60, 113, 218, 69, 60, 30, 77, 224, 60, 68, 4, 150, 60, 196, 93, 214, 59, 38, 46, 62, 61, 69, 169, 141, 60, 141, 82, 58, 64, 49, 31, 122, 63, 115, 35, 72, 62, 140, 136, 50, 62, 111, 44, 53, 62, 204, 56, 144, 61, 233, 19, 16, 61, 220, 159, 22, 61, 14, 80, 187, 60, 56, 189, 46, 61, 130, 77, 118, 60, 189, 91, 228, 60, 56, 84, 11, 61, 74, 29, 139, 64, 74, 111, 29, 63, 106, 212, 130, 62, 27, 195, 112, 62, 134, 63, 150, 62, 26, 115, 179, 61, 50, 46, 129, 61, 1, 169, 107, 61, 155, 26, 36, 61, 64, 130, 142, 61, 85, 72, 166, 60, 0, 204, 200, 61, 167, 160, 161, 61, 26, 147, 165, 63, 2, 207, 77, 62, 221, 180, 191, 61, 115, 32, 209, 61, 110, 114, 85, 61, 30, 174, 39, 61, 229, 79, 210, 60, 10, 209, 108, 61, 143, 178, 217, 60, 139, 7, 253, 60, 113, 187, 136, 60, 180, 21, 162, 60, 53, 15, 52, 60, 34, 83, 101, 63, 43, 129, 160, 62, 98, 109, 232, 61, 38, 9, 61, 62, 78, 40, 24, 62, 173, 20, 55, 61, 132, 214, 27, 61, 78, 80, 53, 61, 182, 1, 74, 61, 79, 2, 91, 61, 222, 183, 50, 61, 207, 106, 22, 61, 5, 15, 50, 61, 138, 111, 79, 63, 38, 62, 151, 62, 192, 170, 16, 62, 32, 230, 87, 62, 4, 231, 166, 61, 124, 79, 177, 61, 14, 37, 36, 61, 168, 255, 84, 61, 175, 219, 2, 61, 197, 41, 70, 61, 100, 125, 25, 61, 57, 153, 21, 61, 58, 118, 33, 61, 232, 6, 51, 63, 168, 171, 10, 62, 139, 129, 130, 61, 51, 2, 21, 62, 84, 239, 232, 61, 23, 146, 33, 61, 122, 10, 210, 60, 245, 2, 25, 61, 122, 89, 28, 61, 121, 64, 132, 61, 47, 223, 43, 61, 121, 249, 211, 60, 128, 119, 219, 60, 251, 193, 175, 63, 217, 109, 130, 62, 127, 113, 213, 61, 176, 45, 152, 62, 123, 31, 22, 62, 78, 103, 107, 61, 115, 215, 58, 61, 165, 180, 83, 61, 80, 66, 96, 61, 242, 0, 182, 61, 94, 190, 188, 60, 238, 45, 33, 61, 170, 83, 64, 61, 127, 218, 120, 63, 55, 51, 242, 62, 210, 219, 104, 62, 134, 129, 56, 62, 197, 46, 240, 61, 136, 125, 152, 61, 128, 128, 142, 61, 125, 52, 94, 61, 250, 41, 115, 61, 140, 78, 125, 61, 189, 247, 45, 61, 216, 196, 48, 61, 169, 121, 56, 61, 218, 238, 145, 64, 67, 14, 152, 62, 87, 231, 175, 62, 36, 143, 62, 61, 21, 141, 174, 61, 5, 230, 210, 60, 61, 166, 180, 60, 53, 144, 237, 60, 179, 125, 108, 61, 169, 22, 135, 61, 56, 177, 83, 61, 82, 176, 248, 60, 26, 179, 251, 60, 202, 4, 33, 64, 202, 180, 118, 63, 250, 21, 143, 62, 235, 254, 18, 62, 172, 46, 232, 61, 100, 71, 5, 62, 32, 15, 83, 61, 10, 218, 168, 60, 102, 21, 151, 61, 236, 203, 156, 61, 40, 31, 190, 61, 126, 108, 161, 60, 74, 150, 41, 61, 76, 164, 216, 64, 209, 191, 23, 63, 150, 81, 99, 63, 28, 159, 114, 62, 219, 225, 134, 62, 51, 163, 170, 61, 111, 104, 145, 61, 36, 91, 215, 60, 107, 23, 186, 61, 222, 46, 24, 62, 29, 199, 26, 62, 159, 228, 18, 61, 223, 214, 123, 61, 12, 51, 197, 62, 105, 56, 44, 61, 73, 233, 79, 61, 32, 5, 10, 61, 52, 57, 86, 61, 55, 33, 195, 60, 224, 213, 164, 60, 199, 209, 166, 60, 232, 70, 144, 60, 195, 165, 14, 61, 129, 41, 7, 61, 168, 10, 14, 61, 237, 190, 129, 60, 164, 226, 62, 63, 243, 47, 142, 61, 227, 19, 140, 61, 27, 88, 196, 61, 155, 188, 1, 61, 3, 5, 149, 61, 255, 142, 159, 60, 112, 144, 250, 60, 25, 86, 189, 60, 62, 186, 253, 60, 181, 72, 34, 61, 10, 56, 199, 60, 139, 32, 139, 60, 111, 51, 159, 62, 207, 43, 215, 61, 89, 180, 60, 61, 187, 71, 84, 61, 14, 8, 71, 61, 109, 249, 92, 61, 69, 122, 255, 60, 62, 188, 56, 61, 247, 115, 214, 60, 60, 54, 5, 61, 33, 216, 255, 60, 64, 81, 55, 61, 233, 206, 164, 60, 244, 113, 14, 63, 113, 233, 107, 61, 30, 79, 201, 60, 188, 247, 248, 60, 24, 109, 131, 60, 31, 0, 158, 61, 117, 0, 3, 61, 69, 31, 86, 60, 227, 21, 2, 61, 143, 87, 226, 59, 156, 65, 43, 60, 95, 144, 73, 60, 239, 148, 0, 60, 84, 208, 177, 62, 128, 5, 179, 60, 2, 84, 5, 61, 224, 202, 13, 61, 226, 11, 19, 61, 141, 105, 39, 61, 113, 249, 177, 60, 61, 41, 159, 60, 196, 107, 222, 60, 75, 205, 231, 60, 96, 4, 32, 60, 71, 194, 185, 60, 96, 137, 54, 60, 109, 26, 85, 62, 70, 66, 74, 61, 242, 131, 81, 61, 226, 63, 140, 61, 171, 21, 118, 61, 76, 182, 48, 61, 52, 218, 228, 60, 209, 39, 1, 61, 147, 231, 49, 61, 144, 128, 226, 60, 158, 188, 154, 60, 84, 65, 1, 61, 186, 157, 99, 60, 104, 115, 62, 63, 88, 80, 103, 61, 228, 29, 90, 60, 44, 142, 119, 62, 192, 218, 142, 60, 69, 187, 248, 60, 228, 189, 69, 60, 159, 111, 192, 60, 234, 220, 146, 61, 80, 151, 168, 60, 44, 16, 173, 60, 235, 174, 217, 60, 65, 217, 5, 61, 206, 59, 33, 63, 138, 44, 133, 61, 137, 184, 172, 60, 220, 129, 115, 61, 245, 173, 30, 61, 195, 218, 23, 61, 28, 187, 124, 60, 168, 12, 27, 61, 86, 65, 196, 60, 115, 195, 191, 60, 7, 211, 132, 60, 117, 246, 114, 60, 99, 154, 163, 60, 248, 235, 75, 62, 127, 49, 174, 61, 196, 31, 46, 61, 12, 132, 136, 61, 13, 23, 126, 61, 68, 208, 20, 61, 59, 113, 221, 60, 70, 255, 67, 61, 171, 6, 9, 61, 18, 33, 23, 61, 170, 208, 214, 60, 229, 163, 165, 60, 83, 2, 169, 60, 21, 179, 228, 62, 212, 187, 105, 61, 132, 145, 116, 61, 200, 234, 219, 60, 141, 113, 250, 60, 70, 217, 69, 61, 181, 57, 149, 60, 208, 103, 122, 60, 44, 182, 138, 60, 87, 1, 8, 61, 241, 121, 2, 61, 218, 48, 202, 60, 102, 54, 30, 60, 17, 170, 25, 63, 167, 63, 228, 60, 211, 218, 27, 61, 149, 134, 100, 61, 154, 4, 55, 61, 62, 248, 46, 61, 62, 231, 39, 60, 190, 163, 173, 60, 194, 103, 7, 61, 185, 150, 31, 61, 241, 15, 241, 60, 77, 207, 4, 61, 104, 50, 181, 60, 54, 1, 4, 62, 49, 222, 23, 61, 215, 247, 100, 61, 79, 125, 31, 61, 104, 219, 33, 61, 163, 122, 255, 60, 230, 143, 173, 60, 179, 118, 240, 60, 23, 141, 21, 61, 224, 222, 112, 61, 243, 133, 75, 61, 250, 131, 239, 60, 5, 119, 152, 60, 177, 202, 230, 62, 160, 155, 73, 61, 110, 163, 12, 61, 136, 252, 129, 61, 1, 55, 180, 61, 138, 166, 66, 61, 181, 130, 129, 60, 96, 164, 125, 60, 76, 80, 110, 60, 50, 217, 154, 61, 7, 65, 133, 60, 244, 100, 20, 60, 26, 57, 192, 60, 190, 190, 48, 62, 235, 0, 139, 61, 21, 133, 133, 60, 151, 193, 241, 60, 35, 174, 15, 61, 64, 53, 6, 61, 105, 184, 196, 60, 129, 40, 177, 60, 178, 216, 176, 60, 114, 127, 16, 61, 56, 231, 124, 60, 251, 30, 145, 60, 7, 1, 118, 60, 186, 217, 163, 62, 239, 193, 125, 61, 106, 211, 20, 61, 198, 32, 71, 61, 238, 126, 57, 61, 79, 186, 122, 61, 179, 20, 13, 61, 39, 61, 246, 60, 146, 59, 16, 61, 72, 0, 29, 61, 94, 49, 212, 60, 89, 158, 237, 60, 237, 137, 187, 60, 29, 48, 85, 64, 158, 165, 115, 62, 118, 189, 164, 62, 59, 9, 42, 62, 16, 53, 143, 61, 128, 188, 11, 61, 48, 74, 49, 61, 66, 243, 4, 61, 142, 250, 77, 61, 143, 197, 8, 61, 57, 242, 222, 60, 71, 38, 201, 60, 189, 227, 211, 60, 82, 10, 9, 63, 77, 19, 158, 61, 177, 42, 101, 61, 50, 229, 184, 61, 225, 8, 181, 60, 63, 12, 34, 61, 64, 10, 22, 61, 199, 53, 4, 61, 85, 195, 40, 61, 174, 63, 142, 61, 59, 158, 204, 60, 141, 205, 199, 60, 8, 22, 177, 60, 251, 245, 212, 62, 218, 35, 31, 62, 33, 49, 181, 61, 75, 236, 16, 62, 187, 124, 6, 61, 134, 25, 144, 61, 151, 87, 83, 61, 200, 62, 126, 61, 53, 85, 135, 61, 103, 71, 33, 61, 33, 14, 49, 61, 107, 7, 213, 60, 207, 162, 185, 60, 36, 249, 182, 62, 253, 20, 15, 61, 169, 178, 159, 60, 168, 94, 0, 62, 208, 0, 217, 60, 171, 144, 156, 60, 8, 19, 123, 60, 126, 231, 17, 61, 72, 91, 55, 60, 180, 28, 195, 60, 39, 60, 148, 60, 47, 41, 79, 60, 145, 199, 123, 60, 14, 32, 171, 62, 47, 130, 141, 61, 251, 135, 254, 60, 155, 122, 51, 61, 238, 164, 52, 61, 232, 1, 239, 60, 197, 68, 126, 60, 117, 25, 138, 60, 26, 146, 71, 60, 110, 77, 105, 60, 137, 75, 93, 60, 101, 152, 82, 60, 161, 222, 46, 60, 158, 249, 123, 62, 213, 171, 145, 61, 37, 141, 38, 61, 153, 181, 159, 61, 115, 172, 128, 61, 230, 170, 6, 61, 186, 124, 205, 60, 238, 91, 5, 61, 224, 158, 174, 60, 251, 227, 223, 60, 119, 74, 138, 60, 42, 11, 202, 60, 73, 213, 138, 60, 254, 2, 116, 63, 220, 171, 147, 61, 172, 48, 113, 61, 170, 162, 66, 61, 108, 57, 139, 60, 117, 97, 97, 61, 207, 237, 108, 60, 175, 242, 56, 60, 116, 209, 160, 60, 21, 83, 5, 60, 172, 247, 157, 60, 40, 148, 149, 60, 196, 159, 156, 60, 79, 29, 53, 63, 200, 133, 18, 61, 194, 64, 223, 60, 129, 240, 38, 61, 165, 96, 155, 60, 68, 251, 63, 61, 70, 70, 134, 60, 249, 25, 116, 60, 109, 225, 129, 60, 209, 212, 45, 60, 12, 138, 161, 60, 227, 186, 96, 60, 115, 9, 79, 60, 104, 40, 157, 62, 38, 95, 117, 61, 124, 119, 6, 61, 38, 222, 204, 61, 184, 56, 204, 60, 131, 168, 26, 61, 149, 132, 196, 60, 31, 13, 186, 60, 158, 140, 214, 60, 48, 110, 211, 60, 252, 28, 231, 60, 4, 54, 174, 60, 45, 189, 179, 60, 211, 139, 120, 62, 4, 64, 38, 60, 247, 75, 11, 60, 148, 112, 213, 59, 76, 235, 163, 59, 136, 17, 174, 59, 195, 75, 39, 60, 97, 81, 21, 60, 8, 162, 145, 59, 249, 86, 192, 59, 166, 28, 127, 59, 129, 165, 192, 59, 192, 119, 245, 59, 94, 227, 22, 61, 10, 93, 72, 60, 121, 55, 43, 60, 17, 143, 168, 60, 201, 206, 139, 60, 77, 227, 131, 60, 61, 34, 68, 60, 241, 210, 65, 60, 107, 59, 116, 60, 89, 30, 84, 60, 32, 17, 119, 60, 217, 136, 76, 60, 121, 82, 117, 60, 147, 250, 114, 61, 154, 15, 211, 60, 34, 27, 0, 61, 15, 216, 164, 60, 231, 120, 17, 61, 123, 188, 224, 60, 80, 203, 242, 60, 81, 187, 237, 60, 242, 40, 129, 60, 55, 83, 247, 60, 175, 18, 105, 60, 210, 63, 171, 60, 191, 9, 246, 60, 160, 81, 25, 62, 175, 209, 165, 60, 182, 188, 47, 60, 30, 52, 45, 60, 126, 220, 60, 60, 84, 90, 21, 60, 71, 224, 51, 60, 67, 66, 89, 60, 21, 8, 227, 59, 230, 188, 235, 59, 211, 190, 48, 60, 198, 18, 13, 60, 158, 49, 152, 59, 75, 35, 249, 60, 78, 59, 154, 60, 251, 3, 23, 61, 182, 200, 146, 60, 152, 174, 92, 60, 214, 70, 245, 59, 32, 92, 160, 60, 103, 169, 131, 60, 25, 131, 102, 60, 186, 152, 74, 60, 199, 15, 173, 60, 7, 146, 162, 60, 186, 189, 42, 60, 246, 126, 110, 61, 194, 182, 15, 61, 114, 232, 39, 61, 221, 160, 31, 61, 183, 89, 182, 60, 50, 41, 173, 60, 226, 145, 27, 61, 116, 67, 218, 60, 52, 96, 4, 61, 209, 229, 206, 60, 5, 255, 6, 61, 205, 152, 217, 60, 18, 202, 237, 60, 194, 137, 95, 62, 212, 141, 96, 60, 177, 39, 14, 60, 175, 173, 15, 60, 201, 215, 57, 60, 87, 29, 83, 60, 111, 209, 254, 59, 132, 126, 15, 60, 225, 89, 43, 60, 16, 212, 31, 60, 214, 222, 26, 60, 8, 211, 12, 60, 97, 11, 59, 60, 206, 126, 203, 60, 1, 51, 143, 60, 213, 195, 82, 60, 0, 55, 26, 60, 4, 142, 76, 60, 101, 43, 189, 60, 122, 154, 37, 60, 242, 231, 129, 60, 68, 158, 41, 60, 47, 6, 158, 60, 180, 144, 56, 60, 24, 71, 131, 60, 140, 183, 79, 60, 146, 128, 39, 61, 149, 62, 5, 61, 40, 155, 244, 60, 23, 212, 9, 61, 98, 225, 173, 60, 240, 66, 6, 61, 70, 103, 220, 60, 27, 113, 111, 60, 210, 139, 227, 60, 110, 221, 244, 60, 179, 254, 10, 61, 181, 2, 227, 60, 208, 16, 193, 60, 184, 64, 92, 62, 54, 199, 20, 60, 91, 59, 11, 60, 167, 87, 18, 60, 135, 10, 218, 59, 241, 182, 47, 60, 81, 255, 30, 60, 72, 77, 19, 60, 97, 129, 157, 59, 65, 228, 80, 59, 220, 180, 0, 60, 251, 114, 248, 59, 190, 195, 196, 59, 3, 115, 172, 60, 29, 87, 118, 60, 246, 251, 141, 60, 204, 40, 110, 60, 93, 219, 66, 60, 55, 151, 73, 60, 253, 185, 170, 60, 38, 90, 128, 60, 94, 183, 254, 59, 42, 69, 47, 60, 32, 233, 252, 59, 30, 123, 109, 60, 28, 235, 71, 60, 130, 5, 111, 61, 104, 41, 227, 60, 28, 204, 231, 60, 15, 120, 214, 60, 251, 48, 167, 60, 37, 154, 2, 61, 156, 235, 76, 61, 239, 220, 13, 61, 181, 225, 135, 60, 58, 139, 188, 60, 245, 82, 182, 60, 51, 147, 218, 60, 174, 61, 167, 60, 151, 46, 33, 62, 163, 146, 89, 60, 171, 59, 30, 60, 177, 20, 41, 60, 46, 205, 22, 60, 71, 103, 18, 60, 19, 191, 5, 60, 97, 230, 8, 60, 92, 77, 18, 60, 176, 123, 233, 59, 198, 45, 211, 59, 213, 163, 212, 59, 55, 83, 247, 59, 203, 3, 0, 61, 225, 206, 71, 60, 163, 104, 62, 60, 176, 67, 68, 60, 137, 38, 88, 60, 181, 130, 98, 60, 34, 162, 100, 60, 122, 76, 85, 60, 181, 45, 75, 60, 17, 254, 59, 60, 188, 172, 73, 60, 137, 133, 41, 60, 241, 133, 65, 60, 33, 144, 144, 61, 237, 193, 229, 60, 144, 161, 231, 60, 160, 244, 248, 60, 124, 148, 236, 60, 139, 94, 243, 60, 100, 199, 228, 60, 243, 222, 244, 60, 238, 128, 206, 60, 77, 20, 173, 60, 186, 113, 211, 60, 21, 9, 197, 60, 210, 163, 165, 60, 83, 88, 41, 62, 8, 123, 93, 60, 44, 55, 29, 60, 128, 112, 27, 60, 242, 108, 250, 59, 103, 23, 51, 60, 181, 69, 238, 59, 252, 218, 217, 59, 19, 15, 198, 59, 2, 63, 199, 59, 94, 236, 212, 59, 96, 99, 224, 59, 138, 69, 159, 59, 198, 103, 96, 61, 199, 67, 136, 60, 64, 53, 118, 60, 31, 152, 129, 60, 184, 104, 77, 60, 47, 18, 119, 60, 158, 44, 131, 60, 169, 44, 108, 60, 57, 59, 101, 60, 225, 101, 105, 60, 103, 54, 43, 60, 149, 221, 64, 60, 114, 53, 101, 60, 1, 85, 95, 61, 246, 149, 202, 60, 158, 69, 216, 60, 127, 58, 174, 60, 161, 100, 190, 60, 116, 156, 209, 60, 94, 171, 11, 61, 167, 87, 201, 60, 162, 99, 222, 60, 103, 54, 183, 60, 125, 224, 204, 60, 12, 75, 165, 60, 151, 114, 185, 60, 195, 113, 67, 62, 46, 164, 47, 60, 14, 180, 29, 60, 73, 232, 62, 60, 212, 100, 252, 59, 247, 153, 232, 59, 138, 191, 255, 59, 14, 100, 6, 60, 167, 195, 7, 60, 166, 20, 232, 59, 119, 5, 240, 59, 82, 112, 218, 59, 138, 32, 221, 59, 157, 235, 140, 61, 249, 185, 158, 60, 89, 46, 121, 60, 209, 81, 125, 60, 43, 96, 110, 60, 6, 1, 129, 60, 198, 242, 138, 60, 10, 75, 119, 60, 127, 169, 133, 60, 166, 216, 139, 60, 187, 124, 111, 60, 210, 204, 95, 60, 93, 185, 52, 60, 8, 228, 157, 61, 108, 250, 0, 61, 24, 38, 196, 60, 229, 232, 222, 60, 19, 36, 216, 60, 182, 247, 1, 61, 49, 200, 4, 61, 34, 166, 239, 60, 210, 86, 232, 60, 8, 207, 204, 60, 84, 241, 175, 60, 96, 177, 215, 60, 203, 80, 168, 60, 205, 207, 78, 62, 51, 226, 78, 60, 203, 84, 233, 59, 76, 78, 19, 60, 94, 35, 254, 59, 203, 75, 8, 60, 183, 30, 211, 59, 157, 62, 8, 60, 85, 11, 33, 60, 190, 52, 23, 60, 63, 1, 243, 59, 205, 119, 188, 59, 200, 167, 204, 59, 115, 145, 112, 61, 98, 66, 186, 60, 119, 185, 138, 60, 85, 227, 96, 60, 35, 98, 88, 60, 125, 4, 137, 60, 118, 68, 116, 60, 107, 194, 110, 60, 135, 42, 121, 60, 117, 112, 63, 60, 101, 145, 33, 60, 177, 219, 71, 60, 242, 221, 44, 60, 122, 194, 81, 61, 91, 71, 237, 60, 103, 132, 200, 60, 4, 127, 228, 60, 75, 219, 215, 60, 172, 119, 249, 60, 144, 120, 211, 60, 73, 253, 233, 60, 126, 32, 236, 60, 100, 17, 220, 60, 145, 219, 153, 60, 79, 209, 153, 60, 215, 219, 137, 60, 155, 15, 130, 61, 204, 27, 102, 60, 26, 102, 15, 60, 255, 138, 195, 60, 69, 30, 193, 59, 152, 253, 9, 60, 49, 129, 252, 59, 98, 53, 16, 60, 97, 144, 11, 60, 68, 98, 134, 60, 213, 72, 78, 60, 34, 165, 207, 59, 247, 229, 148, 59, 116, 230, 101, 61, 74, 17, 111, 60, 184, 200, 186, 60, 28, 31, 140, 60, 17, 200, 17, 60, 247, 166, 146, 60, 173, 228, 47, 60, 167, 164, 87, 60, 24, 90, 41, 60, 254, 69, 96, 60, 110, 7, 149, 60, 237, 103, 132, 60, 133, 40, 185, 60, 16, 12, 9, 62, 142, 197, 68, 61, 27, 30, 21, 61, 146, 22, 22, 61, 201, 254, 191, 60, 165, 141, 13, 61, 128, 168, 169, 60, 3, 209, 22, 61, 246, 19, 1, 61, 182, 13, 203, 60, 176, 237, 14, 61, 27, 253, 183, 60, 192, 147, 43, 61, 27, 144, 170, 61, 136, 56, 137, 60, 150, 90, 49, 60, 88, 37, 42, 60, 109, 24, 55, 60, 178, 87, 30, 60, 167, 105, 82, 60, 210, 56, 253, 59, 90, 67, 194, 59, 143, 244, 178, 59, 59, 228, 150, 59, 82, 65, 181, 59, 91, 132, 242, 59, 19, 239, 252, 60, 98, 121, 151, 60, 20, 152, 107, 60, 121, 171, 78, 60, 151, 12, 69, 60, 37, 251, 115, 60, 226, 107, 136, 60, 187, 26, 89, 60, 50, 177, 55, 60, 109, 161, 36, 60, 52, 151, 18, 60, 89, 199, 33, 60, 18, 49, 60, 60, 240, 117, 194, 61, 245, 201, 25, 61, 19, 184, 251, 60, 174, 158, 226, 60, 85, 140, 195, 60, 212, 234, 24, 61, 64, 157, 61, 61, 52, 49, 246, 60, 16, 139, 193, 60, 227, 90, 175, 60, 128, 187, 126, 60, 22, 43, 116, 60, 72, 82, 169, 60, 208, 170, 239, 61, 237, 218, 190, 60, 234, 189, 32, 60, 13, 218, 117, 60, 174, 97, 84, 60, 212, 63, 24, 60, 82, 227, 164, 59, 226, 44, 208, 59, 183, 58, 198, 59, 32, 184, 218, 59, 161, 167, 192, 59, 29, 10, 128, 59, 130, 178, 31, 60, 100, 154, 110, 61, 137, 13, 3, 61, 25, 83, 142, 60, 115, 70, 152, 60, 198, 198, 63, 60, 215, 72, 162, 60, 47, 243, 153, 60, 175, 11, 50, 60, 191, 84, 133, 60, 65, 2, 131, 60, 241, 91, 53, 60, 181, 151, 19, 60, 108, 136, 57, 60, 28, 209, 66, 61, 115, 178, 99, 61, 1, 30, 66, 61, 200, 183, 49, 61, 191, 19, 186, 60, 220, 226, 20, 61, 239, 149, 202, 60, 174, 166, 205, 60, 182, 41, 13, 61, 81, 160, 210, 60, 34, 203, 212, 60, 151, 246, 176, 60, 167, 88, 17, 61, 95, 121, 18, 62, 114, 141, 122, 60, 32, 180, 224, 59, 251, 241, 206, 59, 215, 34, 131, 60, 217, 74, 6, 60, 112, 49, 25, 60, 149, 26, 193, 59, 223, 54, 35, 60, 26, 206, 22, 60, 39, 39, 0, 60, 170, 73, 104, 59, 122, 30, 18, 60, 253, 80, 62, 62, 49, 46, 231, 60, 150, 169, 139, 60, 14, 67, 162, 60, 142, 255, 168, 60, 45, 192, 45, 60, 186, 87, 147, 60, 146, 73, 127, 60, 227, 7, 34, 60, 185, 106, 129, 60, 146, 108, 167, 60, 14, 244, 31, 60, 30, 63, 135, 60, 39, 5, 9, 62, 140, 171, 36, 61, 25, 125, 142, 60, 10, 37, 27, 61, 56, 224, 13, 61, 171, 46, 147, 60, 222, 91, 231, 60, 247, 158, 13, 61, 26, 149, 202, 60, 83, 110, 216, 60, 225, 39, 3, 61, 93, 207, 190, 60, 106, 194, 216, 60, 152, 175, 5, 63, 214, 191, 91, 61, 236, 8, 146, 60, 155, 6, 51, 61, 226, 224, 112, 61, 186, 177, 171, 60, 13, 108, 175, 60, 20, 117, 156, 60, 58, 80, 153, 60, 167, 128, 116, 60, 116, 70, 120, 60, 53, 73, 44, 60, 100, 150, 196, 60, 109, 149, 102, 62, 65, 247, 76, 61, 78, 32, 40, 61, 58, 50, 237, 60, 131, 88, 79, 61, 83, 242, 5, 61, 212, 166, 30, 61, 72, 200, 7, 61, 117, 167, 175, 60, 238, 222, 130, 60, 7, 48, 182, 60, 52, 109, 95, 60, 211, 65, 230, 60, 166, 249, 124, 62, 193, 138, 129, 61, 113, 241, 74, 61, 144, 208, 60, 61, 10, 234, 210, 61, 2, 49, 97, 61, 231, 242, 77, 61, 42, 161, 93, 61, 3, 130, 19, 61, 12, 133, 30, 61, 229, 197, 34, 61, 148, 183, 136, 60, 241, 35, 110, 61, 70, 166, 130, 62, 238, 190, 170, 60, 182, 119, 64, 60, 31, 161, 84, 60, 1, 120, 30, 60, 208, 247, 16, 60, 95, 68, 233, 59, 254, 43, 32, 60, 214, 221, 48, 60, 162, 208, 28, 60, 2, 86, 231, 59, 198, 23, 225, 59, 91, 86, 9, 60, 80, 198, 31, 61, 98, 83, 146, 60, 132, 243, 163, 60, 28, 41, 128, 60, 248, 79, 142, 60, 224, 182, 150, 60, 140, 129, 115, 60, 199, 7, 107, 60, 224, 105, 142, 60, 71, 204, 85, 60, 46, 198, 99, 60, 122, 18, 63, 60, 80, 189, 75, 60, 197, 49, 136, 61, 158, 193, 8, 61, 45, 234, 9, 61, 31, 12, 30, 61, 133, 226, 3, 61, 24, 59, 35, 61, 197, 79, 242, 60, 84, 15, 231, 60, 40, 206, 250, 60, 162, 108, 17, 61, 227, 215, 209, 60, 46, 13, 182, 60, 219, 167, 247, 60, 52, 94, 4, 63, 65, 209, 26, 60, 190, 218, 137, 60, 166, 95, 169, 60, 242, 93, 35, 60, 119, 71, 32, 60, 43, 253, 226, 59, 33, 113, 15, 60, 45, 103, 220, 59, 116, 201, 36, 60, 81, 245, 251, 59, 110, 140, 2, 60, 55, 194, 10, 60, 223, 158, 45, 61, 57, 64, 103, 60, 235, 132, 115, 60, 95, 243, 139, 60, 114, 230, 131, 60, 191, 232, 64, 60, 77, 92, 86, 60, 233, 157, 139, 60, 229, 43, 111, 60, 126, 143, 141, 60, 211, 171, 81, 60, 192, 126, 102, 60, 228, 240, 131, 60, 6, 184, 145, 61, 147, 174, 243, 60, 224, 0, 255, 60, 175, 91, 21, 61, 173, 110, 2, 61, 34, 148, 204, 60, 182, 26, 218, 60, 76, 253, 236, 60, 207, 177, 1, 61, 254, 0, 200, 60, 121, 110, 171, 60, 152, 139, 158, 60, 59, 103, 202, 60, 20, 55, 241, 62, 222, 169, 38, 61, 249, 174, 219, 60, 195, 200, 180, 60, 33, 217, 136, 60, 65, 78, 114, 60, 112, 149, 191, 60, 192, 249, 70, 60, 187, 224, 104, 60, 41, 11, 65, 60, 40, 48, 52, 60, 63, 77, 37, 60, 120, 49, 56, 60, 185, 7, 120, 62, 148, 131, 129, 61, 121, 230, 245, 60, 87, 77, 43, 61, 114, 197, 104, 61, 9, 130, 249, 60, 21, 246, 217, 60, 11, 175, 189, 60, 225, 110, 204, 60, 121, 225, 228, 60, 222, 216, 228, 60, 121, 126, 186, 60, 113, 142, 233, 60, 250, 173, 222, 62, 147, 72, 213, 61, 189, 89, 147, 61, 161, 139, 142, 61, 115, 23, 145, 61, 249, 222, 63, 61, 9, 51, 117, 61, 9, 33, 20, 61, 218, 210, 2, 61, 25, 78, 242, 60, 175, 11, 48, 61, 115, 94, 97, 61, 90, 245, 54, 61, 109, 222, 209, 62, 121, 211, 164, 60, 180, 144, 28, 61, 40, 237, 73, 60, 99, 163, 102, 60, 230, 111, 132, 60, 26, 61, 38, 60, 1, 17, 238, 59, 71, 94, 30, 60, 116, 145, 61, 60, 137, 207, 42, 60, 179, 147, 253, 59, 220, 175, 240, 59, 170, 132, 126, 63, 157, 142, 20, 62, 235, 118, 140, 61, 241, 37, 25, 61, 90, 139, 82, 61, 191, 202, 17, 61, 65, 240, 15, 61, 14, 242, 152, 60, 111, 166, 172, 60, 224, 213, 166, 60, 32, 120, 88, 60, 217, 234, 131, 60, 75, 164, 135, 60, 168, 23, 43, 63, 76, 42, 222, 61, 255, 236, 131, 61, 179, 80, 112, 61, 20, 199, 81, 61, 109, 102, 19, 61, 182, 114, 71, 61, 128, 35, 229, 60, 204, 113, 248, 60, 15, 20, 30, 61, 240, 37, 15, 61, 133, 34, 218, 60, 236, 210, 204, 60, 175, 134, 134, 63, 48, 114, 2, 62, 213, 56, 217, 61, 242, 22, 5, 61, 235, 248, 154, 61, 225, 152, 200, 60, 162, 202, 15, 61, 106, 166, 156, 60, 192, 233, 85, 60, 21, 219, 140, 60, 130, 228, 190, 60, 136, 88, 197, 60, 84, 100, 94, 60, 57, 110, 240, 62, 90, 174, 105, 61, 162, 76, 123, 61, 232, 152, 190, 60, 136, 89, 79, 61, 118, 247, 198, 60, 92, 185, 239, 60, 127, 49, 219, 60, 23, 22, 178, 60, 151, 181, 135, 60, 225, 5, 138, 60, 254, 144, 217, 60, 221, 161, 143, 60, 101, 74, 74, 64, 192, 208, 43, 63, 150, 224, 245, 61, 165, 214, 120, 61, 45, 145, 28, 62, 63, 65, 97, 61, 240, 53, 48, 61, 180, 221, 49, 61, 210, 97, 236, 60, 68, 141, 248, 60, 117, 236, 19, 61, 97, 166, 44, 61, 174, 18, 27, 61, 245, 115, 251, 62, 160, 96, 98, 61, 85, 232, 26, 60, 253, 135, 169, 60, 216, 234, 167, 60, 71, 24, 117, 60, 48, 135, 116, 60, 44, 102, 29, 60, 188, 140, 24, 60, 66, 199, 27, 60, 24, 109, 215, 59, 89, 96, 62, 60, 107, 101, 234, 59, 51, 24, 167, 62, 148, 95, 150, 61, 174, 92, 57, 61, 128, 180, 12, 61, 36, 190, 248, 60, 169, 118, 228, 60, 220, 120, 247, 60, 225, 162, 187, 60, 111, 115, 191, 60, 114, 53, 9, 61, 90, 243, 202, 60, 183, 222, 163, 60, 206, 3, 126, 60, 36, 193, 243, 62, 64, 210, 93, 62, 131, 21, 128, 61, 188, 12, 76, 61, 56, 0, 42, 61, 18, 62, 129, 61, 19, 252, 48, 61, 115, 232, 99, 61, 152, 199, 47, 61, 184, 54, 59, 61, 67, 199, 45, 61, 197, 12, 33, 61, 148, 33, 5, 61, 133, 32, 25, 63, 228, 54, 162, 61, 237, 60, 2, 61]).concat([187, 251, 158, 61, 116, 58, 94, 61, 159, 244, 136, 61, 17, 217, 19, 61, 171, 148, 255, 60, 119, 152, 221, 60, 251, 250, 204, 60, 50, 54, 94, 60, 145, 32, 104, 60, 2, 176, 9, 60, 163, 246, 56, 63, 17, 26, 110, 62, 150, 221, 57, 61, 1, 86, 29, 61, 27, 185, 21, 61, 127, 250, 46, 61, 68, 104, 204, 60, 13, 78, 6, 61, 166, 119, 51, 61, 16, 239, 13, 61, 150, 138, 109, 60, 214, 183, 243, 59, 103, 60, 168, 60, 151, 138, 252, 62, 161, 134, 89, 62, 17, 12, 183, 61, 135, 149, 183, 61, 179, 47, 239, 61, 164, 174, 200, 61, 201, 224, 106, 61, 103, 169, 144, 61, 131, 191, 75, 61, 108, 12, 76, 61, 179, 213, 50, 61, 221, 102, 213, 60, 206, 117, 242, 60, 169, 120, 225, 62, 219, 143, 240, 61, 146, 159, 143, 61, 118, 254, 54, 61, 130, 126, 217, 60, 15, 20, 171, 60, 152, 21, 5, 60, 148, 86, 0, 60, 196, 93, 57, 60, 139, 112, 35, 60, 59, 87, 48, 60, 188, 158, 16, 60, 139, 248, 21, 60, 22, 83, 20, 62, 188, 128, 38, 61, 233, 25, 22, 61, 104, 247, 25, 61, 217, 143, 3, 61, 114, 86, 171, 60, 170, 149, 162, 60, 141, 44, 179, 60, 91, 248, 134, 60, 28, 162, 73, 60, 115, 52, 128, 60, 67, 0, 71, 60, 28, 169, 98, 60, 70, 136, 121, 61, 29, 140, 20, 61, 106, 240, 80, 61, 219, 203, 44, 61, 15, 96, 2, 61, 154, 34, 228, 60, 162, 172, 224, 60, 150, 171, 175, 60, 152, 158, 187, 60, 253, 76, 164, 60, 59, 42, 218, 60, 36, 22, 150, 60, 51, 137, 143, 60, 8, 166, 5, 62, 101, 151, 137, 60, 197, 194, 42, 60, 76, 249, 12, 60, 1, 108, 122, 60, 42, 3, 23, 60, 185, 152, 2, 60, 81, 87, 198, 59, 140, 201, 224, 59, 80, 94, 231, 59, 56, 225, 238, 59, 22, 147, 5, 60, 77, 130, 207, 59, 50, 142, 60, 61, 14, 112, 159, 60, 206, 142, 157, 60, 204, 174, 134, 60, 88, 26, 105, 60, 238, 208, 118, 60, 192, 27, 75, 60, 59, 155, 80, 60, 131, 140, 56, 60, 60, 227, 66, 60, 137, 159, 12, 60, 40, 246, 111, 60, 47, 114, 96, 60, 76, 41, 140, 61, 235, 101, 20, 61, 107, 236, 213, 60, 114, 223, 254, 60, 12, 184, 9, 61, 160, 196, 247, 60, 55, 118, 192, 60, 42, 64, 193, 60, 49, 139, 159, 60, 179, 194, 162, 60, 237, 198, 131, 60, 27, 147, 225, 60, 222, 190, 248, 60, 136, 9, 10, 62, 133, 135, 93, 60, 245, 119, 39, 60, 223, 29, 13, 60, 172, 234, 70, 60, 24, 252, 29, 60, 203, 86, 14, 60, 132, 54, 255, 59, 52, 4, 248, 59, 246, 247, 17, 60, 165, 124, 170, 59, 110, 132, 227, 59, 254, 172, 242, 59, 57, 163, 14, 61, 161, 188, 130, 60, 163, 191, 156, 60, 140, 63, 158, 60, 241, 229, 162, 60, 114, 148, 129, 60, 231, 11, 86, 60, 232, 0, 62, 60, 50, 78, 58, 60, 188, 41, 88, 60, 124, 246, 68, 60, 115, 143, 131, 60, 196, 18, 48, 60, 78, 69, 146, 61, 25, 166, 1, 61, 107, 98, 52, 61, 102, 126, 7, 61, 213, 60, 17, 61, 63, 72, 12, 61, 249, 51, 2, 61, 120, 41, 208, 60, 161, 125, 213, 60, 80, 115, 201, 60, 27, 89, 211, 60, 129, 228, 3, 61, 167, 117, 172, 60, 99, 174, 74, 62, 137, 142, 231, 60, 106, 187, 30, 60, 67, 185, 11, 60, 69, 99, 101, 60, 210, 173, 133, 60, 61, 70, 74, 60, 230, 49, 23, 60, 187, 165, 212, 59, 132, 191, 20, 60, 68, 34, 216, 59, 125, 36, 23, 60, 186, 118, 49, 60, 163, 63, 37, 62, 128, 246, 22, 61, 180, 182, 185, 60, 205, 142, 92, 60, 218, 16, 161, 60, 64, 37, 151, 60, 51, 252, 253, 60, 47, 234, 227, 60, 78, 196, 101, 60, 37, 98, 171, 60, 19, 33, 169, 60, 13, 38, 79, 60, 3, 52, 84, 60, 243, 156, 76, 62, 236, 130, 136, 61, 243, 55, 29, 61, 161, 63, 185, 60, 164, 168, 29, 61, 210, 57, 0, 61, 68, 16, 95, 61, 0, 197, 26, 61, 202, 17, 208, 60, 88, 251, 7, 61, 42, 247, 6, 61, 190, 147, 6, 61, 246, 64, 230, 60, 165, 145, 150, 62, 12, 38, 5, 61, 14, 236, 145, 60, 21, 79, 234, 60, 106, 182, 169, 60, 240, 180, 83, 60, 46, 197, 104, 60, 126, 79, 229, 59, 42, 81, 250, 59, 150, 126, 43, 60, 228, 163, 16, 60, 65, 30, 227, 59, 52, 8, 209, 59, 225, 220, 80, 61, 154, 67, 0, 61, 53, 4, 200, 60, 61, 247, 241, 60, 147, 183, 142, 60, 207, 162, 67, 60, 247, 89, 121, 60, 250, 48, 122, 60, 80, 167, 138, 60, 23, 68, 135, 60, 121, 213, 97, 60, 205, 93, 40, 60, 46, 24, 40, 60, 169, 8, 156, 61, 206, 147, 70, 61, 83, 13, 41, 61, 12, 142, 46, 61, 155, 120, 254, 60, 181, 112, 173, 60, 107, 228, 223, 60, 189, 199, 172, 60, 161, 80, 228, 60, 135, 122, 236, 60, 230, 192, 232, 60, 173, 68, 217, 60, 23, 242, 194, 60, 98, 202, 155, 62, 31, 216, 45, 60, 167, 168, 42, 60, 254, 184, 24, 60, 232, 86, 237, 59, 192, 233, 234, 59, 198, 49, 224, 59, 100, 12, 243, 59, 41, 192, 222, 59, 12, 118, 200, 59, 90, 0, 242, 59, 240, 76, 232, 59, 161, 214, 223, 59, 128, 94, 57, 61, 148, 198, 120, 60, 57, 238, 101, 60, 71, 174, 93, 60, 104, 208, 94, 60, 234, 196, 90, 60, 67, 56, 99, 60, 209, 210, 78, 60, 115, 140, 96, 60, 190, 154, 55, 60, 68, 235, 122, 60, 107, 15, 82, 60, 84, 232, 61, 60, 33, 107, 154, 61, 66, 178, 253, 60, 184, 180, 235, 60, 124, 253, 214, 60, 196, 145, 232, 60, 0, 178, 206, 60, 65, 72, 249, 60, 2, 158, 224, 60, 253, 120, 248, 60, 198, 112, 177, 60, 219, 207, 232, 60, 184, 239, 206, 60, 50, 154, 207, 60, 111, 66, 185, 62, 96, 85, 68, 60, 53, 174, 49, 60, 128, 72, 231, 59, 189, 27, 0, 60, 218, 25, 2, 60, 96, 64, 17, 60, 7, 202, 207, 59, 187, 251, 3, 60, 65, 150, 6, 60, 96, 231, 17, 60, 37, 87, 248, 59, 56, 233, 234, 59, 77, 205, 199, 60, 193, 16, 131, 60, 159, 3, 123, 60, 124, 7, 69, 60, 204, 112, 66, 60, 21, 141, 58, 60, 206, 174, 76, 60, 208, 170, 66, 60, 98, 118, 54, 60, 156, 108, 55, 60, 115, 71, 56, 60, 46, 120, 67, 60, 222, 69, 58, 60, 10, 78, 61, 61, 19, 188, 237, 60, 114, 101, 1, 61, 71, 207, 197, 60, 230, 167, 246, 60, 157, 210, 209, 60, 118, 169, 0, 61, 157, 98, 3, 61, 137, 115, 252, 60, 149, 251, 239, 60, 227, 218, 251, 60, 56, 47, 214, 60, 77, 241, 170, 60, 148, 101, 161, 62, 221, 73, 54, 60, 118, 107, 32, 60, 115, 183, 208, 59, 255, 75, 245, 59, 70, 101, 12, 60, 52, 14, 12, 60, 84, 154, 32, 60, 177, 215, 252, 59, 217, 217, 254, 59, 128, 253, 10, 60, 167, 254, 178, 59, 100, 21, 180, 59, 224, 232, 19, 61, 45, 152, 116, 60, 133, 214, 100, 60, 208, 65, 47, 60, 185, 141, 74, 60, 139, 159, 82, 60, 74, 0, 132, 60, 80, 76, 127, 60, 96, 162, 95, 60, 74, 129, 62, 60, 204, 226, 103, 60, 244, 96, 125, 60, 109, 92, 76, 60, 109, 58, 154, 61, 156, 197, 18, 61, 133, 9, 2, 61, 19, 155, 248, 60, 6, 232, 192, 60, 170, 84, 194, 60, 67, 217, 249, 60, 105, 131, 220, 60, 152, 205, 216, 60, 187, 240, 207, 60, 109, 29, 230, 60, 187, 223, 185, 60, 86, 82, 180, 60, 23, 82, 82, 63, 248, 187, 144, 61, 92, 93, 9, 61, 37, 132, 14, 61, 50, 184, 10, 61, 32, 233, 184, 60, 50, 150, 88, 60, 6, 179, 238, 59, 182, 175, 151, 60, 243, 136, 20, 60, 52, 130, 23, 60, 117, 210, 56, 60, 201, 237, 34, 60, 35, 25, 242, 61, 116, 40, 185, 61, 147, 170, 238, 60, 98, 29, 201, 60, 152, 141, 142, 61, 49, 196, 165, 60, 73, 224, 117, 60, 114, 47, 175, 60, 195, 75, 46, 60, 19, 210, 5, 60, 56, 88, 193, 59, 214, 229, 92, 60, 18, 93, 247, 60, 234, 39, 163, 62, 129, 65, 92, 62, 132, 189, 182, 61, 193, 184, 35, 61, 102, 142, 252, 61, 147, 75, 116, 61, 155, 132, 4, 61, 64, 170, 30, 61, 254, 215, 36, 61, 66, 153, 239, 60, 189, 137, 19, 61, 195, 206, 219, 60, 59, 136, 190, 60, 151, 127, 45, 61, 57, 28, 32, 60, 237, 235, 30, 61, 28, 68, 5, 61, 6, 202, 1, 60, 125, 58, 1, 60, 88, 72, 218, 59, 68, 172, 38, 60, 149, 170, 30, 60, 106, 194, 170, 59, 167, 11, 24, 60, 73, 223, 182, 59, 154, 149, 14, 60, 193, 213, 19, 61, 79, 234, 140, 60, 221, 206, 152, 60, 218, 39, 136, 60, 81, 143, 80, 60, 23, 186, 168, 60, 13, 10, 148, 60, 214, 156, 36, 60, 172, 35, 127, 60, 203, 141, 112, 60, 145, 56, 126, 60, 187, 157, 14, 60, 1, 151, 64, 60, 13, 165, 141, 61, 15, 177, 17, 61, 95, 237, 48, 61, 56, 240, 1, 61, 139, 112, 219, 60, 52, 241, 68, 61, 54, 100, 2, 61, 239, 131, 102, 60, 201, 95, 220, 60, 54, 204, 144, 60, 167, 87, 169, 60, 95, 84, 86, 60, 67, 122, 183, 60, 229, 168, 20, 61, 170, 5, 95, 60, 250, 21, 197, 60, 254, 118, 38, 61, 189, 153, 76, 60, 128, 230, 96, 60, 167, 231, 116, 60, 84, 165, 2, 60, 243, 183, 42, 60, 109, 76, 25, 60, 27, 37, 9, 60, 198, 215, 2, 60, 130, 75, 223, 59, 6, 163, 185, 60, 125, 109, 99, 60, 94, 90, 198, 60, 50, 235, 133, 60, 168, 40, 76, 60, 195, 193, 138, 60, 7, 217, 175, 60, 99, 178, 182, 60, 188, 2, 67, 60, 163, 47, 134, 60, 204, 123, 81, 60, 47, 228, 8, 60, 131, 231, 57, 60, 237, 251, 6, 61, 174, 77, 15, 61, 206, 150, 46, 61, 216, 61, 250, 60, 52, 25, 249, 60, 22, 37, 242, 60, 207, 21, 35, 61, 125, 219, 28, 61, 225, 69, 89, 60, 171, 173, 222, 60, 149, 26, 0, 61, 243, 5, 178, 60, 4, 233, 200, 60, 200, 187, 23, 62, 35, 171, 51, 61, 56, 47, 9, 62, 227, 228, 103, 60, 137, 197, 98, 60, 82, 122, 85, 60, 190, 88, 213, 59, 26, 159, 18, 60, 156, 101, 11, 60, 0, 216, 7, 60, 240, 48, 12, 60, 12, 91, 244, 59, 72, 142, 144, 59, 11, 142, 92, 62, 147, 180, 141, 61, 206, 129, 0, 61, 136, 253, 117, 60, 229, 120, 111, 60, 173, 92, 103, 60, 249, 234, 24, 60, 18, 149, 74, 60, 211, 34, 135, 60, 252, 217, 81, 60, 75, 171, 131, 60, 132, 213, 29, 60, 202, 169, 135, 59, 190, 110, 51, 62, 168, 74, 152, 61, 198, 233, 57, 61, 191, 133, 208, 60, 134, 239, 171, 60, 37, 104, 236, 60, 4, 39, 120, 60, 132, 151, 167, 60, 79, 128, 227, 60, 89, 62, 193, 60, 27, 101, 219, 60, 52, 41, 142, 60, 164, 45, 133, 60, 145, 177, 111, 61, 252, 56, 145, 60, 234, 83, 30, 60, 203, 216, 128, 60, 120, 142, 214, 59, 16, 151, 231, 59, 63, 184, 202, 59, 206, 218, 194, 59, 43, 54, 171, 60, 155, 27, 173, 59, 212, 96, 31, 60, 234, 40, 173, 59, 54, 174, 209, 59, 167, 17, 41, 61, 188, 78, 52, 60, 129, 167, 206, 59, 194, 94, 95, 60, 6, 203, 61, 60, 122, 212, 82, 60, 82, 58, 247, 59, 133, 70, 87, 60, 43, 96, 152, 60, 83, 107, 27, 60, 193, 47, 172, 59, 179, 47, 12, 60, 214, 100, 164, 59, 116, 234, 26, 62, 83, 34, 52, 61, 203, 104, 46, 61, 18, 154, 158, 61, 68, 173, 249, 60, 117, 137, 146, 61, 67, 102, 5, 61, 72, 173, 239, 60, 37, 157, 22, 61, 184, 15, 245, 60, 32, 78, 103, 60, 30, 195, 185, 60, 138, 187, 9, 61, 126, 191, 200, 61, 196, 55, 101, 60, 238, 254, 37, 60, 213, 96, 128, 60, 202, 240, 50, 60, 81, 198, 115, 59, 28, 46, 15, 60, 6, 211, 11, 60, 57, 10, 9, 60, 189, 38, 16, 60, 75, 107, 217, 59, 191, 75, 157, 59, 250, 193, 209, 59, 191, 151, 7, 61, 221, 170, 151, 60, 241, 160, 48, 60, 132, 129, 47, 60, 212, 150, 117, 60, 187, 87, 94, 60, 213, 81, 73, 60, 107, 199, 99, 60, 12, 252, 94, 60, 144, 152, 79, 60, 205, 157, 228, 59, 97, 241, 35, 60, 157, 203, 55, 60, 233, 157, 115, 61, 5, 12, 208, 60, 89, 191, 183, 60, 182, 2, 181, 60, 50, 17, 228, 60, 204, 14, 196, 60, 188, 135, 157, 60, 179, 69, 161, 60, 26, 208, 148, 60, 53, 86, 196, 60, 147, 20, 137, 60, 17, 105, 179, 60, 57, 159, 220, 60, 137, 103, 139, 61, 19, 96, 99, 60, 47, 138, 17, 60, 209, 192, 38, 60, 220, 77, 171, 60, 2, 251, 26, 60, 155, 74, 168, 59, 29, 168, 167, 59, 210, 246, 123, 59, 2, 186, 233, 59, 231, 71, 191, 59, 234, 251, 186, 59, 136, 192, 241, 59, 228, 79, 177, 60, 33, 160, 102, 60, 206, 181, 64, 60, 122, 205, 111, 60, 168, 222, 110, 60, 124, 76, 124, 60, 220, 175, 20, 60, 223, 153, 192, 59, 9, 29, 67, 60, 56, 186, 69, 60, 159, 113, 9, 60, 44, 235, 237, 59, 122, 31, 64, 60, 4, 180, 53, 61, 27, 234, 246, 60, 172, 106, 181, 60, 200, 190, 215, 60, 152, 0, 201, 60, 202, 178, 2, 61, 169, 119, 223, 60, 223, 109, 126, 60, 110, 125, 191, 60, 166, 111, 153, 60, 15, 20, 149, 60, 176, 217, 114, 60, 52, 109, 167, 60, 214, 17, 176, 60, 137, 156, 113, 60, 114, 125, 199, 59, 197, 123, 83, 60, 8, 237, 39, 60, 70, 26, 2, 60, 32, 140, 11, 60, 222, 17, 139, 59, 98, 117, 228, 59, 123, 56, 40, 60, 162, 191, 66, 60, 179, 30, 210, 59, 210, 68, 203, 59, 11, 85, 233, 60, 224, 118, 83, 60, 246, 162, 129, 60, 57, 235, 134, 60, 115, 198, 35, 60, 74, 219, 77, 60, 253, 197, 94, 60, 198, 35, 139, 60, 127, 250, 116, 60, 116, 222, 74, 60, 99, 119, 212, 60, 158, 137, 146, 60, 43, 10, 43, 60, 194, 143, 211, 61, 25, 185, 0, 61, 250, 215, 191, 60, 187, 174, 22, 61, 155, 15, 199, 60, 63, 17, 184, 60, 77, 224, 241, 60, 52, 184, 55, 61, 171, 175, 9, 61, 200, 26, 249, 60, 224, 130, 18, 61, 234, 231, 214, 60, 30, 26, 171, 60, 46, 29, 53, 62, 245, 95, 33, 60, 32, 26, 243, 59, 208, 206, 62, 60, 42, 37, 169, 59, 155, 188, 131, 59, 7, 178, 189, 59, 11, 34, 40, 60, 116, 149, 231, 59, 11, 177, 84, 59, 149, 3, 147, 59, 27, 106, 186, 59, 110, 54, 165, 59, 92, 57, 157, 61, 4, 184, 138, 61, 252, 60, 29, 61, 21, 3, 184, 60, 159, 241, 211, 60, 253, 1, 110, 60, 14, 163, 155, 60, 62, 17, 135, 60, 90, 75, 82, 60, 150, 108, 133, 60, 17, 96, 134, 60, 41, 147, 167, 60, 153, 200, 169, 60, 47, 0, 13, 62, 150, 34, 174, 61, 127, 207, 88, 61, 176, 132, 26, 61, 24, 202, 99, 61, 228, 231, 95, 61, 161, 77, 45, 61, 141, 45, 99, 61, 29, 138, 36, 61, 236, 241, 9, 61, 153, 253, 148, 60, 166, 9, 83, 60, 33, 111, 219, 60, 222, 23, 37, 62, 144, 88, 76, 61, 211, 210, 10, 61, 15, 240, 126, 60, 149, 104, 122, 60, 15, 29, 238, 59, 200, 67, 11, 60, 42, 213, 53, 60, 98, 58, 165, 59, 160, 7, 212, 59, 227, 211, 226, 59, 26, 166, 32, 60, 132, 242, 198, 59, 139, 102, 177, 61, 193, 147, 43, 61, 45, 94, 50, 61, 203, 133, 242, 60, 68, 225, 115, 60, 45, 97, 17, 60, 90, 167, 157, 60, 108, 190, 135, 60, 253, 123, 59, 60, 146, 181, 127, 60, 170, 34, 62, 60, 51, 4, 206, 59, 125, 229, 54, 60, 104, 101, 72, 62, 104, 78, 16, 62, 136, 233, 181, 61, 150, 232, 150, 61, 24, 1, 72, 61, 209, 145, 24, 61, 63, 175, 242, 60, 91, 200, 233, 60, 169, 55, 202, 60, 57, 82, 3, 61, 175, 46, 185, 60, 221, 173, 167, 60, 68, 109, 243, 60, 245, 212, 206, 60, 241, 201, 208, 60, 100, 45, 148, 60, 120, 126, 144, 60, 139, 73, 72, 60, 1, 5, 55, 60, 88, 250, 79, 60, 32, 174, 78, 60, 64, 177, 46, 60, 78, 182, 215, 59, 112, 239, 57, 59, 146, 74, 0, 60, 129, 153, 35, 60, 18, 225, 159, 61, 105, 177, 120, 61, 101, 195, 235, 60, 47, 101, 214, 60, 175, 250, 109, 60, 0, 44, 33, 60, 116, 71, 155, 60, 111, 82, 129, 60, 77, 45, 68, 60, 153, 148, 153, 60, 136, 98, 77, 60, 161, 27, 128, 60, 125, 29, 97, 60, 123, 214, 9, 62, 10, 154, 247, 61, 128, 234, 146, 61, 20, 91, 122, 61, 115, 169, 86, 61, 174, 235, 34, 61, 170, 15, 52, 61, 53, 162, 21, 61, 94, 149, 186, 60, 44, 55, 138, 60, 207, 134, 114, 60, 121, 247, 199, 60, 37, 154, 135, 60, 194, 42, 200, 61, 163, 80, 123, 59, 230, 31, 116, 60, 199, 22, 71, 60, 194, 200, 123, 59, 133, 109, 121, 59, 160, 56, 176, 59, 32, 81, 166, 59, 143, 6, 32, 59, 203, 15, 118, 59, 19, 202, 177, 59, 232, 121, 208, 59, 117, 108, 155, 59, 230, 45, 15, 62, 172, 63, 201, 61, 60, 216, 148, 61, 76, 237, 27, 61, 115, 237, 206, 60, 147, 209, 225, 60, 167, 204, 2, 61, 71, 250, 161, 60, 163, 130, 78, 60, 84, 163, 116, 60, 71, 204, 136, 60, 181, 44, 116, 60, 92, 227, 248, 59, 181, 137, 34, 62, 17, 37, 48, 62, 163, 116, 194, 61, 225, 212, 104, 61, 169, 248, 112, 61, 73, 146, 63, 61, 198, 230, 93, 61, 215, 114, 233, 60, 113, 44, 160, 60, 115, 105, 182, 60, 112, 127, 4, 61, 239, 19, 14, 61, 104, 253, 1, 61, 205, 159, 162, 62, 50, 167, 107, 61, 143, 136, 234, 60, 163, 57, 180, 60, 167, 9, 199, 60, 31, 251, 154, 60, 122, 82, 57, 60, 210, 39, 37, 60, 164, 160, 147, 60, 190, 62, 62, 60, 188, 206, 49, 60, 242, 188, 46, 60, 238, 73, 84, 60, 174, 205, 205, 61, 201, 202, 227, 60, 100, 80, 186, 60, 32, 231, 157, 60, 39, 126, 133, 60, 86, 229, 159, 60, 254, 133, 137, 60, 168, 171, 154, 60, 89, 134, 121, 60, 205, 136, 73, 60, 226, 245, 71, 60, 130, 245, 3, 60, 243, 163, 150, 60, 131, 145, 146, 62, 192, 46, 39, 62, 89, 178, 142, 61, 104, 10, 151, 61, 193, 24, 59, 61, 8, 127, 53, 61, 255, 39, 50, 61, 136, 43, 63, 61, 204, 238, 28, 61, 49, 175, 7, 61, 49, 137, 201, 60, 216, 132, 12, 61, 3, 242, 176, 60, 22, 215, 184, 62, 194, 241, 181, 61, 127, 75, 250, 60, 186, 172, 157, 60, 79, 132, 57, 60, 79, 225, 111, 60, 86, 11, 13, 60, 89, 187, 6, 60, 29, 231, 36, 60, 250, 165, 204, 59, 139, 132, 15, 60, 1, 194, 202, 59, 18, 204, 17, 60, 65, 53, 210, 62, 89, 140, 55, 62, 143, 74, 196, 61, 146, 49, 142, 61, 69, 92, 106, 61, 241, 212, 9, 61, 56, 65, 176, 60, 135, 228, 156, 60, 99, 197, 158, 60, 135, 86, 71, 60, 199, 20, 76, 60, 158, 34, 146, 60, 185, 126, 150, 60, 201, 163, 128, 62, 240, 104, 69, 62, 78, 110, 237, 61, 113, 233, 189, 61, 248, 80, 165, 61, 20, 78, 129, 61, 133, 3, 84, 61, 120, 38, 21, 61, 31, 115, 212, 60, 125, 122, 157, 60, 133, 93, 178, 60, 36, 17, 223, 60, 131, 88, 19, 61, 227, 222, 214, 62, 163, 56, 253, 61, 116, 155, 223, 61, 76, 33, 46, 62, 176, 188, 176, 61, 189, 101, 18, 61, 77, 108, 103, 61, 175, 159, 17, 61, 114, 237, 107, 60, 26, 16, 11, 61, 130, 178, 106, 60, 198, 96, 143, 60, 209, 120, 10, 61, 223, 177, 70, 63, 114, 69, 154, 62, 212, 157, 72, 62, 97, 194, 162, 61, 223, 130, 204, 61, 170, 126, 248, 61, 64, 47, 157, 61, 206, 6, 117, 61, 113, 86, 230, 60, 238, 219, 207, 60, 38, 148, 186, 60, 4, 44, 130, 60, 239, 0, 140, 60, 50, 232, 215, 62, 252, 227, 17, 62, 170, 175, 50, 62, 85, 146, 69, 62, 238, 226, 71, 62, 244, 98, 185, 61, 35, 124, 93, 61, 84, 204, 141, 61, 238, 27, 139, 61, 77, 109, 74, 61, 222, 63, 4, 61, 139, 63, 0, 61, 177, 125, 12, 61, 237, 164, 156, 62, 171, 76, 178, 61, 130, 148, 88, 61, 61, 251, 249, 60, 106, 69, 88, 60, 134, 235, 12, 60, 81, 175, 129, 60, 249, 39, 21, 60, 221, 116, 19, 60, 192, 135, 229, 59, 11, 27, 248, 59, 242, 132, 16, 60, 217, 121, 32, 60, 150, 89, 131, 62, 180, 126, 5, 62, 189, 47, 148, 61, 249, 34, 37, 61, 161, 155, 100, 61, 7, 185, 208, 60, 107, 174, 11, 61, 197, 148, 203, 60, 99, 179, 162, 60, 77, 43, 91, 60, 28, 29, 68, 60, 6, 118, 82, 60, 10, 84, 215, 59, 222, 31, 243, 62, 162, 96, 51, 62, 214, 122, 216, 61, 81, 150, 118, 61, 133, 132, 139, 61, 163, 139, 71, 61, 24, 147, 205, 61, 118, 162, 29, 61, 167, 222, 188, 60, 0, 11, 46, 61, 56, 94, 1, 61, 6, 124, 200, 60, 18, 137, 204, 60, 120, 222, 137, 62, 135, 51, 100, 61, 227, 27, 75, 60, 35, 71, 127, 60, 253, 185, 153, 60, 227, 195, 119, 60, 151, 202, 37, 60, 91, 9, 33, 60, 130, 107, 39, 60, 116, 107, 103, 60, 18, 92, 254, 59, 49, 218, 145, 59, 248, 221, 24, 60, 54, 162, 132, 61, 60, 179, 191, 60, 165, 152, 73, 60, 204, 163, 168, 60, 212, 219, 151, 60, 69, 26, 23, 60, 219, 108, 176, 60, 72, 37, 122, 60, 119, 240, 144, 60, 251, 164, 56, 60, 66, 96, 20, 60, 145, 114, 40, 60, 71, 224, 110, 60, 33, 189, 7, 62, 161, 130, 79, 61, 47, 37, 174, 60, 28, 21, 29, 61, 231, 184, 18, 61, 122, 127, 125, 60, 59, 33, 191, 60, 30, 59, 211, 60, 129, 175, 252, 60, 23, 42, 136, 60, 171, 204, 206, 60, 107, 251, 190, 60, 166, 74, 175, 60, 209, 192, 1, 62, 216, 182, 59, 60, 211, 152, 128, 60, 91, 53, 201, 60, 74, 253, 3, 61, 154, 149, 138, 60, 146, 189, 101, 60, 47, 138, 105, 60, 201, 155, 45, 60, 69, 188, 232, 59, 206, 193, 129, 59, 4, 86, 205, 59, 121, 38, 214, 59, 122, 35, 38, 61, 236, 216, 171, 60, 210, 135, 192, 60, 218, 49, 123, 60, 116, 200, 44, 60, 124, 189, 170, 60, 233, 116, 93, 60, 177, 130, 134, 60, 43, 90, 55, 60, 179, 240, 46, 60, 58, 5, 225, 59, 255, 132, 64, 60, 51, 24, 102, 60, 20, 75, 119, 61, 160, 159, 156, 60, 19, 233, 210, 60, 232, 129, 232, 60, 17, 101, 178, 60, 68, 21, 192, 60, 211, 46, 185, 60, 254, 42, 5, 61, 3, 239, 182, 60, 166, 110, 9, 61, 151, 83, 135, 60, 123, 7, 153, 60, 165, 178, 213, 60, 11, 236, 84, 62, 155, 137, 110, 61, 55, 144, 62, 61, 50, 135, 16, 61, 60, 98, 87, 61, 164, 60, 100, 60, 70, 183, 178, 60, 48, 13, 152, 60, 13, 254, 141, 60, 28, 189, 55, 60, 214, 241, 16, 60, 216, 29, 10, 60, 1, 79, 245, 59, 18, 136, 83, 61, 121, 253, 245, 60, 185, 236, 204, 60, 52, 10, 214, 60, 85, 55, 156, 60, 165, 242, 98, 60, 217, 105, 111, 60, 72, 0, 115, 60, 171, 192, 148, 60, 109, 87, 129, 60, 11, 18, 111, 60, 89, 251, 80, 60, 88, 209, 110, 60, 217, 8, 143, 61, 238, 182, 37, 61, 27, 11, 243, 60, 205, 19, 220, 60, 201, 142, 8, 61, 179, 174, 217, 60, 194, 15, 225, 60, 207, 229, 245, 60, 213, 213, 196, 60, 145, 5, 252, 60, 124, 218, 218, 60, 60, 158, 179, 60, 109, 90, 5, 61, 130, 157, 37, 62, 203, 177, 178, 60, 60, 224, 155, 60, 244, 216, 116, 60, 1, 209, 189, 60, 241, 132, 147, 60, 22, 46, 160, 60, 139, 218, 39, 60, 111, 103, 201, 60, 163, 117, 229, 60, 169, 211, 147, 60, 135, 56, 152, 59, 141, 50, 125, 60, 93, 172, 121, 61, 24, 88, 39, 61, 169, 190, 167, 60, 218, 73, 250, 60, 206, 185, 168, 60, 23, 84, 150, 60, 222, 57, 232, 60, 81, 225, 90, 60, 28, 207, 146, 60, 41, 178, 152, 60, 48, 143, 166, 60, 86, 247, 74, 60, 138, 61, 57, 60, 214, 140, 152, 61, 84, 99, 89, 61, 78, 255, 199, 60, 247, 136, 131, 61, 224, 41, 41, 61, 54, 155, 40, 61, 236, 228, 129, 61, 231, 1, 153, 60, 205, 144, 98, 61, 157, 69, 9, 61, 156, 74, 22, 61, 66, 95, 220, 60, 122, 230, 235, 60, 191, 14, 39, 62, 36, 52, 50, 61, 3, 169, 15, 60, 11, 103, 169, 60, 192, 139, 22, 61, 92, 107, 138, 60, 84, 160, 228, 59, 39, 99, 5, 60, 76, 23, 219, 59, 239, 18, 126, 60, 254, 174, 131, 60, 137, 68, 76, 60, 230, 88, 79, 60, 182, 194, 112, 61, 66, 173, 182, 60, 133, 50, 186, 60, 122, 202, 216, 60, 13, 168, 166, 60, 107, 189, 158, 60, 24, 32, 109, 60, 171, 188, 79, 60, 115, 169, 70, 60, 15, 186, 188, 60, 60, 56, 135, 60, 255, 210, 134, 60, 162, 161, 116, 60, 9, 132, 38, 62, 250, 54, 27, 61, 125, 100, 237, 60, 47, 203, 46, 61, 165, 62, 245, 60, 241, 155, 16, 61, 139, 36, 11, 61, 27, 72, 166, 60, 94, 130, 189, 60, 30, 195, 82, 61, 73, 174, 247, 60, 27, 74, 201, 60, 54, 183, 180, 60, 148, 120, 155, 61, 159, 156, 231, 60, 156, 57, 164, 60, 65, 38, 134, 60, 7, 102, 147, 60, 46, 242, 121, 60, 140, 196, 48, 60, 179, 168, 221, 59, 188, 201, 188, 59, 7, 157, 255, 59, 152, 7, 26, 60, 6, 65, 38, 60, 184, 216, 15, 60, 52, 70, 140, 61, 233, 21, 24, 61, 2, 11, 16, 61, 189, 137, 225, 60, 91, 68, 190, 60, 101, 170, 138, 60, 43, 159, 143, 60, 146, 71, 132, 60, 231, 207, 88, 60, 82, 106, 70, 60, 59, 246, 119, 60, 91, 86, 168, 60, 185, 146, 129, 60, 232, 101, 192, 61, 43, 123, 51, 61, 12, 14, 81, 61, 212, 237, 52, 61, 113, 92, 18, 61, 107, 133, 231, 60, 89, 22, 254, 60, 243, 200, 233, 60, 238, 128, 183, 60, 62, 215, 181, 60, 40, 148, 191, 60, 117, 239, 222, 60, 105, 161, 217, 60, 104, 210, 222, 61, 161, 219, 235, 60, 134, 223, 106, 60, 32, 53, 150, 60, 129, 108, 140, 60, 135, 240, 114, 60, 16, 178, 0, 60, 249, 86, 255, 59, 238, 38, 12, 60, 114, 19, 14, 60, 45, 195, 116, 60, 187, 63, 27, 60, 17, 71, 41, 60, 144, 92, 181, 61, 152, 183, 59, 61, 159, 133, 222, 60, 12, 89, 184, 60, 170, 81, 138, 60, 97, 42, 123, 60, 99, 173, 101, 60, 24, 48, 108, 60, 56, 148, 98, 60, 68, 119, 43, 60, 175, 230, 128, 60, 17, 83, 94, 60, 216, 201, 56, 60, 130, 60, 246, 61, 137, 141, 53, 61, 23, 204, 44, 61, 129, 130, 58, 61, 72, 228, 250, 60, 153, 3, 223, 60, 220, 181, 161, 60, 194, 157, 171, 60, 39, 111, 200, 60, 214, 178, 142, 60, 97, 198, 7, 61, 191, 197, 203, 60, 114, 207, 193, 60, 188, 80, 192, 61, 2, 237, 96, 60, 94, 24, 67, 60, 74, 117, 68, 60, 11, 109, 79, 60, 31, 38, 12, 60, 30, 22, 18, 60, 70, 216, 11, 60, 212, 19, 21, 60, 171, 75, 255, 59, 172, 146, 253, 59, 181, 197, 31, 60, 205, 157, 56, 60, 137, 43, 6, 61, 17, 111, 247, 60, 25, 137, 192, 60, 137, 205, 134, 60, 149, 84, 136, 60, 50, 0, 133, 60, 239, 117, 174, 60, 37, 137, 144, 60, 174, 6, 113, 60, 198, 215, 112, 60, 41, 160, 66, 60, 135, 223, 99, 60, 110, 20, 84, 60, 147, 24, 142, 61, 209, 24, 47, 61, 240, 121, 21, 61, 58, 11, 238, 60, 101, 28, 251, 60, 168, 163, 161, 60, 165, 181, 24, 61, 145, 245, 8, 61, 26, 91, 25, 61, 184, 209, 241, 60, 170, 97, 220, 60, 133, 252, 254, 60, 38, 66, 226, 60, 147, 151, 6, 62, 173, 155, 183, 61, 190, 43, 5, 60, 17, 203, 138, 60, 68, 157, 77, 60, 201, 163, 29, 60, 107, 175, 245, 59, 150, 236, 56, 60, 198, 30, 192, 59, 223, 142, 22, 60, 136, 252, 0, 60, 240, 32, 3, 60, 234, 100, 182, 59, 192, 39, 21, 61, 77, 149, 115, 60, 123, 252, 222, 60, 212, 28, 39, 60, 198, 211, 184, 60, 49, 24, 144, 60, 232, 70, 26, 60, 133, 78, 135, 60, 51, 86, 139, 60, 163, 163, 149, 60, 238, 69, 150, 60, 230, 36, 64, 60, 181, 72, 50, 60, 19, 213, 57, 61, 188, 200, 197, 60, 133, 121, 14, 61, 205, 166, 135, 60, 143, 209, 44, 61, 175, 165, 240, 60, 67, 38, 186, 60, 230, 148, 36, 61, 129, 121, 244, 60, 5, 108, 2, 61, 138, 181, 232, 60, 14, 16, 234, 60, 180, 152, 173, 60, 178, 148, 237, 63, 228, 155, 15, 61, 235, 94, 70, 60, 158, 112, 214, 59, 19, 18, 60, 60, 93, 199, 11, 60, 185, 222, 3, 60, 95, 157, 116, 59, 130, 129, 36, 60, 103, 227, 27, 60, 113, 37, 141, 59, 126, 86, 229, 59, 53, 43, 155, 59, 126, 7, 218, 60, 154, 149, 0, 61, 80, 35, 148, 60, 91, 153, 54, 60, 105, 12, 19, 61, 242, 229, 195, 60, 157, 12, 0, 60, 0, 46, 35, 60, 28, 7, 121, 60, 24, 252, 166, 60, 166, 4, 61, 60, 207, 5, 134, 60, 155, 139, 133, 60, 41, 205, 170, 61, 20, 89, 182, 61, 198, 197, 146, 61, 44, 27, 7, 61, 153, 36, 58, 61, 243, 226, 132, 61, 67, 131, 28, 61, 143, 194, 247, 60, 71, 2, 246, 60, 115, 46, 61, 60, 147, 164, 63, 60, 42, 142, 166, 60, 119, 163, 125, 60, 136, 16, 206, 62, 240, 116, 10, 62, 132, 255, 33, 61, 84, 193, 45, 60, 213, 6, 94, 60, 138, 19, 231, 59, 124, 84, 45, 60, 38, 165, 3, 60, 194, 83, 221, 59, 99, 75, 237, 59, 57, 226, 99, 60, 38, 92, 246, 59, 117, 167, 98, 59, 91, 219, 153, 61, 246, 239, 162, 60, 1, 38, 29, 61, 216, 88, 248, 60, 176, 208, 176, 60, 33, 9, 91, 60, 62, 202, 170, 60, 114, 16, 181, 60, 201, 115, 118, 60, 49, 43, 171, 60, 198, 20, 82, 60, 143, 41, 166, 60, 200, 5, 61, 60, 82, 244, 57, 61, 190, 124, 79, 61, 126, 131, 170, 61, 83, 51, 4, 61, 242, 35, 57, 61, 163, 187, 154, 60, 80, 134, 199, 60, 229, 190, 20, 61, 114, 228, 14, 61, 175, 8, 227, 60, 79, 113, 25, 61, 207, 101, 232, 60, 66, 64, 159, 60, 179, 95, 252, 63, 155, 192, 112, 61, 21, 251, 131, 59, 30, 80, 221, 60, 244, 240, 250, 60, 254, 108, 248, 60, 35, 199, 37, 60, 212, 124, 48, 60, 102, 85, 22, 60, 54, 203, 49, 59, 95, 138, 141, 59, 121, 83, 184, 59, 29, 34, 32, 59, 183, 100, 74, 61, 10, 228, 163, 60, 98, 86, 99, 60, 115, 99, 121, 60, 158, 108, 0, 61, 228, 213, 156, 60, 0, 249, 195, 60, 159, 98, 208, 60, 8, 65, 13, 60, 86, 231, 183, 59, 87, 218, 229, 59, 140, 92, 134, 60, 86, 199, 162, 59, 131, 124, 122, 61, 168, 176, 66, 61, 1, 88, 67, 60, 99, 233, 245, 59, 57, 191, 135, 61, 154, 154, 248, 60, 13, 66, 55, 60, 27, 20, 120, 60, 186, 108, 11, 61, 144, 83, 46, 61, 250, 191, 193, 60, 177, 95, 198, 60, 182, 239, 94, 60, 229, 212, 163, 62, 173, 37, 97, 60, 45, 28, 51, 60, 255, 173, 220, 59, 114, 42, 209, 59, 99, 111, 255, 59, 138, 81, 30, 60, 63, 75, 13, 60, 99, 239, 233, 59, 76, 232, 9, 60, 12, 22, 220, 59, 197, 147, 240, 59, 68, 121, 24, 60, 65, 38, 23, 61, 127, 125, 140, 60, 124, 158, 133, 60, 171, 82, 133, 60, 235, 155, 94, 60, 2, 140, 118, 60, 84, 242, 101, 60, 242, 105, 79, 60, 197, 26, 115, 60, 60, 38, 96, 60, 84, 77, 128, 60, 85, 249, 105, 60, 252, 211, 89, 60, 93, 140, 103, 61, 119, 137, 187, 60, 24, 57, 219, 60, 203, 150, 253, 60, 251, 105, 240, 60, 106, 96, 17, 61, 168, 166, 11, 61, 213, 14, 239, 60, 160, 45, 216, 60, 228, 57, 194, 60, 143, 23, 205, 60, 49, 173, 194, 60, 108, 132, 208, 60, 28, 194, 146, 62, 168, 106, 69, 60, 242, 102, 77, 60, 219, 188, 35, 60, 144, 100, 253, 59, 205, 100, 2, 60, 218, 152, 244, 59, 169, 148, 234, 59, 255, 194, 1, 60, 144, 167, 7, 60, 139, 126, 211, 59, 98, 143, 245, 59, 173, 198, 198, 59, 66, 231, 11, 61, 163, 137, 106, 60, 169, 56, 128, 60, 95, 196, 130, 60, 73, 252, 86, 60, 195, 69, 106, 60, 107, 152, 133, 60, 37, 75, 89, 60, 204, 23, 96, 60, 162, 159, 87, 60, 7, 62, 78, 60, 35, 30, 106, 60, 107, 71, 76, 60, 31, 93, 86, 61, 181, 143, 220, 60, 187, 229, 236, 60, 82, 30, 255, 60, 216, 7, 222, 60, 240, 235, 212, 60, 153, 63, 247, 60, 33, 138, 203, 60, 191, 76, 218, 60, 129, 245, 202, 60, 180, 172, 217, 60, 199, 188, 214, 60, 34, 61, 184, 60, 44, 18, 126, 62, 168, 229, 46, 60, 52, 72, 15, 60, 63, 136, 230, 59, 109, 153, 251, 59, 163, 140, 225, 59, 229, 213, 0, 60, 219, 26, 253, 59, 38, 221, 215, 59, 3, 208, 219, 59, 131, 217, 226, 59, 108, 39, 209, 59, 189, 22, 216, 59, 196, 150, 9, 61, 195, 60, 133, 60, 156, 5, 143, 60, 189, 231, 113, 60, 57, 85, 106, 60, 216, 79, 135, 60, 167, 99, 119, 60, 132, 163, 145, 60, 175, 251, 128, 60, 179, 245, 103, 60, 190, 197, 67, 60, 180, 118, 55, 60, 84, 105, 105, 60, 85, 85, 122, 61, 44, 223, 245, 60, 177, 178, 247, 60, 80, 121, 211, 60, 83, 179, 200, 60, 30, 246, 192, 60, 216, 62, 208, 60, 137, 18, 210, 60, 140, 246, 205, 60, 219, 83, 182, 60, 182, 194, 198, 60, 50, 169, 201, 60, 6, 25, 235, 60, 105, 29, 127, 62, 105, 24, 2, 60, 131, 169, 185, 59, 216, 97, 30, 60, 96, 240, 0, 60, 138, 126, 6, 60, 105, 189, 8, 60, 157, 142, 247, 59, 34, 236, 238, 59, 51, 72, 177, 59, 39, 177, 201, 59, 94, 158, 2, 60, 51, 179, 219, 59, 226, 176, 45, 61, 180, 27, 158, 60, 14, 38, 135, 60, 73, 55, 142, 60, 70, 246, 140, 60, 132, 96, 139, 60, 14, 136, 138, 60, 127, 204, 110, 60, 113, 199, 134, 60, 239, 197, 111, 60, 197, 217, 126, 60, 23, 226, 62, 60, 142, 100, 76, 60, 140, 27, 161, 61, 51, 205, 229, 60, 29, 107, 223, 60, 246, 222, 227, 60, 44, 54, 255, 60, 32, 57, 9, 61, 56, 6, 13, 61, 239, 131, 2, 61, 174, 11, 196, 60, 211, 66, 163, 60, 236, 75, 188, 60, 161, 104, 197, 60, 0, 134, 192, 60, 91, 229, 144, 62, 135, 112, 73, 60, 188, 192, 207, 60, 221, 120, 2, 60, 95, 65, 26, 60, 98, 143, 35, 60, 235, 58, 49, 60, 34, 114, 20, 60, 235, 24, 207, 59, 19, 89, 73, 60, 109, 56, 33, 60, 12, 126, 13, 60, 20, 66, 214, 59, 138, 76, 29, 61, 124, 36, 166, 60, 229, 246, 162, 60, 79, 178, 172, 60, 173, 208, 217, 60, 68, 249, 39, 60, 253, 159, 54, 60, 159, 72, 81, 60, 17, 101, 70, 60, 69, 225, 104, 60, 103, 151, 46, 60, 98, 204, 45, 60, 249, 174, 31, 60, 45, 176, 247, 61, 215, 156, 131, 61, 75, 219, 55, 61, 83, 38, 3, 61, 196, 162, 21, 61, 168, 62, 157, 60, 11, 142, 253, 60, 26, 19, 189, 60, 203, 8, 198, 60, 82, 115, 220, 60, 141, 16, 217, 60, 193, 156, 205, 60, 112, 121, 207, 60, 215, 8, 130, 61, 166, 226, 59, 60, 53, 37, 178, 59, 146, 44, 180, 60, 127, 255, 17, 60, 197, 166, 8, 61, 123, 2, 200, 59, 157, 98, 26, 60, 58, 26, 109, 60, 185, 234, 18, 60, 125, 76, 1, 60, 22, 144, 213, 59, 17, 190, 235, 59, 10, 130, 66, 61, 198, 130, 166, 60, 236, 5, 13, 60, 208, 19, 140, 60, 31, 118, 144, 60, 170, 111, 223, 60, 129, 199, 125, 60, 149, 69, 78, 60, 176, 28, 172, 60, 44, 24, 101, 60, 21, 232, 86, 60, 144, 223, 88, 60, 147, 118, 97, 60, 113, 125, 86, 61, 62, 220, 14, 61, 159, 55, 180, 60, 206, 181, 196, 60, 192, 32, 249, 60, 69, 20, 76, 61, 237, 19, 4, 61, 127, 175, 221, 60, 52, 9, 42, 61, 72, 7, 231, 60, 147, 109, 181, 60, 152, 176, 242, 60, 81, 17, 192, 60, 35, 85, 29, 62, 134, 123, 77, 60, 221, 80, 197, 59, 241, 45, 18, 61, 233, 27, 24, 60, 19, 175, 11, 61, 107, 253, 51, 60, 194, 176, 10, 60, 243, 68, 15, 60, 5, 41, 247, 59, 93, 124, 6, 60, 207, 132, 110, 59, 208, 45, 181, 59, 186, 24, 132, 61, 212, 138, 154, 60, 129, 107, 78, 60, 128, 194, 74, 60, 191, 59, 172, 60, 224, 57, 16, 60, 144, 44, 11, 60, 156, 77, 51, 60, 3, 70, 143, 60, 131, 56, 174, 60, 125, 200, 210, 60, 114, 128, 99, 60, 50, 26, 99, 60, 94, 165, 196, 61, 229, 222, 252, 60, 230, 91, 209, 60, 76, 118, 43, 61, 177, 42, 0, 61, 122, 238, 176, 60, 203, 15, 35, 61, 60, 168, 219, 60, 215, 96, 14, 61, 75, 6, 2, 61, 210, 230, 67, 61, 113, 237, 224, 60, 0, 224, 234, 60, 247, 118, 186, 62, 138, 200, 59, 60, 207, 171, 252, 59, 160, 55, 27, 60, 14, 223, 63, 60, 107, 154, 168, 59, 132, 69, 255, 59, 13, 61, 26, 60, 164, 249, 214, 59, 172, 113, 1, 60, 185, 53, 201, 59, 230, 36, 182, 59, 209, 234, 35, 60, 68, 104, 3, 61, 239, 254, 114, 60, 117, 47, 102, 60, 45, 60, 140, 60, 91, 68, 105, 60, 252, 237, 119, 60, 71, 31, 69, 60, 130, 150, 2, 60, 179, 227, 95, 60, 182, 126, 36, 60, 46, 181, 79, 60, 123, 61, 138, 60, 209, 183, 108, 60, 187, 27, 127, 61, 201, 48, 226, 60, 95, 34, 186, 60, 197, 114, 230, 60, 56, 154, 34, 61, 54, 179, 219, 60, 224, 163, 193, 60, 157, 94, 138, 60, 200, 41, 186, 60, 113, 208, 173, 60, 40, 137, 169, 60, 124, 174, 236, 60, 160, 36, 175, 60, 161, 68, 181, 61, 160, 234, 166, 60, 162, 83, 14, 60, 1, 220, 95, 60, 43, 30, 151, 60, 233, 234, 228, 59, 192, 228, 34, 60, 164, 183, 199, 59, 51, 246, 234, 59, 106, 224, 38, 60, 202, 17, 12, 60, 136, 236, 236, 59, 21, 240, 32, 60, 185, 237, 79, 61, 20, 10, 236, 60, 255, 72, 101, 60, 67, 94, 175, 60, 7, 140, 132, 60, 154, 237, 35, 60, 98, 42, 146, 60, 253, 160, 114, 60, 116, 216, 83, 60, 69, 20, 73, 60, 45, 183, 243, 59, 229, 48, 54, 60, 204, 16, 71, 60, 208, 207, 193, 61, 84, 201, 102, 61, 68, 203, 64, 61, 229, 166, 227, 60, 135, 162, 226, 60, 81, 23, 181, 60, 151, 123, 40, 61, 96, 124, 244, 60, 163, 124, 233, 60, 151, 251, 210, 60, 121, 82, 131, 60, 51, 182, 191, 60, 236, 7, 2, 61, 77, 55, 149, 62, 253, 203, 47, 60, 66, 118, 0, 60, 200, 227, 17, 60, 76, 42, 3, 60, 181, 134, 160, 59, 136, 3, 220, 59, 34, 152, 203, 59, 45, 93, 185, 59, 198, 26, 229, 59, 225, 144, 233, 59, 123, 175, 168, 59, 215, 102, 163, 59, 66, 61, 27, 61, 79, 16, 166, 60, 80, 237, 189, 60, 205, 16, 77, 60, 90, 149, 140, 60, 200, 152, 12, 60, 92, 108, 0, 60, 240, 117, 82, 60, 232, 195, 141, 60, 173, 89, 162, 60, 235, 225, 88, 60, 48, 53, 46, 60, 89, 166, 119, 60, 42, 110, 20, 61, 20, 37, 242, 60, 114, 225, 2, 61, 52, 208, 235, 60, 27, 102, 225, 60, 174, 190, 225, 60, 232, 193, 170, 60, 34, 85, 0, 61, 88, 254, 246, 60, 154, 121, 6, 61, 151, 205, 229, 60, 246, 38, 172, 60, 76, 94, 175, 60, 167, 150, 15, 62, 86, 80, 153, 60, 90, 97, 38, 60, 233, 248, 40, 60, 135, 185, 128, 60, 172, 166, 245, 59, 18, 213, 18, 60, 144, 248, 4, 60, 76, 76, 19, 60, 227, 244, 23, 60, 190, 251, 134, 59, 128, 103, 174, 59, 21, 242, 39, 60, 202, 120, 172, 60, 84, 231, 173, 60, 108, 232, 116, 60, 80, 88, 114, 60, 231, 20, 105, 60, 126, 212, 130, 60, 6, 237, 108, 60, 1, 192, 74, 60, 166, 255, 87, 60, 98, 206, 82, 60, 189, 224, 115, 60, 131, 78, 108, 60, 39, 64, 138, 60, 101, 42, 148, 61, 86, 152, 48, 61, 118, 45, 26, 61, 6, 215, 13, 61, 120, 227, 10, 61, 219, 173, 158, 60, 122, 234, 179, 60, 172, 40, 209, 60, 158, 138, 152, 60, 109, 85, 211, 60, 196, 121, 161, 60, 48, 11, 149, 60, 31, 200, 2, 61, 195, 65, 34, 62, 120, 8, 142, 60, 95, 65, 26, 60, 177, 87, 4, 60, 114, 30, 86, 60, 210, 185, 17, 60, 76, 20, 40, 60, 189, 34, 204, 59, 94, 170, 205, 59, 217, 245, 194, 59, 9, 74, 246, 59, 50, 98, 167, 59, 232, 40, 39, 60, 207, 189, 11, 61, 93, 140, 131, 60, 66, 19, 101, 60, 111, 208, 42, 60, 115, 206, 133, 60, 141, 192, 136, 60, 213, 0, 143, 60, 74, 23, 53, 60, 242, 34, 88, 60, 87, 146, 43, 60, 96, 83, 152, 60, 100, 170, 25, 60, 158, 246, 57, 60, 7, 195, 157, 61, 230, 21, 27, 61, 49, 223, 18, 61, 246, 29, 150, 60, 5, 85, 214, 60, 7, 119, 169, 60, 46, 52, 219, 60, 18, 101, 163, 60, 104, 200, 214, 60, 50, 189, 224, 60, 12, 147, 248, 60, 179, 219, 157, 60, 136, 154, 241, 60, 176, 146, 124, 61, 139, 109, 245, 59, 131, 247, 208, 59, 87, 179, 236, 59, 221, 83, 197, 59, 238, 24, 191, 59, 161, 107, 27, 60, 238, 38, 155, 59, 193, 12, 80, 59, 65, 142, 219, 59, 83, 224, 198, 59, 156, 173, 236, 59, 41, 253, 104, 59, 81, 199, 170, 61, 178, 1, 185, 61, 37, 37, 71, 61, 123, 239, 7, 61, 7, 18, 148, 60, 77, 42, 176, 60, 174, 105, 229, 60, 62, 45, 139, 60, 88, 126, 111, 60, 15, 150, 11, 60, 136, 215, 35, 60, 180, 160, 27, 60, 96, 243, 150, 60, 32, 131, 202, 61, 125, 249, 30, 61, 141, 42, 236, 60, 190, 11, 58, 61, 192, 102, 68, 61, 116, 104, 69, 61, 179, 63, 11, 61, 234, 93, 249, 60, 93, 114, 183, 60, 126, 101, 7, 61, 187, 246, 232, 60, 218, 131, 49, 61, 77, 169, 109, 60, 190, 21, 57, 62, 106, 148, 181, 61, 205, 97, 122, 61, 180, 0, 219, 60, 190, 14, 128, 60, 50, 204, 73, 60, 122, 11, 66, 60, 127, 149, 16, 60, 83, 115, 15, 60, 133, 52, 201, 59, 201, 174, 79, 60, 5, 183, 61, 59, 217, 131, 217, 59, 31, 138, 143, 62, 123, 123, 212, 61, 117, 12, 54, 61, 25, 118, 25, 61, 213, 135, 175, 60, 154, 74, 192, 60, 255, 176, 162, 60, 71, 254, 133, 60, 202, 212, 128, 60, 77, 5, 91, 60, 249, 76, 174, 60, 67, 178, 135, 60, 18, 218, 96, 60, 139, 75, 73, 62, 4, 86, 155, 61, 75, 173, 152, 61, 188, 160, 80, 61, 98, 158, 35, 61, 183, 152, 176, 60, 144, 207, 203, 60, 153, 78, 135, 60, 167, 54, 139, 60, 0, 68, 172, 60, 192, 184, 47, 61, 217, 155, 172, 60, 83, 175, 139, 60, 244, 121, 225, 62, 57, 99, 52, 61, 94, 81, 182, 60, 206, 221, 167, 60, 81, 130, 164, 60, 163, 110, 46, 60, 250, 111, 82, 60, 154, 187, 13, 60, 120, 97, 25, 60, 31, 53, 42, 60, 27, 151, 216, 59, 69, 122, 35, 60, 152, 50, 127, 60, 214, 244, 162, 62, 209, 204, 43, 62, 146, 243, 1, 62, 5, 251, 196, 61, 130, 37, 222, 60, 22, 110, 179, 60, 125, 133, 150, 60, 27, 47, 151, 60, 46, 125, 101, 60, 210, 44, 174, 60, 16, 81, 170, 60, 104, 163, 136, 60, 237, 181, 132, 60, 201, 131, 134, 63, 72, 115, 154, 62, 238, 33, 210, 61, 112, 105, 18, 62, 49, 124, 151, 61, 213, 159, 128, 61, 30, 100, 233, 61, 74, 143, 127, 61, 246, 112, 107, 61, 208, 184, 149, 61, 13, 54, 4, 61, 8, 12, 48, 61, 214, 116, 139, 61, 151, 96, 209, 61, 107, 18, 245, 60, 112, 17, 59, 60, 47, 242, 11, 60, 129, 181, 14, 60, 241, 239, 228, 59, 149, 17, 59, 60, 20, 242, 43, 59, 107, 75, 179, 59, 26, 217, 88, 60, 154, 1, 95, 60, 197, 20, 68, 60, 31, 45, 97, 60, 143, 217, 130, 61, 68, 121, 188, 60, 24, 201, 228, 60, 181, 88, 196, 60, 149, 90, 120, 60, 160, 12, 114, 60, 101, 22, 197, 59, 141, 35, 69, 60, 142, 41, 99, 60, 217, 127, 81, 60, 197, 223, 135, 60, 215, 57, 149, 60, 149, 40, 175, 60, 124, 147, 39, 62, 85, 253, 59, 61, 210, 82, 245, 60, 134, 144, 183, 60, 246, 207, 233, 60, 177, 45, 236, 60, 114, 137, 223, 60, 89, 191, 188, 60, 133, 45, 185, 60, 40, 14, 18, 61, 249, 97, 95, 60, 26, 125, 81, 60, 142, 92, 29, 61, 101, 112, 110, 63, 254, 58, 102, 62, 222, 63, 226, 61, 81, 85, 64, 61, 252, 178, 150, 60, 120, 20, 33, 61, 246, 179, 139, 60, 175, 65, 151, 60, 141, 63, 106, 60, 120, 149, 132, 60, 92, 186, 125, 60, 49, 37, 204, 60, 127, 205, 32, 60, 198, 87, 44, 64, 120, 171, 248, 62, 196, 18, 252, 61, 204, 34, 214, 61, 156, 52, 135, 61, 236, 3, 165, 61, 152, 29, 154, 61, 189, 29, 12, 61, 224, 234, 169, 60, 5, 252, 197, 60, 153, 48, 236, 60, 53, 179, 223, 60, 173, 187, 235, 60, 159, 232, 95, 63, 131, 42, 10, 63, 61, 127, 89, 62, 15, 62, 204, 61, 139, 190, 141, 61, 237, 186, 115, 61, 140, 9, 145, 61, 218, 184, 140, 61, 20, 212, 9, 61, 107, 215, 45, 61, 65, 77, 87, 60, 124, 150, 203, 60, 182, 117, 224, 60, 68, 233, 104, 63, 97, 164, 19, 62, 204, 31, 37, 61, 210, 31, 37, 61, 145, 121, 249, 60, 192, 22, 101, 61, 208, 196, 170, 61, 179, 148, 252, 60, 210, 67, 189, 60, 71, 170, 90, 61, 188, 246, 129, 60, 48, 29, 17, 61, 23, 84, 62, 60, 72, 212, 105, 63, 134, 215, 27, 62, 11, 58, 6, 61, 151, 24, 46, 61, 32, 12, 16, 61, 152, 103, 104, 61, 211, 255, 133, 61, 125, 179, 131, 61, 254, 91, 74, 61, 150, 37, 56, 61, 201, 17, 173, 60, 33, 127, 13, 61, 35, 62, 199, 60, 189, 21, 149, 63, 160, 59, 204, 62, 160, 63, 19, 62, 31, 161, 170, 61, 1, 122, 28, 61, 116, 146, 225, 61, 138, 15, 253, 61, 118, 10, 176, 61, 246, 64, 162, 61, 130, 157, 101, 61, 186, 169, 226, 60, 82, 48, 20, 61, 26, 111, 25, 61, 93, 231, 149, 63, 51, 40, 47, 61, 41, 222, 135, 61, 55, 99, 130, 61, 13, 83, 112, 61, 240, 255, 165, 61, 168, 187, 22, 61, 181, 122, 139, 60, 14, 155, 247, 60, 246, 78, 191, 60, 9, 228, 159, 60, 31, 140, 133, 60, 170, 95, 71, 60, 113, 110, 179, 62, 26, 189, 90, 61, 252, 220, 71, 61, 74, 223, 103, 61, 23, 231, 246, 60, 240, 37, 88, 61, 148, 14, 9, 61, 25, 151, 15, 61, 229, 124, 31, 61, 120, 0, 208, 60, 10, 77, 236, 60, 116, 74, 107, 60, 228, 59, 100, 60, 55, 249, 161, 62, 236, 19, 70, 61, 212, 148, 136, 61, 13, 192, 155, 61, 73, 40, 68, 61, 86, 66, 173, 61, 105, 224, 68, 61, 153, 150, 132, 61, 251, 192, 148, 61, 74, 206, 41, 61, 15, 17, 22, 61, 203, 102, 214, 60, 13, 94, 14, 61, 255, 229, 145, 62, 253, 179, 62, 61, 247, 147, 178, 60, 215, 88, 189, 60, 168, 122, 75, 60, 103, 220, 93, 60, 163, 213, 18, 60, 242, 73, 35, 60, 159, 92, 51, 60, 155, 191, 235, 59, 35, 225, 226, 59, 127, 117, 231, 59, 30, 164, 144, 59, 46, 153, 212, 63, 143, 225, 221, 62, 222, 16, 8, 62, 224, 137, 5, 62, 226, 238, 129, 61, 21, 172, 228, 61, 7, 42, 22, 61, 199, 23, 7, 61, 238, 133, 19, 61, 213, 57, 199, 60, 97, 239, 1, 61, 31, 139, 205, 60, 134, 37, 220, 60, 248, 192, 1, 64, 67, 97, 2, 63, 130, 74, 7, 62, 91, 92, 230, 61, 28, 165, 142, 61, 98, 197, 13, 62, 13, 21, 152, 61, 100, 60, 107, 61, 205, 70, 131, 61, 13, 170, 238, 60, 85, 234, 14, 61, 145, 213, 11, 61, 163, 173, 70, 61, 117, 237, 170, 63, 222, 69, 97, 62, 221, 53, 211, 61, 183, 175, 148, 61, 208, 255, 67, 61, 5, 121, 3, 61, 189, 71, 241, 60, 75, 3, 162, 60, 204, 215, 86, 61, 138, 12, 94, 61, 223, 50, 144, 61, 180, 57, 61, 61, 1, 215, 5, 61, 213, 208, 88, 64, 102, 242, 80, 63, 17, 138, 27, 62, 171, 204, 25, 62, 138, 148, 171, 61, 72, 236, 221, 61, 33, 104, 116, 61, 48, 91, 167, 61, 97, 43, 123, 61, 113, 152, 40, 61, 39, 60, 38, 61, 117, 234, 60, 61, 189, 229, 57, 61, 72, 151, 20, 64, 52, 85, 20, 63, 255, 182, 77, 62, 90, 105, 24, 62, 39, 60, 11, 62, 190, 35, 167, 61, 24, 243, 215, 61, 226, 106, 161, 61, 211, 241, 97, 61, 101, 139, 88, 61, 37, 102, 140, 61, 42, 200, 106, 61, 85, 0, 71, 61, 69, 171, 101, 64, 90, 113, 192, 61, 37, 151, 5, 62, 207, 97, 37, 61, 96, 64, 35, 61, 130, 192, 59, 61, 82, 254, 209, 60, 176, 124, 221, 60, 235, 37, 247, 60, 27, 6, 157, 60, 8, 203, 115, 60, 74, 86, 146, 60, 173, 83, 180, 60, 184, 206, 3, 64, 58, 197, 231, 62, 48, 59, 188, 61, 137, 184, 159, 61, 218, 161, 128, 61, 193, 90, 113, 61, 169, 26, 38, 61, 211, 42, 246, 60, 126, 18, 193, 60, 73, 21, 30, 61, 137, 87, 144, 60, 113, 4, 27, 61, 78, 2, 18, 61, 198, 49, 132, 63, 111, 233, 32, 63, 216, 223, 142, 62, 93, 188, 201, 61, 106, 88, 166, 61, 119, 42, 180, 61, 87, 63, 135, 61, 254, 30, 91, 61, 201, 173, 83, 61, 32, 167, 11, 61, 122, 4, 8, 61, 98, 210, 19, 61, 169, 247, 31, 61, 214, 48, 237, 63, 247, 0, 39, 62, 141, 74, 226, 61, 88, 158, 72, 61, 145, 75, 25, 61, 92, 225, 202, 61, 146, 96, 5, 61, 141, 133, 27, 61, 101, 6, 224, 60, 251, 23, 56, 61, 68, 117, 10, 61, 47, 99, 186, 60, 139, 172, 133, 60, 57, 155, 144, 63, 146, 219, 200, 62, 84, 97, 39, 62, 136, 112, 166, 61, 156, 179, 148, 61, 113, 219, 169, 61, 187, 78, 112, 61, 163, 214, 68, 61, 98, 13, 63, 61, 201, 198, 230, 60, 111, 203, 71, 61, 31, 248, 1, 61, 204, 249, 68, 61, 113, 226, 211, 63, 157, 202, 183, 62, 255, 141, 14, 62, 195, 3, 15, 62, 161, 173, 243, 61, 247, 19, 89, 61, 41, 213, 145, 61, 192, 47, 122, 61, 136, 91, 33, 61, 142, 26, 10, 61, 186, 223, 29, 61, 202, 29, 75, 61, 71, 194, 221, 60, 225, 217, 194, 64, 52, 99, 179, 62, 18, 193, 249, 61, 134, 249, 243, 61, 91, 234, 147, 61, 231, 81, 221, 61, 91, 154, 142, 61, 124, 17, 150, 61, 20, 240, 96, 61, 1, 142, 211, 61, 41, 232, 34, 61, 111, 122, 27, 61, 44, 232, 10, 61, 136, 99, 26, 64, 70, 69, 171, 62, 140, 159, 253, 61, 5, 35, 249, 61, 187, 133, 140, 61, 96, 241, 3, 62, 58, 217, 137, 61, 56, 149, 121, 61, 155, 90, 168, 61, 106, 32, 71, 61, 5, 213, 19, 61, 19, 161, 141, 61, 217, 99, 66, 61, 127, 91, 105, 64, 23, 176, 22, 63, 51, 72, 89, 62, 157, 191, 81, 62, 1, 115, 35, 62, 100, 228, 77, 62, 125, 8, 243, 61, 245, 119, 242, 61, 249, 254, 4, 62, 92, 68, 172, 61, 33, 131, 102, 61, 117, 145, 210, 61, 209, 233, 152, 61, 103, 85, 12, 63, 251, 194, 188, 61, 153, 109, 19, 61, 131, 224, 68, 61, 111, 139, 129, 60, 126, 177, 1, 61, 156, 255, 98, 60, 25, 177, 146, 60, 138, 214, 188, 60, 19, 151, 203, 60, 202, 187, 11, 60, 231, 247, 89, 60, 95, 104, 128, 60, 221, 108, 122, 61, 79, 161, 248, 60, 233, 244, 26, 61, 239, 133, 242, 60, 110, 67, 1, 61, 192, 160, 17, 61, 240, 59, 11, 61, 69, 188, 241, 60, 183, 219, 188, 60, 113, 252, 207, 60, 212, 208, 84, 60, 47, 188, 126, 60, 188, 72, 160, 60, 154, 106, 177, 61, 149, 170, 92, 61, 23, 151, 79, 61, 36, 35, 56, 61, 159, 99, 38, 61, 237, 92, 71, 61, 183, 202, 66, 61, 127, 28, 43, 61, 137, 104, 43, 61, 25, 61, 13, 61, 213, 104, 175, 60, 10, 72, 251, 60, 140, 234, 238, 60, 2, 161, 150, 63, 69, 98, 18, 62, 162, 5, 125, 61, 6, 84, 209, 60, 226, 158, 107, 61, 26, 173, 228, 60, 188, 140, 237, 60, 213, 220, 132, 60, 118, 12, 145, 60, 15, 133, 193, 60, 135, 95, 208, 60, 192, 82, 127, 60, 222, 21, 12, 61, 110, 85, 175, 62, 222, 83, 225, 60, 27, 205, 211, 61, 48, 123, 160, 60, 162, 81, 155, 60, 180, 244, 67, 60, 225, 73, 67, 60, 182, 166, 164, 60, 80, 106, 121, 60, 142, 225, 53, 60, 21, 60, 110, 60, 214, 93, 156, 60, 225, 143, 196, 60, 43, 160, 52, 62, 239, 157, 89, 61, 219, 87, 114, 61, 210, 250, 39, 61, 143, 160, 11, 61, 132, 128, 188, 60, 205, 110, 134, 60, 248, 255, 108, 60, 130, 252, 172, 60, 101, 34, 160, 60, 3, 144, 220, 60, 165, 230, 3, 61, 21, 220, 212, 60, 63, 158, 88, 63, 25, 106, 3, 62, 146, 147, 47, 61, 60, 177, 7, 61, 211, 165, 172, 61, 130, 33, 45, 61, 97, 237, 66, 61, 239, 101, 164, 60, 73, 223, 135, 60, 162, 80, 207, 60, 118, 234, 61, 60, 90, 180, 18, 61, 30, 244, 10, 61, 126, 161, 50, 63, 200, 214, 78, 61, 42, 141, 4, 62, 193, 195, 12, 61, 24, 2, 52, 61, 141, 47, 3, 61, 120, 18, 36, 61, 184, 217, 253, 60, 144, 212, 247, 60, 169, 45, 242, 60, 84, 214, 172, 60, 106, 247, 194, 60, 201, 192, 40, 61, 192, 55, 222, 62, 207, 197, 237, 61, 61, 216, 185, 61, 22, 57, 36, 61, 177, 77, 138, 61, 143, 102, 129, 61, 2, 83, 25, 61, 116, 124, 11, 61, 20, 57, 36, 61, 93, 77, 35, 61, 49, 214, 194, 60, 229, 197, 33, 61, 239, 109, 53, 61, 248, 55, 32, 63, 243, 109, 18, 62, 74, 7, 168, 61, 11, 60, 194, 60, 73, 184, 147, 61, 230, 230, 27, 61, 222, 249, 2, 61, 38, 204, 71, 60, 76, 9, 156, 60, 5, 162, 230, 60, 223, 4, 167, 60, 4, 202, 168, 60, 13, 52, 151, 60, 235, 238, 217, 61, 210, 28, 191, 61, 169, 31, 100, 61, 60, 98, 93, 61, 249, 65, 105, 61, 195, 224, 23, 61, 188, 187, 25, 61, 168, 30, 21, 61, 105, 19, 233, 60, 197, 205, 173, 60, 140, 77, 133, 60, 214, 131, 244, 60, 215, 206, 29, 61, 134, 242, 243, 61, 75, 175, 141, 61, 252, 2, 94, 61, 113, 66, 251, 60, 127, 136, 147, 61, 25, 148, 74, 61, 103, 6, 149, 60, 147, 125, 241, 60, 24, 185, 23, 61, 152, 63, 238, 60, 150, 200, 219, 60, 134, 139, 54, 61, 193, 19, 5, 61, 203, 247, 178, 62, 103, 244, 130, 61, 96, 213, 160, 60, 247, 42, 198, 60, 25, 83, 5, 61, 245, 122, 137, 60, 65, 86, 80, 60, 160, 142, 131, 60, 168, 139, 47, 60, 37, 252, 142, 60, 40, 172, 13, 60, 113, 136, 13, 60, 38, 47, 227, 59, 55, 176, 146, 61, 154, 121, 224, 60, 29, 14, 200, 60, 145, 0, 192, 60, 132, 56, 197, 60, 250, 92, 156, 60, 163, 15, 166, 60, 249, 121, 209, 60, 234, 214, 127, 60, 82, 115, 200, 60, 228, 111, 105, 60, 115, 93, 126, 60, 8, 115, 96, 60, 85, 114, 207, 61, 163, 0, 40, 61]).concat([64, 206, 250, 60, 218, 252, 223, 60, 232, 64, 13, 61, 154, 254, 7, 61, 145, 210, 23, 61, 46, 40, 18, 61, 107, 181, 193, 60, 8, 146, 19, 61, 109, 144, 201, 60, 58, 241, 223, 60, 136, 250, 213, 60, 173, 164, 15, 62, 237, 238, 50, 61, 234, 31, 168, 61, 36, 74, 114, 60, 49, 59, 158, 60, 125, 14, 9, 61, 212, 59, 130, 60, 43, 227, 187, 60, 140, 132, 118, 60, 94, 244, 122, 60, 210, 191, 128, 60, 68, 86, 188, 60, 7, 66, 117, 60, 98, 96, 243, 61, 171, 41, 203, 60, 95, 11, 70, 61, 8, 232, 235, 60, 144, 63, 179, 60, 206, 113, 108, 60, 237, 208, 154, 60, 209, 120, 182, 60, 99, 162, 183, 60, 196, 243, 183, 60, 240, 255, 136, 60, 21, 179, 122, 60, 212, 47, 204, 60, 223, 216, 20, 62, 82, 74, 13, 61, 226, 129, 234, 60, 230, 216, 190, 60, 139, 34, 169, 60, 116, 241, 180, 60, 195, 167, 152, 60, 21, 97, 151, 60, 49, 18, 185, 60, 26, 235, 191, 60, 38, 205, 182, 60, 8, 68, 203, 60, 219, 131, 231, 60, 238, 0, 231, 62, 60, 213, 27, 62, 77, 70, 20, 61, 58, 45, 91, 61, 37, 13, 21, 61, 98, 86, 197, 60, 108, 78, 186, 60, 35, 238, 105, 60, 175, 78, 137, 60, 18, 221, 184, 60, 74, 130, 141, 60, 251, 72, 243, 59, 46, 51, 5, 60, 100, 57, 133, 61, 34, 185, 10, 61, 248, 18, 13, 61, 21, 200, 72, 61, 4, 119, 193, 60, 91, 182, 160, 60, 147, 36, 178, 60, 117, 39, 142, 60, 10, 145, 159, 60, 163, 121, 185, 60, 113, 195, 156, 60, 108, 40, 86, 60, 130, 2, 138, 60, 124, 96, 1, 62, 98, 32, 124, 61, 28, 35, 51, 61, 229, 201, 53, 61, 120, 83, 253, 60, 190, 208, 13, 61, 23, 160, 24, 61, 76, 139, 231, 60, 229, 103, 252, 60, 85, 64, 20, 61, 56, 92, 2, 61, 178, 199, 215, 60, 64, 176, 1, 61, 245, 227, 4, 63, 63, 38, 41, 61, 249, 201, 223, 61, 194, 158, 113, 61, 188, 49, 203, 60, 159, 53, 201, 60, 239, 0, 185, 60, 131, 87, 80, 60, 152, 252, 143, 60, 73, 95, 22, 61, 19, 128, 149, 60, 13, 166, 90, 60, 244, 49, 208, 60, 33, 124, 171, 62, 59, 176, 45, 61, 244, 145, 120, 61, 56, 141, 34, 61, 232, 167, 92, 61, 217, 169, 12, 61, 116, 0, 13, 61, 253, 69, 132, 60, 227, 220, 160, 60, 13, 169, 171, 60, 212, 48, 168, 60, 140, 33, 115, 60, 181, 19, 141, 60, 237, 248, 60, 62, 238, 237, 88, 61, 118, 202, 190, 61, 104, 53, 45, 61, 95, 19, 13, 61, 22, 243, 28, 61, 116, 155, 45, 61, 23, 158, 205, 60, 155, 183, 241, 60, 125, 134, 245, 60, 195, 145, 194, 60, 38, 42, 138, 60, 72, 126, 213, 60, 1, 162, 163, 62, 97, 42, 108, 61, 71, 168, 151, 60, 117, 94, 27, 60, 4, 128, 159, 60, 253, 142, 109, 60, 125, 23, 74, 60, 99, 147, 225, 59, 13, 118, 30, 60, 45, 186, 28, 60, 94, 177, 52, 60, 66, 100, 239, 59, 195, 56, 107, 59, 228, 58, 69, 62, 160, 187, 143, 62, 178, 186, 59, 62, 152, 24, 171, 61, 173, 185, 56, 61, 187, 130, 119, 60, 77, 217, 204, 60, 99, 0, 143, 60, 71, 203, 20, 61, 125, 249, 146, 60, 193, 31, 161, 60, 140, 69, 94, 60, 76, 45, 7, 60, 76, 197, 52, 63, 77, 76, 159, 62, 121, 172, 42, 62, 121, 13, 12, 62, 150, 52, 197, 61, 194, 96, 43, 61, 248, 70, 94, 61, 5, 217, 143, 60, 174, 145, 36, 61, 46, 222, 116, 61, 68, 185, 129, 61, 81, 143, 33, 61, 151, 110, 221, 60, 40, 192, 223, 62, 249, 227, 14, 62, 227, 125, 138, 61, 129, 41, 135, 61, 56, 71, 50, 61, 197, 89, 4, 60, 85, 193, 140, 60, 21, 46, 105, 60, 190, 242, 217, 59, 109, 108, 92, 60, 180, 55, 219, 59, 163, 126, 26, 60, 58, 121, 20, 60, 177, 244, 21, 63, 71, 239, 102, 62, 28, 54, 142, 61, 68, 205, 112, 61, 73, 168, 159, 61, 207, 115, 25, 61, 77, 220, 178, 60, 218, 133, 231, 60, 173, 131, 190, 60, 193, 113, 157, 60, 0, 185, 70, 60, 190, 249, 201, 60, 64, 212, 164, 60, 135, 73, 138, 63, 161, 86, 222, 62, 216, 130, 11, 62, 177, 254, 229, 61, 110, 192, 14, 62, 69, 172, 128, 61, 27, 150, 120, 61, 15, 240, 7, 61, 16, 118, 12, 61, 73, 242, 202, 60, 241, 95, 11, 61, 92, 43, 13, 61, 65, 54, 253, 60, 194, 117, 17, 63, 235, 181, 241, 61, 133, 110, 247, 60, 46, 14, 209, 60, 9, 1, 158, 60, 150, 100, 254, 60, 107, 136, 130, 60, 31, 203, 57, 60, 31, 148, 18, 60, 90, 109, 222, 59, 100, 117, 233, 59, 202, 37, 29, 60, 131, 79, 50, 60, 76, 181, 8, 62, 221, 42, 160, 61, 89, 241, 146, 61, 210, 14, 24, 61, 180, 77, 106, 61, 199, 177, 30, 61, 174, 138, 13, 60, 145, 246, 80, 60, 117, 159, 129, 60, 154, 139, 171, 60, 224, 105, 45, 60, 11, 41, 146, 60, 62, 215, 53, 60, 186, 119, 68, 62, 17, 214, 53, 62, 169, 30, 249, 61, 45, 135, 82, 61, 181, 66, 42, 61, 176, 75, 54, 61, 79, 42, 112, 61, 17, 112, 155, 61, 34, 163, 21, 61, 104, 223, 36, 61, 110, 11, 129, 60, 174, 148, 74, 61, 119, 25, 111, 60, 129, 188, 56, 62, 132, 81, 252, 61, 136, 58, 64, 61, 125, 153, 144, 60, 251, 189, 50, 61, 80, 87, 208, 60, 46, 231, 214, 60, 11, 112, 192, 60, 17, 64, 85, 60, 208, 12, 88, 59, 198, 177, 190, 59, 214, 83, 192, 59, 35, 70, 60, 60, 55, 81, 245, 62, 19, 147, 40, 62, 17, 170, 43, 61, 153, 43, 20, 61, 154, 92, 39, 61, 255, 42, 186, 60, 59, 53, 53, 61, 64, 152, 250, 60, 130, 36, 188, 60, 177, 144, 141, 60, 142, 189, 0, 61, 135, 36, 3, 61, 143, 221, 24, 61, 160, 183, 138, 62, 159, 81, 49, 62, 26, 137, 200, 61, 109, 136, 238, 60, 248, 85, 175, 61, 253, 37, 72, 61, 237, 64, 26, 62, 56, 130, 236, 61, 88, 26, 68, 61, 215, 201, 79, 60, 189, 219, 167, 60, 160, 251, 221, 60, 238, 5, 218, 60, 201, 140, 36, 63, 24, 174, 119, 61, 8, 59, 140, 61, 8, 244, 152, 60, 61, 2, 82, 61, 117, 15, 156, 61, 42, 211, 251, 60, 105, 133, 79, 61, 21, 104, 243, 60, 249, 20, 172, 60, 65, 201, 125, 60, 183, 210, 158, 60, 115, 40, 85, 60, 71, 205, 152, 63, 196, 186, 17, 62, 14, 17, 206, 61, 254, 95, 235, 61, 161, 27, 82, 62, 73, 68, 67, 61, 186, 17, 69, 61, 10, 143, 84, 61, 142, 86, 214, 60, 32, 185, 232, 60, 241, 183, 174, 60, 21, 230, 13, 61, 134, 231, 77, 60, 71, 167, 224, 63, 41, 254, 132, 62, 166, 168, 91, 62, 19, 136, 141, 61, 32, 19, 58, 62, 145, 84, 179, 61, 162, 53, 151, 61, 149, 220, 133, 61, 120, 2, 235, 60, 21, 250, 12, 61, 19, 171, 10, 61, 187, 121, 89, 61, 90, 22, 185, 60, 240, 242, 197, 62, 176, 135, 206, 61, 185, 17, 185, 60, 228, 171, 11, 61, 247, 87, 118, 61, 85, 4, 172, 60, 67, 159, 56, 60, 5, 6, 94, 60, 242, 76, 132, 60, 58, 208, 31, 60, 251, 19, 252, 59, 135, 111, 54, 60, 117, 151, 23, 60, 105, 221, 38, 63, 22, 227, 125, 62, 27, 26, 141, 61, 251, 104, 174, 61, 175, 4, 161, 61, 89, 5, 89, 61, 214, 170, 41, 61, 143, 42, 16, 61, 201, 145, 0, 61, 232, 119, 146, 60, 117, 29, 130, 60, 135, 148, 125, 60, 122, 190, 115, 60, 82, 93, 20, 63, 15, 72, 131, 62, 214, 94, 20, 62, 4, 89, 230, 61, 129, 143, 8, 62, 21, 42, 146, 61, 243, 50, 99, 61, 148, 220, 137, 61, 31, 22, 155, 61, 184, 60, 23, 61, 41, 15, 183, 60, 15, 13, 248, 60, 42, 163, 212, 60, 90, 188, 198, 63, 228, 232, 4, 62, 7, 73, 155, 61, 45, 87, 62, 61, 145, 61, 92, 62, 31, 166, 75, 61, 25, 151, 142, 61, 222, 109, 168, 60, 76, 114, 172, 60, 89, 150, 138, 60, 232, 7, 35, 61, 153, 80, 26, 60, 64, 132, 223, 60, 74, 0, 19, 64, 236, 123, 33, 62, 133, 52, 213, 61, 117, 228, 58, 62, 211, 199, 50, 62, 168, 142, 41, 61, 240, 148, 99, 61, 166, 158, 124, 61, 189, 91, 48, 61, 123, 228, 67, 61, 224, 82, 129, 60, 180, 223, 223, 60, 8, 78, 197, 60, 157, 122, 12, 64, 7, 98, 85, 62, 117, 134, 129, 62, 99, 93, 24, 62, 20, 91, 159, 62, 130, 255, 132, 61, 212, 236, 138, 61, 200, 109, 91, 61, 23, 72, 71, 61, 237, 141, 139, 61, 192, 39, 35, 61, 16, 30, 46, 61, 92, 64, 246, 60, 34, 75, 215, 62, 165, 229, 43, 62, 158, 32, 110, 61, 11, 142, 74, 61, 162, 216, 130, 61, 166, 0, 73, 60, 109, 133, 45, 61, 45, 69, 234, 60, 56, 160, 119, 60, 76, 111, 77, 60, 41, 100, 136, 60, 220, 32, 212, 59, 67, 237, 89, 60, 22, 250, 44, 63, 119, 111, 100, 62, 6, 194, 40, 62, 212, 2, 157, 61, 94, 37, 69, 62, 80, 64, 224, 60, 9, 157, 25, 62, 46, 197, 54, 61, 239, 4, 3, 61, 201, 5, 96, 60, 225, 60, 169, 60, 227, 209, 80, 60, 221, 23, 1, 61, 66, 70, 122, 63, 111, 179, 144, 62, 98, 152, 40, 62, 70, 166, 254, 61, 97, 218, 253, 61, 174, 190, 130, 61, 199, 84, 24, 62, 246, 158, 162, 61, 96, 58, 85, 61, 220, 125, 193, 60, 243, 243, 179, 60, 173, 147, 1, 61, 141, 26, 227, 60, 71, 185, 174, 61, 5, 166, 25, 61, 237, 251, 115, 60, 199, 5, 13, 61, 132, 147, 213, 60, 208, 92, 13, 60, 21, 31, 130, 60, 113, 195, 241, 59, 178, 222, 249, 59, 181, 29, 117, 60, 51, 29, 156, 59, 184, 190, 156, 59, 59, 249, 24, 60, 148, 248, 105, 61, 90, 34, 78, 60, 177, 95, 126, 60, 166, 142, 129, 60, 40, 174, 90, 60, 14, 120, 58, 60, 14, 229, 86, 60, 224, 194, 92, 60, 94, 209, 78, 60, 38, 212, 57, 60, 33, 111, 79, 60, 172, 242, 59, 60, 88, 102, 139, 60, 36, 97, 109, 61, 206, 30, 235, 60, 226, 16, 213, 60, 51, 232, 10, 61, 210, 51, 182, 60, 97, 98, 160, 60, 54, 80, 205, 60, 133, 135, 242, 60, 210, 117, 185, 60, 154, 82, 107, 60, 120, 92, 146, 60, 230, 214, 142, 60, 39, 1, 232, 60, 199, 87, 115, 61, 62, 173, 68, 60, 195, 241, 31, 60, 179, 154, 244, 59, 119, 22, 82, 60, 138, 194, 16, 60, 107, 212, 238, 59, 239, 128, 70, 60, 6, 75, 65, 60, 123, 177, 67, 60, 24, 39, 32, 60, 30, 200, 193, 59, 131, 13, 11, 60, 229, 127, 38, 61, 245, 55, 151, 60, 2, 252, 125, 60, 114, 233, 141, 60, 77, 156, 134, 60, 132, 32, 67, 60, 248, 22, 42, 60, 15, 209, 132, 60, 40, 180, 134, 60, 6, 154, 148, 60, 181, 211, 111, 60, 240, 61, 26, 60, 62, 205, 81, 60, 239, 40, 105, 61, 67, 62, 254, 60, 204, 2, 246, 60, 229, 10, 218, 60, 98, 39, 8, 61, 249, 27, 195, 60, 165, 73, 162, 60, 154, 108, 247, 60, 168, 232, 8, 61, 255, 208, 204, 60, 217, 183, 229, 60, 207, 98, 154, 60, 192, 212, 136, 60, 250, 64, 132, 62, 212, 208, 101, 61, 79, 159, 148, 60, 120, 68, 153, 60, 107, 246, 2, 61, 157, 68, 196, 60, 213, 241, 149, 60, 29, 115, 254, 59, 184, 48, 70, 60, 229, 149, 95, 60, 230, 103, 2, 60, 166, 132, 6, 60, 10, 90, 133, 60, 164, 185, 57, 62, 46, 232, 3, 61, 181, 109, 90, 60, 151, 103, 153, 60, 140, 100, 8, 61, 119, 88, 237, 60, 222, 98, 134, 60, 176, 240, 76, 60, 206, 222, 124, 60, 59, 233, 165, 60, 175, 129, 78, 60, 32, 111, 71, 60, 81, 93, 90, 60, 219, 158, 221, 61, 140, 206, 187, 60, 18, 213, 158, 60, 226, 12, 231, 60, 190, 43, 247, 60, 145, 176, 179, 60, 94, 63, 203, 60, 245, 40, 170, 60, 191, 121, 224, 60, 117, 125, 11, 61, 22, 107, 181, 60, 155, 159, 145, 60, 89, 207, 192, 60, 213, 69, 79, 62, 176, 97, 105, 60, 12, 8, 143, 60, 117, 141, 143, 60, 92, 202, 3, 61, 89, 128, 150, 60, 225, 105, 176, 60, 50, 154, 180, 60, 78, 111, 120, 60, 241, 156, 132, 60, 134, 156, 70, 60, 104, 181, 39, 60, 65, 219, 209, 59, 191, 48, 211, 61, 245, 166, 184, 60, 171, 65, 103, 60, 128, 51, 120, 60, 123, 207, 165, 60, 46, 191, 165, 60, 76, 18, 192, 60, 142, 202, 148, 60, 153, 126, 128, 60, 240, 158, 179, 60, 158, 222, 77, 60, 104, 115, 116, 60, 127, 24, 36, 60, 181, 176, 212, 61, 252, 247, 174, 60, 39, 214, 202, 60, 23, 205, 202, 60, 39, 16, 164, 60, 226, 249, 248, 60, 100, 207, 4, 61, 45, 63, 229, 60, 75, 98, 187, 60, 123, 156, 215, 60, 79, 77, 139, 60, 45, 57, 206, 60, 190, 50, 106, 60, 61, 99, 141, 62, 86, 36, 55, 60, 223, 111, 37, 60, 159, 249, 117, 60, 43, 186, 187, 61, 195, 249, 66, 61, 7, 10, 234, 59, 209, 220, 81, 61, 98, 128, 28, 61, 86, 47, 1, 61, 60, 64, 54, 60, 201, 90, 208, 60, 249, 80, 12, 61, 55, 226, 82, 62, 105, 105, 140, 60, 152, 139, 122, 60, 233, 124, 253, 60, 119, 18, 91, 61, 82, 120, 7, 61, 186, 192, 229, 60, 34, 64, 176, 60, 28, 54, 169, 60, 162, 168, 253, 60, 159, 164, 98, 60, 31, 25, 132, 60, 201, 92, 221, 60, 37, 20, 213, 61, 100, 31, 184, 60, 44, 11, 247, 60, 214, 135, 48, 61, 182, 82, 91, 61, 91, 162, 17, 61, 25, 169, 226, 60, 175, 170, 186, 60, 66, 48, 248, 60, 161, 249, 36, 61, 5, 110, 156, 60, 217, 116, 3, 61, 171, 144, 44, 61, 223, 0, 193, 61, 32, 90, 128, 61, 238, 104, 123, 60, 220, 30, 213, 60, 61, 127, 235, 60, 90, 252, 145, 60, 12, 186, 48, 60, 124, 49, 163, 60, 123, 233, 44, 60, 71, 173, 230, 59, 33, 55, 16, 60, 152, 30, 200, 59, 16, 101, 35, 60, 22, 7, 103, 62, 32, 255, 77, 61, 126, 174, 150, 60, 24, 116, 235, 60, 198, 80, 69, 61, 149, 194, 165, 60, 200, 151, 77, 60, 133, 135, 111, 60, 93, 175, 96, 60, 26, 186, 129, 60, 171, 36, 137, 60, 103, 205, 131, 60, 16, 208, 1, 60, 225, 155, 48, 62, 61, 107, 4, 61, 237, 67, 251, 60, 49, 209, 142, 60, 36, 45, 180, 60, 155, 254, 154, 60, 61, 164, 246, 60, 49, 211, 13, 61, 44, 155, 116, 60, 214, 152, 167, 60, 242, 64, 241, 60, 129, 189, 240, 60, 126, 112, 137, 60, 226, 131, 101, 61, 50, 1, 189, 61, 191, 152, 215, 60, 77, 206, 112, 60, 24, 114, 32, 60, 126, 56, 102, 61, 120, 246, 158, 60, 42, 95, 1, 61, 76, 64, 45, 61, 137, 145, 82, 60, 222, 2, 230, 60, 174, 244, 41, 60, 190, 231, 21, 60, 103, 56, 153, 62, 72, 228, 220, 60, 86, 170, 53, 61, 253, 87, 229, 60, 212, 94, 179, 60, 82, 30, 131, 60, 23, 107, 76, 60, 119, 12, 3, 61, 203, 181, 117, 61, 7, 71, 56, 60, 241, 34, 234, 60, 220, 129, 205, 60, 192, 207, 12, 61, 67, 248, 192, 61, 70, 227, 134, 60, 92, 180, 96, 61, 104, 65, 73, 61, 190, 32, 118, 60, 159, 14, 164, 60, 43, 62, 220, 60, 136, 74, 94, 61, 185, 188, 61, 61, 129, 117, 130, 60, 75, 115, 6, 61, 206, 119, 196, 60, 36, 25, 236, 60, 245, 82, 49, 63, 240, 138, 145, 58, 22, 110, 148, 61, 107, 161, 162, 60, 79, 178, 148, 61, 64, 0, 240, 59, 139, 164, 153, 61, 218, 175, 16, 60, 103, 84, 198, 59, 158, 120, 221, 59, 135, 97, 97, 59, 103, 208, 11, 60, 59, 152, 132, 59, 165, 134, 172, 61, 63, 96, 3, 60, 140, 112, 132, 60, 252, 156, 198, 60, 193, 215, 214, 60, 206, 216, 93, 60, 204, 194, 68, 60, 22, 203, 19, 60, 232, 206, 247, 60, 7, 127, 208, 60, 222, 239, 244, 59, 198, 121, 212, 59, 49, 23, 30, 60, 37, 161, 205, 61, 53, 47, 234, 59, 85, 217, 239, 60, 96, 198, 26, 61, 166, 218, 57, 61, 49, 202, 39, 60, 26, 171, 250, 60, 215, 210, 44, 60, 63, 86, 167, 60, 10, 250, 148, 60, 133, 141, 152, 60, 144, 235, 160, 60, 14, 65, 254, 60, 36, 100, 202, 62, 66, 132, 196, 61, 54, 81, 96, 61, 245, 193, 46, 61, 130, 95, 50, 60, 30, 104, 56, 60, 209, 187, 87, 60, 174, 78, 22, 60, 202, 93, 73, 60, 52, 29, 38, 60, 84, 64, 161, 59, 157, 140, 206, 59, 78, 15, 36, 60, 57, 181, 48, 62, 228, 80, 239, 61, 136, 89, 85, 61, 104, 40, 227, 60, 144, 2, 8, 61, 144, 84, 175, 60, 116, 134, 166, 60, 245, 86, 141, 60, 57, 163, 40, 60, 133, 126, 154, 60, 148, 254, 129, 60, 53, 61, 133, 60, 1, 6, 113, 60, 99, 212, 92, 62, 240, 215, 250, 61, 248, 172, 79, 61, 244, 10, 45, 61, 0, 6, 7, 61, 197, 138, 249, 60, 110, 58, 3, 61, 219, 245, 243, 60, 206, 4, 72, 60, 156, 248, 171, 60, 9, 54, 184, 60, 134, 77, 134, 60, 3, 131, 131, 60, 204, 104, 192, 62, 193, 146, 228, 61, 244, 212, 18, 61, 122, 95, 156, 60, 154, 234, 63, 61, 10, 231, 200, 60, 205, 154, 30, 60, 139, 15, 34, 60, 166, 81, 86, 60, 198, 238, 36, 60, 17, 121, 39, 60, 200, 147, 79, 60, 75, 125, 129, 60, 16, 76, 118, 61, 160, 96, 197, 60, 242, 83, 196, 60, 33, 117, 201, 60, 138, 123, 184, 60, 106, 241, 138, 60, 14, 30, 158, 60, 53, 86, 152, 60, 12, 28, 105, 60, 166, 147, 87, 60, 99, 192, 40, 60, 148, 108, 113, 60, 96, 231, 154, 60, 206, 167, 197, 61, 179, 39, 49, 61, 176, 221, 31, 61, 229, 179, 27, 61, 138, 76, 0, 61, 218, 155, 253, 60, 174, 51, 34, 61, 14, 75, 6, 61, 167, 103, 213, 60, 70, 242, 168, 60, 235, 47, 161, 60, 43, 13, 218, 60, 104, 112, 7, 61, 112, 160, 207, 61, 89, 148, 39, 61, 62, 111, 176, 60, 120, 172, 84, 60, 252, 27, 51, 60, 22, 34, 61, 60, 137, 250, 71, 60, 112, 185, 2, 60, 57, 223, 36, 60, 57, 239, 82, 60, 183, 118, 222, 59, 198, 211, 215, 59, 223, 54, 115, 60, 170, 20, 167, 61, 201, 130, 170, 60, 44, 24, 40, 60, 31, 165, 153, 60, 60, 49, 175, 60, 94, 45, 129, 60, 182, 171, 100, 60, 91, 169, 76, 60, 155, 97, 16, 60, 217, 29, 91, 60, 43, 8, 13, 60, 247, 85, 91, 60, 120, 50, 56, 60, 232, 28, 123, 61, 15, 75, 172, 60, 20, 118, 94, 60, 75, 16, 3, 61, 224, 153, 184, 60, 114, 144, 208, 60, 111, 163, 199, 60, 136, 221, 211, 60, 125, 55, 67, 60, 25, 254, 152, 60, 220, 137, 140, 60, 171, 218, 220, 60, 108, 86, 160, 60, 215, 55, 94, 63, 10, 230, 210, 61, 254, 50, 114, 61, 69, 58, 65, 61, 76, 193, 124, 61, 187, 7, 13, 61, 95, 248, 209, 60, 113, 21, 20, 61, 142, 15, 135, 61, 66, 210, 199, 60, 5, 225, 59, 61, 31, 150, 218, 60, 144, 79, 80, 61, 12, 95, 151, 61, 49, 101, 30, 61, 186, 83, 12, 61, 102, 91, 108, 61, 16, 0, 208, 60, 41, 193, 111, 60, 240, 179, 27, 61, 6, 127, 230, 60, 38, 35, 252, 60, 61, 244, 199, 60, 0, 213, 10, 61, 230, 29, 15, 61, 179, 202, 104, 61, 248, 21, 142, 61, 0, 169, 99, 61, 176, 86, 32, 61, 189, 130, 135, 61, 159, 54, 49, 61, 24, 234, 196, 60, 151, 167, 74, 61, 170, 158, 54, 61, 23, 169, 4, 61, 205, 163, 60, 61, 108, 156, 63, 61, 203, 112, 108, 61, 104, 116, 148, 61, 40, 125, 100, 62, 26, 146, 11, 61, 93, 250, 31, 61, 59, 67, 167, 61, 85, 248, 16, 61, 172, 50, 211, 60, 146, 119, 255, 60, 239, 155, 152, 60, 53, 92, 170, 60, 133, 9, 157, 60, 66, 241, 107, 60, 149, 112, 117, 60, 192, 248, 185, 59, 176, 136, 147, 62, 148, 24, 38, 61, 233, 159, 231, 60, 220, 131, 139, 61, 61, 233, 105, 61, 11, 196, 76, 61, 243, 182, 235, 60, 73, 166, 124, 60, 218, 165, 161, 60, 87, 120, 203, 60, 195, 48, 194, 60, 94, 138, 164, 60, 36, 163, 203, 59, 217, 243, 75, 62, 2, 168, 214, 61, 170, 139, 130, 61, 241, 61, 202, 61, 23, 92, 130, 61, 47, 209, 140, 61, 184, 102, 128, 61, 178, 49, 82, 61, 201, 95, 90, 60, 187, 8, 41, 61, 158, 202, 200, 60, 227, 229, 236, 60, 117, 3, 120, 60, 78, 34, 203, 62, 138, 230, 111, 61, 82, 128, 255, 60, 158, 159, 16, 61, 215, 192, 82, 61, 118, 33, 66, 61, 241, 180, 23, 61, 19, 42, 221, 59, 240, 91, 182, 60, 106, 199, 177, 60, 217, 225, 115, 60, 125, 95, 88, 60, 10, 164, 57, 60, 2, 203, 175, 62, 209, 194, 204, 61, 109, 183, 208, 60, 15, 58, 103, 61, 174, 43, 132, 61, 28, 43, 64, 61, 251, 249, 255, 60, 230, 132, 173, 60, 236, 103, 222, 60, 224, 106, 187, 60, 174, 46, 147, 60, 245, 214, 114, 60, 241, 182, 171, 60, 38, 50, 222, 62, 145, 109, 149, 62, 245, 17, 167, 61, 120, 248, 107, 61, 39, 108, 147, 61, 224, 246, 183, 61, 76, 113, 205, 61, 90, 1, 27, 61, 92, 22, 242, 60, 144, 91, 72, 61, 164, 233, 226, 60, 95, 253, 180, 60, 87, 191, 167, 60, 106, 70, 95, 62, 220, 180, 51, 61, 247, 160, 180, 60, 159, 238, 25, 61, 90, 64, 160, 61, 49, 51, 78, 61, 158, 49, 178, 60, 137, 61, 52, 60, 203, 139, 181, 60, 222, 84, 84, 60, 25, 203, 59, 60, 95, 2, 28, 60, 226, 5, 95, 60, 58, 121, 52, 62, 186, 156, 129, 61, 55, 51, 140, 60, 32, 139, 64, 61, 229, 157, 82, 61, 36, 182, 243, 60, 43, 219, 63, 60, 104, 151, 139, 60, 242, 70, 19, 61, 56, 68, 218, 60, 176, 11, 39, 60, 81, 77, 87, 60, 114, 8, 202, 60, 116, 124, 16, 62, 127, 75, 94, 61, 234, 91, 189, 60, 19, 43, 61, 61, 110, 68, 57, 61, 50, 213, 217, 60, 65, 206, 200, 60, 13, 200, 201, 60, 14, 97, 3, 61, 140, 143, 1, 61, 182, 82, 201, 60, 149, 55, 139, 60, 27, 2, 202, 60, 130, 55, 203, 62, 61, 128, 210, 61, 67, 91, 217, 60, 75, 249, 33, 61, 198, 161, 88, 61, 193, 241, 251, 60, 183, 232, 128, 60, 140, 182, 32, 60, 52, 242, 106, 60, 162, 222, 145, 60, 247, 145, 244, 59, 92, 50, 89, 60, 124, 215, 69, 60, 193, 27, 148, 62, 87, 221, 2, 62, 191, 2, 100, 61, 28, 253, 187, 61, 189, 40, 181, 61, 14, 243, 66, 61, 115, 56, 189, 60, 155, 235, 153, 60, 35, 87, 210, 60, 59, 114, 156, 60, 99, 63, 129, 60, 182, 212, 120, 60, 238, 190, 187, 60, 226, 106, 206, 62, 180, 205, 74, 62, 41, 79, 127, 61, 241, 147, 106, 61, 96, 40, 143, 61, 45, 47, 215, 61, 93, 206, 144, 61, 170, 226, 84, 61, 85, 227, 217, 60, 141, 229, 231, 60, 17, 66, 171, 60, 5, 91, 50, 61, 224, 176, 4, 61, 234, 8, 9, 63, 107, 155, 241, 61, 131, 213, 127, 61, 200, 18, 80, 62, 200, 216, 160, 61, 78, 95, 63, 61, 135, 114, 7, 61, 240, 77, 32, 60, 62, 205, 114, 61, 181, 203, 79, 60, 165, 97, 27, 60, 208, 131, 156, 60, 136, 116, 59, 60, 35, 55, 20, 63, 44, 18, 189, 61, 129, 5, 147, 60, 120, 124, 191, 61, 34, 16, 139, 61, 216, 36, 216, 61, 91, 170, 208, 60, 153, 106, 189, 60, 191, 41, 52, 61, 165, 160, 26, 61, 15, 168, 8, 61, 103, 200, 144, 60, 128, 221, 140, 60, 174, 145, 171, 62, 12, 244, 186, 61, 153, 87, 240, 61, 20, 216, 140, 62, 87, 190, 131, 61, 31, 146, 37, 61, 22, 137, 50, 61, 245, 213, 77, 61, 129, 70, 5, 61, 61, 31, 47, 61, 92, 56, 220, 60, 172, 51, 28, 61, 12, 35, 175, 60, 103, 36, 191, 64, 224, 23, 214, 61, 8, 167, 19, 63, 75, 138, 66, 61, 25, 14, 115, 62, 96, 244, 154, 61, 105, 249, 57, 61, 214, 225, 199, 60, 80, 198, 71, 60, 4, 97, 165, 60, 244, 52, 46, 60, 112, 73, 140, 59, 111, 4, 77, 60, 201, 17, 99, 64, 205, 73, 19, 63, 68, 65, 92, 61, 121, 81, 195, 61, 167, 201, 155, 62, 16, 172, 45, 62, 90, 26, 28, 62, 116, 248, 21, 62, 228, 237, 193, 61, 213, 142, 189, 60, 85, 135, 238, 60, 1, 67, 110, 61, 14, 84, 6, 61, 248, 243, 181, 63, 55, 114, 156, 62, 100, 130, 160, 62, 86, 46, 65, 62, 253, 254, 95, 62, 46, 161, 125, 61, 19, 165, 62, 62, 48, 15, 26, 61, 129, 223, 107, 61, 211, 81, 108, 61, 242, 209, 9, 61, 22, 44, 50, 61, 148, 132, 240, 60, 251, 218, 12, 65, 221, 247, 228, 62, 227, 157, 198, 62, 101, 14, 150, 61, 167, 139, 149, 62, 70, 254, 217, 61, 112, 103, 116, 59, 48, 35, 196, 61, 44, 98, 181, 60, 215, 40, 9, 60, 229, 187, 162, 59, 2, 145, 175, 60, 1, 152, 149, 59, 207, 210, 108, 62, 114, 202, 84, 60, 132, 139, 7, 61, 121, 229, 34, 60, 226, 182, 253, 60, 188, 153, 175, 60, 169, 93, 228, 59, 40, 41, 188, 59, 226, 156, 161, 60, 55, 113, 237, 59, 125, 185, 170, 59, 53, 18, 37, 60, 60, 246, 234, 59, 173, 57, 31, 62, 28, 180, 40, 61, 127, 116, 132, 61, 205, 137, 201, 60, 97, 20, 13, 61, 62, 26, 226, 60, 133, 53, 177, 60, 160, 218, 82, 61, 216, 119, 7, 61, 123, 213, 83, 60, 11, 212, 96, 60, 231, 137, 230, 60, 140, 85, 214, 60, 156, 59, 37, 65, 237, 163, 147, 62, 2, 17, 200, 62, 82, 192, 79, 61, 57, 221, 230, 61, 77, 70, 132, 61, 37, 182, 200, 61, 1, 97, 119, 61, 6, 33, 151, 60, 3, 220, 218, 60, 184, 76, 33, 61, 33, 240, 29, 61, 66, 212, 55, 60, 33, 25, 205, 64, 200, 145, 24, 63, 14, 240, 219, 62, 1, 18, 199, 62, 111, 246, 95, 62, 2, 99, 28, 62, 65, 170, 223, 61, 101, 218, 238, 61, 42, 94, 65, 61, 209, 187, 169, 60, 115, 217, 117, 60, 117, 146, 109, 61, 22, 152, 0, 61, 64, 74, 177, 64, 31, 185, 154, 63, 235, 122, 179, 62, 203, 11, 143, 62, 177, 34, 243, 61, 166, 231, 221, 61, 120, 69, 133, 62, 52, 81, 128, 62, 48, 86, 127, 61, 46, 146, 39, 61, 183, 169, 22, 61, 226, 190, 179, 61, 43, 132, 34, 61, 233, 169, 214, 61, 182, 45, 28, 60, 120, 43, 3, 61, 139, 147, 156, 60, 75, 157, 63, 60, 237, 180, 91, 60, 23, 77, 107, 60, 136, 115, 138, 59, 17, 73, 155, 60, 147, 63, 192, 59, 159, 190, 41, 60, 55, 253, 174, 59, 209, 129, 57, 60, 153, 1, 58, 61, 145, 104, 214, 59, 246, 194, 178, 60, 19, 141, 170, 60, 10, 3, 62, 60, 29, 69, 111, 60, 250, 66, 124, 60, 225, 86, 39, 60, 46, 252, 134, 60, 176, 135, 8, 60, 191, 197, 34, 60, 123, 181, 220, 59, 16, 44, 21, 60, 93, 189, 46, 61, 241, 3, 96, 60, 28, 234, 141, 60, 190, 110, 26, 61, 108, 112, 191, 60, 199, 148, 30, 61, 99, 248, 121, 60, 25, 156, 156, 60, 145, 40, 179, 60, 146, 210, 113, 60, 144, 83, 87, 60, 197, 244, 120, 60, 115, 239, 95, 60, 163, 97, 164, 62, 100, 33, 93, 61, 162, 122, 144, 60, 91, 159, 23, 61, 111, 139, 140, 60, 36, 240, 190, 60, 67, 44, 237, 60, 220, 165, 108, 60, 77, 74, 88, 60, 236, 44, 136, 60, 76, 169, 86, 60, 239, 139, 29, 60, 79, 222, 216, 59, 237, 177, 52, 62, 242, 104, 104, 60, 73, 51, 106, 60, 65, 237, 234, 60, 165, 110, 60, 61, 57, 205, 124, 60, 222, 96, 212, 60, 132, 138, 150, 60, 254, 213, 149, 60, 144, 198, 173, 60, 229, 72, 63, 60, 202, 219, 254, 59, 14, 111, 44, 60, 109, 85, 214, 61, 146, 4, 221, 60, 69, 253, 158, 60, 187, 105, 50, 61, 12, 215, 35, 61, 114, 236, 221, 60, 151, 120, 203, 60, 247, 141, 253, 60, 14, 151, 10, 61, 213, 140, 204, 60, 117, 121, 221, 60, 210, 175, 134, 60, 172, 249, 114, 60, 1, 161, 21, 62, 42, 243, 64, 60, 155, 141, 83, 60, 98, 149, 107, 60, 20, 10, 24, 60, 132, 140, 22, 60, 183, 248, 204, 59, 43, 54, 181, 59, 25, 120, 226, 59, 48, 22, 8, 60, 198, 66, 129, 59, 78, 42, 13, 60, 188, 48, 15, 60, 7, 61, 92, 61, 86, 152, 115, 60, 158, 62, 83, 60, 158, 255, 153, 60, 203, 51, 65, 60, 124, 8, 23, 60, 164, 119, 38, 60, 223, 169, 31, 60, 52, 107, 12, 60, 97, 135, 37, 60, 92, 123, 186, 59, 37, 244, 225, 59, 49, 154, 28, 60, 22, 217, 156, 61, 214, 22, 146, 60, 106, 172, 211, 60, 27, 214, 148, 60, 42, 13, 151, 60, 31, 92, 137, 60, 169, 233, 144, 60, 131, 155, 153, 60, 94, 145, 96, 60, 120, 206, 149, 60, 14, 167, 83, 60, 179, 57, 107, 60, 241, 87, 121, 60, 200, 18, 5, 62, 48, 229, 122, 60, 182, 122, 150, 60, 27, 31, 39, 61, 191, 35, 1, 60, 3, 94, 36, 60, 3, 179, 62, 60, 73, 153, 98, 60, 105, 94, 5, 60, 135, 5, 38, 60, 118, 40, 37, 60, 233, 223, 209, 59, 108, 68, 94, 60, 26, 66, 228, 61, 251, 44, 236, 60, 173, 248, 125, 60, 108, 40, 181, 60, 238, 45, 203, 60, 224, 85, 83, 60, 80, 102, 79, 60, 10, 134, 45, 60, 251, 59, 40, 60, 36, 170, 59, 60, 120, 178, 78, 60, 126, 52, 22, 60, 108, 144, 29, 60, 218, 218, 0, 62, 144, 176, 68, 61, 227, 168, 194, 60, 22, 10, 227, 60, 118, 252, 188, 60, 138, 99, 165, 60, 165, 159, 206, 60, 29, 169, 167, 60, 207, 75, 148, 60, 72, 228, 164, 60, 199, 158, 152, 60, 42, 24, 102, 60, 216, 193, 128, 60, 86, 44, 4, 62, 152, 149, 155, 60, 228, 123, 59, 60, 58, 122, 83, 60, 28, 84, 169, 60, 127, 94, 75, 60, 198, 67, 226, 59, 153, 96, 57, 60, 167, 58, 39, 60, 130, 113, 166, 60, 133, 189, 230, 59, 117, 145, 22, 59, 14, 27, 130, 59, 166, 134, 214, 61, 51, 44, 96, 60, 67, 199, 82, 60, 117, 165, 4, 61, 188, 108, 18, 61, 46, 242, 141, 60, 164, 213, 160, 60, 231, 181, 49, 60, 95, 145, 60, 60, 249, 13, 119, 60, 223, 61, 28, 60, 152, 92, 148, 59, 246, 107, 78, 60, 156, 164, 11, 62, 253, 40, 169, 60, 75, 48, 21, 61, 38, 143, 217, 60, 19, 160, 68, 61, 202, 179, 165, 60, 150, 158, 184, 60, 74, 192, 109, 60, 224, 240, 9, 61, 87, 188, 176, 60, 98, 140, 51, 60, 226, 55, 165, 59, 246, 58, 152, 60, 117, 23, 55, 62, 25, 58, 236, 60, 206, 74, 158, 60, 154, 123, 33, 60, 158, 232, 74, 60, 94, 242, 122, 61, 167, 79, 129, 60, 119, 26, 132, 60, 67, 132, 5, 60, 217, 105, 143, 60, 159, 182, 14, 60, 50, 237, 137, 59, 74, 117, 58, 60, 26, 139, 84, 62, 148, 33, 51, 60, 10, 183, 197, 60, 123, 245, 89, 60, 8, 189, 0, 60, 105, 3, 127, 61, 178, 17, 169, 60, 100, 203, 9, 60, 216, 144, 98, 60, 91, 6, 141, 60, 75, 86, 108, 60, 27, 2, 165, 59, 224, 27, 62, 60, 52, 251, 222, 61, 96, 181, 182, 60, 72, 184, 83, 61, 21, 203, 10, 61, 56, 122, 196, 60, 81, 150, 64, 61, 225, 31, 43, 61, 86, 134, 171, 60, 250, 228, 170, 60, 179, 42, 185, 60, 50, 68, 196, 60, 149, 196, 43, 60, 93, 107, 55, 60, 245, 179, 106, 61, 47, 125, 21, 60, 126, 81, 253, 59, 108, 68, 142, 60, 118, 112, 97, 60, 180, 46, 72, 60, 167, 154, 65, 60, 111, 173, 41, 60, 186, 118, 152, 60, 245, 9, 167, 59, 191, 58, 222, 59, 231, 9, 190, 59, 22, 52, 83, 60, 50, 19, 10, 62, 96, 132, 216, 60, 6, 182, 29, 60, 39, 248, 27, 60, 210, 106, 41, 61, 210, 24, 246, 60, 248, 231, 42, 60, 47, 95, 70, 60, 140, 158, 179, 60, 83, 129, 55, 60, 184, 103, 56, 60, 115, 198, 35, 60, 201, 174, 87, 60, 121, 109, 90, 61, 141, 61, 224, 60, 143, 91, 89, 60, 13, 245, 158, 60, 86, 11, 5, 61, 1, 55, 24, 61, 184, 66, 165, 60, 15, 250, 193, 60, 249, 24, 122, 60, 147, 57, 190, 60, 84, 75, 156, 60, 218, 204, 131, 60, 26, 37, 217, 60, 203, 231, 136, 61, 143, 95, 243, 60, 62, 64, 129, 60, 156, 81, 192, 59, 137, 65, 22, 60, 82, 100, 235, 59, 66, 233, 90, 60, 250, 75, 46, 60, 79, 136, 21, 60, 87, 180, 198, 60, 58, 178, 136, 59, 193, 158, 7, 60, 129, 65, 32, 59, 32, 115, 147, 61, 150, 165, 239, 60, 80, 176, 191, 60, 231, 32, 113, 60, 220, 109, 22, 61, 175, 166, 15, 61, 54, 90, 209, 60, 228, 138, 114, 60, 149, 86, 38, 60, 218, 87, 135, 60, 80, 37, 44, 60, 117, 73, 50, 60, 211, 32, 144, 59, 150, 137, 34, 61, 130, 204, 93, 61, 224, 77, 16, 61, 123, 168, 22, 61, 144, 235, 28, 61, 27, 77, 245, 60, 0, 35, 34, 61, 207, 25, 201, 60, 249, 3, 125, 60, 199, 188, 191, 60, 126, 236, 92, 60, 46, 155, 137, 60, 76, 225, 16, 60, 81, 150, 244, 63, 166, 126, 81, 62, 48, 215, 22, 61, 225, 12, 3, 62, 47, 254, 148, 60, 186, 55, 35, 61, 99, 85, 44, 61, 228, 27, 252, 59, 219, 58, 34, 61, 18, 47, 189, 60, 87, 193, 13, 60, 135, 25, 105, 60, 46, 221, 168, 60, 87, 104, 225, 61, 41, 174, 9, 60, 46, 165, 228, 59, 248, 173, 165, 60, 106, 59, 46, 61, 42, 144, 217, 60, 67, 104, 16, 61, 30, 46, 149, 60, 96, 111, 124, 61, 186, 254, 74, 61, 83, 70, 172, 60, 129, 93, 176, 60, 198, 221, 30, 60, 80, 247, 47, 61, 237, 205, 223, 60, 142, 42, 241, 59, 198, 66, 62, 61, 157, 103, 75, 61, 53, 116, 4, 61, 254, 75, 17, 61, 65, 198, 76, 61, 164, 40, 131, 61, 24, 106, 97, 61, 193, 230, 253, 60, 19, 39, 233, 60, 245, 21, 137, 60, 243, 253, 79, 62, 26, 176, 59, 62, 43, 213, 159, 61, 176, 53, 85, 61, 53, 39, 138, 61, 164, 173, 140, 60, 65, 159, 164, 60, 139, 222, 149, 60, 32, 131, 122, 60, 32, 45, 24, 60, 240, 242, 9, 59, 5, 164, 244, 59, 85, 216, 70, 60, 15, 240, 84, 63, 71, 185, 159, 61, 102, 231, 154, 60, 188, 30, 129, 61, 44, 115, 154, 61, 27, 185, 22, 61, 116, 159, 77, 61, 79, 159, 231, 60, 66, 30, 18, 61, 237, 198, 186, 60, 233, 181, 206, 59, 191, 42, 63, 60, 167, 249, 54, 60, 121, 40, 4, 62, 62, 112, 73, 61, 127, 49, 72, 61, 123, 85, 36, 61, 140, 101, 49, 61, 203, 166, 159, 60, 227, 223, 43, 61, 69, 208, 15, 61, 196, 235, 215, 60, 217, 25, 39, 61, 141, 170, 130, 60, 113, 105, 110, 60, 76, 47, 172, 60, 211, 210, 148, 62, 203, 240, 7, 61, 71, 80, 47, 62, 220, 109, 42, 61, 12, 239, 213, 60, 79, 6, 240, 60, 96, 226, 212, 59, 41, 141, 140, 59, 120, 109, 135, 60, 187, 221, 72, 60, 33, 205, 99, 59, 226, 169, 208, 59, 135, 1, 40, 60, 59, 235, 60, 63, 105, 116, 127, 60, 152, 228, 129, 61, 173, 201, 151, 61, 119, 184, 91, 61, 85, 144, 20, 61, 47, 97, 166, 60, 156, 4, 183, 60, 213, 129, 232, 60, 183, 159, 21, 61, 227, 157, 249, 59, 178, 96, 71, 60, 200, 168, 105, 60, 136, 98, 91, 62, 202, 171, 192, 60, 128, 247, 138, 61, 196, 202, 191, 61, 14, 58, 40, 61, 178, 14, 66, 61, 96, 97, 175, 60, 197, 63, 166, 60, 30, 241, 149, 61, 252, 93, 31, 61, 129, 51, 94, 60, 19, 101, 121, 60, 222, 92, 168, 60, 142, 149, 160, 62, 162, 105, 195, 61, 74, 16, 209, 60, 145, 208, 85, 60, 112, 35, 30, 60, 35, 59, 159, 61, 172, 30, 151, 61, 85, 244, 0, 61, 70, 129, 245, 60, 179, 36, 133, 60, 155, 178, 132, 59, 78, 228, 9, 60, 123, 83, 31, 60, 73, 12, 109, 62, 115, 165, 90, 60, 43, 237, 94, 61, 227, 30, 41, 60, 11, 160, 178, 59, 189, 30, 171, 60, 155, 240, 249, 60, 43, 179, 132, 60, 17, 233, 139, 60, 103, 27, 52, 60, 22, 89, 140, 59, 248, 210, 41, 60, 247, 134, 77, 60, 214, 146, 170, 61, 239, 188, 224, 60, 105, 115, 7, 61, 6, 160, 2, 61, 239, 66, 77, 60, 172, 197, 25, 61, 36, 115, 246, 60, 114, 78, 29, 61, 234, 44, 39, 61, 203, 211, 148, 60, 182, 50, 29, 60, 247, 128, 27, 60, 155, 177, 179, 60, 77, 63, 186, 62, 245, 35, 152, 61, 209, 205, 207, 60, 166, 90, 40, 61, 215, 71, 16, 61, 115, 164, 9, 61, 28, 27, 214, 60, 115, 41, 179, 60, 21, 200, 158, 60, 175, 83, 80, 60, 6, 28, 202, 59, 232, 163, 248, 59, 255, 9, 165, 59, 90, 59, 152, 61, 48, 132, 64, 61, 122, 206, 193, 60, 106, 16, 245, 60, 178, 89, 15, 61, 13, 15, 214, 60, 8, 133, 180, 60, 155, 187, 162, 60, 235, 104, 151, 60, 104, 117, 154, 60, 136, 139, 133, 60, 117, 247, 138, 60, 29, 99, 94, 60, 33, 76, 2, 62, 142, 181, 147, 61, 224, 185, 102, 61, 43, 109, 69, 61, 109, 211, 84, 61, 247, 36, 70, 61, 201, 5, 53, 61, 177, 90, 41, 61, 196, 49, 32, 61, 210, 191, 25, 61, 236, 242, 9, 61, 212, 32, 189, 60, 55, 64, 150, 60, 14, 144, 214, 62, 166, 98, 126, 61, 158, 182, 211, 60, 145, 220, 64, 61, 160, 112, 228, 60, 7, 145, 94, 60, 111, 132, 151, 60, 27, 193, 158, 60, 10, 210, 102, 60, 165, 67, 78, 60, 208, 227, 51, 60, 24, 12, 66, 60, 147, 58, 219, 59, 140, 105, 151, 62, 107, 185, 229, 61, 117, 246, 206, 60, 119, 74, 68, 61, 27, 158, 96, 61, 156, 2, 4, 61, 214, 159, 191, 60, 49, 255, 113, 60, 149, 0, 250, 60, 169, 206, 17, 61, 89, 180, 64, 60, 192, 163, 137, 60, 30, 226, 114, 60, 235, 211, 13, 62, 99, 157, 105, 61, 48, 35, 246, 60, 169, 72, 33, 61, 69, 207, 94, 61, 160, 135, 234, 60, 182, 153, 38, 61, 180, 187, 245, 60, 102, 138, 14, 61, 163, 169, 39, 61, 231, 31, 188, 60, 111, 223, 208, 60, 141, 121, 208, 60, 210, 153, 130, 62, 76, 134, 123, 61, 235, 67, 153, 60, 120, 148, 142, 60, 220, 94, 116, 60, 52, 112, 66, 60, 104, 36, 122, 60, 82, 237, 142, 60, 126, 146, 48, 60, 46, 50, 59, 60, 5, 234, 64, 60, 110, 14, 69, 60, 240, 23, 53, 60, 118, 107, 141, 61, 134, 148, 16, 61, 33, 40, 139, 60, 101, 25, 194, 60, 185, 75, 157, 60, 248, 20, 133, 60, 132, 108, 153, 60, 197, 93, 141, 60, 58, 23, 156, 60, 174, 4, 155, 60, 47, 171, 141, 60, 231, 90, 126, 60, 240, 156, 101, 60, 56, 144, 212, 61, 184, 249, 97, 61, 232, 235, 28, 61, 46, 4, 20, 61, 111, 73, 29, 61, 162, 89, 232, 60, 201, 224, 225, 60, 218, 144, 41, 61, 15, 115, 237, 60, 20, 184, 4, 61, 50, 159, 244, 60, 30, 141, 5, 61, 253, 218, 194, 60, 243, 249, 111, 62, 147, 88, 44, 61, 177, 62, 254, 60, 243, 108, 236, 60, 211, 203, 158, 60, 26, 123, 88, 60, 14, 155, 135, 60, 23, 189, 139, 60, 76, 131, 35, 60, 163, 98, 33, 60, 20, 211, 52, 60, 84, 56, 198, 59, 167, 251, 27, 60, 26, 85, 197, 61, 101, 187, 81, 61, 122, 7, 208, 60, 130, 72, 186, 60, 234, 70, 196, 60, 203, 55, 115, 60, 117, 146, 118, 60, 143, 17, 147, 60, 96, 254, 130, 60, 105, 211, 44, 60, 220, 226, 113, 60, 160, 32, 45, 60, 135, 140, 73, 60, 226, 199, 16, 62, 74, 145, 156, 61, 28, 184, 68, 61, 241, 90, 42, 61, 114, 228, 47, 61, 159, 239, 18, 61, 110, 55, 235, 60, 242, 152, 1, 61, 234, 149, 18, 61, 250, 21, 148, 60, 41, 22, 201, 60, 37, 144, 153, 60, 163, 124, 198, 60, 199, 164, 20, 62, 18, 164, 141, 60, 193, 49, 54, 60, 19, 130, 191, 59, 165, 14, 180, 59, 172, 29, 65, 60, 10, 255, 77, 60, 213, 61, 221, 59, 73, 176, 39, 60, 105, 115, 42, 60, 8, 126, 242, 59, 202, 202, 191, 59, 206, 198, 240, 59, 161, 16, 86, 61, 139, 42, 181, 60, 105, 106, 135, 60, 25, 247, 171, 60, 244, 15, 146, 60, 202, 218, 149, 60, 182, 206, 146, 60, 6, 118, 90, 60, 81, 54, 116, 60, 189, 155, 132, 60, 175, 119, 91, 60, 143, 212, 39, 60, 232, 234, 84, 60, 70, 105, 151, 61, 52, 131, 22, 61, 43, 57, 241, 60, 240, 126, 15, 61, 78, 250, 245, 60, 59, 163, 32, 61, 127, 249, 228, 60, 26, 145, 202, 60, 177, 144, 202, 60, 144, 191, 195, 60, 6, 176, 203, 60, 144, 224, 153, 60, 139, 46, 188, 60, 65, 134, 154, 62, 252, 105, 164, 60, 242, 185, 17, 61, 59, 160, 186, 60, 155, 189, 80, 60, 192, 236, 82, 60, 231, 91, 35, 60, 117, 226, 18, 60, 31, 63, 118, 60, 225, 107, 68, 60, 194, 46, 95, 60, 2, 139, 16, 60, 82, 208, 41, 60, 223, 31, 85, 61, 88, 178, 120, 60, 125, 229, 169, 60, 252, 54, 194, 60, 243, 50, 7, 61, 136, 85, 12, 61, 95, 155, 110, 60, 235, 135, 165, 60, 240, 20, 220, 60, 175, 43, 40, 60, 51, 173, 178, 60, 86, 167, 128, 60, 191, 80, 115, 60, 74, 247, 156, 61, 56, 43, 173, 60, 227, 16, 8, 61, 133, 57, 240, 60, 231, 104, 57, 61, 230, 238, 82, 61, 49, 65, 21, 61, 56, 207, 14, 61, 148, 92, 6, 61, 97, 143, 174, 60, 241, 72, 37, 61, 199, 168, 239, 60, 103, 172, 215, 60, 173, 57, 248, 61, 254, 244, 199, 60, 106, 131, 164, 60, 226, 84, 139, 60, 213, 66, 149, 60, 76, 102, 29, 60, 184, 67, 13, 60, 80, 197, 244, 59, 75, 232, 10, 60, 27, 174, 1, 60, 98, 177, 0, 60, 79, 94, 236, 59, 62, 193, 3, 60, 213, 191, 132, 61, 20, 204, 1, 61, 145, 61, 147, 60, 77, 83, 133, 60, 20, 61, 191, 60, 15, 97, 156, 60, 58, 72, 146, 60, 149, 164, 129, 60, 63, 45, 129, 60, 245, 230, 78, 60, 174, 164, 109, 60, 154, 166, 73, 60, 51, 54, 104, 60, 41, 102, 151, 61, 61, 250, 25, 61, 80, 176, 194, 60, 103, 196, 217, 60, 216, 28, 24, 61, 15, 101, 251, 60, 180, 213, 247, 60, 93, 46, 253, 60, 107, 19, 229, 60, 251, 116, 235, 60, 223, 229, 212, 60, 226, 173, 217, 60, 111, 17, 209, 60, 107, 35, 10, 63, 184, 52, 213, 61, 246, 192, 78, 61, 104, 220, 41, 61, 165, 126, 142, 60, 170, 176, 79, 60, 13, 250, 222, 60, 106, 28, 3, 61, 37, 2, 14, 61, 167, 92, 136, 60, 111, 51, 152, 60, 139, 152, 226, 59, 157, 129, 65, 60, 132, 241, 167, 61, 196, 110, 247, 60, 143, 108, 38, 61, 213, 98, 28, 61, 5, 49, 179, 60, 185, 165, 7, 61, 210, 109, 99, 60, 175, 226, 36, 61, 203, 15, 158, 60, 115, 210, 157, 60, 117, 65, 167, 60, 48, 89, 173, 60, 49, 3, 84, 60, 4, 177, 211, 61, 170, 161, 83, 61, 42, 105, 66, 61, 255, 43, 81, 61, 21, 64, 10, 61, 41, 220, 77, 61, 209, 106, 151, 60, 223, 213, 20, 61, 176, 14, 13, 61, 144, 143, 3, 61, 108, 145, 24, 61, 215, 8, 189, 60, 78, 124, 208, 60, 253, 143, 196, 62, 99, 36, 101, 61, 122, 84, 204, 59, 85, 127, 173, 59, 151, 3, 163, 60, 10, 159, 148, 60, 212, 163, 136, 60, 147, 189, 248, 59, 139, 189, 99, 60, 66, 205, 45, 60, 80, 184, 248, 59, 242, 235, 215, 59, 220, 56, 198, 59, 115, 84, 151, 61, 131, 72, 194, 60, 224, 1, 78, 60, 130, 231, 159, 59, 184, 49, 40, 60, 27, 190, 126, 60, 110, 81, 151, 60, 216, 166, 206, 59, 27, 44, 135, 60, 86, 149, 177, 60, 127, 164, 83, 60, 120, 12, 95, 60, 197, 216, 8, 60, 0, 20, 251, 61, 215, 230, 64, 61, 12, 12, 177, 60, 121, 177, 64, 60, 93, 243, 91, 60, 87, 231, 226, 60, 95, 88, 57, 61, 79, 156, 140, 60, 169, 106, 206, 60, 136, 57, 214, 60, 77, 250, 199, 60, 200, 4, 8, 61, 70, 216, 134, 60, 77, 157, 125, 62, 202, 37, 27, 61, 28, 209, 137, 60, 200, 36, 255, 59, 165, 92, 95, 60, 115, 22, 96, 60, 9, 90, 136, 60, 80, 198, 3, 60, 215, 41, 92, 60, 30, 191, 159, 59, 169, 78, 3, 60, 64, 80, 27, 60, 124, 128, 12, 60, 191, 28, 166, 61, 118, 253, 208, 60, 141, 64, 139, 60, 213, 85, 241, 59, 148, 255, 174, 60, 55, 142, 210, 59, 20, 152, 38, 60, 136, 56, 17, 60, 166, 76, 132, 60, 121, 131, 77, 60, 12, 227, 73, 60, 199, 30, 167, 60, 162, 194, 176, 60, 96, 24, 230, 61, 175, 82, 68, 61, 192, 206, 245, 60, 15, 74, 160, 60, 141, 3, 31, 61, 51, 215, 132, 60, 207, 76, 19, 61, 68, 198, 215, 60, 67, 190, 167, 60, 222, 140, 235, 60, 104, 227, 25, 61, 119, 244, 243, 60, 9, 157, 254, 60, 95, 149, 88, 62, 240, 237, 47, 60, 15, 191, 115, 60, 67, 223, 29, 61, 170, 84, 197, 60, 131, 241, 139, 60, 212, 83, 157, 60, 51, 195, 72, 60, 95, 148, 82, 60, 183, 101, 10, 60, 11, 238, 37, 60, 104, 203, 76, 60, 222, 48, 109, 60, 189, 1, 39, 62, 139, 231, 9, 61, 221, 148, 236, 60, 201, 114, 167, 60, 127, 195, 254, 60, 109, 211, 80, 60, 58, 124, 135, 60, 4, 184, 60, 60, 252, 126, 55, 60, 132, 255, 174, 60, 59, 35, 175, 60, 60, 7, 64, 60, 214, 188, 110, 60, 7, 3, 179, 61, 136, 236, 0, 61, 79, 244, 161, 60, 224, 45, 255, 60, 13, 246, 202, 60, 1, 240, 222, 60, 168, 134, 198, 60, 197, 23, 194, 60, 146, 249, 123, 60, 236, 168, 248, 60, 205, 246, 13, 61, 63, 82, 166, 60, 216, 123, 216, 60, 37, 181, 155, 62, 76, 122, 253, 60, 130, 98, 97, 60, 65, 60, 56, 60, 193, 164, 176, 60, 148, 231, 5, 61, 130, 77, 29, 61, 113, 65, 225, 59, 46, 239, 210, 59, 90, 160, 3, 60, 128, 179, 76, 60, 166, 237, 17, 60, 6, 177, 51, 60, 34, 194, 155, 61, 223, 98, 119, 60, 252, 6, 197, 60, 30, 186, 136, 60, 115, 208, 79, 60, 24, 235, 206, 60, 16, 96, 94, 60, 174, 42, 7, 60, 127, 130, 82, 60, 30, 77, 65, 60, 62, 29, 92, 60, 94, 249, 68, 60, 250, 131, 86, 60, 127, 67, 142, 61, 234, 215, 211, 60, 9, 40, 18, 61, 122, 190, 4, 61, 41, 70, 5, 61, 0, 248, 109, 60, 48, 209, 40, 61, 139, 203, 151, 60, 233, 27, 17, 61, 86, 5, 231, 60, 252, 99, 155, 60, 15, 135, 159, 60, 203, 37, 151, 60, 118, 253, 66, 62, 204, 255, 70, 60, 64, 93, 236, 59, 10, 121, 166, 59, 239, 185, 231, 59, 50, 21, 7, 60, 165, 176, 107, 59, 208, 115, 239, 59, 58, 160, 165, 59, 106, 222, 220, 59, 13, 253, 6, 60, 126, 225, 190, 59, 239, 10, 4, 60, 136, 105, 47, 61, 130, 174, 213, 60, 95, 222, 123, 60, 50, 213, 72, 60, 123, 53, 54, 60, 124, 112, 124, 60, 220, 178, 150, 60, 163, 188, 158, 60, 116, 129, 9, 60, 14, 161, 38, 60, 173, 94, 87, 60, 202, 70, 73, 60, 26, 118, 171, 60, 208, 234, 162, 61, 27, 161, 101, 61, 49, 109, 243, 60, 154, 127, 222, 60, 74, 113, 188, 60, 226, 22, 246, 60, 112, 96, 201, 60, 103, 139, 33, 61, 72, 3, 44, 60, 110, 13, 160, 60, 143, 51, 56, 61, 168, 122, 137, 60, 105, 133, 23, 61, 108, 83, 31, 61, 137, 223, 22, 60, 25, 1, 10, 60, 129, 219, 56, 60, 187, 166, 255, 59, 180, 88, 237, 59, 173, 232, 220, 59, 132, 36, 227, 59, 134, 186, 24, 60, 149, 228, 186, 59, 66, 213, 55, 60, 78, 123, 147, 59, 49, 222, 137, 59, 7, 186, 250, 60, 120, 14, 211, 60, 171, 157, 128, 60, 56, 30, 103, 60, 216, 67, 99, 60, 74, 174, 121, 60, 111, 5, 135, 60, 166, 10, 141, 60, 14, 142, 174, 60, 208, 199, 68, 60, 49, 8, 109, 60, 92, 221, 199, 59, 254, 45, 5, 60, 186, 243, 63, 61, 7, 135, 106, 61, 39, 218, 18, 61, 180, 252, 219, 60, 200, 209, 252, 60, 115, 239, 5, 61, 145, 45, 11, 61, 23, 238, 7, 61, 140, 194, 50, 61, 226, 136, 210, 60, 248, 152, 222, 60, 191, 201, 118, 60, 116, 5, 180, 60, 203, 207, 125, 61, 193, 124, 246, 59, 49, 59, 5, 60, 47, 235, 201, 59, 11, 172, 223, 59, 205, 145, 218, 59, 115, 201, 152, 59, 48, 217, 10, 60, 92, 75, 254, 59, 126, 147, 137, 59, 49, 0, 140, 59, 66, 251, 205, 59, 19, 88, 241, 59, 30, 177, 250, 60, 177, 165, 155, 60, 143, 244, 9, 60, 107, 115, 46, 60, 200, 161, 69, 60, 196, 231, 49, 60, 223, 56, 149, 59, 19, 28, 34, 60, 150, 63, 112, 60, 47, 84, 73, 60, 63, 189, 62, 60, 191, 36, 7, 60, 152, 31, 88, 60, 127, 58, 144, 61, 9, 127, 76, 61, 103, 24, 179, 60, 148, 192, 161, 60, 6, 6, 200, 60, 124, 9, 88, 60, 148, 192, 61, 60, 253, 10, 145, 60, 214, 93, 197, 60, 211, 78, 159, 60, 227, 158, 130, 60, 56, 69, 149, 60, 247, 128, 177, 60, 233, 8, 42, 63, 159, 81, 67, 61, 28, 110, 36, 61, 234, 87, 17, 60, 78, 85, 113, 60, 232, 37, 132, 60, 186, 78, 128, 60, 131, 86, 118, 60, 183, 110, 9, 60, 251, 209, 21, 60, 177, 58, 15, 60, 129, 135, 207, 59, 166, 4, 228, 59, 239, 215, 143, 61, 62, 15, 12, 61, 78, 71, 157, 60, 182, 133, 0, 61, 130, 5, 172, 60, 87, 5, 131, 60, 142, 133, 52, 60, 242, 94, 224, 60, 17, 1, 233, 59, 147, 245, 163, 60, 136, 187, 40, 60, 252, 77, 108, 60, 186, 105, 149, 60, 148, 196, 227, 61, 39, 224, 76, 61, 219, 219, 43, 61, 95, 49, 28, 61, 160, 189, 168, 60, 149, 102, 189, 60, 42, 111, 31, 60, 214, 120, 51, 61, 184, 234, 51, 60, 250, 91, 201, 60, 117, 218, 140, 60, 228, 247, 149, 60, 147, 20, 149, 60, 203, 244, 227, 61, 200, 46, 43, 60, 228, 40, 37, 60, 240, 21, 188, 60, 234, 58, 151, 60, 11, 237, 216, 59, 72, 25, 27, 60, 162, 251, 12, 60, 12, 159, 150, 59, 22, 239, 91, 60, 184, 222, 67, 60, 164, 246, 213, 59, 95, 198, 184, 59, 37, 155, 11, 61, 191, 27, 157, 60, 243, 112, 104, 60, 187, 180, 164, 60, 114, 66, 96, 60, 165, 218, 33, 60, 240, 59, 99, 60, 111, 177, 106, 60, 77, 14, 2, 60, 67, 200, 97, 60, 26, 111, 81, 60, 101, 137, 238, 59, 218, 94, 39, 60, 192, 187, 172, 61, 119, 94, 70, 61, 168, 24, 28, 61, 172, 59, 19, 61, 199, 220, 70, 61, 173, 14, 225, 60, 185, 116, 239, 60, 26, 59, 230, 60, 189, 181, 183, 60, 172, 232, 107, 60, 250, 66, 17, 61, 5, 57, 176, 60, 185, 7, 142, 60, 48, 204, 103, 62, 138, 119, 125, 60, 100, 87, 210, 59, 63, 100, 39, 60, 251, 82, 164, 60, 177, 82, 223, 59, 220, 152, 6, 60, 25, 241, 166, 59, 211, 69, 153, 59, 207, 53, 161, 59, 228, 31, 238, 59, 64, 180, 181, 59, 246, 74, 199, 59, 233, 227, 4, 61, 116, 173, 155, 60, 68, 157, 134, 60, 8, 202, 84, 60, 105, 99, 150, 60, 27, 47, 129, 60, 110, 245, 159, 60, 230, 90, 105, 60, 175, 200, 74, 60, 248, 124, 52, 60, 5, 101, 14, 60, 171, 85, 28, 60, 43, 131, 49, 60, 254, 254, 106, 61, 70, 97, 4, 61, 87, 193, 177, 60, 45, 93, 215, 60, 48, 49, 6, 61, 193, 8, 16, 61, 70, 141, 15, 61, 10, 34, 20, 61, 126, 60, 196, 60, 83, 2, 177, 60, 74, 205, 135, 60, 246, 148, 169, 60, 145, 22, 171, 60, 198, 226, 128, 62, 38, 59, 170, 60, 52, 226, 251, 59, 111, 161, 209, 59, 224, 145, 154, 60, 50, 231, 54, 60, 131, 66, 47, 60, 181, 9, 29, 60, 70, 19, 12, 60, 239, 201, 160, 59, 111, 165, 165, 59, 159, 226, 209, 59, 7, 156, 200, 59, 122, 191, 24, 61, 141, 87, 195, 60, 144, 111, 219, 60, 104, 69, 152, 60, 153, 21, 157, 60, 172, 47, 136, 60, 46, 172, 197, 60, 80, 160, 170, 60, 116, 78, 86, 60, 11, 130, 30, 60, 43, 115, 60, 60, 142, 76, 15, 60, 121, 214, 73, 60, 35, 66, 41, 61, 58, 97, 199, 60, 173, 37, 174, 60, 248, 238, 194, 60, 210, 142, 18, 61, 27, 15, 201, 60, 42, 251, 11, 61, 154, 199, 14, 61, 142, 173, 168, 60, 140, 20, 181, 60, 155, 212, 54, 60, 175, 126, 86, 60, 82, 82, 103, 60, 15, 248, 180, 61, 96, 48, 144, 60, 106, 102, 240, 59, 253, 248, 44, 60, 211, 123, 110, 60, 85, 29, 200, 59, 139, 209, 51, 60, 65, 67, 221, 59, 194, 10, 175, 59, 196, 210, 125, 59, 203, 212, 19, 60, 40, 157, 155, 59, 204, 154, 199, 59, 96, 199, 207, 60, 4, 215, 152, 60, 194, 98, 109, 60, 125, 186, 51, 60, 64, 89, 142, 60, 188, 2, 82, 60, 129, 160, 100, 60, 66, 91, 88, 60, 85, 65, 86, 60, 76, 244, 24, 60, 76, 226, 59, 60, 176, 188, 98, 60, 242, 103, 251, 59, 107, 0, 172, 61, 117, 188, 69, 61, 172, 188, 14, 61, 253, 214, 239, 60, 173, 64, 158, 60, 255, 203, 200, 60, 58, 207, 23, 61, 197, 219, 180, 60, 111, 48, 187, 60, 177, 243, 178, 60, 40, 118, 218, 60, 82, 180, 211, 60, 31, 245, 179, 60, 79, 52, 170, 62, 152, 80, 45, 60, 212, 30, 19, 60, 84, 13, 41, 60, 249, 105, 129, 60, 249, 85, 230, 59, 232, 238, 234, 59, 39, 136, 0, 60, 166, 94, 149, 59, 18, 139, 5, 60, 73, 0, 12, 60, 231, 108, 1, 60, 0, 34, 208, 59, 149, 236, 52, 61, 18, 254, 157, 60, 200, 39, 144, 60, 24, 205, 130, 60, 118, 96, 33, 60, 185, 225, 54, 60, 150, 170, 128, 60, 206, 137, 66, 60, 143, 134, 2, 60, 91, 58, 134, 60, 155, 148, 154, 60, 141, 202, 94, 60, 153, 47, 116, 60, 89, 212, 122, 61, 82, 68, 62, 61, 44, 12, 175, 60, 159, 106, 135, 60, 116, 212, 152, 60, 62, 92, 202, 60, 23, 237, 18, 61, 241, 109, 213, 60, 182, 166, 118, 60, 90, 124, 188, 60, 39, 19, 166, 60, 49, 11, 212, 60, 139, 42, 205, 60, 60, 3, 206, 61, 36, 197, 78, 61, 118, 25, 61, 60, 88, 241, 183, 60, 14, 43, 91, 60, 112, 117, 185, 60, 72, 91, 0, 60, 211, 130, 124, 60, 204, 238, 62, 60, 237, 111, 244, 59, 217, 187, 56, 60, 124, 38, 27, 60, 223, 43, 43, 60, 251, 72, 58, 61, 53, 132, 158, 60, 114, 221, 55, 60, 247, 250, 171, 60, 214, 215, 163, 60, 241, 103, 166, 60, 39, 106, 24, 60, 26, 175, 166, 60, 232, 42, 138, 60, 32, 60, 97, 60, 8, 183, 171, 60, 189, 158, 128, 60, 155, 120, 95, 60, 121, 83, 170, 61, 255, 136, 34, 61, 27, 59, 213, 60, 93, 194, 20, 61, 36, 90, 25, 61, 173, 116, 62, 61, 66, 38, 201, 60, 26, 196, 29, 61, 28, 210, 24, 61, 83, 38, 162, 60, 232, 10, 14, 61, 117, 66, 167, 60, 238, 214, 194, 60, 177, 194, 145, 61, 115, 234, 152, 60, 153, 255, 57, 60, 63, 199, 145, 60, 135, 64, 70, 60, 141, 105, 83, 60, 197, 209, 31, 60, 237, 208, 4, 60, 198, 103, 20, 60, 141, 97, 65, 60, 96, 125, 87, 60, 167, 124, 8, 60, 195, 69, 6, 60, 65, 55, 194, 60]).concat([62, 184, 218, 60, 86, 137, 61, 60, 177, 209, 27, 60, 87, 229, 88, 60, 45, 94, 73, 60, 97, 22, 152, 60, 156, 30, 75, 60, 59, 203, 80, 60, 192, 118, 43, 60, 185, 195, 43, 60, 230, 121, 115, 60, 65, 224, 96, 60, 47, 152, 77, 61, 18, 213, 47, 61, 211, 6, 139, 60, 246, 167, 213, 60, 96, 27, 209, 60, 218, 213, 164, 60, 90, 5, 228, 60, 194, 40, 24, 61, 183, 121, 145, 60, 88, 197, 203, 60, 161, 150, 221, 60, 171, 254, 241, 60, 122, 187, 194, 60, 12, 233, 72, 62, 184, 59, 154, 60, 240, 26, 177, 59, 226, 79, 83, 60, 183, 196, 165, 59, 141, 92, 194, 60, 148, 154, 39, 60, 128, 24, 67, 60, 58, 70, 200, 59, 67, 208, 10, 60, 117, 0, 143, 59, 79, 177, 162, 59, 0, 85, 192, 59, 220, 39, 59, 61, 191, 138, 74, 60, 218, 41, 44, 60, 224, 46, 69, 60, 54, 73, 73, 60, 148, 223, 35, 60, 173, 60, 139, 60, 60, 207, 155, 60, 166, 209, 26, 60, 83, 175, 101, 60, 195, 155, 92, 60, 111, 131, 121, 60, 182, 17, 130, 60, 3, 77, 102, 61, 70, 112, 247, 60, 11, 3, 148, 60, 186, 227, 147, 60, 121, 167, 1, 61, 103, 166, 238, 60, 26, 233, 222, 60, 64, 163, 7, 61, 4, 161, 205, 60, 93, 205, 131, 60, 207, 126, 72, 60, 20, 166, 164, 60, 23, 20, 238, 60, 66, 59, 172, 62, 234, 205, 101, 60, 60, 75, 37, 60, 79, 28, 4, 60, 185, 123, 250, 59, 34, 74, 247, 59, 212, 77, 13, 60, 164, 162, 232, 59, 128, 56, 213, 59, 231, 206, 193, 59, 164, 12, 231, 59, 60, 119, 241, 59, 162, 253, 251, 59, 167, 95, 83, 61, 230, 195, 159, 60, 174, 23, 149, 60, 169, 81, 142, 60, 127, 18, 138, 60, 217, 45, 95, 60, 50, 27, 113, 60, 240, 126, 89, 60, 142, 214, 42, 60, 86, 110, 62, 60, 22, 22, 53, 60, 193, 63, 73, 60, 216, 84, 62, 60, 213, 226, 180, 61, 84, 110, 45, 61, 243, 180, 4, 61, 242, 213, 247, 60, 255, 90, 197, 60, 41, 245, 212, 60, 63, 107, 222, 60, 58, 128, 199, 60, 253, 214, 237, 60, 3, 207, 248, 60, 113, 163, 188, 60, 170, 82, 195, 60, 240, 187, 231, 60, 232, 75, 132, 62, 218, 87, 102, 60, 20, 212, 112, 60, 18, 65, 42, 60, 105, 179, 228, 59, 22, 213, 5, 60, 227, 68, 221, 59, 154, 185, 243, 59, 105, 40, 26, 60, 98, 42, 255, 59, 222, 165, 249, 59, 33, 4, 228, 59, 75, 174, 216, 59, 246, 202, 254, 60, 40, 75, 109, 60, 121, 87, 100, 60, 121, 237, 61, 60, 107, 211, 101, 60, 211, 12, 100, 60, 141, 75, 81, 60, 133, 25, 45, 60, 86, 73, 39, 60, 151, 77, 98, 60, 241, 146, 73, 60, 88, 132, 82, 60, 187, 80, 48, 60, 38, 187, 162, 61, 28, 80, 13, 61, 3, 19, 14, 61, 249, 38, 219, 60, 233, 158, 220, 60, 118, 186, 206, 60, 148, 49, 247, 60, 132, 22, 235, 60, 199, 93, 217, 60, 125, 84, 235, 60, 144, 251, 199, 60, 91, 216, 231, 60, 79, 242, 236, 60, 190, 36, 169, 62, 239, 83, 53, 60, 12, 131, 4, 60, 46, 8, 243, 59, 199, 11, 237, 59, 83, 77, 202, 59, 104, 48, 230, 59, 178, 121, 200, 59, 80, 171, 218, 59, 236, 228, 248, 59, 143, 214, 0, 60, 79, 157, 235, 59, 97, 126, 200, 59, 43, 90, 35, 61, 71, 3, 131, 60, 191, 229, 112, 60, 123, 118, 109, 60, 249, 64, 61, 60, 156, 3, 128, 60, 5, 188, 131, 60, 56, 33, 103, 60, 126, 94, 105, 60, 57, 144, 110, 60, 54, 66, 95, 60, 93, 209, 79, 60, 201, 165, 86, 60, 20, 37, 92, 61, 31, 179, 23, 61, 35, 100, 21, 61, 17, 127, 7, 61, 172, 107, 210, 60, 198, 57, 189, 60, 41, 194, 217, 60, 177, 6, 189, 60, 28, 40, 194, 60, 48, 176, 229, 60, 249, 207, 216, 60, 53, 148, 190, 60, 213, 90, 200, 60, 147, 121, 157, 62, 3, 12, 37, 60, 188, 113, 21, 60, 99, 195, 249, 59, 127, 36, 3, 60, 19, 196, 33, 60, 14, 19, 0, 60, 55, 235, 2, 60, 30, 210, 205, 59, 215, 107, 182, 59, 50, 106, 197, 59, 11, 208, 190, 59, 171, 130, 168, 59, 137, 211, 23, 61, 211, 137, 144, 60, 126, 212, 144, 60, 25, 44, 119, 60, 239, 34, 128, 60, 46, 42, 125, 60, 229, 122, 137, 60, 145, 5, 116, 60, 86, 133, 113, 60, 150, 97, 91, 60, 116, 161, 79, 60, 23, 85, 58, 60, 225, 116, 41, 60, 104, 174, 144, 61, 166, 102, 21, 61, 71, 184, 243, 60, 87, 198, 218, 60, 150, 255, 209, 60, 159, 163, 243, 60, 57, 185, 235, 60, 182, 111, 207, 60, 40, 60, 209, 60, 34, 118, 197, 60, 117, 232, 232, 60, 25, 238, 200, 60, 107, 141, 177, 60, 205, 28, 234, 62, 34, 232, 139, 61, 250, 249, 153, 60, 46, 204, 128, 60, 196, 183, 48, 60, 202, 255, 3, 60, 164, 144, 16, 60, 247, 121, 161, 60, 85, 237, 58, 60, 38, 15, 85, 60, 252, 24, 41, 60, 173, 63, 39, 60, 0, 214, 43, 60, 183, 127, 35, 62, 237, 57, 96, 62, 220, 97, 112, 61, 44, 116, 161, 61, 249, 170, 235, 60, 74, 20, 18, 61, 155, 196, 21, 61, 46, 63, 20, 61, 116, 35, 225, 60, 234, 253, 183, 60, 187, 38, 6, 61, 232, 150, 129, 60, 126, 55, 242, 60, 47, 20, 4, 62, 244, 81, 50, 62, 238, 220, 165, 61, 162, 52, 135, 61, 237, 79, 53, 61, 25, 106, 20, 61, 220, 137, 246, 60, 197, 163, 75, 61, 125, 215, 28, 61, 222, 25, 254, 60, 4, 80, 41, 61, 235, 120, 35, 61, 120, 146, 21, 61, 225, 66, 187, 62, 235, 45, 18, 61, 136, 39, 164, 60, 236, 211, 145, 60, 193, 168, 126, 60, 156, 176, 32, 60, 178, 4, 10, 60, 180, 134, 34, 60, 47, 242, 101, 60, 0, 255, 43, 60, 9, 11, 238, 59, 18, 55, 28, 60, 104, 10, 70, 60, 227, 250, 169, 61, 191, 159, 77, 61, 166, 37, 62, 61, 20, 33, 41, 61, 158, 194, 158, 60, 183, 137, 158, 60, 111, 167, 206, 60, 83, 102, 219, 60, 48, 163, 178, 60, 158, 0, 9, 61, 241, 48, 139, 60, 74, 19, 111, 60, 240, 68, 144, 60, 241, 52, 53, 62, 54, 180, 125, 61, 86, 23, 70, 61, 54, 107, 145, 61, 59, 213, 11, 61, 201, 73, 17, 61, 204, 5, 32, 61, 12, 49, 24, 61, 56, 11, 65, 61, 32, 177, 62, 61, 103, 245, 26, 61, 34, 101, 3, 61, 165, 243, 24, 61, 74, 236, 102, 62, 228, 250, 233, 60, 129, 249, 110, 60, 237, 222, 177, 60, 48, 58, 132, 60, 234, 44, 88, 60, 245, 103, 39, 60, 149, 23, 59, 60, 36, 46, 222, 59, 81, 48, 123, 60, 53, 220, 252, 59, 35, 148, 23, 60, 88, 138, 72, 60, 90, 229, 58, 62, 167, 164, 204, 61, 224, 31, 144, 61, 140, 140, 80, 61, 7, 132, 28, 61, 3, 171, 244, 60, 168, 13, 192, 60, 205, 254, 2, 61, 37, 48, 147, 60, 210, 15, 192, 60, 41, 15, 155, 60, 156, 170, 193, 60, 158, 142, 147, 60, 233, 47, 4, 62, 116, 156, 208, 61, 41, 143, 132, 61, 103, 76, 145, 61, 224, 198, 47, 61, 1, 154, 34, 61, 140, 238, 128, 61, 39, 1, 83, 61, 217, 98, 239, 60, 155, 153, 20, 61, 115, 172, 13, 61, 29, 111, 26, 61, 129, 22, 5, 61, 5, 221, 239, 61, 217, 10, 190, 60, 170, 106, 46, 60, 208, 187, 86, 60, 71, 182, 29, 60, 199, 63, 110, 60, 113, 86, 164, 60, 57, 99, 120, 60, 209, 166, 81, 60, 182, 94, 34, 60, 182, 175, 60, 60, 77, 74, 49, 60, 242, 77, 92, 60, 6, 41, 178, 62, 79, 92, 131, 61, 139, 151, 66, 61, 46, 82, 98, 61, 204, 50, 189, 60, 125, 183, 5, 61, 240, 45, 4, 61, 114, 216, 151, 60, 151, 105, 173, 60, 36, 237, 72, 60, 45, 142, 170, 60, 236, 110, 123, 60, 243, 115, 220, 60, 205, 71, 24, 62, 202, 156, 234, 61, 196, 78, 143, 61, 210, 156, 89, 61, 20, 154, 114, 61, 149, 132, 110, 61, 18, 184, 171, 61, 53, 158, 44, 61, 234, 57, 241, 60, 255, 93, 214, 60, 153, 189, 202, 60, 29, 65, 49, 61, 135, 213, 51, 61, 7, 0, 133, 62, 189, 72, 20, 61, 230, 6, 120, 60, 41, 158, 40, 61, 135, 237, 111, 60, 4, 23, 170, 60, 146, 205, 67, 60, 140, 35, 136, 60, 213, 87, 177, 60, 129, 84, 37, 60, 127, 161, 15, 60, 174, 96, 232, 59, 233, 93, 67, 60, 27, 128, 142, 61, 223, 179, 237, 60, 234, 93, 187, 60, 181, 37, 55, 61, 151, 161, 165, 60, 90, 112, 153, 60, 94, 151, 147, 60, 195, 76, 233, 60, 45, 87, 133, 60, 219, 61, 210, 60, 208, 185, 105, 60, 93, 67, 158, 60, 5, 70, 158, 60, 142, 122, 164, 61, 6, 59, 71, 61, 109, 183, 230, 60, 6, 91, 95, 61, 221, 32, 14, 61, 210, 254, 222, 60, 44, 170, 252, 60, 9, 126, 7, 61, 132, 70, 210, 60, 132, 145, 220, 60, 51, 86, 196, 60, 192, 24, 251, 60, 236, 59, 183, 60, 196, 20, 20, 63, 219, 94, 28, 62, 111, 32, 147, 61, 197, 97, 80, 61, 249, 156, 0, 61, 94, 146, 191, 60, 231, 78, 129, 60, 240, 83, 157, 60, 77, 206, 37, 60, 20, 27, 54, 60, 195, 112, 21, 60, 199, 158, 37, 60, 6, 170, 236, 59, 32, 149, 182, 61, 75, 7, 50, 61, 68, 141, 76, 61, 19, 196, 127, 61, 115, 13, 19, 61, 89, 202, 231, 60, 155, 98, 228, 60, 43, 198, 188, 60, 75, 148, 166, 60, 36, 174, 176, 60, 250, 65, 126, 60, 149, 33, 159, 60, 132, 105, 137, 60, 144, 138, 242, 61, 98, 90, 133, 61, 220, 118, 117, 61, 17, 142, 103, 61, 187, 29, 27, 61, 217, 80, 9, 61, 6, 96, 37, 61, 57, 134, 15, 61, 47, 49, 219, 60, 124, 11, 12, 61, 54, 73, 226, 60, 173, 87, 5, 61, 120, 88, 213, 60, 42, 7, 174, 62, 69, 43, 68, 61, 106, 238, 0, 61, 112, 125, 158, 61, 26, 230, 94, 60, 109, 115, 255, 60, 78, 166, 151, 60, 46, 234, 52, 60, 51, 215, 41, 60, 79, 216, 64, 60, 115, 90, 94, 60, 92, 28, 55, 60, 107, 138, 73, 60, 38, 22, 50, 62, 216, 237, 23, 61, 2, 174, 144, 61, 11, 88, 106, 61, 37, 149, 132, 60, 200, 111, 247, 60, 62, 123, 238, 60, 54, 134, 170, 60, 134, 49, 182, 60, 159, 197, 197, 60, 164, 102, 129, 60, 170, 211, 160, 60, 202, 45, 170, 60, 167, 34, 212, 61, 33, 133, 29, 61, 28, 55, 23, 61, 29, 251, 72, 61, 213, 55, 3, 61, 77, 157, 38, 61, 11, 212, 48, 61, 202, 193, 22, 61, 54, 117, 15, 61, 186, 152, 5, 61, 203, 15, 233, 60, 175, 211, 10, 61, 177, 106, 6, 61, 137, 197, 20, 62, 194, 75, 8, 61, 236, 154, 33, 61, 36, 198, 6, 61, 96, 175, 147, 60, 146, 34, 160, 60, 107, 178, 109, 60, 215, 63, 151, 60, 1, 81, 186, 60, 55, 90, 0, 60, 76, 227, 165, 59, 249, 245, 255, 59, 79, 97, 9, 60, 213, 150, 232, 61, 172, 61, 39, 61, 208, 194, 139, 60, 180, 205, 169, 60, 95, 193, 5, 61, 158, 95, 93, 60, 182, 145, 255, 59, 230, 40, 131, 60, 251, 98, 51, 60, 147, 162, 143, 60, 35, 151, 23, 60, 138, 190, 127, 60, 195, 105, 66, 60, 236, 55, 177, 61, 207, 237, 249, 60, 63, 19, 151, 60, 209, 48, 154, 60, 10, 66, 13, 61, 198, 151, 137, 60, 168, 116, 107, 60, 89, 0, 141, 60, 64, 27, 161, 60, 218, 171, 159, 60, 219, 138, 157, 60, 16, 243, 222, 60, 54, 250, 169, 60, 211, 112, 190, 62, 134, 208, 229, 60, 5, 72, 7, 60, 150, 167, 40, 60, 58, 25, 30, 60, 8, 131, 117, 60, 78, 95, 20, 60, 43, 129, 97, 60, 225, 180, 211, 59, 145, 83, 23, 60, 76, 81, 54, 60, 176, 123, 48, 60, 94, 51, 252, 59, 110, 118, 201, 61, 135, 69, 40, 61, 160, 22, 215, 60, 150, 65, 237, 60, 68, 143, 172, 60, 217, 114, 208, 60, 185, 108, 125, 60, 23, 109, 87, 60, 19, 94, 80, 60, 61, 74, 26, 60, 78, 141, 105, 60, 62, 59, 102, 60, 19, 97, 144, 60, 187, 226, 219, 61, 26, 44, 70, 61, 174, 113, 34, 61, 198, 165, 54, 61, 42, 216, 30, 61, 3, 221, 7, 61, 235, 92, 156, 60, 147, 197, 196, 60, 241, 255, 192, 60, 166, 134, 174, 60, 78, 130, 185, 60, 200, 87, 234, 60, 165, 103, 255, 60, 0, 185, 78, 62, 246, 153, 49, 61, 123, 188, 191, 60, 76, 82, 128, 60, 113, 71, 143, 60, 154, 161, 248, 59, 20, 199, 37, 60, 87, 225, 65, 60, 110, 241, 58, 60, 82, 76, 13, 60, 49, 29, 250, 59, 3, 229, 199, 59, 84, 110, 255, 59, 18, 156, 3, 61, 35, 38, 122, 60, 252, 175, 200, 60, 155, 152, 158, 60, 23, 192, 156, 60, 194, 74, 79, 60, 48, 69, 91, 60, 160, 59, 169, 60, 120, 146, 138, 60, 217, 68, 124, 60, 186, 161, 82, 60, 27, 241, 129, 60, 89, 141, 40, 60, 204, 196, 53, 61, 193, 87, 12, 61, 131, 84, 37, 61, 10, 168, 29, 61, 189, 72, 40, 61, 209, 85, 178, 60, 195, 49, 204, 60, 239, 68, 55, 61, 46, 43, 9, 61, 128, 161, 3, 61, 106, 145, 210, 60, 145, 14, 207, 60, 70, 130, 194, 60, 203, 58, 52, 62, 155, 235, 18, 61, 87, 157, 200, 60, 105, 127, 160, 60, 200, 75, 161, 60, 71, 138, 236, 59, 187, 96, 16, 60, 168, 80, 56, 60, 173, 254, 182, 59, 251, 92, 243, 59, 111, 74, 226, 59, 49, 175, 203, 59, 174, 122, 35, 60, 165, 243, 14, 61, 115, 135, 85, 60, 53, 32, 119, 60, 136, 91, 137, 60, 131, 172, 66, 60, 164, 17, 71, 60, 9, 97, 103, 60, 147, 109, 88, 60, 181, 16, 31, 60, 171, 149, 94, 60, 3, 122, 28, 60, 242, 189, 73, 60, 52, 122, 102, 60, 249, 9, 155, 61, 93, 181, 226, 60, 146, 81, 2, 61, 193, 189, 27, 61, 31, 38, 195, 60, 47, 175, 198, 60, 123, 32, 201, 60, 249, 225, 210, 60, 239, 233, 169, 60, 73, 253, 235, 60, 166, 234, 154, 60, 159, 44, 225, 60, 213, 143, 216, 60, 101, 34, 246, 62, 241, 43, 106, 61, 106, 7, 173, 60, 192, 229, 202, 60, 78, 30, 19, 61, 159, 217, 40, 61, 66, 210, 205, 60, 113, 211, 26, 60, 5, 46, 111, 60, 224, 160, 241, 59, 227, 154, 134, 60, 197, 162, 49, 60, 41, 67, 138, 60, 134, 241, 4, 62, 94, 25, 114, 61, 103, 132, 183, 60, 163, 136, 153, 60, 154, 133, 73, 60, 29, 57, 146, 60, 203, 75, 131, 60, 68, 93, 216, 60, 221, 127, 74, 60, 140, 90, 84, 60, 66, 224, 180, 60, 76, 81, 17, 60, 200, 174, 189, 60, 25, 149, 56, 62, 82, 249, 162, 61, 227, 42, 121, 61, 116, 117, 169, 60, 180, 112, 18, 61, 18, 58, 5, 61, 215, 134, 248, 60, 22, 137, 50, 61, 230, 172, 227, 60, 244, 98, 180, 60, 36, 207, 255, 60, 75, 135, 142, 60, 125, 176, 26, 61, 145, 128, 71, 64, 209, 192, 157, 61, 221, 2, 178, 61, 77, 62, 2, 61, 251, 132, 150, 60, 187, 190, 51, 60, 229, 0, 2, 59, 86, 111, 207, 59, 207, 89, 39, 60, 20, 19, 147, 60, 180, 31, 68, 60, 127, 140, 218, 58, 18, 197, 93, 59, 25, 28, 10, 61, 160, 80, 130, 60, 204, 227, 44, 60, 194, 250, 125, 59, 46, 139, 134, 60, 147, 197, 189, 60, 40, 36, 156, 60, 138, 114, 148, 59, 115, 11, 255, 59, 72, 57, 147, 60, 13, 202, 74, 60, 86, 129, 127, 60, 40, 207, 187, 59, 49, 173, 146, 61, 249, 231, 242, 60, 97, 35, 72, 61, 178, 168, 222, 60, 176, 123, 163, 60, 134, 85, 239, 60, 241, 197, 147, 60, 74, 50, 193, 59, 24, 184, 181, 60, 61, 8, 49, 61, 162, 193, 14, 61, 90, 202, 10, 61, 164, 56, 133, 60, 175, 165, 175, 60, 63, 66, 238, 59, 37, 255, 101, 59, 83, 122, 228, 59, 28, 238, 244, 59, 131, 174, 153, 59, 218, 54, 227, 59, 62, 202, 177, 59, 87, 148, 243, 59, 232, 217, 82, 59, 79, 28, 135, 59, 36, 115, 194, 59, 81, 63, 70, 59, 200, 132, 226, 59, 51, 142, 140, 60, 95, 127, 157, 60, 201, 10, 79, 60, 92, 30, 23, 60, 3, 12, 15, 60, 238, 75, 109, 60, 172, 91, 92, 60, 185, 103, 31, 60, 183, 67, 118, 60, 245, 247, 131, 60, 126, 64, 93, 60, 125, 220, 224, 59, 154, 191, 231, 60, 75, 10, 177, 60, 197, 127, 171, 60, 126, 10, 155, 60, 197, 163, 214, 60, 206, 53, 37, 61, 154, 121, 203, 60, 13, 131, 153, 60, 101, 41, 217, 60, 44, 167, 114, 60, 236, 180, 138, 60, 96, 182, 202, 60, 161, 73, 155, 60, 62, 70, 0, 60, 63, 25, 143, 59, 82, 104, 55, 60, 181, 88, 2, 60, 73, 86, 244, 59, 235, 196, 43, 60, 43, 76, 131, 59, 242, 75, 155, 59, 23, 210, 146, 59, 147, 236, 206, 59, 34, 21, 226, 59, 143, 46, 207, 59, 120, 86, 198, 59, 33, 226, 177, 60, 122, 105, 4, 60, 124, 159, 109, 60, 134, 250, 109, 60, 45, 18, 41, 60, 27, 113, 145, 60, 42, 75, 9, 60, 160, 141, 228, 59, 190, 5, 86, 60, 232, 37, 25, 60, 182, 113, 34, 60, 188, 216, 138, 60, 128, 150, 0, 60, 4, 129, 200, 60, 140, 203, 186, 60, 130, 3, 8, 61, 176, 45, 210, 60, 130, 177, 169, 60, 6, 97, 249, 60, 40, 29, 121, 60, 254, 191, 152, 60, 229, 244, 246, 60, 39, 22, 164, 60, 71, 87, 234, 60, 184, 68, 226, 60, 23, 207, 193, 60, 59, 253, 117, 63, 202, 66, 3, 60, 162, 215, 250, 59, 187, 192, 25, 60, 84, 27, 58, 60, 42, 107, 251, 59, 156, 93, 223, 59, 59, 36, 205, 59, 33, 158, 176, 59, 38, 121, 238, 59, 147, 143, 10, 60, 2, 160, 182, 59, 140, 50, 1, 60, 61, 203, 79, 61, 223, 181, 55, 60, 234, 134, 129, 60, 160, 38, 87, 60, 43, 200, 179, 60, 140, 89, 107, 60, 77, 52, 122, 60, 254, 193, 47, 60, 101, 148, 23, 60, 192, 219, 199, 60, 178, 54, 159, 60, 43, 50, 33, 60, 114, 202, 41, 60, 107, 235, 155, 61, 35, 239, 173, 60, 219, 182, 202, 60, 74, 90, 233, 60, 65, 112, 76, 61, 133, 203, 14, 61, 4, 206, 198, 60, 188, 166, 158, 60, 212, 69, 160, 60, 54, 120, 63, 61, 76, 152, 233, 60, 123, 17, 174, 60, 55, 170, 177, 60, 47, 110, 177, 62, 224, 199, 179, 60, 104, 83, 143, 60, 59, 97, 252, 59, 55, 51, 42, 60, 40, 40, 14, 60, 246, 229, 250, 59, 74, 171, 55, 60, 150, 235, 204, 59, 237, 181, 8, 60, 180, 203, 58, 60, 181, 24, 187, 59, 7, 210, 24, 60, 192, 235, 5, 61, 88, 130, 182, 60, 159, 165, 64, 60, 41, 93, 104, 60, 82, 157, 147, 60, 161, 76, 86, 60, 199, 114, 138, 60, 35, 243, 159, 60, 176, 206, 152, 60, 49, 191, 101, 60, 151, 255, 86, 60, 126, 215, 30, 60, 139, 14, 106, 60, 97, 105, 56, 61, 206, 242, 47, 61, 145, 125, 208, 60, 127, 166, 201, 60, 4, 6, 235, 60, 77, 22, 20, 61, 224, 127, 3, 61, 155, 199, 244, 60, 207, 50, 26, 61, 114, 31, 207, 60, 52, 28, 16, 61, 187, 31, 175, 60, 245, 13, 251, 60, 70, 117, 7, 61, 183, 93, 229, 59, 82, 47, 22, 60, 8, 183, 169, 60, 140, 29, 0, 60, 139, 239, 72, 60, 156, 228, 235, 59, 137, 143, 224, 59, 240, 24, 41, 60, 66, 253, 194, 59, 93, 233, 247, 59, 51, 125, 207, 59, 190, 10, 35, 60, 132, 15, 31, 61, 204, 74, 95, 60, 79, 92, 65, 60, 155, 208, 210, 60, 22, 48, 67, 60, 243, 164, 151, 60, 102, 166, 138, 60, 255, 136, 24, 60, 24, 204, 53, 60, 27, 79, 177, 59, 78, 109, 134, 60, 117, 200, 6, 60, 226, 74, 108, 60, 66, 169, 91, 61, 92, 99, 164, 60, 40, 55, 65, 61, 121, 13, 23, 61, 168, 74, 75, 61, 202, 175, 199, 60, 94, 254, 173, 60, 203, 89, 17, 61, 17, 251, 12, 61, 33, 20, 219, 60, 127, 138, 194, 60, 173, 82, 141, 60, 211, 80, 169, 60, 174, 6, 22, 62, 212, 194, 81, 60, 21, 234, 63, 60, 134, 80, 0, 60, 78, 248, 83, 60, 187, 69, 12, 60, 248, 94, 3, 60, 189, 122, 28, 60, 0, 26, 10, 60, 204, 107, 223, 59, 39, 183, 26, 60, 239, 115, 19, 60, 79, 50, 227, 59, 190, 72, 1, 61, 84, 219, 171, 60, 42, 199, 14, 60, 255, 71, 168, 60, 91, 143, 75, 60, 47, 10, 147, 60, 21, 149, 133, 60, 75, 244, 51, 60, 26, 110, 150, 60, 133, 175, 74, 60, 108, 110, 199, 60, 175, 75, 87, 60, 51, 79, 111, 60, 156, 81, 121, 61, 68, 154, 13, 61, 191, 150, 154, 60, 52, 113, 72, 61, 95, 65, 237, 60, 207, 219, 240, 60, 206, 62, 12, 61, 180, 12, 219, 60, 248, 212, 253, 60, 49, 3, 212, 60, 134, 90, 17, 61, 90, 126, 237, 60, 12, 120, 222, 60, 114, 248, 65, 61, 145, 73, 68, 60, 16, 98, 33, 60, 188, 160, 135, 60, 139, 235, 17, 60, 136, 241, 33, 60, 169, 231, 247, 59, 255, 228, 13, 60, 219, 245, 20, 60, 197, 229, 5, 60, 170, 114, 148, 59, 227, 114, 253, 59, 155, 128, 175, 59, 8, 45, 9, 61, 239, 11, 133, 60, 47, 150, 233, 60, 196, 245, 197, 60, 245, 109, 180, 60, 84, 80, 67, 60, 88, 71, 50, 60, 176, 158, 138, 60, 207, 46, 134, 60, 254, 71, 156, 60, 95, 160, 42, 60, 228, 192, 136, 60, 115, 86, 6, 60, 134, 53, 168, 61, 95, 195, 251, 60, 29, 50, 217, 60, 131, 219, 36, 61, 74, 210, 156, 60, 29, 6, 149, 60, 194, 235, 251, 60, 174, 181, 29, 60, 133, 56, 132, 60, 105, 164, 142, 60, 251, 95, 166, 60, 164, 179, 188, 60, 208, 9, 155, 60, 112, 214, 149, 62, 64, 41, 78, 60, 208, 48, 59, 60, 224, 132, 36, 60, 20, 192, 10, 60, 109, 162, 16, 60, 202, 115, 2, 60, 102, 214, 3, 60, 242, 212, 4, 60, 215, 108, 5, 60, 10, 6, 3, 60, 32, 227, 225, 59, 123, 139, 227, 59, 99, 16, 28, 61, 79, 85, 135, 60, 29, 134, 116, 60, 14, 167, 89, 60, 244, 131, 96, 60, 38, 41, 117, 60, 138, 5, 108, 60, 213, 67, 109, 60, 45, 182, 111, 60, 42, 148, 89, 60, 173, 184, 81, 60, 33, 41, 56, 60, 232, 19, 41, 60, 205, 174, 148, 61, 223, 175, 231, 60, 42, 252, 198, 60, 93, 129, 203, 60, 210, 143, 199, 60, 217, 89, 227, 60, 70, 33, 4, 61, 147, 79, 216, 60, 41, 46, 220, 60, 170, 218, 195, 60, 204, 90, 207, 60, 242, 198, 203, 60, 249, 90, 209, 60, 120, 175, 171, 62, 86, 252, 66, 60, 183, 10, 13, 60, 125, 217, 200, 59, 249, 37, 11, 60, 81, 138, 241, 59, 47, 200, 3, 60, 51, 242, 250, 59, 120, 190, 218, 59, 153, 81, 251, 59, 66, 35, 214, 59, 153, 2, 188, 59, 209, 89, 224, 59, 209, 200, 234, 60, 4, 224, 87, 60, 168, 27, 75, 60, 88, 231, 58, 60, 60, 230, 62, 60, 197, 23, 56, 60, 168, 89, 120, 60, 1, 93, 88, 60, 39, 28, 53, 60, 17, 153, 76, 60, 86, 82, 98, 60, 153, 109, 77, 60, 1, 202, 111, 60, 139, 74, 88, 61, 76, 79, 242, 60, 127, 100, 211, 60, 30, 44, 174, 60, 197, 140, 214, 60, 30, 106, 214, 60, 94, 34, 230, 60, 168, 203, 234, 60, 40, 205, 219, 60, 32, 47, 193, 60, 245, 83, 203, 60, 99, 100, 198, 60, 180, 30, 237, 60, 29, 49, 189, 62, 208, 253, 19, 60, 221, 241, 248, 59, 100, 97, 13, 60, 193, 94, 2, 60, 25, 95, 2, 60, 23, 49, 255, 59, 119, 129, 220, 59, 0, 115, 227, 59, 97, 62, 200, 59, 153, 106, 4, 60, 59, 95, 233, 59, 175, 172, 207, 59, 19, 193, 7, 61, 192, 175, 166, 60, 127, 22, 127, 60, 161, 140, 94, 60, 218, 12, 107, 60, 127, 195, 128, 60, 249, 218, 100, 60, 78, 74, 124, 60, 126, 56, 139, 60, 55, 36, 99, 60, 235, 133, 80, 60, 194, 108, 30, 60, 180, 135, 77, 60, 108, 157, 132, 61, 88, 230, 19, 61, 207, 63, 231, 60, 225, 188, 221, 60, 245, 182, 180, 60, 245, 245, 215, 60, 118, 168, 242, 60, 225, 109, 225, 60, 14, 250, 227, 60, 69, 150, 242, 60, 157, 38, 3, 61, 141, 220, 237, 60, 244, 226, 212, 60, 209, 244, 168, 62, 92, 184, 40, 60, 94, 174, 23, 60, 98, 32, 18, 60, 130, 241, 37, 60, 193, 228, 238, 59, 105, 102, 238, 59, 188, 38, 211, 59, 151, 202, 243, 59, 127, 219, 231, 59, 1, 211, 212, 59, 96, 197, 207, 59, 28, 238, 218, 59, 99, 175, 27, 61, 61, 210, 130, 60, 58, 223, 49, 60, 102, 56, 65, 60, 192, 149, 61, 60, 152, 136, 82, 60, 55, 71, 88, 60, 158, 248, 106, 60, 83, 199, 101, 60, 92, 138, 63, 60, 127, 96, 71, 60, 164, 195, 82, 60, 82, 244, 95, 60, 150, 128, 130, 61, 4, 94, 240, 60, 142, 65, 234, 60, 87, 168, 231, 60, 151, 17, 218, 60, 65, 36, 217, 60, 88, 248, 196, 60, 210, 202, 210, 60, 49, 253, 212, 60, 245, 129, 225, 60, 5, 231, 228, 60, 145, 32, 200, 60, 144, 113, 186, 60, 36, 222, 245, 61, 24, 162, 35, 60, 69, 2, 61, 60, 18, 9, 232, 59, 235, 73, 219, 59, 108, 117, 159, 59, 117, 210, 205, 59, 114, 228, 148, 59, 214, 139, 195, 59, 121, 219, 169, 59, 24, 214, 19, 60, 22, 220, 23, 60, 228, 1, 170, 59, 127, 207, 202, 60, 20, 87, 139, 60, 60, 44, 201, 60, 216, 197, 146, 60, 63, 182, 58, 60, 125, 137, 15, 60, 27, 249, 78, 60, 15, 214, 65, 60, 71, 57, 138, 60, 94, 0, 54, 60, 211, 79, 195, 60, 80, 141, 107, 60, 77, 89, 33, 60, 239, 21, 81, 61, 61, 193, 15, 61, 83, 83, 93, 61, 6, 143, 24, 61, 240, 83, 231, 60, 216, 214, 214, 60, 219, 139, 163, 60, 17, 160, 196, 60, 253, 105, 1, 61, 252, 241, 164, 60, 162, 183, 63, 61, 225, 42, 197, 60, 55, 232, 180, 60, 78, 24, 175, 62, 17, 201, 4, 61, 0, 242, 76, 60, 102, 161, 83, 60, 64, 48, 122, 60, 19, 232, 53, 60, 77, 47, 30, 60, 248, 185, 189, 59, 193, 147, 72, 60, 43, 44, 96, 60, 147, 196, 143, 59, 55, 32, 231, 59, 27, 80, 253, 59, 98, 159, 225, 61, 218, 66, 118, 61, 99, 3, 58, 61, 24, 198, 81, 61, 93, 214, 229, 60, 79, 131, 238, 60, 202, 165, 206, 60, 87, 84, 210, 60, 127, 228, 212, 60, 95, 111, 223, 60, 188, 225, 161, 60, 127, 130, 136, 60, 203, 181, 62, 60, 254, 8, 118, 62, 45, 141, 34, 62, 35, 149, 141, 61, 119, 88, 140, 61, 143, 155, 82, 61, 6, 48, 71, 61, 4, 62, 25, 61, 72, 140, 0, 61, 95, 179, 69, 61, 80, 228, 27, 61, 193, 39, 211, 60, 24, 98, 242, 60, 88, 10, 22, 61, 62, 218, 157, 62, 206, 24, 161, 60, 16, 101, 208, 60, 156, 179, 102, 60, 20, 203, 239, 59, 190, 58, 21, 60, 137, 151, 27, 60, 194, 12, 80, 60, 57, 206, 22, 60, 219, 105, 228, 59, 109, 164, 154, 59, 222, 216, 6, 60, 178, 106, 211, 59, 239, 121, 59, 61, 213, 199, 209, 60, 179, 166, 131, 60, 102, 211, 198, 60, 244, 186, 172, 60, 182, 195, 119, 60, 83, 13, 105, 60, 54, 71, 138, 60, 254, 121, 110, 60, 97, 231, 57, 60, 16, 173, 253, 59, 226, 213, 57, 60, 169, 61, 92, 60, 90, 156, 19, 62, 51, 107, 98, 61, 78, 101, 36, 61, 5, 0, 32, 61, 199, 222, 44, 61, 0, 231, 250, 60, 150, 37, 25, 61, 141, 117, 75, 61, 232, 50, 242, 60, 196, 183, 235, 60, 74, 254, 84, 60, 229, 23, 148, 60, 103, 14, 156, 60, 82, 226, 11, 62, 27, 101, 130, 60, 134, 173, 98, 60, 7, 155, 117, 60, 5, 131, 47, 60, 84, 118, 11, 60, 118, 214, 251, 59, 207, 208, 213, 59, 11, 192, 2, 60, 52, 154, 148, 59, 152, 177, 210, 59, 6, 43, 201, 59, 94, 143, 32, 60, 117, 242, 17, 61, 123, 182, 226, 60, 115, 64, 193, 60, 0, 51, 142, 60, 109, 233, 88, 60, 184, 191, 155, 60, 185, 182, 153, 60, 234, 253, 69, 60, 211, 200, 142, 60, 34, 136, 133, 60, 183, 33, 81, 60, 129, 21, 142, 60, 245, 233, 101, 60, 225, 34, 209, 61, 114, 247, 143, 61, 188, 70, 27, 61, 0, 242, 83, 61, 232, 84, 196, 60, 218, 93, 62, 61, 3, 36, 22, 61, 165, 240, 183, 60, 74, 247, 2, 61, 22, 228, 0, 61, 20, 197, 189, 60, 201, 120, 230, 60, 161, 60, 243, 60, 194, 235, 22, 62, 28, 192, 69, 60, 168, 112, 60, 60, 117, 243, 121, 60, 138, 213, 149, 60, 25, 230, 71, 60, 10, 24, 84, 60, 168, 251, 67, 60, 229, 0, 8, 60, 62, 14, 15, 60, 24, 245, 104, 60, 35, 131, 15, 60, 34, 44, 73, 59, 220, 198, 235, 60, 150, 168, 148, 60, 184, 148, 131, 60, 114, 160, 14, 60, 204, 132, 35, 60, 124, 108, 160, 60, 223, 65, 157, 60, 251, 125, 20, 60, 10, 235, 63, 60, 5, 10, 32, 60, 82, 235, 30, 60, 15, 137, 0, 60, 0, 240, 32, 60, 108, 154, 255, 60, 137, 25, 176, 60, 127, 225, 15, 61, 15, 98, 209, 60, 239, 63, 156, 60, 119, 10, 69, 61, 137, 73, 23, 61, 232, 130, 132, 60, 82, 32, 97, 60, 99, 37, 103, 60, 75, 223, 248, 60, 215, 217, 21, 61, 79, 115, 116, 60, 82, 245, 56, 62, 236, 111, 135, 60, 208, 137, 82, 60, 166, 158, 66, 60, 58, 208, 146, 60, 130, 230, 76, 60, 179, 143, 55, 60, 208, 56, 240, 59, 9, 145, 5, 60, 229, 216, 140, 59, 198, 142, 199, 59, 19, 197, 21, 60, 82, 136, 185, 59, 174, 149, 129, 61, 41, 233, 173, 60, 123, 235, 127, 60, 83, 216, 118, 60, 37, 32, 28, 60, 245, 240, 87, 60, 59, 214, 117, 60, 156, 50, 61, 60, 232, 205, 52, 60, 3, 100, 1, 60, 120, 146, 133, 60, 190, 204, 191, 60, 128, 210, 228, 59, 7, 209, 120, 61, 33, 165, 109, 61, 242, 231, 238, 60, 2, 79, 203, 60, 186, 233, 2, 61, 78, 242, 22, 61, 46, 233, 10, 61, 133, 154, 244, 60, 178, 227, 235, 60, 175, 182, 196, 60, 73, 172, 180, 60, 156, 79, 159, 60, 118, 99, 164, 60, 62, 230, 242, 61, 243, 119, 37, 60, 7, 16, 19, 60, 219, 46, 61, 60, 8, 96, 18, 60, 109, 182, 213, 59, 102, 172, 207, 59, 44, 41, 155, 59, 115, 192, 237, 59, 251, 184, 43, 60, 160, 244, 217, 59, 48, 68, 188, 59, 163, 28, 244, 59, 212, 86, 42, 61, 86, 100, 73, 60, 142, 132, 54, 60, 18, 148, 62, 60, 40, 230, 106, 60, 180, 180, 50, 60, 7, 148, 78, 60, 111, 164, 86, 60, 104, 105, 92, 60, 180, 196, 85, 60, 57, 166, 66, 60, 8, 50, 254, 59, 138, 34, 143, 60, 123, 150, 222, 61, 139, 23, 197, 60, 135, 64, 212, 60, 151, 28, 247, 60, 96, 142, 2, 61, 124, 84, 226, 60, 61, 250, 189, 60, 221, 52, 223, 60, 14, 247, 210, 60, 188, 210, 192, 60, 103, 78, 173, 60, 247, 201, 183, 60, 165, 178, 234, 60, 118, 183, 113, 61, 200, 94, 67, 60, 166, 172, 191, 59, 200, 72, 48, 60, 118, 45, 140, 60, 218, 141, 7, 60, 64, 34, 242, 59, 35, 177, 218, 59, 94, 35, 207, 59, 235, 114, 174, 59, 111, 191, 226, 59, 109, 248, 137, 59, 103, 28, 200, 59, 76, 212, 172, 60, 251, 76, 64, 60, 159, 127, 84, 60, 222, 85, 68, 60, 90, 45, 95, 60, 105, 106, 55, 60, 108, 132, 89, 60, 71, 170, 97, 60, 39, 113, 45, 60, 225, 247, 252, 59, 223, 31, 172, 59, 48, 217, 165, 59, 152, 0, 5, 60, 90, 221, 137, 61, 10, 92, 203, 60, 46, 126, 222, 60, 167, 205, 220, 60, 185, 236, 66, 61, 148, 191, 38, 61, 40, 52, 191, 60, 79, 7, 160, 60, 102, 34, 207, 60, 118, 148, 191, 60, 7, 160, 197, 60, 225, 180, 102, 60, 74, 219, 157, 60, 54, 14, 251, 22]), true, true);
Module['FS_createDataFile']('/rm1_200', 'noisedict', [60, 115, 62, 32, 83, 73, 76, 10, 60, 47, 115, 62, 32, 83, 73, 76, 10, 60, 115, 105, 108, 62, 32, 83, 73, 76, 10], true, true);
Module['FS_createDataFile']('/rm1_200', 'means', [115, 51, 10, 118, 101, 114, 115, 105, 111, 110, 32, 49, 46, 48, 10, 99, 104, 107, 115, 117, 109, 48, 32, 121, 101, 115, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 104, 100, 114, 10, 68, 51, 34, 17, 157, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 39, 0, 0, 0, 172, 95, 0, 0, 0, 198, 77, 191, 74, 107, 11, 63, 184, 1, 49, 63, 181, 75, 4, 63, 43, 101, 177, 62, 175, 101, 43, 62, 147, 205, 35, 59, 87, 228, 248, 189, 2, 146, 75, 189, 233, 42, 157, 189, 252, 152, 34, 189, 240, 104, 204, 60, 36, 35, 24, 189, 162, 129, 61, 64, 65, 76, 146, 63, 224, 110, 61, 62, 143, 86, 6, 61, 143, 114, 101, 190, 230, 167, 115, 190, 45, 226, 67, 190, 237, 114, 140, 190, 209, 165, 11, 190, 86, 185, 15, 62, 136, 185, 17, 62, 34, 221, 141, 61, 248, 121, 27, 189, 147, 184, 43, 64, 193, 45, 210, 61, 142, 206, 108, 191, 189, 62, 18, 191, 4, 253, 12, 191, 200, 163, 40, 190, 123, 20, 81, 189, 0, 195, 12, 190, 134, 86, 228, 60, 150, 130, 152, 62, 218, 14, 87, 61, 47, 35, 26, 190, 232, 225, 142, 189, 159, 254, 206, 190, 101, 15, 79, 63, 100, 16, 59, 63, 166, 61, 152, 62, 54, 242, 206, 61, 63, 180, 160, 189, 216, 35, 83, 190, 106, 247, 18, 190, 187, 89, 189, 189, 131, 180, 230, 60, 71, 60, 213, 61, 223, 130, 52, 61, 89, 191, 205, 60, 201, 29, 125, 64, 224, 27, 131, 63, 255, 117, 210, 190, 154, 90, 168, 190, 199, 217, 229, 190, 244, 11, 141, 190, 63, 40, 80, 190, 221, 99, 47, 190, 244, 75, 210, 188, 142, 66, 132, 62, 169, 15, 7, 62, 129, 65, 4, 190, 212, 111, 49, 190, 30, 116, 191, 63, 87, 179, 238, 190, 118, 150, 116, 191, 79, 227, 169, 190, 58, 94, 11, 190, 243, 93, 177, 61, 245, 18, 216, 61, 211, 253, 54, 62, 122, 12, 74, 62, 27, 168, 214, 61, 138, 219, 34, 190, 230, 78, 23, 190, 222, 205, 175, 189, 119, 44, 175, 191, 241, 164, 228, 189, 42, 94, 129, 62, 57, 238, 60, 62, 61, 159, 130, 62, 179, 35, 50, 62, 27, 57, 21, 61, 181, 153, 180, 60, 48, 13, 191, 188, 128, 140, 123, 188, 116, 110, 200, 188, 50, 67, 4, 61, 235, 154, 157, 61, 99, 167, 53, 64, 37, 8, 211, 63, 169, 210, 38, 63, 147, 88, 57, 62, 254, 128, 159, 190, 25, 159, 198, 190, 157, 219, 194, 190, 155, 149, 174, 190, 197, 221, 93, 190, 192, 176, 62, 189, 123, 236, 85, 62, 157, 252, 21, 60, 19, 5, 124, 190, 66, 139, 29, 64, 222, 207, 10, 63, 242, 128, 27, 191, 200, 89, 186, 190, 131, 233, 239, 190, 159, 62, 155, 190, 142, 48, 65, 189, 57, 141, 234, 60, 185, 139, 105, 61, 40, 44, 196, 61, 111, 36, 177, 62, 190, 89, 47, 189, 254, 254, 197, 190, 49, 1, 140, 63, 114, 41, 162, 63, 237, 187, 71, 63, 60, 32, 139, 62, 219, 44, 148, 189, 154, 4, 138, 190, 202, 53, 171, 190, 88, 142, 179, 190, 107, 211, 111, 190, 123, 210, 93, 189, 18, 149, 26, 62, 136, 68, 231, 61, 130, 158, 30, 190, 27, 12, 132, 64, 64, 232, 181, 63, 68, 9, 143, 190, 40, 165, 162, 190, 241, 248, 22, 191, 140, 89, 227, 190, 227, 227, 93, 190, 214, 255, 12, 190, 203, 108, 235, 188, 62, 121, 154, 60, 165, 198, 215, 62, 84, 170, 193, 189, 23, 83, 253, 190, 172, 154, 189, 189, 79, 28, 142, 191, 154, 173, 174, 191, 171, 132, 5, 191, 101, 254, 10, 190, 50, 97, 139, 62, 232, 96, 202, 62, 204, 183, 219, 62, 202, 64, 177, 62, 213, 74, 215, 61, 23, 89, 84, 59, 59, 218, 105, 190, 99, 122, 151, 189, 111, 25, 153, 64, 38, 211, 79, 63, 246, 68, 2, 191, 15, 34, 194, 189, 90, 102, 158, 190, 91, 177, 100, 60, 85, 125, 138, 190, 16, 208, 157, 189, 106, 18, 42, 61, 66, 232, 148, 62, 77, 249, 174, 190, 84, 151, 18, 189, 195, 200, 113, 60, 241, 77, 183, 63, 242, 58, 6, 191, 197, 186, 225, 190, 100, 204, 114, 60, 116, 141, 177, 189, 111, 86, 186, 61, 251, 38, 224, 188, 63, 234, 132, 62, 175, 15, 12, 62, 75, 18, 249, 189, 194, 125, 145, 190, 98, 144, 12, 62, 203, 80, 165, 61, 103, 204, 252, 191, 196, 236, 237, 61, 215, 66, 25, 63, 234, 219, 72, 62, 121, 245, 29, 62, 21, 28, 109, 60, 109, 122, 186, 61, 36, 76, 33, 189, 1, 124, 138, 189, 63, 158, 35, 190, 63, 182, 141, 62, 109, 129, 77, 61, 241, 188, 1, 189, 130, 143, 47, 64, 114, 180, 154, 63, 168, 136, 243, 189, 222, 13, 124, 188, 31, 91, 210, 190, 40, 63, 110, 190, 182, 131, 190, 189, 218, 171, 165, 189, 69, 123, 247, 60, 206, 22, 91, 189, 157, 107, 114, 62, 68, 168, 30, 188, 0, 237, 173, 190, 163, 216, 99, 64, 201, 111, 138, 62, 42, 194, 135, 191, 166, 146, 92, 190, 220, 135, 208, 190, 118, 250, 241, 60, 186, 14, 145, 62, 249, 44, 148, 61, 92, 216, 34, 62, 6, 221, 238, 189, 151, 3, 14, 62, 62, 191, 22, 190, 66, 122, 171, 190, 106, 207, 250, 191, 82, 207, 105, 191, 77, 100, 174, 61, 62, 179, 245, 61, 95, 68, 251, 62, 82, 212, 170, 62, 187, 74, 191, 61, 1, 239, 222, 59, 222, 219, 35, 189, 186, 134, 90, 188, 59, 87, 145, 190, 193, 185, 172, 188, 21, 59, 181, 62, 114, 129, 98, 64, 199, 121, 147, 63, 230, 111, 227, 190, 144, 134, 15, 190, 153, 173, 142, 190, 41, 4, 99, 190, 128, 129, 171, 189, 141, 99, 93, 189, 34, 253, 157, 59, 214, 13, 93, 61, 235, 44, 143, 62, 214, 96, 110, 190, 152, 115, 189, 190, 136, 63, 203, 63, 200, 48, 4, 190, 233, 199, 26, 191, 159, 249, 178, 189, 50, 247, 12, 61, 6, 54, 43, 61, 174, 137, 13, 62, 18, 198, 136, 61, 55, 58, 158, 61, 91, 45, 214, 187, 241, 45, 5, 190, 28, 184, 81, 190, 234, 218, 115, 61, 185, 79, 131, 191, 43, 128, 186, 189, 248, 252, 6, 63, 111, 237, 38, 62, 143, 123, 191, 61, 189, 120, 41, 188, 185, 51, 250, 189, 113, 41, 213, 189, 52, 4, 130, 189, 230, 7, 40, 189, 213, 69, 254, 189, 248, 21, 26, 62, 0, 86, 60, 62, 120, 158, 46, 64, 69, 51, 170, 63, 60, 197, 188, 61, 129, 72, 78, 189, 109, 202, 87, 190, 223, 182, 80, 190, 79, 246, 88, 190, 179, 251, 145, 190, 13, 167, 40, 190, 200, 111, 140, 62, 109, 230, 124, 62, 255, 3, 213, 189, 46, 255, 90, 190, 142, 151, 138, 64, 5, 228, 89, 62, 139, 122, 160, 191, 119, 120, 243, 190, 170, 183, 232, 190, 250, 190, 11, 190, 198, 82, 24, 189, 228, 169, 189, 61, 13, 238, 13, 62, 220, 19, 172, 62, 238, 88, 10, 190, 94, 114, 144, 190, 144, 179, 21, 190, 255, 82, 144, 191, 79, 156, 136, 191, 185, 146, 152, 190, 38, 98, 117, 62, 14, 121, 176, 62, 118, 18, 158, 62, 229, 184, 145, 62, 133, 47, 212, 62, 227, 98, 76, 62, 162, 163, 133, 190, 190, 93, 220, 190, 99, 85, 252, 187, 98, 170, 37, 62, 37, 115, 242, 63, 144, 117, 238, 62, 122, 156, 7, 190, 24, 147, 206, 189, 217, 246, 228, 189, 10, 234, 165, 188, 121, 233, 99, 60, 72, 139, 168, 61, 129, 162, 80, 62, 178, 175, 139, 60, 106, 188, 121, 190, 220, 21, 165, 189, 251, 196, 87, 188, 153, 220, 136, 191, 88, 126, 125, 190, 115, 74, 66, 62, 182, 78, 161, 61, 252, 227, 181, 61, 70, 46, 152, 61, 80, 160, 243, 60, 141, 164, 154, 60, 171, 165, 172, 188, 136, 157, 28, 189, 245, 174, 48, 61, 121, 5, 22, 60, 201, 40, 3, 61, 218, 129, 78, 58, 133, 177, 156, 189, 157, 38, 127, 189, 36, 139, 46, 61, 101, 140, 58, 61, 158, 91, 110, 60, 199, 221, 161, 186, 220, 207, 240, 188, 66, 42, 33, 189, 253, 221, 64, 60, 55, 195, 39, 61, 21, 52, 143, 60, 67, 111, 10, 186, 24, 37, 90, 64, 78, 15, 96, 63, 1, 128, 15, 191, 105, 142, 115, 190, 252, 106, 24, 190, 114, 102, 188, 189, 142, 94, 250, 188, 166, 168, 59, 60, 110, 43, 204, 61, 19, 95, 246, 59, 121, 105, 179, 61, 17, 95, 105, 190, 126, 137, 91, 190, 230, 69, 35, 191, 56, 52, 170, 189, 164, 12, 202, 61, 47, 244, 201, 189, 194, 2, 27, 61, 222, 233, 186, 61, 231, 70, 183, 188, 3, 179, 66, 61, 66, 208, 183, 60, 17, 59, 23, 61, 238, 50, 4, 189, 73, 184, 28, 187, 13, 60, 3, 61, 109, 166, 41, 190, 18, 170, 170, 188, 203, 144, 61, 61, 208, 109, 145, 187, 178, 172, 114, 187, 124, 106, 210, 187, 97, 9, 248, 57, 162, 235, 75, 60, 179, 81, 114, 60, 2, 47, 36, 59, 99, 158, 38, 188, 0, 13, 225, 60, 102, 108, 32, 187, 26, 206, 157, 64, 196, 63, 226, 62, 34, 62, 23, 191, 176, 34, 212, 188, 223, 201, 147, 190, 218, 172, 226, 59, 218, 11, 23, 190, 5, 157, 206, 61, 162, 176, 236, 61, 228, 8, 201, 61, 61, 99, 191, 190, 108, 134, 4, 62, 39, 96, 215, 58, 153, 192, 69, 190, 13, 223, 75, 59, 100, 177, 222, 60, 162, 246, 90, 59, 89, 152, 211, 60, 223, 145, 234, 188, 240, 117, 23, 61, 42, 6, 191, 58, 217, 254, 115, 60, 191, 167, 9, 189, 125, 75, 100, 57, 55, 151, 91, 60, 200, 40, 238, 186, 225, 164, 214, 189, 234, 140, 248, 60, 251, 115, 209, 60, 120, 219, 26, 188, 223, 51, 157, 186, 101, 178, 173, 187, 26, 52, 158, 59, 24, 35, 63, 188, 105, 146, 229, 186, 217, 173, 200, 59, 124, 203, 54, 59, 184, 111, 50, 188, 197, 7, 81, 59, 85, 85, 151, 64, 111, 241, 88, 63, 6, 30, 85, 191, 148, 210, 192, 59, 87, 7, 161, 190, 214, 31, 43, 190, 89, 219, 24, 61, 52, 2, 224, 189, 101, 101, 35, 62, 210, 61, 190, 188, 218, 207, 26, 61, 44, 133, 154, 190, 194, 91, 130, 190, 251, 164, 46, 188, 217, 173, 151, 189, 198, 197, 247, 188, 228, 85, 20, 60, 88, 149, 11, 61, 174, 14, 146, 59, 34, 6, 205, 59, 17, 50, 171, 60, 130, 239, 141, 60, 17, 107, 105, 188, 124, 30, 68, 189, 164, 89, 146, 188, 224, 83, 19, 61, 83, 71, 116, 190, 113, 36, 104, 60, 118, 208, 51, 61, 56, 78, 171, 188, 102, 236, 216, 59, 38, 90, 132, 59, 78, 139, 62, 188, 236, 95, 199, 59, 33, 163, 130, 188, 19, 12, 68, 60, 68, 62, 205, 60, 249, 111, 251, 58, 48, 130, 8, 188, 20, 133, 67, 62, 37, 130, 129, 191, 184, 244, 41, 63, 33, 114, 158, 190, 211, 10, 180, 62, 215, 245, 10, 60, 136, 134, 242, 189, 192, 250, 237, 61, 70, 219, 162, 189, 218, 219, 23, 62, 61, 38, 156, 189, 204, 9, 133, 61, 38, 139, 103, 61, 129, 8, 43, 63, 71, 134, 103, 59, 43, 164, 35, 62, 241, 126, 127, 189, 156, 240, 151, 61, 158, 43, 40, 189, 43, 160, 202, 187, 58, 177, 86, 189, 171, 72, 12, 187, 112, 228, 100, 188, 92, 14, 8, 60, 120, 153, 80, 189, 240, 54, 104, 60, 88, 147, 90, 190, 130, 99, 25, 63, 169, 18, 149, 190, 228, 87, 97, 62, 104, 56, 178, 189, 216, 222, 19, 189, 210, 172, 178, 60, 245, 231, 189, 189, 139, 129, 243, 60, 25, 151, 254, 188, 120, 89, 36, 61, 147, 2, 112, 189, 231, 59, 140, 60, 99, 14, 10, 62, 94, 153, 24, 63, 176, 179, 30, 63, 240, 91, 63, 62, 120, 17, 158, 61, 163, 117, 64, 190, 31, 233, 100, 190, 208, 199, 46, 190, 3, 112, 232, 189, 77, 216, 53, 189, 207, 178, 104, 60, 214, 204, 209, 60, 149, 9, 140, 61, 173, 203, 36, 64, 198, 167, 143, 63, 217, 144, 146, 61, 165, 108, 203, 187, 172, 196, 255, 190, 88, 81, 243, 190, 157, 4, 218, 57, 157, 59, 48, 190, 231, 160, 193, 189, 172, 182, 108, 61, 225, 254, 232, 61, 72, 226, 141, 187, 201, 11, 212, 188, 138, 143, 127, 63, 1, 3, 119, 190, 133, 70, 75, 191, 121, 2, 169, 190, 132, 28, 175, 190, 85, 14, 254, 61, 102, 60, 222, 62, 137, 144, 15, 62, 112, 35, 142, 61, 189, 59, 184, 61, 200, 164, 124, 61, 104, 130, 199, 60, 113, 148, 11, 190, 90, 62, 157, 191, 96, 179, 11, 62, 129, 19, 201, 62, 197, 176, 66, 62, 13, 245, 148, 62, 158, 135, 64, 62, 152, 116, 80, 61, 218, 228, 69, 61, 190, 234, 162, 188, 124, 67, 218, 188, 54, 162, 31, 189, 178, 51, 49, 60, 244, 210, 231, 60, 107, 15, 54, 64, 202, 244, 194, 63, 184, 46, 236, 62, 99, 55, 214, 61, 94, 142, 184, 190, 98, 63, 211, 190, 12, 113, 6, 190, 96, 56, 135, 190, 66, 94, 93, 190, 204, 188, 165, 189, 60, 98, 2, 188, 140, 182, 132, 60, 251, 13, 101, 61, 136, 254, 226, 63, 109, 181, 187, 62, 167, 30, 189, 190, 238, 86, 220, 190, 29, 138, 32, 191, 24, 120, 179, 190, 125, 131, 30, 61, 231, 189, 131, 189, 244, 204, 91, 189, 3, 31, 67, 61, 124, 86, 63, 62, 68, 56, 73, 61, 160, 62, 209, 188, 138, 158, 83, 63, 244, 129, 143, 63, 240, 38, 44, 63, 74, 29, 62, 62, 47, 248, 65, 190, 59, 208, 163, 190, 225, 46, 38, 190, 62, 190, 39, 190, 224, 221, 55, 190, 181, 84, 60, 189, 70, 74, 143, 61, 219, 22, 145, 61, 199, 227, 134, 61, 249, 236, 78, 64, 101, 69, 130, 63, 45, 150, 199, 190, 210, 42, 253, 190, 180, 111, 101, 191, 209, 149, 206, 190, 68, 149, 35, 62, 112, 123, 184, 189, 180, 115, 49, 189, 248, 16, 208, 61, 71, 219, 107, 62, 5, 144, 77, 59, 197, 243, 81, 190, 35, 226, 157, 61, 132, 204, 91, 191, 51, 72, 94, 191, 0, 107, 186, 190, 126, 113, 187, 60, 121, 80, 207, 62, 152, 69, 193, 62, 38, 51, 47, 62, 146, 237, 20, 62, 48, 232, 22, 62, 239, 159, 77, 60, 1, 198, 96, 190, 238, 130, 109, 190, 75, 13, 179, 63, 13, 25, 129, 63, 125, 49, 112, 62, 225, 131, 110, 190, 142, 23, 235, 190, 180, 84, 88, 190, 113, 202, 249, 61, 116, 147, 16, 60, 241, 92, 199, 189, 47, 57, 187, 189, 15, 185, 224, 61, 201, 80, 146, 61, 243, 247, 163, 188, 119, 191, 207, 63, 231, 88, 132, 62, 67, 199, 155, 190, 108, 252, 46, 190, 143, 23, 205, 190, 130, 157, 231, 188, 60, 215, 162, 62, 213, 17, 31, 61, 45, 127, 58, 189, 174, 89, 222, 188, 241, 101, 54, 62, 164, 20, 75, 189, 107, 177, 67, 190, 137, 159, 19, 191, 140, 59, 21, 191, 187, 167, 40, 190, 135, 161, 128, 62, 81, 86, 178, 62, 139, 254, 104, 62, 37, 174, 12, 61, 35, 236, 130, 189, 242, 91, 70, 59, 142, 232, 77, 61, 32, 74, 128, 188, 60, 79, 138, 189, 124, 233, 47, 189, 42, 169, 129, 64, 107, 201, 141, 63, 147, 130, 8, 191, 55, 177, 154, 190, 216, 179, 228, 190, 220, 170, 128, 189, 224, 180, 18, 62, 76, 68, 117, 190, 154, 83, 238, 188, 202, 130, 70, 62, 162, 44, 217, 187, 112, 249, 85, 190, 125, 163, 72, 190, 30, 83, 177, 63, 62, 169, 215, 190, 48, 112, 78, 191, 173, 63, 33, 190, 209, 114, 17, 62, 252, 227, 22, 62, 117, 32, 49, 60, 178, 79, 220, 61, 62, 129, 169, 61, 10, 70, 200, 61, 55, 239, 37, 190, 254, 210, 81, 190, 150, 55, 197, 189, 248, 204, 21, 192, 38, 167, 130, 190, 19, 214, 61, 63, 106, 9, 217, 62, 53, 255, 207, 62, 29, 140, 143, 189, 209, 46, 229, 189, 209, 131, 24, 62, 59, 223, 143, 189, 40, 235, 126, 190, 211, 87, 39, 189, 83, 77, 54, 62, 124, 148, 98, 62, 87, 45, 43, 64, 98, 217, 96, 63, 72, 135, 74, 190, 32, 54, 169, 189, 144, 98, 29, 191, 96, 35, 129, 190, 6, 167, 138, 62, 204, 60, 170, 189, 250, 181, 8, 190, 81, 82, 28, 60, 193, 7, 164, 62, 72, 54, 88, 189, 147, 48, 153, 190, 63, 191, 105, 63, 101, 249, 215, 189, 73, 30, 174, 190, 102, 250, 144, 61, 224, 143, 90, 61, 247, 31, 116, 61, 192, 228, 192, 60, 42, 164, 145, 189, 14, 190, 67, 60, 97, 155, 151, 61, 17, 41, 30, 61, 136, 248, 26, 190, 43, 160, 39, 190, 63, 78, 249, 190, 177, 251, 115, 189, 22, 240, 16, 62, 174, 202, 141, 61, 200, 247, 38, 62, 147, 226, 162, 187, 235, 82, 135, 190, 40, 49, 176, 188, 199, 28, 209, 61, 146, 130, 65, 60, 192, 202, 16, 190, 130, 105, 135, 60, 154, 155, 244, 61, 218, 14, 71, 64, 190, 245, 175, 63, 59, 65, 167, 60, 253, 157, 59, 190, 136, 200, 0, 191, 230, 255, 131, 190, 210, 181, 116, 62, 108, 142, 155, 190, 55, 187, 64, 190, 175, 122, 152, 61, 132, 106, 105, 61, 145, 164, 186, 188, 19, 27, 180, 189, 52, 205, 128, 64, 241, 199, 180, 62, 47, 138, 159, 191, 246, 193, 46, 191, 151, 112, 27, 191, 144, 158, 201, 60, 2, 109, 94, 62, 13, 156, 17, 190, 143, 85, 126, 61, 85, 50, 145, 62, 96, 53, 85, 189, 126, 155, 98, 190, 244, 23, 97, 190, 23, 17, 13, 192, 192, 113, 142, 191, 135, 41, 64, 190, 240, 96, 227, 61, 130, 172, 41, 63, 118, 239, 170, 62, 114, 99, 95, 190, 230, 94, 116, 62, 95, 74, 33, 62, 49, 63, 142, 187, 53, 157, 38, 190, 197, 11, 38, 190, 239, 183, 96, 188, 211, 104, 93, 64, 120, 104, 32, 63, 140, 82, 50, 191, 142, 204, 169, 60, 2, 6, 57, 190, 90, 77, 141, 190, 94, 139, 24, 190, 43, 183, 160, 189, 47, 128, 58, 62, 91, 85, 32, 62, 12, 0, 209, 189, 4, 106, 58, 190, 54, 74, 191, 189, 56, 159, 61, 62, 153, 72, 35, 190, 28, 115, 26, 62, 112, 18, 191, 62, 52, 221, 7, 61, 25, 51, 69, 190, 185, 222, 86, 190, 165, 212, 8, 61, 165, 122, 75, 61, 94, 104, 177, 189, 100, 196, 218, 189, 198, 147, 55, 62, 190, 154, 227, 61, 49, 46, 124, 188, 145, 58, 245, 59, 79, 8, 71, 62, 47, 52, 217, 61, 108, 5, 201, 189, 30, 255, 127, 188, 105, 67, 204, 61, 130, 238, 118, 188, 245, 206, 41, 190, 10, 6, 127, 189, 213, 56, 70, 61, 208, 76, 135, 61, 198, 53, 134, 188, 185, 112, 93, 64, 139, 250, 110, 63, 178, 251, 13, 190, 150, 8, 20, 62, 195, 120, 193, 190, 109, 164, 228, 190, 164, 140, 51, 61, 39, 107, 112, 189, 111, 203, 224, 189, 110, 184, 33, 61, 243, 121, 189, 188, 183, 199, 103, 60, 4, 242, 61, 188, 0, 97, 149, 61, 84, 78, 103, 189, 134, 129, 254, 61, 58, 201, 36, 62, 9, 54, 105, 189, 36, 29, 83, 189, 168, 64, 69, 188, 200, 42, 181, 187, 240, 205, 176, 189, 153, 49, 41, 61, 138, 101, 164, 61, 30, 99, 61, 60, 167, 57, 189, 188, 123, 86, 96, 190, 103, 187, 45, 189, 30, 122, 52, 60, 236, 112, 194, 188, 167, 168, 88, 61, 159, 165, 174, 61, 99, 33, 163, 188, 161, 7, 82, 188, 68, 89, 19, 60, 40, 108, 48, 188, 35, 209, 131, 188, 218, 254, 16, 189, 245, 154, 48, 60, 249, 187, 109, 64, 235, 76, 99, 63, 236, 61, 22, 191, 95, 150, 52, 190, 7, 98, 197, 190, 224, 123, 214, 189, 57, 231, 42, 62, 174, 78, 34, 190, 145, 175, 93, 189, 197, 241, 27, 62, 114, 205, 117, 61, 184, 180, 126, 190, 20, 218, 95, 190, 231, 29, 158, 188, 148, 6, 60, 190, 230, 1, 30, 190, 13, 163, 145, 61, 131, 117, 65, 62, 47, 230, 1, 60, 226, 103, 45, 190, 20, 237, 218, 60, 18, 242, 25, 62, 213, 35, 53, 59, 93, 20, 153, 189, 152, 13, 153, 189, 198, 7, 121, 61, 141, 57, 87, 190, 152, 82, 168, 60, 225, 95, 221, 61, 116, 112, 96, 61, 216, 217, 111, 188, 223, 71, 153, 189, 130, 165, 169, 189, 39, 113, 168, 60, 115, 135, 53, 61, 199, 158, 151, 188, 153, 195, 17, 187, 47, 38, 154, 61, 66, 99, 97, 61, 105, 164, 58, 64, 224, 70, 181, 62, 13, 82, 142, 61, 124, 125, 92, 63, 72, 188, 49, 190, 155, 12, 182, 190, 85, 150, 175, 190, 160, 1, 133, 190, 197, 63, 204, 188, 164, 116, 109, 190, 63, 240, 39, 189, 130, 250, 214, 188, 180, 109, 5, 190, 150, 192, 47, 191, 1, 245, 137, 189, 20, 215, 103, 62, 138, 207, 199, 61, 240, 0, 150, 61, 253, 77, 127, 61, 93, 6, 121, 61, 28, 132, 189, 188, 33, 65, 164, 189, 112, 219, 170, 189, 108, 161, 35, 189, 209, 206, 254, 59, 73, 247, 118, 58, 118, 52, 55, 190, 92, 8, 189, 60, 25, 69, 189, 188, 253, 226, 23, 190, 112, 51, 165, 60, 242, 24, 155, 61, 179, 81, 97, 61, 171, 149, 93, 60, 7, 32, 193, 60, 219, 188, 107, 61, 208, 146, 238, 60, 244, 35, 16, 189, 44, 255, 18, 189, 109, 101, 171, 191, 248, 208, 226, 190, 224, 99, 93, 190, 135, 203, 135, 61, 180, 25, 144, 61, 86, 136, 9, 62, 37, 121, 233, 60, 64, 141, 79, 189, 123, 186, 42, 62, 201, 62, 154, 61, 52, 133, 134, 189, 133, 129, 38, 61, 159, 236, 112, 61, 130, 204, 245, 63, 229, 60, 145, 63, 216, 179, 234, 62, 83, 206, 156, 62, 248, 98, 110, 62, 27, 245, 113, 188, 28, 35, 216, 189, 250, 219, 206, 189, 89, 205, 136, 189, 42, 252, 84, 61, 142, 197, 2, 189, 66, 7, 201, 189, 252, 159, 108, 189, 77, 124, 4, 64, 139, 20, 125, 63, 151, 151, 4, 62, 186, 70, 72, 189, 25, 51, 186, 189, 125, 215, 144, 189, 101, 238, 54, 190, 145, 43, 54, 190, 94, 201, 65, 187, 127, 99, 137, 188, 57, 203, 179, 189, 144, 206, 16, 189, 5, 236, 153, 189, 237, 109, 108, 191, 16, 91, 42, 191, 92, 73, 208, 190, 145, 77, 47, 62, 108, 193, 104, 189, 251, 185, 149, 62, 24, 5, 196, 188, 117, 247, 178, 190, 187, 217, 220, 62, 232, 215, 191, 188, 0, 183, 71, 190, 45, 68, 17, 62, 144, 97, 170, 189, 0, 200, 219, 62, 161, 182, 143, 62, 11, 255, 61, 62, 3, 229, 100, 62, 140, 58, 105, 62, 95, 247, 180, 188, 216, 154, 194, 61, 104, 144, 251, 60, 75, 217, 82, 189, 203, 91, 137, 61, 145, 59, 114, 189, 42, 7, 4, 61, 123, 196, 24, 62, 246, 248, 118, 63, 58, 20, 102, 63, 195, 144, 3, 63, 204, 247, 144, 62, 253, 35, 140, 62, 123, 40, 214, 188, 131, 190, 186, 58, 133, 100, 196, 61, 190, 31, 61, 190, 13, 59, 180, 60, 141, 54, 101, 61, 57, 20, 43, 190, 47, 249, 246, 188, 150, 111, 214, 191, 254, 171, 189, 190, 45, 201, 53, 189, 203, 199, 132, 189, 175, 32, 43, 62, 0, 101, 214, 61, 229, 61, 14, 60, 226, 173, 170, 61, 60, 186, 105, 61, 255, 189, 124, 61, 106, 19, 179, 60, 1, 107, 241, 60, 120, 13, 128, 61, 9, 155, 24, 64, 246, 42, 115, 63, 1, 100, 51, 61, 16, 31, 33, 190, 85, 151, 14, 190, 55, 211, 62, 187, 75, 249, 53, 189, 254, 86, 51, 190, 208, 136, 167, 59, 44, 247, 28, 62, 33, 177, 24, 61, 110, 180, 150, 189, 57, 125, 208, 189, 73, 16, 20, 64, 116, 143, 44, 63, 170, 254, 84, 190, 81, 238, 16, 190, 114, 247, 75, 190, 11, 53, 241, 188, 84, 237, 128, 60, 26, 223, 130, 190, 38, 217, 160, 189, 174, 245, 138, 61, 100, 71, 211, 60, 200, 193, 31, 189, 255, 21, 216, 189, 130, 126, 139, 191, 203, 54, 15, 191, 224, 146, 222, 189, 128, 242, 243, 61, 147, 22, 165, 190, 57, 231, 94, 62, 119, 80, 3, 62, 189, 239, 21, 190, 238, 74, 159, 62, 165, 16, 133, 189, 227, 182, 180, 189, 208, 157, 102, 62, 222, 144, 93, 190, 84, 143, 165, 62, 10, 54, 71, 60, 22, 9, 188, 189, 34, 98, 0, 189, 82, 99, 169, 188, 65, 173, 168, 60, 88, 126, 11, 60, 233, 193, 115, 188, 154, 187, 70, 61, 190, 13, 143, 60, 237, 110, 66, 189, 122, 15, 166, 60, 92, 89, 70, 59, 214, 126, 182, 60, 178, 215, 146, 61, 251, 249, 34, 189, 63, 89, 7, 189, 0, 103, 40, 62, 72, 17, 247, 188, 215, 148, 62, 189, 78, 163, 132, 61, 161, 7, 44, 189, 206, 14, 151, 186, 172, 222, 51, 187, 113, 215, 65, 189, 99, 60, 202, 61, 179, 190, 140, 190, 245, 26, 144, 60, 49, 13, 95, 190, 34, 5, 159, 190, 240, 38, 162, 189, 0, 45, 159, 62, 1, 99, 147, 62, 74, 101, 169, 61, 70, 21, 47, 189, 212, 235, 6, 190, 176, 250, 246, 188, 12, 208, 161, 61, 139, 23, 156, 61, 247, 84, 119, 63, 180, 255, 241, 62, 246, 155, 187, 61, 222, 221, 49, 61, 118, 222, 88, 61, 198, 121, 126, 188, 99, 67, 115, 189, 127, 85, 94, 189, 96, 189, 149, 60, 40, 53, 87, 60, 182, 250, 115, 189, 227, 35, 95, 188, 238, 226, 4, 187, 80, 3, 235, 62, 163, 245, 7, 188, 140, 189, 226, 189, 245, 191, 135, 189, 60, 90, 214, 189, 115, 180, 245, 188, 55, 45, 84, 189, 44, 107, 128, 189, 223, 98, 97, 61, 34, 148, 40, 61, 20, 29, 36, 186, 181, 136, 25, 61, 152, 239, 54, 189, 239, 55, 91, 64, 117, 130, 126, 63, 19, 39, 4, 191, 79, 41, 208, 188, 183, 46, 45, 190, 54, 106, 55, 61, 100, 80, 152, 60, 186, 201, 193, 190, 233, 27, 18, 62, 113, 84, 21, 62, 61, 111, 98, 189, 109, 124, 40, 187, 78, 172, 229, 189, 15, 159, 230, 63, 237, 162, 126, 189, 163, 141, 221, 190, 57, 224, 180, 61, 194, 109, 50, 190, 250, 136, 60, 188, 32, 223, 27, 62, 253, 13, 242, 189, 234, 19, 20, 188, 190, 180, 226, 188, 190, 249, 165, 59, 70, 237, 58, 188, 43, 16, 16, 189, 21, 49, 196, 191, 35, 130, 191, 190, 170, 216, 177, 62, 101, 239, 241, 61, 45, 166, 63, 62, 68, 243, 184, 60, 20, 186, 102, 189, 90, 247, 29, 62, 255, 184, 51, 59, 236, 185, 182, 188, 111, 41, 189, 188, 162, 58, 39, 188, 224, 91, 74, 61, 231, 119, 177, 63, 1, 94, 119, 63, 222, 67, 108, 61, 85, 47, 14, 190, 135, 237, 111, 189, 245, 94, 223, 60, 210, 47, 198, 189, 64, 93, 83, 190, 95, 149, 181, 60, 1, 83, 23, 62, 96, 77, 148, 61, 244, 196, 100, 189, 173, 39, 218, 189, 58, 254, 116, 64, 94, 221, 155, 63, 174, 14, 175, 190, 62, 3, 217, 189, 244, 79, 200, 190, 72, 3, 170, 189, 45, 152, 135, 61, 139, 212, 188, 190, 3, 197, 124, 189, 23, 62, 138, 61, 150, 220, 193, 61, 14, 235, 4, 190, 62, 198, 82, 190, 215, 97, 189, 190, 167, 141, 76, 191, 105, 197, 231, 190, 10, 5, 162, 61, 216, 48, 138, 188, 254, 104, 179, 61, 3, 41, 65, 62, 234, 25, 49, 61, 107, 169, 52, 60, 161, 228, 207, 189, 252, 79, 181, 189, 198, 32, 58, 60, 127, 3, 229, 61, 207, 212, 151, 63, 1, 90, 222, 62, 31, 144, 146, 189, 66, 226, 27, 62, 119, 87, 126, 62, 10, 22, 94, 62, 136, 210, 52, 190, 130, 68, 111, 190, 69, 181, 145, 62, 166, 152, 240, 61, 34, 101, 149, 190, 125, 122, 2, 60, 192, 114, 169, 60, 49, 79, 84, 64, 157, 149, 66, 63, 220, 202, 194, 190, 54, 77, 32, 190, 124, 81, 82, 190, 123, 38, 132, 189, 25, 202, 246, 189, 185, 43, 64, 190, 93, 108, 201, 61, 49, 28, 154, 60, 206, 184, 247, 189, 163, 136, 17, 62, 92, 42, 52, 189, 7, 62, 234, 190, 198, 234, 199, 190, 66, 41, 188, 190, 5, 37, 46, 190, 232, 84, 172, 190, 51, 10, 15, 190, 150, 215, 30, 62, 122, 214, 6, 61, 243, 243, 46, 189, 223, 215, 233, 189, 125, 17, 99, 62, 13, 58, 152, 61, 85, 219, 188, 189, 250, 74, 76, 64, 63, 27, 202, 62, 103, 164, 253, 189, 218, 227, 40, 63, 249, 65, 140, 190, 95, 224, 198, 190, 128, 231, 58, 189, 14, 165, 254, 189, 32, 225, 133, 61, 118, 142, 40, 61, 88, 15, 88, 189, 75, 35, 39, 62, 195, 158, 181, 188, 85, 251, 132, 191, 150, 21, 205, 60, 61, 123, 196, 62, 160, 253, 248, 60, 238, 213, 155, 61, 74, 53, 1, 60, 112, 74, 179, 188, 112, 20, 166, 189, 251, 222, 170, 189, 119, 115, 59, 60, 216, 155, 167, 61, 218, 77, 179, 59, 23, 112, 111, 60, 191, 220, 79, 190, 214, 75, 64, 60, 84, 212, 235, 187, 53, 186, 251, 189, 27, 138, 142, 61, 176, 200, 11, 62, 48, 110, 32, 188, 81, 158, 207, 188, 65, 162, 50, 188, 160, 182, 133, 59, 113, 164, 162, 188, 88, 230, 0, 189, 164, 132, 139, 59, 193, 50, 150, 64, 184, 126, 6, 63, 233, 253, 70, 191, 118, 111, 122, 62, 182, 115, 64, 190, 162, 241, 2, 189, 66, 173, 99, 189, 97, 15, 81, 190, 223, 97, 100, 62, 19, 26, 237, 61, 191, 59, 106, 190, 213, 214, 28, 62, 47, 104, 154, 188, 133, 53, 105, 61, 85, 72, 161, 189, 252, 174, 49, 61, 96, 104, 109, 61, 243, 76, 20, 189, 223, 224, 154, 189, 14, 187, 141, 59, 96, 0, 151, 61, 115, 235, 33, 189, 165, 100, 134, 187, 147, 140, 226, 59, 21, 137, 196, 59, 210, 73, 116, 60, 124, 44, 21, 190, 29, 121, 19, 60, 254, 169, 101, 61, 141, 127, 109, 60, 96, 219, 8, 59, 139, 117, 140, 188, 114, 47, 117, 187, 93, 241, 149, 185, 98, 100, 3, 60, 99, 114, 156, 187, 205, 181, 222, 185, 10, 1, 59, 186, 21, 54, 107, 58, 211, 156, 138, 64, 31, 148, 101, 63, 126, 192, 24, 191, 48, 88, 27, 60, 102, 37, 132, 190, 221, 138, 216, 58, 79, 214, 127, 61, 197, 8, 177, 190, 12, 103, 132, 61, 247, 250, 99, 61, 246, 118, 243, 60, 228, 62, 246, 189, 138, 23, 72, 190, 156, 201, 98, 62, 195, 151, 220, 189, 222, 240, 139, 189, 41, 87, 192, 61, 188, 100, 62, 61, 82, 146, 147, 189, 107, 250, 133, 189, 8, 246, 142, 61, 118, 203, 196, 60, 120, 223, 55, 188, 231, 39, 199, 188, 149, 246, 145, 187, 131, 192, 80, 60, 67, 59, 96, 190, 90, 236, 240, 187, 206, 155, 43, 61, 66, 108, 165, 60, 76, 113, 176, 60, 199, 123, 170, 188, 26, 46, 36, 189, 72, 175, 7, 61, 176, 185, 90, 187, 189, 40, 64, 186, 71, 163, 248, 59, 146, 120, 166, 60, 93, 176, 115, 60, 196, 6, 23, 64, 188, 252, 234, 62, 46, 6, 133, 190, 86, 232, 112, 62, 25, 152, 49, 61, 4, 236, 30, 190, 111, 21, 79, 190, 163, 206, 6, 190, 162, 92, 67, 61, 150, 186, 159, 61, 141, 224, 4, 189, 69, 38, 214, 188, 207, 191, 84, 189, 128, 65, 156, 191, 161, 79, 56, 190, 49, 190, 68, 62, 89, 20, 165, 189, 116, 51, 182, 61, 123, 115, 215, 61, 187, 88, 110, 187, 215, 163, 138, 61, 10, 40, 209, 188, 210, 89, 29, 189, 208, 134, 164, 187, 64, 26, 128, 59, 159, 250, 19, 61, 63, 112, 72, 188, 200, 120, 146, 189, 73, 149, 52, 189, 157, 221, 58, 188, 53, 119, 189, 188, 123, 93, 227, 60, 240, 187, 165, 61, 153, 32, 226, 59, 250, 126, 182, 187, 218, 31, 91, 188, 115, 106, 249, 59, 102, 188, 53, 188, 43, 27, 66, 188, 196, 106, 16, 191, 146, 227, 254, 190, 106, 210, 138, 62, 239, 73, 65, 190, 184, 108, 205, 61, 202, 26, 124, 190, 211, 50, 55, 189, 202, 33, 75, 190, 34, 46, 143, 60, 44, 146, 219, 59, 50, 203, 25, 62, 223, 214, 194, 61, 160, 53, 183, 61, 221, 109, 106, 64, 60, 248, 214, 63, 50, 193, 201, 62, 180, 101, 131, 62, 178, 35, 22, 191, 119, 73, 246, 190, 27, 167, 38, 190, 28, 52, 217, 188, 12, 74, 131, 61, 203, 177, 51, 62, 254, 222, 209, 189, 43, 128, 111, 189, 25, 12, 3, 62, 134, 17, 27, 64, 255, 7, 251, 62, 119, 66, 199, 190, 127, 230, 11, 189, 91, 2, 142, 190, 103, 8, 58, 61, 70, 88, 13, 62, 227, 134, 89, 62, 164, 157, 78, 61, 78, 9, 248, 61, 219, 121, 103, 190, 241, 136, 10, 190, 106, 168, 25, 61, 135, 216, 0, 192, 214, 213, 204, 190, 198, 188, 169, 187, 80, 138, 89, 60, 24, 108, 204, 61, 11, 27, 106, 61, 79, 252, 159, 60, 115, 44, 80, 61, 251, 49, 139, 60, 235, 31, 49, 60, 135, 14, 9, 61, 243, 92, 6, 61, 58, 39, 206, 60, 105, 18, 232, 63, 253, 109, 66, 63, 128, 159, 184, 62, 34, 149, 234, 61, 172, 11, 82, 190, 112, 202, 154, 190, 125, 211, 5, 190, 56, 142, 4, 190, 44, 22, 39, 60, 39, 176, 146, 61, 16, 197, 55, 189, 169, 77, 36, 189, 184, 132, 8, 61, 28, 119, 66, 64, 93, 216, 159, 63, 100, 235, 98, 62, 195, 99, 130, 61, 109, 67, 221, 190, 58, 102, 181, 190, 252, 200, 61, 190, 157, 148, 183, 189, 216, 219, 163, 61, 19, 25, 222, 61, 187, 17, 21, 190, 44, 200, 252, 189, 192, 149, 187, 61, 149, 119, 184, 191, 3, 218, 207, 190, 221, 243, 57, 61, 164, 240, 24, 189, 214, 132, 8, 62, 143, 133, 17, 61, 208, 66, 128, 189, 187, 57, 188, 57, 34, 252, 17, 189, 54, 153, 123, 60, 86, 32, 50, 60, 218, 235, 136, 61, 90, 13, 6, 62, 92, 94, 20, 64, 35, 202, 121, 63, 233, 37, 195, 60, 122, 179, 182, 60, 175, 200, 147, 190, 191, 165, 173, 190, 40, 81, 85, 190, 47, 25, 237, 189, 3, 33, 164, 61, 211, 195, 69, 62, 246, 173, 49, 60, 148, 164, 132, 190, 66, 3, 36, 190, 75, 225, 21, 64, 168, 199, 55, 63, 44, 175, 128, 190, 60, 174, 101, 189, 46, 108, 136, 190, 83, 30, 15, 190, 53, 164, 102, 61, 143, 62, 46, 188, 14, 90, 19, 62, 144, 132, 2, 62, 197, 74, 148, 60, 244, 168, 124, 190, 104, 119, 54, 190, 60, 151, 251, 190, 177, 246, 53, 191, 27, 205, 151, 62, 220, 98, 144, 190, 100, 123, 169, 62, 57, 18, 212, 189, 126, 77, 221, 61, 78, 220, 150, 189, 151, 56, 26, 61, 163, 217, 137, 189, 68, 43, 51, 61, 170, 81, 189, 188, 9, 146, 16, 61, 250, 70, 55, 63, 139, 3, 224, 60, 39, 233, 22, 62, 202, 88, 181, 189, 79, 62, 174, 61, 63, 68, 252, 189, 59, 177, 178, 188, 199, 122, 176, 189, 113, 86, 97, 188, 78, 181, 126, 188, 38, 210, 84, 188, 234, 240, 107, 187, 253, 8, 33, 187, 184, 129, 100, 60, 195, 51, 114, 62, 97, 191, 94, 189, 58, 200, 92, 61, 229, 212, 6, 190, 96, 251, 209, 188, 146, 96, 197, 189, 20, 216, 71, 60, 225, 178, 26, 189, 50, 122, 83, 61, 48, 214, 54, 61, 98, 42, 10, 61, 51, 39, 135, 60, 184, 100, 5, 64, 241, 109, 135, 63, 108, 208, 191, 62, 5, 188, 254, 61, 161, 147, 178, 190, 84, 55, 196, 190, 235, 95, 14, 190, 98, 116, 217, 189, 212, 253, 134, 61, 119, 151, 176, 61, 237, 232, 22, 190, 161, 93, 124, 189, 249, 47, 13, 62, 170, 207, 140, 64, 161, 38, 66, 63, 18, 162, 25, 191, 224, 156, 102, 189, 194, 196, 7, 191, 82, 91, 3, 190, 100, 158, 151, 60, 225, 90, 160, 60, 59, 224, 186, 61, 183, 54, 245, 61, 157, 44, 10, 190, 163, 223, 147, 189, 230, 181, 102, 61, 71, 32, 145, 191, 38, 35, 142, 191, 155, 143, 59, 191, 244, 157, 24, 190, 149, 217, 132, 62, 10, 181, 206, 62, 8, 42, 74, 62, 228, 146, 196, 61, 137, 71, 171, 188, 15, 13, 144, 189, 78, 244, 70, 62, 210, 46, 223, 60, 170, 193, 24, 190, 199, 184, 139, 64, 64, 168, 77, 63, 93, 72, 30, 191, 109, 134, 159, 188, 55, 208, 244, 190, 122, 232, 50, 190, 69, 125, 173, 61, 168, 196, 176, 189, 82, 115, 118, 61, 153, 43, 139, 61, 191, 128, 149, 188, 212, 172, 82, 190, 246, 61, 137, 189, 34, 27, 165, 63, 37, 218, 147, 190, 183, 54, 242, 190, 128, 238, 66, 188, 215, 154, 162, 61, 202, 108, 38, 62, 222, 113, 5, 62, 216, 2, 130, 188, 149, 228, 55, 189, 188, 86, 217, 189, 102, 172, 202, 60, 176, 249, 19, 188, 223, 20, 186, 189, 43, 17, 207, 191, 16, 237, 216, 61, 148, 135, 18, 63, 140, 139, 103, 60, 164, 203, 249, 61, 229, 21, 15, 190, 230, 116, 216, 189, 54, 212, 22, 188, 195, 224, 109, 187, 119, 61, 31, 61, 130, 10, 74, 189, 214, 228, 163, 61, 10, 136, 253, 60, 172, 126, 42, 64, 41, 94, 65, 63, 250, 105, 35, 191, 109, 9, 6, 190, 189, 111, 40, 190, 209, 51, 186, 190, 23, 185, 220, 60, 193, 43, 179, 189, 133, 227, 228, 60, 47, 237, 174, 62, 107, 229, 69, 61, 170, 58, 186, 190, 163, 52, 36, 190, 174, 123, 71, 64, 68, 217, 181, 62, 241, 185, 81, 191, 70, 151, 46, 61, 134, 46, 74, 189, 123, 232, 158, 189, 95, 46, 169, 62, 18, 78, 13, 190, 226, 227, 111, 189, 174, 90, 198, 189, 145, 162, 189, 188, 5, 204, 38, 190, 33, 159, 236, 189, 245, 110, 186, 191, 123, 215, 34, 191, 89, 128, 154, 62, 45, 152, 240, 61, 161, 112, 9, 62, 105, 92, 99, 62, 39, 114, 1, 60, 229, 169, 53, 189, 147, 236, 173, 59, 176, 146, 150, 190, 212, 31, 222, 188, 116, 195, 136, 62, 246, 203, 251, 61, 41, 135, 117, 63, 168, 70, 26, 63, 104, 156, 14, 62, 32, 199, 247, 189, 252, 51, 134, 190, 139, 208, 112, 190, 132, 41, 79, 190, 228, 38, 128, 189, 28, 43, 48, 62, 111, 198, 83, 62, 217, 126, 177, 61, 20, 17, 23, 190, 223, 42, 227, 189, 49, 238, 99, 64, 208, 115, 122, 63, 89, 68, 245, 190, 45, 124, 30, 190, 253, 13, 210, 190, 195, 228, 30, 190, 21, 43, 207, 61, 108, 187, 206, 58, 115, 183, 2, 62, 89, 103, 188, 61, 150, 163, 186, 61, 0, 20, 165, 190, 203, 3, 147, 190, 134, 197, 47, 62, 67, 2, 12, 191, 109, 65, 5, 191, 253, 74, 95, 188, 205, 194, 137, 62, 16, 166, 57, 62, 9, 125, 153, 62, 196, 216, 40, 61, 237, 61, 91, 190, 141, 157, 59, 190, 178, 195, 38, 189, 69, 87, 150, 61, 165, 168, 105, 61, 164, 139, 157, 64, 248, 157, 13, 63, 139, 65, 52, 191, 88, 67, 21, 62, 54, 37, 182, 190, 130, 206, 62, 190, 107, 175, 252, 61, 64, 104, 198, 188, 245, 251, 229, 61, 234, 185, 128, 61, 134, 103, 103, 190, 183, 141, 60, 61, 165, 178, 54, 61, 224, 251, 72, 190, 3, 162, 255, 60, 204, 216, 18, 61, 59, 117, 129, 59, 122, 111, 117, 61, 208, 156, 79, 188, 65, 239, 146, 60, 201, 227, 139, 188, 66, 146, 245, 60, 72, 56, 184, 60, 53, 226, 66, 188, 162, 92, 17, 61, 176, 57, 60, 187, 128, 49, 34, 190, 142, 154, 25, 61, 133, 244, 96, 61, 187, 244, 101, 188, 77, 160, 111, 60, 117, 162, 171, 59, 43, 88, 163, 188, 8, 178, 145, 187, 255, 248, 22, 59, 248, 188, 27, 60, 67, 252, 40, 60, 1, 254, 100, 188, 138, 117, 148, 60, 174, 251, 82, 63, 112, 93, 234, 62, 40, 200, 133, 62, 192, 237, 63, 61, 241, 42, 218, 61, 57, 190, 204, 61, 19, 20, 46, 61, 18, 191, 89, 60, 49, 138, 32, 189, 92, 20, 254, 188, 210, 88, 105, 189, 112, 52, 229, 189, 0, 81, 195, 189, 153, 168, 43, 191, 130, 201, 147, 190, 34, 148, 201, 59, 26, 89, 228, 60, 27, 11, 66, 61, 119, 192, 180, 60, 212, 179, 96, 187, 231, 239, 67, 61, 83, 143, 67, 60, 178, 73, 126, 188, 100, 213, 24, 60, 47, 125, 201, 60, 29, 242, 173, 60, 142, 130, 220, 61, 172, 235, 147, 188, 87, 8, 150, 189, 67, 211, 92, 187, 58, 141, 209, 188, 162, 239, 219, 188, 142, 106, 245, 187, 118, 201, 206, 188, 214, 132, 252, 59, 242, 94, 159, 60, 81, 77, 169, 60, 122, 204, 157, 60, 156, 82, 166, 60, 2, 223, 78, 64, 192, 51, 75, 63, 140, 210, 152, 190, 153, 178, 44, 190, 90, 214, 87, 190, 223, 148, 203, 189, 145, 29, 211, 61, 21, 31, 228, 189, 66, 185, 248, 188, 111, 38, 99, 188, 225, 107, 55, 60, 61, 86, 239, 189, 85, 71, 21, 190, 155, 184, 97, 191, 240, 101, 146, 59, 26, 106, 137, 62, 42, 146, 22, 189, 232, 245, 200, 61, 66, 110, 215, 61, 55, 134, 175, 188, 68, 251, 69, 61, 251, 90, 96, 189, 43, 234, 176, 188, 65, 31, 115, 188, 156, 151, 33, 188, 29, 224, 197, 60, 3, 47, 151, 189, 92, 58, 173, 189, 44, 249, 155, 59, 12, 86, 203, 60, 233, 229, 28, 61, 222, 63, 234, 59, 238, 190, 86, 60, 78, 238, 13, 61, 86, 68, 132, 59, 72, 201, 115, 188, 70, 124, 216, 188, 255, 219, 187, 188, 14, 235, 85, 188, 234, 123, 150, 64, 33, 54, 76, 63, 91, 25, 80, 191, 108, 120, 239, 189, 18, 84, 140, 190, 160, 184, 19, 190, 32, 145, 14, 62, 215, 32, 35, 190, 50, 128, 235, 61, 108, 197, 86, 189, 77, 226, 168, 61, 27, 224, 123, 190, 46, 10, 139, 190, 170, 93, 213, 61, 75, 101, 91, 188, 253, 115, 165, 60, 192, 53, 253, 59, 17, 198, 129, 188, 116, 163, 221, 60, 160, 24, 190, 57, 160, 135, 158, 188, 5, 71, 188, 185, 112, 114, 201, 188, 131, 249, 24, 59, 51, 81, 28, 61, 67, 245, 181, 188, 196, 223, 146, 190, 173, 243, 37, 61, 31, 60, 156, 61, 21, 46, 1, 188, 165, 89, 165, 188, 116, 48, 105, 60, 2, 64, 8, 189, 24, 10, 45, 59, 146, 30, 56, 188, 87, 6, 206, 60, 147, 65, 111, 60, 43, 44, 69, 60, 234, 22, 9, 60, 25, 70, 48, 191, 151, 100, 148, 191, 40, 207, 32, 63, 105, 228, 204, 190, 135, 99, 177, 62, 170, 149, 197, 59, 7, 154, 155, 189, 59, 111, 65, 62, 192, 97, 71, 190, 162, 31, 69, 62, 246, 164, 31, 190, 6, 162, 38, 62, 107, 29, 199, 188, 26, 115, 179, 63, 215, 103, 50, 191, 64, 190, 38, 63, 209, 15, 190, 190, 79, 72, 139, 62, 232, 107, 252, 189, 99, 28, 33, 189, 231, 213, 168, 61, 141, 254, 53, 190, 255, 196, 175, 61, 230, 117, 191, 189, 153, 155, 253, 60, 221, 224, 158, 188, 83, 55, 100, 189, 25, 182, 173, 62, 201, 249, 121, 190, 177, 200, 103, 62, 96, 198, 156, 189, 145, 62, 221, 60, 216, 80, 27, 61, 154, 155, 3, 190, 226, 91, 49, 62, 106, 80, 39, 190, 124, 125, 5, 62, 157, 151, 224, 189, 11, 59, 210, 61, 106, 241, 222, 61, 244, 174, 158, 191, 34, 43, 22, 63, 2, 59, 10, 191, 147, 239, 228, 62, 19, 186, 135, 190, 16, 160, 107, 62, 186, 107, 222, 189, 59, 187, 187, 61, 19, 40, 80, 189, 82, 73, 123, 61, 107, 237, 148, 188, 110, 92, 231, 60, 120, 184, 223, 62, 123, 81, 63, 188, 165, 126, 3, 189, 157, 152, 4, 62, 64, 94, 13, 189, 139, 179, 31, 188, 25, 4, 208, 58, 20, 35, 137, 59, 135, 65, 66, 188, 25, 38, 74, 60, 45, 237, 204, 188, 225, 132, 168, 188, 181, 85, 74, 188, 189, 171, 50, 62, 155, 98, 29, 63, 186, 172, 94, 189, 253, 191, 148, 62, 180, 200, 56, 190, 147, 120, 116, 60, 213, 179, 29, 190, 186, 3, 18, 61, 143, 232, 42, 189, 190, 65, 22, 61, 221, 229, 22, 189, 200, 210, 9, 61, 212, 84, 224, 60, 113, 175, 184, 61, 37, 24, 169, 191, 115, 169, 48, 63, 87, 193, 216, 190, 83, 37, 182, 62, 78, 89, 64, 61, 152, 224, 35, 190, 15, 237, 91, 62, 108, 247, 83, 190, 209, 164, 35, 62, 164, 53, 30, 190, 107, 35, 202, 61, 82, 2, 141, 61, 117, 70, 89, 62, 71, 100, 178, 62, 135, 19, 72, 190, 245, 216, 46, 62, 44, 72, 179, 189, 132, 225, 209, 188, 8, 13, 65, 60, 14, 232, 32, 190, 188, 147, 221, 61, 142, 69, 162, 189, 144, 213, 35, 61, 209, 214, 162, 188, 100, 234, 158, 60, 93, 63, 4, 190, 104, 201, 42, 63, 109, 71, 24, 190, 101, 108, 129, 62, 227, 41, 14, 190, 158, 162, 99, 189, 65, 195, 46, 189, 153, 130, 252, 189, 19, 88, 102, 61, 7, 37, 50, 61, 190, 42, 147, 61, 118, 107, 29, 188, 250, 102, 23, 189, 112, 175, 178, 60, 188, 86, 196, 191, 63, 252, 67, 63, 84, 173, 33, 191, 15, 181, 6, 63, 234, 243, 30, 190, 190, 155, 208, 61, 153, 19, 148, 61, 62, 82, 223, 189, 73, 92, 231, 61, 214, 186, 152, 189, 36, 31, 166, 61, 122, 87, 211, 60, 233, 125, 136, 62, 209, 155, 186, 60, 85, 117, 16, 189, 195, 84, 240, 60, 48, 213, 170, 188, 27, 78, 35, 189, 207, 174, 162, 188, 159, 6, 248, 188, 212, 153, 20, 61, 86, 182, 16, 188, 198, 22, 30, 60, 239, 40, 193, 188, 210, 65, 51, 61, 120, 156, 207, 190, 88, 9, 193, 62, 214, 114, 126, 190, 145, 54, 43, 62, 74, 47, 210, 189, 212, 1, 59, 61, 22, 7, 205, 188, 224, 142, 84, 189, 143, 226, 113, 61, 37, 219, 128, 188, 202, 86, 131, 59, 55, 6, 209, 57, 114, 51, 159, 188, 239, 127, 20, 61, 145, 42, 122, 191, 57, 214, 199, 62, 180, 11, 121, 190, 6, 244, 177, 62, 220, 22, 216, 189, 196, 145, 131, 187, 108, 111, 246, 188, 245, 15, 162, 188, 186, 223, 27, 61, 54, 61, 3, 189, 235, 80, 27, 61, 111, 117, 132, 61, 219, 197, 213, 63, 210, 123, 194, 63, 176, 232, 136, 188, 46, 225, 213, 62, 181, 58, 199, 190, 156, 127, 86, 190, 229, 175, 138, 190, 183, 255, 11, 190, 83, 228, 159, 61, 171, 59, 222, 61, 162, 247, 153, 60, 32, 91, 208, 189, 85, 157, 42, 59, 114, 49, 11, 64, 125, 94, 78, 63, 206, 52, 158, 189, 167, 206, 81, 189, 76, 59, 185, 190, 102, 144, 118, 190, 178, 62, 21, 190, 26, 106, 110, 61, 26, 221, 48, 61, 84, 112, 14, 62, 218, 251, 127, 60, 63, 9, 244, 189, 25, 0, 64, 189, 103, 9, 132, 64, 245, 49, 50, 63, 219, 180, 209, 190, 62, 82, 98, 190, 3, 58, 194, 190, 178, 186, 94, 190, 50, 108, 56, 61, 201, 190, 206, 186, 193, 174, 119, 189, 136, 52, 233, 61, 67, 217, 21, 189, 149, 185, 18, 190, 198, 149, 131, 189, 13, 187, 73, 63, 87, 163, 13, 188, 252, 206, 23, 191, 140, 151, 247, 188, 54, 141, 205, 189, 61, 59, 62, 62, 140, 73, 167, 62, 112, 159, 204, 58, 77, 115, 162, 189, 167, 112, 35, 190, 66, 240, 163, 60, 69, 120, 147, 61, 96, 54, 255, 189, 50, 207, 161, 191, 40, 121, 198, 189, 219, 71, 1, 63, 107, 200, 144, 61, 157, 199, 60, 62, 126, 248, 18, 189, 21, 124, 166, 189, 31, 91, 225, 189, 199, 241, 112, 61, 193, 163, 7, 187, 141, 61, 133, 186, 92, 228, 232, 61, 88, 231, 235, 60, 250, 81, 80, 64, 244, 210, 60, 63, 252, 244, 228, 61, 24, 1, 246, 189, 12, 128, 101, 190, 231, 90, 199, 190, 146, 81, 83, 190, 71, 137, 98, 189, 106, 135, 124, 61, 249, 99, 106, 62, 187, 227, 142, 60, 2, 72, 77, 190, 67, 182, 229, 188, 108, 202, 72, 64, 53, 51, 76, 63, 207, 245, 117, 191, 44, 153, 207, 189, 179, 245, 247, 190, 58, 179, 5, 187, 101, 23, 86, 62, 145, 56, 4, 62, 47, 76, 46, 189, 137, 159, 39, 187, 136, 232, 205, 60, 96, 106, 72, 190, 149, 148, 38, 190, 94, 161, 202, 191, 180, 90, 166, 191, 162, 81, 147, 190, 21, 67, 1, 190, 167, 221, 164, 62, 204, 43, 175, 62, 7, 193, 201, 62, 230, 78, 20, 61, 191, 40, 39, 190, 79, 248, 136, 190, 16, 143, 2, 189, 104, 91, 110, 62, 71, 210, 173, 59, 234, 138, 118, 63, 212, 88, 70, 189, 9, 47, 32, 63, 105, 59, 136, 61, 48, 154, 196, 61, 170, 95, 123, 190, 126, 20, 130, 190, 61, 248, 250, 189, 86, 31, 16, 189, 177, 156, 22, 62, 92, 33, 130, 188, 102, 53, 70, 61, 88, 8, 124, 61, 121, 177, 58, 64, 13, 220, 165, 63, 137, 87, 129, 190, 106, 70, 153, 61, 254, 187, 219, 190, 198, 182, 134, 190, 225, 59, 51, 190, 131, 13, 108, 189, 200, 36, 23, 61, 234, 211, 32, 62, 103, 110, 130, 61, 86, 223, 62, 190, 34, 71, 205, 189, 180, 150, 75, 63, 251, 167, 158, 190, 64, 209, 11, 191, 158, 230, 190, 190, 138, 36, 110, 189, 203, 199, 14, 62, 159, 122, 155, 62, 43, 132, 55, 62, 39, 121, 34, 189, 131, 26, 124, 189, 32, 121, 148, 60, 57, 6, 4, 190, 210, 214, 250, 189, 60, 14, 144, 64, 69, 65, 80, 63, 186, 82, 80, 191, 61, 7, 233, 189, 155, 84, 0, 190, 161, 105, 186, 60, 250, 254, 194, 60, 214, 191, 3, 190, 36, 142, 140, 61, 153, 167, 139, 61, 120, 126, 69, 190, 232, 222, 68, 188, 104, 19, 4, 60, 47, 38, 165, 190, 127, 41, 34, 62, 22, 185, 119, 61, 8, 65, 4, 190, 180, 186, 53, 61, 193, 115, 123, 61, 202, 101, 34, 187, 188, 228, 17, 189, 88, 148, 92, 188, 40, 167, 131, 60, 227, 88, 90, 61, 183, 201, 174, 60, 123, 192, 132, 188, 196, 196, 189, 189, 70, 124, 159, 60, 82, 172, 177, 61, 51, 238, 75, 188, 141, 84, 8, 189, 29, 239, 204, 188, 242, 243, 216, 59, 27, 142, 162, 60, 229, 239, 212, 56, 227, 251, 52, 187, 181, 186, 116, 60, 203, 223, 15, 187, 110, 229, 145, 60, 246, 171, 25, 64, 201, 228, 161, 63, 20, 117, 141, 62, 73, 15, 189, 190, 255, 57, 10, 191, 175, 187, 61, 190, 65, 135, 196, 61, 100, 130, 224, 187, 136, 20, 64, 189, 157, 90, 139, 189, 186, 46, 150, 60, 187, 86, 79, 61, 115, 97, 160, 188, 32, 95, 11, 191, 129, 148, 57, 60, 17, 63, 122, 62, 118, 145, 140, 61, 161, 177, 223, 60, 148, 152, 120, 189, 136, 149, 187, 189, 79, 179, 53, 60, 93, 38, 249, 59, 224, 66, 247, 188, 119, 59, 119, 189, 240, 119, 181, 188, 152, 51, 60, 61, 204, 64, 38, 61, 16, 150, 137, 189, 52, 68, 59, 189, 246, 191, 62, 61, 59, 191, 69, 61, 19, 246, 231, 59, 197, 17, 181, 188, 131, 10, 189, 188, 211, 146, 38, 188, 149, 58, 190, 187, 100, 197, 152, 187, 255, 29, 219, 188, 130, 189, 220, 188, 72, 211, 166, 63, 181, 253, 108, 63, 34, 33, 17, 63, 81, 75, 122, 189, 99, 140, 136, 190, 46, 145, 120, 190, 154, 53, 39, 190, 251, 84, 139, 189, 135, 3, 185, 189, 189, 232, 202, 189, 201, 179, 106, 189, 62, 135, 38, 189, 132, 172, 94, 189, 146, 204, 48, 191, 226, 34, 217, 190, 153, 185, 194, 189, 149, 154, 173, 61, 33, 121, 58, 62, 89, 208, 207, 61, 137, 198, 155, 188, 79, 61, 214, 187, 193, 201, 48, 188, 146, 7, 140, 187, 177, 227, 188, 187, 103, 119, 69, 188, 79, 148, 161, 186, 10, 116, 66, 189, 64, 209, 224, 189, 179, 128, 234, 189, 129, 230, 18, 189, 183, 128, 101, 60, 1, 133, 89, 61, 125, 125, 178, 61, 191, 46, 50, 61, 25, 20, 139, 60, 144, 86, 25, 60, 66, 50, 193, 60, 190, 12, 193, 60, 208, 216, 37, 60, 189, 13, 127, 64, 208, 114, 118, 63, 14, 147, 196, 190, 194, 199, 91, 190, 118, 108, 11, 191, 214, 143, 124, 190, 134, 140, 159, 62, 173, 120, 214, 189, 91, 192, 154, 189, 1, 43, 139, 189, 214, 139, 32, 62, 62, 101, 140, 189, 6, 0, 142, 190, 16, 118, 50, 190, 33, 99, 28, 62, 34, 235, 31, 62, 1, 12, 104, 188, 66, 144, 43, 190, 251, 41, 134, 188, 207, 67, 60, 61, 245, 203, 32, 59, 17, 8, 214, 188, 20, 58, 179, 189, 244, 226, 19, 188, 148, 228, 214, 61, 49, 212, 183, 60, 216, 3, 168, 190, 34, 4, 220, 60, 16, 68, 30, 62, 25, 109, 141, 187, 126, 25, 164, 60, 58, 76, 174, 188, 115, 176, 229, 189, 129, 169, 210, 58, 191, 91, 156, 60, 119, 58, 57, 61, 102, 226, 6, 189, 24, 199, 128, 188, 178, 167, 137, 61, 86, 59, 18, 63, 60, 203, 96, 63, 225, 225, 49, 63, 114, 0, 224, 62, 134, 106, 188, 61, 43, 42, 137, 190, 209, 12, 34, 190, 27, 222, 2, 188, 213, 131, 144, 189, 19, 205, 42, 62, 120, 171, 10, 62, 85, 11, 19, 189, 135, 89, 109, 61, 26, 135, 121, 63, 225, 215, 185, 60, 97, 107, 25, 190, 176, 179, 174, 189, 12, 189, 6, 190, 1, 235, 89, 190, 187, 95, 88, 189, 185, 153, 106, 61, 235, 101, 50, 61, 44, 185, 20, 62, 208, 145, 95, 61, 184, 71, 112, 189, 157, 33, 52, 61, 182, 100, 60, 62, 114, 60, 185, 189, 208, 155, 41, 190, 51, 166, 213, 187, 164, 44, 97, 61, 44, 253, 28, 62, 247, 254, 188, 187, 130, 246, 75, 189, 99, 58, 142, 61, 150, 161, 172, 189, 216, 30, 170, 189, 54, 43, 103, 188, 199, 161, 42, 188, 248, 195, 177, 191, 110, 122, 11, 189, 150, 100, 144, 62, 239, 244, 62, 62, 96, 199, 100, 62, 190, 201, 10, 62, 132, 148, 214, 187, 34, 56, 75, 188, 149, 144, 147, 189, 188, 186, 90, 189, 141, 121, 31, 189, 25, 194, 92, 188, 170, 24, 97, 61, 154, 208, 43, 64, 39, 184, 143, 63, 104, 177, 161, 62, 48, 137, 216, 62, 250, 148, 0, 61, 152, 216, 156, 190, 168, 52, 187, 190, 189, 1, 158, 190, 214, 39, 136, 189, 130, 241, 45, 62, 100, 92, 209, 189, 250, 180, 3, 190, 144, 169, 5, 187, 197, 116, 21, 64, 37, 81, 91, 62, 104, 84, 26, 191, 91, 179, 233, 189, 70, 65, 145, 190, 177, 29, 133, 190, 76, 167, 73, 190, 214, 34, 197, 189, 205, 58, 89, 62, 184, 66, 128, 62, 37, 206, 172, 60, 80, 131, 34, 189, 175, 115, 228, 186, 97, 20, 31, 191, 184, 195, 33, 63, 83, 97, 60, 63, 203, 150, 7, 63, 120, 246, 185, 62, 3, 175, 153, 61, 20, 100, 154, 189, 79, 189, 226, 189, 187, 225, 35, 190, 51, 252, 96, 189, 248, 82, 189, 188, 10, 190, 200, 188, 123, 244, 128, 60, 37, 209, 105, 63, 148, 185, 240, 62, 45, 48, 106, 62, 10, 224, 247, 61, 102, 239, 233, 189, 71, 243, 71, 190, 83, 187, 13, 190, 154, 202, 182, 189, 217, 101, 220, 188, 232, 183, 58, 61, 159, 35, 55, 61, 40, 182, 178, 60, 218, 144, 101, 61, 72, 225, 165, 189, 52, 110, 176, 190, 179, 162, 191, 190, 140, 250, 149, 190, 255, 117, 131, 190, 204, 219, 8, 190, 70, 5, 59, 61, 0, 208, 205, 61, 3, 175, 218, 61, 243, 238, 217, 61, 188, 19, 135, 61, 152, 236, 195, 188, 145, 190, 52, 60, 170, 43, 154, 186, 85, 76, 86, 63, 112, 180, 77, 63, 115, 14, 33, 63, 164, 186, 159, 62, 165, 74, 10, 189, 248, 5, 78, 190, 92, 61, 57, 190, 40, 77, 85, 190, 48, 196, 206, 189, 52, 66, 185, 189, 175, 196, 111, 189, 132, 27, 100, 188, 140, 32, 81, 64, 135, 100, 138, 63, 114, 64, 141, 189, 140, 88, 15, 61, 201, 154, 122, 190, 216, 245, 194, 190, 170, 11, 193, 190, 3, 202, 160, 190, 239, 72, 20, 62, 154, 232, 130, 62, 19, 0, 186, 188, 77, 41, 78, 190, 13, 132, 23, 189, 21, 215, 123, 63, 103, 18, 22, 191, 7, 251, 145, 191, 28, 156, 51, 191, 231, 68, 199, 190, 208, 231, 28, 188, 248, 171, 191, 61, 235, 104, 161, 61, 164, 102, 200, 62, 134, 14, 147, 62, 27, 233, 222, 61, 118, 8, 109, 189, 138, 82, 193, 188, 6, 138, 77, 64, 246, 67, 181, 62, 208, 235, 214, 190, 93, 254, 66, 189, 187, 135, 28, 190, 43, 232, 32, 61, 132, 12, 120, 188, 212, 29, 55, 189, 198, 73, 173, 61, 186, 151, 25, 189, 236, 121, 200, 189, 118, 26, 25, 61, 217, 125, 7, 62, 152, 216, 184, 63, 241, 245, 161, 190, 153, 44, 4, 191, 200, 124, 212, 59, 207, 146, 112, 189, 119, 76, 246, 61, 22, 101, 129, 61, 106, 66, 31, 186, 159, 186, 130, 61, 36, 188, 123, 189, 22, 78, 185, 189, 62, 126, 176, 61, 228, 38, 107, 60, 148, 144, 113, 191, 100, 42, 224, 61, 123, 68, 182, 62, 204, 136, 198, 61, 90, 191, 38, 62, 222, 163, 37, 190, 247, 112, 28, 60, 144, 64, 170, 60, 183, 71, 21, 190, 175, 201, 203, 61, 134, 67, 155, 61, 19, 181, 249, 59, 18, 205, 142, 189, 253, 107, 213, 63, 16, 158, 111, 63, 124, 8, 151, 62, 162, 10, 219, 62, 175, 229, 62, 62, 88, 76, 160, 190, 110, 247, 186, 190, 102, 180, 78, 190, 229, 159, 76, 57].concat([167, 54, 118, 62, 35, 74, 128, 188, 26, 45, 20, 190, 164, 141, 226, 61, 247, 57, 104, 64, 9, 172, 174, 62, 99, 91, 111, 191, 40, 1, 134, 189, 132, 233, 136, 190, 10, 7, 74, 189, 90, 220, 49, 190, 149, 235, 100, 190, 114, 43, 152, 62, 66, 121, 26, 62, 86, 220, 212, 189, 83, 93, 105, 189, 227, 19, 17, 61, 21, 95, 21, 62, 210, 182, 13, 191, 187, 239, 41, 191, 57, 47, 164, 190, 211, 90, 164, 190, 67, 94, 167, 62, 15, 178, 177, 62, 84, 94, 188, 61, 237, 148, 219, 61, 226, 229, 52, 190, 97, 91, 196, 187, 130, 184, 29, 62, 233, 147, 150, 189, 75, 247, 80, 64, 23, 194, 140, 63, 39, 138, 45, 190, 93, 16, 175, 190, 138, 206, 184, 190, 142, 186, 175, 61, 13, 132, 201, 61, 88, 232, 193, 190, 145, 14, 148, 61, 216, 50, 137, 188, 238, 241, 128, 60, 121, 199, 96, 189, 9, 3, 143, 190, 27, 2, 158, 189, 25, 234, 153, 61, 122, 117, 68, 61, 172, 16, 7, 190, 254, 14, 21, 61, 133, 248, 134, 61, 77, 246, 255, 61, 149, 22, 176, 61, 131, 183, 225, 189, 83, 95, 187, 189, 158, 205, 15, 61, 41, 97, 174, 61, 44, 158, 245, 188, 114, 100, 20, 191, 81, 101, 80, 189, 234, 191, 56, 62, 114, 40, 70, 62, 248, 92, 195, 61, 1, 208, 203, 189, 22, 99, 239, 188, 72, 217, 190, 61, 38, 12, 92, 188, 159, 193, 78, 61, 233, 129, 1, 189, 154, 218, 158, 189, 53, 119, 118, 61, 14, 87, 65, 64, 39, 112, 131, 63, 243, 252, 125, 190, 218, 156, 44, 62, 48, 199, 223, 189, 10, 89, 35, 190, 179, 105, 131, 190, 145, 119, 179, 190, 207, 32, 42, 62, 206, 55, 133, 62, 151, 254, 142, 189, 142, 156, 61, 190, 108, 156, 130, 189, 118, 119, 21, 64, 250, 62, 46, 62, 6, 215, 67, 191, 206, 57, 245, 190, 44, 195, 225, 190, 147, 31, 40, 62, 71, 34, 149, 62, 236, 238, 129, 189, 109, 98, 250, 61, 119, 118, 56, 189, 188, 178, 161, 61, 157, 19, 223, 60, 251, 172, 100, 190, 223, 214, 192, 191, 154, 137, 152, 190, 173, 114, 185, 62, 105, 39, 17, 61, 223, 60, 131, 62, 36, 140, 112, 62, 175, 162, 130, 62, 195, 3, 1, 62, 170, 39, 170, 190, 159, 200, 157, 190, 162, 175, 5, 61, 103, 103, 22, 62, 211, 137, 90, 188, 46, 253, 161, 64, 166, 34, 221, 62, 93, 1, 98, 191, 172, 135, 24, 62, 201, 56, 26, 190, 6, 167, 128, 61, 253, 231, 35, 190, 204, 209, 212, 189, 215, 13, 103, 62, 144, 54, 242, 61, 185, 208, 112, 190, 155, 63, 11, 62, 114, 93, 235, 187, 136, 88, 69, 190, 244, 177, 185, 61, 33, 142, 62, 60, 218, 14, 144, 189, 50, 3, 155, 61, 138, 60, 238, 60, 153, 55, 28, 61, 99, 87, 233, 188, 103, 120, 23, 189, 239, 11, 142, 60, 211, 70, 161, 60, 93, 104, 62, 60, 238, 124, 135, 189, 61, 28, 78, 190, 182, 122, 169, 61, 249, 171, 94, 61, 154, 241, 10, 189, 215, 193, 196, 188, 190, 163, 68, 60, 136, 172, 177, 60, 235, 201, 163, 187, 218, 62, 149, 188, 180, 250, 134, 188, 154, 38, 24, 61, 62, 20, 188, 188, 145, 40, 210, 60, 169, 2, 30, 64, 53, 237, 124, 63, 125, 184, 155, 189, 56, 171, 76, 190, 179, 76, 81, 190, 45, 43, 207, 61, 53, 185, 115, 62, 217, 104, 155, 189, 152, 248, 171, 189, 55, 152, 38, 188, 52, 21, 40, 188, 143, 215, 87, 188, 20, 224, 4, 190, 220, 221, 93, 191, 177, 107, 225, 189, 19, 117, 119, 62, 158, 233, 37, 61, 137, 246, 22, 62, 58, 121, 18, 61, 158, 230, 40, 59, 2, 175, 23, 62, 84, 150, 117, 188, 120, 158, 199, 187, 210, 222, 101, 188, 235, 12, 151, 189, 188, 14, 156, 60, 32, 144, 27, 188, 243, 189, 224, 189, 57, 19, 37, 189, 35, 149, 41, 61, 48, 40, 93, 61, 223, 205, 113, 61, 220, 232, 53, 188, 235, 49, 14, 189, 108, 238, 155, 60, 219, 45, 148, 60, 92, 148, 17, 188, 62, 164, 219, 188, 176, 4, 136, 188, 96, 156, 119, 63, 157, 91, 175, 62, 123, 169, 11, 189, 207, 255, 32, 62, 22, 51, 135, 62, 254, 220, 77, 61, 194, 206, 195, 61, 113, 214, 31, 62, 107, 135, 241, 188, 57, 39, 162, 186, 149, 198, 145, 189, 241, 32, 4, 190, 160, 64, 104, 189, 30, 185, 31, 191, 122, 70, 110, 190, 210, 205, 54, 61, 138, 16, 227, 61, 202, 113, 233, 61, 77, 139, 55, 61, 242, 153, 28, 189, 68, 47, 158, 188, 127, 99, 42, 187, 127, 141, 191, 59, 47, 231, 143, 188, 45, 228, 149, 59, 74, 255, 190, 60, 25, 143, 131, 61, 85, 8, 102, 189, 196, 92, 16, 189, 91, 2, 102, 189, 27, 9, 125, 188, 184, 46, 166, 59, 187, 141, 193, 59, 231, 247, 4, 189, 99, 19, 15, 188, 93, 9, 20, 188, 247, 93, 174, 60, 1, 77, 220, 60, 123, 195, 46, 60, 39, 46, 142, 64, 184, 46, 113, 63, 211, 43, 78, 191, 125, 248, 74, 61, 95, 220, 105, 190, 90, 66, 147, 188, 199, 112, 249, 61, 99, 23, 164, 190, 250, 244, 109, 188, 15, 195, 210, 61, 44, 83, 34, 189, 8, 109, 149, 60, 44, 84, 191, 189, 193, 217, 140, 190, 49, 137, 197, 61, 240, 193, 42, 62, 132, 155, 243, 189, 72, 91, 5, 190, 137, 49, 4, 60, 225, 110, 38, 62, 115, 157, 2, 61, 191, 98, 2, 190, 128, 175, 125, 189, 113, 226, 168, 60, 245, 28, 174, 61, 46, 241, 188, 60, 249, 127, 18, 191, 252, 247, 215, 59, 20, 108, 132, 62, 34, 133, 5, 61, 97, 130, 176, 61, 228, 76, 208, 188, 137, 178, 15, 190, 36, 138, 128, 61, 50, 130, 70, 61, 121, 67, 51, 60, 137, 31, 3, 189, 174, 212, 3, 189, 212, 1, 239, 60, 146, 180, 157, 191, 0, 64, 19, 190, 86, 21, 133, 62, 160, 4, 37, 61, 148, 38, 57, 62, 251, 180, 248, 61, 109, 75, 32, 61, 134, 177, 149, 61, 79, 183, 41, 56, 27, 192, 34, 186, 177, 65, 49, 189, 244, 141, 189, 60, 31, 38, 37, 61, 189, 98, 217, 190, 198, 211, 90, 190, 136, 139, 144, 189, 214, 213, 34, 189, 222, 127, 96, 61, 155, 27, 124, 61, 243, 106, 0, 61, 35, 148, 235, 60, 20, 221, 99, 60, 63, 224, 103, 60, 166, 5, 51, 61, 190, 14, 136, 60, 162, 93, 81, 60, 67, 105, 165, 61, 134, 44, 99, 60, 63, 122, 95, 189, 26, 26, 129, 189, 111, 71, 160, 189, 76, 203, 112, 189, 16, 2, 16, 188, 180, 138, 13, 60, 206, 130, 236, 60, 92, 55, 57, 61, 64, 104, 5, 61, 88, 31, 195, 59, 181, 66, 144, 187, 111, 147, 84, 191, 198, 4, 188, 190, 37, 99, 182, 189, 64, 237, 145, 189, 243, 229, 51, 61, 127, 157, 98, 61, 102, 16, 70, 60, 203, 53, 77, 61, 38, 210, 164, 60, 230, 181, 166, 60, 172, 233, 76, 61, 10, 211, 8, 61, 102, 19, 49, 61, 234, 68, 171, 189, 221, 124, 52, 60, 212, 12, 12, 61, 158, 34, 20, 61, 73, 75, 252, 60, 255, 115, 156, 60, 184, 201, 182, 59, 67, 206, 0, 186, 27, 65, 44, 188, 215, 234, 33, 188, 89, 229, 142, 188, 22, 42, 199, 188, 177, 96, 191, 188, 175, 251, 132, 61, 169, 91, 83, 61, 193, 82, 68, 61, 48, 12, 32, 61, 236, 29, 204, 60, 248, 240, 237, 59, 151, 18, 178, 57, 31, 136, 251, 187, 96, 110, 5, 188, 160, 70, 202, 188, 99, 195, 41, 189, 166, 239, 59, 189, 182, 68, 50, 189, 140, 164, 39, 191, 180, 10, 165, 190, 252, 171, 84, 189, 149, 154, 17, 189, 27, 185, 116, 61, 65, 237, 58, 61, 4, 187, 138, 59, 117, 22, 251, 60, 158, 107, 215, 187, 87, 253, 172, 188, 102, 75, 20, 60, 27, 207, 102, 188, 15, 116, 46, 186, 107, 35, 15, 190, 25, 104, 51, 189, 109, 99, 18, 189, 165, 244, 3, 189, 25, 120, 231, 188, 108, 95, 182, 188, 14, 206, 126, 188, 196, 217, 162, 187, 96, 168, 211, 58, 76, 5, 119, 59, 246, 230, 175, 60, 87, 117, 246, 60, 56, 12, 189, 60, 174, 214, 31, 189, 205, 94, 6, 189, 185, 211, 18, 189, 5, 200, 222, 188, 242, 103, 106, 188, 31, 0, 174, 59, 76, 118, 7, 60, 245, 193, 32, 60, 153, 252, 39, 60, 214, 131, 210, 60, 196, 110, 31, 61, 173, 26, 49, 61, 218, 229, 19, 61, 124, 171, 131, 191, 55, 115, 86, 190, 102, 189, 218, 61, 191, 65, 140, 61, 223, 127, 32, 62, 11, 135, 241, 61, 214, 45, 201, 60, 23, 103, 165, 60, 51, 236, 203, 187, 249, 115, 26, 188, 168, 106, 55, 60, 37, 71, 146, 60, 146, 74, 100, 188, 136, 63, 167, 190, 158, 85, 55, 190, 192, 29, 245, 189, 77, 133, 178, 189, 80, 125, 13, 189, 175, 220, 222, 187, 215, 51, 100, 60, 16, 14, 208, 60, 170, 236, 149, 60, 142, 102, 249, 60, 36, 181, 41, 61, 191, 194, 210, 60, 75, 244, 147, 60, 119, 132, 21, 62, 14, 25, 200, 61, 36, 250, 57, 61, 38, 214, 235, 60, 150, 115, 120, 188, 77, 14, 61, 189, 199, 91, 53, 189, 90, 91, 244, 188, 40, 188, 209, 188, 44, 132, 18, 189, 246, 41, 7, 189, 69, 192, 62, 188, 252, 93, 22, 60, 108, 97, 212, 191, 102, 20, 245, 190, 239, 78, 220, 189, 164, 244, 174, 189, 61, 0, 167, 61, 54, 34, 127, 61, 176, 207, 90, 60, 243, 138, 141, 61, 2, 51, 26, 61, 251, 218, 34, 61, 176, 196, 135, 61, 137, 246, 132, 61, 247, 53, 144, 61, 68, 230, 14, 189, 169, 120, 17, 61, 143, 73, 76, 61, 84, 239, 33, 61, 133, 41, 62, 61, 178, 134, 5, 61, 68, 11, 147, 60, 83, 247, 202, 187, 246, 126, 87, 188, 32, 76, 66, 188, 22, 80, 192, 188, 112, 180, 175, 188, 117, 31, 151, 188, 62, 66, 35, 62, 4, 43, 20, 62, 81, 55, 22, 62, 96, 57, 12, 62, 204, 171, 202, 61, 205, 79, 133, 61, 183, 247, 156, 60, 123, 242, 20, 189, 110, 110, 90, 189, 163, 41, 122, 189, 161, 10, 169, 189, 135, 5, 209, 189, 231, 198, 179, 189, 125, 50, 203, 191, 207, 155, 189, 190, 18, 148, 127, 188, 115, 141, 56, 188, 207, 84, 237, 61, 252, 155, 166, 61, 184, 213, 15, 60, 24, 7, 241, 60, 37, 236, 176, 187, 167, 141, 130, 188, 13, 27, 169, 60, 183, 153, 131, 58, 222, 82, 163, 60, 188, 218, 242, 188, 180, 225, 21, 61, 145, 114, 9, 61, 193, 247, 53, 61, 213, 185, 68, 61, 125, 205, 64, 61, 11, 103, 227, 60, 197, 25, 136, 59, 141, 32, 228, 187, 83, 113, 146, 188, 177, 11, 1, 189, 198, 254, 40, 189, 189, 183, 7, 189, 68, 68, 218, 188, 65, 3, 57, 189, 253, 230, 133, 189, 86, 211, 91, 189, 219, 56, 56, 189, 163, 27, 184, 188, 231, 75, 213, 59, 179, 169, 44, 61, 189, 166, 133, 61, 145, 43, 117, 61, 234, 128, 67, 61, 240, 247, 223, 60, 151, 192, 73, 60, 156, 172, 200, 191, 51, 25, 183, 190, 49, 243, 74, 189, 163, 217, 119, 189, 137, 111, 146, 61, 72, 154, 71, 61, 138, 61, 224, 59, 178, 82, 44, 61, 197, 7, 106, 186, 176, 17, 68, 188, 25, 99, 14, 61, 232, 140, 16, 188, 9, 235, 164, 59, 107, 104, 225, 189, 128, 154, 225, 188, 82, 34, 228, 188, 105, 16, 12, 189, 69, 212, 52, 189, 111, 186, 47, 189, 128, 38, 209, 188, 198, 120, 4, 187, 99, 54, 34, 60, 159, 77, 151, 60, 253, 99, 5, 61, 221, 231, 32, 61, 109, 112, 5, 61, 197, 60, 233, 188, 112, 24, 218, 188, 156, 74, 232, 187, 0, 25, 231, 187, 249, 29, 181, 58, 43, 77, 115, 186, 180, 154, 168, 187, 108, 16, 65, 188, 18, 124, 101, 188, 137, 230, 160, 187, 15, 99, 33, 60, 37, 8, 0, 61, 196, 66, 214, 60, 6, 105, 212, 191, 202, 230, 26, 191, 14, 211, 238, 189, 203, 165, 24, 189, 253, 168, 58, 62, 13, 122, 7, 62, 83, 81, 255, 60, 247, 172, 166, 61, 13, 252, 111, 61, 23, 245, 116, 61, 99, 128, 247, 60, 68, 149, 80, 61, 200, 206, 149, 61, 20, 76, 5, 190, 36, 79, 62, 189, 180, 224, 38, 189, 102, 186, 230, 188, 4, 96, 189, 188, 232, 76, 154, 188, 174, 116, 206, 187, 19, 199, 230, 59, 76, 243, 54, 60, 10, 171, 25, 60, 148, 177, 147, 60, 41, 210, 226, 60, 41, 20, 205, 60, 66, 222, 226, 60, 26, 49, 239, 60, 201, 98, 38, 60, 105, 74, 138, 188, 237, 235, 145, 188, 208, 119, 148, 188, 213, 91, 38, 188, 80, 251, 169, 187, 4, 134, 158, 188, 131, 77, 147, 188, 164, 70, 86, 188, 237, 50, 185, 59, 93, 151, 145, 60, 236, 199, 198, 191, 127, 78, 127, 61, 193, 120, 159, 62, 113, 188, 130, 62, 28, 129, 164, 62, 198, 142, 56, 62, 133, 120, 177, 61, 216, 24, 104, 61, 117, 173, 128, 188, 195, 215, 23, 189, 51, 146, 127, 184, 239, 51, 52, 189, 149, 72, 66, 189, 100, 75, 128, 63, 64, 133, 98, 63, 44, 132, 53, 63, 203, 64, 248, 62, 22, 28, 119, 62, 117, 146, 59, 61, 74, 6, 252, 187, 224, 138, 160, 189, 179, 142, 232, 189, 181, 1, 213, 189, 36, 170, 182, 189, 192, 57, 171, 189, 182, 204, 53, 189, 191, 220, 4, 63, 161, 251, 132, 62, 59, 250, 217, 61, 126, 59, 200, 188, 189, 196, 252, 189, 103, 22, 249, 189, 47, 204, 0, 190, 153, 43, 237, 189, 152, 253, 159, 189, 147, 21, 248, 188, 246, 161, 135, 60, 231, 135, 125, 61, 135, 72, 95, 61, 45, 38, 238, 191, 16, 117, 209, 190, 226, 179, 141, 189, 82, 71, 173, 188, 245, 189, 221, 61, 9, 143, 162, 61, 155, 102, 103, 60, 34, 130, 64, 61, 127, 232, 149, 60, 82, 42, 17, 61, 109, 226, 102, 61, 222, 25, 26, 61, 113, 150, 220, 60, 223, 239, 224, 62, 121, 77, 213, 62, 204, 122, 197, 62, 171, 225, 150, 62, 87, 206, 62, 62, 20, 76, 186, 61, 182, 143, 29, 61, 237, 77, 45, 188, 74, 37, 174, 188, 91, 200, 45, 189, 8, 23, 57, 189, 151, 239, 124, 189, 21, 107, 116, 189, 116, 68, 152, 63, 45, 137, 112, 63, 48, 65, 43, 63, 102, 190, 215, 62, 138, 250, 39, 62, 195, 191, 7, 189, 77, 72, 215, 189, 65, 155, 6, 190, 237, 114, 6, 190, 202, 164, 0, 190, 159, 205, 233, 189, 179, 177, 194, 189, 72, 254, 131, 189, 57, 246, 197, 191, 72, 235, 244, 190, 9, 227, 145, 189, 113, 14, 169, 188, 234, 147, 3, 62, 136, 55, 1, 62, 202, 149, 103, 61, 246, 26, 107, 61, 51, 245, 135, 61, 23, 57, 81, 60, 125, 153, 163, 188, 65, 204, 99, 61, 87, 101, 100, 61, 236, 84, 71, 63, 206, 143, 18, 63, 95, 1, 213, 62, 140, 66, 51, 62, 30, 123, 176, 60, 239, 124, 168, 189, 136, 155, 246, 189, 113, 224, 6, 190, 52, 123, 223, 189, 140, 163, 40, 189, 109, 136, 252, 188, 230, 173, 41, 60, 191, 212, 146, 188, 149, 116, 207, 63, 201, 191, 103, 63, 72, 154, 233, 62, 198, 13, 222, 61, 152, 228, 71, 190, 90, 164, 159, 190, 146, 199, 112, 190, 155, 222, 75, 190, 254, 49, 22, 190, 183, 121, 252, 188, 118, 124, 62, 61, 98, 176, 64, 188, 194, 12, 128, 189, 70, 169, 141, 191, 164, 34, 194, 62, 110, 138, 19, 63, 31, 244, 219, 62, 17, 2, 191, 62, 11, 26, 64, 62, 203, 227, 65, 61, 88, 17, 75, 185, 121, 139, 167, 189, 81, 152, 153, 189, 153, 85, 2, 189, 209, 192, 149, 189, 29, 148, 69, 189, 229, 203, 29, 63, 19, 31, 203, 62, 138, 182, 127, 62, 131, 56, 245, 61, 82, 131, 4, 60, 74, 157, 110, 189, 29, 77, 130, 189, 106, 110, 51, 189, 193, 203, 97, 189, 4, 95, 129, 58, 101, 24, 74, 60, 57, 115, 26, 59, 123, 187, 30, 60, 9, 167, 157, 60, 206, 163, 78, 190, 226, 90, 163, 190, 178, 212, 150, 190, 56, 175, 89, 190, 54, 47, 24, 190, 160, 44, 58, 189, 139, 207, 76, 188, 251, 139, 16, 61, 5, 166, 218, 61, 210, 9, 4, 62, 47, 220, 252, 61, 212, 243, 135, 61, 81, 61, 179, 191, 201, 93, 208, 190, 58, 143, 5, 190, 138, 73, 104, 189, 72, 230, 184, 61, 216, 215, 216, 61, 136, 204, 35, 61, 141, 244, 169, 61, 108, 255, 232, 60, 29, 174, 136, 60, 40, 149, 98, 60, 35, 129, 202, 60, 126, 213, 68, 61, 140, 139, 218, 187, 41, 193, 117, 61, 127, 23, 81, 61, 4, 200, 84, 61, 223, 70, 54, 61, 83, 252, 224, 60, 120, 242, 153, 59, 11, 170, 184, 186, 183, 58, 252, 187, 49, 155, 69, 188, 106, 74, 181, 188, 140, 117, 207, 188, 47, 244, 8, 189, 63, 4, 68, 60, 13, 211, 4, 61, 98, 126, 252, 60, 183, 120, 115, 188, 234, 96, 1, 189, 85, 115, 25, 189, 235, 81, 190, 188, 148, 6, 221, 188, 254, 210, 212, 188, 177, 83, 14, 188, 220, 246, 77, 60, 216, 125, 161, 60, 146, 70, 10, 61, 254, 129, 133, 191, 117, 92, 181, 190, 63, 30, 115, 188, 4, 23, 132, 187, 251, 48, 229, 61, 100, 36, 220, 61, 229, 104, 133, 60, 11, 230, 9, 61, 220, 59, 120, 58, 44, 120, 231, 188, 126, 206, 66, 185, 28, 5, 249, 59, 75, 48, 184, 60, 60, 186, 52, 190, 19, 88, 136, 189, 34, 38, 69, 189, 92, 172, 154, 188, 19, 50, 123, 186, 19, 52, 70, 60, 159, 36, 236, 60, 224, 74, 222, 60, 201, 8, 199, 60, 144, 45, 160, 60, 46, 202, 124, 60, 13, 163, 27, 60, 108, 131, 154, 59, 92, 167, 232, 60, 69, 22, 40, 60, 102, 101, 119, 188, 159, 140, 53, 59, 238, 36, 27, 58, 51, 59, 224, 187, 234, 33, 135, 60, 181, 167, 31, 61, 50, 165, 221, 60, 221, 149, 4, 60, 60, 42, 116, 187, 57, 33, 155, 188, 172, 194, 142, 188, 38, 199, 115, 191, 251, 10, 133, 190, 86, 64, 107, 190, 201, 126, 34, 190, 237, 14, 83, 189, 23, 254, 54, 59, 231, 122, 223, 60, 166, 78, 91, 61, 112, 102, 36, 61, 143, 10, 30, 61, 149, 248, 135, 61, 248, 230, 213, 60, 55, 57, 13, 61, 58, 208, 183, 189, 74, 44, 105, 188, 45, 220, 72, 188, 112, 174, 44, 60, 250, 120, 224, 59, 198, 111, 155, 60, 254, 122, 77, 59, 237, 113, 85, 60, 237, 136, 71, 185, 96, 164, 52, 188, 248, 16, 143, 188, 65, 15, 36, 188, 157, 248, 32, 186, 66, 132, 43, 60, 38, 255, 102, 186, 21, 31, 209, 60, 171, 15, 15, 61, 141, 8, 31, 61, 233, 59, 250, 60, 18, 205, 89, 60, 121, 206, 255, 59, 104, 23, 50, 58, 69, 86, 211, 188, 247, 87, 35, 189, 19, 190, 215, 188, 55, 172, 163, 188, 24, 123, 84, 191, 181, 25, 169, 190, 189, 183, 93, 189, 15, 82, 94, 189, 91, 63, 131, 61, 28, 216, 100, 61, 70, 190, 13, 60, 137, 208, 42, 61, 57, 94, 68, 60, 248, 253, 104, 188, 62, 229, 74, 60, 165, 191, 164, 188, 241, 128, 213, 187, 125, 33, 52, 190, 123, 160, 93, 189, 245, 196, 225, 188, 82, 114, 60, 189, 50, 51, 87, 189, 110, 153, 154, 189, 215, 247, 127, 189, 44, 67, 57, 189, 244, 38, 183, 188, 223, 25, 95, 59, 128, 158, 249, 60, 232, 108, 66, 61, 221, 201, 120, 61, 128, 101, 161, 60, 69, 200, 147, 59, 13, 106, 183, 188, 135, 37, 197, 188, 210, 65, 43, 188, 24, 31, 138, 59, 129, 247, 173, 187, 105, 115, 129, 188, 241, 124, 69, 188, 116, 39, 166, 60, 246, 38, 5, 61, 39, 204, 141, 60, 106, 101, 57, 187, 52, 91, 44, 192, 101, 175, 48, 191, 105, 66, 65, 190, 247, 83, 92, 188, 204, 205, 93, 62, 210, 158, 17, 62, 192, 210, 241, 60, 94, 185, 230, 61, 36, 98, 59, 61, 193, 114, 20, 62, 190, 184, 96, 61, 182, 99, 208, 61, 147, 165, 60, 62, 239, 16, 132, 189, 196, 146, 82, 188, 208, 122, 140, 187, 139, 218, 197, 59, 0, 216, 124, 59, 71, 252, 242, 59, 26, 97, 12, 60, 8, 144, 245, 59, 121, 138, 245, 59, 104, 153, 211, 59, 165, 88, 175, 59, 253, 124, 12, 57, 1, 177, 107, 59, 192, 39, 32, 61, 20, 238, 221, 60, 210, 26, 172, 60, 72, 117, 69, 60, 250, 80, 123, 60, 220, 22, 121, 187, 206, 205, 231, 186, 83, 22, 176, 186, 130, 45, 62, 188, 229, 6, 219, 188, 57, 65, 242, 188, 111, 125, 239, 188, 233, 63, 125, 188, 129, 14, 232, 191, 127, 232, 186, 190, 84, 13, 9, 189, 210, 181, 24, 189, 75, 166, 209, 61, 40, 79, 143, 61, 37, 132, 35, 60, 215, 72, 222, 60, 88, 247, 140, 188, 170, 254, 24, 188, 130, 23, 12, 61, 31, 92, 220, 58, 69, 51, 144, 60, 231, 58, 66, 189, 243, 22, 173, 186, 231, 232, 20, 187, 251, 40, 113, 187, 248, 5, 8, 187, 12, 44, 145, 60, 229, 64, 218, 60, 80, 250, 220, 60, 30, 201, 153, 59, 115, 97, 14, 60, 62, 55, 153, 59, 157, 23, 27, 59, 161, 43, 115, 59, 214, 244, 223, 188, 24, 140, 52, 189, 13, 118, 66, 189, 189, 254, 87, 189, 39, 99, 21, 189, 83, 97, 124, 188, 254, 204, 181, 60, 87, 68, 135, 61, 4, 199, 140, 61, 167, 104, 150, 61, 163, 185, 66, 61, 76, 156, 0, 61, 122, 18, 9, 187, 190, 31, 229, 191, 91, 159, 183, 190, 13, 11, 142, 189, 214, 208, 158, 189, 93, 205, 78, 61, 57, 28, 255, 60, 178, 253, 143, 60, 166, 208, 134, 61, 204, 91, 249, 60, 94, 240, 146, 60, 123, 178, 128, 61, 16, 65, 223, 60, 17, 101, 6, 60, 227, 12, 155, 189, 103, 240, 237, 187, 254, 164, 35, 187, 151, 166, 233, 187, 1, 149, 186, 187, 178, 31, 234, 188, 51, 239, 205, 188, 233, 83, 183, 188, 179, 143, 39, 188, 181, 125, 11, 58, 164, 111, 53, 60, 210, 102, 243, 59, 24, 61, 143, 59, 58, 132, 159, 61, 194, 113, 214, 60, 149, 190, 123, 61, 53, 100, 64, 61, 159, 32, 105, 61, 196, 183, 155, 60, 32, 170, 178, 188, 243, 165, 153, 189, 171, 143, 159, 189, 103, 250, 134, 189, 11, 225, 126, 189, 246, 219, 24, 189, 242, 204, 210, 58, 178, 220, 39, 192, 155, 96, 251, 190, 191, 89, 137, 189, 228, 234, 94, 190, 179, 32, 59, 62, 243, 89, 206, 61, 225, 190, 17, 61, 18, 149, 27, 62, 123, 243, 3, 60, 238, 135, 243, 61, 111, 156, 41, 59, 0, 9, 235, 60, 19, 59, 242, 61, 150, 223, 216, 57, 123, 67, 11, 61, 84, 7, 6, 60, 108, 152, 82, 188, 63, 199, 67, 60, 15, 26, 71, 188, 117, 15, 214, 188, 21, 128, 27, 188, 44, 90, 78, 188, 219, 87, 212, 188, 5, 203, 105, 188, 134, 166, 254, 187, 188, 51, 232, 187, 94, 44, 141, 188, 40, 230, 12, 189, 10, 155, 189, 188, 134, 24, 190, 188, 219, 14, 248, 188, 144, 108, 10, 187, 225, 75, 6, 59, 18, 253, 252, 187, 87, 212, 126, 60, 88, 31, 167, 60, 39, 76, 66, 61, 30, 155, 77, 61, 140, 9, 182, 60, 246, 174, 1, 192, 137, 34, 11, 191, 151, 185, 68, 189, 199, 245, 10, 190, 21, 167, 46, 62, 18, 204, 75, 61, 187, 134, 148, 61, 103, 170, 127, 61, 160, 33, 74, 61, 20, 138, 167, 59, 98, 158, 179, 59, 28, 230, 46, 189, 204, 26, 214, 61, 251, 121, 22, 63, 104, 129, 133, 190, 197, 25, 166, 62, 61, 200, 116, 189, 230, 63, 164, 61, 183, 142, 140, 59, 101, 47, 29, 60, 116, 249, 51, 189, 103, 122, 151, 188, 186, 87, 235, 59, 200, 78, 137, 188, 50, 24, 246, 187, 15, 179, 34, 61, 59, 177, 69, 63, 252, 118, 91, 62, 144, 235, 108, 62, 56, 169, 131, 62, 49, 34, 155, 189, 141, 177, 151, 61, 241, 102, 230, 189, 64, 218, 230, 189, 40, 132, 242, 188, 236, 237, 15, 60, 36, 90, 142, 61, 81, 57, 16, 61, 9, 254, 8, 189, 206, 152, 206, 191, 66, 167, 201, 190, 251, 192, 224, 188, 125, 225, 211, 188, 223, 239, 176, 61, 119, 176, 136, 61, 158, 230, 147, 60, 241, 246, 153, 61, 87, 115, 15, 60, 93, 119, 206, 60, 9, 238, 59, 61, 61, 134, 70, 61, 142, 152, 31, 61, 157, 228, 80, 63, 228, 247, 198, 190, 245, 242, 246, 62, 19, 163, 128, 190, 20, 116, 224, 61, 149, 40, 156, 189, 100, 89, 15, 189, 163, 166, 0, 61, 36, 76, 5, 190, 219, 99, 214, 61, 162, 210, 39, 190, 199, 155, 94, 61, 113, 179, 133, 189, 112, 110, 92, 63, 160, 201, 212, 190, 136, 185, 225, 62, 230, 250, 49, 190, 225, 35, 183, 61, 154, 99, 231, 60, 37, 28, 167, 189, 68, 131, 109, 61, 84, 200, 182, 189, 38, 115, 154, 61, 157, 23, 184, 189, 74, 208, 184, 60, 228, 119, 254, 188, 240, 79, 141, 191, 50, 214, 49, 191, 210, 107, 112, 62, 51, 190, 141, 190, 146, 214, 54, 62, 212, 206, 160, 61, 101, 245, 20, 189, 108, 198, 205, 61, 119, 191, 143, 189, 203, 114, 213, 61, 90, 62, 212, 189, 230, 223, 196, 61, 88, 187, 74, 188, 153, 163, 71, 63, 21, 73, 176, 190, 4, 129, 142, 62, 242, 204, 14, 190, 147, 137, 89, 60, 243, 122, 184, 60, 17, 233, 158, 189, 25, 203, 190, 61, 244, 214, 6, 190, 120, 71, 94, 61, 72, 254, 141, 189, 88, 137, 161, 59, 58, 220, 7, 60, 160, 167, 180, 59, 37, 157, 231, 62, 230, 66, 178, 189, 104, 27, 194, 62, 30, 52, 133, 189, 65, 181, 17, 61, 5, 13, 125, 60, 241, 233, 77, 189, 219, 10, 12, 61, 101, 64, 49, 190, 177, 32, 228, 61, 170, 192, 199, 189, 105, 156, 243, 59, 196, 232, 5, 192, 105, 212, 209, 190, 157, 131, 78, 190, 217, 184, 214, 189, 52, 61, 248, 61, 31, 101, 121, 61, 30, 123, 196, 60, 96, 17, 154, 61, 149, 207, 187, 59, 225, 79, 243, 60, 169, 238, 67, 186, 121, 17, 164, 60, 85, 181, 187, 61, 172, 40, 30, 63, 26, 28, 145, 190, 139, 108, 201, 62, 199, 241, 55, 190, 20, 92, 55, 62, 115, 214, 51, 190, 89, 125, 243, 61, 160, 123, 215, 189, 79, 78, 244, 59, 48, 237, 178, 189, 14, 235, 94, 189, 216, 48, 207, 189, 201, 162, 88, 188, 35, 74, 112, 63, 66, 251, 1, 191, 225, 129, 30, 63, 17, 221, 131, 190, 246, 130, 33, 62, 37, 29, 228, 189, 87, 43, 179, 60, 223, 72, 26, 190, 230, 17, 29, 189, 166, 238, 121, 60, 222, 252, 46, 188, 86, 200, 113, 61, 75, 80, 184, 188, 254, 190, 214, 190, 102, 116, 109, 190, 232, 254, 80, 190, 222, 66, 140, 190, 45, 163, 72, 188, 30, 197, 180, 61, 33, 176, 6, 62, 152, 173, 75, 62, 128, 43, 19, 62, 77, 106, 220, 61, 229, 88, 203, 187, 181, 180, 203, 189, 132, 141, 206, 187, 18, 20, 233, 190, 17, 138, 135, 190, 3, 188, 165, 59, 45, 194, 4, 62, 87, 195, 195, 61, 56, 177, 203, 60, 63, 148, 203, 188, 200, 211, 91, 189, 36, 199, 48, 189, 50, 101, 31, 188, 56, 230, 247, 60, 113, 7, 91, 61, 2, 244, 148, 61, 117, 198, 216, 61, 153, 206, 231, 61, 228, 23, 11, 61, 158, 184, 19, 60, 239, 55, 103, 58, 70, 141, 220, 59, 175, 121, 87, 189, 184, 33, 2, 189, 109, 168, 251, 188, 113, 151, 163, 188, 137, 34, 43, 188, 215, 129, 94, 60, 53, 86, 79, 58, 128, 222, 110, 191, 204, 143, 193, 190, 219, 218, 161, 189, 227, 56, 123, 189, 50, 65, 103, 61, 30, 132, 53, 61, 126, 186, 218, 187, 24, 114, 247, 60, 252, 56, 126, 60, 187, 56, 131, 186, 143, 244, 10, 61, 228, 55, 166, 60, 161, 84, 234, 60, 145, 101, 149, 189, 42, 3, 125, 60, 148, 115, 41, 61, 144, 49, 82, 61, 68, 84, 136, 61, 244, 195, 119, 61, 46, 32, 11, 61, 104, 159, 110, 186, 160, 45, 106, 188, 218, 253, 22, 189, 8, 70, 22, 189, 61, 95, 218, 188, 58, 184, 255, 188, 100, 49, 92, 61, 230, 181, 248, 60, 71, 247, 168, 59, 19, 142, 9, 188, 250, 4, 192, 188, 126, 20, 157, 187, 95, 120, 140, 60, 68, 40, 169, 60, 215, 196, 9, 60, 214, 108, 185, 59, 106, 219, 155, 59, 54, 69, 183, 187, 143, 124, 229, 186, 48, 201, 89, 191, 205, 76, 155, 190, 106, 105, 10, 189, 241, 215, 126, 189, 218, 156, 22, 61, 139, 252, 139, 60, 192, 136, 134, 187, 79, 133, 11, 61, 79, 247, 24, 188, 5, 246, 160, 188, 94, 47, 242, 60, 152, 15, 23, 188, 60, 139, 3, 60, 249, 91, 255, 189, 219, 11, 64, 189, 27, 128, 81, 189, 136, 135, 40, 189, 179, 39, 54, 189, 207, 253, 9, 189, 72, 100, 165, 188, 239, 33, 111, 59, 237, 27, 97, 60, 55, 95, 2, 61, 139, 248, 19, 61, 143, 62, 232, 60, 180, 44, 227, 60, 4, 168, 147, 188, 235, 38, 10, 188, 107, 102, 202, 59, 59, 202, 197, 59, 40, 62, 136, 60, 80, 46, 113, 58, 133, 2, 84, 188, 130, 230, 152, 188, 175, 70, 175, 187, 58, 128, 3, 187, 44, 58, 157, 187, 197, 25, 119, 59, 123, 47, 71, 59, 248, 157, 144, 63, 47, 242, 215, 62, 172, 202, 204, 190, 205, 252, 248, 190, 230, 57, 172, 189, 18, 188, 43, 62, 68, 116, 209, 61, 64, 242, 57, 62, 164, 142, 51, 62, 221, 42, 158, 61, 99, 250, 29, 189, 35, 215, 79, 190, 227, 98, 59, 190, 16, 113, 132, 191, 44, 137, 152, 190, 197, 240, 252, 61, 215, 16, 172, 189, 102, 2, 204, 188, 78, 193, 213, 187, 124, 137, 137, 61, 61, 191, 134, 61, 251, 166, 106, 60, 191, 234, 179, 61, 36, 166, 105, 189, 240, 252, 164, 60, 20, 26, 236, 61, 51, 77, 217, 61, 145, 92, 132, 189, 1, 45, 60, 189, 223, 43, 165, 61, 131, 65, 125, 188, 4, 24, 179, 188, 78, 83, 69, 187, 45, 24, 199, 187, 178, 20, 156, 59, 134, 104, 18, 189, 215, 190, 198, 60, 171, 44, 239, 60, 140, 13, 243, 59, 32, 143, 202, 191, 42, 0, 5, 191, 101, 252, 228, 189, 56, 111, 232, 189, 214, 247, 180, 61, 58, 232, 193, 61, 187, 198, 169, 61, 47, 189, 11, 62, 129, 35, 57, 61, 133, 45, 21, 61, 63, 176, 125, 188, 237, 73, 24, 61, 251, 93, 181, 61, 251, 247, 212, 189, 139, 5, 51, 189, 67, 100, 123, 188, 24, 167, 59, 60, 208, 162, 28, 59, 226, 142, 61, 60, 233, 94, 180, 60, 128, 77, 140, 60, 118, 33, 101, 60, 1, 234, 66, 60, 153, 35, 170, 60, 223, 66, 220, 60, 57, 127, 182, 59, 89, 227, 123, 61, 209, 244, 74, 61, 94, 14, 115, 61, 21, 143, 49, 61, 211, 28, 180, 60, 124, 231, 51, 187, 30, 248, 121, 188, 40, 239, 44, 189, 78, 51, 151, 188, 12, 211, 213, 187, 104, 243, 187, 60, 98, 215, 62, 60, 31, 134, 66, 188, 247, 203, 235, 191, 113, 63, 204, 190, 89, 212, 21, 187, 119, 254, 76, 189, 200, 50, 183, 61, 130, 171, 138, 61, 131, 7, 143, 187, 28, 60, 239, 60, 157, 159, 98, 188, 217, 17, 203, 59, 184, 39, 102, 61, 74, 34, 24, 61, 152, 41, 138, 60, 193, 59, 159, 188, 19, 71, 185, 60, 201, 122, 255, 59, 239, 188, 135, 60, 32, 49, 112, 60, 96, 246, 182, 60, 6, 136, 187, 60, 187, 160, 216, 59, 240, 162, 4, 187, 153, 66, 47, 188, 180, 209, 22, 188, 45, 103, 173, 187, 15, 6, 176, 187, 226, 203, 137, 61, 168, 21, 86, 61, 54, 181, 7, 61, 124, 240, 160, 60, 154, 184, 91, 60, 157, 187, 3, 61, 47, 73, 3, 61, 232, 69, 222, 60, 155, 12, 36, 60, 93, 242, 82, 189, 10, 239, 155, 189, 58, 71, 57, 189, 188, 174, 132, 188, 102, 44, 214, 191, 242, 185, 175, 190, 89, 108, 3, 189, 15, 109, 144, 189, 47, 37, 154, 61, 160, 89, 97, 61, 228, 73, 115, 187, 91, 197, 147, 60, 153, 228, 30, 187, 224, 60, 75, 188, 61, 33, 137, 60, 229, 60, 95, 188, 51, 109, 38, 59, 147, 81, 189, 189, 162, 23, 68, 188, 144, 219, 190, 187, 149, 104, 139, 187, 55, 102, 234, 187, 180, 114, 40, 188, 194, 33, 15, 188, 216, 161, 217, 59, 70, 136, 101, 60, 18, 92, 4, 60, 16, 35, 78, 187, 44, 234, 62, 188, 53, 198, 22, 188, 238, 83, 128, 189, 217, 218, 174, 189, 246, 44, 66, 189, 75, 40, 139, 188, 74, 243, 109, 188, 114, 63, 165, 188, 21, 217, 72, 188, 32, 37, 4, 60, 233, 79, 0, 61, 132, 49, 88, 61, 174, 92, 102, 61, 212, 190, 47, 61, 233, 96, 166, 60, 76, 40, 215, 191, 188, 1, 5, 191, 158, 106, 32, 189, 206, 140, 21, 189, 73, 70, 227, 61, 204, 216, 190, 61, 90, 196, 24, 61, 246, 9, 156, 61, 10, 77, 255, 60, 82, 71, 156, 60, 24, 182, 132, 60, 190, 209, 91, 61, 177, 215, 153, 61, 53, 122, 83, 189, 154, 128, 130, 60, 223, 187, 169, 186, 108, 213, 58, 188, 116, 81, 231, 186, 109, 40, 239, 188, 42, 0, 52, 189, 100, 57, 18, 189, 51, 117, 51, 188, 79, 10, 5, 188, 234, 44, 78, 188, 226, 64, 155, 58, 213, 167, 57, 60, 23, 125, 192, 59, 41, 141, 15, 60, 221, 45, 90, 189, 201, 24, 87, 189, 184, 47, 223, 188, 202, 220, 157, 188, 217, 73, 109, 188, 66, 48, 167, 187, 181, 197, 56, 188, 159, 183, 195, 59, 202, 165, 42, 59, 218, 191, 117, 188, 224, 226, 38, 188, 14, 204, 218, 191, 247, 128, 240, 190, 126, 117, 3, 190, 148, 106, 188, 189, 193, 150, 16, 62, 50, 19, 114, 61, 14, 133, 135, 60, 141, 7, 7, 61, 10, 131, 94, 61, 27, 152, 151, 60, 65, 61, 253, 185, 56, 109, 228, 186, 19, 216, 93, 61, 239, 24, 239, 61, 118, 9, 217, 61, 136, 10, 174, 60, 138, 227, 44, 61, 57, 230, 146, 60, 34, 87, 19, 60, 100, 18, 150, 60, 123, 196, 47, 60, 48, 21, 54, 60, 99, 170, 162, 60, 239, 53, 81, 60, 155, 205, 63, 60, 86, 77, 248, 188, 237, 23, 104, 63, 13, 162, 244, 62, 93, 59, 82, 62, 168, 218, 175, 61, 135, 62, 27, 189, 0, 151, 19, 61, 183, 172, 102, 187, 45, 14, 155, 188, 222, 128, 29, 61, 220, 40, 160, 61, 36, 29, 165, 188, 174, 51, 74, 189, 40, 130, 140, 189, 85, 153, 123, 192, 74, 140, 43, 190, 32, 239, 41, 62, 116, 217, 124, 61, 217, 10, 78, 62, 33, 112, 11, 62, 114, 26, 74, 61, 96, 223, 232, 188, 30, 86, 86, 61, 153, 144, 26, 190, 169, 234, 136, 60, 229, 91, 23, 60, 14, 248, 202, 189, 201, 101, 21, 62, 6, 66, 113, 59, 57, 248, 255, 188, 49, 113, 63, 60, 232, 86, 234, 184, 25, 160, 252, 59, 203, 146, 23, 189, 31, 171, 115, 188, 11, 103, 134, 60, 235, 230, 77, 61, 216, 188, 30, 185, 132, 107, 243, 184, 181, 57, 136, 60, 213, 20, 18, 62, 207, 96, 14, 189, 133, 17, 56, 189, 108, 222, 233, 188, 57, 177, 147, 188, 217, 179, 73, 188, 226, 130, 93, 189, 132, 71, 138, 188, 7, 86, 81, 60, 22, 209, 232, 60, 151, 106, 17, 188, 149, 84, 145, 188, 222, 107, 34, 60, 171, 31, 136, 192, 61, 14, 28, 191, 193, 24, 68, 63, 60, 73, 247, 189, 56, 97, 53, 62, 59, 67, 149, 188, 221, 224, 198, 186, 216, 225, 150, 62, 212, 244, 7, 190, 132, 219, 101, 60, 204, 39, 113, 61, 212, 20, 216, 61, 233, 37, 22, 62, 22, 203, 84, 61, 212, 82, 241, 59, 26, 96, 158, 188, 202, 29, 174, 188, 4, 46, 160, 59, 34, 204, 17, 60, 84, 134, 27, 59, 176, 117, 32, 187, 217, 134, 49, 59, 179, 123, 102, 60, 212, 177, 99, 187, 241, 133, 94, 188, 247, 185, 8, 59, 129, 108, 75, 61, 161, 82, 73, 60, 125, 174, 24, 189, 16, 86, 233, 188, 50, 168, 8, 60, 8, 164, 139, 60, 44, 196, 42, 188, 180, 130, 206, 187, 167, 137, 141, 60, 217, 17, 56, 59, 34, 47, 61, 188, 85, 170, 230, 58, 117, 220, 42, 187, 191, 147, 196, 191, 211, 111, 232, 190, 64, 156, 66, 190, 180, 189, 52, 61, 97, 115, 64, 61, 217, 63, 29, 62, 7, 100, 102, 189, 183, 251, 207, 189, 250, 67, 94, 62, 133, 183, 228, 187, 62, 84, 46, 189, 54, 221, 116, 188, 55, 128, 184, 189, 6, 94, 237, 62, 222, 252, 49, 190, 44, 8, 58, 190, 27, 99, 165, 61, 118, 82, 151, 189, 54, 167, 239, 61, 235, 246, 129, 189, 211, 250, 77, 190, 13, 156, 94, 62, 205, 5, 160, 59, 64, 143, 171, 189, 177, 144, 93, 61, 52, 46, 214, 188, 249, 3, 177, 59, 140, 185, 24, 189, 217, 26, 227, 188, 204, 204, 4, 189, 240, 4, 229, 188, 197, 221, 115, 187, 151, 38, 133, 61, 140, 55, 130, 188, 221, 199, 7, 189, 74, 18, 0, 61, 236, 12, 74, 187, 211, 28, 120, 61, 25, 237, 53, 61, 66, 60, 38, 191, 189, 99, 138, 191, 227, 159, 28, 63, 93, 167, 217, 190, 30, 80, 184, 62, 42, 39, 240, 189, 167, 37, 250, 61, 118, 22, 74, 189, 75, 94, 39, 60, 88, 40, 12, 61, 13, 200, 26, 189, 198, 133, 194, 60, 25, 251, 255, 60, 43, 64, 243, 63, 81, 71, 48, 190, 170, 55, 74, 63, 84, 50, 108, 62, 29, 87, 240, 60, 68, 238, 118, 61, 88, 246, 7, 190, 26, 175, 205, 189, 218, 84, 242, 189, 228, 142, 192, 60, 183, 114, 168, 188, 101, 69, 174, 59, 138, 63, 145, 60, 200, 16, 226, 62, 199, 134, 129, 63, 97, 39, 97, 190, 203, 215, 109, 63, 234, 255, 172, 190, 177, 119, 112, 62, 94, 230, 52, 190, 12, 168, 141, 189, 36, 236, 234, 189, 134, 18, 28, 189, 78, 186, 194, 188, 61, 30, 98, 188, 141, 192, 150, 58, 119, 147, 229, 191, 119, 103, 220, 190, 208, 28, 68, 184, 215, 187, 210, 189, 142, 27, 15, 62, 184, 131, 212, 61, 186, 98, 221, 188, 117, 183, 151, 61, 4, 34, 216, 59, 134, 144, 35, 61, 141, 139, 91, 61, 125, 98, 172, 188, 83, 201, 145, 61, 52, 50, 0, 64, 161, 26, 22, 63, 172, 190, 205, 62, 174, 142, 26, 63, 94, 0, 22, 62, 127, 28, 253, 188, 140, 154, 141, 189, 186, 57, 77, 190, 78, 3, 22, 189, 166, 250, 211, 189, 211, 104, 229, 189, 119, 179, 253, 188, 138, 214, 245, 189, 213, 74, 254, 63, 65, 249, 165, 62, 219, 15, 138, 62, 63, 247, 227, 62, 213, 10, 9, 189, 142, 173, 204, 189, 204, 121, 103, 189, 255, 109, 19, 190, 10, 71, 54, 189, 51, 254, 14, 189, 153, 126, 3, 190, 34, 74, 94, 61, 111, 176, 28, 189, 153, 11, 2, 191, 171, 217, 117, 191, 157, 10, 3, 63, 202, 107, 70, 190, 52, 248, 44, 62, 102, 166, 57, 62, 118, 138, 234, 189, 127, 155, 15, 62, 213, 35, 15, 190, 107, 238, 249, 61, 168, 57, 24, 189, 29, 197, 170, 187, 115, 228, 103, 61, 113, 58, 246, 63, 151, 35, 91, 63, 104, 91, 229, 62, 52, 184, 121, 63, 66, 250, 47, 189, 154, 14, 51, 61, 29, 108, 14, 190, 119, 40, 135, 190, 183, 96, 41, 190, 218, 144, 83, 190, 136, 87, 226, 189, 30, 28, 146, 189, 98, 197, 131, 189, 240, 112, 129, 63, 53, 156, 116, 63, 143, 184, 15, 190, 204, 92, 103, 63, 117, 194, 128, 189, 183, 42, 156, 190, 105, 153, 190, 60, 183, 176, 170, 190, 237, 203, 143, 60, 255, 108, 138, 190, 244, 45, 206, 189, 86, 107, 105, 61, 202, 245, 111, 189, 54, 7, 146, 191, 16, 251, 78, 190, 201, 49, 213, 190, 145, 220, 178, 190, 215, 250, 24, 189, 66, 39, 130, 62, 77, 159, 23, 62, 238, 123, 159, 59, 255, 36, 204, 188, 178, 69, 65, 189, 10, 112, 166, 61, 39, 121, 230, 61, 239, 113, 134, 61, 108, 122, 154, 62, 196, 65, 165, 189, 57, 218, 198, 61, 23, 231, 154, 189, 190, 117, 201, 58, 2, 160, 42, 60, 229, 26, 43, 189, 7, 223, 137, 188, 39, 16, 46, 189, 163, 226, 169, 60, 12, 153, 193, 188, 46, 90, 198, 187, 63, 191, 96, 189, 247, 230, 240, 61, 148, 55, 251, 189, 73, 232, 188, 61, 11, 50, 35, 189, 76, 22, 95, 61, 117, 60, 39, 188, 206, 45, 171, 186, 85, 184, 33, 61, 165, 181, 122, 188, 223, 50, 159, 61, 22, 197, 150, 188, 138, 115, 157, 188, 54, 39, 95, 60, 51, 161, 233, 63, 181, 117, 214, 191, 138, 23, 92, 189, 156, 207, 245, 61, 160, 40, 23, 189, 136, 214, 31, 62, 139, 93, 72, 190, 21, 60, 139, 61, 48, 65, 69, 61, 81, 176, 79, 59, 2, 10, 103, 189, 191, 135, 175, 61, 243, 161, 150, 60, 70, 238, 243, 62, 189, 53, 57, 62, 92, 145, 93, 62, 42, 3, 96, 62, 206, 121, 15, 190, 50, 207, 104, 61, 66, 27, 234, 60, 161, 226, 115, 189, 21, 9, 38, 189, 252, 145, 8, 189, 15, 216, 98, 188, 185, 106, 36, 189, 79, 38, 189, 59, 214, 35, 13, 191, 146, 72, 45, 63, 245, 137, 159, 61, 12, 207, 15, 62, 13, 105, 221, 61, 2, 189, 17, 190, 213, 177, 135, 61, 166, 62, 138, 189, 159, 238, 3, 61, 115, 139, 148, 189, 88, 39, 201, 59, 24, 254, 50, 60, 23, 81, 115, 189, 95, 67, 62, 63, 40, 40, 85, 62, 98, 190, 116, 63, 224, 204, 39, 63, 39, 200, 128, 62, 115, 202, 0, 62, 49, 82, 23, 190, 13, 51, 105, 190, 105, 247, 63, 190, 117, 249, 13, 190, 107, 1, 63, 190, 61, 67, 14, 189, 52, 75, 90, 187, 187, 167, 23, 64, 176, 193, 153, 63, 43, 254, 192, 62, 22, 85, 160, 63, 178, 119, 167, 189, 217, 171, 131, 190, 74, 135, 218, 189, 176, 226, 216, 190, 216, 220, 225, 189, 138, 65, 132, 190, 170, 201, 88, 190, 127, 76, 169, 61, 229, 122, 217, 189, 157, 233, 197, 61, 190, 92, 38, 191, 1, 207, 236, 190, 125, 192, 123, 190, 105, 49, 63, 190, 11, 10, 133, 190, 28, 248, 225, 60, 8, 94, 171, 61, 141, 18, 6, 61, 21, 6, 132, 61, 118, 214, 116, 61, 72, 191, 154, 61, 140, 195, 26, 61, 148, 52, 10, 64, 202, 158, 250, 61, 34, 203, 77, 63, 184, 60, 163, 63, 168, 161, 9, 188, 125, 120, 77, 190, 39, 26, 10, 190, 225, 65, 181, 190, 169, 82, 112, 190, 109, 26, 82, 190, 228, 225, 96, 190, 151, 214, 211, 61, 49, 231, 120, 189, 81, 34, 13, 64, 31, 229, 76, 62, 249, 188, 63, 190, 116, 187, 91, 63, 133, 212, 172, 190, 198, 118, 207, 190, 120, 33, 32, 189, 48, 89, 56, 190, 44, 43, 169, 189, 60, 219, 9, 190, 78, 203, 48, 188, 60, 146, 129, 61, 2, 169, 147, 189, 132, 14, 203, 191, 35, 2, 53, 191, 83, 1, 201, 190, 27, 63, 105, 191, 38, 95, 203, 61, 199, 151, 154, 61, 165, 136, 6, 62, 177, 230, 169, 62, 241, 179, 38, 62, 165, 84, 89, 62, 97, 84, 23, 62, 146, 63, 156, 189, 215, 47, 241, 59, 100, 215, 42, 64, 38, 205, 116, 63, 255, 247, 103, 190, 45, 139, 135, 61, 101, 84, 67, 190, 23, 21, 56, 190, 246, 35, 165, 189, 181, 84, 21, 190, 247, 250, 205, 188, 210, 12, 84, 62, 90, 212, 108, 189, 55, 105, 6, 190, 130, 248, 142, 189, 102, 232, 128, 64, 115, 255, 159, 62, 125, 148, 77, 191, 91, 222, 193, 189, 228, 11, 187, 190, 245, 156, 102, 61, 195, 30, 49, 61, 68, 148, 165, 59, 26, 140, 219, 61, 254, 135, 144, 61, 208, 111, 59, 190, 45, 45, 203, 189, 206, 208, 27, 189, 91, 149, 127, 191, 43, 11, 36, 191, 59, 107, 212, 189, 180, 106, 17, 189, 194, 144, 7, 61, 3, 181, 126, 62, 132, 23, 167, 61, 73, 0, 120, 61, 117, 34, 86, 60, 116, 2, 62, 190, 101, 166, 155, 60, 55, 47, 178, 61, 54, 12, 6, 59, 99, 60, 52, 64, 182, 14, 68, 62, 117, 225, 50, 63, 140, 138, 158, 63, 64, 241, 13, 191, 36, 148, 164, 190, 164, 183, 93, 188, 201, 226, 199, 190, 141, 38, 133, 190, 33, 58, 218, 61, 4, 179, 199, 60, 145, 5, 14, 60, 62, 51, 17, 61, 136, 201, 238, 190, 202, 253, 108, 62, 219, 83, 143, 188, 13, 140, 83, 190, 207, 19, 7, 62, 200, 154, 148, 61, 184, 190, 69, 60, 157, 19, 192, 60, 142, 117, 202, 61, 164, 229, 168, 58, 47, 233, 254, 187, 219, 178, 136, 188, 137, 199, 38, 60, 236, 143, 137, 190, 64, 20, 254, 60, 175, 161, 161, 61, 217, 106, 17, 190, 242, 84, 16, 62, 95, 211, 155, 61, 78, 85, 114, 189, 34, 76, 242, 60, 36, 43, 172, 60, 53, 105, 0, 189, 92, 191, 86, 188, 143, 200, 133, 60, 247, 247, 150, 188, 253, 174, 57, 64, 63, 144, 0, 63, 143, 51, 6, 63, 134, 24, 134, 63, 175, 249, 17, 62, 70, 78, 72, 190, 59, 240, 78, 190, 61, 31, 162, 190, 214, 126, 169, 189, 120, 50, 147, 190, 142, 100, 111, 190, 122, 47, 43, 61, 251, 0, 206, 189, 130, 187, 23, 63, 156, 99, 45, 61, 104, 18, 45, 190, 229, 182, 93, 61, 73, 134, 161, 189, 3, 227, 235, 189, 107, 250, 95, 188, 161, 2, 217, 60, 76, 8, 53, 61, 233, 201, 71, 189, 247, 118, 143, 60, 203, 188, 23, 61, 219, 245, 38, 189, 161, 246, 6, 191, 232, 185, 101, 60, 247, 225, 150, 61, 198, 175, 67, 190, 36, 156, 20, 189, 63, 225, 225, 61, 164, 55, 134, 61, 6, 252, 24, 61, 130, 149, 111, 188, 48, 224, 81, 61, 187, 51, 128, 61, 234, 204, 140, 189, 169, 121, 61, 60, 60, 7, 58, 64, 253, 92, 159, 61, 126, 249, 237, 62, 39, 164, 189, 63, 223, 178, 135, 61, 136, 141, 240, 190, 0, 218, 61, 190, 95, 65, 181, 190, 245, 223, 220, 189, 51, 27, 246, 190, 111, 213, 64, 190, 114, 96, 151, 61, 120, 123, 110, 190, 66, 93, 190, 61, 220, 5, 208, 188, 134, 18, 14, 60, 55, 164, 171, 189, 40, 213, 113, 188, 79, 111, 170, 188, 88, 207, 151, 59, 207, 104, 176, 60, 121, 223, 33, 187, 179, 28, 157, 187, 31, 86, 220, 60, 106, 66, 178, 188, 241, 182, 9, 189, 140, 249, 189, 190, 47, 119, 231, 60, 162, 242, 20, 61, 63, 62, 206, 189, 85, 71, 42, 61, 224, 164, 133, 61, 217, 191, 166, 60, 218, 182, 7, 61, 77, 79, 77, 186, 58, 106, 54, 61, 206, 160, 81, 60, 198, 5, 135, 186, 65, 52, 31, 61, 148, 124, 7, 64, 69, 0, 142, 62, 183, 7, 39, 63, 167, 241, 104, 63, 191, 223, 118, 188, 72, 67, 100, 190, 150, 106, 211, 189, 62, 176, 82, 190, 243, 242, 72, 190, 105, 30, 16, 190, 3, 128, 186, 189, 146, 150, 142, 59, 20, 139, 178, 189, 191, 243, 40, 191, 137, 218, 7, 62, 199, 205, 232, 58, 32, 51, 142, 190, 46, 184, 168, 61, 37, 28, 29, 62, 141, 171, 15, 61, 157, 137, 151, 61, 204, 163, 11, 189, 44, 39, 151, 61, 86, 38, 73, 61, 163, 127, 63, 189, 35, 86, 70, 61, 48, 221, 14, 188, 250, 26, 193, 59, 216, 187, 18, 188, 195, 154, 172, 187, 112, 122, 76, 61, 201, 147, 137, 59, 142, 161, 188, 188, 217, 39, 169, 188, 2, 116, 61, 187, 124, 94, 17, 189, 137, 32, 37, 189, 244, 227, 185, 58, 124, 125, 185, 59, 154, 243, 240, 191, 64, 60, 219, 190, 2, 198, 73, 189, 185, 228, 121, 189, 36, 25, 168, 61, 157, 251, 176, 61, 31, 252, 181, 60, 219, 161, 135, 61, 85, 188, 25, 61, 50, 46, 16, 60, 45, 223, 16, 61, 92, 81, 23, 61, 177, 236, 27, 61, 34, 251, 151, 188, 102, 239, 35, 61, 50, 54, 248, 60, 14, 125, 92, 60, 29, 137, 15, 59, 145, 73, 27, 187, 232, 23, 66, 187, 149, 232, 15, 60, 160, 112, 113, 60, 101, 224, 20, 60, 180, 9, 49, 186, 25, 135, 1, 188, 231, 60, 98, 188, 216, 150, 191, 61, 130, 241, 161, 61, 105, 202, 132, 61, 147, 23, 100, 61, 253, 156, 126, 61, 48, 119, 104, 61, 71, 169, 168, 60, 183, 23, 217, 59, 192, 15, 211, 188, 227, 17, 120, 189, 190, 85, 122, 189, 33, 179, 140, 189, 116, 154, 64, 189, 175, 218, 217, 191, 247, 214, 193, 190, 4, 81, 195, 188, 137, 230, 20, 189, 45, 16, 175, 61, 151, 98, 176, 61, 249, 229, 161, 60, 17, 95, 65, 61, 123, 218, 16, 187, 77, 32, 115, 188, 74, 5, 249, 60, 67, 126, 226, 60, 54, 103, 26, 61, 234, 75, 200, 188, 125, 22, 140, 60, 65, 178, 73, 60, 184, 13, 186, 60, 237, 122, 225, 60, 55, 219, 160, 60, 75, 22, 104, 59, 224, 239, 147, 60, 4, 215, 132, 60, 88, 104, 141, 187, 142, 126, 128, 188, 142, 112, 31, 189, 89, 201, 244, 188, 4, 155, 19, 189, 195, 161, 164, 189, 71, 44, 162, 189, 76, 87, 96, 189, 194, 247, 59, 189, 115, 213, 101, 189, 112, 66, 180, 188, 33, 250, 221, 60, 59, 25, 139, 61, 11, 30, 189, 61, 194, 255, 147, 61, 31, 233, 70, 61, 245, 145, 178, 60, 215, 174, 198, 191, 243, 102, 225, 190, 67, 152, 236, 189, 61, 148, 183, 189, 79, 188, 36, 61, 234, 97, 2, 61, 25, 227, 107, 187, 221, 78, 80, 61, 201, 251, 165, 60, 100, 135, 4, 61, 196, 98, 73, 61, 68, 163, 118, 61, 120, 216, 171, 61, 179, 152, 200, 189, 236, 102, 134, 189, 9, 185, 38, 189, 208, 185, 158, 188, 239, 50, 186, 187, 135, 50, 224, 59, 121, 222, 153, 60, 192, 4, 60, 59, 54, 105, 143, 188, 62, 210, 126, 188, 138, 26, 134, 59, 48, 213, 195, 60, 76, 205, 154, 60, 142, 181, 210, 61, 237, 100, 211, 61, 124, 44, 191, 61, 182, 42, 37, 61, 211, 143, 115, 187, 18, 36, 33, 188, 61, 198, 203, 188, 167, 246, 147, 188, 171, 124, 216, 187, 238, 36, 134, 188, 56, 191, 213, 188, 25, 235, 63, 189, 143, 187, 84, 189, 212, 160, 211, 191, 77, 183, 175, 190, 224, 50, 63, 188, 142, 60, 56, 189, 207, 180, 183, 61, 226, 44, 140, 61, 14, 222, 57, 188, 154, 91, 80, 61, 219, 88, 215, 60, 201, 102, 89, 187, 129, 68, 203, 60, 112, 84, 207, 188, 59, 43, 184, 188, 3, 171, 177, 189, 205, 71, 226, 188, 213, 242, 8, 189, 237, 124, 18, 189, 233, 96, 150, 188, 127, 101, 120, 188, 144, 155, 139, 188, 175, 33, 235, 188, 101, 202, 75, 188, 113, 229, 88, 60, 120, 240, 33, 60, 234, 106, 221, 60, 181, 254, 13, 61, 242, 18, 12, 190, 189, 215, 228, 189, 88, 36, 149, 189, 177, 121, 28, 189, 72, 50, 178, 188, 179, 71, 136, 187, 92, 73, 198, 60, 139, 195, 224, 188, 113, 48, 60, 189, 62, 141, 130, 188, 117, 57, 87, 60, 14, 27, 174, 61, 20, 230, 196, 61, 245, 254, 204, 191, 1, 168, 28, 191, 27, 91, 10, 190, 22, 75, 19, 61, 157, 55, 240, 61, 223, 167, 175, 61, 62, 144, 208, 60, 103, 101, 21, 61, 191, 38, 153, 61, 191, 179, 141, 61, 152, 173, 139, 61, 212, 217, 193, 61, 173, 247, 200, 61, 114, 208, 73, 61, 219, 68, 6, 189, 137, 143, 219, 188, 84, 51, 201, 59, 7, 155, 125, 60, 176, 189, 73, 61, 113, 222, 205, 188, 110, 42, 44, 188, 187, 216, 137, 59, 104, 91, 82, 188, 154, 68, 113, 60, 14, 251, 92, 60, 229, 90, 13, 60, 244, 65, 99, 61, 130, 163, 12, 61, 186, 114, 26, 59, 106, 132, 229, 188, 224, 15, 16, 61, 194, 191, 84, 60, 240, 169, 57, 188, 192, 12, 66, 58, 124, 166, 104, 188, 207, 203, 226, 60, 103, 47, 74, 188, 220, 121, 37, 189, 153, 208, 43, 188, 56, 211, 126, 191, 143, 66, 158, 190, 228, 124, 150, 189, 213, 219, 126, 187, 201, 180, 142, 61, 30, 98, 216, 60, 70, 219, 12, 60, 245, 133, 12, 61, 120, 229, 133, 186, 42, 251, 131, 60, 174, 242, 197, 187, 121, 250, 184, 188, 206, 80, 134, 60, 202, 75, 199, 187, 130, 85, 120, 60, 67, 232, 170, 60, 10, 135, 17, 61, 170, 105, 93, 60, 194, 206, 21, 61, 21, 242, 20, 61, 96, 155, 173, 60, 13, 187, 188, 59, 112, 163, 143, 183, 69, 68, 181, 187, 189, 13, 142, 188, 163, 122, 110, 188, 129, 134, 229, 59, 232, 244, 95, 189, 123, 73, 185, 188, 170, 168, 125, 187, 61, 45, 150, 59, 206, 24, 132, 187, 190, 103, 5, 188, 231, 159, 224, 188, 196, 255, 204, 60, 163, 150, 121, 61, 125, 2, 152, 61, 186, 176, 84, 61, 121, 205, 181, 59, 161, 167, 131, 191, 94, 143, 136, 190, 82, 221, 141, 189, 151, 220, 61, 61, 196, 123, 97, 61, 252, 37, 210, 59, 198, 234, 12, 189, 115, 247, 217, 187, 220, 112, 151, 60, 146, 34, 0, 60, 101, 99, 202, 60, 61, 215, 90, 60, 82, 169, 30, 187, 225, 203, 100, 189, 195, 29, 179, 186, 41, 85, 76, 188, 189, 127, 31, 189, 188, 48, 202, 188, 31, 131, 210, 188, 117, 7, 204, 188, 76, 27, 4, 189, 217, 15, 192, 187, 159, 188, 246, 187, 128, 171, 58, 187, 63, 62, 91, 60, 81, 135, 241, 58, 46, 23, 38, 61, 255, 244, 129, 60, 212, 251, 187, 60, 242, 211, 135, 187, 50, 42, 182, 185, 215, 195, 185, 60, 149, 163, 24, 61, 176, 2, 205, 60, 128, 185, 133, 188, 82, 205, 104, 189, 171, 58, 143, 189, 35, 87, 65, 189, 79, 182, 143, 59, 209, 4, 146, 191, 148, 162, 20, 191, 237, 209, 180, 189, 244, 53, 6, 189, 139, 145, 66, 62, 249, 44, 173, 61, 200, 108, 23, 61, 136, 5, 55, 61, 72, 85, 174, 60, 217, 26, 88, 61, 165, 120, 134, 188, 64, 19, 96, 188, 184, 59, 137, 61, 110, 47, 179, 189, 194, 200, 38, 187, 36, 75, 97, 60, 68, 132, 70, 59, 55, 75, 145, 188, 226, 41, 215, 188, 136, 127, 219, 58, 99, 47, 36, 59, 232, 93, 172, 186, 118, 25, 75, 187, 173, 179, 104, 60, 156, 153, 91, 60, 193, 164, 24, 60, 60, 113, 186, 188, 27, 20, 21, 61, 186, 13, 158, 60, 95, 207, 11, 61, 191, 110, 67, 189, 169, 103, 150, 188, 252, 117, 105, 188, 218, 142, 128, 58, 91, 241, 51, 188, 81, 41, 31, 189, 41, 124, 210, 187, 215, 235, 184, 60, 1, 219, 96, 185, 50, 134, 190, 191, 90, 15, 127, 190, 236, 127, 10, 61, 247, 237, 195, 61, 84, 249, 0, 62, 203, 127, 16, 61, 31, 20, 211, 57, 110, 64, 156, 61, 53, 200, 79, 60, 56, 107, 102, 61, 88, 22, 219, 188, 197, 134, 181, 188, 126, 88, 34, 61, 147, 2, 203, 61, 21, 254, 65, 187, 181, 49, 139, 60, 108, 102, 219, 59, 86, 125, 173, 188, 45, 55, 238, 60, 6, 0, 224, 60, 212, 188, 111, 188, 151, 61, 36, 59, 18, 135, 240, 186, 103, 209, 160, 60, 138, 29, 83, 61, 52, 131, 136, 186, 96, 64, 167, 62, 174, 72, 75, 188, 87, 41, 39, 189, 66, 232, 154, 188, 174, 255, 137, 61, 96, 100, 50, 61, 110, 54, 55, 60, 62, 168, 106, 188, 186, 3, 179, 188, 46, 59, 47, 60, 120, 250, 149, 60, 157, 20, 179, 60, 107, 245, 198, 188, 23, 120, 91, 190, 84, 51, 203, 190, 141, 24, 34, 190, 193, 94, 109, 61, 211, 235, 82, 62, 84, 6, 69, 62, 255, 105, 22, 190, 219, 136, 131, 189, 83, 126, 191, 61, 129, 194, 13, 62, 80, 68, 194, 188, 73, 210, 95, 189, 10, 201, 165, 61, 205, 210, 25, 62, 112, 220, 86, 61, 201, 217, 219, 188, 116, 92, 123, 60, 171, 166, 52, 60, 96, 17, 190, 61, 153, 107, 106, 58, 161, 34, 3, 189, 175, 44, 66, 61, 174, 251, 96, 188, 226, 156, 110, 189, 138, 191, 121, 188, 77, 6, 109, 188, 68, 3, 86, 60, 225, 108, 155, 62, 53, 73, 213, 61, 41, 131, 169, 189, 180, 118, 254, 189, 63, 148, 157, 189, 216, 61, 192, 61, 151, 184, 232, 58, 16, 189, 125, 189, 60, 122, 121, 189, 240, 22, 79, 60, 16, 16, 97, 61, 184, 196, 156, 189, 103, 53, 142, 191, 138, 151, 181, 190, 151, 29, 202, 189, 181, 198, 191, 188, 186, 146, 162, 61, 91, 21, 145, 61, 121, 98, 100, 60, 221, 177, 165, 185, 82, 53, 139, 188, 17, 72, 231, 60, 25, 235, 149, 60, 216, 236, 103, 59, 239, 156, 225, 60, 202, 15, 201, 62, 92, 220, 250, 59, 73, 127, 16, 188, 78, 12, 151, 188, 107, 104, 87, 188, 174, 220, 132, 187, 114, 141, 104, 189, 229, 131, 234, 188, 115, 221, 171, 188, 215, 227, 38, 61, 38, 21, 86, 60, 242, 37, 23, 189, 215, 188, 143, 60, 228, 38, 236, 62, 192, 184, 152, 186, 109, 41, 88, 61, 90, 169, 188, 188, 9, 2, 140, 189, 219, 5, 84, 189, 54, 174, 190, 189, 215, 193, 150, 188]).concat([83, 121, 20, 186, 130, 11, 135, 61, 44, 95, 163, 60, 161, 74, 206, 188, 195, 129, 156, 60, 123, 27, 130, 190, 240, 202, 88, 191, 145, 213, 47, 62, 172, 100, 132, 189, 100, 91, 2, 62, 220, 213, 35, 188, 110, 30, 133, 189, 87, 69, 193, 61, 116, 208, 8, 190, 11, 158, 45, 62, 94, 219, 144, 189, 207, 28, 206, 60, 21, 23, 18, 189, 182, 191, 53, 62, 216, 37, 105, 189, 214, 247, 11, 189, 234, 70, 199, 188, 206, 87, 201, 188, 56, 57, 187, 189, 94, 15, 141, 189, 30, 121, 14, 61, 41, 220, 43, 189, 48, 138, 104, 60, 135, 192, 226, 188, 221, 198, 42, 188, 6, 172, 195, 60, 181, 233, 134, 191, 112, 237, 18, 63, 166, 40, 113, 190, 226, 83, 94, 61, 237, 71, 110, 189, 242, 213, 199, 61, 83, 233, 50, 61, 183, 32, 176, 189, 121, 149, 102, 62, 13, 120, 42, 190, 72, 152, 190, 61, 35, 46, 121, 189, 201, 240, 244, 61, 90, 163, 161, 190, 123, 67, 12, 190, 25, 110, 48, 61, 94, 97, 133, 61, 81, 116, 26, 62, 142, 130, 19, 62, 63, 200, 6, 61, 10, 212, 67, 61, 149, 19, 20, 60, 92, 233, 248, 59, 120, 106, 230, 59, 223, 196, 210, 185, 135, 87, 238, 60, 205, 198, 206, 190, 125, 149, 132, 190, 178, 250, 220, 189, 6, 14, 128, 189, 43, 26, 118, 188, 19, 165, 25, 187, 18, 194, 179, 60, 141, 136, 8, 61, 92, 220, 243, 60, 138, 92, 219, 60, 25, 222, 12, 61, 50, 65, 206, 60, 84, 57, 147, 60, 208, 41, 3, 62, 98, 150, 76, 61, 241, 224, 13, 60, 66, 149, 0, 188, 152, 252, 40, 189, 120, 72, 22, 189, 70, 109, 195, 188, 235, 236, 173, 188, 60, 125, 14, 187, 30, 51, 207, 58, 249, 190, 111, 59, 247, 139, 199, 60, 156, 59, 79, 188, 89, 55, 158, 191, 144, 133, 186, 190, 164, 69, 136, 189, 90, 96, 33, 189, 96, 98, 194, 61, 142, 241, 161, 61, 174, 154, 64, 60, 158, 114, 8, 61, 142, 51, 244, 59, 137, 195, 31, 188, 241, 207, 245, 60, 171, 141, 136, 187, 221, 107, 217, 187, 175, 90, 177, 189, 129, 197, 171, 187, 126, 63, 88, 60, 90, 237, 186, 60, 90, 214, 215, 60, 83, 65, 189, 60, 125, 91, 3, 61, 252, 203, 22, 61, 205, 172, 2, 61, 178, 98, 157, 60, 213, 184, 180, 59, 152, 7, 134, 188, 126, 202, 152, 188, 220, 190, 136, 188, 208, 111, 176, 188, 221, 175, 202, 188, 51, 255, 1, 189, 120, 110, 36, 189, 172, 66, 246, 188, 60, 132, 93, 186, 206, 21, 204, 60, 30, 165, 11, 61, 9, 10, 238, 60, 66, 106, 37, 61, 236, 150, 74, 61, 127, 172, 28, 61, 38, 227, 146, 191, 125, 71, 179, 190, 184, 255, 152, 189, 200, 146, 96, 189, 235, 226, 134, 61, 149, 122, 105, 61, 120, 216, 69, 187, 51, 248, 192, 60, 91, 157, 203, 186, 216, 65, 148, 188, 54, 185, 215, 60, 12, 243, 192, 60, 102, 131, 198, 60, 71, 176, 151, 189, 93, 158, 240, 60, 248, 42, 1, 61, 90, 169, 76, 60, 120, 98, 172, 57, 12, 34, 115, 188, 78, 46, 49, 189, 197, 22, 116, 189, 78, 136, 136, 189, 227, 179, 98, 189, 108, 139, 245, 188, 136, 123, 193, 187, 134, 144, 51, 187, 140, 232, 139, 188, 220, 96, 166, 188, 143, 101, 21, 59, 133, 155, 74, 60, 100, 188, 254, 60, 44, 57, 203, 60, 170, 86, 209, 60, 193, 129, 184, 60, 32, 76, 148, 60, 120, 72, 235, 60, 146, 139, 195, 59, 160, 71, 180, 188, 72, 154, 5, 189, 10, 50, 139, 191, 15, 14, 197, 190, 6, 137, 215, 189, 29, 107, 152, 189, 61, 255, 73, 61, 164, 84, 108, 61, 207, 171, 1, 61, 64, 62, 151, 61, 205, 222, 93, 61, 204, 79, 44, 61, 67, 45, 123, 61, 89, 7, 30, 61, 40, 137, 245, 60, 212, 102, 15, 190, 164, 110, 66, 189, 196, 16, 140, 189, 56, 73, 95, 189, 166, 110, 40, 189, 63, 235, 185, 188, 191, 100, 219, 187, 228, 99, 68, 60, 188, 74, 221, 60, 46, 88, 241, 60, 156, 247, 162, 60, 112, 39, 205, 60, 15, 82, 205, 60, 237, 40, 177, 61, 100, 139, 187, 61, 84, 159, 132, 61, 121, 234, 97, 61, 230, 165, 32, 61, 88, 91, 204, 60, 223, 25, 219, 188, 52, 79, 141, 189, 196, 19, 168, 189, 35, 58, 181, 189, 178, 92, 155, 189, 101, 52, 82, 189, 118, 118, 35, 188, 72, 156, 227, 191, 174, 185, 187, 190, 92, 217, 159, 189, 38, 170, 71, 189, 200, 205, 211, 61, 62, 119, 102, 61, 33, 171, 212, 187, 209, 60, 86, 61, 249, 173, 181, 60, 42, 93, 247, 60, 223, 44, 63, 61, 30, 127, 145, 60, 153, 149, 29, 61, 173, 231, 158, 62, 153, 16, 118, 62, 11, 78, 137, 62, 9, 120, 53, 62, 164, 3, 36, 62, 35, 218, 195, 61, 138, 143, 180, 61, 110, 248, 118, 61, 12, 200, 39, 60, 68, 186, 50, 61, 158, 106, 159, 58, 173, 49, 132, 188, 230, 43, 112, 60, 40, 55, 77, 63, 114, 105, 43, 63, 28, 181, 11, 63, 30, 228, 218, 62, 29, 105, 99, 62, 81, 178, 213, 61, 185, 47, 100, 61, 249, 165, 23, 189, 10, 124, 205, 189, 33, 17, 232, 189, 150, 81, 172, 189, 99, 196, 191, 189, 236, 73, 185, 189, 121, 115, 204, 191, 234, 70, 37, 191, 122, 29, 73, 190, 36, 83, 136, 189, 112, 4, 47, 62, 42, 239, 214, 61, 149, 39, 186, 60, 236, 251, 190, 61, 189, 235, 110, 60, 235, 186, 232, 61, 173, 31, 194, 60, 77, 98, 184, 61, 131, 88, 25, 62, 149, 145, 19, 190, 4, 70, 6, 188, 127, 95, 140, 59, 94, 176, 31, 57, 133, 193, 64, 60, 13, 220, 244, 59, 86, 1, 156, 187, 235, 69, 87, 188, 162, 114, 247, 187, 64, 4, 48, 187, 159, 182, 165, 187, 153, 45, 151, 59, 229, 77, 69, 60, 244, 178, 236, 60, 40, 130, 17, 61, 4, 105, 190, 60, 203, 192, 215, 60, 166, 91, 146, 60, 255, 249, 46, 185, 71, 226, 57, 188, 160, 32, 133, 59, 241, 84, 132, 59, 236, 253, 249, 186, 55, 200, 130, 59, 119, 180, 6, 188, 80, 21, 20, 188, 250, 19, 5, 192, 24, 212, 22, 191, 144, 11, 211, 189, 25, 39, 150, 61, 34, 185, 120, 62, 69, 88, 80, 62, 59, 165, 43, 189, 242, 125, 239, 60, 55, 165, 25, 188, 34, 213, 171, 60, 180, 198, 236, 60, 138, 7, 152, 60, 13, 95, 0, 60, 210, 74, 47, 189, 251, 111, 214, 187, 79, 220, 48, 188, 111, 114, 22, 188, 206, 132, 190, 186, 179, 63, 23, 188, 117, 161, 202, 59, 143, 114, 99, 60, 94, 67, 143, 60, 143, 219, 119, 60, 174, 153, 39, 186, 253, 180, 85, 187, 8, 202, 114, 187, 170, 229, 51, 61, 243, 130, 182, 60, 227, 77, 153, 60, 5, 255, 240, 59, 182, 200, 110, 185, 41, 139, 238, 59, 132, 235, 92, 60, 15, 120, 184, 58, 237, 64, 39, 187, 37, 100, 23, 58, 109, 221, 96, 187, 27, 97, 242, 186, 12, 30, 226, 185, 147, 205, 214, 191, 251, 130, 94, 190, 133, 243, 159, 61, 246, 112, 239, 60, 7, 72, 20, 62, 207, 236, 9, 62, 97, 199, 142, 60, 212, 194, 202, 60, 126, 158, 150, 188, 150, 221, 69, 189, 78, 52, 241, 60, 148, 15, 53, 60, 26, 3, 61, 188, 186, 64, 123, 61, 104, 51, 231, 58, 210, 18, 113, 189, 63, 136, 53, 189, 14, 252, 236, 188, 42, 23, 147, 188, 254, 222, 81, 60, 249, 201, 172, 60, 111, 3, 108, 59, 213, 194, 124, 186, 214, 65, 156, 60, 151, 102, 174, 60, 117, 158, 141, 60, 88, 253, 187, 187, 19, 237, 188, 189, 31, 219, 154, 189, 182, 117, 105, 189, 96, 155, 37, 189, 62, 45, 108, 189, 154, 200, 42, 188, 247, 139, 58, 61, 221, 245, 35, 61, 124, 214, 46, 61, 149, 173, 9, 59, 21, 208, 169, 188, 225, 171, 207, 60, 197, 7, 201, 191, 158, 152, 148, 190, 69, 35, 165, 59, 36, 163, 8, 61, 27, 231, 42, 62, 94, 180, 229, 61, 191, 70, 123, 61, 229, 201, 199, 61, 129, 121, 55, 61, 53, 74, 164, 61, 138, 82, 47, 61, 226, 81, 113, 60, 106, 61, 163, 61, 59, 240, 129, 63, 252, 36, 92, 63, 237, 175, 58, 63, 13, 242, 19, 63, 229, 186, 168, 62, 217, 88, 38, 62, 201, 94, 242, 61, 119, 5, 33, 61, 181, 171, 136, 189, 212, 154, 196, 189, 246, 68, 188, 189, 220, 194, 33, 190, 246, 213, 251, 189, 5, 13, 120, 63, 244, 0, 36, 63, 141, 150, 166, 62, 7, 165, 91, 62, 181, 189, 42, 59, 124, 248, 252, 189, 224, 90, 222, 189, 161, 159, 177, 189, 110, 130, 23, 190, 36, 140, 6, 190, 12, 28, 207, 189, 225, 67, 170, 189, 4, 203, 183, 189, 239, 166, 47, 191, 83, 226, 7, 63, 153, 49, 29, 63, 232, 133, 254, 62, 44, 243, 212, 62, 173, 222, 95, 62, 88, 232, 211, 61, 138, 6, 77, 61, 178, 179, 148, 189, 205, 142, 78, 189, 53, 103, 132, 189, 205, 7, 246, 189, 206, 222, 207, 189, 26, 208, 161, 63, 208, 230, 57, 63, 133, 50, 225, 62, 19, 202, 144, 62, 116, 19, 81, 61, 39, 120, 143, 189, 43, 84, 163, 188, 208, 216, 121, 189, 225, 208, 2, 190, 185, 184, 14, 189, 23, 144, 83, 189, 206, 189, 100, 189, 37, 136, 146, 189, 47, 249, 27, 62, 49, 113, 98, 190, 95, 149, 157, 190, 11, 10, 166, 190, 42, 50, 174, 190, 25, 155, 128, 190, 174, 9, 222, 189, 66, 50, 120, 189, 46, 54, 0, 189, 94, 136, 159, 61, 127, 250, 196, 61, 183, 78, 210, 61, 132, 102, 201, 61, 195, 207, 52, 191, 202, 244, 79, 62, 108, 64, 152, 62, 0, 8, 96, 62, 40, 210, 102, 62, 17, 28, 91, 62, 45, 172, 14, 62, 59, 36, 12, 62, 104, 165, 109, 189, 0, 98, 138, 189, 183, 222, 123, 189, 84, 201, 81, 188, 11, 61, 71, 61, 102, 82, 219, 63, 113, 241, 138, 63, 178, 136, 35, 63, 1, 42, 38, 62, 46, 53, 75, 190, 253, 129, 183, 190, 57, 73, 81, 190, 81, 118, 40, 190, 117, 217, 2, 190, 7, 216, 174, 189, 143, 160, 96, 188, 210, 218, 9, 189, 39, 51, 26, 189, 81, 39, 14, 63, 47, 112, 132, 62, 19, 118, 143, 189, 153, 130, 180, 190, 61, 199, 218, 190, 49, 72, 193, 190, 61, 96, 53, 190, 128, 147, 33, 189, 106, 155, 4, 62, 202, 185, 173, 61, 176, 169, 112, 61, 199, 51, 16, 61, 228, 151, 7, 189, 125, 135, 191, 191, 109, 245, 200, 190, 23, 81, 148, 59, 184, 191, 3, 61, 212, 209, 49, 62, 211, 103, 1, 62, 141, 134, 32, 61, 245, 89, 231, 61, 215, 180, 64, 61, 57, 131, 182, 60, 3, 22, 211, 60, 235, 227, 103, 61, 194, 90, 199, 61, 197, 231, 167, 63, 178, 208, 122, 63, 157, 25, 38, 63, 166, 115, 200, 62, 96, 31, 12, 188, 55, 102, 130, 190, 13, 42, 113, 190, 14, 105, 84, 190, 101, 111, 105, 190, 199, 137, 28, 190, 185, 200, 190, 189, 196, 182, 15, 189, 4, 174, 89, 60, 156, 125, 168, 63, 42, 184, 88, 63, 21, 33, 225, 62, 212, 80, 195, 61, 58, 138, 105, 190, 248, 236, 161, 190, 160, 246, 106, 190, 171, 169, 122, 190, 161, 14, 6, 190, 154, 203, 172, 189, 104, 242, 82, 189, 71, 161, 71, 189, 184, 16, 40, 188, 96, 36, 144, 190, 6, 89, 193, 189, 166, 55, 25, 62, 230, 169, 126, 61, 59, 122, 179, 61, 22, 30, 30, 61, 255, 36, 214, 188, 6, 208, 154, 60, 92, 163, 3, 189, 86, 113, 33, 189, 171, 115, 221, 188, 105, 78, 13, 58, 96, 248, 110, 60, 157, 208, 245, 190, 90, 124, 191, 190, 4, 7, 124, 190, 210, 63, 225, 189, 164, 18, 90, 188, 162, 209, 47, 61, 158, 137, 30, 61, 62, 42, 201, 60, 181, 82, 65, 61, 245, 142, 126, 61, 132, 236, 154, 61, 192, 59, 138, 61, 199, 58, 22, 61, 42, 214, 60, 62, 23, 42, 34, 62, 123, 13, 233, 61, 223, 236, 165, 60, 136, 189, 129, 186, 24, 218, 148, 188, 25, 159, 1, 189, 73, 156, 62, 189, 102, 210, 25, 189, 224, 190, 131, 188, 204, 232, 63, 187, 87, 85, 28, 189, 34, 63, 161, 188, 24, 26, 140, 63, 158, 222, 108, 63, 158, 70, 59, 63, 0, 183, 46, 62, 119, 136, 130, 189, 156, 141, 56, 190, 241, 126, 57, 190, 78, 253, 184, 189, 45, 158, 253, 189, 175, 81, 27, 190, 20, 143, 12, 190, 232, 174, 167, 189, 17, 132, 141, 188, 45, 103, 18, 191, 62, 184, 166, 190, 202, 56, 163, 189, 43, 74, 191, 61, 215, 217, 80, 62, 189, 3, 11, 62, 163, 126, 137, 188, 158, 163, 37, 189, 70, 72, 129, 59, 220, 138, 8, 61, 227, 230, 2, 61, 9, 91, 13, 188, 62, 13, 195, 187, 181, 164, 173, 189, 215, 204, 174, 189, 10, 197, 155, 189, 79, 91, 31, 189, 34, 76, 229, 188, 210, 163, 3, 188, 23, 245, 8, 61, 0, 39, 161, 60, 253, 33, 206, 59, 85, 238, 253, 59, 7, 186, 167, 59, 25, 25, 141, 60, 30, 95, 227, 58, 4, 77, 204, 62, 79, 98, 229, 62, 53, 143, 229, 62, 84, 156, 216, 61, 228, 96, 227, 60, 205, 130, 54, 189, 187, 98, 215, 189, 227, 32, 118, 189, 224, 228, 2, 190, 72, 167, 3, 190, 183, 248, 229, 189, 11, 169, 149, 189, 120, 217, 40, 187, 182, 64, 37, 191, 160, 57, 238, 190, 9, 112, 131, 190, 212, 223, 67, 189, 89, 82, 110, 61, 38, 90, 156, 61, 252, 97, 156, 61, 87, 119, 173, 61, 196, 227, 142, 61, 64, 163, 39, 61, 214, 109, 209, 60, 37, 169, 28, 61, 20, 254, 253, 60, 8, 246, 163, 57, 225, 20, 187, 188, 181, 55, 61, 189, 213, 42, 25, 189, 203, 242, 54, 189, 172, 126, 179, 188, 29, 103, 102, 60, 128, 28, 194, 60, 182, 71, 169, 60, 171, 5, 184, 60, 165, 239, 185, 60, 68, 240, 179, 60, 203, 11, 137, 60, 124, 122, 134, 191, 241, 201, 138, 190, 115, 98, 213, 60, 141, 235, 146, 188, 80, 208, 162, 188, 253, 207, 20, 189, 56, 16, 92, 61, 130, 236, 49, 61, 234, 206, 158, 60, 32, 214, 246, 187, 136, 191, 141, 188, 132, 178, 161, 60, 246, 141, 188, 188, 222, 147, 141, 189, 16, 168, 39, 59, 149, 139, 142, 187, 150, 62, 188, 59, 150, 211, 199, 185, 98, 68, 14, 186, 198, 9, 7, 188, 3, 233, 80, 60, 234, 70, 211, 58, 33, 228, 92, 186, 122, 81, 37, 188, 2, 113, 0, 188, 195, 22, 17, 59, 109, 95, 168, 188, 107, 171, 231, 187, 16, 250, 134, 58, 194, 125, 85, 60, 16, 39, 183, 60, 90, 92, 41, 60, 92, 53, 117, 188, 17, 220, 210, 188, 208, 167, 21, 184, 196, 77, 69, 60, 251, 236, 179, 60, 22, 99, 194, 59, 92, 159, 86, 59, 187, 139, 192, 191, 224, 153, 3, 191, 22, 235, 184, 189, 241, 96, 112, 189, 89, 211, 194, 61, 235, 204, 125, 61, 203, 235, 197, 187, 57, 238, 143, 61, 36, 202, 35, 61, 9, 98, 134, 61, 134, 26, 106, 61, 89, 103, 161, 61, 118, 156, 216, 61, 108, 39, 171, 189, 214, 155, 117, 60, 164, 220, 232, 60, 222, 224, 28, 61, 81, 250, 38, 61, 193, 236, 30, 61, 224, 129, 36, 61, 221, 67, 194, 60, 124, 198, 247, 59, 195, 5, 253, 187, 226, 206, 173, 188, 206, 65, 157, 188, 80, 116, 182, 188, 216, 214, 148, 61, 153, 89, 177, 61, 81, 173, 136, 61, 233, 99, 49, 61, 197, 179, 174, 60, 38, 30, 247, 59, 230, 60, 171, 59, 62, 194, 6, 189, 226, 181, 122, 189, 181, 142, 19, 189, 46, 228, 41, 189, 100, 1, 23, 189, 117, 118, 198, 188, 234, 192, 140, 191, 166, 25, 154, 190, 232, 137, 12, 61, 216, 87, 11, 60, 5, 42, 172, 61, 117, 160, 87, 61, 42, 83, 6, 187, 23, 124, 25, 61, 93, 221, 43, 187, 112, 21, 208, 188, 194, 143, 4, 60, 30, 47, 208, 59, 217, 124, 22, 60, 94, 49, 226, 189, 200, 71, 26, 188, 252, 93, 242, 59, 102, 48, 167, 60, 203, 125, 240, 60, 140, 64, 133, 60, 153, 67, 8, 60, 197, 135, 17, 60, 201, 66, 202, 58, 2, 95, 86, 187, 110, 255, 57, 187, 66, 220, 97, 188, 118, 246, 198, 187, 48, 148, 54, 189, 102, 244, 39, 189, 215, 248, 45, 189, 79, 122, 28, 189, 175, 99, 154, 188, 31, 216, 227, 59, 200, 248, 70, 59, 109, 48, 108, 187, 122, 241, 36, 59, 61, 218, 33, 60, 30, 161, 41, 61, 94, 206, 35, 61, 231, 2, 180, 60, 252, 80, 164, 191, 219, 200, 195, 190, 175, 224, 51, 189, 207, 126, 141, 189, 22, 203, 175, 61, 26, 147, 178, 61, 253, 92, 106, 60, 87, 131, 140, 60, 78, 34, 232, 188, 220, 180, 2, 189, 5, 202, 38, 59, 69, 79, 29, 188, 220, 209, 128, 60, 31, 87, 222, 189, 243, 35, 187, 188, 244, 31, 247, 188, 52, 12, 233, 188, 234, 122, 4, 189, 141, 42, 78, 188, 165, 125, 28, 188, 111, 157, 10, 188, 64, 249, 27, 58, 217, 194, 53, 58, 5, 255, 148, 58, 1, 35, 65, 57, 174, 81, 224, 59, 49, 229, 26, 189, 130, 229, 58, 189, 192, 32, 93, 189, 113, 243, 53, 189, 59, 124, 152, 189, 44, 155, 137, 189, 56, 157, 17, 189, 96, 70, 6, 61, 255, 26, 167, 61, 143, 5, 166, 61, 172, 197, 142, 61, 124, 249, 93, 61, 155, 29, 30, 61, 187, 220, 159, 191, 111, 74, 187, 190, 163, 109, 111, 189, 229, 162, 159, 189, 207, 226, 8, 61, 202, 103, 25, 61, 255, 205, 10, 185, 91, 226, 29, 61, 140, 177, 127, 60, 58, 220, 26, 60, 1, 29, 91, 61, 141, 224, 153, 60, 126, 143, 138, 60, 233, 113, 168, 189, 72, 168, 87, 188, 214, 177, 226, 188, 107, 8, 198, 188, 231, 28, 140, 188, 76, 1, 165, 188, 109, 85, 64, 188, 202, 241, 11, 188, 165, 194, 250, 58, 34, 21, 110, 60, 69, 87, 114, 60, 60, 11, 209, 60, 142, 64, 160, 60, 60, 199, 177, 61, 132, 177, 153, 61, 163, 85, 161, 61, 23, 105, 140, 61, 246, 137, 169, 61, 51, 149, 91, 61, 91, 58, 6, 61, 92, 246, 43, 187, 201, 210, 59, 189, 234, 109, 147, 189, 179, 19, 185, 189, 216, 86, 142, 189, 121, 37, 65, 189, 103, 217, 238, 191, 88, 8, 173, 190, 1, 185, 119, 189, 112, 160, 180, 189, 255, 56, 162, 61, 171, 134, 54, 61, 63, 41, 30, 61, 228, 134, 85, 61, 99, 79, 245, 60, 9, 245, 181, 60, 246, 29, 5, 61, 217, 197, 235, 60, 61, 45, 253, 58, 151, 74, 73, 63, 230, 173, 57, 63, 61, 236, 30, 63, 227, 138, 253, 62, 32, 208, 185, 62, 115, 196, 34, 62, 20, 229, 227, 58, 87, 251, 40, 187, 183, 167, 90, 189, 223, 181, 147, 189, 155, 161, 178, 189, 144, 103, 135, 189, 27, 39, 190, 188, 212, 66, 178, 63, 49, 133, 137, 63, 143, 214, 94, 63, 157, 149, 29, 63, 171, 222, 15, 62, 233, 3, 91, 189, 88, 151, 55, 190, 87, 92, 128, 190, 178, 176, 105, 190, 65, 248, 230, 189, 145, 224, 200, 188, 62, 160, 155, 189, 29, 178, 129, 60, 61, 57, 154, 191, 127, 29, 132, 62, 55, 91, 243, 62, 214, 187, 179, 62, 156, 73, 198, 62, 127, 164, 62, 62, 119, 66, 127, 61, 80, 33, 215, 60, 95, 58, 178, 189, 60, 162, 81, 189, 208, 132, 220, 188, 192, 10, 139, 189, 140, 21, 52, 189, 193, 194, 148, 63, 109, 165, 98, 63, 52, 0, 56, 63, 70, 153, 4, 63, 115, 9, 87, 62, 103, 12, 251, 187, 176, 198, 247, 189, 193, 173, 13, 190, 65, 32, 237, 189, 26, 87, 8, 189, 1, 123, 166, 59, 75, 116, 39, 186, 197, 2, 11, 189, 210, 212, 149, 62, 49, 18, 22, 189, 61, 172, 68, 190, 109, 176, 252, 189, 130, 61, 47, 190, 98, 154, 42, 190, 95, 79, 217, 189, 62, 209, 132, 189, 219, 18, 119, 60, 132, 243, 160, 61, 175, 202, 251, 60, 254, 222, 225, 61, 253, 148, 181, 61, 243, 137, 223, 191, 87, 2, 182, 190, 204, 91, 0, 61, 5, 89, 59, 61, 58, 71, 50, 62, 49, 96, 243, 61, 30, 177, 119, 61, 200, 250, 144, 61, 224, 46, 152, 187, 251, 138, 111, 59, 50, 181, 40, 188, 70, 159, 141, 59, 74, 176, 86, 61, 197, 216, 110, 63, 186, 213, 79, 63, 20, 58, 27, 63, 102, 203, 216, 62, 223, 198, 87, 62, 159, 100, 133, 60, 46, 246, 143, 189, 216, 201, 11, 190, 237, 51, 47, 190, 139, 134, 250, 189, 174, 108, 187, 189, 229, 233, 225, 189, 227, 116, 105, 189, 222, 148, 178, 63, 142, 8, 33, 63, 227, 177, 116, 62, 56, 140, 89, 62, 28, 99, 48, 188, 201, 49, 119, 190, 162, 135, 134, 190, 66, 96, 59, 190, 106, 156, 235, 188, 122, 157, 168, 61, 143, 239, 50, 189, 162, 200, 149, 189, 56, 61, 132, 60, 77, 101, 234, 191, 170, 43, 205, 190, 25, 191, 217, 189, 9, 38, 109, 189, 152, 153, 140, 61, 23, 148, 82, 61, 28, 3, 168, 60, 130, 133, 38, 61, 38, 112, 110, 186, 201, 3, 212, 187, 117, 16, 148, 188, 9, 93, 209, 59, 166, 85, 35, 61, 43, 125, 166, 61, 202, 175, 57, 62, 176, 255, 53, 62, 120, 82, 237, 61, 59, 242, 55, 62, 178, 245, 244, 61, 94, 104, 138, 61, 237, 128, 116, 60, 57, 214, 183, 187, 109, 35, 223, 188, 127, 188, 185, 188, 117, 160, 183, 59, 86, 118, 245, 188, 182, 103, 133, 63, 61, 46, 98, 63, 229, 116, 56, 63, 58, 190, 21, 63, 159, 170, 165, 62, 24, 90, 189, 61, 254, 179, 211, 189, 122, 93, 251, 189, 242, 244, 167, 189, 95, 2, 117, 188, 22, 29, 148, 189, 21, 197, 21, 190, 109, 98, 169, 189, 233, 50, 127, 190, 5, 28, 247, 189, 92, 38, 217, 60, 235, 17, 74, 188, 52, 88, 88, 61, 23, 133, 41, 62, 207, 99, 8, 189, 215, 114, 194, 189, 27, 186, 202, 60, 184, 236, 145, 61, 27, 108, 131, 61, 199, 14, 100, 61, 157, 123, 20, 61, 1, 146, 48, 64, 120, 190, 180, 63, 55, 157, 68, 62, 254, 241, 168, 187, 255, 118, 87, 190, 208, 109, 33, 190, 169, 124, 151, 61, 85, 230, 223, 188, 220, 186, 142, 188, 235, 65, 202, 189, 157, 193, 87, 60, 179, 80, 128, 61, 79, 117, 252, 189, 149, 243, 15, 64, 39, 65, 92, 63, 29, 48, 204, 189, 111, 138, 88, 190, 206, 191, 159, 190, 254, 119, 15, 190, 201, 152, 60, 189, 161, 150, 171, 189, 62, 157, 208, 189, 208, 3, 132, 189, 12, 245, 238, 60, 103, 240, 188, 61, 56, 97, 83, 189, 193, 166, 161, 190, 176, 51, 59, 190, 174, 191, 220, 189, 66, 229, 150, 190, 119, 86, 121, 189, 91, 253, 219, 61, 142, 194, 24, 190, 205, 80, 12, 190, 98, 120, 18, 190, 79, 20, 119, 61, 218, 249, 7, 62, 28, 41, 199, 61, 63, 163, 203, 61, 192, 198, 206, 62, 222, 30, 58, 189, 183, 22, 135, 59, 146, 153, 18, 61, 234, 138, 222, 188, 33, 122, 15, 189, 190, 82, 216, 189, 99, 71, 186, 188, 24, 66, 216, 61, 4, 230, 158, 61, 218, 182, 71, 188, 162, 198, 166, 189, 164, 221, 142, 61, 144, 132, 198, 189, 225, 28, 6, 61, 73, 204, 130, 61, 5, 117, 37, 62, 255, 10, 221, 61, 229, 116, 242, 60, 28, 19, 16, 62, 195, 0, 93, 61, 124, 131, 205, 61, 23, 45, 67, 189, 243, 2, 152, 189, 173, 190, 6, 189, 45, 59, 174, 187, 166, 221, 25, 188, 12, 209, 194, 189, 56, 140, 127, 190, 63, 198, 144, 190, 217, 234, 96, 190, 233, 51, 158, 62, 76, 62, 170, 61, 27, 7, 6, 190, 9, 151, 1, 190, 102, 117, 83, 190, 96, 240, 68, 62, 11, 216, 33, 62, 192, 162, 163, 61, 99, 239, 49, 63, 192, 95, 125, 61, 119, 183, 3, 190, 78, 234, 37, 190, 246, 174, 6, 190, 244, 6, 18, 62, 13, 204, 92, 61, 224, 240, 202, 189, 37, 18, 228, 189, 183, 40, 154, 189, 90, 216, 207, 61, 100, 61, 23, 61, 90, 214, 132, 60, 124, 53, 179, 189, 204, 31, 37, 189, 166, 144, 28, 61, 212, 230, 77, 61, 93, 17, 18, 188, 95, 120, 183, 189, 162, 192, 25, 189, 177, 16, 98, 61, 164, 61, 114, 61, 17, 20, 151, 61, 203, 166, 48, 189, 43, 211, 46, 189, 226, 46, 192, 59, 167, 173, 231, 191, 228, 227, 215, 190, 146, 127, 134, 188, 232, 105, 31, 188, 127, 82, 162, 61, 167, 84, 244, 61, 232, 4, 170, 59, 248, 100, 5, 61, 17, 102, 60, 187, 76, 206, 97, 58, 105, 102, 132, 61, 248, 172, 105, 61, 109, 182, 89, 61, 61, 169, 16, 64, 200, 30, 169, 63, 5, 218, 131, 62, 239, 123, 67, 190, 69, 248, 164, 190, 180, 57, 130, 190, 139, 87, 51, 190, 33, 134, 44, 190, 88, 214, 10, 190, 203, 197, 54, 189, 223, 80, 29, 62, 105, 44, 144, 61, 222, 122, 35, 190, 38, 201, 28, 64, 45, 119, 152, 63, 94, 234, 63, 189, 146, 202, 131, 190, 148, 162, 147, 190, 52, 99, 60, 190, 238, 157, 104, 189, 29, 26, 173, 189, 13, 77, 5, 190, 70, 122, 45, 190, 99, 235, 210, 61, 207, 125, 176, 61, 32, 235, 21, 190, 216, 99, 13, 63, 203, 3, 156, 190, 181, 160, 94, 190, 242, 42, 201, 189, 158, 231, 16, 189, 124, 193, 133, 62, 203, 42, 29, 190, 2, 108, 97, 190, 106, 201, 92, 61, 167, 171, 183, 61, 209, 150, 173, 61, 110, 101, 147, 189, 167, 253, 7, 62, 178, 5, 86, 63, 42, 167, 51, 63, 246, 24, 147, 61, 205, 4, 236, 61, 190, 94, 135, 61, 194, 114, 103, 61, 167, 174, 252, 61, 187, 251, 129, 187, 0, 221, 237, 61, 1, 26, 172, 189, 175, 130, 221, 189, 74, 88, 33, 188, 34, 35, 95, 189, 227, 58, 179, 63, 91, 46, 65, 63, 169, 121, 136, 61, 111, 172, 49, 190, 18, 72, 35, 190, 229, 21, 65, 190, 108, 111, 91, 61, 59, 117, 70, 61, 253, 22, 24, 189, 246, 106, 48, 60, 154, 14, 142, 189, 199, 192, 26, 61, 52, 246, 231, 189, 43, 238, 87, 64, 19, 144, 208, 63, 194, 28, 153, 189, 2, 168, 112, 190, 135, 158, 229, 190, 146, 57, 156, 190, 173, 90, 28, 189, 52, 183, 174, 185, 106, 230, 245, 189, 57, 157, 116, 190, 60, 187, 95, 62, 240, 238, 88, 62, 96, 94, 104, 190, 37, 109, 26, 64, 43, 192, 230, 62, 51, 33, 221, 190, 4, 38, 185, 189, 47, 39, 195, 190, 90, 206, 40, 190, 201, 121, 82, 62, 7, 18, 155, 61, 100, 3, 0, 60, 151, 20, 215, 189, 14, 110, 151, 188, 9, 97, 138, 61, 181, 134, 53, 190, 81, 224, 13, 192, 108, 7, 147, 191, 36, 126, 54, 61, 98, 95, 45, 62, 180, 186, 38, 62, 19, 254, 112, 62, 70, 197, 190, 61, 200, 237, 143, 188, 48, 130, 150, 61, 71, 56, 17, 62, 65, 169, 178, 189, 88, 196, 107, 189, 23, 16, 42, 62, 174, 163, 11, 64, 221, 182, 149, 63, 217, 229, 21, 62, 99, 110, 116, 190, 96, 85, 136, 190, 135, 64, 189, 60, 122, 196, 150, 189, 99, 10, 47, 190, 5, 221, 8, 60, 180, 204, 145, 59, 253, 198, 47, 61, 248, 20, 102, 61, 255, 167, 13, 189, 49, 161, 109, 64, 78, 15, 191, 63, 154, 155, 162, 188, 48, 99, 162, 190, 30, 85, 249, 190, 174, 247, 114, 190, 178, 81, 140, 61, 196, 105, 14, 189, 134, 210, 177, 189, 251, 181, 6, 190, 235, 60, 167, 60, 226, 202, 211, 61, 185, 181, 90, 190, 195, 67, 43, 191, 16, 202, 110, 191, 113, 127, 255, 190, 12, 235, 159, 189, 68, 191, 238, 188, 246, 151, 36, 61, 44, 115, 175, 61, 125, 123, 196, 61, 214, 228, 182, 188, 92, 146, 175, 188, 81, 245, 54, 61, 185, 177, 56, 188, 65, 48, 91, 188, 39, 64, 86, 64, 128, 105, 34, 63, 163, 86, 133, 190, 112, 12, 214, 190, 11, 146, 196, 190, 162, 32, 25, 62, 38, 191, 212, 187, 70, 68, 64, 190, 90, 138, 161, 189, 36, 214, 166, 188, 188, 217, 182, 60, 28, 24, 218, 188, 50, 175, 139, 188, 185, 189, 32, 63, 119, 187, 134, 189, 139, 151, 241, 189, 92, 142, 209, 189, 241, 29, 2, 61, 233, 46, 65, 60, 74, 152, 133, 189, 138, 231, 214, 188, 22, 140, 18, 189, 248, 222, 48, 61, 116, 141, 202, 60, 95, 202, 197, 59, 238, 254, 195, 187, 108, 98, 145, 191, 208, 183, 88, 190, 81, 200, 11, 62, 33, 223, 80, 62, 58, 126, 56, 62, 200, 151, 234, 60, 210, 196, 75, 60, 100, 199, 187, 61, 184, 210, 251, 60, 98, 63, 142, 189, 215, 230, 235, 59, 52, 29, 93, 188, 40, 149, 128, 187, 124, 118, 79, 63, 224, 232, 227, 62, 231, 26, 239, 62, 97, 102, 41, 62, 147, 90, 229, 61, 57, 20, 131, 61, 134, 164, 178, 60, 26, 157, 186, 61, 191, 211, 62, 189, 102, 201, 70, 61, 128, 178, 81, 61, 62, 247, 155, 61, 31, 41, 124, 60, 235, 177, 229, 190, 24, 19, 137, 190, 169, 186, 219, 189, 138, 108, 69, 61, 38, 0, 2, 62, 199, 187, 150, 61, 169, 236, 7, 61, 170, 65, 248, 59, 216, 185, 46, 61, 218, 230, 157, 58, 3, 105, 161, 186, 108, 173, 8, 188, 26, 16, 167, 59, 177, 120, 81, 60, 16, 247, 189, 60, 212, 92, 45, 189, 124, 31, 143, 189, 180, 214, 107, 189, 201, 202, 212, 188, 175, 251, 192, 59, 242, 96, 141, 60, 60, 148, 136, 60, 21, 124, 133, 188, 157, 14, 248, 187, 188, 219, 66, 188, 153, 243, 42, 59, 176, 62, 98, 64, 59, 231, 180, 63, 24, 53, 69, 190, 26, 187, 36, 191, 28, 201, 215, 190, 89, 184, 203, 61, 57, 231, 46, 62, 127, 131, 139, 189, 87, 1, 56, 190, 105, 40, 134, 61, 143, 180, 106, 61, 221, 248, 198, 186, 221, 218, 51, 189, 50, 151, 166, 190, 36, 122, 205, 61, 29, 127, 75, 62, 32, 253, 3, 189, 88, 59, 18, 189, 102, 67, 13, 190, 133, 232, 172, 188, 43, 239, 198, 61, 144, 240, 238, 188, 100, 194, 188, 188, 248, 7, 43, 61, 171, 97, 32, 60, 225, 60, 202, 60, 7, 216, 21, 190, 99, 43, 249, 188, 67, 238, 141, 61, 195, 218, 112, 61, 13, 210, 252, 59, 218, 187, 234, 187, 67, 126, 253, 188, 145, 115, 170, 188, 225, 36, 0, 61, 249, 120, 130, 60, 161, 121, 107, 188, 61, 90, 51, 60, 216, 8, 23, 60, 78, 63, 98, 64, 143, 190, 194, 63, 194, 80, 107, 188, 96, 179, 97, 190, 24, 139, 49, 191, 204, 53, 160, 190, 165, 197, 227, 61, 29, 197, 143, 188, 23, 221, 130, 189, 134, 22, 146, 190, 85, 88, 201, 61, 229, 38, 85, 62, 19, 232, 100, 190, 196, 233, 192, 190, 131, 110, 141, 187, 113, 169, 108, 62, 250, 103, 3, 61, 119, 189, 12, 189, 192, 120, 31, 60, 83, 183, 168, 60, 39, 103, 117, 188, 88, 42, 81, 189, 186, 43, 53, 188, 182, 235, 160, 189, 191, 14, 37, 189, 85, 233, 138, 61, 74, 254, 226, 190, 254, 205, 47, 189, 116, 151, 216, 61, 137, 14, 211, 59, 115, 203, 8, 62, 220, 252, 120, 61, 11, 138, 83, 189, 248, 97, 171, 187, 226, 239, 238, 188, 39, 3, 159, 60, 48, 20, 166, 187, 243, 77, 56, 189, 28, 39, 14, 61, 94, 74, 218, 63, 193, 68, 147, 63, 213, 132, 238, 62, 242, 208, 71, 190, 20, 31, 182, 190, 5, 227, 5, 190, 207, 100, 51, 61, 108, 231, 125, 61, 9, 32, 254, 189, 31, 213, 242, 189, 102, 3, 155, 188, 96, 162, 57, 61, 12, 160, 10, 188, 94, 254, 52, 191, 191, 242, 194, 190, 209, 129, 41, 188, 239, 225, 3, 62, 14, 8, 60, 62, 180, 59, 160, 61, 96, 252, 190, 187, 250, 129, 84, 61, 100, 123, 62, 61, 88, 64, 72, 61, 76, 110, 176, 187, 91, 11, 188, 188, 235, 105, 243, 60, 1, 199, 177, 61, 200, 125, 96, 189, 65, 17, 157, 189, 172, 67, 20, 60, 209, 169, 17, 188, 167, 128, 40, 59, 191, 151, 72, 60, 28, 10, 172, 188, 207, 162, 178, 60, 110, 251, 188, 60, 118, 32, 75, 60, 61, 75, 202, 60, 21, 224, 7, 187, 190, 27, 238, 190, 87, 58, 92, 63, 47, 124, 86, 63, 159, 171, 14, 63, 229, 32, 174, 62, 127, 230, 207, 60, 19, 255, 187, 189, 88, 3, 215, 189, 243, 213, 45, 190, 86, 216, 137, 189, 41, 194, 129, 60, 206, 181, 61, 189, 117, 159, 226, 188, 71, 206, 195, 63, 29, 202, 66, 63, 245, 55, 171, 62, 159, 35, 234, 61, 124, 60, 17, 190, 34, 145, 135, 190, 157, 85, 50, 190, 34, 71, 163, 189, 101, 146, 204, 59, 55, 80, 6, 62, 240, 158, 213, 61, 201, 118, 192, 60, 161, 193, 178, 61, 160, 229, 13, 63, 182, 56, 182, 190, 31, 6, 254, 190, 176, 183, 247, 190, 41, 243, 172, 190, 68, 161, 254, 189, 144, 101, 3, 62, 124, 146, 23, 62, 35, 78, 54, 62, 212, 246, 115, 61, 60, 77, 58, 60, 117, 217, 183, 188, 4, 192, 162, 60, 222, 14, 167, 191, 229, 63, 128, 190, 13, 10, 208, 61, 165, 126, 45, 62, 215, 111, 129, 62, 197, 111, 21, 62, 130, 139, 149, 61, 112, 185, 138, 61, 78, 53, 30, 61, 159, 142, 97, 61, 242, 72, 90, 61, 76, 146, 112, 186, 180, 207, 197, 60, 210, 0, 21, 64, 73, 69, 215, 63, 126, 177, 128, 63, 159, 17, 191, 62, 141, 203, 205, 189, 254, 252, 191, 190, 214, 71, 161, 190, 7, 226, 102, 190, 100, 96, 82, 190, 194, 209, 53, 190, 183, 179, 66, 190, 198, 106, 22, 190, 89, 32, 190, 189, 217, 118, 145, 63, 250, 209, 75, 63, 63, 11, 145, 62, 187, 101, 135, 190, 89, 170, 6, 191, 196, 206, 195, 190, 141, 44, 39, 190, 97, 162, 174, 188, 118, 191, 101, 61, 201, 253, 44, 189, 97, 128, 77, 189, 90, 96, 145, 59, 183, 172, 99, 60, 46, 131, 89, 62, 18, 47, 74, 63, 163, 76, 74, 63, 175, 204, 210, 62, 130, 46, 106, 62, 97, 101, 162, 189, 141, 97, 140, 190, 64, 116, 133, 190, 226, 172, 143, 190, 88, 49, 48, 190, 87, 224, 250, 189, 57, 35, 73, 189, 232, 199, 232, 60, 180, 11, 3, 64, 58, 91, 192, 63, 249, 71, 106, 63, 15, 247, 173, 62, 57, 116, 108, 190, 198, 154, 236, 190, 37, 137, 202, 190, 157, 185, 185, 190, 86, 124, 97, 190, 84, 96, 4, 190, 214, 40, 194, 189, 50, 59, 103, 189, 178, 255, 2, 189, 173, 194, 81, 61, 153, 54, 133, 190, 10, 196, 238, 190, 20, 173, 180, 190, 184, 98, 175, 190, 121, 61, 62, 190, 123, 234, 155, 61, 76, 162, 81, 62, 107, 218, 79, 62, 32, 188, 37, 62, 163, 164, 203, 61, 190, 122, 9, 189, 66, 100, 124, 187, 226, 131, 170, 191, 39, 127, 138, 188, 9, 183, 143, 62, 236, 112, 52, 62, 118, 91, 78, 62, 190, 198, 42, 61, 62, 111, 220, 189, 65, 128, 172, 189, 247, 209, 86, 189, 89, 54, 182, 188, 196, 20, 33, 189, 44, 224, 248, 60, 175, 135, 51, 61, 94, 165, 1, 64, 4, 200, 188, 63, 131, 141, 78, 63, 71, 116, 189, 61, 216, 105, 238, 190, 216, 211, 24, 191, 239, 125, 215, 190, 161, 167, 138, 190, 210, 216, 44, 190, 22, 109, 179, 189, 49, 63, 175, 189, 223, 18, 201, 189, 160, 23, 13, 189, 8, 247, 149, 63, 121, 199, 252, 62, 82, 201, 12, 62, 144, 100, 13, 190, 169, 187, 232, 190, 11, 95, 172, 190, 213, 224, 123, 60, 192, 156, 97, 61, 58, 4, 142, 61, 45, 166, 76, 61, 116, 15, 172, 189, 126, 38, 252, 188, 210, 55, 71, 60, 16, 96, 39, 64, 168, 181, 202, 63, 198, 64, 22, 63, 51, 234, 166, 190, 121, 77, 66, 191, 169, 27, 168, 190, 143, 74, 87, 189, 32, 250, 216, 188, 141, 184, 91, 189, 155, 2, 30, 190, 180, 123, 55, 189, 115, 249, 54, 60, 225, 91, 193, 61, 96, 191, 139, 63, 33, 10, 78, 62, 138, 84, 193, 189, 193, 106, 216, 190, 50, 138, 36, 191, 169, 234, 187, 61, 112, 5, 208, 61, 231, 208, 17, 59, 222, 203, 143, 188, 253, 1, 237, 189, 11, 165, 17, 60, 246, 61, 43, 62, 249, 22, 66, 61, 36, 224, 172, 191, 79, 226, 3, 191, 122, 200, 185, 61, 99, 7, 1, 63, 139, 223, 7, 63, 107, 180, 64, 62, 208, 199, 233, 188, 18, 152, 87, 189, 133, 37, 29, 189, 89, 93, 37, 62, 78, 36, 185, 61, 124, 46, 6, 61, 26, 95, 68, 189, 2, 20, 29, 63, 249, 11, 148, 63, 240, 125, 95, 63, 147, 184, 109, 62, 88, 84, 61, 190, 4, 248, 214, 190, 231, 85, 187, 190, 153, 120, 69, 190, 103, 102, 1, 190, 147, 147, 150, 189, 52, 101, 180, 189, 193, 48, 7, 189, 22, 52, 35, 61, 250, 131, 177, 63, 143, 153, 47, 63, 0, 160, 53, 62, 148, 255, 100, 190, 184, 110, 9, 191, 129, 192, 186, 190, 122, 48, 8, 189, 78, 132, 214, 61, 61, 54, 13, 62, 93, 65, 149, 59, 99, 221, 51, 189, 135, 253, 61, 189, 253, 189, 202, 60, 193, 125, 53, 191, 99, 44, 65, 191, 154, 200, 249, 190, 93, 230, 2, 190, 214, 145, 250, 61, 242, 125, 153, 62, 158, 182, 173, 62, 37, 241, 118, 62, 123, 241, 29, 62, 112, 98, 102, 61, 52, 36, 220, 186, 111, 60, 189, 60, 146, 147, 165, 188, 252, 36, 164, 63, 228, 152, 130, 63, 230, 108, 42, 63, 71, 192, 165, 62, 87, 65, 0, 190, 200, 155, 151, 190, 248, 75, 204, 187, 78, 162, 209, 189, 245, 72, 30, 189, 255, 40, 73, 188, 107, 209, 68, 189, 88, 146, 154, 189, 85, 178, 84, 189, 236, 225, 19, 64, 119, 173, 164, 62, 131, 195, 128, 190, 209, 59, 230, 190, 56, 114, 21, 191, 223, 205, 76, 190, 32, 121, 2, 62, 183, 78, 105, 60, 245, 171, 160, 186, 23, 38, 81, 189, 18, 4, 146, 189, 158, 175, 200, 58, 7, 241, 222, 60, 156, 182, 216, 189, 78, 14, 44, 188, 169, 234, 235, 189, 44, 32, 149, 190, 211, 6, 41, 190, 172, 169, 41, 62, 146, 61, 51, 189, 139, 76, 87, 188, 61, 24, 244, 189, 219, 56, 4, 190, 8, 30, 138, 189, 138, 230, 23, 61, 157, 216, 201, 60, 142, 118, 105, 63, 223, 163, 167, 63, 33, 25, 99, 63, 56, 37, 159, 62, 220, 179, 203, 189, 2, 184, 193, 190, 120, 222, 120, 190, 85, 162, 231, 189, 152, 193, 159, 189, 102, 28, 132, 189, 35, 243, 242, 189, 116, 76, 47, 190, 175, 127, 246, 189, 238, 154, 54, 64, 85, 199, 204, 63, 140, 43, 53, 63, 14, 108, 56, 189, 49, 197, 58, 191, 134, 10, 33, 191, 193, 60, 117, 190, 27, 32, 15, 190, 114, 248, 141, 60, 86, 248, 183, 189, 167, 250, 59, 190, 186, 244, 1, 190, 189, 174, 212, 189, 154, 140, 176, 191, 61, 123, 163, 191, 226, 117, 76, 191, 246, 55, 232, 190, 209, 173, 64, 190, 115, 168, 102, 62, 117, 228, 122, 62, 202, 22, 1, 62, 83, 142, 54, 62, 33, 202, 144, 61, 135, 232, 46, 62, 114, 198, 79, 62, 55, 14, 66, 62, 220, 44, 25, 64, 35, 95, 184, 63, 52, 174, 17, 63, 6, 119, 187, 190, 99, 43, 45, 191, 211, 122, 97, 190, 195, 95, 32, 61, 1, 128, 227, 61, 55, 184, 210, 189, 42, 122, 6, 190, 182, 96, 17, 189, 79, 39, 136, 61, 37, 127, 4, 62, 36, 61, 105, 190, 102, 249, 194, 189, 50, 13, 188, 60, 228, 207, 126, 61, 11, 7, 11, 62, 179, 165, 28, 188, 107, 128, 156, 59, 254, 220, 36, 61, 125, 215, 23, 61, 36, 153, 51, 61, 76, 47, 141, 188, 23, 197, 28, 189, 72, 42, 151, 188, 106, 167, 14, 189, 205, 175, 218, 188, 81, 115, 79, 60, 173, 210, 55, 61, 73, 201, 174, 60, 109, 179, 110, 59, 227, 226, 177, 188, 174, 211, 191, 188, 0, 95, 172, 60, 98, 164, 252, 59, 196, 46, 0, 59, 144, 46, 120, 187, 130, 158, 79, 188, 154, 183, 204, 63, 240, 183, 154, 63, 208, 117, 80, 63, 98, 53, 249, 61, 108, 168, 153, 190, 139, 51, 193, 190, 247, 195, 48, 190, 237, 132, 218, 188, 90, 169, 16, 189, 23, 140, 1, 189, 126, 39, 236, 189, 235, 36, 161, 189, 56, 20, 139, 188, 4, 21, 50, 60, 57, 181, 41, 189, 0, 234, 88, 60, 149, 227, 51, 61, 29, 159, 79, 61, 21, 125, 60, 60, 11, 161, 146, 188, 253, 77, 248, 188, 65, 34, 226, 188, 171, 48, 130, 187, 247, 148, 64, 59, 52, 172, 136, 188, 1, 190, 228, 188, 53, 17, 165, 189, 113, 96, 220, 188, 70, 44, 165, 188, 231, 65, 195, 187, 23, 82, 193, 60, 85, 255, 162, 60, 162, 120, 137, 186, 113, 30, 56, 187, 144, 36, 133, 188, 33, 31, 151, 188, 102, 64, 172, 186, 242, 140, 36, 59, 199, 82, 66, 60, 184, 148, 163, 63, 76, 239, 119, 63, 68, 166, 52, 63, 41, 245, 197, 61, 91, 180, 134, 190, 21, 162, 197, 190, 134, 191, 63, 190, 114, 17, 194, 189, 60, 152, 5, 190, 219, 93, 164, 189, 126, 100, 74, 190, 206, 137, 237, 189, 116, 94, 242, 60, 16, 196, 123, 190, 106, 114, 52, 190, 23, 72, 236, 189, 54, 248, 41, 188, 55, 220, 215, 61, 210, 127, 242, 61, 242, 79, 14, 61, 117, 240, 11, 61, 8, 93, 164, 188, 171, 119, 158, 188, 114, 112, 138, 59, 90, 37, 207, 60, 145, 216, 214, 60, 232, 208, 8, 190, 39, 255, 178, 189, 92, 175, 238, 188, 126, 79, 136, 60, 191, 23, 47, 61, 204, 195, 245, 60, 193, 229, 49, 60, 176, 239, 116, 187, 59, 107, 47, 60, 161, 162, 192, 60, 164, 135, 250, 60, 49, 225, 122, 60, 55, 16, 135, 188, 24, 27, 89, 64, 4, 55, 181, 63, 4, 191, 198, 62, 117, 92, 85, 190, 102, 196, 102, 191, 2, 154, 134, 190, 238, 138, 141, 61, 238, 72, 132, 189, 255, 132, 240, 188, 97, 228, 180, 189, 111, 178, 3, 189, 177, 246, 139, 61, 71, 99, 106, 61, 188, 13, 57, 61, 83, 22, 68, 189, 216, 23, 148, 188, 24, 155, 55, 60, 222, 123, 79, 61, 58, 149, 72, 60, 162, 164, 157, 60, 52, 171, 90, 188, 45, 189, 239, 186, 244, 241, 194, 185, 24, 126, 99, 188, 158, 114, 129, 187, 88, 209, 93, 59, 149, 82, 51, 190, 203, 116, 227, 186, 161, 161, 178, 60, 51, 174, 224, 59, 21, 231, 162, 61, 17, 22, 211, 188, 3, 52, 13, 60, 121, 151, 218, 60, 132, 6, 64, 58, 56, 213, 52, 188, 112, 242, 49, 189, 94, 144, 62, 189, 58, 119, 208, 57, 59, 94, 1, 64, 165, 67, 175, 63, 32, 233, 25, 63, 237, 126, 19, 190, 250, 251, 223, 190, 149, 154, 201, 190, 173, 3, 205, 188, 183, 48, 155, 61, 136, 165, 203, 189, 252, 90, 143, 60, 90, 11, 59, 188, 97, 119, 8, 188, 41, 86, 245, 60, 85, 122, 134, 63, 71, 105, 157, 62, 248, 218, 123, 190, 137, 75, 27, 191, 226, 222, 10, 191, 64, 130, 51, 189, 88, 63, 77, 62, 238, 217, 67, 62, 150, 153, 6, 62, 3, 5, 183, 189, 21, 252, 35, 189, 175, 243, 139, 61, 140, 195, 91, 61, 91, 255, 72, 191, 191, 21, 199, 190, 201, 66, 84, 189, 75, 116, 121, 62, 171, 196, 157, 62, 29, 81, 150, 62, 240, 133, 1, 62, 176, 1, 150, 188, 67, 119, 213, 188, 71, 238, 129, 189, 177, 9, 133, 189, 56, 45, 230, 188, 207, 25, 184, 186, 130, 232, 135, 64, 222, 75, 155, 63, 99, 46, 123, 190, 149, 31, 191, 62, 231, 139, 211, 190, 249, 243, 172, 190, 105, 113, 139, 61, 147, 52, 102, 190, 129, 223, 34, 189, 79, 89, 171, 189, 63, 182, 237, 189, 240, 96, 83, 61, 97, 218, 127, 189, 233, 124, 17, 63, 67, 115, 118, 62, 221, 105, 92, 61, 198, 19, 106, 189, 61, 241, 40, 190, 220, 145, 223, 189, 52, 72, 80, 189, 254, 102, 112, 189, 239, 28, 86, 61, 36, 20, 117, 61, 209, 200, 38, 189, 105, 72, 204, 60, 31, 241, 151, 58, 83, 210, 185, 190, 110, 44, 88, 189, 115, 201, 96, 188, 178, 142, 189, 189, 5, 243, 88, 60, 130, 147, 19, 61, 253, 71, 123, 61, 210, 111, 221, 61, 57, 95, 3, 61, 167, 50, 166, 61, 7, 142, 36, 61, 180, 26, 162, 189, 230, 10, 3, 188, 38, 34, 77, 63, 156, 100, 115, 63, 161, 192, 43, 63, 83, 200, 99, 62, 200, 2, 0, 190, 236, 175, 133, 190, 151, 153, 111, 189, 29, 0, 4, 60, 154, 159, 204, 189, 48, 26, 111, 60, 73, 221, 249, 188, 17, 113, 38, 189, 76, 14, 18, 60, 119, 196, 128, 63, 163, 43, 72, 62, 126, 244, 92, 189, 4, 57, 57, 190, 80, 87, 148, 190, 169, 192, 74, 190, 222, 14, 147, 61, 113, 2, 155, 61, 253, 120, 47, 60, 251, 199, 49, 61, 43, 208, 132, 188, 250, 30, 178, 187, 68, 36, 30, 187, 147, 245, 79, 190, 253, 214, 5, 190, 162, 185, 97, 189, 107, 167, 162, 188, 180, 2, 124, 61, 184, 137, 180, 61, 56, 141, 77, 61, 87, 175, 201, 60, 19, 34, 169, 188, 61, 65, 94, 189, 180, 110, 190, 188, 158, 37, 176, 59, 193, 60, 118, 60, 58, 47, 55, 63, 94, 108, 114, 63, 228, 151, 60, 63, 217, 61, 198, 62, 51, 246, 154, 61, 235, 159, 110, 190, 40, 140, 60, 190, 153, 182, 202, 189, 81, 255, 57, 190, 107, 56, 147, 189, 143, 212, 29, 189, 243, 217, 42, 189, 42, 89, 185, 185, 75, 8, 13, 64, 71, 116, 125, 63, 110, 221, 128, 62, 181, 6, 119, 190, 69, 228, 34, 191, 207, 74, 21, 191, 176, 52, 107, 190, 169, 219, 214, 189, 8, 112, 136, 59, 97, 145, 147, 59, 7, 178, 35, 60, 141, 88, 105, 60, 166, 193, 40, 188, 82, 45, 164, 190, 147, 78, 1, 191, 144, 64, 7, 191, 220, 236, 241, 190, 182, 27, 149, 190, 137, 53, 171, 61, 114, 67, 85, 62, 1, 149, 67, 62, 246, 162, 121, 62, 39, 108, 151, 61, 76, 1, 116, 60, 175, 214, 167, 61, 172, 28, 210, 60, 72, 6, 88, 64, 14, 113, 171, 63, 163, 127, 53, 62, 208, 230, 234, 190, 217, 176, 39, 191, 216, 75, 184, 190, 40, 16, 130, 62, 71, 215, 79, 188, 244, 93, 135, 189, 106, 7, 240, 188, 124, 90, 190, 188, 237, 72, 72, 185, 91, 162, 171, 61, 93, 189, 84, 190, 167, 84, 131, 189, 201, 233, 14, 61, 194, 190, 124, 189, 197, 81, 201, 189, 106, 18, 162, 188, 107, 63, 5, 61, 39, 72, 24, 61, 223, 17, 239, 60, 137, 117, 239, 188, 25, 251, 129, 188, 129, 4, 160, 187, 72, 108, 186, 60, 206, 16, 56, 190, 191, 188, 140, 188, 108, 245, 141, 61, 177, 155, 144, 61, 122, 19, 142, 61, 102, 172, 31, 189, 227, 208, 197, 189, 129, 87, 217, 187, 179, 200, 169, 188, 94, 65, 246, 59, 125, 137, 15, 187, 159, 34, 231, 187, 63, 122, 29, 184, 134, 18, 22, 64, 251, 165, 178, 63, 223, 180, 53, 63, 10, 249, 160, 189, 119, 17, 40, 191, 225, 137, 29, 191, 200, 166, 94, 189, 39, 234, 15, 189, 229, 162, 168, 186, 53, 86, 96, 189, 129, 68, 210, 189, 211, 93, 20, 189, 62, 244, 245, 187, 198, 238, 136, 60, 92, 170, 202, 187, 26, 105, 61, 188, 66, 186, 109, 60, 220, 184, 161, 60, 102, 114, 243, 60, 32, 113, 142, 188, 170, 48, 140, 188, 0, 116, 54, 189, 55, 51, 35, 60, 123, 184, 165, 188, 201, 16, 108, 188, 26, 205, 225, 60, 203, 10, 179, 190, 60, 26, 207, 189, 53, 104, 212, 188, 49, 10, 174, 61, 127, 74, 53, 62, 176, 230, 173, 61, 43, 12, 116, 189, 250, 8, 159, 188, 92, 36, 192, 188, 95, 16, 113, 188, 153, 61, 19, 61, 144, 113, 151, 59, 240, 250, 149, 187, 155, 54, 196, 63, 136, 143, 151, 63, 216, 165, 36, 63, 236, 202, 142, 189, 55, 67, 26, 191, 142, 119, 8, 191, 103, 82, 36, 190, 78, 183, 51, 59, 0, 192, 39, 61, 15, 42, 40, 189, 6, 133, 243, 189, 41, 34, 118, 189, 5, 94, 227, 59, 204, 23, 32, 190, 252, 249, 199, 189, 67, 8, 73, 61, 239, 226, 188, 61, 81, 146, 210, 61, 231, 138, 222, 187, 118, 95, 204, 189, 69, 18, 173, 189, 182, 80, 191, 188, 230, 131, 252, 59, 11, 85, 103, 60, 49, 6, 255, 188, 139, 156, 210, 188, 251, 131, 56, 190, 21, 39, 146, 189, 81, 130, 153, 188, 19, 79, 83, 187, 56, 28, 151, 61, 246, 108, 132, 61, 157, 158, 9, 60, 112, 9, 13, 58, 169, 22, 201, 188, 57, 184, 97, 188, 14, 48, 176, 60, 78, 44, 75, 60, 235, 39, 207, 59, 202, 96, 13, 64, 36, 242, 174, 63, 101, 201, 200, 62, 123, 148, 24, 191, 8, 84, 51, 191, 86, 41, 134, 190, 68, 169, 12, 62, 16, 24, 100, 62, 182, 138, 221, 187, 55, 190, 20, 190, 96, 250, 209, 189, 135, 41, 253, 187, 108, 135, 67, 60, 171, 107, 138, 189, 137, 248, 95, 187, 13, 199, 22, 61, 122, 42, 92, 60, 44, 157, 168, 188, 11, 127, 47, 189, 70, 194, 102, 189, 209, 166, 177, 188, 235, 47, 60, 61, 184, 108, 129, 188, 83, 19, 195, 188, 115, 52, 153, 188, 73, 184, 213, 188, 15, 132, 113, 189, 13, 105, 207, 188, 168, 28, 253, 60, 26, 223, 139, 61, 24, 123, 42, 61, 190, 123, 184, 188, 206, 201, 234, 188, 234, 242, 190, 188, 98, 100, 46, 188, 178, 58, 208, 60, 244, 190, 68, 60, 82, 208, 37, 188, 119, 221, 70, 187, 81, 203, 182, 60, 118, 151, 116, 62, 177, 114, 138, 62, 230, 183, 7, 60, 124, 240, 248, 189, 91, 103, 181, 189, 98, 172, 132, 189, 79, 9, 195, 61, 176, 85, 216, 61, 27, 130, 137, 61, 28, 136, 216, 60, 88, 187, 176, 188, 152, 9, 222, 60, 188, 61, 26, 191, 111, 111, 184, 190, 65, 226, 3, 190, 140, 211, 207, 60, 12, 118, 23, 62, 86, 248, 190, 61, 96, 100, 7, 186, 218, 181, 101, 189, 48, 160, 20, 189, 10, 64, 212, 60, 206, 183, 70, 60, 47, 134, 232, 187, 243, 184, 228, 59, 114, 215, 183, 61, 224, 34, 164, 61, 148, 161, 243, 60, 219, 65, 23, 188, 108, 210, 167, 188, 27, 82, 13, 189, 40, 53, 59, 60, 158, 184, 137, 187, 187, 47, 89, 189, 171, 83, 82, 189, 222, 66, 225, 188, 193, 33, 100, 58, 197, 119, 165, 60, 217, 9, 237, 63, 165, 216, 159, 63, 24, 78, 36, 63, 113, 4, 183, 188, 196, 19, 221, 190, 251, 11, 221, 190, 216, 119, 3, 190, 159, 35, 26, 189, 94, 32, 226, 189, 117, 34, 25, 190, 221, 108, 236, 189, 163, 203, 241, 186, 100, 176, 167, 61, 65, 234, 64, 191, 36, 81, 193, 190, 213, 214, 17, 190, 174, 163, 29, 189, 94, 141, 87, 62, 235, 10, 46, 62, 130, 26, 105, 188, 14, 226, 153, 61, 38, 35, 95, 61, 163, 243, 209, 188, 23, 206, 198, 60, 107, 231, 184, 60, 185, 200, 9, 61, 118, 105, 113, 190, 239, 118, 107, 190, 179, 47, 230, 189, 172, 202, 176, 188, 253, 29, 139, 189, 56, 118, 184, 187, 119, 254, 154, 61, 193, 204, 12, 61, 26, 66, 173, 61, 221, 86, 240, 61, 153, 92, 172, 188, 67, 73, 39, 189, 183, 209, 21, 189, 171, 217, 60, 188, 4, 173, 253, 61, 144, 93, 69, 62, 255, 14, 111, 189, 212, 77, 215, 189, 74, 7, 30, 190, 129, 47, 14, 190, 153, 167, 225, 188, 198, 81, 29, 189, 71, 171, 44, 189, 74, 251, 234, 188, 176, 202, 96, 60, 89, 215, 99, 61, 4, 101, 86, 191, 108, 168, 32, 191, 106, 129, 170, 190, 149, 160, 225, 188, 253, 185, 45, 62, 163, 211, 70, 62, 213, 152, 238, 61, 1, 151, 136, 61, 227, 17, 14, 61, 190, 152, 51, 61, 79, 167, 33, 61, 222, 3, 50, 61, 139, 13, 243, 60, 91, 189, 90, 62, 181, 138, 30, 62, 4, 201, 86, 61, 109, 126, 65, 60, 182, 147, 13, 189, 228, 177, 231, 188, 47, 98, 59, 188, 106, 124, 217, 60, 62, 217, 245, 60, 12, 17, 29, 60, 21, 32, 138, 188, 148, 189, 51, 189, 24, 189, 192, 188, 209, 158, 136, 63, 97, 123, 88, 63, 224, 98, 10, 63, 193, 222, 98, 188, 144, 41, 146, 190, 141, 181, 173, 190, 33, 13, 79, 190, 11, 97, 188, 188, 136, 177, 197, 188, 254, 161, 39, 189, 2, 150, 159, 189, 191, 247, 152, 189, 39, 90, 44, 186, 136, 39, 88, 191, 29, 192, 14, 191, 116, 166, 121, 190, 118, 169, 75, 60, 62, 38, 79, 62, 237, 96, 44, 62, 68, 195, 45, 59, 59, 97, 182, 188, 253, 95, 161, 187, 61, 49, 202, 60, 75, 31, 106, 61, 222, 156, 63, 61, 58, 31, 182, 60, 169, 122, 150, 189, 201, 125, 26, 190, 11, 209, 0, 190, 150, 245, 139, 189, 60, 211, 8, 189, 218, 21, 195, 60, 173, 204, 82, 61, 235, 252, 44, 187, 180, 59, 212, 59, 214, 130, 155, 186, 73, 90, 137, 60, 7, 107, 87, 61, 47, 125, 3, 61, 111, 109, 224, 62, 93, 98, 146, 62, 75, 155, 222, 62, 135, 61, 171, 62, 2, 230, 174, 62, 39, 228, 72, 62, 142, 172, 45, 61, 195, 131, 118, 60, 111, 204, 152, 189, 240, 207, 79, 189, 67, 227, 26, 189, 9, 188, 91, 189, 203, 15, 26, 189, 75, 216, 205, 190, 14, 129, 54, 190, 70, 119, 162, 189, 182, 29, 19, 189, 21, 118, 81, 60, 236, 88, 195, 60, 202, 227, 68, 61, 69, 188, 104, 61, 159, 12, 109, 61, 100, 106, 145, 60, 28, 225, 206, 60, 16, 177, 46, 58, 2, 120, 22, 60, 164, 53, 239, 60, 12, 50, 172, 188, 182, 152, 129, 189, 144, 243, 121, 189, 119, 194, 58, 189, 234, 69, 24, 188, 177, 2, 38, 59, 124, 204, 204, 58, 40, 213, 62, 188, 22, 182, 15, 60, 38, 240, 3, 60, 30, 77, 93, 60, 10, 199, 137, 59, 207, 203, 214, 63, 56, 73, 59, 63, 125, 53, 52, 62, 111, 76, 177, 60, 254, 37, 1, 62, 231, 123, 83, 62, 169, 43, 166, 61, 93, 53, 175, 189, 16, 15, 32, 190, 199, 28, 58, 60, 98, 45, 139, 188, 249, 176, 94, 188, 92, 181, 129, 189, 193, 105, 127, 191, 131, 169, 153, 190, 92, 16, 167, 62, 252, 209, 74, 62, 97, 254, 61, 62, 104, 244, 62, 61, 238, 102, 11, 189, 202, 45, 200, 61, 133, 118, 240, 187, 168, 10, 152, 189, 77, 243, 185, 188, 191, 128, 117, 189, 158, 212, 116, 188, 88, 199, 111, 62, 108, 128, 140, 188, 155, 194, 242, 189, 150, 93, 93, 61, 198, 103, 146, 189, 71, 245, 166, 189, 162, 29, 183, 59, 218, 136, 141, 188, 32, 248, 69, 61, 25, 82, 207, 58, 0, 71, 185, 188, 156, 151, 84, 61, 151, 129, 233, 59, 96, 118, 209, 191, 192, 57, 100, 190, 242, 183, 27, 62, 231, 32, 37, 62, 120, 51, 129, 62, 252, 140, 7, 62, 95, 129, 200, 60, 95, 201, 144, 61, 251, 143, 134, 60, 178, 122, 36, 189, 162, 179, 223, 60, 123, 42, 168, 59, 225, 33, 33, 61, 142, 55, 147, 190, 222, 80, 47, 190, 239, 30, 224, 189, 234, 66, 189, 189, 207, 232, 103, 189, 86, 13, 212, 188, 79, 227, 93, 59, 108, 224, 70, 59, 17, 72, 31, 60, 43, 225, 119, 60, 52, 115, 162, 60, 167, 101, 130, 60, 75, 75, 153, 60, 184, 235, 56, 61, 193, 23, 219, 60, 197, 145, 206, 59, 5, 52, 162, 188, 195, 66, 171, 188, 85, 248, 238, 188, 130, 182, 202, 188, 122, 98, 228, 188, 208, 70, 14, 60, 183, 56, 36, 60, 32, 128, 153, 188, 35, 203, 168, 188, 30, 72, 76, 188, 193, 241, 56, 63, 253, 255, 181, 62, 55, 168, 189, 62, 202, 180, 185, 62, 167, 90, 4, 62, 165, 88, 14, 61, 165, 194, 162, 189, 3, 242, 173, 189, 89, 12, 190, 189, 83, 228, 14, 190, 112, 172, 1, 190, 180, 115, 141, 189, 103, 86, 148, 189, 123, 179, 79, 191, 117, 82, 136, 190, 249, 5, 99, 189, 204, 180, 220, 189, 214, 211, 7, 62, 169, 121, 221, 61, 180, 44, 62, 61, 43, 232, 25, 61, 199, 141, 40, 188, 218, 2, 135, 61, 39, 172, 9, 187, 180, 56, 4, 60, 94, 175, 153, 61, 229, 77, 20, 62, 179, 75, 29, 189, 233, 86, 221, 189, 252, 56, 163, 60, 40, 204, 64, 189, 220, 29, 77, 189, 84, 207, 100, 59, 225, 190, 101, 187, 161, 39, 6, 60, 111, 224, 12, 187, 89, 29, 138, 61, 144, 152, 250, 60, 153, 3, 25, 60, 174, 46, 183, 191, 252, 61, 229, 190, 69, 58, 167, 189, 239, 22, 16, 188, 120, 199, 225, 61, 167, 40, 222, 61, 125, 230, 161, 60, 215, 90, 62, 61, 154, 206, 82, 61, 161, 57, 197, 60, 114, 149, 225, 60, 78, 206, 25, 61, 95, 201, 132, 61, 108, 144, 29, 190, 239, 174, 164, 189, 169, 204, 81, 189, 63, 149, 129, 189, 143, 55, 7, 189, 131, 146, 62, 187, 241, 27, 121, 60]).concat([65, 188, 253, 60, 168, 190, 85, 61, 230, 73, 113, 61, 57, 46, 133, 61, 232, 239, 38, 61, 45, 182, 26, 61, 212, 164, 50, 60, 108, 0, 173, 188, 168, 28, 235, 59, 89, 209, 145, 188, 114, 48, 216, 59, 162, 23, 88, 188, 191, 233, 37, 188, 62, 202, 82, 59, 138, 179, 66, 188, 218, 199, 22, 188, 132, 171, 238, 58, 70, 100, 210, 60, 188, 125, 226, 60, 72, 58, 171, 191, 241, 90, 175, 190, 13, 123, 224, 188, 80, 2, 183, 187, 7, 107, 215, 61, 147, 164, 222, 61, 149, 60, 97, 60, 223, 119, 244, 60, 198, 65, 66, 187, 250, 1, 212, 188, 78, 14, 10, 60, 215, 40, 85, 59, 80, 221, 133, 60, 165, 208, 42, 189, 93, 115, 16, 61, 201, 156, 101, 61, 59, 27, 106, 61, 69, 224, 59, 61, 85, 97, 199, 60, 155, 245, 87, 60, 6, 56, 10, 188, 51, 73, 171, 188, 133, 63, 8, 189, 145, 194, 44, 189, 128, 93, 1, 189, 172, 206, 193, 188, 171, 238, 14, 60, 215, 90, 117, 188, 72, 162, 246, 188, 127, 117, 253, 188, 217, 2, 16, 189, 166, 147, 187, 188, 236, 148, 44, 187, 205, 167, 175, 60, 64, 34, 19, 61, 249, 144, 75, 61, 77, 67, 101, 61, 85, 186, 168, 60, 207, 205, 104, 60, 191, 74, 149, 191, 234, 73, 163, 190, 25, 224, 12, 189, 53, 50, 65, 189, 68, 226, 77, 61, 152, 172, 207, 60, 112, 219, 146, 188, 45, 103, 140, 60, 83, 0, 27, 188, 154, 145, 18, 187, 162, 42, 60, 61, 84, 198, 11, 188, 82, 74, 167, 187, 161, 48, 136, 189, 251, 152, 88, 59, 0, 82, 56, 188, 95, 82, 185, 188, 121, 79, 135, 188, 44, 164, 107, 188, 26, 66, 120, 188, 62, 168, 39, 188, 215, 181, 113, 188, 33, 85, 21, 188, 230, 168, 145, 59, 75, 187, 119, 60, 228, 185, 133, 60, 182, 168, 138, 189, 200, 143, 166, 189, 39, 206, 136, 189, 29, 213, 10, 189, 68, 204, 183, 60, 137, 22, 52, 61, 250, 55, 8, 61, 239, 62, 216, 60, 82, 185, 32, 60, 151, 29, 95, 188, 213, 85, 8, 187, 244, 42, 198, 60, 155, 223, 199, 60, 71, 112, 147, 191, 132, 159, 196, 190, 170, 193, 178, 189, 0, 188, 100, 189, 163, 188, 168, 61, 165, 96, 140, 61, 220, 56, 172, 60, 229, 25, 130, 61, 158, 252, 0, 61, 157, 21, 127, 60, 121, 193, 75, 61, 254, 54, 190, 60, 97, 148, 250, 60, 139, 245, 30, 190, 175, 243, 77, 189, 62, 45, 214, 188, 111, 3, 225, 188, 248, 63, 174, 188, 198, 36, 201, 188, 78, 239, 196, 188, 105, 24, 199, 187, 4, 94, 96, 60, 119, 81, 159, 60, 125, 49, 22, 60, 173, 95, 183, 59, 0, 142, 131, 59, 119, 94, 6, 62, 215, 104, 248, 61, 235, 168, 10, 62, 247, 99, 186, 61, 14, 73, 18, 61, 46, 242, 179, 187, 244, 42, 155, 188, 241, 237, 45, 189, 109, 247, 86, 189, 218, 193, 60, 189, 14, 196, 120, 189, 195, 64, 97, 189, 104, 174, 75, 189, 169, 177, 184, 191, 83, 223, 209, 190, 144, 129, 104, 61, 165, 33, 97, 188, 142, 197, 236, 61, 217, 138, 235, 61, 217, 236, 243, 188, 170, 73, 106, 61, 238, 247, 109, 60, 22, 100, 206, 60, 227, 225, 44, 60, 81, 148, 140, 61, 117, 175, 106, 61, 235, 206, 35, 63, 109, 13, 240, 190, 95, 40, 238, 62, 155, 180, 115, 190, 162, 179, 25, 62, 15, 155, 246, 59, 167, 112, 218, 189, 132, 194, 78, 62, 167, 123, 122, 190, 208, 38, 24, 62, 173, 39, 50, 190, 46, 104, 198, 61, 142, 40, 155, 189, 153, 45, 70, 63, 148, 5, 228, 190, 169, 134, 205, 62, 50, 223, 123, 190, 10, 204, 26, 62, 19, 80, 158, 189, 163, 58, 101, 189, 110, 141, 187, 61, 243, 250, 42, 190, 145, 25, 242, 61, 194, 154, 238, 189, 118, 251, 121, 61, 181, 106, 19, 189, 199, 172, 64, 191, 206, 88, 104, 191, 219, 13, 167, 62, 123, 34, 205, 190, 180, 162, 192, 62, 220, 21, 51, 190, 52, 141, 41, 62, 114, 217, 211, 189, 19, 173, 253, 61, 104, 194, 161, 189, 14, 55, 15, 62, 46, 59, 222, 188, 139, 220, 223, 61, 14, 88, 59, 63, 182, 118, 208, 190, 106, 70, 145, 62, 51, 130, 135, 190, 176, 93, 38, 62, 90, 31, 30, 190, 126, 215, 231, 61, 250, 172, 251, 188, 39, 171, 196, 60, 126, 252, 186, 188, 88, 183, 220, 187, 92, 131, 62, 189, 32, 35, 239, 60, 254, 49, 117, 189, 162, 52, 156, 61, 180, 55, 189, 189, 53, 15, 237, 61, 234, 12, 200, 189, 200, 253, 186, 61, 42, 161, 15, 189, 206, 46, 157, 60, 238, 79, 141, 189, 105, 139, 136, 61, 248, 251, 26, 189, 69, 110, 134, 59, 157, 69, 24, 189, 241, 194, 226, 191, 232, 225, 1, 191, 192, 161, 26, 188, 194, 104, 149, 189, 75, 72, 20, 62, 113, 202, 105, 61, 112, 157, 32, 60, 143, 92, 2, 61, 233, 165, 34, 60, 42, 131, 216, 59, 209, 126, 101, 61, 189, 242, 66, 61, 22, 79, 181, 61, 19, 198, 229, 62, 14, 177, 134, 190, 159, 176, 97, 62, 210, 190, 33, 190, 103, 241, 38, 62, 88, 149, 148, 189, 136, 225, 152, 61, 52, 47, 118, 189, 178, 99, 29, 61, 5, 123, 42, 189, 70, 55, 175, 60, 7, 19, 46, 188, 185, 162, 41, 59, 29, 227, 0, 63, 40, 121, 113, 190, 78, 164, 93, 62, 245, 64, 44, 190, 181, 50, 197, 61, 180, 178, 208, 189, 255, 252, 71, 61, 144, 60, 140, 189, 116, 35, 194, 60, 41, 11, 220, 60, 20, 33, 188, 187, 223, 184, 220, 188, 125, 135, 132, 189, 246, 21, 152, 191, 206, 95, 45, 191, 83, 101, 48, 62, 249, 31, 94, 190, 36, 194, 150, 62, 153, 253, 65, 189, 243, 83, 192, 61, 166, 54, 226, 189, 70, 221, 83, 61, 92, 179, 130, 189, 172, 37, 7, 62, 197, 187, 193, 188, 206, 134, 72, 61, 159, 129, 37, 63, 126, 113, 209, 189, 247, 123, 216, 61, 118, 228, 237, 189, 82, 163, 136, 187, 201, 244, 145, 189, 117, 76, 26, 189, 120, 40, 110, 189, 177, 10, 141, 189, 96, 203, 107, 187, 77, 217, 180, 188, 95, 121, 54, 61, 49, 41, 152, 188, 86, 92, 23, 190, 60, 230, 147, 60, 76, 238, 12, 189, 85, 248, 198, 187, 133, 15, 104, 189, 151, 191, 17, 61, 75, 240, 33, 189, 102, 121, 198, 61, 146, 58, 25, 189, 166, 246, 136, 60, 3, 70, 166, 189, 67, 102, 205, 60, 17, 196, 2, 61, 204, 46, 253, 190, 126, 70, 54, 190, 31, 189, 168, 189, 87, 59, 24, 190, 41, 42, 59, 61, 76, 245, 240, 61, 73, 238, 187, 61, 107, 126, 238, 60, 40, 152, 208, 58, 95, 164, 107, 189, 201, 143, 8, 59, 219, 167, 64, 61, 77, 199, 25, 61, 85, 15, 11, 190, 238, 41, 191, 188, 49, 34, 44, 60, 203, 225, 41, 61, 50, 165, 6, 61, 127, 184, 108, 59, 113, 136, 211, 58, 218, 132, 16, 60, 228, 0, 13, 60, 95, 250, 98, 59, 12, 164, 19, 188, 202, 238, 130, 57, 112, 208, 255, 186, 207, 218, 193, 189, 25, 141, 138, 188, 133, 236, 11, 60, 6, 176, 150, 59, 125, 77, 131, 188, 244, 16, 251, 186, 69, 162, 49, 188, 108, 24, 204, 187, 205, 30, 159, 59, 56, 29, 13, 60, 129, 196, 74, 60, 119, 56, 114, 60, 16, 118, 85, 59, 220, 59, 91, 64, 92, 195, 249, 62, 60, 102, 137, 189, 15, 180, 182, 189, 138, 126, 71, 190, 203, 228, 9, 190, 94, 219, 189, 60, 54, 16, 242, 60, 160, 43, 92, 189, 122, 17, 152, 61, 59, 237, 120, 189, 161, 96, 134, 189, 131, 241, 199, 188, 131, 39, 107, 191, 248, 225, 224, 61, 78, 25, 53, 62, 160, 100, 64, 188, 147, 245, 112, 61, 57, 179, 237, 60, 124, 63, 179, 188, 140, 137, 231, 60, 163, 55, 65, 187, 69, 39, 229, 188, 66, 60, 29, 61, 38, 29, 149, 188, 253, 219, 157, 59, 212, 253, 22, 190, 136, 100, 80, 189, 78, 35, 132, 61, 197, 251, 148, 61, 24, 59, 110, 61, 144, 210, 145, 60, 55, 164, 232, 59, 181, 73, 58, 189, 45, 154, 86, 188, 154, 13, 58, 189, 155, 235, 20, 189, 160, 98, 200, 60, 67, 255, 249, 59, 178, 103, 97, 64, 34, 156, 63, 63, 50, 60, 128, 60, 111, 185, 208, 62, 18, 162, 31, 190, 212, 230, 172, 190, 253, 92, 184, 189, 212, 95, 202, 189, 216, 9, 130, 189, 194, 104, 74, 189, 9, 102, 136, 189, 148, 171, 11, 189, 247, 138, 200, 188, 237, 75, 66, 191, 36, 33, 61, 189, 233, 226, 37, 62, 44, 202, 25, 61, 220, 105, 124, 61, 2, 74, 15, 61, 39, 75, 101, 60, 100, 136, 12, 189, 5, 36, 24, 189, 118, 45, 248, 188, 35, 143, 1, 58, 143, 83, 129, 59, 52, 212, 203, 58, 125, 73, 234, 189, 160, 173, 251, 188, 89, 242, 179, 188, 30, 99, 69, 189, 175, 54, 65, 60, 237, 21, 54, 61, 54, 101, 152, 59, 197, 190, 150, 60, 2, 83, 52, 60, 198, 165, 173, 60, 118, 14, 42, 187, 152, 247, 46, 188, 31, 97, 1, 60, 201, 77, 7, 64, 71, 71, 57, 62, 6, 74, 240, 60, 229, 183, 160, 189, 244, 253, 188, 61, 183, 116, 110, 61, 247, 232, 77, 189, 72, 47, 154, 189, 134, 183, 167, 189, 176, 16, 84, 189, 60, 182, 138, 189, 244, 223, 171, 189, 125, 98, 246, 188, 134, 168, 223, 190, 41, 76, 143, 189, 169, 177, 187, 188, 12, 149, 155, 60, 27, 159, 166, 61, 42, 202, 239, 60, 20, 151, 192, 59, 136, 200, 123, 61, 36, 192, 1, 189, 193, 88, 15, 189, 236, 132, 251, 188, 98, 111, 236, 59, 245, 98, 63, 60, 96, 72, 149, 190, 184, 49, 82, 60, 174, 114, 51, 189, 163, 208, 78, 188, 192, 10, 143, 189, 211, 142, 5, 189, 6, 249, 53, 61, 70, 4, 180, 60, 142, 214, 230, 60, 158, 110, 227, 60, 59, 117, 123, 60, 236, 130, 120, 57, 216, 172, 47, 188, 176, 46, 247, 190, 52, 200, 28, 190, 148, 28, 56, 189, 94, 61, 143, 189, 92, 24, 96, 188, 20, 23, 233, 60, 151, 155, 129, 61, 160, 157, 170, 61, 188, 180, 145, 61, 32, 114, 39, 188, 199, 139, 149, 188, 10, 137, 34, 60, 89, 189, 70, 60, 185, 30, 164, 190, 167, 33, 37, 190, 88, 60, 234, 188, 77, 22, 66, 60, 11, 170, 246, 60, 225, 180, 40, 187, 131, 240, 174, 188, 122, 48, 180, 188, 250, 120, 210, 59, 41, 165, 228, 60, 225, 249, 23, 61, 205, 197, 170, 60, 170, 145, 179, 60, 40, 167, 124, 61, 125, 64, 86, 61, 244, 193, 97, 61, 134, 45, 236, 60, 225, 255, 136, 60, 251, 39, 23, 59, 130, 13, 192, 188, 123, 224, 239, 188, 93, 239, 205, 188, 243, 60, 255, 187, 59, 155, 67, 59, 122, 9, 26, 188, 5, 27, 152, 186, 184, 175, 164, 63, 172, 127, 81, 63, 85, 255, 48, 63, 96, 6, 200, 62, 106, 169, 208, 61, 70, 151, 108, 189, 238, 16, 17, 190, 53, 160, 14, 190, 222, 114, 233, 189, 78, 218, 155, 189, 49, 241, 176, 188, 147, 228, 176, 188, 51, 253, 238, 188, 188, 41, 198, 190, 197, 4, 2, 190, 217, 22, 60, 189, 203, 150, 131, 189, 68, 243, 149, 61, 120, 133, 98, 61, 213, 88, 28, 60, 105, 44, 231, 60, 168, 15, 101, 187, 206, 126, 250, 188, 77, 159, 4, 188, 20, 143, 11, 189, 254, 80, 152, 188, 162, 32, 98, 59, 100, 71, 4, 190, 23, 66, 187, 189, 57, 155, 117, 59, 190, 240, 220, 188, 253, 245, 23, 59, 66, 22, 26, 61, 233, 204, 147, 60, 142, 76, 148, 60, 61, 92, 96, 60, 229, 56, 41, 60, 139, 209, 148, 60, 24, 190, 146, 59, 109, 156, 5, 62, 2, 70, 21, 62, 154, 18, 154, 62, 66, 184, 130, 62, 193, 46, 80, 62, 45, 42, 238, 61, 187, 200, 7, 188, 37, 180, 7, 189, 32, 53, 150, 189, 78, 138, 252, 189, 51, 195, 130, 189, 5, 217, 97, 189, 5, 122, 77, 189, 201, 123, 23, 191, 200, 196, 197, 190, 248, 104, 140, 190, 139, 246, 58, 190, 16, 43, 68, 189, 189, 47, 221, 60, 147, 141, 146, 61, 61, 239, 197, 61, 84, 43, 130, 61, 1, 91, 91, 61, 48, 13, 32, 61, 136, 29, 163, 60, 117, 126, 8, 61, 96, 189, 215, 61, 63, 241, 239, 60, 196, 209, 162, 188, 233, 31, 64, 189, 238, 164, 147, 189, 90, 121, 121, 189, 88, 120, 180, 188, 61, 93, 97, 188, 177, 40, 179, 60, 106, 28, 1, 61, 236, 158, 177, 59, 254, 82, 40, 60, 13, 77, 167, 59, 19, 94, 208, 63, 235, 122, 23, 63, 36, 146, 37, 62, 177, 139, 81, 189, 199, 110, 36, 190, 203, 216, 213, 189, 239, 176, 199, 187, 235, 227, 14, 60, 67, 80, 130, 58, 84, 44, 27, 189, 230, 112, 55, 189, 153, 70, 153, 189, 129, 190, 70, 189, 214, 29, 75, 191, 160, 75, 137, 190, 189, 244, 250, 188, 167, 72, 46, 61, 174, 252, 172, 61, 236, 121, 141, 61, 8, 178, 183, 60, 233, 3, 86, 61, 168, 203, 137, 61, 31, 30, 173, 60, 244, 7, 220, 188, 62, 218, 177, 59, 31, 109, 12, 60, 171, 171, 205, 61, 172, 240, 17, 188, 162, 213, 230, 188, 142, 208, 20, 61, 166, 23, 255, 60, 240, 130, 2, 189, 239, 19, 114, 188, 197, 211, 113, 187, 39, 224, 12, 189, 167, 189, 131, 187, 118, 106, 154, 60, 240, 93, 83, 60, 158, 35, 197, 60, 201, 40, 70, 190, 153, 183, 127, 190, 0, 51, 63, 62, 154, 101, 146, 187, 198, 239, 40, 62, 160, 63, 173, 61, 229, 215, 59, 188, 63, 215, 43, 188, 25, 64, 215, 187, 81, 221, 144, 59, 237, 108, 41, 187, 77, 115, 13, 187, 102, 102, 246, 187, 168, 104, 78, 190, 246, 178, 139, 189, 102, 46, 69, 188, 74, 128, 141, 188, 107, 228, 175, 59, 200, 97, 4, 187, 18, 169, 66, 60, 51, 156, 53, 60, 36, 205, 108, 59, 167, 124, 181, 187, 217, 50, 95, 185, 33, 42, 177, 59, 183, 221, 43, 59, 217, 148, 73, 62, 128, 237, 72, 61, 42, 130, 131, 60, 47, 80, 63, 60, 117, 99, 33, 189, 200, 46, 251, 188, 239, 35, 149, 188, 243, 185, 73, 188, 141, 240, 6, 188, 120, 59, 205, 59, 221, 106, 186, 185, 219, 166, 124, 186, 252, 66, 33, 60, 72, 21, 172, 191, 244, 88, 207, 190, 187, 214, 130, 189, 130, 110, 111, 189, 251, 153, 209, 61, 66, 88, 140, 61, 4, 35, 126, 60, 194, 36, 103, 61, 75, 59, 249, 60, 63, 140, 79, 61, 201, 101, 10, 61, 86, 235, 85, 61, 238, 241, 100, 61, 192, 158, 208, 189, 194, 177, 136, 186, 1, 7, 223, 187, 177, 212, 226, 186, 231, 130, 100, 187, 230, 17, 146, 186, 172, 9, 103, 59, 59, 90, 16, 60, 134, 32, 22, 60, 255, 188, 45, 60, 200, 183, 145, 59, 252, 5, 141, 187, 47, 77, 191, 187, 3, 141, 231, 61, 168, 185, 104, 61, 99, 125, 136, 61, 170, 242, 78, 61, 106, 106, 214, 60, 148, 189, 165, 59, 32, 149, 55, 188, 186, 34, 69, 188, 179, 194, 188, 188, 210, 24, 63, 189, 214, 72, 80, 189, 132, 10, 70, 189, 217, 91, 40, 189, 146, 32, 58, 191, 63, 254, 143, 190, 146, 192, 1, 189, 244, 20, 238, 187, 213, 3, 139, 61, 248, 158, 51, 61, 24, 5, 155, 187, 55, 57, 156, 60, 170, 232, 38, 60, 76, 255, 97, 187, 213, 215, 74, 59, 49, 212, 158, 187, 47, 8, 93, 59, 146, 160, 217, 189, 169, 21, 67, 188, 160, 26, 156, 187, 113, 19, 48, 187, 191, 128, 148, 58, 104, 59, 88, 59, 224, 94, 226, 186, 190, 126, 66, 187, 173, 88, 233, 187, 88, 191, 192, 184, 20, 181, 68, 59, 187, 137, 12, 60, 191, 112, 206, 59, 251, 135, 7, 189, 194, 142, 9, 189, 168, 126, 1, 189, 5, 110, 9, 189, 104, 62, 32, 188, 35, 83, 117, 59, 97, 93, 47, 60, 100, 168, 10, 60, 220, 194, 75, 60, 155, 224, 206, 60, 192, 169, 1, 61, 162, 58, 4, 61, 190, 131, 186, 60, 192, 30, 37, 64, 176, 224, 23, 63, 116, 22, 128, 62, 26, 152, 132, 62, 183, 86, 1, 190, 247, 113, 69, 190, 159, 188, 150, 189, 193, 236, 27, 190, 170, 120, 176, 189, 3, 16, 20, 187, 81, 68, 245, 188, 208, 154, 72, 189, 51, 16, 240, 188, 174, 204, 226, 62, 52, 149, 17, 62, 156, 209, 196, 60, 107, 136, 212, 60, 63, 89, 124, 59, 117, 59, 142, 188, 109, 219, 240, 188, 53, 96, 211, 188, 195, 137, 224, 185, 47, 80, 88, 59, 106, 216, 106, 187, 10, 120, 22, 188, 80, 69, 80, 188, 230, 197, 8, 191, 214, 41, 113, 189, 253, 150, 208, 189, 52, 184, 48, 188, 142, 164, 70, 60, 64, 179, 87, 61, 205, 133, 30, 61, 86, 231, 37, 61, 252, 232, 215, 60, 93, 14, 229, 59, 206, 237, 151, 60, 124, 225, 36, 58, 77, 97, 108, 188, 145, 137, 143, 190, 205, 64, 135, 189, 85, 42, 45, 63, 76, 106, 7, 63, 47, 216, 156, 189, 12, 185, 16, 190, 211, 154, 141, 188, 239, 131, 246, 189, 69, 57, 37, 190, 184, 71, 178, 61, 146, 172, 103, 60, 78, 67, 16, 62, 57, 194, 16, 62, 206, 179, 190, 190, 221, 15, 129, 61, 185, 89, 53, 61, 120, 162, 241, 189, 142, 239, 165, 61, 30, 151, 164, 61, 217, 233, 185, 187, 153, 158, 32, 187, 114, 92, 81, 61, 31, 44, 43, 188, 79, 1, 29, 188, 224, 111, 30, 186, 99, 152, 166, 187, 99, 58, 184, 59, 95, 230, 31, 189, 107, 221, 0, 189, 210, 118, 174, 188, 79, 232, 154, 60, 153, 117, 102, 187, 138, 93, 69, 59, 211, 229, 71, 61, 249, 132, 98, 60, 20, 9, 217, 188, 14, 130, 2, 188, 227, 221, 167, 188, 64, 122, 178, 188, 68, 52, 26, 63, 195, 104, 186, 62, 231, 105, 22, 63, 195, 142, 4, 63, 102, 47, 167, 62, 137, 250, 236, 61, 49, 255, 130, 188, 66, 151, 183, 189, 165, 23, 40, 190, 59, 176, 9, 190, 15, 89, 16, 190, 224, 19, 92, 189, 4, 13, 160, 188, 83, 249, 184, 190, 82, 68, 7, 190, 84, 128, 248, 189, 176, 230, 1, 190, 150, 91, 217, 60, 147, 94, 99, 61, 124, 130, 13, 61, 1, 214, 71, 61, 104, 246, 1, 60, 183, 42, 114, 60, 131, 39, 56, 187, 32, 94, 189, 188, 152, 244, 183, 59, 218, 135, 92, 60, 25, 95, 110, 189, 4, 28, 137, 189, 241, 1, 156, 188, 47, 119, 84, 189, 3, 113, 186, 188, 153, 200, 219, 187, 25, 231, 12, 188, 73, 135, 164, 60, 159, 210, 43, 58, 133, 166, 211, 60, 87, 82, 128, 60, 232, 165, 60, 60, 193, 142, 209, 60, 143, 230, 102, 188, 62, 140, 121, 62, 244, 152, 129, 62, 31, 236, 20, 62, 161, 123, 168, 60, 142, 217, 145, 189, 89, 30, 146, 189, 223, 1, 217, 189, 144, 42, 172, 189, 231, 199, 17, 189, 174, 135, 170, 59, 183, 98, 53, 61, 221, 69, 55, 191, 123, 119, 159, 190, 213, 203, 91, 190, 187, 92, 101, 190, 170, 15, 28, 188, 211, 196, 171, 61, 238, 245, 42, 61, 189, 188, 177, 61, 73, 186, 177, 61, 253, 55, 65, 61, 16, 158, 60, 61, 166, 120, 51, 60, 123, 142, 0, 61, 108, 199, 25, 62, 92, 45, 157, 60, 98, 110, 61, 58, 11, 209, 60, 61, 140, 217, 37, 188, 225, 108, 194, 188, 44, 135, 50, 188, 158, 80, 70, 188, 208, 216, 96, 60, 167, 244, 236, 60, 238, 191, 20, 188, 188, 208, 235, 58, 225, 33, 85, 188, 59, 209, 138, 63, 32, 61, 10, 62, 111, 150, 146, 62, 94, 179, 28, 63, 46, 238, 102, 190, 168, 255, 145, 190, 184, 159, 15, 189, 131, 23, 155, 189, 173, 161, 201, 189, 226, 131, 20, 188, 75, 56, 77, 60, 190, 239, 46, 61, 121, 191, 197, 59, 250, 74, 8, 191, 50, 119, 168, 189, 217, 11, 51, 62, 105, 53, 145, 61, 69, 73, 160, 61, 236, 227, 233, 61, 25, 204, 225, 60, 201, 133, 95, 189, 44, 134, 167, 189, 110, 54, 154, 188, 66, 145, 5, 61, 210, 189, 15, 60, 31, 13, 171, 60, 26, 100, 221, 187, 203, 65, 22, 61, 154, 224, 143, 189, 46, 115, 43, 189, 62, 192, 15, 61, 131, 82, 184, 59, 112, 110, 27, 188, 104, 3, 32, 189, 155, 206, 3, 60, 71, 157, 26, 61, 64, 83, 221, 187, 183, 49, 22, 59, 20, 193, 186, 60, 254, 244, 161, 191, 147, 206, 212, 190, 206, 49, 143, 189, 204, 24, 49, 189, 56, 82, 147, 61, 35, 224, 149, 61, 211, 234, 55, 61, 32, 128, 159, 61, 152, 214, 5, 61, 249, 107, 101, 60, 137, 86, 64, 61, 73, 35, 7, 61, 129, 161, 213, 60, 110, 10, 9, 190, 206, 144, 248, 188, 199, 213, 182, 188, 90, 44, 134, 188, 104, 72, 160, 188, 198, 17, 6, 60, 101, 143, 217, 60, 46, 221, 165, 60, 145, 197, 80, 60, 99, 105, 182, 60, 172, 228, 160, 60, 243, 211, 169, 60, 250, 136, 156, 60, 89, 207, 4, 62, 93, 12, 237, 61, 102, 39, 174, 61, 16, 145, 48, 61, 25, 56, 213, 60, 113, 114, 5, 189, 207, 60, 156, 189, 67, 98, 167, 189, 169, 169, 169, 189, 161, 184, 11, 189, 176, 176, 97, 188, 218, 144, 139, 188, 107, 240, 192, 188, 203, 52, 141, 191, 68, 3, 152, 190, 197, 175, 66, 60, 204, 162, 4, 188, 161, 192, 171, 61, 186, 206, 191, 60, 123, 115, 60, 187, 245, 151, 194, 60, 154, 222, 221, 188, 211, 24, 245, 188, 11, 91, 243, 59, 190, 229, 89, 188, 73, 234, 114, 188, 74, 182, 87, 189, 138, 183, 33, 61, 103, 195, 45, 61, 117, 158, 52, 61, 226, 46, 66, 61, 40, 125, 24, 61, 199, 249, 158, 60, 103, 197, 192, 59, 197, 230, 2, 188, 25, 201, 230, 188, 8, 80, 21, 189, 165, 1, 20, 189, 69, 107, 25, 189, 156, 12, 207, 189, 25, 140, 165, 189, 33, 151, 103, 189, 108, 193, 163, 188, 55, 230, 146, 188, 114, 233, 102, 60, 134, 27, 13, 61, 23, 203, 11, 61, 173, 252, 72, 61, 64, 63, 97, 61, 96, 76, 86, 61, 182, 212, 55, 61, 49, 173, 30, 61, 87, 147, 167, 191, 104, 157, 192, 190, 107, 208, 131, 189, 185, 68, 25, 189, 248, 118, 207, 61, 226, 137, 142, 61, 254, 137, 96, 59, 197, 62, 132, 60, 203, 104, 36, 188, 212, 140, 154, 188, 146, 171, 4, 61, 72, 112, 129, 187, 94, 95, 35, 60, 87, 158, 237, 189, 147, 202, 238, 188, 170, 241, 208, 188, 43, 59, 220, 188, 27, 40, 162, 188, 90, 168, 23, 188, 67, 110, 222, 186, 219, 113, 186, 186, 148, 104, 22, 60, 215, 97, 171, 60, 51, 231, 103, 60, 104, 13, 170, 60, 231, 32, 10, 61, 38, 95, 67, 189, 87, 118, 133, 189, 230, 152, 104, 189, 9, 174, 101, 189, 232, 0, 69, 189, 194, 233, 206, 188, 24, 121, 69, 187, 65, 141, 125, 60, 0, 213, 14, 61, 14, 123, 42, 61, 102, 211, 27, 61, 98, 83, 59, 61, 202, 150, 31, 61, 112, 205, 101, 191, 200, 57, 160, 190, 94, 243, 18, 189, 62, 254, 201, 188, 31, 244, 140, 61, 130, 94, 199, 60, 33, 77, 212, 188, 58, 209, 1, 59, 227, 51, 130, 188, 173, 48, 151, 187, 241, 75, 252, 60, 111, 123, 185, 60, 116, 201, 106, 60, 92, 132, 236, 189, 156, 208, 178, 188, 23, 58, 193, 188, 181, 137, 5, 189, 90, 29, 32, 188, 80, 207, 157, 188, 21, 183, 6, 189, 179, 69, 73, 188, 172, 243, 47, 187, 233, 11, 213, 59, 86, 16, 115, 60, 11, 233, 10, 59, 238, 44, 75, 188, 30, 124, 195, 61, 68, 16, 148, 61, 83, 60, 140, 61, 244, 40, 96, 61, 59, 201, 82, 61, 15, 151, 27, 61, 175, 130, 29, 61, 74, 53, 169, 60, 141, 65, 147, 188, 91, 80, 162, 189, 79, 6, 191, 189, 140, 249, 163, 189, 14, 72, 100, 189, 184, 200, 112, 191, 73, 121, 148, 190, 141, 152, 8, 62, 5, 150, 14, 62, 242, 172, 120, 62, 90, 221, 124, 62, 210, 191, 209, 61, 216, 82, 25, 62, 41, 64, 188, 61, 66, 97, 163, 58, 251, 141, 138, 60, 238, 13, 142, 61, 78, 138, 135, 61, 150, 238, 3, 190, 127, 175, 214, 188, 187, 90, 146, 58, 184, 248, 208, 185, 229, 65, 229, 60, 135, 117, 137, 187, 64, 200, 208, 187, 79, 78, 151, 188, 75, 60, 147, 188, 151, 49, 11, 188, 17, 156, 38, 59, 237, 252, 102, 60, 254, 123, 149, 56, 124, 90, 206, 60, 15, 52, 129, 59, 208, 43, 151, 187, 220, 229, 229, 184, 9, 112, 7, 189, 44, 99, 154, 188, 9, 62, 76, 188, 34, 108, 16, 59, 242, 129, 92, 60, 174, 60, 134, 60, 220, 15, 191, 60, 173, 225, 156, 60, 184, 243, 9, 187, 237, 155, 220, 191, 139, 118, 7, 191, 55, 88, 214, 189, 118, 12, 70, 189, 177, 191, 251, 61, 14, 6, 181, 61, 216, 187, 217, 187, 225, 133, 131, 61, 101, 216, 5, 61, 202, 37, 165, 61, 184, 13, 59, 61, 244, 123, 176, 61, 209, 150, 4, 62, 44, 225, 124, 189, 38, 42, 12, 61, 92, 72, 37, 61, 254, 114, 158, 60, 196, 98, 38, 61, 171, 21, 47, 61, 62, 102, 207, 60, 76, 19, 204, 59, 206, 105, 135, 187, 238, 138, 9, 189, 92, 141, 49, 188, 119, 124, 134, 188, 52, 165, 84, 188, 72, 249, 34, 61, 142, 149, 153, 58, 98, 186, 16, 61, 108, 208, 23, 61, 130, 1, 32, 61, 123, 204, 11, 61, 107, 11, 239, 60, 91, 106, 39, 188, 224, 93, 218, 188, 89, 88, 163, 188, 225, 62, 150, 60, 224, 245, 155, 187, 40, 44, 7, 189, 121, 62, 201, 191, 190, 91, 13, 191, 64, 150, 174, 189, 101, 192, 54, 60, 64, 116, 84, 62, 130, 155, 238, 61, 69, 244, 101, 60, 186, 12, 161, 61, 137, 102, 159, 187, 76, 222, 137, 61, 236, 124, 180, 59, 155, 238, 79, 61, 173, 107, 224, 61, 115, 244, 8, 190, 44, 122, 106, 189, 212, 188, 123, 189, 145, 215, 128, 189, 21, 167, 85, 189, 194, 152, 66, 189, 189, 175, 223, 188, 97, 23, 107, 58, 234, 186, 195, 60, 50, 28, 32, 61, 99, 116, 65, 60, 60, 136, 12, 61, 172, 57, 176, 60, 206, 120, 115, 61, 193, 182, 126, 61, 236, 255, 130, 60, 59, 238, 152, 57, 220, 175, 60, 188, 108, 9, 101, 188, 94, 98, 207, 188, 192, 98, 14, 188, 157, 201, 80, 188, 234, 115, 15, 189, 100, 224, 84, 189, 126, 106, 71, 189, 7, 68, 247, 187, 139, 1, 211, 191, 239, 164, 172, 190, 85, 152, 14, 61, 208, 251, 111, 186, 59, 181, 199, 61, 220, 202, 194, 61, 97, 78, 231, 188, 78, 100, 159, 60, 13, 2, 9, 188, 98, 42, 40, 188, 2, 28, 199, 59, 36, 14, 251, 60, 114, 187, 40, 61, 80, 17, 180, 61, 165, 195, 108, 188, 249, 229, 39, 61, 67, 171, 232, 188, 252, 108, 72, 59, 112, 39, 206, 188, 76, 161, 85, 188, 214, 8, 3, 188, 106, 61, 62, 186, 167, 220, 118, 188, 43, 139, 198, 58, 5, 222, 134, 60, 216, 107, 182, 60, 114, 97, 144, 62, 1, 169, 8, 61, 35, 200, 213, 60, 228, 31, 153, 188, 153, 104, 244, 188, 0, 121, 195, 189, 129, 83, 197, 188, 71, 60, 233, 188, 50, 89, 176, 60, 226, 53, 33, 61, 107, 79, 205, 60, 51, 216, 153, 59, 120, 255, 90, 187, 0, 198, 77, 191, 74, 107, 11, 63, 184, 1, 49, 63, 181, 75, 4, 63, 43, 101, 177, 62, 175, 101, 43, 62, 147, 205, 35, 59, 87, 228, 248, 189, 2, 146, 75, 189, 233, 42, 157, 189, 252, 152, 34, 189, 240, 104, 204, 60, 36, 35, 24, 189, 162, 129, 61, 64, 65, 76, 146, 63, 224, 110, 61, 62, 143, 86, 6, 61, 143, 114, 101, 190, 230, 167, 115, 190, 45, 226, 67, 190, 237, 114, 140, 190, 209, 165, 11, 190, 86, 185, 15, 62, 136, 185, 17, 62, 34, 221, 141, 61, 248, 121, 27, 189, 147, 184, 43, 64, 193, 45, 210, 61, 142, 206, 108, 191, 189, 62, 18, 191, 4, 253, 12, 191, 200, 163, 40, 190, 123, 20, 81, 189, 0, 195, 12, 190, 134, 86, 228, 60, 150, 130, 152, 62, 218, 14, 87, 61, 47, 35, 26, 190, 232, 225, 142, 189, 159, 254, 206, 190, 101, 15, 79, 63, 100, 16, 59, 63, 166, 61, 152, 62, 54, 242, 206, 61, 63, 180, 160, 189, 216, 35, 83, 190, 106, 247, 18, 190, 187, 89, 189, 189, 131, 180, 230, 60, 71, 60, 213, 61, 223, 130, 52, 61, 89, 191, 205, 60, 201, 29, 125, 64, 224, 27, 131, 63, 255, 117, 210, 190, 154, 90, 168, 190, 199, 217, 229, 190, 244, 11, 141, 190, 63, 40, 80, 190, 221, 99, 47, 190, 244, 75, 210, 188, 142, 66, 132, 62, 169, 15, 7, 62, 129, 65, 4, 190, 212, 111, 49, 190, 30, 116, 191, 63, 87, 179, 238, 190, 118, 150, 116, 191, 79, 227, 169, 190, 58, 94, 11, 190, 243, 93, 177, 61, 245, 18, 216, 61, 211, 253, 54, 62, 122, 12, 74, 62, 27, 168, 214, 61, 138, 219, 34, 190, 230, 78, 23, 190, 222, 205, 175, 189, 119, 44, 175, 191, 241, 164, 228, 189, 42, 94, 129, 62, 57, 238, 60, 62, 61, 159, 130, 62, 179, 35, 50, 62, 27, 57, 21, 61, 181, 153, 180, 60, 48, 13, 191, 188, 128, 140, 123, 188, 116, 110, 200, 188, 50, 67, 4, 61, 235, 154, 157, 61, 99, 167, 53, 64, 37, 8, 211, 63, 169, 210, 38, 63, 147, 88, 57, 62, 254, 128, 159, 190, 25, 159, 198, 190, 157, 219, 194, 190, 155, 149, 174, 190, 197, 221, 93, 190, 192, 176, 62, 189, 123, 236, 85, 62, 157, 252, 21, 60, 19, 5, 124, 190, 66, 139, 29, 64, 222, 207, 10, 63, 242, 128, 27, 191, 200, 89, 186, 190, 131, 233, 239, 190, 159, 62, 155, 190, 142, 48, 65, 189, 57, 141, 234, 60, 185, 139, 105, 61, 40, 44, 196, 61, 111, 36, 177, 62, 190, 89, 47, 189, 254, 254, 197, 190, 49, 1, 140, 63, 114, 41, 162, 63, 237, 187, 71, 63, 60, 32, 139, 62, 219, 44, 148, 189, 154, 4, 138, 190, 202, 53, 171, 190, 88, 142, 179, 190, 107, 211, 111, 190, 123, 210, 93, 189, 18, 149, 26, 62, 136, 68, 231, 61, 130, 158, 30, 190, 27, 12, 132, 64, 64, 232, 181, 63, 68, 9, 143, 190, 40, 165, 162, 190, 241, 248, 22, 191, 140, 89, 227, 190, 227, 227, 93, 190, 214, 255, 12, 190, 203, 108, 235, 188, 62, 121, 154, 60, 165, 198, 215, 62, 84, 170, 193, 189, 23, 83, 253, 190, 172, 154, 189, 189, 79, 28, 142, 191, 154, 173, 174, 191, 171, 132, 5, 191, 101, 254, 10, 190, 50, 97, 139, 62, 232, 96, 202, 62, 204, 183, 219, 62, 202, 64, 177, 62, 213, 74, 215, 61, 23, 89, 84, 59, 59, 218, 105, 190, 99, 122, 151, 189, 111, 25, 153, 64, 38, 211, 79, 63, 246, 68, 2, 191, 15, 34, 194, 189, 90, 102, 158, 190, 91, 177, 100, 60, 85, 125, 138, 190, 16, 208, 157, 189, 106, 18, 42, 61, 66, 232, 148, 62, 77, 249, 174, 190, 84, 151, 18, 189, 195, 200, 113, 60, 241, 77, 183, 63, 242, 58, 6, 191, 197, 186, 225, 190, 100, 204, 114, 60, 116, 141, 177, 189, 111, 86, 186, 61, 251, 38, 224, 188, 63, 234, 132, 62, 175, 15, 12, 62, 75, 18, 249, 189, 194, 125, 145, 190, 98, 144, 12, 62, 203, 80, 165, 61, 103, 204, 252, 191, 196, 236, 237, 61, 215, 66, 25, 63, 234, 219, 72, 62, 121, 245, 29, 62, 21, 28, 109, 60, 109, 122, 186, 61, 36, 76, 33, 189, 1, 124, 138, 189, 63, 158, 35, 190, 63, 182, 141, 62, 109, 129, 77, 61, 241, 188, 1, 189, 130, 143, 47, 64, 114, 180, 154, 63, 168, 136, 243, 189, 222, 13, 124, 188, 31, 91, 210, 190, 40, 63, 110, 190, 182, 131, 190, 189, 218, 171, 165, 189, 69, 123, 247, 60, 206, 22, 91, 189, 157, 107, 114, 62, 68, 168, 30, 188, 0, 237, 173, 190, 163, 216, 99, 64, 201, 111, 138, 62, 42, 194, 135, 191, 166, 146, 92, 190, 220, 135, 208, 190, 118, 250, 241, 60, 186, 14, 145, 62, 249, 44, 148, 61, 92, 216, 34, 62, 6, 221, 238, 189, 151, 3, 14, 62, 62, 191, 22, 190, 66, 122, 171, 190, 106, 207, 250, 191, 82, 207, 105, 191, 77, 100, 174, 61, 62, 179, 245, 61, 95, 68, 251, 62, 82, 212, 170, 62, 187, 74, 191, 61, 1, 239, 222, 59, 222, 219, 35, 189, 186, 134, 90, 188, 59, 87, 145, 190, 193, 185, 172, 188, 21, 59, 181, 62, 114, 129, 98, 64, 199, 121, 147, 63, 230, 111, 227, 190, 144, 134, 15, 190, 153, 173, 142, 190, 41, 4, 99, 190, 128, 129, 171, 189, 141, 99, 93, 189, 34, 253, 157, 59, 214, 13, 93, 61, 235, 44, 143, 62, 214, 96, 110, 190, 152, 115, 189, 190, 136, 63, 203, 63, 200, 48, 4, 190, 233, 199, 26, 191, 159, 249, 178, 189, 50, 247, 12, 61, 6, 54, 43, 61, 174, 137, 13, 62, 18, 198, 136, 61, 55, 58, 158, 61, 91, 45, 214, 187, 241, 45, 5, 190, 28, 184, 81, 190, 234, 218, 115, 61, 185, 79, 131, 191, 43, 128, 186, 189, 248, 252, 6, 63, 111, 237, 38, 62, 143, 123, 191, 61, 189, 120, 41, 188, 185, 51, 250, 189, 113, 41, 213, 189, 52, 4, 130, 189, 230, 7, 40, 189, 213, 69, 254, 189, 248, 21, 26, 62, 0, 86, 60, 62, 120, 158, 46, 64, 69, 51, 170, 63, 60, 197, 188, 61, 129, 72, 78, 189, 109, 202, 87, 190, 223, 182, 80, 190, 79, 246, 88, 190, 179, 251, 145, 190, 13, 167, 40, 190, 200, 111, 140, 62, 109, 230, 124, 62, 255, 3, 213, 189, 46, 255, 90, 190, 142, 151, 138, 64, 5, 228, 89, 62, 139, 122, 160, 191, 119, 120, 243, 190, 170, 183, 232, 190, 250, 190, 11, 190, 198, 82, 24, 189, 228, 169, 189, 61, 13, 238, 13, 62, 220, 19, 172, 62, 238, 88, 10, 190, 94, 114, 144, 190, 144, 179, 21, 190, 255, 82, 144, 191, 79, 156, 136, 191, 185, 146, 152, 190, 38, 98, 117, 62, 14, 121, 176, 62, 118, 18, 158, 62, 229, 184, 145, 62, 133, 47, 212, 62, 227, 98, 76, 62, 162, 163, 133, 190, 190, 93, 220, 190, 99, 85, 252, 187, 98, 170, 37, 62, 201, 57, 3, 64, 149, 73, 9, 63, 245, 224, 79, 190, 158, 91, 35, 190, 5, 207, 201, 189, 225, 112, 27, 189, 247, 79, 198, 59, 191, 152, 126, 61, 218, 76, 65, 62, 68, 32, 75, 61, 56, 202, 65, 190, 114, 101, 5, 190, 1, 165, 81, 189, 34, 1, 136, 191, 14, 16, 115, 190, 137, 123, 77, 62, 121, 221, 222, 60, 239, 180, 135, 61, 199, 24, 176, 61, 49, 135, 118, 60, 2, 22, 221, 60, 131, 136, 146, 59, 245, 248, 189, 188, 151, 82, 140, 60, 67, 237, 93, 60, 224, 116, 1, 61, 74, 31, 248, 60, 0, 198, 151, 189, 213, 102, 80, 189, 68, 130, 106, 61, 96, 44, 251, 60, 50, 105, 96, 186, 70, 63, 3, 186, 161, 140, 166, 188, 4, 189, 204, 188, 208, 115, 185, 56, 195, 120, 172, 60, 104, 79, 208, 60, 178, 146, 199, 59, 145, 31, 119, 64, 122, 35, 93, 63, 49, 39, 41, 191, 156, 242, 70, 190, 249, 117, 185, 190, 216, 70, 146, 60, 215, 175, 61, 188, 169, 16, 28, 189, 84, 206, 108, 62, 71, 203, 27, 190, 142, 79, 45, 62, 185, 108, 70, 190, 215, 148, 218, 190, 102, 100, 10, 190, 45, 222, 11, 189, 113, 140, 223, 185, 103, 115, 136, 188, 13, 23, 130, 61, 243, 167, 136, 60, 173, 34, 78, 188, 28, 135, 210, 60, 94, 255, 13, 60, 156, 172, 149, 60, 34, 182, 71, 189, 31, 164, 240, 188, 150, 10, 35, 61, 107, 120, 72, 190, 156, 33, 200, 59, 96, 24, 55, 61, 164, 205, 95, 188, 174, 26, 153, 58, 146, 195, 2, 188, 241, 229, 160, 186, 219, 252, 177, 59, 156, 194, 153, 188, 180, 214, 140, 60, 235, 2, 1, 60, 238, 252, 84, 60, 26, 86, 228, 59, 108, 88, 158, 64, 153, 244, 3, 63, 0, 49, 45, 191, 52, 252, 190, 60, 129, 76, 162, 190, 252, 181, 72, 60, 72, 158, 34, 190, 169, 132, 202, 61, 113, 218, 15, 62, 93, 158, 164, 61, 33, 165, 199, 190, 146, 87, 238, 61, 238, 72, 234, 185, 218, 72, 84, 190, 56, 67, 227, 59, 55, 229, 208, 60, 177, 50, 179, 59, 123, 65, 4, 61, 15, 6, 244, 188, 36, 249, 26, 61, 123, 204, 210, 59, 160, 10, 137, 60, 74, 119, 1, 189, 113, 202, 239, 186, 99, 162, 44, 60, 178, 218, 59, 58, 227, 185, 212, 189, 184, 184, 1, 61, 44, 136, 211, 60, 168, 135, 78, 188, 118, 22, 13, 56, 147, 18, 137, 187, 129, 42, 203, 59, 220, 194, 77, 188, 69, 63, 92, 187, 198, 75, 17, 60, 113, 93, 128, 59, 119, 104, 222, 187, 250, 94, 229, 58, 149, 114, 137, 64, 238, 197, 70, 63, 241, 179, 105, 191, 22, 142, 242, 60, 159, 160, 17, 190, 227, 177, 144, 190, 29, 6, 187, 61, 232, 134, 202, 189, 233, 205, 140, 61, 78, 146, 33, 62, 176, 158, 136, 188, 224, 203, 153, 190, 21, 85, 65, 190, 20, 201, 167, 190, 26, 172, 167, 189, 34, 157, 247, 60, 108, 170, 36, 189, 92, 184, 220, 60, 188, 161, 90, 61, 172, 1, 179, 57, 5, 244, 252, 60, 15, 19, 155, 60, 136, 117, 134, 188, 255, 17, 33, 189, 7, 175, 17, 188, 171, 175, 242, 60, 253, 8, 167, 190, 38, 9, 19, 60, 103, 77, 158, 61, 0, 167, 70, 189, 116, 107, 132, 58, 123, 225, 217, 60, 76, 79, 202, 188, 44, 234, 129, 60, 224, 88, 101, 186, 55, 31, 47, 60, 127, 89, 228, 60, 92, 68, 181, 187, 47, 253, 150, 188, 118, 205, 161, 64, 211, 92, 235, 62, 186, 4, 243, 190, 98, 2, 147, 189, 185, 198, 151, 190, 110, 229, 161, 61, 96, 159, 52, 190, 168, 172, 6, 189, 113, 228, 44, 62, 130, 4, 191, 61, 210, 139, 174, 190, 154, 123, 237, 60, 201, 128, 56, 61, 229, 39, 44, 191, 205, 247, 43, 61, 119, 254, 141, 59, 153, 84, 146, 189, 13, 184, 140, 61, 112, 70, 36, 61, 106, 195, 60, 61, 61, 148, 238, 60, 247, 101, 192, 188, 26, 82, 243, 187, 144, 194, 177, 188, 30, 7, 167, 61, 46, 86, 220, 59, 144, 90, 128, 190, 55, 221, 40, 61, 83, 149, 74, 61, 35, 85, 143, 188, 227, 250, 136, 60, 24, 187, 209, 188, 96, 25, 73, 59, 212, 190, 113, 188, 127, 4, 156, 60, 252, 30, 57, 185, 140, 82, 250, 186, 137, 95, 145, 188, 140, 226, 24, 188, 206, 67, 172, 64, 49, 176, 175, 63, 52, 16, 32, 191, 120, 187, 88, 189, 195, 170, 105, 190, 117, 71, 133, 190, 13, 213, 124, 190, 72, 14, 11, 62, 195, 3, 229, 189, 67, 171, 50, 189, 36, 68, 252, 61, 197, 64, 13, 191, 115, 198, 39, 60, 151, 139, 52, 60, 48, 78, 189, 189, 215, 186, 135, 186, 3, 15, 130, 60, 233, 232, 172, 188, 156, 216, 133, 61, 15, 152, 19, 189, 163, 16, 239, 60, 18, 215, 221, 60, 14, 39, 222, 186, 244, 236, 129, 189, 112, 96, 3, 188, 198, 214, 132, 61, 129, 173, 156, 190, 89, 82, 17, 185, 83, 242, 127, 61, 215, 77, 242, 188, 15, 57, 43, 61, 107, 59, 194, 187, 66, 138, 73, 60, 231, 199, 137, 187, 182, 13, 25, 61, 106, 126, 93, 187, 143, 10, 137, 60, 173, 225, 148, 61, 25, 227, 121, 189, 129, 39, 182, 64, 14, 68, 133, 63, 196, 62, 27, 191, 72, 238, 124, 61, 104, 240, 204, 190, 73, 82, 37, 190, 11, 53, 45, 60, 163, 51, 117, 190, 133, 14, 227, 61, 132, 193, 63, 190, 243, 14, 214, 60, 181, 251, 133, 190, 146, 54, 254, 189, 189, 196, 149, 62, 48, 99, 188, 189, 237, 40, 210, 189, 95, 160, 55, 188, 72, 54, 197, 60, 157, 136, 20, 189, 206, 228, 155, 60, 87, 96, 202, 60, 38, 66, 217, 185, 62, 122, 10, 61, 230, 149, 0, 186, 60, 61, 2, 189, 212, 223, 148, 60, 7, 18, 25, 190, 151, 186, 20, 59, 247, 127, 207, 59, 69, 179, 126, 188, 200, 250, 204, 187, 97, 163, 59, 184, 21, 216, 51, 59, 220, 255, 240, 59, 122, 64, 143, 187, 246, 149, 148, 60, 155, 176, 147, 60, 253, 173, 232, 187, 218, 139, 32, 187, 161, 15, 151, 64, 205, 188, 254, 60, 243, 66, 107, 190, 148, 123, 193, 190, 156, 158, 134, 189, 121, 190, 25, 190, 108, 13, 127, 60, 237, 172, 70, 62, 70, 166, 160, 188, 182, 60, 136, 61, 196, 130, 148, 189, 152, 105, 111, 61, 157, 168, 91, 61, 97, 150, 27, 189, 255, 6, 96, 189, 158, 0, 246, 58, 137, 155, 111, 59, 219, 214, 80, 188, 129, 145, 1, 188, 231, 91, 2, 61, 108, 173, 90, 188, 193, 235, 3, 60, 141, 126, 255, 188, 38, 211, 240, 60, 138, 93, 30, 60, 184, 254, 207, 187, 83, 131, 183, 189, 67, 193, 152, 60, 141, 100, 45, 59, 145, 55, 203, 59, 109, 43, 186, 187, 65, 187, 196, 187, 50, 236, 13, 60, 67, 185, 18, 60, 225, 39, 172, 187, 38, 186, 74, 58, 163, 53, 6, 188, 128, 251, 149, 188, 154, 198, 159, 59, 20, 133, 67, 62, 37, 130, 129, 191, 184, 244, 41, 63, 33, 114, 158, 190, 211, 10, 180, 62, 215, 245, 10, 60, 136, 134, 242, 189, 192, 250, 237, 61, 70, 219, 162, 189, 218, 219, 23, 62, 61, 38, 156, 189, 204, 9, 133, 61, 38, 139, 103, 61, 129, 8, 43, 63, 71, 134, 103, 59, 43, 164, 35, 62, 241, 126, 127, 189, 156, 240, 151, 61, 158, 43, 40, 189, 43, 160, 202, 187, 58, 177, 86, 189, 171, 72, 12, 187, 112, 228, 100, 188, 92, 14, 8, 60, 120, 153, 80, 189, 240, 54, 104, 60, 88, 147, 90, 190, 130, 99, 25, 63, 169, 18, 149, 190, 228, 87, 97, 62, 104, 56, 178, 189, 216, 222, 19, 189, 210, 172, 178, 60, 245, 231, 189, 189, 139, 129, 243, 60, 25, 151, 254, 188, 120, 89, 36, 61, 147, 2, 112, 189, 231, 59, 140, 60, 99, 14, 10, 62, 94, 153, 24, 63, 176, 179, 30, 63, 240, 91, 63, 62, 120, 17, 158, 61, 163, 117, 64, 190, 31, 233, 100, 190, 208, 199, 46, 190, 3, 112, 232, 189, 77, 216, 53, 189, 207, 178, 104, 60, 214, 204, 209, 60, 149, 9, 140, 61, 173, 203, 36, 64, 198, 167, 143, 63, 217, 144, 146, 61, 165, 108, 203, 187, 172, 196, 255, 190, 88, 81, 243, 190, 157, 4, 218, 57, 157, 59, 48, 190, 231, 160, 193, 189, 172, 182, 108, 61, 225, 254, 232, 61, 72, 226, 141, 187, 201, 11, 212, 188, 138, 143, 127, 63, 1, 3, 119, 190, 133, 70, 75, 191, 121, 2, 169, 190, 132, 28, 175, 190, 85, 14, 254, 61, 102, 60, 222, 62, 137, 144, 15, 62, 112, 35, 142, 61, 189, 59, 184, 61, 200, 164, 124, 61, 104, 130, 199, 60, 113, 148, 11, 190, 90, 62, 157, 191, 96, 179, 11, 62, 129, 19, 201, 62, 197, 176, 66, 62, 13, 245, 148, 62, 158, 135, 64, 62, 152, 116, 80, 61, 218, 228, 69, 61, 190, 234, 162, 188, 124, 67, 218, 188, 54, 162, 31, 189, 178, 51, 49, 60, 244, 210, 231, 60, 107, 15, 54, 64, 202, 244, 194, 63, 184, 46, 236, 62, 99, 55, 214, 61, 94, 142, 184, 190, 98, 63, 211, 190, 12, 113, 6, 190, 96, 56, 135, 190, 66, 94, 93, 190, 204, 188, 165, 189, 60, 98, 2, 188, 140, 182, 132, 60, 251, 13, 101, 61, 136, 254, 226, 63, 109, 181, 187, 62, 167, 30, 189, 190, 238, 86, 220, 190, 29, 138, 32, 191, 24, 120, 179, 190, 125, 131, 30, 61, 231, 189, 131, 189, 244, 204, 91, 189, 3, 31, 67, 61, 124, 86, 63, 62, 68, 56, 73, 61, 160, 62, 209, 188, 138, 158, 83, 63, 244, 129, 143, 63, 240, 38, 44, 63, 74, 29, 62, 62, 47, 248, 65, 190, 59, 208, 163, 190, 225, 46, 38, 190, 62, 190, 39, 190, 224, 221, 55, 190, 181, 84, 60, 189, 70, 74, 143, 61, 219, 22, 145, 61, 199, 227, 134, 61, 249, 236, 78, 64, 101, 69, 130, 63, 45, 150, 199, 190, 210, 42, 253, 190, 180, 111, 101, 191, 209, 149, 206, 190, 68, 149, 35, 62, 112, 123, 184, 189, 180, 115, 49, 189, 248, 16, 208, 61, 71, 219, 107, 62, 5, 144, 77, 59, 197, 243, 81, 190, 35, 226, 157, 61, 132, 204, 91, 191, 51, 72, 94, 191, 0, 107, 186, 190, 126, 113, 187, 60, 121, 80, 207, 62, 152, 69, 193, 62, 38, 51, 47, 62, 146, 237, 20, 62, 48, 232, 22, 62, 239, 159, 77, 60, 1, 198, 96, 190, 238, 130, 109, 190, 169, 32, 145, 63, 18, 33, 103, 63, 136, 76, 25, 62, 129, 222, 215, 190, 36, 216, 210, 190, 198, 112, 148, 189, 145, 178, 98, 62, 177, 119, 115, 61, 180, 13, 76, 190, 8, 51, 66, 190, 107, 1, 218, 188, 160, 163, 12, 62, 188, 16, 15, 62, 179, 217, 137, 63, 228, 69, 176, 62, 238, 107, 15, 189, 11, 117, 46, 189, 47, 200, 219, 190, 240, 165, 27, 190, 155, 9, 13, 62, 246, 211, 162, 56, 13, 68, 223, 189, 4, 183, 51, 59, 8, 126, 231, 61, 245, 84, 32, 61, 194, 73, 195, 187, 3, 50, 189, 60, 173, 7, 147, 190, 239, 193, 178, 189, 198, 255, 150, 62, 175, 138, 65, 62, 120, 80, 223, 188, 80, 26, 11, 60, 200, 222, 185, 189, 57, 115, 168, 61, 94, 252, 49, 62, 77, 133, 94, 61, 8, 229, 80, 189, 25, 151, 7, 190, 173, 41, 133, 64, 140, 231, 139, 63, 173, 170, 240, 190, 25, 59, 154, 190, 140, 39, 183, 190, 0, 114, 218, 189, 79, 107, 24, 62, 172, 97, 142, 190, 149, 46, 185, 59, 50, 66, 95, 62, 19, 138, 150, 189, 61, 199, 69, 190, 233, 175, 0, 190, 25, 108, 194, 63, 45, 218, 140, 190, 117, 157, 66, 191, 205, 42, 55, 190, 41, 106, 2, 61, 233, 243, 144, 61, 74, 21, 110, 61, 240, 205, 227, 61, 46, 230, 192, 61, 58, 191, 184, 61, 61, 67, 17, 190, 61, 203, 72, 190, 61, 93, 213, 189, 29, 206, 28, 192, 187, 244, 149, 190, 42, 126, 40, 63, 246, 47, 198, 62, 234, 113, 152, 62, 74, 144, 86, 60, 216, 110, 13, 189, 117, 147, 70, 62, 182, 37, 17, 190, 99, 58, 138, 190, 252, 179, 109, 60, 197, 192, 12, 62, 157, 85, 40, 62, 53, 52, 37, 64, 191, 156, 130, 63, 115, 77, 105, 190, 224, 60, 200, 189, 149, 230, 27, 191, 98, 95, 215, 190, 167, 218, 169, 62, 12, 23, 2, 190, 204, 243, 158, 190, 51, 128, 101, 62, 27, 158, 162, 62, 0, 175, 83, 189, 28, 96, 253, 189, 196, 10, 172, 63, 243, 19, 209, 189, 203, 96, 15, 191, 139, 233, 146, 61, 217, 81, 148, 60, 245, 131, 181, 60, 227, 39, 74, 62, 203, 139, 129, 189, 59, 30, 83, 59, 82, 157, 29, 62, 58, 156, 132, 61, 31, 199, 68, 190, 18, 130, 49, 190, 102, 199, 47, 191, 75, 238, 135, 190, 11, 36, 6, 62, 70, 190, 233, 61, 106, 88, 149, 62, 64, 88, 3, 62, 166, 185, 151, 190, 133, 120, 32, 189, 40, 121, 40, 62, 254, 76, 204, 189, 152, 140, 50, 190, 26, 40, 120, 60, 33, 128, 209, 61, 70, 13, 56, 64, 193, 202, 188, 63, 34, 231, 115, 60, 188, 203, 112, 190, 146, 110, 17, 191, 175, 91, 42, 190, 132, 249, 133, 62, 34, 116, 151, 190, 152, 210, 111, 190, 203, 149, 171, 61, 93, 134, 118, 61, 112, 82, 110, 188, 225, 146, 129, 189, 58, 223, 127, 64, 107, 171, 139, 62, 156, 139, 164, 191, 6, 178, 63, 191, 53, 23, 20, 191, 211, 73, 190, 61, 151, 179, 35, 62, 172, 156, 33, 190, 130, 193, 52, 61, 67, 180, 169, 62, 91, 48, 128, 189, 194, 213, 100, 190, 125, 98, 91, 190, 13, 138, 11, 192, 63, 202, 146, 191, 194, 177, 57, 190, 225, 173, 31, 62, 133, 223, 70, 63, 106, 141, 147, 62, 239, 160, 130, 190, 10, 146, 114, 62, 152, 214, 98, 62, 161, 100, 197, 188, 214, 223, 36, 190, 43, 106, 45, 190, 125, 171, 91, 189, 138, 30, 135, 63, 0, 26, 122, 63, 88, 67, 214, 62, 201, 150, 209, 59, 170, 171, 202, 190, 133, 35, 167, 190, 217, 110, 220, 189, 40, 194, 20, 61, 210, 23, 178, 61, 44, 226, 86, 189, 23, 248, 47, 62, 218, 167, 133, 61, 147, 68, 22, 190, 173, 160, 249, 63, 160, 204, 189, 62, 241, 163, 175, 190, 222, 169, 168, 190, 209, 212, 18, 191, 114, 166, 130, 60, 149, 118, 196, 62, 113, 205, 53, 62, 139, 82, 214, 61, 219, 125, 84, 190, 48, 3, 98, 62, 138, 91, 244, 60, 151, 95, 170, 190, 142, 54, 125, 191, 196, 191, 136, 191, 69, 214, 6, 191, 135, 205, 11, 62, 116, 238, 187, 62, 105, 217, 31, 63, 222, 168, 172, 62, 32, 171, 79, 61, 230, 150, 183, 188, 37, 136, 227, 60, 175, 200, 75, 61, 26, 108, 75, 189, 145, 37, 226, 60, 29, 139, 39, 64, 151, 227, 51, 63, 243, 127, 12, 190, 59, 3, 73, 189, 202, 32, 40, 191, 168, 214, 45, 189, 143, 80, 57, 62, 54, 14, 80, 189, 61, 21, 137, 61, 78, 81, 81, 190, 84, 133, 158, 62, 242, 128, 90, 188, 205, 201, 227, 190, 47, 238, 47, 63, 146, 128, 230, 60, 85, 12, 5, 190, 119, 132, 205, 60, 124, 66, 158, 60, 20, 96, 76, 61, 145, 183, 61, 189, 134, 209, 83, 189, 124, 118, 202, 188, 176, 104, 229, 60, 158, 31, 230, 60, 109, 228, 228, 189, 246, 163, 33, 190, 207, 6, 163, 190, 217, 158, 48, 60, 134, 151, 140, 61, 216, 226, 11, 61, 5, 95, 245, 61, 148, 62, 70, 189, 226, 98, 0, 190, 215, 150, 26, 187, 184, 87, 179, 60, 146, 255, 170, 61, 151, 173, 186, 189, 253, 31, 131, 188, 118, 57, 147, 61, 79, 206, 60, 64, 227, 203, 117, 63, 179, 115, 57, 190, 16, 237, 187, 189, 35, 4, 20, 191, 107, 53, 161, 190, 120, 247, 161, 61, 226, 16, 77, 188, 92, 155, 231, 188, 22, 26, 63, 190, 42, 80, 187, 62, 46, 90, 201, 189, 198, 105, 22, 191, 49, 234, 206, 63, 122, 200, 76, 190, 54, 73, 35, 191, 109, 115, 176, 188, 226, 148, 67, 189, 134, 116, 24, 62, 248, 79, 169, 60, 245, 142, 204, 188, 190, 15, 143, 59, 203, 154, 249, 58, 119, 62, 149, 61, 163, 80, 78, 190, 200, 78, 158, 190, 98, 210, 135, 191, 252, 181, 103, 190, 131, 6, 162, 62, 248, 112, 45, 62, 228, 251, 212, 62, 139, 58, 2, 61, 8, 165, 165, 190, 122, 199, 23, 189, 137, 190, 39, 188, 30, 33, 55, 62, 37, 123, 157, 190, 165, 25, 42, 61, 248, 35, 202, 62, 183, 177, 225, 63, 33, 80, 139, 63, 188, 126, 172, 62, 59, 233, 81, 190, 76, 119, 238, 190, 2, 176, 63, 190, 196, 145, 22, 62, 136, 249, 179, 187, 159, 203, 10, 188, 42, 38, 27, 190, 235, 105, 35, 62, 131, 196, 16, 189, 216, 60, 240, 189, 228, 74, 196, 63, 94, 3, 59, 188, 109, 232, 183, 190, 39, 231, 119, 190, 196, 134, 91, 190, 209, 211, 35, 62, 242, 96, 157, 62, 6, 189, 211, 188, 23, 7, 40, 61, 2, 239, 241, 189, 87, 221, 42, 62, 12, 85, 204, 189, 202, 175, 92, 190, 212, 173, 55, 191, 186, 186, 217, 190, 28, 96, 45, 189, 4, 16, 132, 62, 101, 145, 142, 62, 34, 221, 74, 61, 166, 206, 41, 190, 49, 37, 228, 189, 181, 93, 25, 189, 159, 47, 43, 61, 56, 241, 49, 189, 2, 10, 9, 189, 104, 127, 29, 60, 101, 128, 56, 64, 183, 109, 187, 63, 207, 165, 145, 59, 135, 218, 91, 190, 200, 69, 213, 190, 153, 52, 149, 190, 178, 172, 217, 61, 20, 14, 207, 188, 189, 128, 132, 190, 109, 250, 12, 62, 54, 112, 99, 62, 209, 251, 209, 189, 193, 53, 31, 190, 63, 200, 55, 63, 83, 91, 111, 188, 182, 113, 150, 190, 27, 224, 215, 60, 72, 95, 175, 61, 242, 205, 85, 61, 11, 53, 154, 186, 54, 97, 26, 188, 39, 80, 170, 58, 88, 5, 20, 62, 155, 62, 53, 61, 63, 42, 63, 190, 21, 14, 111, 189, 31, 133, 233, 189, 175, 203, 11, 190, 63, 206, 6, 61, 4, 115, 33, 62, 45, 71, 247, 60, 163, 243, 152, 60, 188, 178, 19, 190, 145, 138, 250, 188, 98, 176, 48, 61, 195, 68, 57, 61, 248, 72, 87, 189, 79, 30, 4, 189, 126, 182, 155, 61, 48, 223, 140, 64, 77, 111, 86, 63, 19, 185, 36, 191, 212, 19, 235, 189, 13, 195, 155, 190, 195, 158, 142, 189, 6, 211, 18, 190, 160, 185, 28, 190, 176, 122, 52, 62, 183, 30, 61, 62, 239, 96, 46, 189, 87, 58, 136, 190, 226, 193, 22, 190, 130, 60, 135, 62, 124, 145, 12, 190, 187, 155, 37, 188, 111, 16, 137, 62, 217, 140, 79, 62, 144, 217, 42, 190, 122, 8, 112, 190, 35, 175, 135, 61, 77, 112, 221, 61, 41, 222, 91, 189, 25, 172, 229, 189, 57, 73, 158, 61, 75, 76, 17, 62, 235, 119, 24, 190, 207, 136, 82, 61, 125, 25, 44, 62, 251, 61, 79, 61, 56, 166, 9, 189, 48, 192, 127, 189, 239, 253, 175, 61, 22, 247, 177, 188, 27, 47, 129, 189, 214, 211, 1, 189, 147, 170, 133, 57, 219, 216, 16, 62, 9, 214, 229, 188, 172, 171, 171, 64, 53, 212, 73, 63, 22, 89, 43, 191, 40, 136, 188, 62, 81, 51, 2, 191, 102, 111, 25, 190, 241, 206, 24, 62, 250, 217, 155, 190, 55, 151, 0, 61, 179, 117, 250, 188, 96, 221, 4, 61, 93, 37, 224, 189, 23, 106, 41, 190, 74, 174, 215, 61, 254, 73, 10, 190, 13, 107, 249, 188, 92, 231, 235, 61, 188, 0, 86, 61, 204, 141, 6, 62, 244, 147, 14, 189, 177, 127, 139, 189, 173, 221, 187, 187, 89, 181, 190, 188, 41, 142, 241, 59, 135, 230, 149, 189, 153, 173, 205, 189, 241, 159, 87, 189, 218, 20, 80, 189, 224, 164, 150, 60, 82, 149, 34, 189, 210, 194, 16, 61, 1, 110, 143, 188, 221, 123, 94, 189, 172, 125, 129, 60, 162, 80, 116, 60, 251, 89, 79, 60, 35, 170, 150, 59, 226, 115, 99, 189, 134, 96, 232, 60, 60, 63, 82, 64, 151, 220, 168, 63, 81, 200, 31, 61, 71, 177, 229, 189, 140, 111, 27, 191, 51, 156, 226, 190, 182, 18, 114, 62, 185, 151, 208, 189, 181, 53, 204, 190, 143, 219, 82, 61, 215, 15, 51, 62, 21, 99, 222, 59, 136, 227, 20, 61, 109, 61, 6, 63, 161, 137, 180, 189, 217, 47, 110, 190, 226, 189, 241, 60, 124, 51, 13, 189, 30, 10, 157, 60, 156, 250, 188, 61, 152, 80, 245, 188, 184, 124, 233, 58, 40, 22, 219, 61, 221, 24, 200, 60, 249, 64, 178, 189, 225, 99, 141, 189, 202, 85, 248, 189, 120, 3, 141, 187, 7, 10, 241, 60, 217, 238, 54, 189, 32, 170, 171, 61, 9, 162, 156, 61, 183, 27, 180, 189, 16, 192, 42, 59, 8, 105, 103, 61, 251, 108, 24, 189, 223, 122, 161, 188, 159, 4, 22, 188, 203, 226, 110, 188, 200, 252, 132, 64, 131, 142, 24, 63, 243, 148, 20, 191, 150, 195, 220, 62, 56, 27, 147, 190, 102, 59, 5, 191, 67, 92, 63, 189, 138, 120, 42, 189, 225, 87, 235, 61, 124, 50, 217, 61, 36, 31, 133, 190, 202, 209, 88, 60, 26, 46, 138, 60, 209, 119, 154, 62, 61, 83, 207, 189, 255, 92, 179, 62, 154, 91, 187, 62, 211, 102, 215, 189, 39, 36, 48, 190, 4, 75, 74, 189, 112, 83, 80, 188, 245, 56, 251, 189, 129, 244, 109, 188, 188, 7, 200, 61, 205, 7, 213, 61, 222, 52, 34, 186, 253, 118, 205, 190, 237, 30, 135, 189, 83, 244, 152, 61, 121, 17, 200, 189, 147, 223, 119, 60, 115, 241, 201, 61, 9, 244, 142, 60, 206, 199, 67, 60, 6, 253, 16, 189, 124, 175, 150, 59, 52, 146, 77, 61, 67, 142, 29, 189, 151, 190, 202, 59, 210, 182, 111, 64, 106, 117, 42, 63, 158, 85, 73, 191, 62, 87, 35, 62, 216, 199, 117, 190, 14, 75, 222, 190, 156, 121, 128, 60, 16, 144, 105, 190, 238, 247, 15, 61, 172, 126, 159, 62, 84, 77, 231, 61, 250, 204, 76, 190, 155, 8, 8, 190, 5, 232, 128, 62, 152, 20, 65, 190, 224, 106, 144, 187, 44, 148, 144, 62, 76, 64, 93, 62, 80, 201, 137, 189, 36, 60, 206, 190, 236, 116, 121, 60, 241, 187, 103, 62, 116, 167, 76, 189, 137, 144, 36, 190, 40, 48, 147, 61, 150, 251, 229, 61, 236, 213, 130, 190, 87, 100, 205, 188, 3, 197, 106, 62, 188, 67, 121, 61, 55, 147, 178, 189, 185, 64, 131, 188, 97, 149, 237, 59, 90, 105, 157, 61, 39, 217, 29, 190, 93, 229, 229, 189, 0, 20, 7, 61, 184, 63, 255, 61, 133, 173, 111, 61, 191, 16, 76, 64, 102, 98, 60, 63, 74, 244, 50, 191, 31, 6, 179, 190, 108, 198, 70, 190, 62, 254, 113, 189]).concat([55, 40, 241, 61, 110, 64, 81, 189, 85, 81, 134, 59, 60, 152, 18, 62, 220, 213, 29, 190, 186, 184, 127, 190, 232, 38, 185, 189, 234, 238, 198, 190, 7, 50, 15, 190, 116, 71, 237, 59, 41, 200, 154, 61, 103, 193, 34, 61, 244, 218, 149, 189, 121, 152, 129, 189, 186, 123, 164, 61, 190, 97, 177, 61, 234, 244, 87, 189, 240, 63, 43, 189, 243, 54, 71, 61, 248, 13, 99, 61, 220, 89, 146, 61, 53, 173, 170, 61, 144, 166, 215, 61, 116, 133, 213, 61, 142, 45, 67, 189, 190, 47, 132, 189, 54, 96, 19, 188, 15, 52, 15, 189, 26, 37, 38, 56, 117, 82, 143, 59, 226, 67, 54, 60, 97, 236, 110, 61, 157, 65, 101, 187, 56, 248, 72, 64, 55, 238, 186, 62, 255, 169, 102, 190, 130, 111, 63, 63, 141, 29, 204, 189, 78, 169, 1, 191, 239, 74, 196, 190, 224, 66, 64, 190, 12, 99, 218, 188, 119, 90, 156, 188, 122, 23, 85, 189, 101, 254, 134, 60, 75, 14, 7, 61, 165, 115, 108, 191, 168, 213, 150, 189, 102, 154, 193, 62, 67, 13, 17, 62, 84, 112, 28, 61, 29, 40, 81, 61, 138, 154, 132, 61, 191, 142, 80, 59, 75, 159, 23, 190, 213, 103, 76, 190, 206, 122, 35, 189, 155, 233, 246, 60, 145, 192, 123, 188, 114, 10, 158, 190, 209, 82, 35, 61, 204, 59, 128, 188, 170, 224, 50, 190, 4, 203, 87, 188, 113, 231, 212, 61, 108, 112, 0, 62, 144, 58, 200, 59, 136, 59, 242, 60, 7, 87, 72, 61, 233, 81, 72, 61, 132, 107, 157, 189, 29, 185, 159, 189, 61, 22, 48, 64, 185, 42, 136, 63, 169, 195, 3, 61, 124, 98, 46, 189, 156, 29, 224, 190, 116, 243, 236, 189, 15, 205, 202, 189, 228, 74, 204, 189, 248, 117, 66, 61, 127, 52, 220, 189, 102, 180, 143, 62, 81, 188, 244, 189, 221, 26, 212, 190, 44, 106, 211, 61, 7, 225, 168, 189, 183, 166, 157, 189, 55, 123, 84, 62, 89, 235, 62, 62, 160, 106, 127, 188, 160, 91, 123, 190, 12, 168, 76, 189, 84, 123, 205, 61, 162, 237, 161, 61, 17, 123, 207, 189, 251, 34, 145, 189, 24, 45, 129, 61, 228, 191, 44, 190, 158, 217, 56, 189, 39, 131, 180, 61, 182, 199, 242, 61, 196, 47, 0, 61, 43, 195, 160, 189, 138, 20, 108, 189, 25, 245, 164, 187, 44, 16, 241, 60, 205, 165, 158, 189, 47, 9, 40, 189, 42, 73, 153, 61, 247, 12, 206, 61, 186, 26, 16, 64, 104, 193, 154, 62, 113, 118, 223, 62, 64, 62, 132, 63, 216, 200, 107, 190, 18, 82, 102, 190, 204, 66, 172, 190, 163, 61, 170, 190, 246, 112, 218, 188, 114, 89, 180, 190, 99, 185, 23, 187, 129, 53, 131, 188, 120, 55, 20, 190, 1, 131, 17, 191, 83, 139, 74, 189, 51, 91, 35, 62, 68, 113, 121, 187, 192, 224, 230, 61, 62, 181, 244, 61, 6, 45, 169, 61, 124, 174, 175, 188, 165, 140, 5, 189, 95, 16, 214, 188, 187, 216, 93, 189, 50, 31, 231, 57, 213, 60, 185, 59, 12, 171, 7, 190, 102, 135, 13, 188, 116, 201, 100, 189, 228, 160, 225, 189, 105, 97, 71, 61, 160, 212, 106, 61, 126, 228, 56, 60, 80, 34, 233, 60, 104, 9, 137, 59, 230, 231, 78, 61, 14, 177, 143, 60, 159, 162, 76, 188, 254, 204, 75, 185, 247, 247, 61, 64, 91, 207, 127, 62, 2, 216, 237, 189, 184, 223, 18, 63, 74, 193, 208, 189, 96, 28, 255, 190, 44, 64, 147, 190, 114, 159, 66, 190, 167, 30, 224, 189, 100, 124, 83, 190, 82, 2, 81, 190, 81, 135, 231, 189, 115, 93, 165, 190, 159, 161, 67, 191, 30, 248, 184, 189, 180, 21, 10, 62, 193, 5, 229, 61, 195, 70, 234, 60, 112, 188, 1, 61, 174, 241, 123, 188, 41, 135, 172, 188, 129, 214, 82, 189, 12, 131, 75, 188, 91, 126, 219, 59, 67, 66, 196, 60, 106, 108, 232, 60, 88, 251, 10, 190, 148, 74, 144, 61, 66, 119, 126, 61, 185, 58, 25, 190, 22, 57, 66, 189, 70, 64, 191, 61, 133, 175, 185, 61, 170, 160, 186, 59, 254, 62, 136, 61, 37, 133, 254, 59, 62, 114, 9, 59, 63, 239, 5, 189, 11, 149, 217, 188, 212, 132, 71, 64, 41, 88, 39, 63, 207, 4, 15, 190, 146, 4, 131, 62, 222, 121, 160, 190, 85, 115, 152, 190, 184, 52, 129, 190, 32, 115, 240, 189, 113, 34, 2, 62, 199, 192, 237, 189, 191, 124, 243, 61, 114, 3, 43, 190, 114, 16, 147, 190, 207, 83, 77, 190, 150, 175, 140, 190, 50, 24, 17, 62, 120, 194, 221, 62, 103, 176, 236, 61, 81, 61, 99, 190, 200, 67, 108, 190, 34, 121, 101, 188, 183, 207, 16, 189, 187, 66, 183, 189, 41, 217, 18, 190, 92, 141, 2, 62, 122, 86, 104, 62, 236, 225, 118, 190, 141, 206, 61, 60, 252, 146, 202, 61, 246, 164, 50, 61, 238, 178, 100, 189, 10, 16, 169, 59, 207, 187, 144, 61, 193, 196, 46, 188, 3, 81, 8, 190, 161, 145, 226, 188, 31, 140, 42, 61, 12, 136, 63, 61, 144, 27, 134, 188, 109, 101, 171, 191, 248, 208, 226, 190, 224, 99, 93, 190, 135, 203, 135, 61, 180, 25, 144, 61, 86, 136, 9, 62, 37, 121, 233, 60, 64, 141, 79, 189, 123, 186, 42, 62, 201, 62, 154, 61, 52, 133, 134, 189, 133, 129, 38, 61, 159, 236, 112, 61, 130, 204, 245, 63, 229, 60, 145, 63, 216, 179, 234, 62, 83, 206, 156, 62, 248, 98, 110, 62, 27, 245, 113, 188, 28, 35, 216, 189, 250, 219, 206, 189, 89, 205, 136, 189, 42, 252, 84, 61, 142, 197, 2, 189, 66, 7, 201, 189, 252, 159, 108, 189, 77, 124, 4, 64, 139, 20, 125, 63, 151, 151, 4, 62, 186, 70, 72, 189, 25, 51, 186, 189, 125, 215, 144, 189, 101, 238, 54, 190, 145, 43, 54, 190, 94, 201, 65, 187, 127, 99, 137, 188, 57, 203, 179, 189, 144, 206, 16, 189, 5, 236, 153, 189, 237, 109, 108, 191, 16, 91, 42, 191, 92, 73, 208, 190, 145, 77, 47, 62, 108, 193, 104, 189, 251, 185, 149, 62, 24, 5, 196, 188, 117, 247, 178, 190, 187, 217, 220, 62, 232, 215, 191, 188, 0, 183, 71, 190, 45, 68, 17, 62, 144, 97, 170, 189, 0, 200, 219, 62, 161, 182, 143, 62, 11, 255, 61, 62, 3, 229, 100, 62, 140, 58, 105, 62, 95, 247, 180, 188, 216, 154, 194, 61, 104, 144, 251, 60, 75, 217, 82, 189, 203, 91, 137, 61, 145, 59, 114, 189, 42, 7, 4, 61, 123, 196, 24, 62, 246, 248, 118, 63, 58, 20, 102, 63, 195, 144, 3, 63, 204, 247, 144, 62, 253, 35, 140, 62, 123, 40, 214, 188, 131, 190, 186, 58, 133, 100, 196, 61, 190, 31, 61, 190, 13, 59, 180, 60, 141, 54, 101, 61, 57, 20, 43, 190, 47, 249, 246, 188, 150, 111, 214, 191, 254, 171, 189, 190, 45, 201, 53, 189, 203, 199, 132, 189, 175, 32, 43, 62, 0, 101, 214, 61, 229, 61, 14, 60, 226, 173, 170, 61, 60, 186, 105, 61, 255, 189, 124, 61, 106, 19, 179, 60, 1, 107, 241, 60, 120, 13, 128, 61, 9, 155, 24, 64, 246, 42, 115, 63, 1, 100, 51, 61, 16, 31, 33, 190, 85, 151, 14, 190, 55, 211, 62, 187, 75, 249, 53, 189, 254, 86, 51, 190, 208, 136, 167, 59, 44, 247, 28, 62, 33, 177, 24, 61, 110, 180, 150, 189, 57, 125, 208, 189, 73, 16, 20, 64, 116, 143, 44, 63, 170, 254, 84, 190, 81, 238, 16, 190, 114, 247, 75, 190, 11, 53, 241, 188, 84, 237, 128, 60, 26, 223, 130, 190, 38, 217, 160, 189, 174, 245, 138, 61, 100, 71, 211, 60, 200, 193, 31, 189, 255, 21, 216, 189, 130, 126, 139, 191, 203, 54, 15, 191, 224, 146, 222, 189, 128, 242, 243, 61, 147, 22, 165, 190, 57, 231, 94, 62, 119, 80, 3, 62, 189, 239, 21, 190, 238, 74, 159, 62, 165, 16, 133, 189, 227, 182, 180, 189, 208, 157, 102, 62, 222, 144, 93, 190, 84, 143, 165, 62, 10, 54, 71, 60, 22, 9, 188, 189, 34, 98, 0, 189, 82, 99, 169, 188, 65, 173, 168, 60, 88, 126, 11, 60, 233, 193, 115, 188, 154, 187, 70, 61, 190, 13, 143, 60, 237, 110, 66, 189, 122, 15, 166, 60, 92, 89, 70, 59, 214, 126, 182, 60, 178, 215, 146, 61, 251, 249, 34, 189, 63, 89, 7, 189, 0, 103, 40, 62, 72, 17, 247, 188, 215, 148, 62, 189, 78, 163, 132, 61, 161, 7, 44, 189, 206, 14, 151, 186, 172, 222, 51, 187, 113, 215, 65, 189, 99, 60, 202, 61, 179, 190, 140, 190, 245, 26, 144, 60, 49, 13, 95, 190, 34, 5, 159, 190, 240, 38, 162, 189, 0, 45, 159, 62, 1, 99, 147, 62, 74, 101, 169, 61, 70, 21, 47, 189, 212, 235, 6, 190, 176, 250, 246, 188, 12, 208, 161, 61, 139, 23, 156, 61, 247, 84, 119, 63, 180, 255, 241, 62, 246, 155, 187, 61, 222, 221, 49, 61, 118, 222, 88, 61, 198, 121, 126, 188, 99, 67, 115, 189, 127, 85, 94, 189, 96, 189, 149, 60, 40, 53, 87, 60, 182, 250, 115, 189, 227, 35, 95, 188, 238, 226, 4, 187, 80, 3, 235, 62, 163, 245, 7, 188, 140, 189, 226, 189, 245, 191, 135, 189, 60, 90, 214, 189, 115, 180, 245, 188, 55, 45, 84, 189, 44, 107, 128, 189, 223, 98, 97, 61, 34, 148, 40, 61, 20, 29, 36, 186, 181, 136, 25, 61, 152, 239, 54, 189, 239, 55, 91, 64, 117, 130, 126, 63, 19, 39, 4, 191, 79, 41, 208, 188, 183, 46, 45, 190, 54, 106, 55, 61, 100, 80, 152, 60, 186, 201, 193, 190, 233, 27, 18, 62, 113, 84, 21, 62, 61, 111, 98, 189, 109, 124, 40, 187, 78, 172, 229, 189, 15, 159, 230, 63, 237, 162, 126, 189, 163, 141, 221, 190, 57, 224, 180, 61, 194, 109, 50, 190, 250, 136, 60, 188, 32, 223, 27, 62, 253, 13, 242, 189, 234, 19, 20, 188, 190, 180, 226, 188, 190, 249, 165, 59, 70, 237, 58, 188, 43, 16, 16, 189, 21, 49, 196, 191, 35, 130, 191, 190, 170, 216, 177, 62, 101, 239, 241, 61, 45, 166, 63, 62, 68, 243, 184, 60, 20, 186, 102, 189, 90, 247, 29, 62, 255, 184, 51, 59, 236, 185, 182, 188, 111, 41, 189, 188, 162, 58, 39, 188, 224, 91, 74, 61, 231, 119, 177, 63, 1, 94, 119, 63, 222, 67, 108, 61, 85, 47, 14, 190, 135, 237, 111, 189, 245, 94, 223, 60, 210, 47, 198, 189, 64, 93, 83, 190, 95, 149, 181, 60, 1, 83, 23, 62, 96, 77, 148, 61, 244, 196, 100, 189, 173, 39, 218, 189, 58, 254, 116, 64, 94, 221, 155, 63, 174, 14, 175, 190, 62, 3, 217, 189, 244, 79, 200, 190, 72, 3, 170, 189, 45, 152, 135, 61, 139, 212, 188, 190, 3, 197, 124, 189, 23, 62, 138, 61, 150, 220, 193, 61, 14, 235, 4, 190, 62, 198, 82, 190, 215, 97, 189, 190, 167, 141, 76, 191, 105, 197, 231, 190, 10, 5, 162, 61, 216, 48, 138, 188, 254, 104, 179, 61, 3, 41, 65, 62, 234, 25, 49, 61, 107, 169, 52, 60, 161, 228, 207, 189, 252, 79, 181, 189, 198, 32, 58, 60, 127, 3, 229, 61, 207, 212, 151, 63, 1, 90, 222, 62, 31, 144, 146, 189, 66, 226, 27, 62, 119, 87, 126, 62, 10, 22, 94, 62, 136, 210, 52, 190, 130, 68, 111, 190, 69, 181, 145, 62, 166, 152, 240, 61, 34, 101, 149, 190, 125, 122, 2, 60, 192, 114, 169, 60, 49, 79, 84, 64, 157, 149, 66, 63, 220, 202, 194, 190, 54, 77, 32, 190, 124, 81, 82, 190, 123, 38, 132, 189, 25, 202, 246, 189, 185, 43, 64, 190, 93, 108, 201, 61, 49, 28, 154, 60, 206, 184, 247, 189, 163, 136, 17, 62, 92, 42, 52, 189, 7, 62, 234, 190, 198, 234, 199, 190, 66, 41, 188, 190, 5, 37, 46, 190, 232, 84, 172, 190, 51, 10, 15, 190, 150, 215, 30, 62, 122, 214, 6, 61, 243, 243, 46, 189, 223, 215, 233, 189, 125, 17, 99, 62, 13, 58, 152, 61, 85, 219, 188, 189, 164, 231, 131, 64, 148, 208, 1, 63, 119, 89, 17, 191, 155, 86, 5, 62, 165, 4, 1, 190, 117, 118, 67, 190, 107, 31, 45, 190, 205, 234, 65, 190, 198, 201, 113, 62, 75, 58, 24, 61, 114, 100, 168, 60, 63, 127, 65, 61, 83, 49, 79, 190, 216, 77, 42, 191, 75, 88, 191, 187, 202, 74, 63, 62, 241, 16, 62, 62, 246, 105, 165, 61, 70, 72, 101, 188, 25, 164, 140, 189, 97, 252, 226, 60, 9, 218, 250, 189, 169, 186, 183, 188, 47, 205, 169, 188, 231, 204, 135, 61, 15, 111, 214, 61, 56, 216, 189, 190, 42, 7, 100, 61, 134, 9, 143, 61, 16, 142, 150, 189, 112, 249, 253, 60, 250, 216, 176, 61, 8, 162, 74, 61, 182, 91, 136, 189, 55, 2, 165, 189, 25, 238, 5, 188, 219, 198, 201, 59, 189, 175, 7, 189, 137, 42, 137, 60, 244, 45, 104, 64, 86, 83, 38, 63, 84, 106, 215, 190, 92, 10, 67, 190, 230, 38, 232, 190, 203, 91, 140, 62, 77, 95, 41, 62, 48, 199, 174, 190, 60, 147, 148, 61, 163, 65, 160, 186, 64, 45, 126, 61, 220, 119, 20, 189, 165, 65, 144, 190, 133, 184, 189, 62, 186, 5, 4, 190, 187, 49, 250, 189, 223, 213, 226, 61, 47, 6, 124, 61, 115, 181, 241, 189, 150, 162, 136, 189, 128, 238, 104, 61, 176, 81, 6, 61, 199, 173, 171, 188, 106, 226, 84, 187, 69, 181, 49, 60, 107, 153, 237, 187, 154, 2, 152, 190, 101, 216, 228, 60, 218, 177, 88, 61, 131, 146, 73, 61, 163, 242, 106, 61, 97, 5, 147, 189, 222, 102, 2, 189, 149, 62, 88, 61, 112, 49, 117, 186, 194, 67, 147, 60, 138, 28, 52, 60, 190, 143, 181, 59, 42, 74, 157, 60, 212, 12, 236, 63, 79, 118, 215, 62, 178, 143, 231, 189, 201, 95, 144, 62, 159, 196, 242, 60, 50, 66, 53, 189, 135, 25, 53, 190, 129, 53, 73, 190, 202, 35, 116, 187, 155, 204, 19, 59, 243, 167, 97, 188, 171, 123, 30, 188, 102, 199, 171, 189, 43, 146, 160, 191, 135, 250, 61, 190, 120, 47, 38, 62, 213, 119, 15, 190, 161, 30, 170, 61, 250, 43, 235, 61, 8, 52, 18, 60, 42, 216, 70, 61, 13, 55, 225, 188, 73, 214, 7, 61, 98, 80, 30, 189, 55, 133, 91, 189, 184, 182, 84, 61, 193, 243, 128, 61, 253, 160, 201, 189, 79, 185, 168, 189, 9, 82, 141, 188, 60, 13, 182, 188, 92, 106, 218, 58, 58, 172, 9, 61, 175, 47, 31, 61, 57, 168, 27, 61, 24, 56, 73, 60, 151, 127, 11, 60, 168, 176, 6, 188, 231, 56, 112, 188, 235, 176, 137, 64, 87, 127, 101, 63, 102, 234, 248, 190, 28, 120, 194, 189, 203, 201, 213, 190, 119, 181, 138, 61, 35, 124, 210, 61, 0, 106, 228, 190, 169, 150, 83, 62, 121, 75, 0, 190, 83, 190, 48, 62, 147, 137, 10, 190, 196, 109, 197, 190, 41, 93, 176, 61, 32, 54, 95, 189, 67, 143, 172, 189, 184, 157, 180, 61, 55, 230, 121, 61, 21, 176, 119, 189, 220, 144, 30, 189, 114, 179, 9, 61, 209, 152, 202, 60, 66, 244, 187, 58, 82, 76, 52, 189, 22, 182, 56, 187, 231, 181, 33, 188, 228, 14, 100, 189, 16, 10, 66, 189, 29, 205, 38, 188, 97, 71, 82, 60, 207, 216, 120, 58, 116, 186, 109, 188, 162, 100, 24, 189, 19, 142, 47, 60, 79, 18, 49, 60, 91, 87, 33, 60, 148, 55, 9, 188, 81, 199, 187, 60, 118, 220, 216, 59, 49, 111, 163, 64, 215, 33, 181, 62, 129, 42, 235, 190, 235, 147, 53, 190, 67, 46, 81, 190, 12, 15, 14, 62, 59, 224, 211, 189, 28, 194, 156, 188, 44, 22, 145, 61, 252, 121, 68, 62, 228, 223, 93, 190, 115, 88, 238, 61, 99, 21, 15, 61, 193, 67, 18, 62, 155, 234, 184, 189, 182, 251, 217, 60, 159, 75, 203, 60, 85, 216, 136, 187, 91, 64, 212, 189, 112, 177, 53, 188, 210, 250, 235, 61, 20, 145, 77, 189, 35, 252, 165, 60, 229, 239, 255, 59, 78, 99, 168, 60, 206, 151, 201, 188, 78, 16, 10, 190, 77, 8, 45, 60, 236, 202, 41, 61, 21, 69, 240, 60, 246, 94, 139, 188, 220, 134, 64, 189, 208, 114, 56, 60, 246, 2, 130, 60, 185, 78, 179, 58, 78, 67, 149, 186, 232, 145, 181, 60, 32, 140, 250, 187, 28, 25, 57, 188, 92, 0, 146, 64, 4, 12, 145, 63, 223, 65, 231, 190, 238, 103, 54, 62, 217, 17, 142, 189, 31, 66, 113, 190, 1, 223, 28, 190, 79, 169, 86, 190, 127, 170, 29, 189, 75, 2, 186, 61, 237, 62, 168, 60, 128, 148, 68, 190, 229, 152, 154, 189, 179, 29, 99, 62, 43, 203, 39, 190, 147, 242, 188, 189, 87, 191, 69, 62, 96, 59, 3, 61, 79, 112, 62, 190, 163, 20, 12, 190, 140, 51, 79, 62, 17, 186, 51, 61, 183, 34, 197, 189, 46, 182, 147, 60, 200, 112, 155, 61, 1, 67, 141, 61, 247, 120, 185, 190, 88, 107, 193, 60, 191, 137, 39, 62, 52, 24, 74, 189, 208, 47, 31, 189, 67, 72, 36, 61, 153, 184, 101, 189, 132, 243, 125, 187, 148, 59, 100, 60, 237, 144, 88, 189, 133, 154, 30, 59, 67, 65, 153, 61, 23, 40, 98, 185, 55, 236, 174, 64, 118, 4, 145, 63, 235, 64, 20, 191, 105, 65, 167, 187, 147, 64, 190, 190, 163, 128, 30, 61, 213, 81, 164, 61, 121, 164, 217, 190, 49, 134, 116, 61, 153, 88, 10, 189, 101, 138, 198, 188, 119, 163, 236, 189, 13, 176, 46, 190, 190, 168, 178, 62, 125, 118, 208, 189, 103, 167, 182, 189, 131, 124, 34, 61, 14, 107, 63, 61, 89, 173, 128, 189, 249, 240, 93, 188, 123, 215, 31, 59, 27, 190, 165, 60, 94, 205, 182, 59, 99, 160, 133, 188, 103, 17, 109, 188, 4, 131, 115, 60, 107, 58, 238, 189, 91, 109, 21, 188, 238, 167, 222, 187, 44, 29, 248, 60, 61, 198, 59, 60, 92, 214, 66, 189, 151, 253, 100, 188, 47, 108, 9, 61, 204, 176, 17, 188, 226, 109, 42, 60, 104, 107, 151, 186, 35, 235, 37, 186, 234, 142, 64, 60, 191, 80, 112, 64, 118, 240, 187, 63, 130, 145, 191, 190, 78, 240, 47, 189, 117, 124, 214, 188, 233, 184, 152, 189, 245, 15, 104, 190, 163, 185, 112, 190, 84, 192, 48, 190, 34, 9, 65, 62, 56, 214, 98, 61, 88, 30, 129, 190, 206, 68, 3, 189, 210, 140, 93, 61, 182, 113, 49, 60, 57, 51, 133, 189, 121, 69, 85, 59, 246, 170, 43, 61, 37, 227, 238, 188, 223, 167, 23, 187, 97, 59, 97, 61, 1, 229, 244, 188, 87, 220, 138, 60, 1, 27, 186, 187, 66, 99, 55, 189, 87, 41, 148, 188, 40, 18, 130, 189, 96, 104, 51, 189, 103, 247, 183, 188, 199, 183, 195, 61, 142, 61, 220, 60, 22, 188, 67, 188, 62, 118, 77, 186, 52, 216, 149, 60, 24, 82, 97, 60, 157, 193, 227, 186, 57, 8, 157, 187, 54, 71, 91, 188, 128, 69, 138, 183, 114, 172, 148, 64, 0, 38, 0, 63, 9, 59, 84, 191, 220, 47, 177, 62, 149, 171, 51, 190, 234, 25, 154, 189, 27, 59, 138, 189, 73, 239, 71, 190, 134, 53, 137, 62, 63, 200, 193, 61, 12, 66, 134, 190, 14, 239, 58, 62, 247, 76, 154, 188, 78, 121, 165, 60, 183, 182, 160, 189, 193, 6, 128, 61, 122, 5, 156, 61, 92, 17, 69, 189, 8, 197, 163, 189, 201, 26, 99, 60, 132, 199, 146, 61, 56, 103, 36, 189, 70, 34, 30, 188, 120, 115, 42, 60, 14, 57, 160, 59, 41, 194, 197, 60, 125, 102, 26, 190, 248, 173, 56, 60, 159, 64, 139, 61, 150, 182, 128, 60, 123, 97, 111, 187, 237, 55, 122, 188, 151, 109, 227, 186, 192, 138, 227, 186, 253, 102, 18, 60, 203, 6, 101, 187, 37, 32, 250, 58, 162, 155, 69, 187, 29, 81, 83, 59, 69, 239, 57, 64, 216, 5, 206, 62, 110, 163, 157, 61, 40, 10, 44, 63, 154, 249, 145, 190, 104, 59, 210, 190, 240, 176, 78, 188, 213, 89, 225, 189, 83, 153, 81, 61, 13, 134, 89, 61, 24, 56, 140, 189, 107, 82, 61, 62, 40, 30, 104, 60, 141, 24, 135, 191, 113, 197, 164, 60, 15, 8, 187, 62, 138, 161, 225, 188, 125, 100, 212, 61, 102, 67, 116, 61, 177, 39, 239, 188, 239, 29, 132, 189, 31, 142, 152, 189, 145, 62, 55, 60, 143, 107, 172, 61, 145, 238, 38, 188, 126, 116, 213, 59, 179, 121, 216, 189, 137, 118, 202, 188, 49, 139, 129, 189, 4, 13, 151, 189, 72, 178, 187, 61, 178, 45, 246, 61, 235, 242, 65, 188, 135, 110, 141, 58, 186, 183, 185, 59, 10, 20, 64, 188, 151, 117, 149, 188, 155, 48, 187, 188, 205, 156, 242, 59, 211, 235, 48, 64, 134, 10, 228, 62, 112, 23, 243, 190, 71, 129, 133, 62, 90, 70, 72, 61, 230, 11, 96, 190, 69, 165, 106, 190, 101, 9, 193, 189, 44, 25, 134, 61, 166, 191, 14, 62, 58, 156, 134, 189, 111, 62, 101, 189, 109, 194, 190, 188, 195, 163, 144, 191, 5, 108, 84, 190, 152, 35, 100, 62, 135, 142, 93, 189, 154, 104, 131, 61, 142, 144, 143, 61, 91, 52, 235, 187, 101, 89, 138, 61, 252, 247, 189, 59, 214, 181, 118, 189, 227, 223, 185, 60, 24, 191, 215, 60, 75, 133, 136, 186, 79, 167, 237, 189, 131, 80, 211, 188, 248, 17, 38, 60, 130, 225, 48, 188, 126, 237, 15, 189, 131, 28, 42, 61, 62, 176, 201, 61, 110, 6, 43, 188, 171, 95, 203, 188, 169, 144, 33, 189, 4, 218, 73, 60, 230, 61, 18, 60, 65, 99, 114, 188, 191, 180, 137, 64, 158, 162, 96, 63, 125, 182, 95, 191, 13, 95, 53, 62, 107, 22, 37, 190, 38, 68, 166, 189, 85, 173, 43, 62, 166, 189, 203, 190, 158, 166, 206, 60, 146, 121, 58, 62, 46, 41, 5, 189, 51, 127, 238, 189, 214, 226, 214, 189, 202, 46, 137, 62, 127, 199, 249, 189, 139, 247, 48, 189, 42, 192, 142, 61, 52, 85, 154, 60, 41, 102, 37, 189, 82, 90, 140, 189, 25, 75, 146, 61, 59, 238, 5, 61, 228, 22, 120, 188, 204, 18, 6, 189, 141, 117, 254, 188, 126, 252, 40, 60, 127, 71, 81, 190, 51, 162, 25, 189, 45, 234, 44, 61, 36, 221, 132, 188, 37, 68, 10, 61, 178, 219, 150, 187, 152, 184, 157, 189, 79, 213, 76, 61, 83, 187, 123, 57, 99, 135, 145, 60, 135, 59, 116, 186, 212, 161, 110, 60, 236, 141, 163, 60, 196, 106, 16, 191, 146, 227, 254, 190, 106, 210, 138, 62, 239, 73, 65, 190, 184, 108, 205, 61, 202, 26, 124, 190, 211, 50, 55, 189, 202, 33, 75, 190, 34, 46, 143, 60, 44, 146, 219, 59, 50, 203, 25, 62, 223, 214, 194, 61, 160, 53, 183, 61, 221, 109, 106, 64, 60, 248, 214, 63, 50, 193, 201, 62, 180, 101, 131, 62, 178, 35, 22, 191, 119, 73, 246, 190, 27, 167, 38, 190, 28, 52, 217, 188, 12, 74, 131, 61, 203, 177, 51, 62, 254, 222, 209, 189, 43, 128, 111, 189, 25, 12, 3, 62, 134, 17, 27, 64, 255, 7, 251, 62, 119, 66, 199, 190, 127, 230, 11, 189, 91, 2, 142, 190, 103, 8, 58, 61, 70, 88, 13, 62, 227, 134, 89, 62, 164, 157, 78, 61, 78, 9, 248, 61, 219, 121, 103, 190, 241, 136, 10, 190, 106, 168, 25, 61, 135, 216, 0, 192, 214, 213, 204, 190, 198, 188, 169, 187, 80, 138, 89, 60, 24, 108, 204, 61, 11, 27, 106, 61, 79, 252, 159, 60, 115, 44, 80, 61, 251, 49, 139, 60, 235, 31, 49, 60, 135, 14, 9, 61, 243, 92, 6, 61, 58, 39, 206, 60, 105, 18, 232, 63, 253, 109, 66, 63, 128, 159, 184, 62, 34, 149, 234, 61, 172, 11, 82, 190, 112, 202, 154, 190, 125, 211, 5, 190, 56, 142, 4, 190, 44, 22, 39, 60, 39, 176, 146, 61, 16, 197, 55, 189, 169, 77, 36, 189, 184, 132, 8, 61, 28, 119, 66, 64, 93, 216, 159, 63, 100, 235, 98, 62, 195, 99, 130, 61, 109, 67, 221, 190, 58, 102, 181, 190, 252, 200, 61, 190, 157, 148, 183, 189, 216, 219, 163, 61, 19, 25, 222, 61, 187, 17, 21, 190, 44, 200, 252, 189, 192, 149, 187, 61, 149, 119, 184, 191, 3, 218, 207, 190, 221, 243, 57, 61, 164, 240, 24, 189, 214, 132, 8, 62, 143, 133, 17, 61, 208, 66, 128, 189, 187, 57, 188, 57, 34, 252, 17, 189, 54, 153, 123, 60, 86, 32, 50, 60, 218, 235, 136, 61, 90, 13, 6, 62, 92, 94, 20, 64, 35, 202, 121, 63, 233, 37, 195, 60, 122, 179, 182, 60, 175, 200, 147, 190, 191, 165, 173, 190, 40, 81, 85, 190, 47, 25, 237, 189, 3, 33, 164, 61, 211, 195, 69, 62, 246, 173, 49, 60, 148, 164, 132, 190, 66, 3, 36, 190, 75, 225, 21, 64, 168, 199, 55, 63, 44, 175, 128, 190, 60, 174, 101, 189, 46, 108, 136, 190, 83, 30, 15, 190, 53, 164, 102, 61, 143, 62, 46, 188, 14, 90, 19, 62, 144, 132, 2, 62, 197, 74, 148, 60, 244, 168, 124, 190, 104, 119, 54, 190, 60, 151, 251, 190, 177, 246, 53, 191, 27, 205, 151, 62, 220, 98, 144, 190, 100, 123, 169, 62, 57, 18, 212, 189, 126, 77, 221, 61, 78, 220, 150, 189, 151, 56, 26, 61, 163, 217, 137, 189, 68, 43, 51, 61, 170, 81, 189, 188, 9, 146, 16, 61, 250, 70, 55, 63, 139, 3, 224, 60, 39, 233, 22, 62, 202, 88, 181, 189, 79, 62, 174, 61, 63, 68, 252, 189, 59, 177, 178, 188, 199, 122, 176, 189, 113, 86, 97, 188, 78, 181, 126, 188, 38, 210, 84, 188, 234, 240, 107, 187, 253, 8, 33, 187, 184, 129, 100, 60, 195, 51, 114, 62, 97, 191, 94, 189, 58, 200, 92, 61, 229, 212, 6, 190, 96, 251, 209, 188, 146, 96, 197, 189, 20, 216, 71, 60, 225, 178, 26, 189, 50, 122, 83, 61, 48, 214, 54, 61, 98, 42, 10, 61, 51, 39, 135, 60, 184, 100, 5, 64, 241, 109, 135, 63, 108, 208, 191, 62, 5, 188, 254, 61, 161, 147, 178, 190, 84, 55, 196, 190, 235, 95, 14, 190, 98, 116, 217, 189, 212, 253, 134, 61, 119, 151, 176, 61, 237, 232, 22, 190, 161, 93, 124, 189, 249, 47, 13, 62, 170, 207, 140, 64, 161, 38, 66, 63, 18, 162, 25, 191, 224, 156, 102, 189, 194, 196, 7, 191, 82, 91, 3, 190, 100, 158, 151, 60, 225, 90, 160, 60, 59, 224, 186, 61, 183, 54, 245, 61, 157, 44, 10, 190, 163, 223, 147, 189, 230, 181, 102, 61, 71, 32, 145, 191, 38, 35, 142, 191, 155, 143, 59, 191, 244, 157, 24, 190, 149, 217, 132, 62, 10, 181, 206, 62, 8, 42, 74, 62, 228, 146, 196, 61, 137, 71, 171, 188, 15, 13, 144, 189, 78, 244, 70, 62, 210, 46, 223, 60, 170, 193, 24, 190, 199, 184, 139, 64, 64, 168, 77, 63, 93, 72, 30, 191, 109, 134, 159, 188, 55, 208, 244, 190, 122, 232, 50, 190, 69, 125, 173, 61, 168, 196, 176, 189, 82, 115, 118, 61, 153, 43, 139, 61, 191, 128, 149, 188, 212, 172, 82, 190, 246, 61, 137, 189, 34, 27, 165, 63, 37, 218, 147, 190, 183, 54, 242, 190, 128, 238, 66, 188, 215, 154, 162, 61, 202, 108, 38, 62, 222, 113, 5, 62, 216, 2, 130, 188, 149, 228, 55, 189, 188, 86, 217, 189, 102, 172, 202, 60, 176, 249, 19, 188, 223, 20, 186, 189, 43, 17, 207, 191, 16, 237, 216, 61, 148, 135, 18, 63, 140, 139, 103, 60, 164, 203, 249, 61, 229, 21, 15, 190, 230, 116, 216, 189, 54, 212, 22, 188, 195, 224, 109, 187, 119, 61, 31, 61, 130, 10, 74, 189, 214, 228, 163, 61, 10, 136, 253, 60, 172, 126, 42, 64, 41, 94, 65, 63, 250, 105, 35, 191, 109, 9, 6, 190, 189, 111, 40, 190, 209, 51, 186, 190, 23, 185, 220, 60, 193, 43, 179, 189, 133, 227, 228, 60, 47, 237, 174, 62, 107, 229, 69, 61, 170, 58, 186, 190, 163, 52, 36, 190, 174, 123, 71, 64, 68, 217, 181, 62, 241, 185, 81, 191, 70, 151, 46, 61, 134, 46, 74, 189, 123, 232, 158, 189, 95, 46, 169, 62, 18, 78, 13, 190, 226, 227, 111, 189, 174, 90, 198, 189, 145, 162, 189, 188, 5, 204, 38, 190, 33, 159, 236, 189, 245, 110, 186, 191, 123, 215, 34, 191, 89, 128, 154, 62, 45, 152, 240, 61, 161, 112, 9, 62, 105, 92, 99, 62, 39, 114, 1, 60, 229, 169, 53, 189, 147, 236, 173, 59, 176, 146, 150, 190, 212, 31, 222, 188, 116, 195, 136, 62, 246, 203, 251, 61, 41, 135, 117, 63, 168, 70, 26, 63, 104, 156, 14, 62, 32, 199, 247, 189, 252, 51, 134, 190, 139, 208, 112, 190, 132, 41, 79, 190, 228, 38, 128, 189, 28, 43, 48, 62, 111, 198, 83, 62, 217, 126, 177, 61, 20, 17, 23, 190, 223, 42, 227, 189, 49, 238, 99, 64, 208, 115, 122, 63, 89, 68, 245, 190, 45, 124, 30, 190, 253, 13, 210, 190, 195, 228, 30, 190, 21, 43, 207, 61, 108, 187, 206, 58, 115, 183, 2, 62, 89, 103, 188, 61, 150, 163, 186, 61, 0, 20, 165, 190, 203, 3, 147, 190, 134, 197, 47, 62, 67, 2, 12, 191, 109, 65, 5, 191, 253, 74, 95, 188, 205, 194, 137, 62, 16, 166, 57, 62, 9, 125, 153, 62, 196, 216, 40, 61, 237, 61, 91, 190, 141, 157, 59, 190, 178, 195, 38, 189, 69, 87, 150, 61, 165, 168, 105, 61, 64, 113, 167, 64, 92, 184, 185, 61, 27, 77, 227, 190, 84, 153, 172, 190, 92, 137, 118, 190, 181, 51, 83, 190, 2, 233, 156, 61, 3, 174, 141, 62, 22, 199, 107, 189, 227, 111, 155, 61, 191, 13, 130, 189, 88, 102, 10, 62, 250, 20, 220, 60, 85, 14, 200, 61, 72, 63, 39, 189, 43, 136, 3, 61, 186, 15, 1, 60, 21, 7, 54, 188, 231, 49, 122, 60, 204, 216, 232, 59, 196, 24, 187, 60, 124, 108, 156, 60, 118, 159, 245, 187, 137, 217, 129, 59, 16, 26, 130, 188, 81, 242, 57, 188, 45, 161, 175, 188, 33, 230, 150, 188, 252, 18, 138, 188, 0, 232, 50, 61, 37, 64, 14, 188, 32, 60, 253, 60, 240, 224, 76, 188, 134, 142, 61, 188, 210, 2, 250, 60, 225, 23, 189, 60, 199, 250, 198, 188, 16, 87, 88, 187, 240, 35, 74, 188, 94, 245, 188, 64, 7, 139, 120, 63, 45, 208, 88, 191, 249, 215, 237, 61, 100, 205, 173, 190, 18, 118, 60, 189, 225, 107, 181, 61, 118, 223, 144, 190, 8, 222, 134, 61, 62, 127, 131, 189, 219, 103, 19, 61, 153, 166, 84, 190, 75, 195, 75, 190, 183, 14, 123, 190, 136, 188, 29, 62, 157, 33, 130, 61, 184, 21, 102, 189, 165, 65, 165, 61, 113, 132, 218, 60, 57, 128, 29, 61, 129, 104, 187, 60, 241, 146, 52, 189, 106, 35, 195, 59, 112, 121, 56, 57, 88, 109, 128, 60, 101, 186, 37, 189, 212, 167, 211, 189, 195, 159, 52, 189, 6, 154, 213, 59, 82, 90, 91, 188, 64, 25, 34, 61, 27, 63, 191, 60, 79, 152, 183, 58, 67, 158, 96, 61, 181, 182, 181, 186, 67, 59, 121, 188, 57, 195, 51, 186, 159, 161, 208, 187, 48, 101, 186, 60, 8, 28, 138, 64, 241, 36, 141, 63, 240, 42, 105, 190, 138, 28, 45, 189, 110, 168, 42, 191, 113, 76, 38, 190, 65, 206, 1, 190, 118, 164, 70, 61, 209, 146, 18, 62, 62, 44, 131, 190, 40, 169, 200, 188, 144, 85, 112, 189, 172, 212, 173, 60, 124, 212, 136, 62, 115, 156, 15, 189, 4, 23, 25, 188, 160, 176, 205, 60, 67, 253, 48, 61, 76, 134, 94, 189, 54, 55, 20, 189, 212, 201, 146, 188, 17, 201, 117, 188, 243, 178, 49, 59, 40, 71, 195, 188, 17, 137, 129, 186, 70, 125, 38, 188, 109, 225, 156, 190, 145, 199, 123, 188, 39, 92, 144, 60, 117, 169, 135, 60, 122, 204, 38, 61, 188, 228, 223, 187, 79, 86, 33, 60, 249, 114, 7, 189, 92, 213, 23, 189, 254, 129, 18, 61, 110, 139, 170, 60, 79, 85, 240, 188, 209, 107, 52, 188, 60, 12, 129, 64, 196, 99, 120, 63, 180, 13, 22, 191, 134, 66, 113, 190, 68, 199, 135, 190, 5, 241, 55, 61, 242, 232, 109, 188, 75, 248, 37, 190, 110, 56, 128, 62, 202, 181, 211, 61, 179, 227, 140, 190, 161, 75, 43, 187, 100, 44, 151, 61, 104, 48, 26, 62, 249, 33, 198, 189, 127, 250, 144, 188, 248, 232, 128, 61, 76, 164, 236, 59, 39, 208, 153, 60, 86, 215, 61, 188, 207, 202, 148, 188, 181, 110, 106, 61, 37, 229, 87, 188, 66, 56, 145, 187, 159, 40, 103, 61, 56, 96, 6, 189, 132, 83, 127, 190, 174, 64, 75, 61, 54, 184, 206, 61, 221, 20, 80, 189, 103, 203, 188, 186, 116, 207, 186, 186, 177, 254, 124, 188, 128, 80, 48, 58, 108, 11, 23, 188, 203, 155, 202, 187, 84, 146, 136, 60, 166, 208, 29, 188, 226, 236, 170, 59, 49, 213, 157, 64, 117, 97, 22, 63, 240, 146, 60, 191, 24, 97, 109, 62, 142, 58, 199, 190, 5, 35, 68, 190, 170, 130, 18, 62, 8, 2, 86, 189, 176, 251, 243, 61, 181, 205, 127, 61, 73, 220, 121, 190, 22, 246, 253, 60, 179, 124, 66, 61, 146, 180, 100, 190, 63, 50, 35, 61, 185, 233, 187, 60, 153, 117, 74, 59, 188, 118, 144, 61, 144, 140, 102, 188, 2, 149, 188, 60, 42, 205, 172, 188, 185, 155, 246, 60, 38, 54, 186, 60, 7, 213, 184, 188, 114, 174, 48, 61, 70, 34, 163, 187, 60, 94, 29, 190, 179, 66, 54, 61, 39, 5, 96, 61, 130, 117, 121, 188, 119, 60, 119, 60, 7, 31, 148, 187, 182, 156, 192, 188, 66, 120, 122, 187, 201, 143, 156, 59, 61, 97, 54, 60, 50, 238, 214, 59, 219, 56, 147, 188, 216, 245, 221, 60, 10, 154, 20, 64, 92, 21, 61, 63, 25, 180, 22, 189, 166, 196, 246, 59, 39, 122, 51, 190, 236, 62, 219, 188, 229, 56, 211, 61, 10, 252, 68, 189, 192, 182, 80, 61, 185, 167, 154, 61, 182, 186, 86, 189, 250, 249, 186, 189, 178, 203, 125, 189, 37, 14, 155, 191, 243, 138, 24, 190, 251, 36, 183, 62, 154, 132, 82, 187, 155, 136, 6, 62, 180, 4, 191, 61, 214, 191, 19, 189, 228, 237, 174, 61, 113, 212, 45, 189, 5, 111, 139, 189, 96, 164, 5, 187, 107, 8, 62, 187, 95, 146, 17, 60, 104, 236, 251, 61, 210, 207, 184, 189, 91, 27, 152, 189, 4, 97, 102, 61, 167, 136, 226, 60, 53, 38, 173, 188, 173, 228, 218, 186, 56, 41, 168, 187, 110, 32, 231, 57, 33, 6, 148, 187, 181, 219, 94, 185, 184, 179, 135, 59, 167, 172, 210, 188, 68, 124, 142, 64, 61, 98, 83, 63, 250, 22, 125, 191, 194, 224, 62, 188, 120, 47, 32, 190, 29, 134, 146, 190, 63, 92, 45, 62, 100, 59, 46, 190, 122, 217, 159, 61, 191, 148, 242, 61, 170, 211, 218, 188, 181, 57, 128, 190, 71, 57, 87, 190, 157, 184, 174, 189, 118, 168, 213, 60, 61, 218, 21, 62, 214, 82, 129, 58, 131, 201, 132, 189, 246, 151, 166, 61, 139, 199, 153, 188, 172, 38, 227, 188, 183, 224, 55, 188, 3, 159, 251, 188, 225, 70, 49, 61, 203, 0, 88, 61, 115, 206, 60, 188, 136, 8, 209, 190, 117, 108, 155, 60, 240, 242, 26, 62, 171, 12, 216, 188, 126, 11, 50, 188, 43, 219, 0, 61, 135, 83, 182, 188, 255, 247, 177, 60, 201, 170, 156, 188, 217, 46, 93, 60, 139, 211, 43, 60, 191, 38, 135, 60, 122, 55, 131, 60, 3, 68, 47, 63, 63, 98, 230, 62, 146, 215, 248, 62, 8, 0, 134, 62, 145, 38, 76, 62, 158, 85, 39, 61, 255, 79, 113, 189, 56, 124, 50, 189, 180, 60, 152, 189, 209, 161, 77, 189, 79, 23, 128, 188, 161, 37, 132, 189, 248, 201, 186, 189, 10, 179, 254, 190, 142, 107, 144, 190, 73, 121, 209, 189, 94, 62, 40, 189, 125, 35, 173, 60, 228, 176, 15, 61, 147, 142, 224, 59, 43, 133, 80, 60, 86, 18, 173, 59, 28, 172, 192, 187, 41, 62, 23, 61, 159, 113, 132, 60, 228, 205, 14, 59, 191, 244, 82, 61, 135, 121, 24, 188, 165, 114, 143, 189, 44, 185, 95, 189, 186, 132, 65, 189, 250, 127, 88, 188, 255, 244, 8, 60, 124, 111, 14, 58, 46, 23, 144, 60, 91, 73, 186, 60, 203, 57, 54, 187, 26, 11, 157, 59, 192, 200, 197, 60, 154, 167, 182, 63, 251, 57, 45, 63, 151, 110, 190, 61, 203, 42, 38, 190, 129, 175, 1, 62, 138, 1, 105, 62, 202, 76, 90, 62, 65, 44, 154, 61, 96, 197, 110, 189, 191, 192, 134, 189, 58, 249, 207, 189, 34, 200, 71, 190, 255, 216, 227, 189, 117, 204, 44, 191, 160, 45, 34, 190, 43, 210, 42, 62, 81, 95, 58, 62, 174, 246, 60, 62, 59, 130, 151, 61, 207, 100, 149, 187, 216, 57, 229, 60, 144, 210, 247, 188, 196, 1, 49, 188, 239, 86, 133, 189, 186, 205, 176, 59, 130, 62, 32, 61, 68, 22, 36, 62, 19, 142, 119, 189, 218, 60, 161, 189, 213, 52, 82, 55, 131, 229, 160, 189, 21, 118, 128, 189, 189, 54, 173, 188, 92, 3, 249, 188, 133, 99, 82, 60, 68, 131, 163, 188, 251, 175, 79, 61, 102, 174, 134, 60, 116, 121, 74, 187, 145, 238, 125, 64, 208, 101, 92, 63, 28, 190, 240, 190, 209, 244, 154, 190, 243, 11, 157, 190, 226, 250, 182, 187, 220, 196, 234, 61, 122, 122, 255, 189, 77, 248, 215, 61, 150, 63, 57, 190, 212, 230, 100, 62, 220, 183, 64, 190, 99, 16, 213, 190, 177, 66, 97, 190, 155, 239, 173, 60, 103, 52, 138, 61, 104, 171, 135, 188, 45, 183, 152, 61, 128, 28, 31, 61, 163, 210, 207, 59, 161, 233, 11, 60, 91, 196, 233, 188, 23, 139, 142, 188, 185, 36, 28, 189, 203, 107, 160, 188, 65, 172, 231, 58, 78, 185, 55, 190, 127, 35, 192, 188, 13, 227, 41, 61, 218, 17, 4, 188, 59, 231, 100, 60, 147, 211, 230, 59, 186, 195, 67, 186, 41, 73, 152, 60, 188, 90, 40, 186, 143, 82, 29, 61, 18, 248, 15, 189, 209, 206, 114, 188, 138, 206, 252, 60, 51, 34, 114, 64, 25, 51, 143, 62, 137, 3, 35, 191, 88, 255, 213, 190, 80, 46, 6, 190, 175, 170, 119, 190, 56, 144, 64, 62, 29, 208, 245, 189, 181, 117, 38, 190, 219, 161, 249, 189, 58, 36, 64, 61, 166, 244, 49, 190, 25, 200, 2, 190, 38, 143, 83, 190, 181, 4, 25, 60, 56, 113, 1, 61, 221, 16, 2, 189, 164, 177, 127, 188, 120, 217, 44, 61, 211, 28, 55, 188, 8, 70, 31, 187, 129, 212, 103, 188, 144, 34, 199, 59, 82, 30, 39, 60, 79, 124, 118, 61, 130, 18, 17, 60, 123, 131, 74, 190, 122, 42, 157, 61, 143, 13, 10, 61, 113, 61, 12, 61, 6, 79, 253, 59, 13, 98, 77, 61, 221, 73, 253, 188, 93, 11, 117, 187, 28, 221, 147, 58, 142, 23, 134, 58, 148, 7, 188, 60, 103, 216, 192, 188, 2, 39, 164, 188, 29, 10, 123, 63, 249, 36, 207, 62, 46, 201, 84, 190, 51, 249, 198, 190, 244, 67, 116, 188, 44, 12, 45, 62, 18, 254, 1, 62, 64, 126, 5, 61, 23, 118, 147, 189, 55, 10, 54, 189, 148, 217, 217, 189, 10, 91, 95, 190, 156, 3, 62, 190, 42, 205, 103, 191, 32, 71, 173, 190, 152, 243, 221, 186, 223, 103, 85, 61, 96, 89, 147, 188, 101, 212, 140, 188, 3, 109, 14, 59, 198, 75, 228, 61, 133, 126, 129, 61, 118, 149, 79, 61, 119, 34, 28, 189, 57, 153, 15, 61, 32, 250, 253, 61, 122, 222, 147, 60, 182, 154, 41, 189, 0, 247, 10, 188, 38, 120, 135, 61, 252, 171, 205, 60, 86, 50, 3, 189, 113, 201, 193, 188, 88, 216, 142, 188, 133, 97, 126, 187, 189, 174, 133, 188, 142, 255, 44, 61, 255, 110, 74, 61, 154, 48, 215, 58, 25, 70, 48, 191, 151, 100, 148, 191, 40, 207, 32, 63, 105, 228, 204, 190, 135, 99, 177, 62, 170, 149, 197, 59, 7, 154, 155, 189, 59, 111, 65, 62, 192, 97, 71, 190, 162, 31, 69, 62, 246, 164, 31, 190, 6, 162, 38, 62, 107, 29, 199, 188, 26, 115, 179, 63, 215, 103, 50, 191, 64, 190, 38, 63, 209, 15, 190, 190, 79, 72, 139, 62, 232, 107, 252, 189, 99, 28, 33, 189, 231, 213, 168, 61, 141, 254, 53, 190, 255, 196, 175, 61, 230, 117, 191, 189, 153, 155, 253, 60, 221, 224, 158, 188, 83, 55, 100, 189, 25, 182, 173, 62, 201, 249, 121, 190, 177, 200, 103, 62, 96, 198, 156, 189, 145, 62, 221, 60, 216, 80, 27, 61, 154, 155, 3, 190, 226, 91, 49, 62, 106, 80, 39, 190, 124, 125, 5, 62, 157, 151, 224, 189, 11, 59, 210, 61, 106, 241, 222, 61, 244, 174, 158, 191, 34, 43, 22, 63, 2, 59, 10, 191, 147, 239, 228, 62, 19, 186, 135, 190, 16, 160, 107, 62, 186, 107, 222, 189, 59, 187, 187, 61, 19, 40, 80, 189, 82, 73, 123, 61, 107, 237, 148, 188, 110, 92, 231, 60, 120, 184, 223, 62, 123, 81, 63, 188, 165, 126, 3, 189, 157, 152, 4, 62, 64, 94, 13, 189, 139, 179, 31, 188, 25, 4, 208, 58, 20, 35, 137, 59, 135, 65, 66, 188, 25, 38, 74, 60, 45, 237, 204, 188, 225, 132, 168, 188, 181, 85, 74, 188, 189, 171, 50, 62, 155, 98, 29, 63, 186, 172, 94, 189, 253, 191, 148, 62, 180, 200, 56, 190, 147, 120, 116, 60, 213, 179, 29, 190, 186, 3, 18, 61, 143, 232, 42, 189, 190, 65, 22, 61, 221, 229, 22, 189, 200, 210, 9, 61, 212, 84, 224, 60, 113, 175, 184, 61, 37, 24, 169, 191, 115, 169, 48, 63, 87, 193, 216, 190, 83, 37, 182, 62, 78, 89, 64, 61, 152, 224, 35, 190, 15, 237, 91, 62, 108, 247, 83, 190, 209, 164, 35, 62, 164, 53, 30, 190, 107, 35, 202, 61, 82, 2, 141, 61, 117, 70, 89, 62, 71, 100, 178, 62, 135, 19, 72, 190, 245, 216, 46, 62, 44, 72, 179, 189, 132, 225, 209, 188, 8, 13, 65, 60, 14, 232, 32, 190, 188, 147, 221, 61, 142, 69, 162, 189, 144, 213, 35, 61, 209, 214, 162, 188, 100, 234, 158, 60, 93, 63, 4, 190, 104, 201, 42, 63, 109, 71, 24, 190, 101, 108, 129, 62, 227, 41, 14, 190, 158, 162, 99, 189, 65, 195, 46, 189, 153, 130, 252, 189, 19, 88, 102, 61, 7, 37, 50, 61, 190, 42, 147, 61, 118, 107, 29, 188, 250, 102, 23, 189, 112, 175, 178, 60, 188, 86, 196, 191, 63, 252, 67, 63, 84, 173, 33, 191, 15, 181, 6, 63, 234, 243, 30, 190, 190, 155, 208, 61, 153, 19, 148, 61, 62, 82, 223, 189, 73, 92, 231, 61, 214, 186, 152, 189, 36, 31, 166, 61, 122, 87, 211, 60, 233, 125, 136, 62, 209, 155, 186, 60, 85, 117, 16, 189, 195, 84, 240, 60, 48, 213, 170, 188, 27, 78, 35, 189, 207, 174, 162, 188, 159, 6, 248, 188, 212, 153, 20, 61, 86, 182, 16, 188, 198, 22, 30, 60, 239, 40, 193, 188, 210, 65, 51, 61, 120, 156, 207, 190, 88, 9, 193, 62, 214, 114, 126, 190, 145, 54, 43, 62, 74, 47, 210, 189, 212, 1, 59, 61, 22, 7, 205, 188, 224, 142, 84, 189, 143, 226, 113, 61, 37, 219, 128, 188, 202, 86, 131, 59, 55, 6, 209, 57, 114, 51, 159, 188, 239, 127, 20, 61, 145, 42, 122, 191, 57, 214, 199, 62, 180, 11, 121, 190, 6, 244, 177, 62, 220, 22, 216, 189, 196, 145, 131, 187, 108, 111, 246, 188, 245, 15, 162, 188, 186, 223, 27, 61, 54, 61, 3, 189, 235, 80, 27, 61, 111, 117, 132, 61, 219, 197, 213, 63, 210, 123, 194, 63, 176, 232, 136, 188, 46, 225, 213, 62, 181, 58, 199, 190, 156, 127, 86, 190, 229, 175, 138, 190, 183, 255, 11, 190, 83, 228, 159, 61, 171, 59, 222, 61, 162, 247, 153, 60, 32, 91, 208, 189, 85, 157, 42, 59, 114, 49, 11, 64, 125, 94, 78, 63, 206, 52, 158, 189, 167, 206, 81, 189, 76, 59, 185, 190, 102, 144, 118, 190, 178, 62, 21, 190, 26, 106, 110, 61, 26, 221, 48, 61, 84, 112, 14, 62, 218, 251, 127, 60, 63, 9, 244, 189, 25, 0, 64, 189, 103, 9, 132, 64, 245, 49, 50, 63, 219, 180, 209, 190, 62, 82, 98, 190, 3, 58, 194, 190, 178, 186, 94, 190, 50, 108, 56, 61, 201, 190, 206, 186, 193, 174, 119, 189, 136, 52, 233, 61, 67, 217, 21, 189, 149, 185, 18, 190, 198, 149, 131, 189, 13, 187, 73, 63, 87, 163, 13, 188, 252, 206, 23, 191, 140, 151, 247, 188, 54, 141, 205, 189, 61, 59, 62, 62, 140, 73, 167, 62, 112, 159, 204, 58, 77, 115, 162, 189, 167, 112, 35, 190, 66, 240, 163, 60, 69, 120, 147, 61, 96, 54, 255, 189, 50, 207, 161, 191, 40, 121, 198, 189, 219, 71, 1, 63, 107, 200, 144, 61, 157, 199, 60, 62, 126, 248, 18, 189, 21, 124, 166, 189, 31, 91, 225, 189, 199, 241, 112, 61, 193, 163, 7, 187, 141, 61, 133, 186, 92, 228, 232, 61, 88, 231, 235, 60, 250, 81, 80, 64, 244, 210, 60, 63, 252, 244, 228, 61, 24, 1, 246, 189, 12, 128, 101, 190, 231, 90, 199, 190, 146, 81, 83, 190, 71, 137, 98, 189, 106, 135, 124, 61, 249, 99, 106, 62, 187, 227, 142, 60, 2, 72, 77, 190, 67, 182, 229, 188, 108, 202, 72, 64, 53, 51, 76, 63, 207, 245, 117, 191, 44, 153, 207, 189, 179, 245, 247, 190, 58, 179, 5, 187, 101, 23, 86, 62, 145, 56, 4, 62, 47, 76, 46, 189, 137, 159, 39, 187, 136, 232, 205, 60, 96, 106, 72, 190, 149, 148, 38, 190, 94, 161, 202, 191, 180, 90, 166, 191, 162, 81, 147, 190, 21, 67, 1, 190, 167, 221, 164, 62, 204, 43, 175, 62, 7, 193, 201, 62, 230, 78, 20, 61, 191, 40, 39, 190, 79, 248, 136, 190, 16, 143, 2, 189, 104, 91, 110, 62, 71, 210, 173, 59, 234, 138, 118, 63, 212, 88, 70, 189, 9, 47, 32, 63, 105, 59, 136, 61, 48, 154, 196, 61, 170, 95, 123, 190, 126, 20, 130, 190, 61, 248, 250, 189, 86, 31, 16, 189, 177, 156, 22, 62, 92, 33, 130, 188, 102, 53, 70, 61, 88, 8, 124, 61, 121, 177, 58, 64, 13, 220, 165, 63, 137, 87, 129, 190, 106, 70, 153, 61, 254, 187, 219, 190, 198, 182, 134, 190, 225, 59, 51, 190, 131, 13, 108, 189, 200, 36, 23, 61, 234, 211, 32, 62, 103, 110, 130, 61, 86, 223, 62, 190, 34, 71, 205, 189, 180, 150, 75, 63, 251, 167, 158, 190, 64, 209, 11, 191, 158, 230, 190, 190, 138, 36, 110, 189, 203, 199, 14, 62, 159, 122, 155, 62, 43, 132, 55, 62, 39, 121, 34, 189, 131, 26, 124, 189, 32, 121, 148, 60, 57, 6, 4, 190, 210, 214, 250, 189, 162, 230, 140, 64, 0, 142, 100, 63, 216, 86, 79, 191, 102, 62, 203, 189, 188, 133, 11, 190, 80, 31, 74, 187, 143, 226, 8, 61, 184, 48, 12, 190, 50, 246, 164, 61, 146, 186, 46, 61, 160, 207, 70, 190, 116, 33, 238, 188, 67, 37, 232, 58, 58, 161, 165, 190, 45, 134, 33, 62, 200, 125, 114, 61, 70, 161, 14, 190, 13, 121, 113, 61, 82, 199, 130, 61, 44, 125, 222, 187, 11, 254, 39, 189, 51, 104, 151, 188, 65, 209, 213, 60, 11, 236, 95, 61, 76, 183, 190, 60, 97, 201, 162, 188, 63, 5, 155, 189, 237, 19, 23, 60, 196, 221, 185, 61, 84, 88, 95, 188, 49, 206, 19, 189, 184, 86, 223, 188, 243, 191, 189, 58, 96, 117, 169, 60, 0, 139, 246, 58, 36, 153, 247, 186, 198, 209, 68, 60, 239, 26, 124, 58, 219, 80, 167, 60, 172, 170, 12, 64, 238, 139, 155, 63, 154, 242, 140, 62, 41, 5, 209, 190, 101, 199, 229, 190, 204, 174, 227, 189, 25, 154, 161, 61, 64, 29, 133, 60, 33, 150, 44, 189, 174, 106, 250, 188, 195, 132, 244, 57, 5, 154, 41, 61, 14, 182, 10, 61, 118, 164, 1, 191, 188, 48, 68, 189, 0, 93, 106, 62, 66, 230, 164, 61, 11, 109, 82, 60, 142, 172, 140, 189, 33, 145, 138, 189, 233, 75, 48, 61, 23, 207, 208, 60, 95, 125, 56, 189, 247, 78, 24, 189, 190, 131, 209, 188, 194, 2, 214, 59, 98, 21, 115, 61, 139, 0, 92, 189, 3, 206, 79, 189, 0, 128, 69, 61, 186, 99, 14, 61, 66, 27, 27, 188, 31, 193, 140, 188, 44, 34, 162, 188, 18, 166, 194, 187, 221, 23, 138, 58, 8, 212, 84, 57, 49, 208, 130, 188, 28, 204, 252, 188, 126, 129, 149, 63, 200, 47, 86, 63, 240, 108, 17, 63, 215, 140, 248, 187, 163, 92, 97, 190, 132, 94, 109, 190, 66, 153, 53, 190, 178, 69, 132, 189, 213, 70, 138, 189, 173, 64, 182, 189, 149, 119, 79, 189, 87, 112, 39, 189, 227, 213, 124, 189, 27, 102, 62, 191, 33, 13, 251, 190, 252, 61, 28, 190, 158, 246, 156, 61, 145, 11, 76, 62, 223, 133, 242, 61, 14, 14, 130, 188, 69, 4, 112, 188, 146, 102, 149, 187, 7, 111, 5, 60, 15, 237, 158, 60, 63, 51, 214, 59, 251, 250, 16, 57, 207, 45, 151, 189, 135, 134, 225, 189, 203, 214, 222, 189, 190, 125, 32, 189, 90, 100, 120, 60, 3, 205, 112, 61, 109, 124, 173, 61, 22, 54, 50, 61, 86, 72, 176, 59, 195, 51, 230, 59, 76, 233, 161, 60, 195, 184, 147, 60, 132, 191, 167, 60, 105, 118, 124, 64, 171, 182, 128, 63, 191, 226, 8, 191, 7, 221, 201, 189, 133, 42, 7, 191, 114, 202, 167, 190, 244, 160, 187, 62, 96, 96, 23, 190, 184, 59, 20, 190, 86, 60, 131, 61, 62, 82, 211, 61, 10, 159, 60, 189, 93, 40, 102, 190, 9, 203, 187, 190, 42, 215, 32, 62, 92, 243, 166, 62, 241, 152, 148, 188, 190, 133, 65, 190, 45, 11, 151, 60, 120, 98, 174, 60, 63, 179, 172, 58, 135, 247, 210, 188, 191, 41, 255, 189, 208, 126, 49, 60, 232, 115, 233, 61, 203, 167, 56, 61, 197, 88, 163, 190, 57, 166, 103, 185, 68, 30, 11, 62, 180, 2, 193, 188, 204, 19, 53, 61, 123, 85, 22, 60, 203, 153, 8, 190, 74, 201, 136, 187, 63, 42, 122, 60, 173, 32, 31, 61, 187, 128, 231, 188, 251, 250, 190, 188, 29, 27, 95, 61, 40, 180, 153, 64, 52, 8, 209, 62, 237, 133, 62, 191, 144, 216, 95, 190, 159, 113, 251, 189, 91, 24, 5, 62, 77, 164, 27, 61, 200, 3, 136, 189, 68, 207, 85, 188, 197, 62, 70, 62, 211, 252, 38, 190, 170, 110, 151, 61, 222, 95, 63, 61, 161, 111, 146, 190, 199, 192, 4, 62, 138, 0, 9, 62, 15, 70, 225, 189, 63, 202, 18, 189, 239, 212, 217, 60, 12, 20, 134, 60, 8, 119, 83, 60, 38, 15, 225, 60, 102, 153, 136, 188, 236, 7, 38, 60, 162, 214, 146, 186, 212, 180, 11, 188, 63, 91, 68, 190, 242, 19, 139, 61, 39, 64, 143, 61, 94, 13, 130, 188, 44, 248, 36, 188, 29, 88, 193, 187, 139, 218, 156, 59, 239, 131, 231, 59, 159, 140, 22, 59, 88, 191, 129, 60, 0, 100, 163, 60, 90, 110, 135, 188, 19, 106, 251, 57, 29, 85, 38, 64, 45, 81, 194, 63, 215, 13, 159, 62, 57, 119, 158, 190, 29, 232, 13, 191, 192, 50, 126, 190, 27, 87, 16, 61, 131, 76, 112, 189, 237, 232, 168, 189, 113, 230, 90, 189, 40, 110, 144, 61, 40, 2, 47, 60, 248, 45, 225, 189, 197, 242, 38, 191, 231, 14, 56, 61, 90, 68, 106, 62, 108, 128, 151, 61, 71, 78, 124, 188, 161, 136, 94, 189, 204, 114, 179, 189, 156, 44, 125, 188, 36, 172, 22, 60, 135, 145, 84, 189, 16, 80, 60, 189, 112, 24, 33, 61, 9, 77, 137, 61, 224, 89, 130, 60, 45, 164, 164, 189, 199, 170, 31, 189, 56, 54, 216, 60, 174, 93, 79, 61, 190, 158, 5, 59, 238, 38, 33, 59, 165, 26, 122, 60, 171, 106, 20, 60, 68, 103, 58, 186, 11, 135, 239, 188, 112, 226, 31, 189, 143, 35, 236, 60, 248, 108, 167, 64, 182, 235, 177, 63, 34, 23, 241, 190, 122, 150, 124, 188, 31, 120, 83, 191, 240, 105, 159, 190, 7, 61, 177, 62, 13, 144, 141, 190, 194, 139, 203, 60, 251, 27, 28, 190, 229, 141, 87, 61, 128, 119, 163, 189, 159, 46, 24, 190, 65, 224, 74, 191, 24, 229, 75, 62, 20, 10, 181, 62, 73, 215, 119, 189, 9, 172, 100, 189, 223, 29, 28, 189, 100, 77, 166, 189, 92, 243, 89, 188, 14, 51, 8, 190, 82, 210, 54, 61, 136, 18, 116, 60, 177, 177, 171, 60, 120, 28, 135, 60, 144, 229, 8, 190, 124, 110, 38, 189, 56, 221, 173, 60, 162, 19, 202, 188, 210, 141, 29, 61, 28, 153, 30, 61, 36, 53, 52, 189, 230, 83, 151, 186, 233, 99, 114, 189, 247, 91, 186, 59, 166, 147, 5, 188, 114, 142, 37, 60, 221, 65, 223, 59, 14, 206, 156, 64, 254, 126, 113, 63, 4, 172, 19, 191, 174, 40, 102, 189, 155, 206, 193, 190, 141, 219, 79, 190, 62, 152, 33, 62, 146, 111, 134, 189, 4, 50, 64, 189, 181, 241, 196, 188, 115, 246, 140, 61, 110, 229, 83, 190, 65, 127, 48, 190, 50, 200, 159, 62, 123, 103, 10, 62, 191, 239, 51, 190, 114, 112, 6, 189, 115, 213, 19, 190, 207, 128, 160, 189, 205, 217, 131, 62, 154, 106, 137, 189, 76, 189, 5, 61, 183, 237, 65, 190, 243, 159, 94, 61, 46, 12, 201, 61, 1, 169, 53, 189, 165, 22, 214, 190, 2, 16, 2, 61, 188, 205, 63, 62, 78, 185, 19, 61, 253, 158, 125, 188, 25, 177, 236, 188, 17, 235, 220, 189, 217, 186, 22, 188, 182, 222, 167, 61, 227, 194, 48, 61, 239, 226, 126, 60, 233, 237, 226, 59, 9, 71, 3, 188, 205, 100, 75, 64, 31, 109, 121, 63, 209, 208, 187, 60, 93, 159, 189, 190, 235, 12, 67, 191, 167, 195, 91, 190, 108, 77, 125, 62, 54, 218, 219, 60, 31, 7, 153, 188, 164, 197, 103, 190, 65, 220, 81, 62, 26, 39, 141, 61, 189, 171, 168, 190, 31, 39, 234, 190, 189, 194, 144, 62, 217, 73, 99, 62, 212, 129, 0, 61, 85, 61, 160, 189, 203, 106, 188, 189, 115, 134, 209, 189, 24, 198, 235, 60, 100, 237, 14, 60, 35, 243, 225, 59, 93, 218, 239, 189, 144, 243, 48, 61, 79, 124, 28, 62, 226, 124, 204, 189, 44, 134, 171, 59, 137, 159, 109, 61, 56, 167, 92, 61, 30, 209, 190, 61, 209, 134, 175, 188, 230, 231, 166, 188, 39, 156, 187, 189, 160, 80, 73, 188, 160, 72, 199, 60, 99, 83, 170, 60, 44, 171, 116, 189, 240, 113, 145, 58, 157, 153, 42, 64, 111, 53, 167, 63, 73, 176, 184, 62, 135, 104, 138, 190, 107, 226, 56, 191, 250, 211, 192, 190, 254, 237, 166, 61, 81, 250, 49, 189, 252, 54, 231, 188, 230, 215, 94, 190, 243, 227, 60, 61, 54, 100, 200, 61, 63, 24, 225, 189, 104, 94, 245, 190, 175, 249, 35, 61, 35, 156, 112, 62, 62, 204, 35, 61, 102, 119, 214, 61, 59, 202, 147, 189, 206, 166, 225, 189, 75, 205, 163, 189, 81, 56, 183, 188, 31, 102, 149, 61, 115, 134, 8, 190, 61, 58, 136, 189, 150, 45, 16, 62, 89, 229, 57, 188, 26, 189, 166, 189, 110, 184, 62, 188, 141, 89, 87, 60, 78, 37, 188, 60, 191, 96, 235, 60, 101, 122, 135, 188, 108, 228, 169, 187, 113, 253, 35, 60, 13, 28, 145, 187, 158, 85, 41, 59, 162, 185, 204, 188, 187, 175, 12, 189, 45, 161, 85, 64, 15, 14, 59, 63, 132, 1, 39, 190, 37, 153, 200, 190, 19, 143, 245, 190, 173, 177, 34, 190, 174, 174, 170, 62, 39, 44, 80, 189, 126, 110, 68, 189, 40, 34, 43, 190, 192, 58, 153, 62, 114, 196, 182, 189, 191, 193, 213, 190, 239, 50, 173, 62, 207, 23, 132, 61, 229, 155, 87, 189, 35, 61, 105, 60, 94, 39, 58, 190, 49, 208, 250, 60, 8, 174, 160, 61, 69, 148, 23, 188, 183, 104, 86, 189, 57, 122, 204, 189, 169, 57, 83, 188, 215, 236, 23, 62, 196, 42, 112, 189, 226, 163, 253, 190, 62, 36, 70, 61, 167, 248, 89, 62, 203, 163, 160, 60, 235, 45, 172, 188, 0, 11, 77, 189, 148, 236, 55, 190, 230, 74, 1, 61, 117, 60, 33, 61, 40, 79, 157, 61, 221, 237, 193, 189, 135, 69, 6, 188, 145, 237, 33, 62, 51, 15, 255, 63, 74, 213, 161, 63, 32, 229, 3, 63, 230, 116, 161, 190, 106, 113, 252, 190, 81, 217, 184, 190, 226, 212, 54, 189, 10, 41, 1, 190, 242, 172, 64, 190, 163, 205, 46, 190, 163, 39, 244, 189, 45, 66, 96, 189, 24, 201, 61, 189, 201, 128, 37, 191, 250, 89, 234, 189, 129, 124, 197, 61, 116, 125, 239, 61, 87, 161, 6, 62, 130, 219, 199, 61, 211, 44, 116, 189, 130, 190, 45, 60, 78, 171, 172, 189, 245, 76, 173, 189, 108, 140, 230, 189, 69, 246, 141, 189, 208, 10, 246, 60, 242, 187, 31, 61, 206, 42, 217, 189, 51, 210, 213, 189, 195, 124, 102, 188, 92, 106, 27, 61]).concat([135, 65, 95, 61, 109, 202, 106, 61, 171, 81, 82, 61, 181, 73, 208, 186, 92, 85, 23, 189, 175, 7, 163, 59, 205, 86, 225, 60, 199, 230, 173, 188, 86, 59, 18, 63, 60, 203, 96, 63, 225, 225, 49, 63, 114, 0, 224, 62, 134, 106, 188, 61, 43, 42, 137, 190, 209, 12, 34, 190, 27, 222, 2, 188, 213, 131, 144, 189, 19, 205, 42, 62, 120, 171, 10, 62, 85, 11, 19, 189, 135, 89, 109, 61, 26, 135, 121, 63, 225, 215, 185, 60, 97, 107, 25, 190, 176, 179, 174, 189, 12, 189, 6, 190, 1, 235, 89, 190, 187, 95, 88, 189, 185, 153, 106, 61, 235, 101, 50, 61, 44, 185, 20, 62, 208, 145, 95, 61, 184, 71, 112, 189, 157, 33, 52, 61, 182, 100, 60, 62, 114, 60, 185, 189, 208, 155, 41, 190, 51, 166, 213, 187, 164, 44, 97, 61, 44, 253, 28, 62, 247, 254, 188, 187, 130, 246, 75, 189, 99, 58, 142, 61, 150, 161, 172, 189, 216, 30, 170, 189, 54, 43, 103, 188, 199, 161, 42, 188, 248, 195, 177, 191, 110, 122, 11, 189, 150, 100, 144, 62, 239, 244, 62, 62, 96, 199, 100, 62, 190, 201, 10, 62, 132, 148, 214, 187, 34, 56, 75, 188, 149, 144, 147, 189, 188, 186, 90, 189, 141, 121, 31, 189, 25, 194, 92, 188, 170, 24, 97, 61, 154, 208, 43, 64, 39, 184, 143, 63, 104, 177, 161, 62, 48, 137, 216, 62, 250, 148, 0, 61, 152, 216, 156, 190, 168, 52, 187, 190, 189, 1, 158, 190, 214, 39, 136, 189, 130, 241, 45, 62, 100, 92, 209, 189, 250, 180, 3, 190, 144, 169, 5, 187, 197, 116, 21, 64, 37, 81, 91, 62, 104, 84, 26, 191, 91, 179, 233, 189, 70, 65, 145, 190, 177, 29, 133, 190, 76, 167, 73, 190, 214, 34, 197, 189, 205, 58, 89, 62, 184, 66, 128, 62, 37, 206, 172, 60, 80, 131, 34, 189, 175, 115, 228, 186, 97, 20, 31, 191, 184, 195, 33, 63, 83, 97, 60, 63, 203, 150, 7, 63, 120, 246, 185, 62, 3, 175, 153, 61, 20, 100, 154, 189, 79, 189, 226, 189, 187, 225, 35, 190, 51, 252, 96, 189, 248, 82, 189, 188, 10, 190, 200, 188, 123, 244, 128, 60, 37, 209, 105, 63, 148, 185, 240, 62, 45, 48, 106, 62, 10, 224, 247, 61, 102, 239, 233, 189, 71, 243, 71, 190, 83, 187, 13, 190, 154, 202, 182, 189, 217, 101, 220, 188, 232, 183, 58, 61, 159, 35, 55, 61, 40, 182, 178, 60, 218, 144, 101, 61, 72, 225, 165, 189, 52, 110, 176, 190, 179, 162, 191, 190, 140, 250, 149, 190, 255, 117, 131, 190, 204, 219, 8, 190, 70, 5, 59, 61, 0, 208, 205, 61, 3, 175, 218, 61, 243, 238, 217, 61, 188, 19, 135, 61, 152, 236, 195, 188, 145, 190, 52, 60, 170, 43, 154, 186, 85, 76, 86, 63, 112, 180, 77, 63, 115, 14, 33, 63, 164, 186, 159, 62, 165, 74, 10, 189, 248, 5, 78, 190, 92, 61, 57, 190, 40, 77, 85, 190, 48, 196, 206, 189, 52, 66, 185, 189, 175, 196, 111, 189, 132, 27, 100, 188, 140, 32, 81, 64, 135, 100, 138, 63, 114, 64, 141, 189, 140, 88, 15, 61, 201, 154, 122, 190, 216, 245, 194, 190, 170, 11, 193, 190, 3, 202, 160, 190, 239, 72, 20, 62, 154, 232, 130, 62, 19, 0, 186, 188, 77, 41, 78, 190, 13, 132, 23, 189, 21, 215, 123, 63, 103, 18, 22, 191, 7, 251, 145, 191, 28, 156, 51, 191, 231, 68, 199, 190, 208, 231, 28, 188, 248, 171, 191, 61, 235, 104, 161, 61, 164, 102, 200, 62, 134, 14, 147, 62, 27, 233, 222, 61, 118, 8, 109, 189, 138, 82, 193, 188, 87, 189, 74, 64, 19, 171, 63, 63, 159, 114, 31, 190, 171, 85, 184, 62, 116, 227, 25, 190, 72, 181, 13, 190, 150, 10, 122, 190, 75, 23, 9, 190, 2, 24, 90, 62, 190, 203, 240, 61, 155, 96, 192, 187, 43, 146, 137, 189, 213, 74, 45, 62, 130, 36, 60, 64, 6, 195, 170, 190, 195, 147, 149, 191, 86, 123, 10, 189, 64, 130, 170, 190, 224, 15, 195, 62, 162, 234, 12, 188, 4, 75, 47, 190, 187, 24, 166, 62, 189, 210, 47, 190, 193, 138, 144, 190, 165, 152, 13, 62, 177, 185, 181, 61, 64, 92, 61, 190, 183, 16, 14, 190, 169, 144, 42, 60, 139, 0, 151, 60, 119, 104, 171, 60, 116, 160, 163, 189, 64, 52, 9, 62, 239, 199, 136, 61, 181, 154, 32, 190, 196, 74, 82, 61, 13, 217, 122, 60, 85, 102, 191, 61, 214, 160, 92, 189, 76, 16, 203, 63, 159, 52, 117, 63, 229, 208, 60, 62, 182, 43, 247, 62, 66, 39, 167, 62, 206, 163, 126, 190, 76, 225, 2, 191, 71, 39, 168, 190, 127, 203, 163, 59, 164, 92, 141, 62, 229, 181, 6, 190, 158, 239, 13, 190, 205, 237, 6, 62, 46, 144, 135, 64, 249, 159, 37, 63, 6, 167, 103, 191, 74, 250, 245, 188, 158, 80, 97, 190, 77, 159, 200, 190, 145, 216, 132, 190, 196, 60, 88, 190, 180, 143, 95, 62, 240, 51, 224, 62, 49, 215, 247, 59, 146, 150, 3, 190, 26, 24, 117, 60, 29, 20, 24, 191, 22, 54, 47, 191, 8, 231, 21, 191, 162, 209, 4, 191, 37, 3, 186, 190, 42, 65, 166, 62, 129, 16, 24, 63, 161, 220, 89, 62, 1, 253, 89, 61, 14, 41, 122, 190, 100, 75, 242, 61, 120, 131, 12, 62, 192, 192, 85, 190, 40, 2, 26, 64, 224, 170, 89, 62, 87, 101, 76, 190, 47, 1, 103, 190, 221, 117, 72, 189, 7, 188, 109, 186, 123, 206, 248, 61, 110, 239, 113, 61, 34, 14, 193, 189, 28, 68, 150, 189, 44, 227, 79, 189, 235, 239, 43, 61, 103, 160, 185, 61, 145, 110, 45, 63, 144, 111, 36, 190, 100, 7, 22, 190, 176, 115, 52, 61, 115, 9, 196, 61, 57, 236, 45, 60, 241, 112, 224, 60, 191, 201, 72, 61, 193, 254, 179, 187, 116, 24, 172, 188, 199, 127, 240, 58, 160, 129, 21, 58, 115, 108, 26, 188, 241, 128, 221, 190, 107, 58, 67, 62, 68, 218, 189, 61, 167, 116, 224, 61, 68, 180, 120, 61, 222, 229, 89, 187, 205, 134, 180, 189, 151, 212, 161, 189, 137, 111, 238, 60, 130, 66, 25, 61, 209, 145, 50, 188, 194, 225, 113, 60, 178, 183, 213, 188, 201, 59, 104, 64, 87, 165, 139, 63, 59, 35, 0, 191, 77, 12, 55, 62, 231, 87, 158, 60, 218, 197, 15, 190, 11, 29, 158, 190, 109, 170, 183, 190, 128, 168, 13, 62, 91, 119, 156, 62, 23, 163, 151, 189, 82, 185, 17, 190, 167, 162, 9, 189, 72, 236, 15, 64, 103, 53, 158, 61, 82, 225, 62, 191, 155, 17, 199, 190, 15, 69, 186, 190, 149, 197, 196, 61, 250, 0, 188, 62, 230, 25, 130, 60, 134, 54, 54, 59, 222, 187, 239, 189, 143, 137, 177, 61, 43, 174, 161, 61, 60, 34, 96, 190, 122, 60, 212, 191, 72, 202, 142, 190, 117, 187, 18, 63, 165, 194, 248, 61, 66, 154, 230, 61, 190, 187, 228, 61, 157, 116, 115, 62, 206, 54, 179, 61, 52, 220, 150, 190, 241, 123, 147, 190, 245, 195, 24, 61, 228, 67, 175, 61, 51, 112, 20, 188, 167, 221, 70, 64, 64, 87, 152, 63, 124, 230, 163, 188, 219, 77, 215, 190, 183, 76, 157, 190, 224, 141, 109, 61, 167, 174, 33, 62, 40, 59, 164, 190, 58, 169, 100, 60, 33, 75, 107, 189, 38, 5, 57, 189, 81, 252, 49, 61, 16, 3, 122, 190, 196, 144, 86, 191, 140, 81, 69, 61, 158, 126, 141, 62, 81, 39, 22, 61, 185, 219, 225, 61, 7, 220, 148, 61, 135, 219, 7, 61, 78, 15, 49, 62, 252, 143, 201, 189, 101, 65, 37, 189, 4, 7, 49, 61, 13, 106, 164, 60, 98, 117, 5, 61, 1, 51, 220, 190, 199, 234, 25, 190, 103, 226, 101, 189, 10, 211, 57, 62, 103, 158, 63, 62, 24, 121, 39, 60, 181, 181, 233, 186, 138, 96, 18, 62, 105, 41, 87, 60, 241, 92, 140, 61, 35, 40, 217, 60, 6, 204, 89, 190, 83, 183, 12, 187, 78, 33, 51, 64, 9, 142, 143, 63, 46, 176, 163, 189, 46, 121, 19, 189, 93, 138, 116, 190, 103, 112, 185, 189, 125, 210, 24, 190, 155, 184, 192, 190, 50, 249, 101, 62, 165, 4, 38, 62, 223, 3, 178, 189, 82, 205, 126, 190, 227, 176, 10, 190, 94, 179, 235, 63, 154, 92, 139, 61, 70, 168, 54, 191, 2, 219, 46, 191, 177, 153, 229, 189, 53, 195, 201, 62, 24, 63, 129, 62, 237, 165, 135, 189, 18, 162, 246, 61, 14, 2, 41, 189, 102, 100, 160, 60, 215, 127, 43, 61, 25, 125, 23, 190, 219, 82, 210, 191, 138, 12, 224, 190, 223, 10, 203, 62, 157, 248, 107, 62, 111, 90, 251, 62, 95, 216, 245, 61, 188, 243, 45, 62, 107, 226, 97, 62, 199, 89, 236, 190, 117, 66, 139, 190, 43, 114, 137, 61, 251, 176, 126, 62, 224, 158, 19, 61, 40, 101, 88, 64, 63, 131, 130, 63, 94, 240, 145, 190, 191, 207, 162, 190, 197, 79, 211, 190, 143, 168, 238, 61, 162, 228, 166, 61, 134, 213, 212, 190, 155, 196, 221, 61, 114, 30, 246, 186, 227, 44, 124, 61, 86, 123, 5, 190, 66, 113, 161, 190, 82, 39, 201, 62, 215, 56, 179, 61, 77, 161, 144, 189, 210, 240, 112, 190, 227, 21, 114, 188, 209, 21, 28, 61, 197, 118, 57, 62, 35, 98, 5, 61, 90, 80, 240, 189, 177, 164, 247, 189, 60, 216, 102, 60, 55, 75, 18, 62, 180, 176, 119, 189, 223, 66, 47, 191, 19, 209, 43, 61, 105, 13, 178, 62, 59, 162, 70, 62, 195, 1, 130, 57, 230, 218, 45, 190, 198, 129, 118, 189, 54, 223, 134, 61, 177, 144, 25, 188, 127, 236, 25, 61, 243, 175, 148, 189, 35, 182, 191, 60, 164, 49, 183, 61, 172, 47, 195, 63, 36, 24, 86, 63, 199, 132, 178, 62, 153, 176, 156, 62, 64, 115, 177, 190, 241, 140, 150, 190, 169, 212, 70, 190, 195, 147, 153, 190, 13, 86, 8, 62, 95, 104, 56, 62, 45, 113, 73, 189, 233, 236, 57, 190, 1, 113, 217, 189, 150, 213, 67, 64, 207, 114, 10, 63, 6, 159, 53, 191, 83, 95, 2, 191, 145, 85, 82, 191, 29, 215, 107, 61, 214, 186, 148, 61, 255, 81, 167, 190, 255, 101, 194, 62, 49, 128, 10, 62, 178, 66, 250, 61, 78, 1, 7, 190, 0, 186, 141, 190, 154, 228, 65, 191, 159, 221, 253, 190, 159, 3, 0, 191, 112, 232, 243, 190, 128, 56, 152, 62, 32, 89, 24, 63, 69, 112, 152, 62, 209, 234, 226, 61, 254, 38, 249, 189, 105, 82, 83, 190, 39, 69, 199, 59, 102, 88, 23, 62, 162, 82, 104, 61, 12, 135, 156, 64, 254, 219, 240, 62, 58, 135, 122, 191, 102, 41, 138, 62, 84, 164, 4, 190, 165, 226, 155, 61, 115, 166, 231, 189, 124, 141, 100, 190, 10, 118, 139, 62, 176, 168, 239, 61, 245, 68, 104, 190, 174, 159, 37, 62, 178, 175, 143, 187, 70, 231, 106, 190, 14, 170, 203, 61, 185, 16, 143, 60, 150, 246, 187, 189, 149, 52, 165, 61, 93, 44, 82, 61, 157, 199, 114, 61, 47, 6, 217, 188, 141, 13, 143, 189, 20, 130, 2, 61, 40, 187, 255, 60, 191, 179, 94, 60, 189, 199, 165, 189, 214, 106, 92, 190, 79, 241, 166, 61, 181, 26, 156, 61, 110, 147, 62, 189, 141, 242, 8, 189, 203, 210, 160, 60, 193, 136, 154, 60, 141, 56, 209, 59, 237, 5, 229, 188, 76, 218, 175, 188, 77, 149, 41, 61, 196, 135, 118, 188, 179, 221, 24, 61, 234, 165, 104, 64, 249, 41, 129, 63, 10, 169, 238, 190, 54, 68, 157, 189, 249, 140, 102, 190, 119, 73, 212, 60, 243, 236, 43, 62, 165, 181, 80, 190, 235, 59, 70, 189, 167, 102, 74, 61, 136, 7, 136, 189, 142, 120, 143, 61, 119, 175, 137, 189, 135, 31, 155, 191, 118, 183, 19, 61, 204, 104, 233, 62, 78, 53, 181, 189, 193, 192, 213, 61, 145, 175, 49, 61, 38, 223, 28, 188, 131, 130, 14, 62, 154, 97, 130, 189, 15, 145, 50, 189, 70, 243, 2, 61, 70, 151, 100, 189, 215, 24, 191, 60, 149, 65, 99, 190, 134, 130, 58, 190, 209, 253, 23, 61, 226, 12, 171, 61, 159, 82, 41, 62, 221, 194, 146, 61, 142, 103, 62, 189, 70, 210, 239, 60, 96, 27, 152, 60, 52, 74, 139, 60, 96, 101, 50, 187, 54, 153, 185, 189, 254, 163, 34, 189, 40, 151, 126, 64, 73, 123, 46, 63, 145, 197, 90, 191, 183, 85, 17, 62, 118, 125, 94, 189, 8, 82, 212, 189, 213, 233, 103, 61, 19, 163, 110, 190, 211, 216, 92, 188, 64, 10, 160, 61, 155, 103, 20, 188, 34, 27, 119, 189, 192, 231, 175, 189, 135, 191, 67, 189, 255, 228, 245, 59, 151, 53, 1, 61, 57, 11, 131, 189, 221, 148, 11, 190, 40, 143, 148, 60, 14, 88, 61, 62, 13, 24, 243, 186, 72, 32, 203, 189, 124, 182, 65, 189, 15, 169, 142, 58, 27, 121, 163, 61, 185, 21, 68, 188, 17, 28, 230, 190, 108, 91, 17, 61, 46, 36, 91, 62, 229, 232, 199, 185, 60, 174, 213, 60, 172, 101, 63, 188, 207, 192, 212, 189, 112, 15, 181, 60, 203, 43, 61, 61, 231, 189, 219, 60, 110, 134, 245, 188, 143, 226, 72, 187, 251, 12, 50, 61, 28, 115, 171, 64, 219, 140, 196, 62, 167, 141, 37, 191, 85, 31, 24, 190, 149, 185, 69, 190, 119, 213, 245, 60, 51, 136, 126, 190, 154, 35, 48, 62, 242, 14, 213, 61, 46, 40, 238, 61, 197, 119, 120, 190, 42, 231, 138, 61, 70, 155, 187, 188, 56, 165, 22, 190, 242, 76, 175, 61, 116, 158, 62, 60, 220, 29, 0, 189, 161, 162, 64, 61, 64, 249, 137, 188, 94, 117, 114, 187, 20, 170, 245, 188, 110, 210, 217, 60, 90, 237, 195, 188, 134, 191, 82, 59, 102, 101, 102, 59, 248, 14, 106, 188, 235, 190, 49, 190, 74, 162, 158, 61, 242, 105, 160, 60, 190, 44, 120, 58, 175, 76, 61, 188, 177, 54, 242, 187, 71, 179, 170, 60, 235, 190, 151, 188, 225, 38, 192, 59, 28, 179, 100, 188, 67, 120, 182, 60, 182, 249, 235, 188, 250, 147, 222, 59, 46, 154, 194, 63, 159, 102, 110, 63, 52, 22, 42, 62, 24, 41, 142, 190, 132, 16, 138, 189, 245, 140, 32, 62, 215, 8, 140, 62, 56, 72, 136, 61, 107, 159, 219, 189, 151, 25, 12, 189, 65, 177, 179, 59, 177, 107, 148, 189, 44, 37, 9, 190, 118, 125, 35, 191, 234, 147, 67, 190, 244, 114, 150, 61, 233, 197, 253, 61, 130, 223, 10, 62, 40, 32, 23, 61, 74, 168, 252, 60, 226, 187, 11, 62, 87, 74, 206, 59, 90, 60, 180, 60, 40, 47, 207, 188, 226, 146, 113, 189, 123, 250, 239, 60, 156, 137, 202, 61, 18, 217, 176, 187, 188, 134, 143, 187, 49, 96, 131, 60, 116, 107, 20, 189, 92, 60, 18, 60, 70, 141, 218, 188, 93, 234, 84, 189, 39, 70, 93, 60, 235, 238, 64, 188, 58, 249, 6, 189, 42, 226, 243, 60, 109, 46, 4, 59, 194, 58, 46, 64, 29, 75, 153, 63, 35, 169, 61, 190, 167, 181, 24, 191, 23, 32, 227, 190, 181, 102, 129, 62, 249, 108, 208, 62, 129, 129, 79, 190, 244, 240, 42, 190, 52, 221, 221, 61, 224, 185, 97, 60, 108, 252, 103, 189, 224, 139, 251, 189, 92, 89, 11, 190, 188, 218, 5, 62, 155, 29, 49, 62, 9, 112, 169, 189, 236, 64, 13, 61, 126, 87, 160, 189, 71, 62, 165, 189, 251, 158, 119, 61, 82, 80, 126, 189, 45, 160, 38, 60, 135, 45, 92, 188, 187, 2, 234, 60, 76, 111, 218, 61, 178, 2, 88, 190, 226, 246, 199, 189, 171, 160, 198, 58, 51, 204, 3, 62, 36, 149, 88, 61, 2, 224, 141, 189, 7, 97, 219, 189, 167, 221, 156, 59, 0, 83, 109, 59, 149, 9, 7, 60, 169, 60, 208, 60, 179, 145, 15, 61, 249, 55, 153, 60, 204, 209, 1, 63, 73, 41, 12, 63, 54, 219, 182, 62, 174, 63, 27, 62, 204, 38, 77, 62, 255, 10, 81, 62, 202, 56, 38, 62, 46, 121, 7, 62, 164, 181, 69, 189, 73, 1, 231, 187, 200, 62, 232, 189, 133, 250, 17, 190, 230, 96, 225, 189, 85, 229, 45, 191, 100, 49, 180, 190, 175, 152, 180, 60, 144, 39, 49, 62, 58, 23, 54, 62, 30, 170, 29, 61, 244, 91, 130, 189, 204, 157, 110, 188, 140, 59, 173, 187, 70, 233, 14, 58, 170, 67, 32, 189, 97, 138, 137, 60, 149, 5, 21, 61, 217, 139, 9, 61, 247, 174, 152, 189, 71, 67, 174, 189, 206, 13, 193, 189, 28, 239, 31, 188, 195, 42, 59, 58, 106, 205, 108, 60, 255, 102, 58, 189, 177, 23, 81, 59, 243, 34, 196, 59, 8, 232, 62, 61, 15, 100, 208, 60, 72, 140, 98, 60, 58, 169, 39, 64, 62, 179, 68, 63, 98, 85, 6, 190, 82, 85, 188, 189, 169, 110, 93, 191, 21, 177, 174, 61, 248, 128, 179, 62, 191, 0, 87, 190, 205, 132, 245, 60, 86, 47, 95, 189, 189, 28, 25, 62, 212, 150, 213, 61, 242, 122, 142, 190, 243, 109, 91, 187, 243, 85, 1, 62, 20, 188, 26, 62, 10, 154, 19, 188, 141, 52, 174, 187, 242, 45, 138, 189, 219, 185, 148, 60, 6, 102, 151, 61, 7, 216, 167, 188, 46, 25, 135, 188, 224, 27, 189, 189, 163, 204, 25, 61, 58, 72, 217, 61, 157, 26, 133, 190, 120, 137, 48, 189, 165, 190, 210, 60, 239, 143, 222, 188, 54, 23, 163, 61, 74, 142, 16, 187, 234, 40, 65, 189, 92, 62, 195, 56, 231, 98, 224, 60, 246, 11, 63, 188, 239, 248, 188, 188, 56, 130, 173, 188, 190, 141, 29, 60, 83, 71, 91, 192, 123, 192, 205, 190, 19, 243, 236, 62, 30, 220, 76, 190, 193, 142, 65, 62, 59, 64, 133, 61, 207, 9, 221, 60, 114, 157, 49, 62, 130, 106, 78, 189, 42, 199, 70, 61, 134, 41, 134, 188, 36, 242, 231, 61, 202, 103, 231, 61, 109, 101, 134, 189, 205, 96, 168, 59, 18, 250, 176, 187, 3, 116, 116, 188, 9, 146, 139, 187, 107, 11, 32, 187, 5, 60, 152, 60, 64, 121, 153, 59, 227, 210, 15, 59, 181, 252, 64, 59, 106, 234, 45, 59, 189, 254, 221, 59, 141, 148, 157, 59, 227, 198, 25, 60, 26, 94, 113, 188, 88, 137, 131, 188, 48, 209, 42, 188, 154, 26, 200, 187, 35, 87, 23, 60, 108, 108, 231, 59, 42, 48, 15, 188, 153, 3, 103, 187, 61, 99, 141, 58, 231, 67, 41, 60, 23, 253, 198, 59, 21, 219, 166, 187, 246, 58, 203, 191, 32, 228, 167, 190, 180, 116, 162, 60, 251, 253, 165, 188, 149, 45, 157, 61, 231, 99, 212, 60, 180, 7, 56, 188, 81, 44, 209, 59, 29, 203, 128, 188, 231, 159, 134, 60, 196, 58, 84, 61, 89, 184, 23, 61, 190, 233, 255, 60, 69, 223, 25, 61, 30, 68, 16, 61, 116, 157, 11, 61, 243, 193, 213, 60, 200, 60, 50, 60, 250, 111, 25, 60, 83, 58, 157, 60, 133, 41, 177, 60, 3, 195, 171, 60, 162, 207, 109, 188, 47, 95, 153, 188, 208, 218, 3, 189, 82, 106, 199, 188, 96, 14, 64, 60, 233, 98, 96, 60, 90, 179, 6, 60, 185, 150, 205, 59, 133, 153, 12, 61, 156, 142, 1, 61, 202, 73, 45, 61, 77, 81, 107, 61, 46, 101, 214, 60, 244, 187, 95, 60, 52, 123, 201, 188, 187, 201, 18, 189, 147, 125, 12, 188, 201, 43, 210, 191, 34, 232, 153, 190, 218, 178, 31, 59, 234, 132, 71, 188, 142, 234, 191, 61, 188, 59, 37, 61, 64, 64, 25, 61, 59, 233, 126, 61, 96, 0, 239, 187, 8, 194, 86, 59, 90, 99, 69, 61, 132, 83, 47, 60, 30, 91, 234, 60, 80, 166, 151, 189, 249, 226, 155, 188, 57, 89, 229, 188, 101, 117, 176, 188, 20, 125, 217, 187, 11, 13, 0, 187, 32, 220, 159, 188, 203, 219, 214, 188, 145, 66, 155, 188, 237, 6, 34, 60, 142, 197, 175, 60, 149, 246, 2, 61, 75, 70, 198, 60, 233, 26, 169, 60, 35, 171, 228, 185, 94, 50, 123, 58, 160, 175, 141, 58, 239, 80, 27, 189, 201, 11, 214, 188, 137, 238, 45, 189, 2, 123, 121, 189, 79, 75, 222, 188, 195, 214, 135, 188, 240, 223, 217, 60, 122, 26, 6, 61, 8, 235, 165, 59, 12, 49, 97, 192, 193, 60, 152, 190, 14, 49, 40, 62, 105, 192, 11, 62, 20, 8, 25, 62, 161, 247, 14, 62, 54, 26, 33, 60, 159, 108, 149, 189, 64, 12, 111, 60, 173, 90, 32, 189, 165, 16, 128, 61, 108, 108, 167, 61, 0, 95, 96, 189, 162, 207, 249, 188, 253, 130, 211, 187, 206, 224, 173, 187, 163, 90, 231, 59, 18, 104, 237, 187, 63, 96, 3, 59, 1, 89, 137, 188, 182, 0, 194, 186, 85, 154, 11, 60, 102, 174, 205, 59, 98, 169, 164, 60, 158, 1, 135, 59, 170, 169, 214, 187, 85, 56, 199, 188, 129, 196, 8, 186, 186, 10, 149, 187, 96, 3, 68, 188, 229, 190, 9, 60, 95, 161, 100, 188, 15, 156, 88, 58, 207, 220, 167, 60, 170, 166, 226, 59, 127, 154, 101, 188, 29, 74, 51, 188, 45, 136, 114, 187, 248, 167, 48, 60, 139, 105, 186, 62, 232, 164, 133, 61, 186, 149, 99, 62, 185, 11, 91, 62, 183, 203, 48, 62, 106, 230, 224, 61, 221, 145, 222, 186, 80, 39, 87, 188, 14, 189, 101, 60, 102, 151, 227, 188, 104, 40, 72, 188, 127, 210, 175, 60, 115, 190, 153, 60, 117, 9, 64, 191, 178, 73, 180, 190, 83, 84, 21, 190, 220, 66, 11, 190, 128, 198, 144, 61, 135, 83, 245, 61, 97, 253, 152, 61, 168, 216, 184, 61, 73, 143, 237, 60, 230, 47, 87, 60, 25, 47, 148, 61, 131, 193, 151, 188, 46, 89, 69, 188, 122, 196, 52, 62, 145, 213, 142, 61, 233, 25, 91, 189, 190, 76, 130, 189, 37, 63, 1, 190, 200, 94, 0, 190, 49, 97, 134, 188, 77, 175, 7, 59, 14, 164, 20, 61, 11, 94, 83, 61, 149, 210, 206, 59, 22, 31, 0, 58, 110, 147, 124, 188, 183, 74, 40, 191, 32, 168, 183, 190, 213, 0, 34, 189, 93, 51, 81, 189, 169, 242, 148, 61, 203, 61, 155, 61, 17, 219, 129, 60, 241, 4, 54, 61, 11, 193, 152, 60, 96, 159, 144, 187, 253, 216, 34, 61, 222, 196, 141, 60, 34, 188, 183, 60, 39, 157, 158, 189, 103, 174, 183, 60, 128, 4, 94, 61, 2, 212, 69, 61, 84, 252, 240, 60, 107, 24, 123, 60, 246, 132, 228, 59, 158, 208, 26, 187, 173, 49, 129, 188, 74, 29, 157, 188, 128, 144, 231, 188, 20, 211, 20, 189, 35, 238, 255, 188, 229, 13, 63, 61, 176, 170, 38, 61, 90, 197, 61, 60, 61, 125, 12, 59, 3, 123, 136, 188, 37, 100, 194, 188, 120, 118, 44, 188, 162, 20, 25, 59, 216, 146, 81, 60, 86, 128, 85, 187, 161, 219, 90, 188, 5, 178, 164, 188, 47, 126, 232, 188, 176, 104, 36, 191, 20, 19, 174, 190, 135, 100, 89, 189, 18, 56, 108, 189, 162, 164, 77, 61, 27, 229, 232, 60, 58, 174, 4, 188, 189, 238, 199, 60, 250, 162, 16, 188, 20, 164, 233, 188, 124, 23, 190, 60, 192, 112, 2, 188, 142, 56, 190, 187, 242, 247, 12, 190, 201, 54, 55, 189, 116, 237, 55, 189, 114, 168, 46, 189, 13, 100, 0, 189, 137, 178, 205, 188, 150, 95, 145, 188, 2, 38, 146, 186, 129, 4, 205, 59, 9, 68, 13, 60, 135, 187, 194, 60, 62, 29, 15, 61, 226, 120, 187, 60, 173, 200, 50, 189, 137, 9, 1, 189, 241, 247, 70, 188, 220, 93, 152, 58, 166, 69, 143, 60, 13, 173, 18, 61, 224, 144, 207, 60, 247, 74, 22, 60, 224, 66, 54, 58, 28, 114, 22, 60, 57, 69, 123, 60, 68, 191, 194, 60, 161, 112, 239, 60, 238, 3, 136, 190, 195, 5, 94, 190, 58, 82, 52, 60, 227, 209, 194, 188, 241, 20, 179, 61, 229, 205, 197, 61, 50, 199, 190, 60, 205, 210, 91, 61, 204, 209, 2, 61, 111, 122, 186, 188, 37, 110, 248, 186, 81, 230, 200, 188, 249, 64, 150, 187, 128, 234, 219, 190, 135, 239, 84, 190, 17, 249, 197, 189, 104, 182, 113, 189, 183, 102, 84, 185, 209, 85, 195, 59, 222, 184, 214, 60, 176, 13, 110, 60, 1, 245, 23, 188, 2, 196, 137, 60, 239, 151, 47, 61, 28, 197, 45, 61, 189, 57, 29, 61, 25, 254, 99, 62, 241, 249, 237, 61, 98, 12, 105, 61, 38, 2, 20, 61, 146, 64, 131, 187, 192, 205, 47, 189, 84, 114, 121, 189, 231, 60, 54, 189, 177, 51, 240, 188, 175, 90, 53, 188, 253, 9, 139, 188, 237, 231, 137, 188, 200, 99, 16, 188, 132, 251, 64, 191, 155, 39, 146, 190, 90, 252, 28, 188, 191, 240, 8, 187, 37, 45, 40, 62, 9, 174, 15, 62, 193, 160, 179, 61, 195, 94, 14, 62, 218, 58, 213, 60, 36, 61, 91, 61, 146, 222, 116, 189, 0, 231, 11, 189, 197, 108, 14, 61, 157, 87, 238, 190, 146, 73, 145, 190, 186, 47, 13, 190, 234, 7, 203, 188, 94, 149, 89, 60, 202, 49, 6, 60, 216, 195, 69, 189, 52, 246, 105, 188, 99, 110, 28, 61, 224, 213, 124, 61, 188, 13, 199, 61, 37, 69, 154, 61, 169, 18, 137, 61, 248, 59, 75, 62, 135, 50, 29, 62, 45, 185, 173, 61, 8, 139, 109, 60, 68, 169, 198, 187, 60, 91, 12, 60, 142, 252, 77, 188, 106, 93, 54, 189, 18, 66, 162, 188, 18, 31, 156, 188, 93, 234, 163, 187, 138, 22, 74, 188, 153, 214, 239, 187, 50, 152, 16, 191, 89, 109, 164, 190, 19, 175, 31, 190, 188, 91, 86, 189, 35, 104, 114, 58, 174, 175, 93, 61, 55, 57, 167, 60, 55, 28, 46, 61, 198, 124, 102, 60, 230, 174, 178, 60, 5, 176, 83, 60, 239, 196, 0, 61, 61, 62, 42, 61, 225, 197, 194, 188, 72, 249, 81, 61, 58, 13, 7, 61, 8, 186, 208, 60, 196, 157, 212, 60, 135, 165, 146, 60, 134, 0, 191, 59, 198, 156, 8, 59, 195, 71, 77, 188, 176, 12, 117, 187, 163, 101, 197, 188, 178, 208, 46, 189, 99, 3, 239, 188, 223, 166, 207, 60, 18, 144, 124, 186, 194, 20, 10, 61, 179, 121, 221, 60, 93, 252, 56, 61, 102, 58, 37, 61, 221, 239, 212, 60, 74, 88, 150, 58, 217, 163, 155, 187, 43, 25, 2, 59, 146, 165, 146, 188, 234, 88, 50, 188, 172, 181, 170, 188, 188, 178, 63, 191, 56, 132, 207, 190, 175, 65, 43, 190, 56, 128, 64, 189, 183, 176, 62, 61, 116, 26, 146, 61, 182, 198, 159, 60, 151, 182, 89, 61, 124, 118, 245, 59, 144, 68, 99, 61, 135, 107, 170, 60, 89, 58, 218, 60, 212, 45, 103, 61, 133, 205, 55, 190, 214, 159, 142, 189, 7, 41, 68, 189, 44, 146, 35, 189, 20, 239, 219, 188, 248, 139, 114, 188, 213, 126, 153, 188, 70, 224, 72, 188, 191, 221, 186, 59, 100, 111, 107, 60, 78, 2, 16, 61, 198, 23, 89, 61, 94, 46, 246, 60, 220, 252, 62, 188, 233, 235, 205, 59, 44, 177, 249, 188, 240, 171, 55, 188, 249, 59, 226, 188, 59, 115, 40, 189, 13, 163, 211, 188, 167, 39, 18, 187, 151, 14, 84, 188, 244, 211, 100, 188, 209, 192, 220, 59, 0, 177, 48, 60, 5, 85, 142, 60, 98, 136, 88, 60, 205, 61, 151, 61, 52, 63, 123, 62, 236, 122, 70, 62, 136, 60, 136, 62, 158, 98, 57, 62, 129, 132, 103, 61, 249, 143, 197, 60, 19, 140, 139, 189, 239, 21, 236, 188, 202, 79, 231, 189, 114, 166, 131, 189, 40, 241, 34, 189, 140, 111, 3, 191, 160, 6, 194, 190, 134, 207, 87, 190, 228, 37, 192, 189, 27, 80, 238, 188, 148, 144, 89, 187, 142, 90, 194, 60, 42, 120, 60, 61, 16, 131, 94, 61, 118, 39, 27, 61, 131, 246, 40, 61, 226, 134, 82, 61, 144, 169, 244, 60, 205, 221, 208, 187, 151, 78, 120, 188, 21, 150, 133, 189, 219, 19, 163, 189, 248, 131, 187, 189, 29, 142, 129, 189, 78, 240, 186, 188, 213, 254, 1, 61, 246, 210, 7, 61, 223, 126, 202, 60, 9, 198, 251, 60, 163, 249, 77, 59, 38, 168, 226, 60, 174, 61, 212, 191, 195, 105, 194, 190, 234, 176, 45, 189, 145, 76, 110, 189, 156, 130, 174, 61, 199, 206, 133, 61, 42, 25, 145, 60, 239, 154, 106, 61, 178, 29, 225, 60, 9, 74, 122, 186, 25, 43, 64, 61, 23, 72, 178, 60, 251, 22, 163, 60, 208, 98, 85, 60, 133, 150, 162, 61, 64, 255, 172, 61, 136, 204, 154, 61, 161, 231, 155, 61, 130, 211, 116, 61, 61, 52, 4, 61, 102, 217, 26, 188, 1, 14, 22, 189, 15, 214, 39, 189, 10, 76, 112, 189, 172, 67, 92, 189, 127, 157, 68, 189, 154, 154, 61, 62, 161, 26, 23, 62, 72, 148, 5, 62, 175, 207, 224, 61, 126, 189, 133, 61, 160, 71, 34, 61, 170, 60, 187, 58, 132, 239, 21, 189, 66, 24, 67, 189, 181, 180, 35, 189, 71, 249, 23, 189, 118, 43, 130, 189, 167, 191, 117, 189, 190, 98, 204, 191, 216, 14, 172, 190, 63, 45, 62, 60, 224, 234, 211, 187, 229, 135, 241, 61, 198, 254, 178, 61, 117, 244, 81, 60, 70, 220, 248, 60, 177, 183, 205, 187, 195, 113, 187, 188, 132, 141, 247, 60, 71, 200, 149, 58, 57, 75, 255, 59, 138, 27, 46, 189, 94, 129, 205, 60, 248, 57, 159, 60, 44, 202, 238, 60, 138, 57, 8, 61, 32, 2, 3, 61, 206, 211, 155, 60, 26, 11, 145, 59, 125, 121, 149, 59, 0, 203, 228, 187, 28, 214, 144, 188, 213, 210, 241, 188, 245, 212, 205, 188, 177, 158, 91, 189, 222, 176, 126, 189, 240, 117, 182, 189, 133, 184, 163, 189, 224, 236, 143, 189, 80, 10, 52, 189, 127, 102, 180, 187, 2, 88, 53, 61, 139, 56, 148, 61, 89, 244, 129, 61, 235, 180, 66, 61, 47, 228, 0, 61, 155, 68, 220, 60, 48, 199, 204, 191, 132, 86, 176, 190, 238, 76, 16, 189, 121, 50, 94, 189, 19, 50, 187, 61, 202, 147, 121, 61, 91, 52, 28, 60, 81, 74, 50, 61, 110, 220, 210, 187, 217, 31, 8, 189, 51, 243, 117, 60, 73, 162, 255, 188, 77, 163, 51, 188, 180, 231, 252, 189, 37, 63, 67, 189, 183, 249, 63, 189, 178, 112, 33, 189, 243, 177, 34, 189, 21, 239, 3, 189, 67, 252, 222, 188, 136, 10, 210, 186, 35, 162, 130, 60, 176, 78, 221, 60, 233, 204, 8, 61, 133, 4, 48, 61, 101, 237, 35, 61, 203, 98, 61, 189, 186, 243, 85, 189, 92, 139, 230, 188, 240, 187, 244, 188, 44, 206, 87, 188, 190, 86, 19, 188, 100, 23, 255, 187, 210, 212, 67, 188, 160, 68, 18, 188, 234, 173, 171, 60, 94, 221, 72, 61, 75, 75, 139, 61, 74, 108, 60, 61, 7, 2, 204, 191, 53, 191, 208, 190, 77, 245, 189, 189, 184, 213, 203, 189, 57, 64, 60, 61, 1, 246, 26, 61, 27, 41, 166, 58, 152, 119, 93, 61, 14, 10, 2, 61, 4, 92, 192, 60, 205, 225, 186, 61, 69, 187, 59, 61, 152, 75, 36, 61, 139, 144, 200, 189, 170, 124, 69, 188, 58, 137, 32, 188, 79, 2, 188, 188, 193, 67, 222, 188, 197, 184, 217, 188, 226, 37, 178, 187, 177, 111, 65, 59, 205, 168, 171, 59, 187, 15, 12, 60, 243, 148, 174, 60, 88, 234, 251, 60, 243, 239, 185, 60, 125, 212, 105, 61, 28, 6, 130, 61, 3, 149, 147, 61, 110, 2, 133, 61, 93, 65, 106, 61, 106, 248, 20, 61, 243, 134, 106, 60, 83, 34, 148, 188, 52, 3, 49, 189, 66, 236, 132, 189, 3, 84, 164, 189, 235, 130, 123, 189, 56, 237, 36, 189, 71, 29, 214, 191, 137, 103, 45, 191, 228, 146, 32, 190, 7, 255, 140, 189, 223, 49, 57, 62, 200, 93, 185, 61, 28, 200, 30, 60, 93, 122, 188, 61, 135, 88, 211, 60, 185, 40, 237, 61, 190, 252, 114, 61, 117, 162, 228, 61, 185, 16, 65, 62, 2, 215, 27, 189, 37, 84, 30, 60, 141, 65, 117, 61, 93, 194, 51, 61, 126, 228, 136, 61, 251, 70, 147, 61, 175, 210, 70, 61, 118, 20, 2, 59, 187, 133, 120, 60, 119, 59, 142, 58, 231, 174, 76, 60, 188, 176, 85, 188, 62, 114, 125, 188, 84, 230, 217, 61, 84, 1, 6, 62, 56, 65, 195, 61, 122, 244, 245, 61, 103, 141, 105, 61, 18, 187, 28, 61, 224, 144, 117, 60, 157, 242, 40, 188, 82, 10, 10, 189, 158, 96, 215, 188, 93, 124, 100, 189, 68, 227, 71, 189, 192, 9, 108, 189, 10, 251, 183, 191, 2, 113, 6, 191, 142, 7, 219, 189, 81, 162, 131, 188, 138, 46, 54, 62, 122, 29, 234, 61, 132, 53, 237, 60, 251, 201, 156, 61, 41, 228, 22, 57, 209, 64, 158, 61, 208, 145, 124, 57, 232, 160, 222, 60, 180, 42, 232, 61, 200, 7, 95, 190, 58, 211, 201, 189, 44, 11, 95, 189, 235, 62, 250, 188, 23, 246, 25, 188, 134, 233, 107, 60, 78, 249, 199, 60, 185, 186, 128, 60, 79, 94, 76, 60, 38, 163, 205, 60, 77, 26, 12, 61, 161, 173, 227, 60, 179, 28, 170, 60, 248, 192, 16, 188, 29, 104, 177, 58, 3, 161, 171, 59, 151, 211, 137, 188, 149, 65, 31, 60, 235, 41, 119, 60, 54, 18, 231, 60, 85, 222, 57, 61, 41, 253, 51, 61, 139, 140, 235, 60, 12, 135, 178, 60, 249, 156, 68, 60, 198, 75, 137, 188, 103, 253, 200, 191, 160, 38, 7, 191, 213, 3, 241, 189, 30, 226, 147, 188, 99, 115, 5, 62, 233, 35, 165, 61, 1, 183, 131, 60, 118, 124, 152, 61, 44, 228, 12, 188, 172, 233, 101, 61, 237, 201, 208, 188, 40, 193, 139, 60, 178, 255, 200, 61, 4, 181, 136, 189, 204, 144, 119, 60, 69, 87, 189, 187, 44, 156, 26, 58, 5, 206, 20, 189, 55, 25, 118, 189, 21, 169, 237, 188, 84, 17, 154, 59, 190, 162, 135, 59, 169, 157, 10, 187, 250, 42, 14, 188, 74, 234, 132, 188, 184, 11, 61, 60, 112, 117, 194, 189, 147, 33, 162, 189, 186, 133, 125, 189, 113, 222, 90, 189, 108, 64, 222, 188, 52, 137, 49, 188, 17, 110, 165, 187, 93, 170, 197, 186, 12, 144, 145, 60, 133, 57, 199, 60, 249, 252, 88, 61, 174, 218, 134, 61, 209, 38, 143, 61, 9, 33, 208, 191, 99, 3, 29, 191, 80, 33, 19, 190, 37, 119, 104, 189, 148, 176, 72, 62, 150, 122, 225, 61, 81, 235, 164, 60, 59, 117, 216, 61, 76, 94, 208, 60, 154, 198, 210, 61, 230, 47, 217, 60, 201, 129, 134, 61, 39, 142, 20, 62, 254, 170, 205, 189, 250, 143, 175, 186, 240, 62, 255, 59, 190, 92, 153, 60, 200, 166, 171, 60, 17, 30, 14, 59, 59, 66, 142, 188, 76, 219, 122, 188, 254, 144, 109, 188, 65, 109, 168, 188, 176, 230, 180, 188, 203, 79, 91, 186, 251, 126, 6, 188, 117, 189, 22, 62, 42, 24, 204, 61, 76, 164, 110, 61, 166, 246, 214, 60, 28, 123, 5, 188, 10, 214, 79, 188, 125, 124, 167, 188, 193, 52, 19, 189, 76, 185, 63, 189, 49, 111, 57, 189, 147, 219, 95, 189, 217, 38, 123, 189, 117, 185, 16, 189, 94, 146, 226, 191, 105, 117, 25, 191, 48, 253, 45, 190, 19, 19, 66, 189, 44, 141, 247, 61, 101, 11, 199, 61, 202, 147, 105, 60, 241, 219, 70, 61, 238, 79, 121, 61, 126, 65, 69, 61, 16, 213, 73, 61, 56, 160, 167, 61, 164, 111, 130, 61, 124, 253, 138, 189, 45, 209, 230, 59, 166, 236, 187, 60, 195, 22, 75, 60, 250, 97, 144, 60, 28, 123, 216, 60, 235, 166, 158, 60, 15, 242, 116, 59, 200, 97, 79, 60, 72, 237, 244, 60, 73, 82, 4, 60, 162, 28, 58, 60, 61, 198, 158, 186, 122, 170, 252, 61, 241, 47, 229, 61, 164, 157, 4, 62, 69, 8, 3, 62, 238, 245, 129, 61, 140, 188, 140, 61, 169, 141, 141, 61, 89, 162, 237, 57, 131, 138, 176, 188, 246, 138, 110, 189, 108, 96, 202, 189, 193, 51, 217, 189, 49, 183, 155, 189, 232, 17, 176, 191, 170, 30, 22, 191, 78, 122, 26, 190, 207, 239, 147, 189, 191, 140, 150, 61, 1, 8, 34, 62, 249, 80, 227, 61, 173, 222, 89, 61, 198, 243, 152, 61, 251, 128, 174, 188, 229, 83, 156, 188, 246, 65, 82, 61, 83, 223, 92, 59, 5, 10, 130, 189, 67, 165, 221, 188, 30, 144, 251, 188, 83, 244, 163, 188, 27, 116, 198, 57, 24, 130, 137, 57, 103, 93, 129, 188, 24, 79, 44, 59, 108, 3, 156, 59, 167, 179, 134, 187, 64, 248, 5, 61, 219, 216, 198, 60, 77, 191, 158, 60, 142, 61, 149, 59, 241, 99, 103, 188, 159, 191, 169, 187, 212, 134, 82, 188, 49, 125, 229, 60, 104, 107, 115, 188, 104, 235, 169, 188, 14, 101, 19, 60, 226, 138, 42, 61, 162, 238, 124, 61, 135, 197, 225, 60, 76, 44, 45, 61, 183, 237, 252, 60, 207, 90, 12, 192, 206, 16, 70, 191, 54, 180, 96, 189, 113, 186, 250, 188, 182, 163, 120, 62, 189, 238, 33, 62, 208, 70, 146, 188, 239, 211, 48, 61, 119, 112, 4, 62, 231, 147, 194, 60, 198, 203, 162, 61, 160, 3, 191, 61, 201, 126, 174, 60, 223, 39, 48, 189, 34, 143, 241, 59, 89, 202, 37, 188, 59, 98, 49, 188, 107, 138, 46, 186, 121, 39, 231, 188, 233, 100, 43, 56, 206, 1, 83, 59, 96, 138, 73, 188, 167, 215, 191, 58, 219, 151, 21, 188, 202, 212, 117, 187, 80, 119, 47, 60, 19, 103, 105, 61, 118, 129, 68, 61, 226, 71, 36, 60, 221, 129, 162, 187, 68, 161, 138, 188, 170, 79, 117, 188, 247, 155, 68, 188, 8, 75, 130, 59, 80, 174, 5, 189, 116, 158, 18, 188, 128, 25, 209, 188, 31, 106, 232, 188, 81, 98, 57, 188, 23, 34, 190, 191, 139, 150, 11, 191, 13, 6, 215, 189, 181, 196, 54, 61, 185, 60, 37, 62, 188, 49, 228, 61, 113, 128, 71, 60, 39, 210, 212, 60, 202, 173, 74, 61, 83, 9, 4, 61, 240, 119, 148, 188, 234, 25, 187, 188, 24, 45, 144, 187, 118, 100, 93, 189, 14, 242, 51, 60, 30, 96, 244, 59, 118, 29, 150, 60, 198, 168, 158, 187, 24, 194, 24, 60, 101, 229, 183, 59, 218, 220, 186, 59, 43, 142, 7, 188, 201, 216, 9, 189, 167, 129, 0, 189, 93, 241, 133, 188, 231, 208, 246, 187, 103, 2, 193, 189, 164, 136, 168, 189, 162, 217, 145, 189, 218, 56, 136, 189, 33, 187, 36, 189, 131, 206, 195, 188, 71, 4, 71, 188, 58, 204, 80, 59, 33, 177, 126, 60, 116, 207, 207, 59, 17, 168, 132, 61, 234, 198, 153, 61, 13, 245, 95, 61, 236, 199, 198, 191, 127, 78, 127, 61, 193, 120, 159, 62, 113, 188, 130, 62, 28, 129, 164, 62, 198, 142, 56, 62, 133, 120, 177, 61, 216, 24, 104, 61, 117, 173, 128, 188, 195, 215, 23, 189, 51, 146, 127, 184, 239, 51, 52, 189, 149, 72, 66, 189, 100, 75, 128, 63, 64, 133, 98, 63, 44, 132, 53, 63, 203, 64, 248, 62, 22, 28, 119, 62, 117, 146, 59, 61, 74, 6, 252, 187, 224, 138, 160, 189, 179, 142, 232, 189, 181, 1, 213, 189, 36, 170, 182, 189, 192, 57, 171, 189, 182, 204, 53, 189, 191, 220, 4, 63, 161, 251, 132, 62, 59, 250, 217, 61, 126, 59, 200, 188, 189, 196, 252, 189, 103, 22, 249, 189, 47, 204, 0, 190, 153, 43, 237, 189, 152, 253, 159, 189, 147, 21, 248, 188, 246, 161, 135, 60, 231, 135, 125, 61, 135, 72, 95, 61, 45, 38, 238, 191, 16, 117, 209, 190, 226, 179, 141, 189, 82, 71, 173, 188, 245, 189, 221, 61, 9, 143, 162, 61, 155, 102, 103, 60, 34, 130, 64, 61, 127, 232, 149, 60, 82, 42, 17, 61, 109, 226, 102, 61, 222, 25, 26, 61, 113, 150, 220, 60, 223, 239, 224, 62, 121, 77, 213, 62, 204, 122, 197, 62, 171, 225, 150, 62, 87, 206, 62, 62, 20, 76, 186, 61, 182, 143, 29, 61, 237, 77, 45, 188, 74, 37, 174, 188, 91, 200, 45, 189, 8, 23, 57, 189, 151, 239, 124, 189, 21, 107, 116, 189, 116, 68, 152, 63, 45, 137, 112, 63, 48, 65, 43, 63, 102, 190, 215, 62, 138, 250, 39, 62, 195, 191, 7, 189, 77, 72, 215, 189, 65, 155, 6, 190, 237, 114, 6, 190, 202, 164, 0, 190, 159, 205, 233, 189, 179, 177, 194, 189, 72, 254, 131, 189, 57, 246, 197, 191, 72, 235, 244, 190, 9, 227, 145, 189, 113, 14, 169, 188, 234, 147, 3, 62, 136, 55, 1, 62, 202, 149, 103, 61, 246, 26, 107, 61, 51, 245, 135, 61, 23, 57, 81, 60, 125, 153, 163, 188, 65, 204, 99, 61, 87, 101, 100, 61, 236, 84, 71, 63, 206, 143, 18, 63, 95, 1, 213, 62, 140, 66, 51, 62, 30, 123, 176, 60, 239, 124, 168, 189, 136, 155, 246, 189, 113, 224, 6, 190, 52, 123, 223, 189, 140, 163, 40, 189, 109, 136, 252, 188, 230, 173, 41, 60, 191, 212, 146, 188, 149, 116, 207, 63, 201, 191, 103, 63, 72, 154, 233, 62, 198, 13, 222, 61, 152, 228, 71, 190, 90, 164, 159, 190, 146, 199, 112, 190, 155, 222, 75, 190, 254, 49, 22, 190, 183, 121, 252, 188, 118, 124, 62, 61, 98, 176, 64, 188, 194, 12, 128, 189, 70, 169, 141, 191, 164, 34, 194, 62, 110, 138, 19, 63, 31, 244, 219, 62, 17, 2, 191, 62, 11, 26, 64, 62, 203, 227, 65, 61, 88, 17, 75, 185, 121, 139, 167, 189, 81, 152, 153, 189, 153, 85, 2, 189, 209, 192, 149, 189, 29, 148, 69, 189, 229, 203, 29, 63, 19, 31, 203, 62, 138, 182, 127, 62, 131, 56, 245, 61, 82, 131, 4, 60, 74, 157, 110, 189, 29, 77, 130, 189, 106, 110, 51, 189, 193, 203, 97, 189, 4, 95, 129, 58, 101, 24, 74, 60, 57, 115, 26, 59, 123, 187, 30, 60, 9, 167, 157, 60, 206, 163, 78, 190, 226, 90, 163, 190, 178, 212, 150, 190, 56, 175, 89, 190, 54, 47, 24, 190, 160, 44, 58, 189, 139, 207, 76, 188, 251, 139, 16, 61, 5, 166, 218, 61, 210, 9, 4, 62, 47, 220, 252, 61, 212, 243, 135, 61, 31, 220, 115, 191, 67, 74, 192, 190, 43, 207, 128, 188, 205, 60, 228, 188, 64, 177, 224, 61, 212, 107, 208, 61, 45, 200, 45, 60, 45, 70, 137, 61, 83, 29, 16, 61, 187, 162, 146, 58, 193, 47, 17, 61, 138, 209, 49, 60, 252, 1, 86, 188, 157, 160, 219, 188, 129, 19, 140, 61, 10, 238, 141, 61, 180, 122, 135, 61, 91, 93, 76, 61, 123, 191, 226, 60, 141, 95, 177, 187, 80, 131, 198, 188, 61, 183, 193, 188, 125, 207, 174, 188, 176, 205, 107, 188, 239, 204, 198, 186, 188, 207, 35, 188, 87, 62, 25, 61, 59, 96, 15, 61, 124, 247, 91, 60, 55, 248, 95, 60, 239, 218, 152, 60, 251, 204, 2, 61, 110, 13, 229, 60, 58, 246, 249, 187, 231, 18, 183, 188, 152, 236, 16, 189, 155, 74, 243, 187, 21, 109, 194, 60, 206, 36, 58, 61, 190, 74, 45, 191, 132, 102, 166, 190, 36, 228, 78, 189, 161, 65, 159, 189, 197, 238, 56, 61, 68, 62, 94, 61, 219, 183, 99, 60, 53, 4, 49, 61, 79, 250, 195, 60, 193, 145, 225, 187, 218, 60, 0, 61, 126, 48, 53, 59, 19, 103, 245, 59, 159, 132, 111, 190, 55, 191, 247, 189, 34, 4, 169, 189, 10, 48, 243, 188, 16, 227, 138, 58, 224, 79, 182, 59, 242, 189, 5, 59, 111, 212, 87, 60, 100, 1, 238, 60, 80, 73, 11, 61, 159, 214, 26, 61, 153, 241, 54, 60, 115, 88, 250, 57, 229, 5, 7, 62, 193, 114, 212, 61, 113, 160, 152, 61, 127, 101, 177, 61, 129, 170, 182, 61, 28, 132, 146, 61, 204, 145, 57, 61, 78, 179, 105, 60, 255, 178, 65, 188, 35, 216, 8, 189, 176, 113, 143, 189, 206, 4, 174, 189, 175, 26, 180, 189, 136, 196, 111, 191, 199, 34, 188, 190, 195, 3, 114, 189, 108, 139, 92, 189, 51, 224, 147, 61, 21, 143, 155, 61, 54, 179, 209, 60, 112, 221, 68, 61, 108, 39, 72, 60, 128, 197, 28, 189, 204, 99, 226, 186, 99, 116, 63, 188, 159, 106, 130, 58, 42, 209, 206, 189, 6, 138, 109, 60, 244, 211, 195, 60, 132, 182, 4, 61, 74, 104, 9, 61, 43, 145, 146, 60, 83, 191, 17, 60, 116, 75, 1, 60, 192, 12, 92, 187, 135, 94, 212, 188, 232, 241, 45, 189, 196, 18, 167, 188, 76, 113, 241, 187, 152, 65, 185, 188, 162, 247, 42, 188, 36, 115, 118, 187, 40, 135, 31, 189, 115, 41, 112, 189, 25, 71, 135, 189, 92, 75, 54, 189, 80, 70, 51, 188, 226, 246, 81, 186, 225, 0, 106, 60, 142, 47, 2, 61, 23, 26, 49, 61, 242, 216, 52, 61, 57, 67, 68, 191, 173, 71, 176, 190, 93, 70, 20, 189, 247, 148, 18, 189, 42, 0, 171, 61, 141, 88, 99, 61, 107, 202, 227, 58, 107, 136, 222, 60, 134, 154, 155, 187, 103, 4, 161, 188, 129, 118, 169, 60, 84, 73, 222, 187, 175, 168, 9, 60, 91, 193, 69, 190, 17, 142, 155, 189, 83, 143, 89, 189, 45, 181, 184, 189, 146, 120, 211, 189, 148, 158, 194, 189, 97, 239, 52, 189, 36, 15, 177, 188, 52, 104, 108, 188, 136, 97, 56, 60, 110, 171, 73, 61, 67, 110, 128, 61, 50, 200, 140, 61, 2, 72, 142, 189, 113, 99, 148, 189, 188, 245, 152, 189, 60, 26, 71, 189, 172, 113, 32, 189, 96, 38, 109, 188, 135, 94, 64, 59, 116, 165, 30, 60, 52, 126, 184, 60, 92, 103, 53, 61, 16, 46, 58, 61, 151, 0, 202, 58, 227, 4, 152, 188, 58, 236, 234, 191, 243, 255, 246, 190, 228, 52, 16, 190, 133, 0, 243, 188, 38, 91, 192, 61, 212, 4, 252, 61, 37, 157, 248, 60, 202, 18, 157, 61, 218, 33, 129, 60, 89, 185, 152, 61, 239, 20, 244, 60, 116, 5, 147, 61, 58, 140, 232, 61, 201, 63, 254, 189, 60, 202, 196, 185, 195, 208, 19, 188, 123, 117, 190, 188, 170, 28, 42, 189, 66, 236, 198, 188, 244, 210, 10, 188, 211, 18, 199, 60, 110, 197, 33, 61, 200, 129, 68, 61, 7, 110, 79, 61, 108, 221, 199, 60, 184, 133, 128, 60, 92, 72, 138, 61, 73, 37, 107, 61, 119, 245, 20, 61, 220, 245, 180, 60, 236, 100, 145, 188, 218, 30, 134, 188, 224, 213, 228, 60, 107, 43, 187, 60, 80, 8, 63, 188, 32, 115, 165, 188, 33, 43, 228, 60, 175, 211, 15, 188, 54, 10, 38, 188, 8, 40, 138, 191, 128, 83, 81, 190, 192, 14, 161, 190, 89, 155, 69, 190, 16, 243, 15, 189, 91, 222, 49, 61, 143, 27, 153, 61, 39, 232, 216, 61, 76, 182, 178, 61, 15, 154, 210, 60, 51, 204, 22, 61, 230, 15, 142, 59, 55, 54, 159, 60, 163, 123, 165, 188, 102, 49, 178, 60, 205, 116, 34, 59, 65, 66, 2, 61, 179, 201, 197, 60, 210, 13, 234, 60, 112, 198, 20, 186, 201, 218, 40, 60, 34, 85, 72, 60, 52, 197, 123, 187, 47, 27, 247, 187, 113, 210, 67, 188, 76, 72, 221, 188, 197, 49, 48, 60, 157, 241, 147, 60, 133, 218, 0, 61, 14, 74, 137, 60, 106, 225, 13, 61, 239, 218, 64, 188, 44, 15, 130, 189, 136, 170, 114, 189, 167, 25, 232, 188, 181, 196, 200, 60, 179, 124, 54, 61, 39, 211, 97, 60, 121, 166, 197, 60, 232, 13, 228, 191, 171, 119, 215, 190, 32, 98, 1, 190, 107, 220, 72, 188, 73, 62, 117, 61, 86, 249, 134, 61, 128, 193, 151, 60, 43, 193, 31, 61, 188, 17, 196, 188, 190, 226, 224, 60, 205, 249, 75, 59, 122, 158, 82, 61, 168, 60, 188, 61, 168, 185, 219, 57, 102, 153, 105, 185, 30, 40, 30, 59, 134, 254, 213, 60, 28, 67, 2, 61, 197, 81, 178, 60, 213, 155, 104, 60, 201, 12, 60, 188, 11, 51, 19, 189, 83, 50, 22, 189, 234, 6, 37, 189, 135, 67, 176, 188, 240, 157, 128, 188, 219, 237, 7, 189, 210, 201, 210, 188, 246, 16, 129, 188, 101, 79, 181, 188, 231, 37, 196, 59, 193, 157, 132, 57, 170, 177, 214, 188, 242, 45, 206, 187, 116, 227, 106, 60, 199, 160, 25, 60, 102, 60, 216, 188, 5, 39, 97, 59, 211, 126, 220, 58, 104, 194, 108, 191, 27, 69, 25, 190, 125, 250, 135, 190, 73, 200, 32, 190, 14, 56, 65, 189, 174, 160, 123, 60, 180, 49, 156, 60, 2, 204, 6, 61, 171, 88, 250, 60, 83, 11, 22, 61, 7, 236, 137, 61, 143, 241, 182, 58, 155, 89, 247, 60, 156, 162, 235, 189, 101, 113, 138, 188, 89, 73, 95, 188, 226, 6, 153, 188, 139, 143, 146, 188, 234, 64, 105, 188, 219, 124, 137, 188, 126, 156, 224, 187, 234, 79, 154, 188, 88, 6, 129, 59, 198, 78, 4, 188, 107, 200, 89, 59, 3, 161, 26, 61, 177, 21, 49, 59, 213, 119, 19, 189, 17, 247, 11, 189, 118, 16, 194, 188, 135, 161, 189, 188, 221, 77, 55, 60, 18, 180, 135, 61, 227, 124, 134, 61, 205, 49, 202, 60, 61, 32, 14, 189, 229, 47, 124, 189, 200, 150, 201, 188, 27, 194, 142, 188, 4, 245, 232, 191, 214, 83, 199, 190, 235, 73, 25, 189, 163, 95, 67, 189, 24, 157, 195, 61, 120, 9, 164, 61, 252, 79, 244, 60, 129, 139, 142, 61, 87, 244, 197, 60, 27, 4, 142, 60, 78, 152, 143, 61, 106, 191, 235, 60, 21, 243, 148, 60, 251, 185, 4, 61, 242, 79, 81, 61, 221, 222, 28, 61, 156, 119, 85, 61, 195, 52, 0, 61, 44, 176, 2, 61, 32, 78, 207, 60, 204, 122, 41, 60, 216, 225, 254, 188, 206, 21, 47, 189, 113, 151, 27, 189, 152, 179, 40, 189, 157, 117, 32, 189, 194, 229, 124, 59, 60, 92, 155, 189, 205, 211, 66, 189, 30, 36, 130, 189, 236, 92, 244, 60, 169, 116, 122, 61, 111, 14, 102, 61, 160, 219, 134, 61, 185, 249, 75, 61, 165, 207, 105, 60, 26, 119, 12, 189, 34, 10, 38, 59, 186, 64, 19, 187, 16, 12, 227, 191, 6, 201, 189, 190, 42, 199, 25, 189, 207, 71, 46, 189, 224, 235, 203, 61, 55, 51, 161, 61, 30, 161, 132, 60, 229, 83, 217, 60, 63, 117, 133, 188, 151, 61, 219, 187, 205, 148, 62, 61, 171, 109, 24, 60, 195, 254, 179, 60, 26, 68, 208, 189, 170, 95, 10, 189, 108, 227, 0, 189, 244, 96, 3, 189, 233, 77, 0, 189, 16, 204, 14, 60, 11, 107, 22, 61, 79, 170, 128, 61, 101, 190, 73, 61, 59, 84, 55, 61, 220, 178, 78, 61, 81, 17, 254, 60, 216, 190, 208, 59, 69, 177, 97, 60, 143, 106, 157, 59, 129, 64, 131, 188, 24, 80, 13, 189, 105, 26, 118, 189, 229, 191, 151, 189, 11, 220, 79, 188, 75, 105, 57, 61, 20, 36, 103, 61, 99, 190, 115, 61, 71, 172, 243, 60, 184, 197, 6, 59, 176, 129, 2, 189, 108, 24, 216, 191, 254, 133, 154, 190, 212, 65, 75, 189, 154, 253, 153, 189, 149, 46, 43, 61, 239, 211, 143, 60, 106, 21, 128, 60, 142, 167, 86, 61, 75, 211, 118, 60, 238, 0, 40, 188, 246, 83, 169, 60, 225, 237, 63, 188, 83, 79, 167, 188, 104, 2, 244, 189, 175, 171, 70, 189, 96, 153, 249, 188, 32, 169, 209, 188, 202, 221, 152, 188, 150, 59, 208, 188, 145, 42, 214, 188, 182, 132, 30, 188, 60, 46, 90, 60, 227, 177, 7, 61, 76, 28, 251, 60, 215, 4, 255, 60, 57, 66, 236, 60, 12, 53, 103, 189, 228, 187, 52, 189, 183, 40, 133, 59, 33, 91, 155, 60, 236, 96, 48, 61, 214, 224, 239, 60, 224, 9, 110, 188, 228, 133, 77, 189, 65, 157, 27, 189, 247, 61, 94, 187, 134, 204, 210, 60, 196, 86, 25, 61, 197, 113, 73, 61, 26, 230, 245, 191, 115, 199, 207, 190, 24, 59, 167, 189, 172, 201, 157, 189, 38, 226, 154, 61, 87, 203, 24, 61, 212, 95, 199, 59, 152, 186, 65, 61, 196, 13, 147, 60, 36, 59, 109, 60, 92, 1, 163, 61, 195, 63, 40, 61, 212, 7, 210, 60, 220, 80, 205, 188, 63, 88, 28, 61, 235, 98, 7, 61, 47, 174, 142, 60, 207, 159, 234, 60, 203, 245, 136, 188, 122, 189, 20, 189, 32, 203, 137, 189, 122, 211, 104, 189, 201, 91, 60, 189, 171, 47, 7, 189, 119, 216, 181, 188, 226, 235, 9, 185, 14, 240, 254, 61, 254, 248, 157, 61, 167, 137, 138, 61, 139, 90, 113, 61, 60, 140, 202, 60, 190, 113, 100, 60, 32, 211, 162, 187, 49, 129, 80, 189, 234, 219, 143, 189, 0, 47, 144, 189, 152, 251, 108, 189, 88, 7, 83, 189, 42, 125, 143, 188, 203, 150, 65, 192, 243, 248, 59, 191, 100, 174, 33, 190, 15, 210, 107, 61, 226, 110, 109, 62, 33, 194, 26, 62, 159, 143, 240, 188, 117, 141, 197, 61, 8, 196, 153, 61, 183, 255, 57, 62, 29, 217, 237, 61, 212, 84, 15, 62, 170, 254, 87, 62, 123, 74, 79, 189, 214, 164, 243, 188, 106, 144, 5, 188, 84, 190, 223, 186, 129, 246, 50, 60, 193, 154, 66, 60, 122, 145, 83, 60, 205, 110, 83, 60, 90, 104, 57, 60, 186, 1, 81, 60, 59, 243, 99, 60, 117, 67, 249, 59, 49, 115, 67, 60, 244, 0, 224, 60, 146, 5, 10, 188, 1, 198, 130, 188, 51, 83, 125, 187, 39, 102, 254, 187, 110, 154, 82, 188, 79, 169, 7, 61, 61, 209, 170, 60, 15, 235, 38, 60, 5, 26, 245, 186, 154, 250, 172, 188, 199, 43, 137, 188, 210, 186, 44, 188, 124, 168, 56, 192, 208, 215, 144, 190, 6, 37, 176, 61, 58, 68, 29, 191, 146, 219, 219, 61, 5, 108, 120, 61, 60, 73, 201, 60, 159, 125, 68, 62, 88, 199, 156, 60, 77, 182, 55, 62, 216, 14, 161, 61, 216, 245, 69, 61, 125, 239, 203, 61, 223, 234, 183, 60, 228, 2, 35, 60, 86, 96, 190, 188, 46, 82, 196, 188, 163, 82, 178, 59, 96, 109, 223, 187, 10, 162, 149, 187, 56, 57, 180, 59, 134, 134, 68, 188, 75, 217, 119, 187, 149, 20, 2, 60, 245, 6, 158, 59, 105, 87, 16, 60, 50, 240, 136, 60, 231, 116, 103, 58, 103, 81, 185, 187, 140, 154, 151, 56, 171, 41, 180, 186, 179, 4, 5, 56, 17, 43, 194, 187, 16, 28, 20, 188, 133, 2, 117, 188, 26, 17, 236, 56, 85, 177, 196, 187, 57, 114, 65, 187, 74, 7, 235, 57, 206, 59, 33, 192, 20, 4, 39, 191, 251, 96, 77, 190, 186, 102, 118, 189, 158, 180, 75, 62, 200, 10, 1, 62, 59, 254, 142, 61, 71, 112, 11, 62, 18, 239, 195, 60, 67, 254, 4, 62, 230, 99, 84, 60, 235, 91, 148, 61, 199, 227, 36, 62, 152, 146, 139, 189, 206, 84, 118, 58, 76, 171, 248, 58, 222, 241, 13, 60, 123, 182, 133, 59, 92, 52, 112, 186, 29, 250, 4, 59, 62, 244, 82, 187, 218, 182, 176, 187, 138, 66, 236, 187, 124, 59, 27, 188, 29, 210, 115, 187, 172, 82, 45, 58, 116, 60, 50, 61, 58, 86, 47, 61, 86, 191, 75, 61, 217, 37, 242, 60, 129, 251, 71, 61, 60, 87, 32, 59, 92, 164, 68, 189, 143, 94, 43, 189, 155, 183, 13, 189, 86, 2, 43, 189, 13, 227, 28, 189, 226, 70, 205, 188, 120, 61, 188, 186, 140, 241, 23, 192, 56, 162, 8, 191, 181, 26, 227, 189, 77, 190, 159, 188, 83, 189, 91, 62, 114, 42, 246, 61, 137, 147, 12, 60, 120, 229, 186, 61, 233, 198, 0, 188, 148, 250, 130, 61, 37, 168, 65, 189, 93, 73, 2, 60, 100, 239, 253, 61, 158, 193, 217, 187, 30, 49, 30, 61, 16, 239, 85, 60, 243, 251, 203, 188, 227, 80, 249, 187, 99, 49, 142, 188, 206, 219, 180, 188, 8, 28, 3, 60, 42, 148, 135, 59, 142, 244, 193, 187, 28, 1, 145, 187, 59, 133, 45, 188, 1, 220, 11, 188, 199, 86, 6, 189, 232, 215, 176, 189, 171, 168, 106, 189, 228, 182, 150, 189, 225, 236, 162, 189, 104, 20, 167, 186, 209, 62, 129, 61, 214, 99, 61, 61, 150, 41, 113, 61, 239, 6, 143, 61, 12, 124, 201, 61, 32, 122, 143, 61, 20, 15, 46, 60, 246, 174, 1, 192, 137, 34, 11, 191, 151, 185, 68, 189, 199, 245, 10, 190, 21, 167, 46, 62, 18, 204, 75, 61, 187, 134, 148, 61, 103, 170, 127, 61, 160, 33, 74, 61, 20, 138, 167, 59, 98, 158, 179, 59, 28, 230, 46, 189, 204, 26, 214, 61, 251, 121, 22, 63, 104, 129, 133, 190, 197, 25, 166, 62, 61, 200, 116, 189, 230, 63, 164, 61, 183, 142, 140, 59, 101, 47, 29, 60, 116, 249, 51, 189, 103, 122, 151, 188, 186, 87, 235, 59, 200, 78, 137, 188, 50, 24, 246, 187, 15, 179, 34, 61, 59, 177, 69, 63, 252, 118, 91, 62, 144, 235, 108, 62, 56, 169, 131, 62, 49, 34, 155, 189, 141, 177, 151, 61, 241, 102, 230, 189, 64, 218, 230, 189, 40, 132, 242, 188, 236, 237, 15, 60, 36, 90, 142, 61, 81, 57, 16, 61, 9, 254, 8, 189, 206, 152, 206, 191, 66, 167, 201, 190, 251, 192, 224, 188, 125, 225, 211, 188, 223, 239, 176, 61, 119, 176, 136, 61, 158, 230, 147, 60, 241, 246, 153, 61, 87, 115, 15, 60, 93, 119, 206, 60, 9, 238, 59, 61, 61, 134, 70, 61, 142, 152, 31, 61, 157, 228, 80, 63, 228, 247, 198, 190, 245, 242, 246, 62, 19, 163, 128, 190]).concat([20, 116, 224, 61, 149, 40, 156, 189, 100, 89, 15, 189, 163, 166, 0, 61, 36, 76, 5, 190, 219, 99, 214, 61, 162, 210, 39, 190, 199, 155, 94, 61, 113, 179, 133, 189, 112, 110, 92, 63, 160, 201, 212, 190, 136, 185, 225, 62, 230, 250, 49, 190, 225, 35, 183, 61, 154, 99, 231, 60, 37, 28, 167, 189, 68, 131, 109, 61, 84, 200, 182, 189, 38, 115, 154, 61, 157, 23, 184, 189, 74, 208, 184, 60, 228, 119, 254, 188, 240, 79, 141, 191, 50, 214, 49, 191, 210, 107, 112, 62, 51, 190, 141, 190, 146, 214, 54, 62, 212, 206, 160, 61, 101, 245, 20, 189, 108, 198, 205, 61, 119, 191, 143, 189, 203, 114, 213, 61, 90, 62, 212, 189, 230, 223, 196, 61, 88, 187, 74, 188, 153, 163, 71, 63, 21, 73, 176, 190, 4, 129, 142, 62, 242, 204, 14, 190, 147, 137, 89, 60, 243, 122, 184, 60, 17, 233, 158, 189, 25, 203, 190, 61, 244, 214, 6, 190, 120, 71, 94, 61, 72, 254, 141, 189, 88, 137, 161, 59, 58, 220, 7, 60, 160, 167, 180, 59, 37, 157, 231, 62, 230, 66, 178, 189, 104, 27, 194, 62, 30, 52, 133, 189, 65, 181, 17, 61, 5, 13, 125, 60, 241, 233, 77, 189, 219, 10, 12, 61, 101, 64, 49, 190, 177, 32, 228, 61, 170, 192, 199, 189, 105, 156, 243, 59, 196, 232, 5, 192, 105, 212, 209, 190, 157, 131, 78, 190, 217, 184, 214, 189, 52, 61, 248, 61, 31, 101, 121, 61, 30, 123, 196, 60, 96, 17, 154, 61, 149, 207, 187, 59, 225, 79, 243, 60, 169, 238, 67, 186, 121, 17, 164, 60, 85, 181, 187, 61, 172, 40, 30, 63, 26, 28, 145, 190, 139, 108, 201, 62, 199, 241, 55, 190, 20, 92, 55, 62, 115, 214, 51, 190, 89, 125, 243, 61, 160, 123, 215, 189, 79, 78, 244, 59, 48, 237, 178, 189, 14, 235, 94, 189, 216, 48, 207, 189, 201, 162, 88, 188, 35, 74, 112, 63, 66, 251, 1, 191, 225, 129, 30, 63, 17, 221, 131, 190, 246, 130, 33, 62, 37, 29, 228, 189, 87, 43, 179, 60, 223, 72, 26, 190, 230, 17, 29, 189, 166, 238, 121, 60, 222, 252, 46, 188, 86, 200, 113, 61, 75, 80, 184, 188, 251, 126, 106, 191, 83, 85, 184, 190, 39, 155, 29, 189, 173, 106, 21, 189, 204, 222, 176, 61, 68, 25, 102, 61, 53, 135, 6, 187, 184, 139, 246, 60, 13, 226, 89, 60, 221, 23, 178, 188, 11, 242, 61, 60, 219, 65, 153, 187, 242, 176, 146, 59, 238, 223, 111, 189, 121, 218, 190, 60, 199, 114, 143, 61, 197, 42, 205, 61, 3, 128, 228, 61, 57, 228, 200, 61, 117, 89, 55, 61, 197, 227, 53, 188, 16, 223, 32, 189, 135, 77, 114, 189, 204, 70, 71, 189, 195, 5, 30, 189, 209, 215, 92, 189, 91, 122, 76, 61, 41, 11, 12, 61, 233, 43, 142, 188, 97, 38, 134, 189, 112, 138, 172, 189, 34, 6, 33, 189, 94, 1, 25, 188, 19, 207, 11, 60, 184, 49, 93, 59, 89, 215, 227, 60, 53, 100, 43, 61, 76, 234, 7, 61, 25, 178, 43, 61, 181, 131, 101, 191, 220, 103, 158, 190, 228, 250, 175, 188, 168, 144, 118, 189, 3, 197, 88, 61, 89, 236, 198, 60, 250, 41, 183, 59, 150, 133, 42, 61, 188, 67, 27, 187, 32, 153, 165, 188, 222, 21, 2, 61, 177, 205, 14, 188, 14, 241, 135, 60, 225, 174, 213, 189, 198, 201, 86, 188, 162, 73, 194, 188, 26, 246, 182, 188, 217, 216, 140, 188, 14, 44, 10, 188, 124, 181, 59, 60, 87, 182, 254, 60, 40, 160, 214, 60, 112, 117, 201, 60, 7, 45, 184, 60, 182, 67, 94, 60, 110, 247, 172, 59, 37, 251, 126, 189, 224, 138, 136, 189, 29, 1, 72, 189, 130, 247, 82, 188, 193, 23, 136, 60, 91, 51, 143, 60, 141, 134, 184, 60, 191, 182, 233, 60, 77, 127, 74, 61, 64, 182, 53, 61, 232, 114, 6, 61, 104, 27, 182, 60, 161, 122, 126, 187, 184, 154, 93, 191, 146, 162, 158, 190, 179, 52, 177, 188, 32, 158, 110, 189, 141, 23, 106, 61, 151, 78, 205, 60, 133, 111, 66, 188, 40, 205, 73, 60, 225, 72, 192, 188, 175, 219, 40, 189, 96, 159, 248, 60, 139, 184, 99, 188, 157, 103, 102, 186, 230, 231, 187, 189, 237, 189, 58, 189, 134, 225, 102, 189, 123, 51, 137, 189, 152, 156, 160, 189, 51, 37, 87, 189, 194, 210, 27, 189, 60, 161, 83, 188, 68, 32, 74, 59, 146, 74, 232, 60, 194, 67, 43, 61, 154, 4, 39, 61, 178, 91, 93, 61, 144, 84, 40, 188, 33, 57, 241, 59, 201, 190, 140, 60, 21, 130, 27, 188, 52, 33, 126, 188, 192, 236, 191, 188, 38, 56, 172, 188, 20, 232, 192, 188, 127, 58, 191, 188, 160, 220, 48, 188, 212, 47, 219, 188, 178, 234, 153, 187, 43, 95, 177, 60, 66, 126, 109, 191, 149, 48, 202, 190, 48, 20, 213, 189, 91, 65, 3, 190, 42, 69, 216, 187, 142, 176, 102, 188, 192, 16, 215, 187, 202, 45, 130, 61, 89, 17, 50, 61, 221, 124, 26, 61, 38, 99, 166, 61, 149, 100, 156, 60, 6, 105, 27, 61, 175, 198, 0, 190, 174, 134, 118, 189, 31, 169, 162, 188, 18, 10, 211, 60, 46, 229, 64, 61, 147, 242, 216, 60, 43, 190, 26, 60, 101, 173, 197, 188, 183, 167, 166, 186, 84, 79, 50, 188, 1, 13, 208, 188, 239, 184, 149, 188, 191, 219, 72, 188, 237, 125, 35, 62, 14, 88, 35, 62, 166, 91, 13, 62, 54, 185, 253, 61, 255, 46, 164, 61, 28, 220, 26, 61, 127, 84, 161, 187, 82, 111, 32, 189, 208, 97, 149, 189, 96, 223, 221, 189, 39, 54, 175, 189, 242, 25, 146, 189, 68, 166, 154, 189, 191, 91, 86, 190, 64, 8, 10, 190, 112, 251, 130, 190, 31, 47, 171, 190, 168, 70, 24, 189, 126, 168, 227, 61, 214, 228, 15, 62, 117, 56, 98, 62, 158, 176, 34, 62, 34, 247, 242, 61, 83, 99, 58, 189, 209, 179, 226, 189, 4, 170, 17, 188, 214, 22, 19, 191, 47, 248, 152, 190, 100, 241, 202, 60, 120, 205, 23, 62, 240, 167, 214, 61, 95, 189, 204, 60, 141, 117, 197, 188, 53, 11, 67, 189, 133, 165, 86, 189, 24, 234, 95, 187, 137, 42, 40, 61, 159, 146, 131, 61, 70, 193, 148, 61, 122, 73, 182, 61, 156, 54, 95, 61, 29, 240, 240, 186, 3, 97, 71, 186, 101, 56, 167, 60, 74, 194, 191, 60, 170, 50, 28, 189, 215, 42, 22, 189, 231, 179, 199, 188, 236, 79, 227, 59, 236, 143, 149, 60, 129, 240, 25, 60, 19, 190, 42, 59, 34, 3, 73, 191, 86, 112, 180, 190, 85, 153, 27, 190, 138, 56, 173, 188, 138, 122, 92, 188, 171, 167, 139, 61, 212, 228, 157, 188, 166, 0, 129, 60, 226, 177, 1, 188, 10, 145, 28, 61, 242, 236, 237, 60, 192, 248, 169, 61, 125, 104, 56, 61, 20, 157, 37, 190, 175, 135, 15, 60, 96, 83, 240, 60, 220, 66, 178, 188, 153, 140, 37, 189, 163, 254, 45, 189, 86, 219, 166, 188, 12, 87, 57, 61, 251, 206, 105, 61, 159, 76, 34, 61, 48, 147, 242, 60, 61, 133, 131, 61, 71, 190, 146, 61, 188, 254, 147, 61, 137, 220, 15, 61, 101, 203, 161, 188, 62, 134, 17, 189, 129, 253, 181, 60, 230, 132, 114, 60, 141, 27, 73, 61, 122, 91, 142, 61, 148, 105, 122, 61, 170, 90, 106, 61, 2, 18, 66, 60, 206, 85, 136, 188, 122, 244, 18, 61, 5, 37, 156, 63, 65, 76, 227, 62, 240, 103, 209, 190, 134, 211, 246, 190, 42, 153, 157, 189, 10, 47, 48, 62, 45, 13, 191, 61, 130, 210, 42, 62, 194, 242, 47, 62, 250, 106, 159, 61, 94, 180, 244, 188, 207, 71, 86, 190, 216, 209, 69, 190, 159, 34, 137, 191, 16, 67, 148, 190, 111, 16, 253, 61, 148, 132, 210, 189, 108, 32, 244, 188, 242, 156, 168, 59, 253, 110, 160, 61, 51, 138, 151, 61, 193, 147, 160, 60, 21, 148, 205, 61, 126, 30, 132, 189, 9, 225, 110, 60, 60, 122, 238, 61, 208, 29, 244, 61, 238, 114, 109, 189, 93, 182, 29, 189, 141, 181, 170, 61, 97, 33, 231, 188, 136, 29, 34, 189, 195, 46, 177, 187, 228, 146, 3, 60, 253, 68, 249, 59, 120, 70, 73, 189, 64, 20, 140, 60, 163, 48, 246, 60, 31, 171, 149, 59, 227, 189, 96, 191, 198, 130, 200, 190, 70, 74, 67, 190, 186, 23, 67, 189, 39, 221, 65, 60, 24, 62, 126, 61, 140, 11, 216, 59, 215, 0, 30, 61, 137, 126, 140, 60, 252, 39, 32, 61, 145, 176, 29, 59, 73, 252, 80, 61, 247, 158, 86, 61, 196, 116, 2, 190, 59, 83, 225, 188, 189, 170, 150, 188, 68, 190, 76, 60, 75, 141, 17, 61, 74, 124, 209, 60, 175, 57, 192, 58, 199, 61, 229, 188, 122, 252, 9, 189, 134, 3, 55, 189, 71, 171, 1, 189, 83, 178, 54, 189, 225, 205, 45, 189, 83, 26, 142, 188, 84, 78, 13, 189, 13, 207, 85, 60, 87, 54, 31, 61, 158, 43, 0, 187, 203, 123, 173, 58, 134, 101, 213, 188, 236, 33, 67, 189, 42, 29, 116, 188, 30, 131, 252, 188, 41, 109, 155, 188, 16, 63, 167, 187, 31, 26, 216, 188, 115, 148, 238, 191, 31, 203, 216, 190, 191, 224, 108, 189, 20, 85, 178, 189, 187, 65, 66, 61, 61, 45, 142, 61, 171, 16, 109, 60, 186, 27, 158, 61, 116, 100, 146, 61, 92, 242, 247, 60, 103, 210, 138, 61, 176, 55, 161, 60, 10, 232, 32, 61, 91, 209, 231, 58, 156, 14, 241, 60, 176, 9, 226, 59, 65, 246, 193, 188, 27, 112, 89, 187, 123, 14, 92, 188, 140, 75, 151, 188, 69, 255, 190, 188, 148, 133, 126, 60, 153, 225, 221, 60, 180, 93, 30, 61, 156, 36, 5, 61, 99, 222, 205, 187, 39, 42, 250, 61, 153, 18, 191, 61, 101, 172, 245, 60, 53, 134, 64, 61, 57, 139, 126, 61, 117, 239, 3, 61, 199, 88, 177, 58, 188, 137, 87, 189, 213, 156, 134, 189, 98, 173, 3, 189, 39, 159, 7, 189, 190, 241, 1, 189, 3, 238, 7, 189, 226, 88, 215, 191, 216, 106, 174, 190, 174, 246, 21, 188, 134, 108, 179, 188, 232, 1, 240, 61, 55, 5, 177, 61, 177, 60, 177, 58, 130, 152, 30, 60, 126, 251, 153, 188, 111, 111, 16, 189, 249, 23, 170, 60, 169, 147, 246, 59, 170, 94, 133, 60, 23, 231, 173, 186, 255, 78, 143, 61, 74, 180, 87, 61, 133, 149, 6, 61, 83, 5, 242, 60, 223, 229, 37, 60, 133, 131, 86, 58, 149, 151, 201, 59, 16, 236, 172, 188, 188, 103, 14, 189, 48, 165, 40, 189, 170, 70, 17, 189, 33, 241, 248, 188, 20, 71, 132, 188, 203, 217, 216, 187, 49, 78, 154, 187, 242, 169, 141, 187, 143, 52, 118, 188, 55, 142, 76, 187, 167, 48, 36, 60, 158, 212, 62, 61, 76, 225, 50, 61, 226, 228, 26, 59, 167, 62, 66, 188, 97, 180, 205, 188, 159, 103, 55, 188, 69, 127, 219, 191, 142, 221, 176, 190, 224, 132, 64, 189, 189, 202, 182, 189, 10, 207, 32, 61, 133, 28, 188, 60, 232, 104, 21, 189, 229, 49, 21, 188, 176, 124, 212, 187, 44, 10, 77, 60, 248, 233, 81, 61, 105, 83, 154, 59, 187, 114, 41, 60, 13, 64, 232, 189, 51, 67, 225, 188, 52, 60, 175, 188, 24, 7, 105, 58, 170, 166, 50, 188, 2, 192, 202, 59, 99, 123, 227, 59, 225, 142, 47, 59, 243, 7, 36, 60, 139, 79, 227, 59, 246, 107, 107, 188, 243, 30, 93, 188, 156, 59, 95, 58, 108, 72, 224, 189, 14, 125, 210, 189, 75, 14, 59, 189, 210, 147, 162, 188, 19, 4, 89, 60, 194, 208, 12, 61, 71, 214, 96, 61, 246, 211, 80, 61, 143, 61, 99, 61, 225, 84, 6, 61, 43, 153, 190, 60, 126, 77, 32, 60, 184, 244, 144, 60, 96, 212, 230, 191, 105, 151, 206, 190, 78, 39, 10, 189, 134, 20, 50, 189, 176, 40, 213, 61, 121, 177, 202, 61, 175, 113, 210, 60, 251, 11, 95, 61, 220, 235, 185, 60, 187, 205, 255, 188, 155, 153, 88, 60, 144, 21, 13, 59, 52, 123, 24, 60, 78, 251, 248, 189, 177, 243, 171, 189, 2, 248, 129, 189, 245, 120, 184, 188, 209, 41, 185, 187, 223, 174, 183, 187, 152, 166, 142, 187, 120, 151, 113, 60, 168, 251, 16, 61, 154, 203, 220, 60, 118, 233, 5, 61, 28, 195, 213, 60, 174, 60, 208, 60, 12, 178, 220, 61, 234, 139, 55, 61, 242, 95, 251, 59, 229, 164, 116, 188, 117, 106, 101, 189, 241, 186, 162, 189, 252, 170, 200, 189, 202, 146, 172, 189, 163, 7, 43, 189, 222, 125, 239, 187, 163, 105, 134, 60, 6, 193, 72, 61, 191, 227, 233, 59, 5, 167, 247, 191, 33, 72, 234, 190, 70, 116, 178, 61, 90, 175, 207, 189, 73, 104, 75, 61, 199, 199, 153, 61, 109, 54, 142, 61, 104, 135, 198, 61, 97, 198, 36, 189, 135, 55, 136, 188, 182, 216, 203, 60, 158, 75, 252, 61, 64, 105, 1, 61, 30, 180, 155, 186, 123, 115, 212, 60, 144, 187, 250, 188, 38, 163, 155, 188, 135, 242, 41, 188, 12, 170, 184, 188, 85, 35, 186, 60, 150, 148, 78, 61, 172, 237, 216, 60, 55, 43, 233, 60, 230, 40, 96, 60, 199, 213, 101, 60, 72, 130, 84, 60, 6, 196, 196, 61, 213, 0, 139, 61, 198, 38, 121, 61, 70, 156, 111, 187, 116, 56, 139, 187, 143, 251, 14, 61, 74, 155, 110, 61, 196, 78, 43, 61, 248, 113, 37, 187, 231, 182, 4, 59, 232, 44, 29, 189, 11, 218, 177, 189, 193, 146, 238, 187, 246, 27, 207, 191, 78, 125, 245, 190, 21, 11, 164, 61, 222, 32, 155, 189, 167, 87, 29, 62, 116, 45, 166, 61, 105, 84, 143, 61, 71, 210, 117, 61, 108, 122, 224, 60, 112, 2, 132, 187, 115, 181, 50, 189, 77, 152, 109, 189, 26, 12, 22, 188, 93, 149, 184, 61, 178, 248, 85, 188, 91, 54, 222, 188, 141, 180, 155, 187, 78, 193, 228, 187, 192, 102, 166, 60, 135, 65, 68, 188, 12, 145, 79, 188, 114, 91, 37, 61, 70, 40, 211, 59, 129, 39, 131, 188, 22, 229, 138, 60, 156, 5, 201, 187, 65, 213, 230, 188, 37, 156, 110, 60, 23, 217, 10, 189, 79, 88, 21, 59, 250, 8, 219, 189, 208, 199, 64, 189, 243, 252, 219, 188, 142, 203, 208, 60, 223, 145, 253, 61, 19, 178, 205, 61, 74, 96, 160, 61, 116, 119, 163, 61, 191, 183, 8, 61, 2, 231, 236, 191, 202, 228, 195, 190, 136, 120, 144, 61, 1, 199, 25, 190, 108, 121, 104, 60, 200, 34, 210, 61, 189, 91, 13, 62, 211, 221, 27, 62, 143, 185, 145, 188, 84, 164, 21, 189, 223, 232, 51, 189, 209, 215, 162, 61, 211, 96, 61, 61, 230, 140, 146, 189, 38, 66, 227, 187, 77, 150, 164, 59, 209, 133, 239, 59, 50, 98, 118, 58, 130, 140, 52, 60, 21, 255, 72, 187, 16, 236, 221, 188, 197, 190, 14, 59, 110, 41, 233, 188, 33, 157, 4, 189, 160, 187, 134, 188, 86, 11, 12, 188, 64, 182, 23, 189, 149, 124, 119, 189, 234, 99, 0, 189, 239, 145, 220, 60, 106, 202, 245, 60, 94, 215, 32, 189, 236, 179, 138, 189, 49, 66, 90, 189, 53, 246, 42, 188, 141, 46, 73, 187, 221, 241, 60, 61, 30, 219, 93, 61, 176, 186, 208, 59, 97, 189, 191, 191, 181, 232, 23, 191, 53, 192, 205, 188, 211, 121, 168, 61, 109, 31, 51, 188, 112, 110, 193, 60, 180, 57, 127, 61, 152, 132, 166, 61, 251, 198, 175, 61, 122, 198, 2, 59, 9, 52, 61, 60, 236, 147, 150, 188, 12, 178, 121, 59, 1, 115, 191, 189, 214, 124, 107, 60, 62, 66, 129, 60, 146, 239, 88, 60, 62, 0, 242, 188, 249, 22, 67, 60, 253, 13, 156, 60, 112, 213, 41, 60, 201, 57, 179, 188, 125, 26, 160, 188, 158, 26, 102, 187, 154, 165, 122, 188, 247, 64, 143, 59, 12, 214, 16, 60, 11, 56, 161, 60, 21, 172, 121, 187, 123, 11, 193, 188, 125, 137, 242, 60, 207, 176, 86, 61, 228, 218, 1, 61, 114, 39, 163, 186, 209, 236, 32, 189, 241, 28, 138, 189, 245, 48, 148, 189, 148, 74, 200, 188, 21, 222, 176, 188, 9, 227, 185, 191, 152, 85, 28, 191, 138, 88, 98, 190, 231, 54, 193, 189, 117, 42, 80, 62, 183, 249, 26, 62, 118, 79, 146, 61, 17, 251, 16, 62, 68, 113, 95, 61, 46, 61, 251, 61, 209, 136, 212, 59, 46, 114, 243, 60, 192, 31, 205, 61, 182, 148, 61, 190, 5, 114, 102, 189, 52, 15, 199, 58, 99, 249, 27, 61, 145, 208, 168, 58, 1, 168, 144, 188, 86, 216, 92, 188, 101, 100, 104, 188, 60, 251, 198, 188, 165, 109, 59, 188, 67, 114, 193, 187, 166, 114, 116, 61, 220, 94, 142, 61, 62, 45, 41, 62, 133, 218, 35, 62, 238, 226, 241, 61, 136, 2, 78, 61, 73, 181, 51, 189, 64, 64, 173, 189, 246, 68, 141, 189, 251, 193, 126, 189, 42, 213, 55, 189, 91, 120, 215, 188, 153, 250, 33, 61, 227, 216, 195, 60, 142, 59, 21, 61, 0, 25, 190, 191, 230, 167, 14, 191, 57, 53, 11, 190, 48, 6, 43, 188, 100, 192, 55, 62, 216, 226, 134, 61, 14, 174, 30, 185, 125, 219, 168, 61, 151, 193, 219, 187, 118, 1, 135, 61, 61, 42, 183, 58, 199, 150, 114, 61, 243, 88, 24, 62, 219, 80, 95, 189, 189, 10, 27, 61, 232, 226, 112, 60, 68, 79, 14, 188, 52, 147, 129, 59, 141, 16, 221, 187, 218, 174, 40, 59, 25, 51, 221, 60, 137, 241, 115, 60, 209, 3, 142, 188, 83, 225, 137, 187, 121, 66, 168, 188, 137, 170, 78, 189, 39, 136, 219, 60, 161, 105, 175, 189, 173, 148, 80, 189, 230, 73, 231, 188, 52, 174, 105, 61, 243, 67, 205, 61, 243, 10, 145, 61, 28, 44, 13, 61, 205, 80, 102, 61, 252, 34, 196, 61, 247, 62, 57, 61, 117, 22, 0, 61, 13, 185, 43, 188, 189, 227, 178, 191, 72, 75, 13, 191, 32, 32, 30, 190, 19, 215, 197, 189, 176, 57, 65, 62, 209, 64, 225, 61, 202, 205, 8, 61, 218, 79, 175, 61, 176, 162, 86, 60, 155, 254, 74, 61, 96, 118, 49, 189, 60, 135, 1, 59, 190, 241, 195, 61, 72, 106, 160, 189, 111, 157, 90, 59, 18, 205, 49, 60, 197, 244, 227, 186, 13, 219, 214, 187, 32, 103, 137, 188, 7, 154, 146, 188, 51, 161, 169, 188, 173, 247, 38, 189, 65, 124, 73, 186, 124, 236, 13, 61, 55, 200, 53, 186, 222, 43, 183, 60, 7, 116, 209, 189, 50, 70, 96, 189, 138, 77, 221, 189, 227, 232, 128, 189, 160, 253, 126, 189, 172, 34, 118, 189, 0, 182, 117, 189, 235, 16, 11, 60, 46, 97, 197, 60, 88, 196, 225, 60, 32, 11, 15, 61, 202, 52, 247, 60, 36, 235, 49, 59, 249, 195, 194, 191, 150, 230, 34, 191, 96, 223, 78, 190, 87, 128, 171, 189, 240, 184, 35, 62, 64, 69, 149, 61, 31, 43, 166, 188, 137, 7, 158, 61, 88, 185, 33, 61, 67, 202, 3, 62, 167, 4, 129, 61, 55, 49, 180, 61, 237, 68, 35, 62, 47, 20, 36, 190, 85, 239, 137, 189, 89, 220, 49, 188, 201, 121, 38, 61, 205, 144, 47, 61, 238, 94, 21, 60, 64, 187, 21, 187, 246, 141, 28, 189, 186, 15, 158, 187, 179, 70, 8, 60, 170, 214, 13, 187, 185, 239, 153, 60, 174, 69, 76, 187, 124, 190, 179, 60, 175, 241, 65, 61, 151, 174, 34, 61, 238, 82, 54, 187, 102, 42, 130, 60, 47, 240, 251, 60, 135, 8, 149, 61, 125, 250, 224, 60, 19, 29, 157, 188, 72, 93, 188, 189, 201, 25, 205, 189, 133, 96, 176, 189, 171, 249, 105, 189, 160, 146, 223, 191, 155, 230, 248, 190, 222, 44, 8, 190, 99, 73, 63, 189, 53, 222, 50, 62, 188, 64, 220, 61, 220, 172, 151, 60, 121, 132, 128, 61, 198, 132, 193, 61, 13, 189, 55, 61, 33, 157, 210, 58, 73, 240, 56, 57, 178, 188, 49, 61, 160, 120, 62, 62, 56, 232, 247, 61, 7, 173, 92, 60, 64, 126, 66, 61, 40, 81, 186, 61, 125, 104, 90, 61, 67, 128, 162, 61, 102, 41, 115, 61, 125, 111, 125, 61, 105, 218, 128, 61, 1, 22, 110, 61, 18, 197, 151, 60, 17, 36, 17, 189, 252, 180, 168, 63, 255, 110, 47, 63, 191, 38, 110, 62, 202, 181, 60, 61, 206, 203, 190, 189, 232, 8, 37, 189, 231, 46, 248, 59, 246, 232, 189, 188, 212, 79, 155, 61, 81, 126, 230, 61, 118, 164, 34, 188, 225, 99, 132, 189, 229, 168, 19, 189, 202, 45, 192, 191, 51, 167, 208, 190, 172, 209, 98, 190, 167, 18, 88, 61, 115, 124, 137, 61, 209, 141, 70, 62, 123, 13, 50, 189, 240, 36, 25, 190, 229, 179, 119, 62, 67, 211, 25, 61, 200, 74, 132, 188, 24, 251, 236, 59, 103, 207, 160, 189, 168, 35, 130, 62, 81, 20, 225, 189, 17, 23, 36, 190, 114, 196, 39, 61, 117, 160, 73, 189, 60, 47, 222, 61, 213, 9, 125, 189, 1, 148, 238, 189, 176, 181, 28, 62, 210, 129, 140, 61, 98, 27, 98, 61, 67, 27, 198, 61, 205, 133, 10, 60, 195, 179, 7, 190, 34, 199, 199, 60, 220, 27, 78, 61, 45, 130, 114, 189, 131, 75, 215, 188, 118, 90, 169, 188, 8, 40, 140, 61, 78, 93, 226, 61, 44, 25, 164, 189, 3, 57, 247, 188, 37, 91, 73, 59, 103, 165, 110, 188, 199, 255, 3, 59, 77, 59, 181, 191, 166, 42, 0, 191, 238, 218, 60, 190, 136, 162, 141, 61, 97, 135, 154, 61, 177, 189, 35, 62, 10, 121, 170, 189, 194, 84, 245, 189, 210, 73, 111, 62, 194, 22, 105, 189, 66, 162, 134, 189, 107, 93, 148, 189, 243, 5, 23, 190, 252, 46, 26, 63, 124, 140, 66, 190, 255, 165, 71, 190, 153, 32, 218, 61, 132, 113, 180, 189, 13, 209, 29, 62, 229, 85, 48, 188, 204, 56, 133, 190, 24, 88, 139, 62, 208, 218, 82, 189, 71, 98, 63, 190, 169, 159, 74, 61, 197, 194, 35, 189, 209, 8, 189, 187, 125, 244, 86, 188, 56, 228, 169, 189, 157, 247, 41, 189, 239, 211, 214, 189, 228, 241, 16, 189, 253, 178, 197, 61, 212, 115, 73, 189, 88, 56, 193, 188, 250, 57, 47, 61, 225, 130, 108, 60, 92, 183, 18, 62, 136, 222, 196, 61, 137, 221, 216, 191, 148, 3, 214, 190, 25, 184, 1, 190, 148, 1, 248, 189, 142, 12, 218, 61, 96, 239, 210, 60, 243, 1, 38, 60, 146, 113, 128, 187, 117, 241, 5, 59, 189, 109, 134, 60, 249, 19, 44, 61, 172, 182, 171, 60, 139, 152, 20, 61, 236, 130, 62, 61, 250, 69, 178, 60, 74, 21, 194, 188, 243, 91, 80, 61, 203, 114, 130, 189, 68, 4, 34, 189, 74, 224, 178, 189, 140, 187, 47, 189, 235, 181, 3, 61, 214, 208, 138, 188, 132, 73, 1, 189, 230, 20, 235, 188, 192, 227, 63, 189, 245, 217, 252, 62, 5, 198, 52, 62, 91, 23, 167, 61, 93, 45, 218, 61, 226, 61, 96, 61, 241, 18, 236, 61, 160, 56, 128, 188, 119, 187, 153, 189, 165, 185, 190, 60, 3, 20, 84, 60, 33, 59, 187, 189, 68, 111, 211, 189, 64, 16, 147, 189, 234, 185, 189, 191, 173, 100, 174, 190, 30, 175, 234, 188, 156, 4, 45, 189, 121, 67, 115, 61, 17, 211, 34, 61, 43, 194, 64, 60, 217, 208, 209, 61, 19, 254, 194, 61, 50, 175, 84, 189, 93, 68, 5, 190, 59, 43, 131, 60, 135, 244, 212, 61, 3, 177, 175, 62, 28, 117, 168, 188, 60, 84, 44, 60, 3, 233, 205, 61, 104, 78, 79, 189, 3, 196, 28, 60, 72, 213, 196, 60, 160, 99, 48, 190, 153, 51, 122, 189, 27, 6, 13, 188, 11, 207, 228, 187, 109, 182, 248, 60, 225, 153, 138, 59, 194, 20, 162, 62, 124, 148, 133, 62, 218, 151, 135, 62, 152, 110, 15, 62, 177, 184, 166, 189, 250, 226, 19, 61, 30, 2, 130, 61, 228, 141, 229, 60, 184, 225, 24, 60, 130, 94, 228, 61, 229, 149, 44, 62, 4, 189, 82, 62, 76, 213, 6, 190, 5, 129, 135, 192, 162, 199, 25, 191, 1, 185, 67, 63, 64, 136, 245, 189, 193, 40, 53, 62, 94, 151, 193, 188, 161, 112, 3, 188, 7, 255, 151, 62, 217, 178, 1, 190, 69, 140, 14, 60, 236, 75, 114, 61, 53, 159, 233, 61, 40, 127, 19, 62, 97, 94, 200, 60, 231, 70, 31, 186, 177, 244, 30, 186, 29, 138, 173, 184, 160, 114, 62, 186, 198, 215, 146, 58, 151, 69, 101, 60, 3, 157, 6, 60, 244, 107, 232, 187, 66, 47, 101, 60, 146, 15, 220, 59, 44, 29, 144, 188, 237, 210, 164, 187, 186, 10, 83, 188, 137, 123, 85, 59, 248, 184, 31, 60, 154, 254, 13, 188, 252, 120, 195, 187, 88, 78, 14, 60, 179, 185, 184, 59, 156, 31, 56, 187, 218, 47, 58, 188, 181, 11, 7, 188, 84, 134, 109, 59, 209, 80, 182, 58, 254, 153, 31, 188, 9, 30, 141, 192, 20, 60, 60, 190, 72, 208, 77, 62, 228, 123, 75, 61, 247, 110, 59, 62, 140, 120, 12, 62, 153, 125, 15, 61, 36, 72, 12, 189, 67, 201, 152, 61, 71, 233, 55, 190, 16, 56, 149, 60, 61, 141, 173, 60, 63, 237, 222, 189, 211, 18, 127, 188, 92, 78, 0, 61, 230, 29, 212, 187, 116, 175, 19, 189, 119, 140, 253, 60, 174, 112, 27, 188, 168, 129, 99, 188, 246, 74, 116, 187, 66, 102, 180, 188, 193, 10, 27, 61, 88, 136, 52, 188, 97, 199, 107, 188, 123, 53, 194, 60, 226, 251, 26, 61, 67, 39, 14, 60, 27, 9, 81, 59, 32, 243, 2, 60, 244, 243, 153, 59, 202, 15, 137, 188, 207, 162, 186, 59, 240, 125, 60, 60, 53, 163, 164, 188, 75, 171, 237, 60, 17, 174, 85, 59, 36, 68, 120, 188, 208, 135, 54, 60, 125, 33, 98, 192, 253, 35, 225, 190, 220, 107, 93, 62, 63, 80, 8, 188, 185, 68, 22, 62, 25, 245, 156, 61, 186, 61, 184, 61, 159, 143, 139, 61, 55, 149, 33, 189, 101, 204, 0, 189, 26, 21, 57, 188, 183, 153, 212, 188, 6, 80, 179, 60, 76, 4, 59, 63, 145, 3, 6, 189, 45, 21, 47, 190, 167, 65, 142, 188, 198, 71, 14, 189, 155, 238, 203, 61, 2, 99, 53, 190, 109, 75, 203, 189, 38, 220, 40, 62, 19, 220, 133, 61, 110, 214, 231, 189, 191, 65, 129, 61, 44, 211, 163, 60, 222, 242, 61, 63, 128, 126, 57, 190, 145, 155, 174, 190, 85, 227, 72, 190, 208, 192, 203, 61, 77, 55, 183, 61, 70, 158, 153, 190, 42, 37, 20, 190, 20, 32, 69, 62, 97, 93, 50, 62, 111, 210, 2, 190, 254, 189, 49, 187, 208, 29, 134, 61, 66, 60, 38, 191, 189, 99, 138, 191, 227, 159, 28, 63, 93, 167, 217, 190, 30, 80, 184, 62, 42, 39, 240, 189, 167, 37, 250, 61, 118, 22, 74, 189, 75, 94, 39, 60, 88, 40, 12, 61, 13, 200, 26, 189, 198, 133, 194, 60, 25, 251, 255, 60, 43, 64, 243, 63, 81, 71, 48, 190, 170, 55, 74, 63, 84, 50, 108, 62, 29, 87, 240, 60, 68, 238, 118, 61, 88, 246, 7, 190, 26, 175, 205, 189, 218, 84, 242, 189, 228, 142, 192, 60, 183, 114, 168, 188, 101, 69, 174, 59, 138, 63, 145, 60, 200, 16, 226, 62, 199, 134, 129, 63, 97, 39, 97, 190, 203, 215, 109, 63, 234, 255, 172, 190, 177, 119, 112, 62, 94, 230, 52, 190, 12, 168, 141, 189, 36, 236, 234, 189, 134, 18, 28, 189, 78, 186, 194, 188, 61, 30, 98, 188, 141, 192, 150, 58, 119, 147, 229, 191, 119, 103, 220, 190, 208, 28, 68, 184, 215, 187, 210, 189, 142, 27, 15, 62, 184, 131, 212, 61, 186, 98, 221, 188, 117, 183, 151, 61, 4, 34, 216, 59, 134, 144, 35, 61, 141, 139, 91, 61, 125, 98, 172, 188, 83, 201, 145, 61, 52, 50, 0, 64, 161, 26, 22, 63, 172, 190, 205, 62, 174, 142, 26, 63, 94, 0, 22, 62, 127, 28, 253, 188, 140, 154, 141, 189, 186, 57, 77, 190, 78, 3, 22, 189, 166, 250, 211, 189, 211, 104, 229, 189, 119, 179, 253, 188, 138, 214, 245, 189, 213, 74, 254, 63, 65, 249, 165, 62, 219, 15, 138, 62, 63, 247, 227, 62, 213, 10, 9, 189, 142, 173, 204, 189, 204, 121, 103, 189, 255, 109, 19, 190, 10, 71, 54, 189, 51, 254, 14, 189, 153, 126, 3, 190, 34, 74, 94, 61, 111, 176, 28, 189, 153, 11, 2, 191, 171, 217, 117, 191, 157, 10, 3, 63, 202, 107, 70, 190, 52, 248, 44, 62, 102, 166, 57, 62, 118, 138, 234, 189, 127, 155, 15, 62, 213, 35, 15, 190, 107, 238, 249, 61, 168, 57, 24, 189, 29, 197, 170, 187, 115, 228, 103, 61, 113, 58, 246, 63, 151, 35, 91, 63, 104, 91, 229, 62, 52, 184, 121, 63, 66, 250, 47, 189, 154, 14, 51, 61, 29, 108, 14, 190, 119, 40, 135, 190, 183, 96, 41, 190, 218, 144, 83, 190, 136, 87, 226, 189, 30, 28, 146, 189, 98, 197, 131, 189, 240, 112, 129, 63, 53, 156, 116, 63, 143, 184, 15, 190, 204, 92, 103, 63, 117, 194, 128, 189, 183, 42, 156, 190, 105, 153, 190, 60, 183, 176, 170, 190, 237, 203, 143, 60, 255, 108, 138, 190, 244, 45, 206, 189, 86, 107, 105, 61, 202, 245, 111, 189, 54, 7, 146, 191, 16, 251, 78, 190, 201, 49, 213, 190, 145, 220, 178, 190, 215, 250, 24, 189, 66, 39, 130, 62, 77, 159, 23, 62, 238, 123, 159, 59, 255, 36, 204, 188, 178, 69, 65, 189, 10, 112, 166, 61, 39, 121, 230, 61, 239, 113, 134, 61, 108, 122, 154, 62, 196, 65, 165, 189, 57, 218, 198, 61, 23, 231, 154, 189, 190, 117, 201, 58, 2, 160, 42, 60, 229, 26, 43, 189, 7, 223, 137, 188, 39, 16, 46, 189, 163, 226, 169, 60, 12, 153, 193, 188, 46, 90, 198, 187, 63, 191, 96, 189, 247, 230, 240, 61, 148, 55, 251, 189, 73, 232, 188, 61, 11, 50, 35, 189, 76, 22, 95, 61, 117, 60, 39, 188, 206, 45, 171, 186, 85, 184, 33, 61, 165, 181, 122, 188, 223, 50, 159, 61, 22, 197, 150, 188, 138, 115, 157, 188, 54, 39, 95, 60, 51, 161, 233, 63, 181, 117, 214, 191, 138, 23, 92, 189, 156, 207, 245, 61, 160, 40, 23, 189, 136, 214, 31, 62, 139, 93, 72, 190, 21, 60, 139, 61, 48, 65, 69, 61, 81, 176, 79, 59, 2, 10, 103, 189, 191, 135, 175, 61, 243, 161, 150, 60, 70, 238, 243, 62, 189, 53, 57, 62, 92, 145, 93, 62, 42, 3, 96, 62, 206, 121, 15, 190, 50, 207, 104, 61, 66, 27, 234, 60, 161, 226, 115, 189, 21, 9, 38, 189, 252, 145, 8, 189, 15, 216, 98, 188, 185, 106, 36, 189, 79, 38, 189, 59, 214, 35, 13, 191, 146, 72, 45, 63, 245, 137, 159, 61, 12, 207, 15, 62, 13, 105, 221, 61, 2, 189, 17, 190, 213, 177, 135, 61, 166, 62, 138, 189, 159, 238, 3, 61, 115, 139, 148, 189, 88, 39, 201, 59, 24, 254, 50, 60, 23, 81, 115, 189, 95, 67, 62, 63, 40, 40, 85, 62, 98, 190, 116, 63, 224, 204, 39, 63, 39, 200, 128, 62, 115, 202, 0, 62, 49, 82, 23, 190, 13, 51, 105, 190, 105, 247, 63, 190, 117, 249, 13, 190, 107, 1, 63, 190, 61, 67, 14, 189, 52, 75, 90, 187, 187, 167, 23, 64, 176, 193, 153, 63, 43, 254, 192, 62, 22, 85, 160, 63, 178, 119, 167, 189, 217, 171, 131, 190, 74, 135, 218, 189, 176, 226, 216, 190, 216, 220, 225, 189, 138, 65, 132, 190, 170, 201, 88, 190, 127, 76, 169, 61, 229, 122, 217, 189, 157, 233, 197, 61, 190, 92, 38, 191, 1, 207, 236, 190, 125, 192, 123, 190, 105, 49, 63, 190, 11, 10, 133, 190, 28, 248, 225, 60, 8, 94, 171, 61, 141, 18, 6, 61, 21, 6, 132, 61, 118, 214, 116, 61, 72, 191, 154, 61, 140, 195, 26, 61, 148, 52, 10, 64, 202, 158, 250, 61, 34, 203, 77, 63, 184, 60, 163, 63, 168, 161, 9, 188, 125, 120, 77, 190, 39, 26, 10, 190, 225, 65, 181, 190, 169, 82, 112, 190, 109, 26, 82, 190, 228, 225, 96, 190, 151, 214, 211, 61, 49, 231, 120, 189, 81, 34, 13, 64, 31, 229, 76, 62, 249, 188, 63, 190, 116, 187, 91, 63, 133, 212, 172, 190, 198, 118, 207, 190, 120, 33, 32, 189, 48, 89, 56, 190, 44, 43, 169, 189, 60, 219, 9, 190, 78, 203, 48, 188, 60, 146, 129, 61, 2, 169, 147, 189, 132, 14, 203, 191, 35, 2, 53, 191, 83, 1, 201, 190, 27, 63, 105, 191, 38, 95, 203, 61, 199, 151, 154, 61, 165, 136, 6, 62, 177, 230, 169, 62, 241, 179, 38, 62, 165, 84, 89, 62, 97, 84, 23, 62, 146, 63, 156, 189, 215, 47, 241, 59, 100, 215, 42, 64, 38, 205, 116, 63, 255, 247, 103, 190, 45, 139, 135, 61, 101, 84, 67, 190, 23, 21, 56, 190, 246, 35, 165, 189, 181, 84, 21, 190, 247, 250, 205, 188, 210, 12, 84, 62, 90, 212, 108, 189, 55, 105, 6, 190, 130, 248, 142, 189, 102, 232, 128, 64, 115, 255, 159, 62, 125, 148, 77, 191, 91, 222, 193, 189, 228, 11, 187, 190, 245, 156, 102, 61, 195, 30, 49, 61, 68, 148, 165, 59, 26, 140, 219, 61, 254, 135, 144, 61, 208, 111, 59, 190, 45, 45, 203, 189, 206, 208, 27, 189, 91, 149, 127, 191, 43, 11, 36, 191, 59, 107, 212, 189, 180, 106, 17, 189, 194, 144, 7, 61, 3, 181, 126, 62, 132, 23, 167, 61, 73, 0, 120, 61, 117, 34, 86, 60, 116, 2, 62, 190, 101, 166, 155, 60, 55, 47, 178, 61, 54, 12, 6, 59, 215, 203, 13, 64, 42, 218, 157, 62, 36, 5, 33, 63, 78, 55, 150, 63, 4, 224, 82, 62, 0, 99, 211, 190, 119, 58, 30, 190, 195, 181, 122, 190, 90, 186, 133, 60, 162, 175, 133, 190, 220, 224, 46, 190, 18, 66, 214, 61, 176, 212, 137, 189, 235, 64, 92, 190, 81, 160, 116, 62, 75, 21, 253, 189, 209, 170, 120, 189, 4, 252, 59, 188, 65, 135, 131, 188, 130, 222, 104, 61, 16, 91, 13, 62, 39, 229, 83, 189, 248, 123, 236, 61, 86, 114, 106, 61, 161, 66, 225, 189, 174, 109, 245, 187, 174, 213, 156, 190, 202, 197, 60, 188, 84, 96, 203, 61, 169, 0, 161, 189, 160, 173, 193, 58, 115, 9, 13, 62, 110, 83, 21, 59, 248, 126, 103, 189, 179, 136, 76, 189, 223, 184, 208, 187, 144, 25, 38, 61, 164, 226, 143, 189, 62, 38, 220, 188, 209, 192, 14, 64, 213, 215, 2, 62, 22, 44, 0, 63, 185, 166, 208, 63, 136, 60, 21, 190, 106, 87, 181, 190, 117, 157, 7, 190, 202, 120, 3, 191, 81, 223, 192, 189, 60, 206, 240, 190, 118, 55, 13, 190, 108, 53, 150, 61, 24, 175, 55, 190, 215, 108, 87, 62, 176, 195, 0, 189, 214, 77, 79, 189, 228, 120, 168, 189, 200, 92, 120, 60, 23, 100, 144, 189, 182, 7, 212, 58, 143, 172, 136, 61, 168, 139, 39, 189, 217, 240, 178, 59, 220, 72, 57, 61, 83, 180, 105, 189, 113, 202, 171, 187, 11, 21, 182, 190, 157, 26, 25, 61, 124, 123, 26, 61, 223, 128, 200, 189, 244, 78, 128, 61, 222, 153, 177, 61, 52, 174, 176, 60, 109, 48, 77, 61, 159, 28, 159, 59, 194, 142, 132, 61, 111, 133, 86, 188, 250, 113, 170, 187, 51, 42, 163, 60, 184, 241, 105, 64, 199, 241, 193, 188, 81, 252, 195, 62, 246, 66, 100, 63, 199, 19, 62, 62, 190, 50, 74, 191, 203, 115, 120, 190, 194, 101, 138, 190, 29, 47, 67, 190, 164, 212, 195, 190, 194, 92, 101, 190, 42, 30, 123, 188, 162, 195, 152, 190, 196, 126, 144, 189, 35, 82, 130, 189, 19, 91, 185, 60, 149, 60, 204, 189, 29, 103, 4, 188, 93, 76, 223, 59, 93, 170, 255, 188, 9, 0, 66, 188, 221, 54, 15, 189, 136, 225, 82, 187, 153, 153, 140, 60, 161, 215, 139, 60, 19, 94, 27, 61, 206, 190, 91, 190, 159, 200, 255, 60, 60, 238, 233, 60, 166, 174, 77, 188, 242, 123, 58, 188, 16, 137, 127, 61, 125, 212, 182, 60, 107, 152, 67, 188, 163, 176, 97, 60, 120, 34, 196, 59, 20, 206, 24, 60, 187, 99, 202, 59, 52, 86, 94, 60, 145, 55, 174, 63, 194, 82, 236, 62, 92, 16, 68, 63, 119, 238, 111, 63, 140, 130, 90, 62, 146, 247, 201, 189, 166, 250, 195, 189, 119, 119, 89, 190, 63, 165, 31, 190, 179, 18, 84, 190, 126, 165, 44, 190, 100, 126, 11, 189, 88, 180, 195, 189, 28, 38, 183, 190, 54, 132, 145, 186, 36, 143, 206, 59, 68, 201, 19, 190, 35, 67, 211, 61, 146, 31, 11, 62, 208, 225, 62, 189, 151, 159, 50, 61, 187, 141, 166, 188, 184, 130, 18, 189, 119, 47, 40, 188, 215, 125, 59, 60, 104, 14, 49, 60, 27, 171, 132, 60, 40, 169, 196, 189, 66, 180, 73, 189, 204, 156, 218, 186, 219, 147, 161, 58, 224, 76, 37, 189, 218, 186, 61, 57, 58, 53, 145, 188, 194, 203, 29, 188, 18, 83, 79, 189, 146, 24, 36, 189, 153, 2, 15, 61, 64, 184, 131, 61, 166, 161, 232, 63, 213, 37, 211, 62, 15, 193, 49, 63, 200, 54, 125, 63, 99, 18, 10, 190, 0, 36, 168, 189, 184, 202, 52, 189, 16, 6, 154, 190, 92, 33, 11, 190, 159, 93, 222, 189, 5, 135, 61, 189, 62, 138, 150, 187, 113, 86, 77, 189, 200, 207, 131, 191, 155, 32, 136, 62, 29, 236, 110, 61, 130, 70, 251, 190, 5, 169, 130, 62, 30, 143, 77, 62, 66, 111, 174, 188, 207, 169, 226, 61, 3, 124, 120, 61, 145, 127, 138, 186, 197, 220, 76, 60, 117, 121, 247, 188, 120, 191, 80, 61, 135, 235, 228, 61, 80, 56, 59, 188, 176, 123, 222, 59, 78, 96, 101, 187, 104, 126, 145, 61, 136, 60, 39, 189, 178, 74, 137, 189, 232, 191, 233, 60, 218, 219, 24, 189, 126, 123, 2, 189, 223, 7, 173, 187, 103, 101, 108, 57, 181, 75, 200, 188, 91, 198, 78, 64, 235, 144, 33, 63, 249, 73, 225, 62, 205, 7, 88, 63, 171, 48, 116, 61, 108, 111, 40, 190, 66, 186, 85, 190, 126, 44, 143, 190, 87, 51, 242, 189, 95, 193, 75, 190, 79, 46, 79, 190, 130, 49, 44, 61, 215, 10, 250, 189, 151, 220, 148, 62, 57, 38, 16, 62, 56, 136, 222, 189, 231, 158, 134, 189, 92, 213, 195, 189, 68, 134, 99, 189, 2, 15, 131, 61, 97, 126, 236, 60, 25, 33, 11, 60, 252, 123, 76, 60, 62, 189, 148, 61, 244, 46, 67, 61, 112, 196, 191, 187, 129, 157, 17, 191, 239, 116, 109, 61, 58, 71, 27, 61, 119, 28, 34, 190, 124, 195, 135, 188, 174, 92, 229, 61, 112, 10, 72, 61, 239, 101, 76, 61, 204, 14, 236, 60, 218, 187, 240, 60, 236, 253, 112, 61, 161, 97, 162, 189, 113, 115, 240, 60, 72, 87, 78, 64, 46, 0, 77, 61, 227, 12, 53, 63, 185, 35, 150, 63, 72, 14, 26, 191, 1, 131, 183, 190, 76, 231, 130, 189, 69, 30, 164, 190, 165, 147, 173, 190, 4, 183, 29, 62, 7, 186, 152, 60, 241, 209, 44, 61, 159, 186, 121, 61, 40, 37, 67, 60, 47, 223, 190, 61, 200, 111, 216, 189, 10, 102, 93, 188, 238, 207, 8, 189, 11, 193, 58, 188, 142, 59, 118, 61, 233, 14, 142, 188, 168, 123, 156, 61, 183, 235, 220, 60, 129, 139, 140, 60, 216, 81, 151, 188, 182, 48, 190, 187, 248, 54, 161, 190, 56, 213, 134, 61, 137, 243, 167, 61, 66, 241, 49, 190, 244, 149, 37, 62, 127, 149, 165, 61, 157, 157, 237, 188, 77, 71, 171, 60, 29, 27, 49, 61, 67, 217, 189, 188, 171, 15, 230, 188, 116, 221, 101, 60, 139, 247, 112, 188, 95, 114, 82, 64, 217, 78, 148, 61, 223, 171, 211, 62, 170, 15, 213, 63, 153, 76, 208, 61, 238, 18, 166, 190, 101, 176, 56, 190, 80, 42, 148, 190, 65, 228, 17, 190, 1, 246, 10, 191, 75, 22, 75, 190, 249, 44, 147, 61, 128, 149, 108, 190, 46, 160, 50, 62, 48, 151, 15, 60, 147, 7, 211, 58, 127, 221, 172, 189, 239, 243, 56, 189, 185, 242, 161, 60, 210, 74, 95, 60, 229, 49, 78, 188, 174, 114, 55, 61, 205, 159, 57, 60, 235, 42, 147, 60, 49, 131, 79, 188, 99, 68, 166, 189, 75, 19, 28, 191, 20, 243, 119, 61, 214, 215, 94, 61, 235, 137, 90, 190, 168, 164, 184, 60, 120, 123, 210, 61, 48, 153, 73, 61, 219, 197, 18, 61, 195, 187, 19, 188, 0, 58, 169, 61, 187, 10, 9, 60, 119, 114, 146, 188, 4, 228, 72, 61, 57, 51, 124, 191, 171, 76, 187, 190, 156, 106, 4, 190, 143, 156, 7, 187, 39, 212, 162, 188, 200, 207, 123, 61, 137, 235, 144, 60, 143, 178, 10, 61, 94, 80, 55, 59, 126, 28, 31, 61, 2, 79, 7, 61, 52, 153, 183, 60, 66, 127, 35, 61, 74, 231, 148, 189, 159, 4, 161, 60, 56, 35, 23, 61, 124, 156, 12, 61, 93, 67, 200, 187, 9, 20, 14, 59, 225, 228, 50, 188, 36, 236, 64, 60, 114, 146, 88, 61, 163, 222, 121, 61, 126, 23, 65, 60, 52, 186, 167, 188, 121, 190, 41, 189, 136, 195, 38, 189, 209, 69, 34, 189, 176, 50, 109, 188, 59, 191, 172, 188, 73, 233, 142, 60, 169, 184, 244, 188, 55, 13, 138, 60, 213, 219, 127, 61, 138, 229, 109, 61, 3, 51, 153, 61, 189, 203, 108, 61, 120, 129, 168, 61, 138, 27, 79, 61, 167, 156, 140, 191, 149, 104, 197, 190, 42, 198, 147, 189, 121, 121, 63, 189, 117, 5, 152, 61, 249, 131, 235, 187, 25, 233, 163, 189, 76, 84, 11, 61, 35, 117, 88, 188, 53, 227, 164, 61, 36, 127, 65, 61, 35, 66, 239, 61, 32, 64, 42, 62, 115, 61, 127, 190, 189, 57, 58, 190, 48, 50, 219, 189, 166, 70, 157, 188, 21, 50, 128, 61, 61, 204, 151, 61, 75, 99, 133, 61, 16, 4, 97, 61, 147, 162, 226, 185, 97, 166, 240, 187, 231, 45, 241, 59, 234, 220, 166, 60, 95, 182, 138, 60, 167, 122, 84, 62, 159, 17, 233, 61, 123, 186, 163, 61, 220, 96, 159, 60, 200, 219, 216, 188, 112, 183, 57, 186, 175, 39, 135, 59, 205, 33, 23, 189, 158, 29, 2, 189, 254, 35, 19, 189, 244, 150, 133, 189, 192, 98, 125, 189, 77, 1, 211, 188, 73, 24, 152, 191, 225, 56, 202, 190, 24, 167, 228, 189, 178, 248, 49, 188, 142, 63, 0, 61, 171, 37, 145, 61, 249, 154, 136, 60, 235, 47, 221, 60, 145, 227, 39, 189, 48, 188, 198, 60, 19, 158, 93, 189, 76, 113, 170, 60, 86, 61, 0, 62, 166, 219, 98, 190, 53, 232, 192, 189, 36, 168, 133, 189, 175, 20, 161, 188, 68, 97, 130, 60, 69, 236, 136, 60, 184, 224, 77, 61, 69, 66, 45, 61, 197, 81, 26, 187, 89, 195, 4, 60, 16, 188, 129, 188, 162, 128, 9, 60, 224, 31, 196, 60, 1, 15, 204, 189, 162, 12, 169, 189, 127, 132, 188, 188, 89, 55, 141, 188, 72, 52, 102, 189, 253, 249, 103, 189, 72, 41, 46, 188, 7, 206, 5, 61, 209, 163, 172, 60, 207, 34, 52, 61, 214, 130, 70, 61, 191, 210, 112, 61, 49, 5, 65, 60, 40, 187, 173, 191, 124, 183, 251, 190, 235, 148, 71, 190, 214, 73, 162, 189, 227, 195, 127, 188, 95, 141, 97, 61, 254, 191, 46, 61, 52, 246, 146, 61, 234, 186, 179, 60, 77, 100, 200, 61, 76, 25, 12, 61, 40, 207, 161, 61, 39, 118, 218, 61, 38, 125, 18, 189, 179, 60, 231, 60, 64, 91, 55, 60, 139, 47, 0, 189, 245, 50, 140, 188, 7, 211, 103, 187, 51, 186, 42, 189, 195, 32, 25, 189, 242, 116, 1, 189, 160, 126, 47, 189, 209, 230, 109, 187, 172, 250, 134, 187, 58, 64, 96, 188, 170, 91, 28, 61, 40, 71, 242, 61, 33, 54, 179, 61, 111, 202, 152, 61, 126, 223, 140, 61, 253, 35, 63, 61, 109, 153, 181, 188, 166, 25, 166, 189, 252, 253, 109, 189, 126, 47, 185, 189, 6, 2, 139, 189, 242, 13, 178, 189, 214, 56, 60, 189, 118, 240, 241, 191, 42, 229, 213, 190, 181, 188, 41, 189, 252, 115, 141, 189, 169, 253, 157, 61, 20, 154, 179, 61, 110, 60, 196, 60, 161, 62, 141, 61, 109, 111, 40, 61, 133, 137, 50, 60, 117, 246, 37, 61, 90, 73, 32, 61, 15, 169, 46, 61, 186, 34, 36, 187, 245, 69, 129, 61, 60, 59, 100, 61, 249, 117, 37, 61, 41, 223, 1, 61, 31, 253, 243, 60, 227, 217, 86, 60, 151, 164, 17, 60, 171, 94, 77, 187, 16, 166, 192, 188, 170, 248, 5, 189, 246, 94, 39, 189, 234, 56, 18, 189, 5, 14, 84, 61, 205, 255, 59, 61, 93, 228, 85, 61, 191, 17, 94, 61, 58, 86, 103, 61, 155, 239, 58, 61, 24, 143, 198, 58, 152, 251, 36, 188, 146, 226, 58, 189, 241, 89, 135, 189, 176, 148, 80, 189, 188, 71, 77, 189, 120, 198, 253, 188, 206, 65, 230, 191, 224, 89, 189, 190, 245, 163, 241, 186, 19, 241, 246, 188, 170, 208, 202, 61, 60, 247, 175, 61, 73, 55, 104, 60, 178, 172, 95, 61, 94, 251, 41, 60, 173, 158, 144, 188, 74, 186, 19, 61, 58, 99, 193, 60, 67, 79, 195, 60, 244, 243, 11, 189, 253, 1, 174, 59, 116, 210, 82, 187, 101, 148, 60, 60, 151, 162, 207, 60, 207, 139, 36, 60, 156, 241, 147, 58, 225, 192, 160, 60, 142, 251, 167, 60, 34, 254, 192, 58, 64, 33, 6, 188, 159, 106, 249, 188, 110, 54, 100, 188, 179, 112, 22, 189, 76, 125, 186, 189, 55, 13, 200, 189, 210, 219, 146, 189, 18, 227, 98, 189, 197, 25, 122, 189, 159, 45, 187, 188, 168, 95, 63, 60, 248, 136, 131, 61, 85, 44, 193, 61, 171, 194, 142, 61, 205, 0, 91, 61, 254, 214, 23, 61, 228, 42, 232, 191, 156, 254, 226, 190, 234, 133, 181, 189, 6, 225, 188, 189, 242, 198, 137, 61, 251, 105, 80, 61, 13, 35, 175, 59, 8, 162, 68, 61, 58, 49, 197, 60, 136, 82, 23, 187, 43, 99, 78, 61, 5, 83, 36, 61, 120, 196, 59, 61, 71, 52, 98, 189, 63, 77, 74, 189, 39, 72, 35, 189, 231, 255, 10, 189, 126, 210, 39, 189, 21, 90, 0, 189, 231, 128, 241, 186, 72, 155, 148, 187, 68, 119, 162, 185, 183, 89, 136, 60, 130, 119, 4, 61, 223, 33, 83, 61, 248, 36, 19, 61, 127, 101, 4, 62, 15, 210, 228, 61, 96, 141, 167, 61, 225, 4, 5, 61, 10, 221, 241, 59, 80, 53, 244, 59, 190, 82, 51, 187, 53, 25, 138, 60, 111, 9, 204, 60, 48, 137, 98, 59, 234, 210, 187, 188, 95, 135, 111, 189, 2, 97, 149, 189, 240, 186, 209, 191, 46, 199, 176, 190, 32, 18, 56, 188, 232, 247, 89, 189, 188, 218, 194, 61, 76, 122, 132, 61, 176, 117, 61, 188, 94, 135, 85, 61, 85, 78, 201, 60, 114, 101, 234, 187, 96, 231, 215, 60, 60, 90, 6, 189, 49, 45, 18, 189, 223, 7, 146, 189, 64, 92, 148, 188, 58, 246, 216, 188, 13, 214, 12, 189, 80, 139, 163, 188, 168, 44, 123, 188, 251, 184, 214, 188, 148, 192, 28, 189, 90, 152, 139, 188, 67, 182, 239, 59, 18, 205, 220, 59, 12, 149, 177, 60, 118, 223, 203, 60, 82, 114, 27, 190, 111, 177, 226, 189, 150, 245, 124, 189, 221, 234, 216, 188, 133, 221, 194, 188, 169, 81, 145, 187, 45, 38, 211, 60, 94, 219, 227, 188, 32, 156, 84, 189, 2, 240, 220, 188, 19, 45, 86, 60, 185, 216, 181, 61, 94, 234, 210, 61, 92, 183, 3, 192, 199, 162, 28, 191, 217, 47, 38, 190, 95, 153, 46, 187, 107, 23, 62, 62, 150, 6, 255, 61, 178, 149, 102, 188, 4, 70, 172, 61, 244, 137, 135, 61, 15, 158, 35, 62, 68, 189, 2, 62, 65, 162, 250, 61, 112, 205, 53, 62, 168, 194, 134, 189, 145, 181, 207, 188, 66, 147, 191, 188, 192, 15, 89, 57, 35, 224, 79, 188, 184, 176, 163, 58, 38, 232, 162, 188, 158, 155, 199, 60, 47, 225, 120, 61, 109, 32, 23, 60, 181, 251, 1, 61, 175, 169, 109, 59, 59, 41, 43, 188, 109, 249, 239, 188, 173, 96, 166, 189, 213, 89, 93, 186, 23, 7, 25, 61, 222, 180, 160, 187, 238, 174, 162, 60, 56, 109, 132, 60, 254, 145, 244, 58, 94, 206, 110, 188, 185, 243, 5, 61, 94, 138, 83, 188, 242, 212, 156, 59, 194, 217, 6, 187, 113, 92, 222, 191, 215, 22, 25, 191, 161, 159, 246, 189, 238, 87, 122, 189, 114, 229, 95, 62, 65, 17, 198, 61, 28, 116, 170, 60, 179, 238, 168, 61, 56, 228, 2, 59, 39, 14, 189, 61, 64, 242, 102, 60, 215, 80, 51, 61, 252, 32, 2, 62, 69, 162, 255, 189, 178, 206, 32, 188, 198, 5, 31, 60, 15, 122, 53, 61, 72, 150, 85, 61, 127, 23, 52, 61, 196, 104, 17, 61, 101, 104, 116, 60, 130, 177, 178, 58, 53, 132, 138, 59, 73, 242, 181, 187, 230, 144, 187, 188, 24, 181, 63, 188, 169, 100, 232, 60, 99, 181, 214, 59, 44, 167, 30, 188, 136, 39, 203, 188, 2, 40, 144, 188, 208, 159, 58, 188, 169, 232, 205, 187, 166, 30, 174, 60, 98, 123, 174, 60, 177, 198, 78, 186, 131, 148, 98, 188, 194, 163, 124, 57, 75, 31, 216, 59, 60, 228, 211, 191, 24, 32, 32, 191, 183, 135, 14, 190, 151, 158, 187, 189, 208, 88, 82, 62, 240, 180, 125, 61, 199, 88, 160, 60, 29, 69, 176, 61, 6, 226, 185, 188, 110, 248, 143, 61, 95, 37, 153, 189, 162, 130, 180, 187, 239, 103, 221, 61, 113, 126, 139, 189, 87, 21, 212, 187, 58, 239, 204, 60, 241, 211, 18, 189, 104, 224, 85, 189, 95, 114, 49, 189, 141, 89, 9, 189, 103, 64, 219, 188, 75, 77, 52, 60, 135, 249, 129, 187, 102, 45, 146, 60, 197, 3, 238, 60, 140, 210, 19, 59, 41, 180, 4, 189, 9, 56, 85, 59, 80, 85, 15, 60, 33, 4, 43, 61, 233, 240, 53, 188, 145, 255, 82, 60, 138, 151, 40, 188, 19, 0, 22, 189, 113, 186, 184, 188, 53, 68, 148, 187, 109, 145, 51, 61, 0, 174, 175, 60, 211, 217, 61, 60, 64, 144, 3, 192, 129, 198, 44, 191, 233, 87, 63, 190, 23, 204, 183, 188, 2, 153, 45, 62, 136, 106, 45, 62, 134, 174, 142, 188, 233, 32, 119, 61, 206, 112, 14, 61, 76, 116, 189, 61, 178, 129, 170, 61, 201, 223, 186, 61, 170, 176, 32, 62, 20, 157, 51, 62, 254, 130, 165, 188, 78, 12, 24, 189, 148, 207, 61, 189, 68, 156, 62, 189, 149, 31, 175, 61, 11, 4, 110, 188, 30, 4, 146, 189, 253, 228, 114, 189, 46, 170, 170, 189, 48, 66, 96, 61, 121, 27, 160, 60, 8, 68, 125, 60, 64, 187, 78, 62, 26, 69, 178, 61, 123, 15, 36, 61, 75, 230, 98, 185, 183, 67, 225, 59, 19, 35, 133, 188, 211, 182, 90, 188, 187, 90, 42, 189, 28, 144, 119, 58, 102, 242, 13, 189, 123, 43, 123, 187, 211, 121, 203, 188, 13, 82, 65, 189, 121, 40, 67, 191, 4, 4, 35, 191, 3, 111, 47, 60, 5, 24, 136, 61, 112, 81, 247, 61, 185, 159, 138, 58, 248, 118, 187, 61, 118, 73, 118, 189, 18, 179, 206, 61, 66, 85, 25, 189, 61, 71, 10, 60, 236, 144, 186, 60, 255, 229, 9, 60, 98, 2, 3, 62, 191, 160, 129, 188, 212, 123, 218, 188, 133, 203, 7, 189, 215, 96, 52, 60, 108, 114, 15, 60, 35, 232, 98, 189, 117, 189, 254, 59, 124, 199, 147, 59, 140, 163, 239, 60, 254, 89, 148, 59, 144, 199, 7, 61, 74, 124, 172, 61, 51, 142, 253, 189, 44, 1, 213, 61, 118, 196, 131, 189, 114, 213, 172, 188, 62, 166, 247, 188, 195, 204, 43, 61, 3, 191, 233, 188, 202, 40, 87, 61, 179, 7, 43, 60, 166, 30, 146, 61, 246, 63, 56, 61, 0, 104, 133, 188, 7, 176, 72, 60, 51, 101, 79, 191, 39, 181, 142, 190, 224, 138, 166, 189, 169, 171, 26, 188, 199, 90, 75, 61, 173, 80, 225, 60, 159, 189, 153, 60, 118, 175, 236, 60, 233, 66, 248, 59, 196, 230, 62, 60, 88, 229, 137, 185, 92, 202, 238, 188, 228, 42, 162, 59, 91, 37, 89, 59, 196, 252, 45, 60, 204, 18, 139, 60, 121, 59, 7, 61, 159, 143, 177, 60, 50, 12, 27, 61, 107, 245, 253, 60, 126, 37, 77, 60, 242, 11, 227, 59, 76, 44, 243, 59, 18, 188, 246, 57, 136, 190, 73, 188, 169, 191, 61, 188, 7, 85, 10, 61, 192, 130, 24, 189, 25, 156, 64, 187, 106, 176, 252, 59, 195, 6, 194, 60, 201, 164, 49, 58, 178, 154, 143, 188, 211, 167, 16, 189, 204, 74, 58, 60, 55, 122, 40, 61, 67, 130, 82, 61, 135, 8, 51, 61, 50, 118, 9, 60, 198, 22, 143, 191, 168, 210, 139, 190, 26, 218, 109, 189, 119, 103, 128, 61, 125, 116, 133, 61, 143, 7, 168, 59, 143, 191, 57, 189, 102, 153, 63, 188, 149, 145, 128, 60, 239, 41, 104, 59, 65, 250, 233, 60, 191, 75, 164, 60, 124, 238, 190, 58, 120, 28, 73, 189, 74, 58, 125, 58, 240, 159, 111, 188, 107, 141, 24, 189, 58, 209, 195, 188, 25, 168, 248, 188, 27, 139, 184, 188, 10, 67, 204, 188, 190, 47, 108, 188, 50, 88, 89, 188, 13, 65, 210, 187, 46, 137, 1, 60, 195, 194, 115, 59, 38, 233, 182, 60, 58, 130, 24, 60, 129, 134, 136, 59, 38, 74, 177, 188, 225, 32, 195, 188, 12, 126, 66, 60, 196, 239, 59, 61, 154, 229, 27, 61, 186, 170, 101, 187, 187, 154, 42, 189, 59, 28, 88, 189, 97, 155, 32, 189, 34, 25, 88, 187, 110, 176, 35, 191, 87, 151, 233, 190, 224, 20, 218, 189, 22, 72, 139, 61, 224, 27, 85, 61, 176, 227, 150, 61, 206, 148, 40, 61, 6, 210, 11, 61, 23, 218, 135, 61, 142, 146, 20, 61, 207, 210, 58, 187, 28, 136, 141, 188, 189, 62, 159, 188, 72, 98, 226, 189, 234, 10, 35, 188, 83, 134, 180, 60, 44, 7, 94, 61, 123, 120, 17, 189, 4, 193, 89, 188, 44, 17, 122, 60, 70, 184, 68, 60, 205, 34, 39, 60, 141, 166, 245, 188, 48, 196, 38, 58, 103, 208, 181, 60, 163, 68, 24, 189, 56, 184, 50, 61, 1, 112, 55, 60, 33, 47, 155, 61, 113, 206, 248, 60, 131, 29, 184, 60, 170, 14, 12, 189, 93, 85, 137, 188, 194, 153, 26, 189, 15, 134, 91, 189, 196, 140, 97, 189, 101, 151, 51, 189, 176, 251, 224, 187, 84, 221, 41, 188, 50, 134, 190, 191, 90, 15, 127, 190, 236, 127, 10, 61, 247, 237, 195, 61, 84, 249, 0, 62, 203, 127, 16, 61, 31, 20, 211, 57, 110, 64, 156, 61, 53, 200, 79, 60, 56, 107, 102, 61, 88, 22, 219, 188, 197, 134, 181, 188, 126, 88, 34, 61, 147, 2, 203, 61, 21, 254, 65, 187, 181, 49, 139, 60, 108, 102, 219, 59, 86, 125, 173, 188, 45, 55, 238, 60, 6, 0, 224, 60, 212, 188, 111, 188, 151, 61, 36, 59, 18, 135, 240, 186, 103, 209, 160, 60, 138, 29, 83, 61, 52, 131, 136, 186, 96, 64, 167, 62, 174, 72, 75, 188, 87, 41, 39, 189, 66, 232, 154, 188, 174, 255, 137, 61, 96, 100, 50, 61, 110, 54, 55, 60, 62, 168, 106, 188, 186, 3, 179, 188, 46, 59, 47, 60, 120, 250, 149, 60, 157, 20, 179, 60, 107, 245, 198, 188, 23, 120, 91, 190, 84, 51, 203, 190, 141, 24, 34, 190, 193, 94, 109, 61, 211, 235, 82, 62, 84, 6, 69, 62, 255, 105, 22, 190, 219, 136, 131, 189, 83, 126, 191, 61, 129, 194, 13, 62, 80, 68, 194, 188, 73, 210, 95, 189, 10, 201, 165, 61, 205, 210, 25, 62, 112, 220, 86, 61, 201, 217, 219, 188, 116, 92, 123, 60, 171, 166, 52, 60, 96, 17, 190, 61, 153, 107, 106, 58, 161, 34, 3, 189, 175, 44, 66, 61, 174, 251, 96, 188, 226, 156, 110, 189, 138, 191, 121, 188, 77, 6, 109, 188, 68, 3, 86, 60, 225, 108, 155, 62, 53, 73, 213, 61, 41, 131, 169, 189, 180, 118, 254, 189, 63, 148, 157, 189, 216, 61, 192, 61, 151, 184, 232, 58, 16, 189, 125, 189, 60, 122, 121, 189, 240, 22, 79, 60, 16, 16, 97, 61, 184, 196, 156, 189, 103, 53, 142, 191, 138, 151, 181, 190, 151, 29, 202, 189, 181, 198, 191, 188, 186, 146, 162, 61, 91, 21, 145, 61, 121, 98, 100, 60, 221, 177, 165, 185, 82, 53, 139, 188, 17, 72, 231, 60, 25, 235, 149, 60, 216, 236, 103, 59, 239, 156, 225, 60, 202, 15, 201, 62, 92, 220, 250, 59, 73, 127, 16, 188, 78, 12, 151, 188, 107, 104, 87, 188, 174, 220, 132, 187, 114, 141, 104, 189, 229, 131, 234, 188, 115, 221, 171, 188, 215, 227, 38, 61, 38, 21, 86, 60, 242, 37, 23, 189, 215, 188, 143, 60, 228, 38, 236, 62, 192, 184, 152, 186, 109, 41, 88, 61, 90, 169, 188, 188, 9, 2, 140, 189, 219, 5, 84, 189, 54, 174, 190, 189, 215, 193, 150, 188, 83, 121, 20, 186, 130, 11, 135, 61, 44, 95, 163, 60, 161, 74, 206, 188, 195, 129, 156, 60, 123, 27, 130, 190, 240, 202, 88, 191, 145, 213, 47, 62]).concat([172, 100, 132, 189, 100, 91, 2, 62, 220, 213, 35, 188, 110, 30, 133, 189, 87, 69, 193, 61, 116, 208, 8, 190, 11, 158, 45, 62, 94, 219, 144, 189, 207, 28, 206, 60, 21, 23, 18, 189, 182, 191, 53, 62, 216, 37, 105, 189, 214, 247, 11, 189, 234, 70, 199, 188, 206, 87, 201, 188, 56, 57, 187, 189, 94, 15, 141, 189, 30, 121, 14, 61, 41, 220, 43, 189, 48, 138, 104, 60, 135, 192, 226, 188, 221, 198, 42, 188, 6, 172, 195, 60, 181, 233, 134, 191, 112, 237, 18, 63, 166, 40, 113, 190, 226, 83, 94, 61, 237, 71, 110, 189, 242, 213, 199, 61, 83, 233, 50, 61, 183, 32, 176, 189, 121, 149, 102, 62, 13, 120, 42, 190, 72, 152, 190, 61, 35, 46, 121, 189, 201, 240, 244, 61, 77, 79, 169, 190, 238, 99, 134, 189, 27, 23, 72, 61, 100, 10, 18, 62, 234, 131, 64, 62, 23, 165, 42, 62, 32, 172, 152, 189, 214, 87, 53, 189, 136, 251, 57, 189, 4, 40, 64, 60, 222, 14, 117, 188, 21, 15, 27, 189, 73, 92, 168, 59, 193, 233, 13, 191, 233, 179, 146, 190, 173, 138, 161, 189, 24, 132, 204, 188, 116, 229, 230, 60, 58, 50, 26, 61, 132, 85, 138, 61, 13, 80, 120, 61, 173, 90, 194, 60, 202, 28, 139, 60, 10, 148, 82, 61, 132, 239, 133, 61, 160, 108, 197, 60, 100, 134, 26, 62, 114, 190, 61, 61, 170, 63, 129, 186, 180, 86, 158, 187, 123, 118, 32, 189, 97, 180, 122, 188, 58, 179, 12, 60, 14, 63, 90, 60, 106, 211, 80, 61, 214, 213, 63, 60, 176, 43, 187, 188, 109, 188, 2, 61, 12, 236, 247, 187, 174, 182, 105, 191, 251, 165, 191, 190, 92, 216, 54, 190, 146, 36, 124, 189, 98, 218, 82, 61, 235, 26, 167, 61, 240, 64, 100, 187, 180, 83, 38, 60, 8, 239, 128, 60, 163, 194, 253, 60, 77, 202, 29, 61, 128, 159, 61, 61, 194, 150, 53, 61, 137, 202, 55, 189, 191, 64, 52, 60, 214, 166, 25, 188, 193, 208, 37, 60, 2, 250, 235, 60, 162, 141, 28, 61, 131, 10, 255, 60, 142, 0, 10, 61, 54, 244, 147, 60, 6, 226, 45, 60, 70, 199, 10, 188, 135, 233, 231, 188, 133, 55, 182, 188, 14, 23, 188, 60, 191, 150, 225, 60, 237, 99, 0, 61, 219, 161, 36, 61, 59, 251, 171, 60, 124, 219, 68, 60, 158, 217, 208, 60, 224, 153, 33, 61, 116, 39, 222, 60, 243, 149, 174, 60, 106, 131, 165, 58, 75, 4, 222, 188, 32, 121, 238, 188, 189, 56, 122, 191, 192, 203, 212, 190, 195, 145, 67, 190, 64, 39, 82, 189, 54, 181, 181, 61, 207, 90, 200, 61, 16, 225, 53, 61, 118, 41, 147, 61, 81, 105, 7, 61, 207, 168, 95, 61, 0, 167, 179, 60, 236, 104, 7, 61, 4, 146, 16, 61, 11, 113, 22, 190, 222, 149, 193, 188, 164, 82, 44, 187, 175, 121, 32, 188, 58, 222, 153, 188, 112, 104, 57, 189, 105, 170, 59, 189, 96, 203, 33, 189, 96, 225, 22, 189, 104, 235, 127, 188, 61, 77, 12, 60, 47, 125, 189, 60, 202, 184, 201, 60, 49, 45, 54, 188, 148, 47, 28, 189, 49, 30, 237, 188, 169, 120, 207, 188, 231, 113, 152, 187, 162, 30, 154, 60, 75, 228, 140, 188, 125, 83, 85, 189, 109, 5, 23, 189, 94, 39, 230, 188, 71, 252, 189, 188, 187, 62, 14, 60, 173, 255, 156, 60, 3, 51, 245, 190, 96, 192, 159, 190, 193, 137, 3, 190, 85, 202, 171, 58, 181, 79, 191, 61, 23, 111, 227, 61, 182, 165, 77, 61, 10, 160, 22, 61, 48, 113, 133, 60, 218, 191, 134, 60, 32, 193, 121, 189, 130, 251, 15, 188, 138, 183, 56, 59, 217, 19, 89, 190, 199, 41, 199, 189, 85, 144, 135, 59, 229, 151, 58, 189, 149, 143, 47, 189, 126, 191, 147, 188, 30, 19, 48, 61, 140, 246, 93, 61, 249, 148, 194, 60, 21, 236, 239, 60, 9, 197, 155, 58, 114, 120, 153, 60, 54, 217, 208, 60, 213, 242, 208, 61, 98, 130, 128, 61, 218, 140, 90, 59, 221, 0, 178, 188, 59, 237, 30, 189, 22, 203, 179, 189, 191, 228, 105, 189, 96, 80, 229, 188, 67, 113, 116, 188, 242, 37, 225, 187, 29, 53, 11, 61, 183, 106, 7, 61, 80, 237, 227, 60, 161, 155, 202, 190, 11, 27, 49, 190, 134, 197, 143, 61, 183, 138, 84, 60, 67, 127, 247, 61, 28, 108, 247, 61, 173, 250, 177, 61, 56, 20, 235, 61, 254, 177, 125, 61, 19, 240, 224, 60, 21, 187, 129, 61, 232, 39, 9, 61, 190, 69, 57, 61, 218, 183, 159, 190, 196, 197, 104, 190, 72, 193, 33, 190, 185, 177, 184, 189, 112, 153, 41, 189, 143, 43, 7, 189, 142, 48, 253, 188, 68, 165, 12, 188, 171, 212, 125, 60, 237, 200, 100, 60, 48, 0, 203, 60, 100, 2, 139, 60, 232, 70, 208, 60, 144, 92, 194, 61, 7, 230, 138, 61, 229, 82, 24, 61, 116, 123, 12, 60, 80, 103, 170, 188, 251, 11, 143, 188, 164, 140, 25, 189, 120, 59, 67, 189, 100, 253, 90, 189, 135, 70, 41, 189, 214, 87, 152, 188, 152, 0, 119, 59, 103, 194, 234, 187, 181, 14, 168, 191, 47, 246, 178, 190, 41, 159, 209, 188, 33, 212, 7, 189, 40, 211, 190, 61, 222, 27, 145, 61, 106, 20, 58, 60, 250, 122, 23, 61, 220, 251, 55, 60, 81, 113, 115, 188, 65, 219, 17, 61, 159, 9, 18, 188, 66, 98, 128, 188, 182, 225, 181, 189, 176, 249, 35, 188, 252, 84, 120, 60, 162, 226, 21, 61, 136, 187, 48, 61, 168, 24, 230, 60, 95, 156, 240, 60, 174, 70, 177, 60, 70, 179, 178, 60, 96, 23, 152, 60, 16, 33, 41, 59, 108, 183, 152, 188, 43, 165, 145, 188, 122, 135, 129, 188, 46, 235, 32, 189, 190, 58, 33, 189, 23, 179, 241, 188, 16, 142, 247, 188, 83, 199, 159, 188, 3, 34, 133, 59, 218, 163, 6, 61, 23, 230, 17, 61, 40, 190, 215, 60, 159, 181, 6, 61, 141, 213, 92, 61, 26, 147, 56, 61, 101, 136, 158, 191, 46, 68, 181, 190, 88, 44, 109, 189, 111, 149, 90, 189, 60, 145, 159, 61, 184, 108, 121, 61, 173, 194, 142, 185, 251, 88, 239, 60, 80, 238, 93, 187, 18, 48, 228, 188, 122, 10, 234, 60, 42, 49, 126, 60, 111, 243, 186, 60, 167, 180, 94, 189, 238, 189, 76, 61, 130, 83, 52, 61, 12, 167, 115, 60, 57, 147, 77, 59, 208, 237, 42, 188, 57, 69, 35, 189, 65, 6, 104, 189, 246, 79, 143, 189, 246, 8, 158, 189, 131, 215, 93, 189, 46, 104, 173, 188, 145, 147, 10, 188, 220, 199, 254, 187, 162, 41, 161, 187, 218, 102, 1, 60, 140, 191, 29, 186, 229, 40, 18, 60, 149, 150, 84, 187, 30, 97, 165, 59, 135, 43, 62, 60, 116, 99, 165, 60, 114, 1, 10, 61, 146, 188, 174, 60, 234, 234, 31, 187, 141, 232, 228, 188, 235, 1, 160, 191, 71, 180, 197, 190, 94, 211, 166, 189, 66, 88, 170, 189, 216, 65, 71, 61, 123, 240, 36, 61, 112, 168, 10, 60, 83, 200, 69, 61, 189, 141, 207, 60, 11, 202, 211, 58, 159, 197, 93, 61, 251, 237, 205, 60, 169, 156, 114, 60, 28, 78, 5, 190, 192, 110, 16, 189, 29, 9, 67, 189, 40, 203, 63, 189, 225, 139, 67, 189, 203, 3, 168, 188, 42, 29, 221, 186, 186, 46, 184, 60, 230, 91, 41, 61, 67, 30, 51, 61, 111, 251, 37, 61, 144, 37, 246, 60, 246, 131, 69, 60, 189, 99, 71, 61, 36, 209, 138, 61, 97, 88, 105, 61, 59, 80, 71, 61, 56, 46, 29, 61, 33, 183, 6, 61, 131, 105, 40, 59, 202, 228, 35, 189, 206, 174, 89, 189, 151, 4, 94, 189, 163, 141, 84, 189, 19, 124, 102, 189, 65, 218, 165, 188, 200, 93, 164, 191, 202, 65, 176, 190, 125, 19, 166, 189, 155, 122, 55, 188, 44, 21, 204, 61, 79, 195, 21, 62, 33, 28, 231, 186, 5, 29, 173, 60, 7, 127, 132, 187, 58, 149, 177, 60, 102, 99, 23, 61, 188, 97, 196, 60, 43, 48, 34, 189, 205, 45, 95, 62, 37, 56, 242, 61, 212, 238, 70, 61, 127, 227, 208, 60, 244, 53, 36, 61, 145, 231, 48, 61, 229, 112, 115, 60, 130, 67, 56, 61, 45, 115, 48, 61, 166, 131, 191, 60, 61, 70, 248, 60, 198, 99, 3, 61, 114, 26, 135, 60, 72, 197, 44, 63, 222, 238, 5, 63, 94, 167, 221, 62, 216, 224, 163, 62, 122, 165, 76, 62, 63, 71, 74, 61, 129, 192, 161, 61, 135, 246, 11, 188, 139, 2, 8, 188, 88, 134, 40, 189, 73, 0, 33, 189, 157, 121, 249, 189, 61, 241, 146, 188, 162, 109, 22, 192, 124, 121, 39, 191, 110, 115, 110, 188, 180, 19, 169, 61, 251, 75, 164, 62, 217, 6, 109, 62, 170, 207, 30, 189, 70, 67, 22, 61, 103, 220, 144, 187, 77, 240, 125, 187, 91, 23, 199, 60, 242, 52, 126, 60, 154, 18, 188, 60, 111, 128, 101, 189, 210, 180, 235, 59, 134, 22, 91, 187, 172, 73, 238, 60, 217, 180, 143, 61, 96, 27, 239, 60, 206, 67, 38, 61, 163, 232, 153, 60, 236, 207, 5, 187, 52, 196, 29, 61, 159, 164, 139, 58, 124, 244, 254, 188, 118, 210, 17, 188, 169, 219, 60, 61, 52, 115, 242, 60, 237, 251, 157, 59, 167, 242, 36, 189, 144, 18, 153, 189, 207, 7, 108, 189, 55, 33, 122, 189, 145, 238, 170, 186, 114, 12, 85, 61, 224, 211, 208, 61, 118, 197, 155, 61, 44, 185, 3, 61, 42, 3, 229, 188, 187, 110, 22, 192, 223, 119, 39, 191, 246, 21, 36, 189, 231, 4, 15, 62, 129, 142, 121, 62, 183, 162, 63, 62, 202, 102, 212, 189, 48, 214, 36, 59, 234, 25, 4, 60, 195, 51, 32, 61, 120, 138, 12, 61, 248, 25, 82, 61, 245, 169, 14, 189, 43, 129, 86, 60, 186, 99, 131, 188, 170, 254, 137, 188, 52, 136, 84, 189, 21, 52, 139, 189, 19, 183, 103, 188, 234, 239, 0, 188, 99, 180, 190, 187, 232, 247, 51, 58, 152, 126, 251, 188, 227, 140, 146, 59, 42, 15, 28, 61, 130, 206, 2, 60, 78, 73, 182, 60, 186, 196, 224, 188, 84, 247, 147, 188, 142, 175, 119, 60, 36, 186, 84, 61, 31, 90, 40, 61, 169, 190, 89, 61, 220, 219, 0, 60, 7, 252, 152, 189, 233, 202, 172, 189, 188, 110, 73, 189, 80, 244, 8, 189, 3, 240, 232, 60, 76, 140, 207, 191, 243, 204, 6, 191, 171, 29, 135, 190, 249, 205, 97, 61, 5, 232, 51, 62, 106, 72, 139, 62, 248, 187, 74, 188, 62, 145, 136, 61, 178, 240, 235, 188, 144, 158, 70, 61, 212, 74, 158, 61, 82, 159, 101, 60, 175, 161, 80, 58, 192, 23, 201, 189, 248, 221, 129, 188, 82, 51, 168, 59, 213, 75, 138, 60, 48, 250, 190, 186, 42, 242, 147, 188, 62, 253, 12, 188, 140, 255, 236, 59, 75, 144, 105, 60, 2, 45, 64, 60, 15, 229, 55, 188, 124, 56, 229, 188, 92, 69, 191, 188, 95, 92, 204, 189, 187, 82, 144, 189, 132, 59, 171, 188, 205, 199, 166, 59, 82, 44, 48, 61, 125, 175, 120, 60, 155, 228, 68, 59, 167, 237, 162, 59, 181, 42, 154, 60, 235, 122, 191, 188, 10, 112, 249, 188, 126, 162, 128, 185, 75, 173, 247, 57, 94, 122, 227, 191, 48, 68, 3, 191, 62, 214, 7, 190, 45, 213, 130, 188, 77, 94, 39, 62, 204, 1, 225, 61, 144, 36, 27, 188, 83, 105, 3, 62, 234, 146, 151, 61, 254, 155, 22, 62, 23, 83, 8, 61, 176, 225, 143, 61, 224, 82, 253, 61, 249, 157, 156, 61, 133, 79, 147, 62, 254, 39, 140, 62, 67, 21, 124, 62, 251, 36, 27, 62, 102, 65, 232, 60, 57, 172, 187, 61, 34, 168, 173, 61, 247, 248, 137, 61, 170, 231, 206, 61, 37, 223, 192, 60, 147, 138, 9, 60, 243, 43, 152, 61, 135, 140, 56, 63, 22, 192, 16, 63, 170, 219, 223, 62, 37, 124, 167, 62, 161, 61, 17, 62, 131, 62, 232, 61, 82, 140, 39, 61, 12, 166, 148, 189, 104, 249, 165, 189, 129, 161, 121, 188, 241, 248, 2, 60, 112, 16, 229, 189, 120, 45, 239, 189, 147, 124, 201, 191, 169, 240, 44, 191, 13, 153, 69, 190, 160, 205, 88, 189, 231, 69, 63, 62, 31, 39, 199, 61, 140, 223, 103, 59, 45, 193, 242, 61, 70, 244, 41, 61, 36, 219, 19, 62, 233, 223, 101, 61, 99, 49, 195, 61, 242, 54, 25, 62, 1, 110, 68, 190, 180, 214, 132, 189, 61, 155, 249, 188, 15, 109, 115, 188, 180, 114, 193, 59, 61, 90, 150, 60, 159, 4, 68, 186, 41, 186, 144, 187, 159, 57, 188, 187, 177, 60, 139, 60, 132, 116, 254, 60, 6, 111, 36, 61, 113, 155, 50, 61, 202, 103, 29, 189, 252, 238, 46, 189, 33, 116, 21, 189, 115, 127, 207, 187, 158, 62, 22, 60, 131, 35, 0, 60, 231, 152, 203, 60, 32, 172, 165, 60, 172, 57, 164, 60, 127, 228, 59, 61, 94, 74, 237, 60, 187, 119, 208, 60, 109, 57, 161, 60, 13, 141, 195, 191, 191, 161, 29, 191, 82, 255, 33, 190, 156, 186, 120, 189, 130, 168, 74, 62, 99, 170, 225, 61, 172, 13, 156, 60, 87, 107, 82, 61, 119, 20, 13, 189, 57, 207, 99, 61, 116, 4, 143, 188, 128, 209, 148, 61, 200, 141, 33, 62, 244, 41, 4, 190, 224, 181, 241, 187, 199, 58, 190, 59, 2, 114, 79, 187, 227, 3, 55, 188, 38, 2, 111, 188, 67, 50, 241, 187, 180, 78, 101, 188, 13, 105, 17, 60, 109, 187, 67, 188, 107, 3, 139, 188, 119, 178, 52, 188, 206, 143, 154, 188, 138, 149, 214, 61, 155, 232, 0, 62, 43, 52, 134, 61, 169, 61, 27, 61, 71, 169, 135, 60, 109, 63, 50, 60, 78, 61, 16, 189, 32, 83, 27, 189, 30, 46, 158, 188, 66, 181, 169, 189, 106, 246, 134, 189, 117, 122, 153, 189, 115, 170, 102, 189, 19, 237, 226, 191, 43, 130, 19, 191, 188, 50, 83, 190, 251, 73, 170, 189, 250, 164, 11, 62, 198, 181, 244, 61, 179, 156, 128, 61, 130, 9, 185, 61, 77, 76, 252, 60, 174, 35, 236, 61, 249, 241, 227, 187, 13, 107, 103, 61, 13, 196, 212, 61, 179, 189, 196, 188, 240, 145, 179, 61, 168, 241, 135, 61, 216, 170, 135, 60, 251, 0, 58, 61, 191, 125, 243, 187, 235, 251, 138, 188, 215, 231, 116, 60, 218, 20, 4, 60, 155, 230, 219, 187, 236, 191, 35, 189, 25, 225, 20, 189, 36, 68, 88, 186, 230, 33, 148, 61, 11, 117, 238, 60, 60, 125, 142, 61, 116, 50, 133, 61, 99, 101, 16, 60, 180, 141, 28, 189, 19, 110, 169, 56, 26, 236, 4, 61, 13, 222, 32, 60, 68, 67, 46, 61, 203, 35, 74, 61, 146, 146, 132, 61, 238, 181, 82, 61, 229, 35, 228, 191, 54, 203, 155, 190, 13, 68, 248, 188, 93, 69, 55, 189, 42, 248, 208, 61, 22, 199, 96, 61, 112, 221, 44, 60, 146, 193, 115, 61, 241, 67, 205, 60, 24, 77, 107, 60, 238, 248, 120, 61, 31, 103, 137, 60, 76, 237, 60, 61, 27, 21, 4, 63, 120, 10, 224, 62, 197, 221, 204, 62, 132, 245, 157, 62, 145, 21, 106, 62, 241, 96, 18, 62, 6, 91, 35, 62, 48, 49, 171, 61, 33, 211, 2, 59, 58, 247, 35, 61, 234, 113, 130, 188, 133, 206, 70, 189, 222, 252, 67, 189, 185, 62, 138, 63, 241, 246, 90, 63, 45, 6, 51, 63, 178, 49, 16, 63, 101, 28, 78, 62, 70, 72, 217, 187, 106, 133, 140, 189, 203, 99, 233, 189, 247, 218, 26, 190, 254, 75, 54, 190, 229, 84, 48, 190, 238, 215, 239, 189, 147, 162, 211, 189, 156, 210, 207, 191, 196, 47, 26, 190, 101, 117, 4, 62, 76, 144, 198, 61, 37, 150, 55, 62, 86, 128, 13, 62, 69, 223, 80, 61, 59, 173, 97, 60, 68, 151, 2, 188, 215, 165, 109, 189, 44, 102, 3, 188, 202, 29, 7, 189, 88, 217, 21, 189, 49, 213, 78, 62, 49, 90, 250, 61, 206, 65, 140, 61, 200, 242, 180, 61, 203, 232, 17, 62, 169, 207, 204, 61, 221, 6, 44, 61, 74, 41, 2, 61, 4, 55, 199, 60, 192, 152, 151, 60, 86, 102, 5, 61, 241, 205, 18, 61, 97, 31, 29, 188, 247, 197, 25, 190, 187, 161, 48, 190, 155, 206, 71, 190, 109, 201, 46, 190, 73, 73, 211, 189, 53, 247, 173, 189, 134, 75, 198, 188, 26, 176, 139, 61, 150, 68, 219, 60, 231, 247, 96, 61, 93, 18, 172, 61, 210, 8, 128, 60, 198, 189, 103, 61, 11, 6, 252, 191, 124, 242, 145, 190, 171, 56, 239, 59, 172, 145, 155, 184, 203, 46, 3, 62, 237, 242, 157, 61, 99, 98, 209, 187, 55, 118, 174, 186, 230, 153, 243, 188, 119, 96, 134, 189, 153, 12, 10, 61, 248, 122, 190, 60, 17, 56, 28, 61, 19, 145, 12, 190, 120, 95, 237, 189, 98, 70, 52, 190, 87, 168, 30, 190, 174, 0, 249, 189, 88, 218, 231, 189, 112, 216, 84, 187, 94, 98, 149, 187, 11, 108, 68, 59, 152, 181, 10, 60, 210, 148, 102, 58, 86, 241, 213, 59, 182, 219, 114, 61, 52, 106, 84, 61, 63, 223, 25, 61, 65, 11, 37, 61, 243, 188, 32, 61, 149, 219, 81, 59, 144, 181, 95, 59, 71, 108, 217, 60, 182, 210, 98, 61, 189, 78, 77, 61, 163, 64, 125, 61, 201, 249, 180, 188, 195, 251, 120, 189, 95, 9, 10, 189, 116, 23, 250, 191, 61, 229, 180, 190, 109, 194, 183, 189, 5, 137, 248, 189, 167, 36, 166, 61, 68, 46, 174, 60, 44, 188, 164, 188, 126, 244, 59, 61, 170, 153, 201, 59, 109, 102, 44, 188, 50, 114, 97, 61, 47, 58, 230, 59, 168, 206, 85, 60, 64, 166, 108, 62, 76, 29, 47, 61, 213, 88, 6, 62, 193, 199, 182, 60, 13, 110, 42, 61, 1, 149, 96, 61, 47, 175, 241, 60, 142, 33, 11, 61, 255, 48, 255, 188, 177, 83, 171, 60, 16, 76, 27, 188, 171, 229, 7, 186, 57, 17, 0, 61, 80, 104, 15, 63, 240, 51, 213, 62, 92, 123, 181, 62, 193, 4, 128, 62, 172, 248, 46, 62, 239, 96, 63, 62, 18, 119, 21, 62, 222, 137, 162, 60, 5, 22, 152, 189, 164, 116, 216, 189, 30, 227, 150, 189, 5, 181, 32, 188, 57, 144, 133, 189, 197, 7, 201, 191, 158, 152, 148, 190, 69, 35, 165, 59, 36, 163, 8, 61, 27, 231, 42, 62, 94, 180, 229, 61, 191, 70, 123, 61, 229, 201, 199, 61, 129, 121, 55, 61, 53, 74, 164, 61, 138, 82, 47, 61, 226, 81, 113, 60, 106, 61, 163, 61, 59, 240, 129, 63, 252, 36, 92, 63, 237, 175, 58, 63, 13, 242, 19, 63, 229, 186, 168, 62, 217, 88, 38, 62, 201, 94, 242, 61, 119, 5, 33, 61, 181, 171, 136, 189, 212, 154, 196, 189, 246, 68, 188, 189, 220, 194, 33, 190, 246, 213, 251, 189, 5, 13, 120, 63, 244, 0, 36, 63, 141, 150, 166, 62, 7, 165, 91, 62, 181, 189, 42, 59, 124, 248, 252, 189, 224, 90, 222, 189, 161, 159, 177, 189, 110, 130, 23, 190, 36, 140, 6, 190, 12, 28, 207, 189, 225, 67, 170, 189, 4, 203, 183, 189, 239, 166, 47, 191, 83, 226, 7, 63, 153, 49, 29, 63, 232, 133, 254, 62, 44, 243, 212, 62, 173, 222, 95, 62, 88, 232, 211, 61, 138, 6, 77, 61, 178, 179, 148, 189, 205, 142, 78, 189, 53, 103, 132, 189, 205, 7, 246, 189, 206, 222, 207, 189, 26, 208, 161, 63, 208, 230, 57, 63, 133, 50, 225, 62, 19, 202, 144, 62, 116, 19, 81, 61, 39, 120, 143, 189, 43, 84, 163, 188, 208, 216, 121, 189, 225, 208, 2, 190, 185, 184, 14, 189, 23, 144, 83, 189, 206, 189, 100, 189, 37, 136, 146, 189, 47, 249, 27, 62, 49, 113, 98, 190, 95, 149, 157, 190, 11, 10, 166, 190, 42, 50, 174, 190, 25, 155, 128, 190, 174, 9, 222, 189, 66, 50, 120, 189, 46, 54, 0, 189, 94, 136, 159, 61, 127, 250, 196, 61, 183, 78, 210, 61, 132, 102, 201, 61, 195, 207, 52, 191, 202, 244, 79, 62, 108, 64, 152, 62, 0, 8, 96, 62, 40, 210, 102, 62, 17, 28, 91, 62, 45, 172, 14, 62, 59, 36, 12, 62, 104, 165, 109, 189, 0, 98, 138, 189, 183, 222, 123, 189, 84, 201, 81, 188, 11, 61, 71, 61, 102, 82, 219, 63, 113, 241, 138, 63, 178, 136, 35, 63, 1, 42, 38, 62, 46, 53, 75, 190, 253, 129, 183, 190, 57, 73, 81, 190, 81, 118, 40, 190, 117, 217, 2, 190, 7, 216, 174, 189, 143, 160, 96, 188, 210, 218, 9, 189, 39, 51, 26, 189, 81, 39, 14, 63, 47, 112, 132, 62, 19, 118, 143, 189, 153, 130, 180, 190, 61, 199, 218, 190, 49, 72, 193, 190, 61, 96, 53, 190, 128, 147, 33, 189, 106, 155, 4, 62, 202, 185, 173, 61, 176, 169, 112, 61, 199, 51, 16, 61, 228, 151, 7, 189, 125, 135, 191, 191, 109, 245, 200, 190, 23, 81, 148, 59, 184, 191, 3, 61, 212, 209, 49, 62, 211, 103, 1, 62, 141, 134, 32, 61, 245, 89, 231, 61, 215, 180, 64, 61, 57, 131, 182, 60, 3, 22, 211, 60, 235, 227, 103, 61, 194, 90, 199, 61, 197, 231, 167, 63, 178, 208, 122, 63, 157, 25, 38, 63, 166, 115, 200, 62, 96, 31, 12, 188, 55, 102, 130, 190, 13, 42, 113, 190, 14, 105, 84, 190, 101, 111, 105, 190, 199, 137, 28, 190, 185, 200, 190, 189, 196, 182, 15, 189, 4, 174, 89, 60, 156, 125, 168, 63, 42, 184, 88, 63, 21, 33, 225, 62, 212, 80, 195, 61, 58, 138, 105, 190, 248, 236, 161, 190, 160, 246, 106, 190, 171, 169, 122, 190, 161, 14, 6, 190, 154, 203, 172, 189, 104, 242, 82, 189, 71, 161, 71, 189, 184, 16, 40, 188, 162, 193, 228, 190, 121, 100, 200, 189, 209, 168, 126, 61, 63, 193, 138, 189, 28, 254, 64, 189, 242, 242, 171, 189, 4, 221, 199, 189, 244, 244, 131, 60, 137, 244, 100, 189, 206, 204, 216, 58, 233, 99, 121, 189, 151, 130, 13, 61, 141, 139, 209, 61, 239, 78, 17, 191, 210, 48, 218, 190, 213, 245, 55, 190, 20, 62, 67, 61, 72, 65, 20, 62, 187, 82, 225, 61, 163, 49, 85, 61, 9, 57, 131, 187, 10, 82, 208, 187, 162, 203, 102, 61, 63, 163, 176, 61, 83, 110, 154, 61, 128, 218, 168, 61, 32, 14, 59, 62, 46, 73, 11, 62, 69, 143, 156, 61, 104, 173, 231, 188, 188, 138, 104, 186, 196, 4, 210, 188, 45, 192, 160, 187, 30, 70, 36, 188, 12, 116, 131, 61, 49, 253, 104, 61, 102, 212, 9, 187, 157, 104, 15, 189, 210, 95, 188, 188, 218, 184, 162, 63, 241, 237, 132, 63, 231, 107, 53, 63, 166, 126, 127, 60, 70, 126, 132, 190, 82, 222, 187, 190, 17, 181, 110, 190, 74, 206, 224, 189, 141, 96, 255, 189, 25, 251, 6, 190, 100, 184, 64, 190, 138, 36, 145, 189, 140, 193, 232, 60, 189, 110, 230, 190, 13, 101, 43, 190, 212, 242, 170, 60, 204, 142, 14, 62, 16, 124, 95, 62, 33, 159, 138, 61, 162, 60, 241, 189, 244, 87, 150, 189, 152, 203, 143, 189, 52, 57, 185, 60, 23, 249, 128, 59, 168, 172, 153, 187, 4, 28, 28, 61, 22, 217, 154, 189, 2, 120, 205, 189, 49, 140, 199, 189, 90, 93, 33, 189, 159, 44, 145, 188, 201, 252, 140, 60, 51, 219, 236, 60, 82, 111, 13, 61, 117, 75, 37, 61, 109, 43, 139, 61, 97, 59, 88, 61, 145, 25, 183, 60, 155, 81, 202, 188, 49, 58, 80, 62, 63, 115, 180, 62, 237, 161, 173, 62, 232, 12, 178, 188, 135, 174, 140, 189, 159, 194, 48, 190, 14, 107, 69, 190, 231, 207, 76, 189, 143, 163, 168, 189, 35, 166, 37, 189, 30, 242, 0, 190, 255, 59, 69, 189, 13, 67, 37, 61, 193, 188, 34, 191, 241, 7, 243, 190, 6, 59, 124, 190, 124, 75, 1, 189, 174, 210, 153, 61, 75, 127, 158, 61, 71, 71, 132, 61, 215, 233, 120, 61, 23, 38, 111, 61, 232, 244, 36, 61, 20, 2, 158, 60, 156, 81, 21, 61, 56, 0, 150, 60, 69, 208, 11, 188, 58, 153, 248, 187, 92, 77, 140, 188, 231, 233, 11, 187, 2, 232, 159, 187, 21, 93, 240, 60, 250, 216, 9, 61, 220, 233, 19, 187, 31, 218, 92, 189, 92, 141, 78, 189, 89, 93, 51, 59, 31, 114, 241, 60, 80, 186, 37, 61, 249, 233, 104, 63, 206, 125, 93, 63, 19, 144, 208, 62, 84, 243, 89, 190, 102, 162, 168, 190, 173, 120, 54, 190, 218, 254, 196, 189, 58, 91, 149, 189, 41, 172, 117, 190, 123, 10, 106, 190, 230, 139, 56, 190, 50, 200, 149, 189, 39, 80, 83, 61, 221, 210, 44, 191, 147, 172, 191, 190, 231, 144, 2, 190, 231, 200, 215, 60, 91, 102, 66, 61, 110, 94, 30, 60, 231, 3, 101, 189, 248, 38, 167, 61, 217, 54, 39, 62, 72, 229, 27, 62, 199, 188, 125, 61, 39, 18, 92, 60, 166, 246, 134, 59, 235, 167, 34, 187, 20, 21, 176, 189, 31, 50, 109, 189, 241, 216, 245, 188, 74, 88, 191, 188, 9, 203, 62, 189, 46, 232, 34, 59, 132, 173, 234, 186, 108, 27, 175, 60, 180, 214, 196, 60, 113, 62, 50, 61, 129, 225, 85, 60, 0, 210, 178, 186, 249, 186, 145, 63, 243, 216, 123, 63, 201, 153, 68, 63, 208, 182, 80, 62, 139, 202, 57, 189, 185, 3, 5, 190, 172, 232, 25, 190, 17, 172, 70, 189, 242, 124, 249, 189, 149, 164, 81, 190, 103, 239, 39, 190, 239, 19, 179, 189, 66, 203, 242, 58, 153, 179, 50, 191, 83, 252, 210, 190, 234, 11, 140, 189, 164, 66, 29, 62, 78, 129, 141, 62, 121, 3, 95, 62, 86, 53, 157, 60, 98, 131, 250, 188, 39, 203, 155, 61, 58, 103, 190, 61, 138, 240, 159, 61, 32, 221, 242, 187, 73, 245, 54, 189, 79, 40, 129, 188, 198, 189, 162, 59, 39, 247, 81, 60, 50, 133, 218, 60, 233, 245, 32, 189, 204, 49, 247, 188, 13, 8, 72, 60, 158, 95, 223, 188, 42, 103, 211, 188, 154, 131, 181, 188, 158, 129, 149, 188, 193, 116, 105, 188, 211, 233, 164, 188, 89, 125, 68, 62, 99, 105, 135, 62, 55, 50, 239, 62, 89, 49, 150, 62, 159, 190, 126, 62, 170, 187, 238, 61, 159, 243, 129, 188, 151, 86, 145, 188, 111, 210, 182, 189, 55, 206, 18, 190, 195, 119, 175, 189, 155, 177, 175, 189, 243, 220, 229, 188, 232, 160, 7, 191, 200, 24, 209, 190, 52, 120, 136, 190, 243, 65, 192, 189, 210, 110, 100, 60, 200, 37, 165, 61, 252, 151, 237, 61, 99, 144, 202, 61, 239, 143, 92, 61, 14, 195, 85, 61, 105, 37, 15, 61, 126, 93, 30, 61, 103, 178, 158, 60, 102, 189, 85, 61, 176, 232, 5, 61, 191, 23, 52, 188, 208, 230, 195, 189, 88, 43, 249, 189, 117, 197, 197, 189, 113, 212, 66, 189, 194, 168, 63, 188, 14, 199, 169, 60, 198, 56, 58, 61, 25, 172, 88, 61, 244, 31, 116, 61, 196, 209, 69, 59, 77, 126, 76, 63, 84, 183, 40, 63, 100, 41, 44, 63, 31, 230, 143, 62, 238, 197, 206, 61, 115, 25, 123, 189, 178, 101, 29, 190, 68, 45, 4, 190, 134, 9, 0, 190, 174, 57, 231, 189, 51, 31, 85, 189, 118, 140, 177, 189, 246, 145, 185, 189, 127, 240, 30, 191, 128, 148, 225, 190, 122, 68, 125, 190, 179, 213, 61, 189, 33, 223, 187, 61, 70, 132, 216, 61, 48, 69, 139, 61, 230, 143, 48, 60, 140, 201, 45, 188, 60, 172, 112, 189, 102, 151, 133, 188, 247, 5, 144, 59, 37, 171, 46, 61, 127, 162, 7, 190, 70, 74, 29, 190, 10, 203, 30, 190, 141, 142, 148, 189, 10, 200, 193, 188, 113, 161, 13, 61, 182, 196, 155, 61, 170, 40, 180, 61, 176, 43, 27, 61, 97, 149, 1, 61, 24, 35, 146, 58, 63, 247, 211, 60, 208, 163, 33, 61, 229, 54, 146, 190, 54, 134, 232, 189, 228, 86, 46, 62, 130, 118, 184, 61, 221, 81, 1, 62, 97, 250, 203, 61, 10, 123, 145, 59, 196, 129, 201, 60, 81, 167, 176, 188, 120, 229, 86, 189, 14, 16, 163, 187, 96, 87, 227, 187, 128, 78, 201, 188, 228, 191, 229, 190, 226, 237, 178, 190, 144, 154, 134, 190, 33, 32, 54, 190, 112, 117, 156, 189, 117, 174, 163, 187, 190, 216, 95, 187, 231, 112, 177, 60, 249, 227, 125, 61, 153, 238, 131, 61, 100, 63, 147, 61, 55, 64, 143, 61, 212, 165, 63, 60, 126, 59, 44, 62, 7, 79, 38, 62, 150, 198, 8, 62, 7, 13, 119, 61, 76, 136, 75, 61, 1, 203, 172, 187, 11, 23, 50, 189, 162, 123, 91, 189, 38, 81, 109, 189, 176, 115, 60, 189, 161, 177, 163, 188, 238, 2, 129, 189, 166, 249, 63, 188, 29, 75, 222, 189, 183, 251, 36, 190, 214, 27, 64, 61, 8, 28, 211, 188, 156, 243, 132, 187, 241, 235, 52, 189, 95, 59, 85, 60, 219, 72, 136, 61, 70, 122, 15, 61, 145, 154, 57, 188, 234, 100, 102, 189, 111, 185, 121, 60, 145, 18, 64, 60, 81, 208, 147, 189, 68, 121, 54, 60, 88, 129, 97, 59, 136, 104, 16, 61, 112, 77, 38, 60, 5, 67, 117, 60, 213, 217, 29, 59, 93, 198, 234, 60, 73, 101, 188, 60, 158, 242, 230, 59, 182, 175, 169, 60, 176, 246, 148, 188, 16, 115, 75, 188, 171, 197, 27, 61, 36, 160, 84, 188, 122, 210, 142, 59, 180, 147, 143, 187, 178, 165, 160, 60, 152, 67, 181, 60, 109, 35, 193, 188, 156, 91, 104, 189, 184, 180, 213, 188, 93, 121, 48, 61, 161, 169, 23, 60, 32, 175, 31, 59, 159, 224, 6, 189, 19, 190, 48, 192, 41, 255, 237, 190, 210, 54, 157, 59, 15, 246, 6, 62, 123, 101, 173, 189, 234, 228, 118, 189, 213, 33, 28, 62, 82, 243, 185, 60, 132, 102, 90, 61, 133, 247, 129, 189, 170, 180, 254, 60, 138, 111, 74, 61, 164, 180, 191, 188, 98, 144, 149, 60, 188, 97, 9, 61, 75, 76, 144, 60, 223, 242, 249, 58, 174, 19, 5, 61, 244, 72, 174, 60, 78, 229, 179, 188, 32, 130, 15, 61, 86, 126, 41, 61, 130, 40, 43, 188, 89, 4, 154, 188, 0, 98, 59, 60, 2, 166, 192, 187, 240, 185, 188, 188, 92, 246, 117, 61, 218, 11, 147, 60, 159, 65, 158, 188, 252, 218, 148, 61, 86, 132, 32, 61, 94, 31, 41, 61, 61, 124, 27, 61, 27, 20, 144, 188, 12, 180, 42, 61, 132, 62, 140, 188, 182, 161, 221, 60, 204, 138, 238, 60, 119, 246, 37, 190, 155, 9, 140, 190, 98, 4, 20, 60, 52, 94, 36, 190, 104, 232, 86, 61, 163, 186, 174, 187, 127, 126, 126, 187, 56, 57, 41, 61, 4, 174, 43, 189, 26, 91, 183, 61, 45, 139, 121, 188, 57, 112, 20, 61, 197, 50, 136, 189, 235, 155, 167, 188, 202, 25, 209, 61, 140, 223, 56, 189, 52, 163, 111, 189, 51, 79, 62, 189, 253, 139, 73, 188, 78, 127, 137, 187, 150, 167, 236, 59, 55, 27, 76, 188, 236, 204, 231, 188, 25, 237, 165, 189, 25, 31, 29, 189, 130, 61, 233, 60, 34, 209, 67, 190, 62, 175, 212, 187, 133, 106, 77, 188, 95, 14, 214, 61, 220, 109, 78, 188, 1, 174, 237, 187, 227, 95, 182, 60, 9, 78, 119, 188, 233, 54, 139, 61, 71, 97, 206, 189, 23, 3, 168, 61, 199, 19, 7, 187, 36, 247, 132, 61, 3, 222, 41, 192, 155, 90, 190, 190, 161, 92, 133, 60, 147, 23, 65, 61, 3, 114, 16, 189, 108, 192, 211, 58, 120, 93, 37, 62, 215, 112, 12, 188, 180, 227, 128, 60, 60, 197, 136, 189, 45, 74, 253, 60, 26, 183, 167, 188, 251, 72, 179, 189, 17, 201, 174, 189, 56, 76, 226, 189, 81, 110, 161, 188, 117, 200, 129, 187, 104, 115, 71, 189, 98, 43, 29, 189, 61, 107, 108, 61, 82, 163, 123, 188, 158, 107, 43, 189, 252, 218, 111, 60, 70, 24, 42, 61, 19, 226, 56, 61, 60, 89, 214, 59, 47, 168, 197, 61, 223, 116, 131, 188, 174, 174, 39, 58, 133, 98, 52, 60, 4, 129, 32, 189, 192, 240, 118, 189, 115, 252, 175, 189, 8, 173, 54, 189, 94, 32, 103, 189, 150, 187, 204, 188, 50, 245, 138, 187, 18, 102, 28, 189, 115, 219, 107, 189, 65, 199, 160, 191, 85, 237, 205, 190, 38, 119, 33, 189, 244, 88, 22, 189, 179, 98, 169, 61, 237, 120, 130, 61, 204, 142, 193, 186, 48, 184, 241, 60, 190, 187, 86, 60, 225, 204, 167, 59, 130, 5, 137, 61, 120, 47, 12, 61, 149, 1, 237, 60, 21, 83, 198, 189, 62, 166, 130, 188, 211, 11, 235, 187, 241, 102, 204, 186, 12, 152, 118, 60, 218, 114, 192, 60, 133, 125, 230, 60, 225, 58, 17, 61, 24, 152, 217, 60, 172, 97, 174, 60, 145, 61, 154, 187, 165, 157, 174, 188, 248, 57, 221, 188, 160, 177, 29, 62, 225, 100, 9, 62, 175, 50, 209, 61, 239, 248, 102, 61, 105, 121, 14, 61, 10, 116, 223, 60, 39, 18, 209, 60, 91, 184, 85, 60, 235, 77, 75, 188, 134, 47, 73, 189, 73, 165, 144, 189, 70, 38, 126, 189, 209, 243, 135, 189, 70, 115, 142, 191, 54, 134, 165, 190, 31, 242, 67, 61, 221, 46, 4, 61, 167, 143, 15, 62, 219, 176, 239, 61, 189, 127, 140, 60, 88, 183, 42, 61, 35, 115, 95, 59, 86, 192, 41, 189, 202, 50, 188, 58, 204, 31, 50, 187, 239, 109, 99, 187, 110, 227, 235, 189, 142, 9, 63, 188, 54, 109, 19, 60, 77, 174, 18, 60, 54, 191, 173, 59, 209, 48, 134, 187, 76, 253, 151, 186, 9, 162, 191, 186, 46, 176, 206, 187, 68, 193, 159, 188, 242, 106, 214, 187, 61, 225, 219, 187, 170, 41, 66, 60, 238, 40, 142, 188, 44, 168, 191, 188, 217, 194, 77, 189, 215, 202, 128, 189, 133, 29, 96, 189, 163, 230, 54, 189, 186, 177, 229, 188, 104, 146, 164, 188, 253, 230, 196, 58, 77, 241, 59, 61, 1, 206, 92, 61, 161, 121, 22, 61, 173, 246, 2, 61, 103, 218, 167, 191, 42, 38, 193, 190, 208, 133, 165, 189, 234, 109, 208, 189, 124, 190, 252, 60, 225, 195, 224, 60, 239, 136, 114, 59, 234, 113, 121, 61, 78, 199, 37, 61, 157, 68, 182, 60, 137, 87, 130, 61, 190, 70, 106, 60, 162, 43, 165, 60, 40, 175, 144, 189, 233, 75, 17, 60, 24, 240, 12, 187, 19, 204, 67, 58, 154, 143, 36, 187, 217, 227, 32, 188, 4, 68, 42, 188, 252, 254, 169, 188, 143, 179, 144, 188, 232, 13, 228, 187, 201, 161, 69, 57, 50, 105, 205, 60, 174, 76, 191, 60, 65, 140, 169, 59, 199, 111, 238, 59, 183, 159, 237, 60, 175, 66, 71, 61, 153, 229, 93, 61, 118, 209, 31, 61, 90, 54, 173, 59, 176, 29, 62, 189, 137, 176, 171, 189, 220, 137, 165, 189, 3, 105, 60, 189, 61, 35, 66, 188, 149, 75, 168, 59, 243, 213, 149, 191, 69, 175, 181, 190, 215, 36, 87, 189, 37, 185, 134, 189, 10, 126, 128, 61, 239, 240, 17, 61, 124, 160, 189, 187, 52, 115, 27, 186, 34, 112, 44, 189, 215, 43, 77, 189, 78, 80, 26, 60, 73, 207, 142, 188, 123, 170, 8, 60, 100, 105, 214, 189, 20, 112, 138, 188, 106, 90, 2, 189, 140, 179, 218, 188, 160, 75, 192, 188, 120, 140, 83, 188, 162, 106, 168, 187, 198, 138, 101, 58, 182, 102, 167, 59, 245, 95, 91, 60, 215, 23, 32, 60, 242, 245, 91, 186, 241, 246, 61, 185, 174, 249, 178, 189, 166, 5, 139, 189, 252, 231, 77, 189, 163, 33, 221, 188, 35, 117, 202, 188, 4, 152, 166, 188, 34, 47, 190, 59, 179, 237, 132, 61, 184, 173, 211, 61, 207, 206, 172, 61, 162, 234, 103, 61, 81, 115, 21, 61, 129, 139, 135, 60, 252, 143, 182, 191, 223, 94, 161, 190, 50, 206, 84, 60, 1, 168, 28, 188, 112, 222, 164, 59, 131, 129, 37, 189, 129, 164, 244, 188, 75, 13, 248, 61, 46, 55, 170, 60, 9, 236, 169, 188, 75, 10, 217, 60, 232, 247, 183, 61, 135, 35, 178, 61, 48, 186, 111, 189, 247, 210, 161, 61, 153, 41, 211, 59, 32, 42, 52, 60, 92, 173, 193, 59, 53, 81, 98, 60, 236, 78, 137, 61, 208, 42, 21, 61, 137, 11, 200, 60, 62, 140, 200, 187, 210, 31, 143, 186, 116, 243, 153, 60, 154, 85, 147, 60, 108, 115, 40, 61, 173, 197, 201, 61, 212, 251, 194, 61, 209, 76, 188, 61, 67, 63, 170, 61, 186, 155, 67, 60, 59, 128, 244, 187, 204, 144, 113, 189, 147, 94, 86, 189, 200, 162, 232, 187, 93, 201, 147, 189, 137, 38, 155, 189, 48, 3, 37, 189, 155, 49, 225, 191, 56, 216, 188, 190, 118, 30, 101, 61, 187, 2, 1, 190, 85, 28, 98, 59, 84, 58, 12, 62, 168, 6, 200, 59, 167, 239, 211, 188, 58, 15, 154, 60, 230, 142, 0, 61, 79, 48, 25, 61, 243, 110, 198, 60, 143, 119, 191, 188, 75, 224, 193, 188, 220, 26, 12, 61, 181, 138, 240, 60, 64, 77, 141, 60, 28, 204, 248, 60, 193, 163, 194, 187, 61, 204, 160, 59, 140, 205, 87, 61, 46, 87, 135, 60, 243, 158, 114, 186, 16, 17, 139, 187, 4, 178, 56, 188, 232, 155, 130, 188, 254, 241, 153, 189, 148, 67, 174, 188, 31, 65, 5, 189, 166, 92, 93, 189, 176, 212, 242, 188, 31, 178, 208, 187, 142, 17, 17, 61, 6, 154, 146, 61, 11, 191, 242, 60, 148, 70, 34, 59, 159, 238, 228, 186, 63, 92, 44, 60, 135, 35, 165, 61, 147, 76, 211, 191, 78, 232, 194, 190, 89, 32, 234, 60, 84, 11, 21, 190, 16, 94, 26, 61, 181, 39, 56, 62, 73, 164, 5, 60, 142, 6, 137, 188, 200, 121, 22, 188, 19, 146, 240, 59, 57, 191, 26, 60, 228, 103, 108, 59, 205, 238, 2, 60, 222, 18, 170, 189, 131, 199, 236, 189, 150, 19, 166, 189, 131, 89, 13, 189, 229, 51, 198, 189, 188, 243, 160, 188, 127, 239, 247, 188, 120, 34, 8, 189, 122, 95, 187, 60, 143, 227, 217, 188, 220, 207, 31, 188, 84, 248, 14, 61, 154, 239, 194, 60, 190, 220, 35, 62, 66, 200, 113, 61, 40, 33, 50, 60, 181, 9, 254, 185, 220, 136, 191, 188, 126, 115, 136, 59, 183, 244, 50, 188, 45, 190, 1, 189, 80, 18, 152, 60, 16, 183, 25, 187, 92, 179, 118, 59, 154, 18, 34, 61, 209, 7, 34, 189, 194, 78, 185, 191, 50, 22, 146, 190, 126, 24, 148, 61, 172, 226, 142, 188, 234, 48, 142, 60, 212, 124, 39, 189, 204, 85, 245, 59, 75, 208, 146, 61, 234, 104, 36, 188, 66, 252, 136, 188, 77, 246, 119, 60, 188, 141, 82, 60, 86, 145, 139, 60, 54, 245, 178, 189, 238, 192, 45, 187, 135, 202, 39, 60, 28, 54, 41, 60, 117, 177, 204, 60, 165, 145, 74, 60, 2, 137, 251, 188, 39, 166, 128, 189, 203, 208, 2, 189, 110, 3, 95, 60, 150, 249, 229, 59, 212, 73, 77, 188, 183, 150, 89, 188, 58, 25, 125, 188, 103, 232, 122, 189, 112, 115, 31, 189, 185, 53, 225, 188, 147, 125, 109, 188, 36, 37, 219, 59, 179, 231, 140, 58, 2, 116, 11, 60, 237, 196, 90, 57, 195, 154, 71, 185, 218, 230, 238, 60, 103, 47, 153, 59, 231, 72, 165, 187, 10, 154, 200, 191, 161, 9, 36, 191, 15, 142, 4, 190, 18, 84, 26, 189, 48, 183, 43, 62, 153, 146, 169, 61, 19, 168, 21, 60, 252, 225, 196, 61, 164, 132, 16, 61, 161, 120, 221, 61, 145, 29, 247, 60, 47, 180, 186, 61, 86, 249, 32, 62, 222, 187, 20, 185, 191, 75, 70, 61, 155, 36, 63, 61, 137, 58, 119, 61, 22, 78, 56, 61, 4, 217, 255, 60, 132, 249, 214, 60, 61, 204, 10, 61, 29, 43, 58, 187, 255, 0, 7, 189, 18, 88, 182, 188, 60, 127, 233, 187, 26, 210, 157, 188, 220, 144, 202, 61, 207, 165, 176, 61, 83, 101, 186, 61, 13, 57, 80, 61, 49, 10, 239, 60, 95, 8, 33, 188, 38, 143, 26, 189, 236, 78, 21, 189, 40, 16, 67, 189, 144, 218, 7, 60, 183, 28, 88, 58, 24, 200, 142, 188, 157, 120, 211, 60, 202, 158, 123, 191, 228, 240, 181, 190, 54, 118, 8, 190, 234, 111, 64, 189, 248, 81, 231, 59, 65, 186, 132, 61, 137, 145, 87, 60, 215, 215, 106, 61, 202, 85, 116, 60, 181, 163, 81, 61, 224, 57, 51, 60, 158, 186, 80, 61, 171, 189, 53, 61, 27, 77, 188, 189, 218, 4, 58, 186, 49, 115, 143, 187, 251, 69, 134, 60, 58, 2, 219, 60, 190, 244, 146, 59, 4, 89, 186, 60, 86, 96, 166, 60, 245, 193, 136, 188, 111, 96, 71, 188, 32, 79, 118, 187, 66, 213, 197, 58, 46, 10, 137, 60, 117, 89, 29, 189, 234, 11, 12, 189, 42, 8, 182, 187, 187, 176, 92, 188, 47, 220, 146, 60, 152, 198, 47, 60, 251, 50, 36, 60, 106, 238, 197, 59, 193, 144, 253, 59, 52, 6, 143, 60, 168, 121, 20, 61, 209, 124, 17, 61, 7, 5, 46, 60, 162, 231, 165, 191, 170, 19, 10, 191, 209, 132, 0, 190, 83, 39, 150, 189, 197, 178, 208, 61, 0, 79, 80, 61, 36, 39, 223, 188, 74, 248, 0, 61, 114, 122, 98, 59, 29, 243, 165, 61, 228, 70, 212, 60, 238, 133, 150, 61, 146, 129, 23, 62, 239, 67, 86, 190, 16, 144, 149, 189, 223, 89, 64, 189, 230, 219, 155, 188, 195, 17, 179, 60, 98, 72, 109, 60, 192, 82, 153, 56, 191, 73, 88, 187, 163, 50, 4, 61, 24, 63, 45, 61, 58, 32, 9, 61, 97, 216, 126, 60, 58, 100, 74, 59, 202, 137, 237, 61, 146, 205, 244, 61, 127, 95, 0, 61, 81, 227, 65, 61, 180, 62, 0, 61, 71, 160, 38, 61, 238, 208, 94, 61, 190, 63, 199, 59, 113, 230, 139, 189, 144, 45, 222, 189, 139, 135, 237, 189, 232, 109, 160, 189, 7, 199, 135, 189, 148, 109, 125, 191, 225, 221, 211, 190, 226, 149, 142, 189, 225, 130, 19, 189, 61, 196, 20, 62, 170, 33, 207, 61, 138, 2, 56, 59, 24, 180, 204, 60, 110, 112, 132, 189, 15, 183, 191, 187, 183, 162, 118, 189, 120, 31, 181, 59, 149, 171, 177, 61, 234, 232, 89, 190, 59, 210, 174, 189, 122, 147, 130, 189, 69, 89, 40, 189, 132, 215, 180, 188, 41, 248, 202, 60, 47, 203, 134, 59, 191, 206, 68, 188, 48, 225, 216, 60, 73, 44, 231, 60, 176, 145, 23, 188, 86, 214, 197, 188, 220, 227, 75, 188, 8, 99, 25, 189, 157, 145, 27, 189, 6, 30, 212, 188, 92, 2, 204, 188, 166, 170, 177, 189, 13, 99, 121, 189, 203, 14, 62, 189, 90, 126, 120, 60, 13, 190, 143, 61, 186, 56, 72, 61, 102, 110, 82, 61, 159, 195, 84, 61, 104, 122, 254, 60, 103, 217, 238, 191, 88, 8, 173, 190, 1, 185, 119, 189, 112, 160, 180, 189, 255, 56, 162, 61, 171, 134, 54, 61, 63, 41, 30, 61, 228, 134, 85, 61, 99, 79, 245, 60, 9, 245, 181, 60, 246, 29, 5, 61, 217, 197, 235, 60, 61, 45, 253, 58, 151, 74, 73, 63, 230, 173, 57, 63, 61, 236, 30, 63, 227, 138, 253, 62, 32, 208, 185, 62, 115, 196, 34, 62, 20, 229, 227, 58, 87, 251, 40, 187, 183, 167, 90, 189, 223, 181, 147, 189, 155, 161, 178, 189, 144, 103, 135, 189, 27, 39, 190, 188, 212, 66, 178, 63, 49, 133, 137, 63, 143, 214, 94, 63, 157, 149, 29, 63, 171, 222, 15, 62, 233, 3, 91, 189, 88, 151, 55, 190, 87, 92, 128, 190, 178, 176, 105, 190, 65, 248, 230, 189, 145, 224, 200, 188, 62, 160, 155, 189, 29, 178, 129, 60, 61, 57, 154, 191, 127, 29, 132, 62, 55, 91, 243, 62, 214, 187, 179, 62, 156, 73, 198, 62, 127, 164, 62, 62, 119, 66, 127, 61, 80, 33, 215, 60, 95, 58, 178, 189, 60, 162, 81, 189, 208, 132, 220, 188, 192, 10, 139, 189, 140, 21, 52, 189, 193, 194, 148, 63, 109, 165, 98, 63, 52, 0, 56, 63, 70, 153, 4, 63, 115, 9, 87, 62, 103, 12, 251, 187, 176, 198, 247, 189, 193, 173, 13, 190, 65, 32, 237, 189, 26, 87, 8, 189, 1, 123, 166, 59, 75, 116, 39, 186, 197, 2, 11, 189, 210, 212, 149, 62, 49, 18, 22, 189, 61, 172, 68, 190, 109, 176, 252, 189, 130, 61, 47, 190, 98, 154, 42, 190, 95, 79, 217, 189, 62, 209, 132, 189, 219, 18, 119, 60, 132, 243, 160, 61, 175, 202, 251, 60, 254, 222, 225, 61, 253, 148, 181, 61, 243, 137, 223, 191, 87, 2, 182, 190, 204, 91, 0, 61, 5, 89, 59, 61, 58, 71, 50, 62, 49, 96, 243, 61, 30, 177, 119, 61, 200, 250, 144, 61, 224, 46, 152, 187, 251, 138, 111, 59, 50, 181, 40, 188, 70, 159, 141, 59, 74, 176, 86, 61, 197, 216, 110, 63, 186, 213, 79, 63, 20, 58, 27, 63, 102, 203, 216, 62, 223, 198, 87, 62, 159, 100, 133, 60, 46, 246, 143, 189, 216, 201, 11, 190, 237, 51, 47, 190, 139, 134, 250, 189, 174, 108, 187, 189, 229, 233, 225, 189, 227, 116, 105, 189, 222, 148, 178, 63, 142, 8, 33, 63, 227, 177, 116, 62, 56, 140, 89, 62, 28, 99, 48, 188, 201, 49, 119, 190, 162, 135, 134, 190, 66, 96, 59, 190, 106, 156, 235, 188, 122, 157, 168, 61, 143, 239, 50, 189, 162, 200, 149, 189, 56, 61, 132, 60, 77, 101, 234, 191, 170, 43, 205, 190, 25, 191, 217, 189, 9, 38, 109, 189, 152, 153, 140, 61, 23, 148, 82, 61, 28, 3, 168, 60, 130, 133, 38, 61, 38, 112, 110, 186, 201, 3, 212, 187, 117, 16, 148, 188, 9, 93, 209, 59, 166, 85, 35, 61, 43, 125, 166, 61, 202, 175, 57, 62, 176, 255, 53, 62, 120, 82, 237, 61, 59, 242, 55, 62, 178, 245, 244, 61, 94, 104, 138, 61, 237, 128, 116, 60, 57, 214, 183, 187, 109, 35, 223, 188, 127, 188, 185, 188, 117, 160, 183, 59, 86, 118, 245, 188, 182, 103, 133, 63, 61, 46, 98, 63, 229, 116, 56, 63, 58, 190, 21, 63, 159, 170, 165, 62, 24, 90, 189, 61, 254, 179, 211, 189, 122, 93, 251, 189, 242, 244, 167, 189, 95, 2, 117, 188, 22, 29, 148, 189, 21, 197, 21, 190, 109, 98, 169, 189, 233, 50, 127, 190, 5, 28, 247, 189, 92, 38, 217, 60, 235, 17, 74, 188, 52, 88, 88, 61, 23, 133, 41, 62, 207, 99, 8, 189, 215, 114, 194, 189, 27, 186, 202, 60, 184, 236, 145, 61, 27, 108, 131, 61, 199, 14, 100, 61, 157, 123, 20, 61, 1, 146, 48, 64, 120, 190, 180, 63, 55, 157, 68, 62, 254, 241, 168, 187, 255, 118, 87, 190, 208, 109, 33, 190, 169, 124, 151, 61, 85, 230, 223, 188, 220, 186, 142, 188, 235, 65, 202, 189, 157, 193, 87, 60, 179, 80, 128, 61, 79, 117, 252, 189, 149, 243, 15, 64, 39, 65, 92, 63, 29, 48, 204, 189, 111, 138, 88, 190, 206, 191, 159, 190, 254, 119, 15, 190, 201, 152, 60, 189, 161, 150, 171, 189, 62, 157, 208, 189, 208, 3, 132, 189, 12, 245, 238, 60, 103, 240, 188, 61, 56, 97, 83, 189, 193, 166, 161, 190, 176, 51, 59, 190, 174, 191, 220, 189, 66, 229, 150, 190, 119, 86, 121, 189, 91, 253, 219, 61, 142, 194, 24, 190, 205, 80, 12, 190, 98, 120, 18, 190, 79, 20, 119, 61, 218, 249, 7, 62, 28, 41, 199, 61, 63, 163, 203, 61, 192, 198, 206, 62, 222, 30, 58, 189, 183, 22, 135, 59, 146, 153, 18, 61, 234, 138, 222, 188, 33, 122, 15, 189, 190, 82, 216, 189, 99, 71, 186, 188, 24, 66, 216, 61, 4, 230, 158, 61, 218, 182, 71, 188, 162, 198, 166, 189, 164, 221, 142, 61, 144, 132, 198, 189, 225, 28, 6, 61, 73, 204, 130, 61, 5, 117, 37, 62, 255, 10, 221, 61, 229, 116, 242, 60, 28, 19, 16, 62, 195, 0, 93, 61, 124, 131, 205, 61, 23, 45, 67, 189, 243, 2, 152, 189, 173, 190, 6, 189, 45, 59, 174, 187, 166, 221, 25, 188, 12, 209, 194, 189, 56, 140, 127, 190, 63, 198, 144, 190, 217, 234, 96, 190, 233, 51, 158, 62, 76, 62, 170, 61, 27, 7, 6, 190, 9, 151, 1, 190, 102, 117, 83, 190, 96, 240, 68, 62, 11, 216, 33, 62, 192, 162, 163, 61, 99, 239, 49, 63, 192, 95, 125, 61, 119, 183, 3, 190, 78, 234, 37, 190, 246, 174, 6, 190, 244, 6, 18, 62, 13, 204, 92, 61, 224, 240, 202, 189, 37, 18, 228, 189, 183, 40, 154, 189, 90, 216, 207, 61, 100, 61, 23, 61, 90, 214, 132, 60, 124, 53, 179, 189, 204, 31, 37, 189, 166, 144, 28, 61, 212, 230, 77, 61, 93, 17, 18, 188, 95, 120, 183, 189, 162, 192, 25, 189, 177, 16, 98, 61, 164, 61, 114, 61, 17, 20, 151, 61, 203, 166, 48, 189, 43, 211, 46, 189, 226, 46, 192, 59, 167, 173, 231, 191, 228, 227, 215, 190, 146, 127, 134, 188, 232, 105, 31, 188, 127, 82, 162, 61, 167, 84, 244, 61, 232, 4, 170, 59, 248, 100, 5, 61, 17, 102, 60, 187, 76, 206, 97, 58, 105, 102, 132, 61, 248, 172, 105, 61, 109, 182, 89, 61, 61, 169, 16, 64, 200, 30, 169, 63, 5, 218, 131, 62, 239, 123, 67, 190, 69, 248, 164, 190, 180, 57, 130, 190, 139, 87, 51, 190, 33, 134, 44, 190, 88, 214, 10, 190, 203, 197, 54, 189, 223, 80, 29, 62, 105, 44, 144, 61, 222, 122, 35, 190, 38, 201, 28, 64, 45, 119, 152, 63, 94, 234, 63, 189, 146, 202, 131, 190, 148, 162, 147, 190, 52, 99, 60, 190, 238, 157, 104, 189, 29, 26, 173, 189, 13, 77, 5, 190, 70, 122, 45, 190, 99, 235, 210, 61, 207, 125, 176, 61, 32, 235, 21, 190, 216, 99, 13, 63, 203, 3, 156, 190, 181, 160, 94, 190, 242, 42, 201, 189, 158, 231, 16, 189, 124, 193, 133, 62, 203, 42, 29, 190, 2, 108, 97, 190, 106, 201, 92, 61, 167, 171, 183, 61, 209, 150, 173, 61, 110, 101, 147, 189, 167, 253, 7, 62, 178, 5, 86, 63, 42, 167, 51, 63, 246, 24, 147, 61, 205, 4, 236, 61, 190, 94, 135, 61, 194, 114, 103, 61, 167, 174, 252, 61, 187, 251, 129, 187, 0, 221, 237, 61, 1, 26, 172, 189, 175, 130, 221, 189, 74, 88, 33, 188, 34, 35, 95, 189, 227, 58, 179, 63, 91, 46, 65, 63, 169, 121, 136, 61, 111, 172, 49, 190, 18, 72, 35, 190, 229, 21, 65, 190, 108, 111, 91, 61, 59, 117, 70, 61, 253, 22, 24, 189, 246, 106, 48, 60, 154, 14, 142, 189, 199, 192, 26, 61, 52, 246, 231, 189, 43, 238, 87, 64, 19, 144, 208, 63, 194, 28, 153, 189, 2, 168, 112, 190, 135, 158, 229, 190, 146, 57, 156, 190, 173, 90, 28, 189, 52, 183, 174, 185, 106, 230, 245, 189, 57, 157, 116, 190, 60, 187, 95, 62, 240, 238, 88, 62, 96, 94, 104, 190, 37, 109, 26, 64, 43, 192, 230, 62, 51, 33, 221, 190, 4, 38, 185, 189, 47, 39, 195, 190, 90, 206, 40, 190, 201, 121, 82, 62, 7, 18, 155, 61, 100, 3, 0, 60, 151, 20, 215, 189, 14, 110, 151, 188, 9, 97, 138, 61, 181, 134, 53, 190, 81, 224, 13, 192, 108, 7, 147, 191, 36, 126, 54, 61, 98, 95, 45, 62, 180, 186, 38, 62, 19, 254, 112, 62, 70, 197, 190, 61, 200, 237, 143, 188, 48, 130, 150, 61, 71, 56, 17, 62, 65, 169, 178, 189, 88, 196, 107, 189, 23, 16, 42, 62, 174, 163, 11, 64, 221, 182, 149, 63, 217, 229, 21, 62, 99, 110, 116, 190, 96, 85, 136, 190, 135, 64, 189, 60, 122, 196, 150, 189, 99, 10, 47, 190, 5, 221, 8, 60, 180, 204, 145, 59, 253, 198, 47, 61, 248, 20, 102, 61, 255, 167, 13, 189, 49, 161, 109, 64, 78, 15, 191, 63, 154, 155, 162, 188, 48, 99, 162, 190, 30, 85, 249, 190, 174, 247, 114, 190, 178, 81, 140, 61, 196, 105, 14, 189, 134, 210, 177, 189, 251, 181, 6, 190, 235, 60, 167, 60, 226, 202, 211, 61, 185, 181, 90, 190, 195, 67, 43, 191, 16, 202, 110, 191, 113, 127, 255, 190, 12, 235, 159, 189, 68, 191, 238, 188, 246, 151, 36, 61, 44, 115, 175, 61, 125, 123, 196, 61, 214, 228, 182, 188, 92, 146, 175, 188, 81, 245, 54, 61, 185, 177, 56, 188, 65, 48, 91, 188, 39, 64, 86, 64, 128, 105, 34, 63, 163, 86, 133, 190, 112, 12, 214, 190, 11, 146, 196, 190, 162, 32, 25, 62, 38, 191, 212, 187, 70, 68, 64, 190, 90, 138, 161, 189, 36, 214, 166, 188, 188, 217, 182, 60, 28, 24, 218, 188, 50, 175, 139, 188, 185, 189, 32, 63, 119, 187, 134, 189, 139, 151, 241, 189, 92, 142, 209, 189, 241, 29, 2, 61, 233, 46, 65, 60, 74, 152, 133, 189, 138, 231, 214, 188, 22, 140, 18, 189, 248, 222, 48, 61, 116, 141, 202, 60, 95, 202, 197, 59, 238, 254, 195, 187, 108, 98, 145, 191, 208, 183, 88, 190, 81, 200, 11, 62, 33, 223, 80, 62, 58, 126, 56, 62, 200, 151, 234, 60, 210, 196, 75, 60, 100, 199, 187, 61, 184, 210, 251, 60, 98, 63, 142, 189, 215, 230, 235, 59, 52, 29, 93, 188, 40, 149, 128, 187, 136, 222, 231, 63, 83, 113, 160, 63, 107, 17, 167, 62, 185, 27, 94, 190, 102, 81, 202, 190, 1, 144, 235, 189, 166, 207, 33, 62, 15, 62, 10, 62, 6, 19, 22, 190, 182, 221, 48, 190, 236, 180, 234, 188, 32, 163, 88, 61, 92, 234, 200, 188, 249, 68, 40, 191, 193, 21, 155, 190, 153, 63, 205, 58, 26, 100, 80, 61, 81, 169, 23, 62, 214, 54, 248, 60, 146, 176, 122, 58, 150, 242, 180, 61, 237, 163, 129, 61, 185, 7, 232, 61, 107, 140, 53, 189, 11, 116, 130, 189, 55, 194, 154, 61, 119, 200, 221, 61, 142, 151, 248, 188, 22, 47, 131, 60, 234, 25, 120, 61, 142, 153, 94, 189, 212, 188, 150, 189, 172, 226, 136, 189, 40, 245, 189, 189, 246, 220, 46, 61, 107, 28, 149, 60, 24, 138, 68, 60, 50, 23, 10, 61, 0, 44, 39, 189, 134, 167, 130, 64, 57, 72, 219, 63, 27, 117, 132, 190, 111, 211, 185, 190, 44, 43, 40, 191, 45, 42, 143, 190, 44, 173, 30, 189, 195, 57, 169, 61, 173, 78, 108, 61, 21, 82, 164, 190, 48, 141, 16, 62, 104, 14, 95, 62, 221, 21, 135, 190, 170, 143, 186, 188, 173, 181, 103, 60, 118, 177, 215, 61, 254, 73, 139, 60, 54, 238, 44, 190, 127, 106, 158, 189, 70, 128, 153, 61, 173, 78, 189, 187, 12, 103, 22, 188, 46, 201, 37, 187, 192, 53, 117, 188, 209, 207, 204, 187, 72, 38, 117, 61, 118, 124, 16, 191, 192, 170, 144, 60, 68, 141, 141, 62, 202, 121, 163, 61, 138, 105, 147, 60, 54, 201, 203, 59, 15, 216, 94, 189, 191, 95, 212, 189, 44, 43, 94, 189, 36, 37, 251, 60, 71, 213, 131, 188, 17, 41, 112, 186, 109, 92, 140, 61, 149, 9, 102, 64, 181, 254, 162, 63, 172, 27, 15, 190, 106, 251, 86, 190, 67, 41, 73, 191, 199, 125, 106, 190, 57, 241, 104, 62, 69, 136, 79, 189, 247, 235, 65, 61, 199, 168, 158, 190, 128, 26, 236, 61, 190, 94, 142, 62, 161, 174, 177, 190, 165, 82, 62, 189, 81, 207, 134, 189, 95, 148, 9, 62, 77, 254, 180, 61, 207, 20, 29, 190, 53, 135, 174, 189, 221, 193, 37, 61, 165, 206, 218, 188, 250, 187, 192, 188, 16, 80, 246, 188, 230, 69, 80, 189, 250, 95, 100, 60, 112, 93, 227, 185, 91, 158, 60, 191, 126, 227, 136, 60, 214, 183, 89, 62, 129, 17, 4, 189, 58, 41, 112, 62, 238, 98, 194, 61, 173, 51, 49, 190, 186, 200, 134, 189, 199, 64, 226, 189, 238, 202, 25, 61, 176, 20, 195, 188, 67, 252, 176, 189, 207, 122, 208, 61, 86, 168, 70, 64, 163, 92, 195, 63, 234, 31, 135, 62, 216, 180, 60, 190, 171, 237, 45, 191, 8, 139, 149, 190, 131, 28, 49, 61, 123, 73, 206, 189, 38, 163, 233, 189, 143, 56, 137, 190, 74, 47, 252, 60, 183, 24, 66, 62, 146, 125, 59, 190, 170, 194, 147, 191, 143, 175, 35, 188, 174, 159, 131, 62, 186, 238, 14, 61, 73, 184, 161, 62, 23, 213, 90, 62, 189, 247, 203, 60, 193, 56, 50, 61, 239, 183, 68, 190, 44, 156, 2, 189, 227, 94, 91, 189, 241, 215, 6, 190, 163, 154, 145, 61, 226, 187, 221, 61, 31, 172, 104, 190, 230, 208, 148, 190, 155, 32, 165, 189, 169, 33, 225, 61, 98, 208, 12, 62, 148, 245, 68, 62, 128, 107, 85, 62, 74, 84, 147, 61, 86, 112, 39, 187, 139, 144, 35, 59, 135, 171, 44, 189, 16, 23, 53, 60, 168, 70, 103, 63, 61, 204, 237, 62, 16, 148, 247, 62, 49, 211, 34, 62, 37, 175, 225, 61, 234, 11, 134, 61, 40, 30, 225, 60, 28, 178, 216, 61, 127, 95, 80, 189, 10, 42, 141, 61, 163, 230, 90, 61, 105, 197, 170, 61, 88, 12, 25, 60, 224, 54, 217, 190, 181, 192, 113, 190, 170, 240, 166, 189, 17, 26, 135, 61, 41, 204, 244, 61, 107, 223, 132, 61, 232, 204, 209, 60, 178, 235, 218, 59, 60, 138, 53, 61, 147, 0, 209, 187, 108, 140, 230, 187, 170, 18, 154, 188, 105, 36, 82, 59, 160, 152, 12, 60, 22, 160, 144, 60]).concat([88, 253, 66, 189, 207, 18, 131, 189, 180, 226, 116, 189, 0, 211, 231, 188, 254, 62, 101, 59, 215, 102, 9, 60, 25, 99, 92, 60, 240, 247, 164, 188, 202, 29, 61, 58, 102, 14, 37, 188, 252, 217, 194, 59, 88, 86, 103, 64, 47, 28, 176, 63, 69, 83, 130, 190, 250, 127, 37, 191, 127, 141, 199, 190, 108, 154, 17, 62, 145, 157, 58, 62, 208, 75, 167, 189, 73, 9, 70, 190, 126, 33, 151, 61, 217, 182, 97, 61, 169, 19, 205, 186, 218, 3, 117, 189, 106, 55, 136, 190, 142, 28, 233, 61, 102, 154, 38, 62, 93, 241, 96, 189, 152, 207, 39, 189, 127, 134, 6, 190, 95, 45, 49, 60, 13, 148, 223, 61, 195, 26, 59, 189, 93, 244, 8, 189, 161, 164, 57, 61, 113, 145, 206, 59, 147, 218, 4, 61, 107, 143, 20, 190, 29, 207, 68, 188, 12, 115, 184, 61, 159, 38, 93, 61, 35, 235, 49, 188, 106, 254, 136, 188, 129, 101, 12, 189, 37, 77, 151, 188, 178, 138, 46, 61, 234, 119, 219, 60, 218, 157, 209, 188, 60, 222, 243, 59, 106, 171, 144, 60, 120, 99, 178, 63, 151, 168, 120, 63, 45, 93, 243, 62, 126, 20, 12, 190, 220, 204, 141, 190, 178, 36, 215, 189, 2, 121, 40, 60, 76, 117, 21, 61, 252, 22, 218, 189, 100, 208, 5, 190, 251, 63, 172, 188, 136, 112, 26, 61, 149, 210, 23, 60, 221, 94, 54, 191, 52, 54, 234, 190, 16, 75, 149, 189, 34, 254, 4, 62, 0, 223, 72, 62, 200, 87, 217, 61, 218, 194, 154, 60, 0, 12, 25, 61, 189, 182, 50, 61, 253, 210, 98, 61, 25, 186, 113, 60, 64, 43, 126, 59, 7, 166, 5, 61, 7, 30, 196, 61, 148, 7, 46, 188, 136, 30, 40, 189, 244, 194, 225, 188, 100, 98, 75, 188, 116, 241, 123, 59, 50, 99, 72, 60, 155, 22, 23, 187, 127, 77, 99, 60, 103, 196, 76, 61, 255, 99, 13, 60, 97, 244, 10, 60, 37, 14, 56, 59, 154, 150, 70, 64, 104, 22, 204, 63, 10, 37, 130, 62, 196, 56, 142, 190, 20, 190, 35, 191, 48, 192, 176, 190, 136, 110, 195, 61, 139, 58, 212, 188, 139, 29, 44, 190, 188, 10, 14, 190, 99, 87, 155, 61, 249, 218, 209, 61, 235, 56, 144, 189, 161, 51, 17, 191, 94, 143, 74, 189, 158, 128, 174, 62, 100, 181, 148, 61, 12, 84, 122, 60, 227, 6, 219, 58, 156, 247, 185, 189, 187, 131, 173, 188, 68, 200, 200, 59, 3, 175, 168, 188, 158, 181, 181, 189, 119, 170, 182, 188, 217, 169, 42, 61, 186, 234, 164, 190, 10, 181, 232, 189, 38, 249, 46, 189, 68, 217, 42, 61, 56, 9, 29, 62, 148, 46, 161, 61, 198, 110, 48, 188, 175, 48, 94, 60, 204, 186, 35, 188, 93, 58, 228, 188, 8, 193, 97, 60, 184, 64, 211, 187, 68, 59, 13, 188, 190, 27, 238, 190, 87, 58, 92, 63, 47, 124, 86, 63, 159, 171, 14, 63, 229, 32, 174, 62, 127, 230, 207, 60, 19, 255, 187, 189, 88, 3, 215, 189, 243, 213, 45, 190, 86, 216, 137, 189, 41, 194, 129, 60, 206, 181, 61, 189, 117, 159, 226, 188, 71, 206, 195, 63, 29, 202, 66, 63, 245, 55, 171, 62, 159, 35, 234, 61, 124, 60, 17, 190, 34, 145, 135, 190, 157, 85, 50, 190, 34, 71, 163, 189, 101, 146, 204, 59, 55, 80, 6, 62, 240, 158, 213, 61, 201, 118, 192, 60, 161, 193, 178, 61, 160, 229, 13, 63, 182, 56, 182, 190, 31, 6, 254, 190, 176, 183, 247, 190, 41, 243, 172, 190, 68, 161, 254, 189, 144, 101, 3, 62, 124, 146, 23, 62, 35, 78, 54, 62, 212, 246, 115, 61, 60, 77, 58, 60, 117, 217, 183, 188, 4, 192, 162, 60, 222, 14, 167, 191, 229, 63, 128, 190, 13, 10, 208, 61, 165, 126, 45, 62, 215, 111, 129, 62, 197, 111, 21, 62, 130, 139, 149, 61, 112, 185, 138, 61, 78, 53, 30, 61, 159, 142, 97, 61, 242, 72, 90, 61, 76, 146, 112, 186, 180, 207, 197, 60, 210, 0, 21, 64, 73, 69, 215, 63, 126, 177, 128, 63, 159, 17, 191, 62, 141, 203, 205, 189, 254, 252, 191, 190, 214, 71, 161, 190, 7, 226, 102, 190, 100, 96, 82, 190, 194, 209, 53, 190, 183, 179, 66, 190, 198, 106, 22, 190, 89, 32, 190, 189, 217, 118, 145, 63, 250, 209, 75, 63, 63, 11, 145, 62, 187, 101, 135, 190, 89, 170, 6, 191, 196, 206, 195, 190, 141, 44, 39, 190, 97, 162, 174, 188, 118, 191, 101, 61, 201, 253, 44, 189, 97, 128, 77, 189, 90, 96, 145, 59, 183, 172, 99, 60, 46, 131, 89, 62, 18, 47, 74, 63, 163, 76, 74, 63, 175, 204, 210, 62, 130, 46, 106, 62, 97, 101, 162, 189, 141, 97, 140, 190, 64, 116, 133, 190, 226, 172, 143, 190, 88, 49, 48, 190, 87, 224, 250, 189, 57, 35, 73, 189, 232, 199, 232, 60, 180, 11, 3, 64, 58, 91, 192, 63, 249, 71, 106, 63, 15, 247, 173, 62, 57, 116, 108, 190, 198, 154, 236, 190, 37, 137, 202, 190, 157, 185, 185, 190, 86, 124, 97, 190, 84, 96, 4, 190, 214, 40, 194, 189, 50, 59, 103, 189, 178, 255, 2, 189, 173, 194, 81, 61, 153, 54, 133, 190, 10, 196, 238, 190, 20, 173, 180, 190, 184, 98, 175, 190, 121, 61, 62, 190, 123, 234, 155, 61, 76, 162, 81, 62, 107, 218, 79, 62, 32, 188, 37, 62, 163, 164, 203, 61, 190, 122, 9, 189, 66, 100, 124, 187, 226, 131, 170, 191, 39, 127, 138, 188, 9, 183, 143, 62, 236, 112, 52, 62, 118, 91, 78, 62, 190, 198, 42, 61, 62, 111, 220, 189, 65, 128, 172, 189, 247, 209, 86, 189, 89, 54, 182, 188, 196, 20, 33, 189, 44, 224, 248, 60, 175, 135, 51, 61, 94, 165, 1, 64, 4, 200, 188, 63, 131, 141, 78, 63, 71, 116, 189, 61, 216, 105, 238, 190, 216, 211, 24, 191, 239, 125, 215, 190, 161, 167, 138, 190, 210, 216, 44, 190, 22, 109, 179, 189, 49, 63, 175, 189, 223, 18, 201, 189, 160, 23, 13, 189, 8, 247, 149, 63, 121, 199, 252, 62, 82, 201, 12, 62, 144, 100, 13, 190, 169, 187, 232, 190, 11, 95, 172, 190, 213, 224, 123, 60, 192, 156, 97, 61, 58, 4, 142, 61, 45, 166, 76, 61, 116, 15, 172, 189, 126, 38, 252, 188, 210, 55, 71, 60, 16, 96, 39, 64, 168, 181, 202, 63, 198, 64, 22, 63, 51, 234, 166, 190, 121, 77, 66, 191, 169, 27, 168, 190, 143, 74, 87, 189, 32, 250, 216, 188, 141, 184, 91, 189, 155, 2, 30, 190, 180, 123, 55, 189, 115, 249, 54, 60, 225, 91, 193, 61, 96, 191, 139, 63, 33, 10, 78, 62, 138, 84, 193, 189, 193, 106, 216, 190, 50, 138, 36, 191, 169, 234, 187, 61, 112, 5, 208, 61, 231, 208, 17, 59, 222, 203, 143, 188, 253, 1, 237, 189, 11, 165, 17, 60, 246, 61, 43, 62, 249, 22, 66, 61, 36, 224, 172, 191, 79, 226, 3, 191, 122, 200, 185, 61, 99, 7, 1, 63, 139, 223, 7, 63, 107, 180, 64, 62, 208, 199, 233, 188, 18, 152, 87, 189, 133, 37, 29, 189, 89, 93, 37, 62, 78, 36, 185, 61, 124, 46, 6, 61, 26, 95, 68, 189, 2, 20, 29, 63, 249, 11, 148, 63, 240, 125, 95, 63, 147, 184, 109, 62, 88, 84, 61, 190, 4, 248, 214, 190, 231, 85, 187, 190, 153, 120, 69, 190, 103, 102, 1, 190, 147, 147, 150, 189, 52, 101, 180, 189, 193, 48, 7, 189, 22, 52, 35, 61, 250, 131, 177, 63, 143, 153, 47, 63, 0, 160, 53, 62, 148, 255, 100, 190, 184, 110, 9, 191, 129, 192, 186, 190, 122, 48, 8, 189, 78, 132, 214, 61, 61, 54, 13, 62, 93, 65, 149, 59, 99, 221, 51, 189, 135, 253, 61, 189, 253, 189, 202, 60, 193, 125, 53, 191, 99, 44, 65, 191, 154, 200, 249, 190, 93, 230, 2, 190, 214, 145, 250, 61, 242, 125, 153, 62, 158, 182, 173, 62, 37, 241, 118, 62, 123, 241, 29, 62, 112, 98, 102, 61, 52, 36, 220, 186, 111, 60, 189, 60, 146, 147, 165, 188, 252, 36, 164, 63, 228, 152, 130, 63, 230, 108, 42, 63, 71, 192, 165, 62, 87, 65, 0, 190, 200, 155, 151, 190, 248, 75, 204, 187, 78, 162, 209, 189, 245, 72, 30, 189, 255, 40, 73, 188, 107, 209, 68, 189, 88, 146, 154, 189, 85, 178, 84, 189, 236, 225, 19, 64, 119, 173, 164, 62, 131, 195, 128, 190, 209, 59, 230, 190, 56, 114, 21, 191, 223, 205, 76, 190, 32, 121, 2, 62, 183, 78, 105, 60, 245, 171, 160, 186, 23, 38, 81, 189, 18, 4, 146, 189, 158, 175, 200, 58, 7, 241, 222, 60, 156, 182, 216, 189, 78, 14, 44, 188, 169, 234, 235, 189, 44, 32, 149, 190, 211, 6, 41, 190, 172, 169, 41, 62, 146, 61, 51, 189, 139, 76, 87, 188, 61, 24, 244, 189, 219, 56, 4, 190, 8, 30, 138, 189, 138, 230, 23, 61, 157, 216, 201, 60, 142, 118, 105, 63, 223, 163, 167, 63, 33, 25, 99, 63, 56, 37, 159, 62, 220, 179, 203, 189, 2, 184, 193, 190, 120, 222, 120, 190, 85, 162, 231, 189, 152, 193, 159, 189, 102, 28, 132, 189, 35, 243, 242, 189, 116, 76, 47, 190, 175, 127, 246, 189, 238, 154, 54, 64, 85, 199, 204, 63, 140, 43, 53, 63, 14, 108, 56, 189, 49, 197, 58, 191, 134, 10, 33, 191, 193, 60, 117, 190, 27, 32, 15, 190, 114, 248, 141, 60, 86, 248, 183, 189, 167, 250, 59, 190, 186, 244, 1, 190, 189, 174, 212, 189, 154, 140, 176, 191, 61, 123, 163, 191, 226, 117, 76, 191, 246, 55, 232, 190, 209, 173, 64, 190, 115, 168, 102, 62, 117, 228, 122, 62, 202, 22, 1, 62, 83, 142, 54, 62, 33, 202, 144, 61, 135, 232, 46, 62, 114, 198, 79, 62, 55, 14, 66, 62, 103, 92, 245, 63, 152, 130, 158, 63, 130, 20, 34, 63, 76, 38, 43, 190, 3, 3, 200, 190, 105, 131, 104, 190, 101, 152, 69, 61, 176, 84, 36, 62, 155, 173, 136, 188, 255, 216, 18, 189, 215, 127, 152, 189, 134, 147, 83, 185, 165, 31, 195, 61, 38, 232, 119, 190, 94, 174, 59, 190, 159, 223, 113, 61, 141, 131, 71, 62, 138, 226, 50, 62, 138, 246, 204, 60, 29, 97, 179, 188, 35, 223, 150, 188, 214, 46, 141, 60, 22, 183, 140, 61, 247, 215, 28, 60, 40, 150, 34, 188, 0, 21, 214, 188, 195, 239, 237, 60, 22, 156, 98, 187, 53, 168, 131, 60, 245, 241, 81, 60, 113, 216, 217, 188, 203, 146, 158, 57, 8, 96, 11, 189, 12, 157, 1, 189, 9, 145, 168, 188, 238, 69, 90, 60, 177, 39, 217, 60, 166, 245, 136, 60, 133, 203, 195, 188, 139, 179, 188, 63, 250, 148, 123, 63, 230, 162, 75, 63, 208, 208, 93, 62, 118, 171, 70, 189, 255, 202, 26, 190, 91, 1, 241, 189, 193, 60, 157, 187, 244, 160, 114, 189, 184, 163, 134, 61, 148, 13, 143, 59, 102, 84, 242, 188, 71, 61, 187, 189, 231, 167, 17, 190, 95, 127, 30, 189, 52, 27, 203, 60, 70, 116, 146, 61, 41, 195, 165, 61, 243, 183, 107, 60, 68, 13, 129, 189, 43, 255, 170, 189, 20, 217, 46, 189, 149, 16, 255, 188, 122, 252, 175, 60, 51, 16, 183, 188, 246, 23, 136, 189, 24, 92, 51, 189, 164, 95, 171, 188, 124, 145, 229, 188, 10, 75, 180, 188, 67, 228, 163, 57, 73, 64, 85, 187, 255, 143, 135, 60, 185, 217, 242, 59, 112, 230, 188, 59, 51, 51, 39, 189, 95, 98, 159, 188, 114, 191, 174, 187, 152, 94, 251, 60, 61, 89, 221, 63, 179, 152, 182, 63, 126, 92, 101, 63, 154, 131, 13, 62, 21, 74, 242, 190, 75, 85, 10, 191, 156, 44, 62, 190, 168, 61, 132, 189, 80, 85, 201, 189, 0, 154, 13, 190, 153, 54, 75, 190, 157, 126, 10, 190, 132, 95, 159, 59, 72, 27, 62, 62, 110, 191, 29, 188, 76, 5, 211, 188, 84, 105, 82, 188, 61, 155, 51, 61, 248, 210, 132, 61, 78, 206, 40, 61, 232, 195, 122, 60, 29, 200, 68, 189, 202, 26, 139, 189, 225, 119, 241, 188, 224, 62, 168, 58, 140, 51, 77, 59, 169, 58, 105, 190, 211, 89, 207, 189, 49, 222, 23, 189, 85, 250, 115, 60, 180, 144, 184, 61, 142, 142, 146, 61, 100, 64, 143, 188, 90, 132, 72, 188, 248, 203, 154, 187, 231, 237, 169, 58, 135, 202, 175, 60, 235, 24, 164, 60, 206, 227, 236, 59, 145, 39, 42, 64, 29, 178, 191, 63, 159, 32, 19, 63, 68, 179, 194, 190, 172, 63, 79, 191, 92, 44, 61, 190, 106, 144, 180, 188, 69, 62, 29, 61, 161, 111, 22, 190, 168, 56, 42, 190, 125, 150, 60, 59, 169, 250, 255, 61, 5, 85, 4, 62, 14, 74, 27, 190, 207, 10, 81, 189, 151, 94, 216, 186, 245, 96, 187, 188, 194, 227, 149, 61, 185, 52, 139, 188, 105, 221, 204, 60, 214, 150, 151, 61, 72, 117, 28, 61, 177, 64, 251, 60, 29, 224, 161, 188, 111, 188, 210, 188, 51, 155, 173, 59, 234, 236, 176, 189, 40, 255, 229, 59, 159, 105, 119, 60, 204, 232, 0, 61, 39, 171, 112, 61, 181, 171, 213, 188, 123, 228, 182, 59, 29, 97, 22, 60, 194, 128, 255, 60, 116, 51, 76, 60, 131, 184, 211, 188, 34, 128, 75, 189, 226, 189, 174, 187, 156, 47, 81, 64, 20, 203, 152, 63, 253, 234, 145, 62, 154, 38, 142, 190, 235, 46, 107, 191, 223, 36, 150, 189, 241, 116, 238, 61, 99, 185, 16, 60, 190, 6, 41, 188, 239, 130, 63, 189, 58, 227, 14, 61, 7, 86, 124, 61, 216, 91, 47, 62, 131, 127, 89, 190, 45, 200, 91, 189, 78, 56, 1, 60, 26, 227, 253, 60, 237, 250, 21, 62, 122, 229, 112, 60, 195, 106, 118, 187, 111, 48, 163, 59, 221, 217, 56, 61, 175, 75, 150, 59, 87, 40, 19, 186, 185, 219, 228, 188, 124, 27, 244, 188, 116, 71, 15, 188, 95, 122, 169, 187, 163, 180, 164, 60, 52, 9, 95, 188, 29, 46, 139, 61, 54, 124, 40, 189, 48, 200, 43, 189, 250, 51, 28, 60, 175, 254, 76, 60, 111, 134, 17, 187, 154, 140, 104, 188, 89, 150, 191, 187, 164, 191, 230, 188, 253, 146, 25, 64, 178, 115, 178, 63, 226, 71, 73, 63, 98, 193, 145, 61, 247, 172, 140, 190, 147, 139, 208, 190, 76, 228, 127, 190, 67, 152, 21, 190, 201, 167, 139, 189, 31, 188, 254, 187, 9, 73, 183, 189, 60, 171, 190, 189, 244, 246, 146, 188, 94, 110, 159, 62, 164, 65, 25, 62, 146, 98, 208, 60, 32, 255, 134, 189, 17, 153, 236, 189, 221, 8, 176, 189, 48, 3, 180, 188, 55, 19, 160, 60, 234, 15, 115, 60, 121, 57, 130, 60, 54, 215, 136, 189, 184, 215, 27, 189, 136, 75, 191, 188, 147, 112, 15, 190, 40, 214, 205, 189, 49, 186, 75, 189, 218, 212, 76, 61, 134, 186, 85, 61, 111, 179, 43, 61, 149, 252, 92, 61, 138, 177, 132, 60, 104, 66, 120, 188, 147, 91, 43, 189, 192, 138, 138, 187, 208, 43, 185, 59, 3, 169, 91, 185, 148, 199, 90, 64, 230, 146, 211, 63, 27, 26, 131, 62, 105, 190, 202, 190, 82, 190, 50, 191, 125, 142, 226, 190, 115, 207, 50, 58, 152, 203, 142, 61, 202, 194, 193, 61, 80, 120, 205, 189, 117, 179, 187, 189, 179, 242, 225, 61, 216, 139, 108, 61, 88, 153, 36, 62, 125, 165, 10, 190, 84, 10, 159, 189, 58, 61, 174, 61, 0, 164, 252, 61, 115, 226, 209, 60, 155, 8, 147, 61, 15, 245, 13, 190, 4, 49, 147, 189, 111, 179, 169, 188, 118, 80, 80, 60, 163, 197, 200, 60, 44, 25, 69, 189, 216, 159, 90, 190, 42, 125, 190, 189, 219, 65, 64, 61, 212, 117, 142, 61, 43, 99, 171, 60, 114, 222, 73, 61, 24, 237, 146, 187, 240, 151, 231, 187, 41, 58, 78, 188, 8, 17, 42, 188, 154, 8, 171, 188, 148, 227, 9, 189, 201, 183, 172, 188, 133, 98, 139, 64, 252, 152, 198, 63, 162, 70, 95, 62, 121, 168, 145, 62, 78, 87, 98, 191, 33, 128, 221, 190, 166, 21, 154, 62, 115, 41, 148, 190, 129, 21, 233, 189, 115, 25, 222, 189, 226, 42, 126, 190, 0, 62, 34, 190, 177, 35, 254, 189, 214, 143, 7, 63, 187, 71, 28, 60, 255, 65, 127, 189, 212, 154, 134, 61, 160, 113, 129, 61, 251, 215, 159, 188, 7, 216, 164, 60, 113, 239, 120, 189, 240, 26, 153, 189, 119, 209, 92, 189, 206, 111, 87, 188, 155, 22, 41, 189, 224, 79, 26, 188, 142, 201, 5, 190, 255, 236, 225, 188, 96, 149, 196, 188, 243, 235, 188, 188, 4, 47, 215, 188, 101, 225, 133, 188, 131, 28, 104, 60, 38, 146, 199, 59, 182, 194, 51, 188, 153, 148, 142, 59, 39, 202, 39, 61, 202, 125, 245, 60, 181, 136, 88, 60, 212, 71, 233, 63, 250, 35, 173, 63, 231, 227, 129, 63, 124, 76, 58, 189, 1, 63, 242, 190, 204, 141, 6, 191, 191, 14, 134, 190, 88, 215, 236, 188, 92, 233, 56, 189, 87, 162, 205, 189, 241, 81, 82, 190, 217, 5, 8, 190, 239, 189, 44, 61, 118, 190, 203, 62, 135, 120, 170, 187, 91, 120, 225, 59, 58, 185, 203, 189, 233, 61, 25, 189, 75, 250, 172, 59, 56, 107, 181, 61, 6, 230, 91, 61, 44, 172, 8, 188, 172, 8, 46, 189, 175, 67, 35, 189, 173, 153, 160, 188, 133, 179, 105, 60, 23, 108, 128, 190, 216, 31, 251, 189, 104, 92, 39, 188, 98, 138, 240, 61, 115, 31, 38, 62, 48, 245, 12, 61, 19, 231, 30, 189, 51, 212, 161, 189, 199, 74, 136, 189, 101, 121, 181, 60, 41, 102, 118, 61, 21, 96, 108, 61, 40, 109, 38, 189, 246, 18, 15, 63, 180, 149, 34, 63, 128, 255, 18, 63, 197, 3, 75, 62, 137, 140, 186, 58, 142, 70, 96, 190, 202, 101, 106, 190, 15, 81, 243, 189, 81, 198, 24, 190, 251, 101, 80, 189, 207, 200, 7, 190, 193, 74, 154, 189, 223, 51, 78, 61, 250, 84, 16, 191, 62, 107, 191, 190, 159, 218, 40, 190, 228, 92, 225, 59, 50, 72, 37, 62, 158, 166, 35, 62, 218, 33, 38, 61, 213, 73, 2, 60, 0, 93, 227, 187, 151, 171, 234, 60, 245, 176, 77, 61, 114, 144, 55, 61, 247, 106, 187, 60, 51, 244, 53, 188, 83, 203, 234, 188, 92, 240, 25, 189, 154, 4, 192, 188, 110, 83, 213, 188, 254, 3, 107, 59, 180, 231, 56, 61, 108, 86, 31, 61, 60, 249, 151, 60, 90, 247, 113, 60, 164, 109, 131, 188, 7, 177, 186, 187, 65, 223, 108, 188, 14, 107, 183, 63, 181, 163, 163, 63, 245, 139, 85, 63, 220, 19, 166, 61, 86, 196, 220, 190, 189, 132, 11, 191, 212, 207, 134, 190, 229, 247, 128, 189, 242, 236, 74, 187, 145, 17, 139, 189, 41, 216, 55, 190, 186, 67, 224, 189, 143, 210, 170, 59, 170, 176, 159, 59, 182, 108, 77, 189, 42, 222, 85, 188, 71, 135, 114, 60, 191, 120, 64, 61, 134, 213, 22, 60, 77, 135, 138, 188, 0, 159, 191, 188, 186, 147, 213, 188, 4, 49, 11, 60, 140, 14, 211, 58, 232, 29, 216, 186, 175, 59, 84, 59, 130, 146, 245, 189, 175, 58, 241, 188, 54, 12, 64, 188, 251, 167, 30, 188, 37, 157, 221, 60, 183, 69, 0, 61, 88, 102, 178, 186, 117, 152, 73, 188, 239, 17, 24, 188, 140, 5, 16, 188, 8, 153, 215, 59, 202, 12, 228, 186, 28, 14, 226, 60, 169, 80, 211, 63, 99, 158, 93, 63, 211, 40, 19, 63, 156, 154, 111, 189, 78, 5, 12, 191, 74, 105, 13, 191, 179, 28, 29, 188, 116, 217, 204, 189, 139, 245, 95, 189, 199, 208, 39, 189, 210, 36, 174, 190, 205, 235, 31, 190, 21, 149, 89, 189, 250, 80, 6, 191, 218, 133, 143, 189, 11, 98, 225, 189, 53, 57, 133, 61, 126, 62, 180, 61, 63, 160, 221, 61, 19, 241, 132, 189, 64, 188, 91, 61, 154, 32, 140, 188, 25, 178, 249, 60, 198, 103, 137, 186, 54, 50, 247, 188, 221, 137, 210, 60, 59, 62, 243, 189, 161, 131, 50, 189, 105, 89, 126, 59, 209, 39, 16, 60, 26, 53, 13, 61, 22, 217, 141, 60, 187, 43, 136, 187, 145, 156, 134, 187, 40, 185, 244, 59, 143, 63, 159, 187, 83, 148, 143, 60, 90, 63, 234, 186, 130, 90, 18, 188, 176, 129, 237, 63, 108, 77, 167, 63, 197, 213, 17, 63, 71, 42, 175, 189, 181, 99, 216, 190, 92, 62, 204, 190, 82, 132, 156, 60, 235, 147, 210, 61, 231, 252, 241, 189, 18, 66, 242, 60, 36, 139, 32, 187, 99, 251, 86, 188, 31, 50, 45, 61, 35, 190, 118, 63, 80, 64, 164, 62, 62, 231, 114, 190, 242, 4, 16, 191, 177, 232, 251, 190, 135, 101, 7, 189, 246, 151, 62, 62, 28, 189, 78, 62, 88, 78, 228, 61, 233, 219, 222, 189, 103, 224, 82, 189, 148, 97, 107, 61, 151, 237, 58, 61, 32, 122, 36, 191, 148, 23, 165, 190, 145, 35, 150, 189, 103, 15, 21, 62, 249, 234, 117, 62, 144, 115, 129, 62, 181, 67, 230, 61, 60, 186, 234, 187, 121, 178, 183, 188, 70, 44, 62, 189, 10, 112, 89, 189, 150, 4, 186, 188, 120, 27, 118, 59, 103, 93, 1, 63, 203, 161, 86, 63, 222, 15, 54, 63, 33, 53, 174, 62, 42, 165, 77, 61, 238, 54, 47, 190, 240, 191, 173, 189, 3, 92, 53, 189, 16, 225, 49, 190, 234, 60, 212, 60, 199, 9, 201, 188, 10, 241, 132, 188, 80, 55, 168, 60, 102, 143, 147, 63, 46, 124, 144, 62, 130, 206, 215, 188, 10, 104, 133, 190, 86, 114, 194, 190, 71, 244, 137, 190, 198, 166, 215, 188, 239, 173, 50, 61, 18, 6, 44, 61, 238, 9, 248, 61, 139, 62, 59, 61, 1, 165, 14, 60, 76, 163, 139, 60, 190, 180, 21, 190, 186, 24, 32, 190, 40, 71, 40, 190, 114, 196, 95, 190, 136, 78, 188, 189, 200, 135, 146, 61, 118, 143, 12, 62, 167, 74, 35, 62, 148, 230, 225, 61, 80, 2, 64, 60, 119, 55, 199, 60, 124, 163, 93, 188, 27, 35, 137, 188, 62, 241, 86, 63, 51, 66, 132, 63, 162, 150, 39, 63, 184, 28, 110, 61, 65, 51, 182, 190, 178, 122, 195, 190, 74, 164, 213, 189, 152, 82, 6, 61, 50, 202, 134, 188, 58, 233, 251, 187, 28, 187, 125, 189, 101, 73, 194, 188, 138, 105, 177, 60, 21, 150, 113, 63, 161, 84, 59, 62, 55, 106, 35, 189, 145, 247, 221, 189, 221, 181, 156, 190, 19, 218, 54, 190, 118, 185, 30, 62, 178, 9, 207, 61, 228, 133, 186, 60, 175, 212, 27, 60, 200, 29, 124, 189, 225, 34, 213, 188, 237, 172, 249, 188, 156, 161, 153, 190, 63, 75, 39, 190, 132, 46, 210, 59, 24, 241, 30, 62, 151, 236, 85, 62, 252, 17, 10, 62, 70, 98, 151, 60, 209, 198, 143, 189, 175, 111, 241, 189, 128, 81, 218, 189, 218, 112, 22, 189, 248, 76, 58, 60, 122, 124, 27, 61, 119, 248, 147, 62, 37, 221, 106, 63, 202, 139, 69, 63, 130, 148, 189, 62, 17, 58, 221, 60, 219, 214, 136, 190, 154, 147, 150, 190, 124, 38, 19, 190, 48, 31, 55, 190, 221, 225, 8, 190, 92, 87, 56, 189, 48, 187, 7, 60, 47, 120, 67, 61, 223, 52, 1, 64, 230, 78, 146, 63, 5, 105, 217, 62, 47, 60, 224, 189, 147, 158, 37, 191, 126, 238, 32, 191, 66, 117, 171, 190, 97, 94, 37, 190, 108, 112, 106, 188, 63, 54, 44, 189, 89, 140, 28, 189, 82, 63, 189, 60, 244, 4, 4, 189, 110, 92, 206, 190, 64, 163, 32, 191, 111, 98, 13, 191, 22, 139, 251, 190, 77, 234, 140, 190, 171, 186, 213, 61, 0, 248, 139, 62, 218, 119, 108, 62, 116, 243, 136, 62, 195, 139, 3, 62, 10, 163, 33, 59, 196, 141, 36, 61, 147, 70, 80, 60, 116, 226, 46, 64, 182, 52, 183, 63, 1, 13, 40, 63, 238, 184, 66, 190, 204, 218, 135, 190, 246, 70, 165, 190, 208, 122, 190, 189, 205, 252, 175, 189, 109, 251, 3, 190, 255, 238, 21, 187, 94, 134, 7, 60, 154, 241, 82, 189, 192, 70, 118, 188, 132, 218, 202, 63, 21, 177, 197, 62, 118, 9, 134, 190, 123, 107, 82, 191, 250, 171, 36, 191, 4, 76, 69, 190, 110, 221, 1, 62, 14, 87, 6, 62, 174, 198, 48, 62, 221, 95, 48, 188, 112, 101, 208, 60, 56, 66, 213, 61, 238, 158, 137, 61, 164, 214, 127, 191, 231, 134, 206, 190, 185, 146, 246, 189, 127, 151, 155, 62, 83, 125, 157, 62, 131, 177, 209, 62, 60, 123, 55, 62, 92, 255, 8, 61, 176, 138, 216, 60, 129, 112, 187, 189, 206, 85, 31, 190, 173, 96, 168, 60, 119, 213, 213, 188, 226, 130, 153, 64, 57, 63, 205, 63, 219, 112, 131, 189, 77, 26, 243, 62, 126, 102, 174, 190, 143, 224, 203, 190, 190, 103, 167, 61, 215, 36, 150, 190, 179, 152, 200, 189, 78, 15, 167, 189, 54, 212, 3, 190, 2, 138, 214, 188, 67, 175, 251, 189, 222, 91, 124, 63, 45, 190, 151, 62, 135, 114, 206, 61, 243, 38, 170, 190, 226, 36, 204, 190, 253, 152, 124, 190, 23, 76, 124, 190, 135, 215, 228, 189, 210, 82, 186, 61, 71, 249, 139, 61, 154, 101, 203, 188, 201, 211, 33, 62, 212, 170, 40, 61, 124, 161, 46, 190, 232, 151, 213, 190, 97, 126, 101, 61, 223, 152, 161, 190, 43, 245, 176, 189, 207, 120, 4, 61, 205, 244, 253, 189, 251, 202, 131, 62, 251, 85, 108, 61, 149, 43, 74, 62, 32, 254, 3, 60, 134, 180, 6, 188, 24, 157, 174, 61, 211, 62, 140, 64, 249, 8, 172, 63, 190, 239, 84, 190, 24, 233, 20, 63, 185, 233, 193, 190, 237, 127, 127, 190, 255, 20, 33, 62, 107, 21, 79, 190, 239, 103, 120, 61, 219, 209, 226, 189, 127, 103, 166, 189, 237, 130, 12, 61, 49, 215, 66, 190, 224, 190, 202, 62, 110, 109, 77, 61, 143, 120, 168, 61, 152, 23, 84, 60, 55, 246, 64, 190, 36, 53, 20, 190, 137, 226, 41, 61, 25, 81, 86, 189, 107, 69, 134, 189, 199, 45, 166, 61, 56, 235, 31, 189, 104, 118, 111, 60, 121, 235, 222, 188, 65, 171, 196, 190, 30, 47, 145, 189, 88, 238, 52, 187, 67, 2, 94, 189, 250, 76, 34, 62, 242, 122, 37, 188, 124, 163, 182, 60, 230, 154, 54, 61, 85, 98, 218, 189, 108, 142, 240, 185, 109, 250, 124, 60, 83, 223, 138, 189, 119, 244, 133, 61, 100, 236, 57, 64, 94, 125, 94, 63, 105, 194, 73, 62, 164, 47, 178, 62, 209, 128, 17, 62, 59, 200, 27, 190, 97, 205, 181, 61, 80, 57, 99, 61, 38, 214, 55, 190, 218, 34, 135, 59, 101, 235, 87, 189, 66, 114, 57, 190, 36, 135, 156, 189, 236, 60, 54, 64, 18, 205, 128, 63, 118, 83, 136, 189, 183, 144, 29, 190, 207, 40, 87, 190, 108, 16, 175, 190, 218, 171, 45, 59, 168, 91, 213, 189, 45, 152, 46, 189, 30, 102, 0, 190, 144, 196, 3, 60, 172, 90, 181, 189, 162, 66, 75, 61, 218, 67, 227, 190, 157, 90, 221, 189, 180, 25, 14, 191, 56, 22, 128, 190, 49, 128, 217, 190, 122, 181, 133, 189, 83, 173, 185, 61, 220, 39, 1, 190, 224, 34, 142, 62, 162, 170, 85, 189, 126, 199, 68, 61, 51, 117, 44, 62, 126, 19, 213, 188, 24, 191, 16, 64, 240, 93, 172, 63, 14, 117, 170, 62, 129, 209, 20, 191, 120, 205, 45, 191, 248, 248, 105, 190, 103, 212, 87, 62, 77, 88, 108, 62, 115, 245, 168, 189, 188, 180, 238, 189, 59, 92, 128, 189, 222, 41, 118, 59, 203, 114, 98, 61, 225, 235, 97, 61, 161, 31, 136, 59, 215, 163, 12, 189, 237, 1, 233, 189, 48, 24, 197, 189, 1, 253, 221, 60, 244, 88, 89, 60, 127, 0, 149, 187, 14, 175, 144, 61, 20, 237, 142, 189, 206, 50, 38, 189, 162, 246, 217, 60, 180, 189, 6, 189, 118, 180, 204, 189, 22, 134, 170, 188, 16, 103, 159, 61, 199, 119, 210, 61, 102, 84, 139, 61, 107, 249, 95, 189, 139, 145, 158, 189, 68, 174, 243, 188, 43, 63, 158, 186, 228, 33, 66, 61, 250, 41, 157, 60, 240, 235, 192, 187, 204, 64, 190, 188, 61, 92, 14, 64, 88, 234, 171, 63, 239, 0, 19, 63, 57, 33, 234, 61, 41, 61, 59, 191, 167, 12, 27, 191, 8, 42, 45, 61, 97, 215, 116, 189, 52, 84, 221, 189, 213, 166, 183, 188, 25, 200, 197, 189, 243, 175, 111, 61, 22, 228, 88, 61, 187, 3, 2, 62, 201, 19, 73, 189, 180, 242, 225, 60, 182, 254, 190, 61, 130, 134, 21, 61, 1, 68, 225, 59, 192, 89, 180, 188, 42, 24, 105, 189, 119, 13, 5, 189, 84, 150, 134, 59, 45, 32, 201, 187, 61, 163, 105, 189, 90, 126, 133, 59, 27, 213, 167, 190, 91, 4, 45, 189, 245, 136, 75, 61, 97, 17, 53, 188, 235, 147, 24, 62, 95, 9, 105, 61, 120, 74, 0, 190, 103, 70, 156, 187, 34, 251, 69, 61, 191, 28, 69, 189, 121, 231, 49, 60, 167, 154, 124, 188, 112, 26, 120, 187, 254, 112, 11, 64, 119, 213, 176, 63, 94, 83, 219, 62, 20, 8, 23, 191, 161, 104, 55, 191, 154, 246, 150, 190, 47, 24, 185, 61, 26, 50, 92, 62, 185, 53, 7, 61, 220, 45, 32, 190, 137, 104, 249, 189, 130, 85, 165, 188, 36, 131, 118, 188, 154, 200, 34, 190, 184, 76, 134, 188, 130, 135, 153, 61, 212, 138, 192, 61, 176, 68, 251, 60, 155, 1, 167, 189, 248, 22, 198, 189, 220, 39, 5, 189, 252, 134, 148, 60, 102, 180, 149, 60, 2, 137, 129, 188, 200, 214, 90, 189, 85, 211, 67, 188, 183, 161, 82, 189, 192, 25, 26, 189, 123, 138, 75, 60, 0, 110, 123, 61, 6, 88, 215, 60, 177, 211, 138, 188, 85, 190, 232, 187, 116, 9, 248, 188, 32, 19, 121, 188, 215, 20, 130, 60, 76, 158, 202, 186, 30, 142, 71, 188, 194, 46, 25, 60, 9, 205, 207, 63, 28, 251, 156, 63, 172, 80, 39, 63, 141, 97, 26, 190, 173, 183, 27, 191, 205, 2, 252, 190, 70, 11, 29, 190, 224, 138, 188, 187, 41, 191, 78, 59, 48, 175, 138, 189, 227, 234, 28, 190, 50, 217, 158, 189, 49, 44, 97, 60, 41, 88, 106, 190, 195, 7, 4, 190, 4, 201, 77, 61, 46, 91, 12, 62, 249, 12, 20, 62, 4, 22, 114, 187, 204, 156, 221, 189, 202, 70, 212, 189, 125, 168, 196, 188, 99, 240, 168, 60, 182, 0, 241, 60, 25, 240, 39, 189, 58, 181, 57, 189, 41, 165, 98, 190, 246, 9, 228, 189, 214, 4, 143, 189, 215, 6, 92, 188, 66, 132, 198, 61, 4, 203, 194, 61, 35, 112, 193, 60, 43, 151, 203, 59, 223, 35, 26, 189, 48, 11, 1, 189, 190, 66, 93, 61, 51, 59, 26, 61, 228, 168, 177, 59, 221, 130, 176, 63, 56, 104, 170, 63, 5, 174, 46, 63, 214, 32, 14, 190, 93, 109, 35, 191, 204, 98, 210, 190, 75, 216, 217, 188, 9, 197, 30, 62, 182, 106, 76, 62, 219, 109, 131, 188, 199, 124, 5, 190, 128, 62, 4, 189, 98, 65, 65, 60, 10, 177, 211, 62, 123, 10, 15, 62, 254, 20, 156, 188, 103, 34, 51, 190, 228, 248, 204, 189, 75, 48, 23, 187, 132, 131, 32, 61, 160, 99, 177, 60, 84, 112, 182, 187, 152, 152, 108, 189, 229, 98, 54, 189, 211, 238, 82, 188, 85, 115, 16, 61, 89, 233, 209, 190, 92, 22, 185, 189, 175, 240, 145, 61, 40, 63, 146, 62, 145, 51, 134, 62, 87, 82, 130, 189, 147, 235, 3, 190, 119, 78, 6, 190, 127, 95, 247, 189, 194, 178, 99, 61, 220, 160, 145, 61, 179, 45, 32, 60, 84, 147, 6, 189, 113, 174, 216, 63, 35, 230, 149, 63, 254, 193, 44, 63, 176, 10, 245, 61, 159, 194, 230, 190, 19, 92, 31, 191, 72, 208, 61, 190, 121, 91, 255, 59, 22, 77, 28, 59, 117, 15, 23, 189, 177, 228, 173, 60, 92, 122, 173, 189, 73, 126, 15, 190, 24, 120, 184, 189, 72, 2, 94, 189, 233, 164, 54, 189, 233, 190, 203, 60, 6, 52, 68, 60, 223, 182, 102, 61, 57, 67, 41, 189, 218, 158, 34, 60, 117, 103, 105, 60, 184, 150, 138, 61, 2, 227, 192, 188, 63, 183, 149, 60, 191, 13, 85, 61, 228, 77, 176, 190, 199, 29, 129, 189, 239, 160, 164, 188, 6, 238, 120, 60, 218, 160, 151, 61, 252, 81, 222, 61, 57, 128, 27, 189, 33, 237, 98, 60, 20, 142, 224, 60, 53, 205, 77, 188, 14, 201, 255, 188, 123, 211, 146, 60, 137, 242, 137, 61, 151, 45, 138, 63, 27, 128, 101, 63, 55, 124, 27, 63, 79, 207, 179, 61, 247, 141, 11, 191, 227, 35, 42, 191, 188, 199, 165, 190, 132, 197, 164, 189, 237, 95, 154, 61, 64, 185, 24, 61, 105, 247, 160, 189, 95, 88, 175, 189, 27, 50, 156, 189, 44, 2, 144, 190, 146, 240, 233, 189, 226, 64, 147, 61, 212, 112, 40, 61, 68, 173, 15, 62, 231, 119, 176, 61, 93, 150, 163, 189, 34, 161, 229, 189, 155, 191, 7, 189, 24, 233, 16, 188, 12, 134, 138, 188, 226, 242, 120, 60, 133, 207, 137, 60, 211, 49, 49, 190, 220, 112, 6, 188, 15, 238, 1, 61, 146, 67, 59, 59, 58, 18, 192, 61, 105, 109, 212, 61, 16, 235, 78, 61, 176, 5, 211, 60, 247, 203, 131, 189, 111, 205, 70, 188, 91, 129, 184, 59, 155, 85, 35, 60, 184, 14, 13, 59, 38, 226, 230, 63, 126, 219, 191, 63, 172, 228, 73, 63, 27, 76, 60, 190, 238, 214, 59, 191, 88, 70, 29, 191, 71, 122, 6, 190, 20, 59, 33, 61, 36, 20, 179, 61, 33, 145, 2, 190, 222, 215, 12, 190, 222, 120, 97, 189, 67, 28, 122, 61, 251, 46, 13, 189, 217, 254, 140, 188, 155, 106, 155, 60, 246, 162, 153, 60, 34, 245, 162, 61, 181, 248, 22, 189, 146, 38, 142, 189, 164, 233, 250, 188, 64, 225, 190, 189, 1, 212, 117, 187, 169, 61, 159, 59, 255, 174, 147, 188, 68, 254, 60, 188, 103, 38, 60, 190, 125, 127, 238, 189, 85, 176, 26, 189, 50, 196, 32, 61, 16, 210, 201, 61, 137, 16, 134, 61, 131, 13, 170, 188, 119, 113, 134, 59, 37, 98, 187, 188, 178, 226, 25, 59, 136, 156, 45, 60, 98, 186, 147, 188, 67, 161, 140, 188, 97, 154, 88, 64, 9, 220, 139, 63, 89, 242, 126, 62, 2, 125, 50, 191, 41, 27, 243, 190, 58, 73, 79, 190, 154, 0, 96, 62, 224, 118, 23, 190, 229, 205, 93, 62, 154, 181, 143, 189, 191, 139, 144, 61, 160, 96, 151, 188, 30, 113, 157, 61, 136, 251, 219, 62, 133, 110, 45, 189, 89, 245, 106, 190, 197, 55, 92, 61, 56, 66, 81, 189, 32, 229, 4, 190, 208, 197, 90, 62, 229, 69, 155, 189, 232, 180, 140, 189, 21, 81, 231, 61, 148, 54, 227, 188, 119, 248, 240, 188, 106, 127, 112, 61, 12, 151, 169, 189, 187, 32, 164, 186, 137, 91, 4, 188, 32, 161, 162, 60, 252, 202, 43, 62, 132, 228, 219, 187, 24, 113, 145, 59, 255, 31, 22, 188, 124, 142, 128, 189, 252, 172, 208, 61, 49, 80, 37, 60, 107, 114, 164, 189, 176, 36, 51, 61, 77, 92, 53, 64, 199, 146, 175, 63, 157, 151, 45, 63, 203, 244, 154, 190, 88, 51, 31, 191, 58, 196, 16, 191, 122, 161, 30, 189, 145, 88, 77, 188, 187, 123, 28, 61, 18, 142, 153, 189, 127, 113, 155, 189, 160, 217, 93, 188, 183, 202, 71, 60, 178, 6, 95, 190, 191, 102, 2, 188, 137, 134, 193, 60, 239, 11, 210, 60, 91, 54, 176, 188, 35, 81, 131, 60, 31, 208, 129, 189, 89, 248, 4, 61, 199, 108, 180, 58, 230, 150, 149, 60, 77, 182, 140, 187, 138, 62, 171, 188, 19, 124, 229, 60, 13, 93, 119, 190, 50, 160, 233, 189, 5, 192, 69, 189, 107, 41, 226, 61, 242, 226, 232, 61, 63, 33, 131, 61, 89, 231, 151, 60, 59, 229, 102, 189, 88, 67, 31, 189, 129, 157, 52, 60, 143, 125, 17, 61, 13, 80, 140, 188, 227, 120, 69, 188, 84, 183, 128, 64, 89, 184, 197, 63, 2, 139, 133, 62, 167, 168, 11, 61, 99, 212, 68, 191, 247, 100, 44, 191, 49, 88, 212, 61, 10, 160, 39, 190, 30, 94, 41, 190, 15, 56, 184, 60, 128, 163, 45, 190, 55, 208, 69, 189, 167, 183, 49, 61, 79, 77, 45, 191, 141, 42, 52, 190, 147, 0, 57, 62, 34, 16, 255, 189, 240, 141, 180, 189, 176, 87, 229, 188, 216, 214, 184, 188, 128, 112, 28, 61, 123, 19, 182, 189, 211, 72, 63, 189, 211, 190, 252, 60, 82, 176, 43, 59, 0, 32, 128, 59, 23, 193, 41, 61, 137, 140, 218, 188, 47, 86, 34, 189, 177, 118, 246, 188, 114, 68, 170, 61, 247, 157, 6, 61, 21, 106, 157, 189, 106, 32, 121, 61, 134, 187, 206, 188, 70, 128, 163, 189, 2, 36, 170, 60, 210, 168, 200, 60, 189, 140, 170, 60, 217, 246, 133, 64, 231, 166, 178, 63, 122, 219, 161, 61, 85, 236, 50, 191, 42, 64, 35, 191, 85, 123, 168, 190, 185, 113, 220, 62, 111, 116, 198, 189, 64, 122, 131, 189, 38, 43, 7, 61, 38, 92, 68, 189, 58, 248, 91, 189, 233, 78, 240, 61, 80, 20, 137, 190, 166, 40, 104, 188, 108, 120, 238, 61, 10, 242, 172, 60, 177, 151, 192, 189, 28, 82, 124, 189, 138, 14, 113, 189, 213, 82, 37, 61, 103, 20, 253, 61, 209, 254, 168, 189, 192, 192, 34, 189, 214, 194, 19, 60, 69, 42, 39, 59, 104, 144, 178, 190, 212, 44, 2, 61, 33, 211, 194, 61, 173, 76, 144, 61, 161, 105, 157, 187, 143, 191, 56, 188, 212, 43, 6, 190, 134, 25, 131, 61, 167, 98, 182, 188, 0, 25, 239, 188, 76, 135, 153, 186, 193, 66, 227, 60, 148, 78, 174, 188, 81, 203, 182, 60, 118, 151, 116, 62, 177, 114, 138, 62, 230, 183, 7, 60, 124, 240, 248, 189, 91, 103, 181, 189, 98, 172, 132, 189, 79, 9, 195, 61, 176, 85, 216, 61, 27, 130, 137, 61, 28, 136, 216, 60, 88, 187, 176, 188, 152, 9, 222, 60, 188, 61, 26, 191, 111, 111, 184, 190, 65, 226, 3, 190, 140, 211, 207, 60, 12, 118, 23, 62, 86, 248, 190, 61, 96, 100, 7, 186, 218, 181, 101, 189, 48, 160, 20, 189, 10, 64, 212, 60, 206, 183, 70, 60, 47, 134, 232, 187, 243, 184, 228, 59, 114, 215, 183, 61, 224, 34, 164, 61, 148, 161, 243, 60, 219, 65, 23, 188, 108, 210, 167, 188, 27, 82, 13, 189, 40, 53, 59, 60, 158, 184, 137, 187, 187, 47, 89, 189, 171, 83, 82, 189, 222, 66, 225, 188, 193, 33, 100, 58, 197, 119, 165, 60, 217, 9, 237, 63, 165, 216, 159, 63, 24, 78, 36, 63, 113, 4, 183, 188, 196, 19, 221, 190, 251, 11, 221, 190, 216, 119, 3, 190, 159, 35, 26, 189, 94, 32, 226, 189, 117, 34, 25, 190, 221, 108, 236, 189, 163, 203, 241, 186, 100, 176, 167, 61, 65, 234, 64, 191, 36, 81, 193, 190, 213, 214, 17, 190, 174, 163, 29, 189, 94, 141, 87, 62, 235, 10, 46, 62, 130, 26, 105, 188, 14, 226, 153, 61, 38, 35, 95, 61, 163, 243, 209, 188, 23, 206, 198, 60, 107, 231, 184, 60, 185, 200, 9, 61, 118, 105, 113, 190, 239, 118, 107, 190, 179, 47, 230, 189, 172, 202, 176, 188, 253, 29, 139, 189, 56, 118, 184, 187, 119, 254, 154, 61, 193, 204, 12, 61, 26, 66, 173, 61, 221, 86, 240, 61, 153, 92, 172, 188, 67, 73, 39, 189, 183, 209, 21, 189, 171, 217, 60, 188, 4, 173, 253, 61, 144, 93, 69, 62, 255, 14, 111, 189, 212, 77, 215, 189, 74, 7, 30, 190, 129, 47, 14, 190, 153, 167, 225, 188, 198, 81, 29, 189, 71, 171, 44, 189, 74, 251, 234, 188, 176, 202, 96, 60, 89, 215, 99, 61, 4, 101, 86, 191, 108, 168, 32, 191, 106, 129, 170, 190, 149, 160, 225, 188, 253, 185, 45, 62, 163, 211, 70, 62, 213, 152, 238, 61, 1, 151, 136, 61, 227, 17, 14, 61, 190, 152, 51, 61, 79, 167, 33, 61, 222, 3, 50, 61, 139, 13, 243, 60, 91, 189, 90, 62, 181, 138, 30, 62, 4, 201, 86, 61, 109, 126, 65, 60, 182, 147, 13, 189, 228, 177, 231, 188, 47, 98, 59, 188, 106, 124, 217, 60, 62, 217, 245, 60, 12, 17, 29, 60, 21, 32, 138, 188, 148, 189, 51, 189, 24, 189, 192, 188, 209, 158, 136, 63, 97, 123, 88, 63, 224, 98, 10, 63, 193, 222, 98, 188, 144, 41, 146, 190, 141, 181, 173, 190, 33, 13, 79, 190, 11, 97, 188, 188, 136, 177, 197, 188, 254, 161, 39, 189, 2, 150, 159, 189, 191, 247, 152, 189, 39, 90, 44, 186, 136, 39, 88, 191, 29, 192, 14, 191, 116, 166, 121, 190, 118, 169, 75, 60, 62, 38, 79, 62, 237, 96, 44, 62, 68, 195, 45, 59, 59, 97, 182, 188, 253, 95, 161, 187, 61, 49, 202, 60, 75, 31, 106, 61, 222, 156, 63, 61, 58, 31, 182, 60, 169, 122, 150, 189, 201, 125, 26, 190, 11, 209, 0, 190, 150, 245, 139, 189, 60, 211, 8, 189, 218, 21, 195, 60, 173, 204, 82, 61, 235, 252, 44, 187, 180, 59, 212, 59, 214, 130, 155, 186, 73, 90, 137, 60, 7, 107, 87, 61, 47, 125, 3, 61, 206, 90, 41, 63, 186, 117, 195, 62, 101, 46, 242, 62, 237, 198, 164, 62, 58, 20, 163, 62, 224, 15, 54, 62, 17, 38, 184, 60, 83, 15, 60, 60, 130, 242, 154, 189, 173, 206, 43, 189, 160, 42, 250, 188, 132, 11, 61, 189, 109, 166, 67, 189, 157, 61, 223, 190, 192, 189, 40, 190, 83, 8, 224, 188, 168, 14, 219, 59, 80, 184, 6, 61, 35, 184, 193, 60, 179, 210, 88, 61, 18, 24, 87, 61, 237, 34, 108, 61, 229, 30, 209, 187, 209, 143, 167, 60, 250, 242, 155, 187, 223, 195, 66, 58, 54, 148, 63, 61, 1, 115, 96, 188, 228, 157, 189, 189, 38, 51, 176, 189, 4, 241, 238, 188, 95, 119, 229, 60, 223, 213, 7, 61, 64, 228, 96, 60, 133, 118, 158, 188, 44, 207, 10, 60, 67, 193, 164, 60, 147, 130, 157, 60, 246, 183, 192, 60, 207, 158, 210, 63, 107, 42, 49, 63, 16, 189, 125, 62, 5, 173, 224, 61, 164, 230, 116, 62, 101, 102, 71, 62, 71, 63, 12, 59, 241, 106, 228, 189, 125, 202, 80, 190, 222, 221, 242, 60, 219, 106, 2, 189, 56, 150, 226, 57, 196, 100, 121, 188, 154, 10, 96, 191, 150, 128, 135, 190, 127, 29, 187, 62, 106, 106, 137, 62, 196, 38, 19, 62, 200, 2, 93, 186, 45, 249, 81, 189, 4, 0, 44, 61, 66, 213, 223, 188, 180, 226, 129, 189, 228, 251, 220, 188, 65, 61, 232, 188, 179, 30, 141, 59, 68, 109, 106, 62, 183, 17, 195, 59, 217, 92, 221, 189, 249, 13, 192, 59, 20, 16, 224, 189, 138, 238, 137, 189, 139, 18, 146, 60, 127, 230, 11, 61, 82, 150, 216, 61, 187, 4, 155, 60, 94, 238, 135, 59, 24, 144, 27, 61, 46, 66, 3, 189, 45, 159, 147, 189, 3, 255, 167, 188, 235, 47, 109, 62, 50, 220, 57, 62, 134, 125, 145, 62, 62, 231, 103, 62, 189, 156, 12, 62, 44, 158, 206, 61, 14, 151, 134, 60, 111, 59, 91, 188, 79, 182, 16, 61, 130, 208, 56, 188, 140, 95, 155, 188, 92, 38, 211, 190, 86, 227, 138, 190, 161, 84, 58, 190, 176, 64, 2, 190, 216, 63, 179, 189, 121, 179, 31, 189, 6, 91, 127, 188, 158, 153, 118, 60, 223, 205, 35, 61, 65, 165, 218, 60, 51, 147, 0, 61, 211, 82, 33, 61, 1, 203, 249, 60, 35, 82, 75, 61, 159, 43, 4, 61, 36, 171, 130, 188, 40, 22, 245, 188, 146, 136, 87, 189, 1, 140, 118, 189, 62, 50, 26, 189, 143, 45, 12, 189, 159, 155, 99, 59, 130, 4, 182, 58, 142, 204, 252, 188, 120, 122, 128, 188, 163, 62, 46, 188, 143, 142, 210, 63, 57, 25, 53, 63, 130, 56, 40, 61, 6, 194, 184, 189, 145, 186, 2, 189, 98, 122, 83, 62, 211, 47, 100, 62, 99, 226, 157, 186, 198, 155, 167, 189, 247, 225, 59, 189, 200, 197, 51, 189, 101, 165, 62, 189, 12, 150, 224, 189, 45, 12, 147, 191, 146, 220, 200, 190, 31, 194, 68, 62, 255, 244, 189, 61, 121, 153, 107, 62, 64, 105, 239, 61, 10, 185, 183, 188, 203, 192, 242, 61, 247, 79, 144, 60, 32, 64, 78, 189, 8, 159, 94, 59, 234, 127, 142, 189, 38, 68, 185, 188, 150, 231, 82, 62, 120, 229, 20, 189, 56, 111, 238, 189, 54, 102, 187, 61, 122, 244, 193, 188, 42, 187, 210, 189, 146, 246, 0, 189, 231, 219, 169, 189, 194, 7, 192, 188, 237, 242, 34, 60, 110, 248, 73, 187, 65, 197, 154, 61, 26, 155, 43, 61, 168, 197, 97, 63, 202, 224, 10, 63, 23, 91, 2, 63, 189, 121, 233, 62, 43, 205, 77, 62, 232, 251, 237, 188, 101, 45, 13, 190, 102, 89, 1, 190, 216, 188, 15, 190, 245, 28, 212, 189, 124, 189, 216, 189, 200, 148, 178, 189, 44, 52, 27, 189, 139, 178, 235, 190, 241, 9, 82, 190, 56, 35, 184, 188, 143, 25, 64, 188, 90, 100, 134, 61, 93, 99, 15, 62, 174, 212, 180, 61, 251, 35, 136, 60, 217, 66, 118, 188, 85, 48, 59, 59, 91, 95, 9, 189, 49, 196, 166, 188, 186, 140, 19, 61, 80, 65, 181, 59, 232, 125, 60, 188, 99, 252, 93, 189, 27, 98, 168, 187, 235, 88, 234, 187, 190, 175, 68, 189, 90, 149, 98, 189, 165, 170, 2, 60, 61, 24, 68, 61, 131, 42, 230, 187, 82, 106, 184, 60, 88, 224, 53, 60, 30, 204, 143, 59, 244, 9, 102, 190, 76, 58, 32, 189, 24, 41, 136, 62, 221, 201, 158, 62, 179, 9, 102, 62, 135, 21, 159, 61, 47, 211, 204, 189, 81, 29, 127, 189, 95, 251, 124, 189, 3, 44, 70, 189, 122, 23, 198, 189, 29, 57, 250, 188, 35, 43, 151, 60, 115, 191, 26, 191, 14, 207, 180, 190, 131, 88, 129, 190, 24, 162, 56, 190, 26, 205, 141, 60, 98, 4, 57, 61, 10, 170, 26, 62, 18, 99, 39, 62, 11, 80, 86, 61, 2, 148, 226, 61, 170, 114, 170, 61, 153, 246, 210, 60, 57, 75, 211, 60, 38, 252, 204, 61, 25, 49, 1, 61, 151, 184, 6, 61, 45, 191, 148, 60, 129, 37, 132, 189, 237, 178, 233, 188, 3, 144, 204, 60, 21, 164, 132, 60, 44, 154, 108, 188, 90, 225, 213, 188, 215, 215, 131, 188, 55, 0, 110, 189, 196, 27, 32, 189, 90, 33, 0, 63, 235, 57, 121, 62, 251, 36, 8, 63, 92, 165, 31, 63, 47, 172, 128, 62, 69, 205, 185, 61, 87, 65, 35, 190, 69, 16, 73, 190, 43, 131, 22, 190, 175, 185, 123, 190, 184, 247, 46, 190, 245, 159, 130, 189, 125, 98, 173, 189, 245, 104, 58, 191, 191, 0, 171, 189, 139, 171, 157, 189, 101, 154, 143, 190, 36, 246, 6, 62, 65, 166, 51, 61, 101, 128, 28, 61, 165, 80, 130, 61, 2, 14, 5, 189, 218, 87, 251, 61, 122, 0, 19, 189, 47, 243, 184, 187, 157, 253, 200, 61, 176, 56, 56, 62, 151, 91, 221, 189, 45, 164, 213, 189, 199, 57, 136, 61, 209, 31, 187, 189, 233, 255, 40, 189, 46, 110, 49, 61, 7, 101, 173, 60, 195, 200, 186, 60, 17, 253, 152, 59, 127, 2, 62, 61, 4, 147, 12, 61, 142, 221, 219, 59, 6, 220, 241, 190, 154, 166, 36, 190, 180, 77, 248, 61, 23, 193, 53, 62, 203, 24, 10, 62, 224, 125, 113, 60, 253, 231, 153, 189, 164, 145, 141, 185, 161, 217, 151, 189, 167, 237, 228, 188, 98, 29, 116, 189, 44, 62, 144, 189, 242, 159, 191, 188, 141, 1, 19, 191, 54, 39, 130, 190, 131, 67, 25, 190, 238, 191, 41, 190, 18, 55, 112, 189, 134, 21, 74, 61, 2, 128, 184, 60, 185, 234, 93, 60, 118, 147, 44, 61, 237, 221, 143, 61, 168, 41, 41, 61, 209, 1, 187, 60, 64, 61, 121, 61, 149, 52, 178, 61, 211, 228, 250, 60, 63, 110, 2, 189, 230, 14, 238, 187, 97, 133, 65, 60, 58, 47, 139, 189, 43, 19, 147, 189, 63, 172, 117, 189, 255, 23, 151, 60, 5, 95, 61, 187, 75, 131, 60, 188, 161, 222, 226, 60, 244, 152, 30, 183, 207, 46, 107, 192, 105, 30, 194, 190, 28, 159, 188, 62, 191, 66, 129, 61, 163, 94, 212, 62, 241, 135, 36, 62, 49, 207, 59, 189, 248, 140, 1, 62, 27, 120, 240, 60, 179, 89, 130, 189, 127, 217, 129, 60, 2, 20, 187, 59, 63, 9, 25, 62, 201, 11, 84, 190, 21, 253, 161, 188, 184, 121, 137, 60, 254, 138, 183, 59, 228, 109, 135, 60, 15, 155, 140, 60, 228, 71, 93, 188, 71, 193, 12, 60, 24, 86, 239, 60, 194, 57, 102, 60, 250, 76, 191, 60, 23, 113, 242, 60, 88, 197, 250, 187, 232, 175, 118, 189, 128, 16, 138, 60, 151, 18, 202, 188, 170, 220, 97, 60, 45, 186, 28, 60, 160, 123, 96, 61, 105, 72, 97, 60, 113, 7, 158, 188, 234, 89, 118, 60, 116, 73, 60, 61, 28, 229, 6, 188, 106, 179, 189, 60, 99, 83, 232, 186, 82, 194, 118, 192, 191, 178, 2, 191, 120, 21, 38, 59, 15, 209, 227, 62, 162, 111, 131, 62, 3, 51, 119, 61, 171, 18, 31, 189, 64, 246, 21, 188, 210, 160, 81, 61, 230, 44, 247, 189, 233, 94, 226, 61, 205, 164, 13, 61, 26, 183, 211, 60, 242, 184, 140, 189, 236, 127, 178, 57, 212, 178, 196, 60, 30, 131, 199, 60, 164, 155, 203, 60, 223, 231, 162, 187, 235, 128, 40, 60, 13, 224, 130, 188, 217, 243, 141, 188, 159, 52, 113, 188, 88, 101, 168, 188, 199, 233, 178, 188, 105, 110, 227, 187, 88, 150, 21, 61, 25, 28, 152, 60, 209, 88, 103, 60, 81, 168, 233, 187, 174, 182, 203, 187, 205, 63, 86, 188, 162, 31, 132, 188, 79, 111, 60, 188, 196, 211, 143, 187, 43, 83, 115, 60, 221, 136, 142, 60, 76, 244, 138, 59, 236, 47, 10, 59, 164, 192, 120, 192, 4, 225, 146, 190, 179, 241, 172, 62, 109, 85, 253, 187, 117, 231, 193, 62, 83, 100, 239, 61, 34, 150, 2, 190, 134, 8, 13, 62, 96, 193, 36, 61, 161, 70, 235, 188, 139, 236, 80, 61, 254, 138, 7, 188, 44, 125, 189, 61, 104, 203, 102, 61, 65, 183, 203, 60, 230, 22, 229, 188, 250, 100, 165, 188, 245, 202, 35, 187, 83, 123, 61, 188, 75, 152, 142, 188, 231, 141, 20, 189, 29, 36, 39, 189, 217, 97, 147, 188, 25, 80, 185, 188, 30, 74, 2, 189, 49, 95, 58, 60, 152, 14, 54, 61, 140, 16, 242, 188, 157, 2, 75, 188, 221, 241, 162, 188, 68, 236, 40, 59, 137, 174, 68, 189, 191, 102, 181, 186, 101, 33, 179, 60, 236, 59, 128, 188, 142, 17, 218, 188, 79, 15, 9, 60, 195, 103, 35, 188, 46, 221, 128, 186, 223, 167, 167, 191, 115, 236, 12, 190, 148, 111, 56, 190, 32, 7, 51, 62, 246, 179, 221, 61, 188, 190, 142, 61, 19, 105, 206, 61, 171, 4, 234, 60, 228, 157, 187, 60, 91, 158, 132, 189, 173, 228, 15, 188, 240, 120, 100, 61, 73, 230, 197, 61, 206, 113, 79, 190, 176, 92, 59, 190, 49, 51, 25, 187, 8, 73, 37, 188, 135, 219, 13, 189, 160, 205, 230, 188, 192, 255, 65, 61, 17, 104, 9, 189, 66, 105, 97, 189, 187, 3, 101, 189, 200, 176, 213, 59, 204, 149, 4, 188, 113, 77, 48, 61, 2, 142, 118, 61, 124, 89, 136, 189, 159, 214, 11, 60, 114, 52, 206, 189, 152, 237, 169, 189, 45, 6, 28, 188, 139, 121, 241, 188, 9, 182, 158, 189, 34, 57, 255, 60, 182, 125, 56, 61, 97, 159, 160, 60, 9, 153, 234, 189, 174, 19, 173, 189, 44, 137, 197, 191, 3, 88, 35, 191, 53, 248, 18, 190, 137, 122, 87, 188, 1, 194, 44, 62, 25, 187, 2, 62, 130, 47, 156, 58, 205, 74, 130, 61, 41, 227, 100, 61, 95, 45, 228, 61, 9, 147, 5, 61, 175, 142, 115, 61, 205, 211, 11, 62, 153, 172, 34, 190, 222, 124, 112, 189, 132, 64, 204, 188, 193, 31, 43, 189, 12, 120, 231, 59, 24, 144, 86, 61, 76, 151, 125, 61, 98, 90, 69, 61, 187, 208, 240, 60, 7, 148, 25, 61, 115, 10, 90, 61, 6, 143, 32, 61, 237, 68, 176, 60, 141, 176, 154, 61, 90, 64, 31, 61, 187, 16, 194, 61, 126, 48, 228, 60, 197, 147, 244, 185, 35, 165, 63, 189, 252, 22, 204, 57, 243, 14, 251, 188, 89, 165, 176, 188, 80, 89, 75, 189, 73, 183, 98, 188, 18, 61, 158, 60, 7, 170, 32, 61, 212, 238, 137, 191, 53, 115, 200, 190, 46, 129, 86, 189, 212, 25, 165, 60, 89, 44, 173, 61, 7, 220, 166, 61, 85, 123, 184, 60, 250, 103, 213, 60, 145, 229, 115, 188, 79, 49, 124, 60, 112, 59, 83, 189, 36, 96, 31, 60, 47, 45, 150, 61, 243, 149, 12, 190, 31, 45, 39, 189, 107, 44, 1, 189, 176, 212, 45, 188, 221, 250, 46, 57, 17, 175, 18, 188, 23, 169, 2, 60, 131, 142, 137, 59, 140, 222, 196, 187, 108, 249, 55, 60, 79, 216, 222, 60, 30, 162, 72, 60, 234, 95, 24, 61, 243, 19, 86, 189, 221, 61, 204, 189, 230, 235, 5, 190, 22, 232, 199, 189, 213, 70, 234, 60, 6, 18, 23, 61, 166, 176, 66, 189, 108, 115, 72, 61, 140, 140, 131, 61, 255, 246, 116, 61, 158, 43, 179, 61, 177, 3, 194, 60, 103, 72, 143, 60, 123, 160, 114, 191, 75, 197, 204, 190, 197, 82, 225, 189, 58, 65, 145, 187, 175, 97, 133, 61, 240, 2, 86, 61, 223, 72, 198, 188, 225, 199, 147, 60, 159, 131, 26, 188, 9, 198, 47, 61, 152, 168, 181, 60, 67, 193, 177, 60, 36, 71, 73, 61, 50, 72, 151, 190, 131, 125, 251, 189, 173, 255, 109, 189, 131, 195, 69, 189, 97, 201, 188, 59, 104, 123, 135, 60, 83, 7, 122, 188, 51, 187, 38, 60, 61, 208, 27, 61, 227, 213, 139, 60, 218, 36, 149, 187, 241, 47, 175, 60, 188, 107, 168, 58, 9, 2, 125, 61, 169, 135, 182, 61, 153, 226, 16, 62, 144, 69, 185, 61, 186, 27, 118, 60, 96, 223, 215, 60, 173, 62, 24, 61, 164, 190, 75, 59, 242, 95, 41, 189, 254, 155, 117, 189, 158, 23, 146, 189, 213, 92, 164, 188, 208, 212, 218, 188, 67, 22, 178, 191, 68, 173, 10, 191, 103, 245, 6, 190, 163, 202, 175, 188, 58, 112, 32, 62, 38, 217, 229, 61, 83, 254, 162, 59, 45, 34, 101, 61, 5, 123, 111, 59, 101, 224, 89, 61, 163, 97, 95, 188, 168, 93, 16, 61, 195, 172, 6, 62, 200, 206, 99, 189, 193, 187, 52, 61, 148, 190, 82, 61, 101, 232, 137, 60, 175, 128, 164, 55, 123, 1, 232, 188, 231, 73, 167, 188, 8, 253, 152, 188, 255, 35, 187, 188, 22, 142, 252, 188, 247, 220, 65, 189, 135, 192, 94, 188, 254, 235, 58, 60, 233, 209, 236, 61, 131, 1, 172, 60, 28, 111, 222, 60, 93, 99, 0, 61, 98, 85, 7, 59, 234, 46, 10, 189, 197, 111, 227, 60, 81, 121, 232, 188, 21, 255, 9, 189, 253, 61, 113, 188, 160, 42, 64, 188, 238, 140, 215, 188, 101, 224, 142, 188, 218, 233, 234, 191, 55, 132, 144, 190, 194, 39, 86, 59, 102, 72, 30, 62, 182, 252, 144, 61, 88, 86, 45, 60, 78, 96, 173, 189, 214, 146, 46, 61, 106, 213, 10, 189, 56, 165, 129, 188, 227, 12, 63, 61, 249, 72, 161, 60, 171, 216, 118, 61, 136, 182, 42, 189, 122, 238, 165, 60, 176, 34, 16, 61, 82, 225, 162, 187, 115, 132, 83, 61, 208, 200, 11, 61, 123, 252, 29, 60, 51, 48, 57, 188, 138, 188, 52, 188, 74, 55, 52, 61, 117, 198, 29, 61, 171, 78, 3, 59, 141, 141, 132, 188, 164, 73, 154, 61, 73, 200, 116, 187, 5, 94, 14, 189, 153, 80, 159, 189, 185, 58, 57, 187, 156, 206, 105, 61, 95, 251, 183, 61, 183, 136, 176, 61, 38, 146, 62, 61, 86, 29, 128, 61, 174, 202, 84, 60, 253, 6, 57, 189, 8, 20, 133, 189, 22, 153, 179, 191, 162, 13, 196, 190, 154, 101, 245, 189, 230, 121, 220, 60, 245, 22, 186, 61, 132, 134, 66, 62, 222, 197, 198, 61, 224, 126, 207, 188, 158, 147, 213, 61, 144, 250, 57, 189, 61, 215, 224, 188, 227, 203, 7, 189, 159, 233, 91, 60, 63, 218, 145, 59, 108, 52, 27, 61, 151, 252, 17, 61, 109, 16, 80, 60, 79, 123, 204, 60, 71, 162, 65, 60, 239, 62, 48, 189, 166, 93, 62, 189, 173, 192, 188, 59, 176, 222, 115, 188, 238, 135, 173, 185, 11, 238, 30, 187, 240, 17, 255, 188, 224, 127, 141, 188, 120, 221, 39, 61, 18, 80, 233, 60, 56, 209, 70, 59, 214, 14, 213, 60, 139, 135, 177, 59, 113, 73, 69, 188, 240, 165, 252, 60, 255, 97, 11, 189, 93, 243, 154, 60, 47, 167, 116, 61, 230, 210, 44, 61, 176, 62, 18, 61, 68, 55, 209, 191, 134, 211, 134, 190, 84, 61, 164, 189, 192, 46, 236, 60, 74, 187, 147, 61, 2, 247, 27, 62, 5, 25, 31, 61, 151, 148, 79, 61, 203, 185, 26, 61, 67, 11, 96, 60, 209, 90, 137, 61, 44, 231, 138, 187, 139, 141, 218, 60, 1, 73, 134, 189]).concat([239, 202, 183, 188, 233, 131, 134, 186, 227, 184, 167, 187, 137, 48, 172, 188, 117, 228, 136, 186, 209, 28, 14, 60, 84, 230, 27, 58, 206, 212, 134, 188, 226, 179, 28, 188, 238, 5, 169, 188, 247, 103, 188, 186, 76, 214, 32, 60, 15, 2, 199, 61, 156, 48, 155, 60, 32, 133, 121, 61, 198, 18, 156, 61, 0, 192, 37, 60, 130, 115, 66, 189, 5, 65, 122, 189, 63, 226, 50, 189, 243, 212, 31, 189, 48, 200, 173, 189, 6, 255, 3, 190, 165, 186, 91, 189, 160, 245, 68, 189, 186, 46, 183, 191, 219, 199, 252, 189, 181, 105, 171, 59, 100, 69, 22, 61, 153, 123, 226, 60, 200, 127, 221, 61, 213, 140, 148, 188, 131, 92, 62, 60, 200, 105, 139, 188, 231, 124, 128, 189, 184, 90, 14, 61, 45, 126, 116, 189, 23, 34, 206, 188, 190, 113, 155, 189, 93, 96, 78, 189, 106, 204, 7, 189, 127, 24, 90, 188, 248, 165, 114, 189, 32, 60, 137, 189, 224, 131, 46, 188, 251, 217, 72, 61, 124, 102, 134, 61, 253, 201, 93, 60, 213, 61, 192, 187, 210, 200, 202, 60, 122, 126, 56, 61, 147, 211, 215, 189, 36, 158, 180, 189, 159, 181, 53, 189, 252, 121, 215, 188, 245, 43, 154, 188, 243, 238, 171, 186, 251, 120, 43, 60, 255, 132, 152, 188, 119, 227, 1, 61, 57, 91, 46, 61, 249, 111, 161, 61, 77, 55, 239, 61, 172, 164, 211, 61, 128, 244, 145, 191, 189, 235, 187, 190, 174, 193, 46, 189, 14, 138, 55, 189, 69, 125, 183, 61, 123, 250, 175, 61, 255, 95, 197, 60, 187, 90, 147, 61, 174, 97, 74, 61, 111, 227, 21, 60, 25, 195, 78, 61, 201, 17, 18, 61, 184, 95, 254, 60, 209, 246, 87, 190, 83, 34, 231, 189, 244, 150, 156, 189, 35, 20, 155, 189, 185, 212, 108, 189, 74, 166, 95, 189, 225, 173, 122, 188, 192, 224, 217, 60, 188, 48, 100, 61, 36, 235, 155, 61, 220, 163, 110, 61, 196, 213, 36, 61, 137, 172, 47, 61, 100, 116, 190, 61, 199, 253, 148, 61, 131, 17, 187, 61, 178, 86, 142, 61, 159, 12, 47, 61, 191, 167, 130, 58, 23, 30, 13, 188, 93, 116, 167, 188, 169, 236, 49, 189, 203, 226, 217, 188, 67, 47, 12, 189, 62, 140, 35, 189, 87, 124, 4, 189, 100, 14, 170, 191, 203, 196, 199, 190, 113, 232, 108, 189, 85, 227, 122, 189, 30, 38, 174, 61, 253, 188, 150, 61, 249, 14, 216, 60, 102, 5, 132, 61, 239, 130, 207, 60, 143, 22, 26, 60, 156, 45, 97, 61, 229, 50, 249, 60, 237, 180, 244, 59, 139, 161, 180, 188, 124, 153, 112, 61, 38, 40, 143, 61, 6, 128, 105, 61, 241, 55, 88, 61, 187, 146, 28, 61, 186, 113, 164, 60, 95, 87, 77, 188, 54, 63, 213, 188, 150, 249, 10, 189, 212, 89, 59, 189, 50, 229, 74, 189, 108, 115, 86, 189, 73, 185, 242, 60, 144, 254, 244, 60, 44, 109, 252, 60, 134, 236, 60, 60, 77, 141, 218, 187, 140, 23, 26, 188, 141, 43, 139, 188, 192, 18, 160, 188, 89, 226, 200, 188, 167, 192, 209, 188, 142, 160, 226, 188, 78, 17, 130, 188, 151, 205, 130, 59, 10, 18, 154, 191, 185, 231, 176, 190, 87, 136, 142, 189, 225, 214, 199, 189, 151, 240, 228, 60, 186, 174, 66, 188, 75, 195, 17, 189, 35, 153, 48, 60, 42, 190, 88, 59, 105, 53, 162, 60, 37, 57, 133, 61, 168, 242, 5, 60, 31, 119, 134, 60, 3, 239, 61, 189, 124, 54, 19, 60, 185, 139, 102, 188, 243, 188, 250, 188, 76, 99, 205, 188, 191, 92, 158, 187, 190, 95, 66, 59, 194, 186, 117, 187, 149, 137, 246, 188, 168, 12, 18, 189, 42, 212, 159, 188, 31, 179, 139, 59, 208, 117, 195, 59, 124, 127, 158, 188, 255, 118, 39, 189, 135, 144, 85, 188, 249, 42, 191, 60, 172, 58, 159, 61, 136, 87, 192, 61, 80, 250, 143, 61, 24, 99, 179, 60, 184, 79, 36, 188, 5, 72, 71, 189, 175, 85, 231, 188, 6, 15, 40, 187, 12, 49, 81, 188, 135, 187, 143, 191, 223, 102, 171, 190, 15, 236, 27, 188, 248, 39, 169, 188, 114, 182, 239, 61, 222, 241, 192, 61, 89, 67, 128, 60, 48, 4, 226, 60, 233, 78, 134, 188, 151, 211, 77, 189, 96, 40, 240, 59, 44, 109, 65, 188, 177, 86, 130, 188, 199, 211, 1, 190, 181, 159, 242, 188, 116, 33, 17, 188, 226, 89, 25, 59, 77, 179, 222, 186, 58, 158, 88, 188, 117, 191, 229, 188, 18, 63, 114, 188, 45, 153, 47, 60, 8, 68, 125, 60, 170, 190, 216, 60, 0, 160, 140, 60, 218, 203, 192, 60, 240, 239, 82, 188, 152, 5, 240, 188, 253, 165, 65, 189, 216, 231, 133, 189, 32, 250, 134, 189, 82, 216, 114, 189, 204, 90, 6, 189, 176, 161, 140, 60, 103, 23, 79, 61, 151, 217, 144, 61, 71, 70, 137, 61, 64, 61, 50, 61, 159, 10, 1, 61, 169, 177, 184, 191, 83, 223, 209, 190, 144, 129, 104, 61, 165, 33, 97, 188, 142, 197, 236, 61, 217, 138, 235, 61, 217, 236, 243, 188, 170, 73, 106, 61, 238, 247, 109, 60, 22, 100, 206, 60, 227, 225, 44, 60, 81, 148, 140, 61, 117, 175, 106, 61, 235, 206, 35, 63, 109, 13, 240, 190, 95, 40, 238, 62, 155, 180, 115, 190, 162, 179, 25, 62, 15, 155, 246, 59, 167, 112, 218, 189, 132, 194, 78, 62, 167, 123, 122, 190, 208, 38, 24, 62, 173, 39, 50, 190, 46, 104, 198, 61, 142, 40, 155, 189, 153, 45, 70, 63, 148, 5, 228, 190, 169, 134, 205, 62, 50, 223, 123, 190, 10, 204, 26, 62, 19, 80, 158, 189, 163, 58, 101, 189, 110, 141, 187, 61, 243, 250, 42, 190, 145, 25, 242, 61, 194, 154, 238, 189, 118, 251, 121, 61, 181, 106, 19, 189, 199, 172, 64, 191, 206, 88, 104, 191, 219, 13, 167, 62, 123, 34, 205, 190, 180, 162, 192, 62, 220, 21, 51, 190, 52, 141, 41, 62, 114, 217, 211, 189, 19, 173, 253, 61, 104, 194, 161, 189, 14, 55, 15, 62, 46, 59, 222, 188, 139, 220, 223, 61, 14, 88, 59, 63, 182, 118, 208, 190, 106, 70, 145, 62, 51, 130, 135, 190, 176, 93, 38, 62, 90, 31, 30, 190, 126, 215, 231, 61, 250, 172, 251, 188, 39, 171, 196, 60, 126, 252, 186, 188, 88, 183, 220, 187, 92, 131, 62, 189, 32, 35, 239, 60, 254, 49, 117, 189, 162, 52, 156, 61, 180, 55, 189, 189, 53, 15, 237, 61, 234, 12, 200, 189, 200, 253, 186, 61, 42, 161, 15, 189, 206, 46, 157, 60, 238, 79, 141, 189, 105, 139, 136, 61, 248, 251, 26, 189, 69, 110, 134, 59, 157, 69, 24, 189, 241, 194, 226, 191, 232, 225, 1, 191, 192, 161, 26, 188, 194, 104, 149, 189, 75, 72, 20, 62, 113, 202, 105, 61, 112, 157, 32, 60, 143, 92, 2, 61, 233, 165, 34, 60, 42, 131, 216, 59, 209, 126, 101, 61, 189, 242, 66, 61, 22, 79, 181, 61, 19, 198, 229, 62, 14, 177, 134, 190, 159, 176, 97, 62, 210, 190, 33, 190, 103, 241, 38, 62, 88, 149, 148, 189, 136, 225, 152, 61, 52, 47, 118, 189, 178, 99, 29, 61, 5, 123, 42, 189, 70, 55, 175, 60, 7, 19, 46, 188, 185, 162, 41, 59, 29, 227, 0, 63, 40, 121, 113, 190, 78, 164, 93, 62, 245, 64, 44, 190, 181, 50, 197, 61, 180, 178, 208, 189, 255, 252, 71, 61, 144, 60, 140, 189, 116, 35, 194, 60, 41, 11, 220, 60, 20, 33, 188, 187, 223, 184, 220, 188, 125, 135, 132, 189, 246, 21, 152, 191, 206, 95, 45, 191, 83, 101, 48, 62, 249, 31, 94, 190, 36, 194, 150, 62, 153, 253, 65, 189, 243, 83, 192, 61, 166, 54, 226, 189, 70, 221, 83, 61, 92, 179, 130, 189, 172, 37, 7, 62, 197, 187, 193, 188, 206, 134, 72, 61, 159, 129, 37, 63, 126, 113, 209, 189, 247, 123, 216, 61, 118, 228, 237, 189, 82, 163, 136, 187, 201, 244, 145, 189, 117, 76, 26, 189, 120, 40, 110, 189, 177, 10, 141, 189, 96, 203, 107, 187, 77, 217, 180, 188, 95, 121, 54, 61, 49, 41, 152, 188, 86, 92, 23, 190, 60, 230, 147, 60, 76, 238, 12, 189, 85, 248, 198, 187, 133, 15, 104, 189, 151, 191, 17, 61, 75, 240, 33, 189, 102, 121, 198, 61, 146, 58, 25, 189, 166, 246, 136, 60, 3, 70, 166, 189, 67, 102, 205, 60, 17, 196, 2, 61, 101, 26, 16, 64, 135, 248, 152, 62, 224, 129, 39, 63, 176, 121, 127, 63, 138, 248, 159, 190, 50, 112, 133, 190, 132, 120, 142, 188, 166, 157, 184, 190, 112, 221, 92, 190, 126, 105, 21, 62, 74, 106, 37, 61, 207, 51, 17, 62, 124, 153, 27, 62, 19, 154, 29, 191, 79, 150, 244, 61, 199, 52, 167, 61, 26, 87, 85, 190, 35, 57, 9, 62, 126, 53, 17, 62, 40, 190, 160, 188, 250, 56, 0, 189, 229, 227, 191, 61, 146, 64, 131, 188, 226, 79, 212, 188, 230, 207, 84, 60, 98, 170, 241, 58, 13, 183, 54, 186, 50, 19, 13, 189, 44, 156, 19, 189, 38, 144, 104, 189, 28, 23, 31, 61, 240, 12, 245, 187, 50, 49, 18, 187, 134, 248, 153, 61, 44, 131, 53, 60, 184, 98, 84, 189, 53, 213, 174, 188, 5, 242, 227, 188, 17, 148, 23, 189, 181, 98, 43, 63, 197, 170, 106, 62, 194, 116, 190, 62, 36, 99, 111, 62, 202, 117, 205, 61, 211, 108, 231, 60, 216, 38, 158, 59, 162, 158, 109, 189, 214, 2, 136, 189, 89, 215, 94, 189, 86, 234, 159, 187, 205, 230, 70, 60, 17, 151, 173, 60, 14, 186, 36, 191, 160, 35, 136, 190, 71, 106, 31, 190, 196, 167, 1, 190, 205, 52, 178, 61, 222, 88, 137, 61, 64, 120, 140, 60, 48, 197, 147, 61, 48, 79, 4, 61, 148, 189, 159, 187, 105, 104, 114, 60, 64, 191, 45, 188, 80, 59, 239, 59, 49, 171, 19, 62, 180, 79, 41, 61, 160, 217, 193, 185, 157, 86, 58, 61, 178, 63, 22, 189, 115, 87, 47, 189, 151, 89, 77, 189, 247, 141, 77, 189, 213, 29, 18, 189, 220, 195, 83, 187, 231, 132, 103, 60, 255, 203, 152, 60, 77, 38, 80, 60, 121, 188, 94, 63, 227, 196, 139, 62, 83, 250, 185, 62, 31, 24, 247, 62, 24, 105, 190, 61, 128, 149, 24, 190, 174, 106, 43, 190, 159, 67, 32, 190, 252, 175, 49, 190, 25, 234, 26, 190, 63, 114, 60, 189, 72, 50, 140, 60, 188, 163, 186, 188, 216, 18, 123, 191, 139, 94, 133, 190, 110, 179, 123, 189, 240, 118, 159, 190, 124, 17, 31, 61, 84, 71, 61, 62, 191, 238, 211, 61, 218, 115, 199, 61, 92, 115, 219, 60, 49, 53, 83, 60, 254, 196, 128, 60, 118, 211, 175, 187, 166, 73, 19, 188, 148, 253, 85, 61, 218, 199, 37, 190, 231, 143, 71, 190, 248, 86, 81, 189, 184, 17, 33, 189, 146, 246, 196, 59, 35, 237, 70, 61, 118, 126, 74, 60, 190, 161, 208, 61, 203, 230, 168, 61, 152, 59, 112, 188, 208, 172, 15, 189, 34, 183, 209, 60, 171, 53, 100, 64, 238, 182, 15, 62, 131, 210, 161, 62, 174, 250, 135, 63, 79, 127, 5, 191, 127, 127, 26, 191, 125, 215, 99, 189, 218, 193, 119, 189, 220, 54, 62, 190, 65, 39, 73, 61, 16, 81, 104, 188, 82, 192, 142, 61, 195, 232, 212, 60, 80, 161, 11, 191, 109, 212, 201, 189, 252, 227, 149, 62, 42, 61, 67, 62, 241, 116, 9, 61, 148, 197, 38, 62, 96, 183, 69, 61, 12, 55, 11, 190, 248, 38, 16, 190, 220, 94, 135, 187, 112, 100, 167, 61, 92, 94, 37, 59, 49, 118, 59, 61, 184, 217, 154, 189, 237, 68, 219, 61, 165, 11, 162, 189, 105, 61, 166, 189, 146, 79, 156, 61, 96, 189, 200, 60, 194, 147, 206, 185, 166, 133, 104, 189, 180, 249, 209, 60, 193, 137, 54, 61, 209, 146, 225, 188, 110, 86, 204, 59, 137, 176, 1, 61, 91, 101, 70, 63, 118, 75, 204, 62, 34, 138, 49, 63, 4, 31, 42, 63, 96, 141, 209, 62, 123, 46, 108, 61, 144, 207, 140, 189, 63, 105, 4, 190, 6, 251, 59, 190, 129, 90, 28, 190, 196, 46, 44, 190, 191, 12, 99, 188, 252, 175, 210, 60, 200, 201, 130, 190, 67, 243, 43, 61, 159, 215, 118, 188, 119, 210, 236, 189, 115, 7, 130, 61, 163, 173, 175, 61, 171, 104, 213, 60, 188, 45, 66, 60, 45, 191, 166, 188, 142, 89, 44, 61, 87, 197, 162, 60, 196, 95, 49, 189, 233, 88, 28, 61, 125, 8, 181, 61, 231, 209, 27, 189, 52, 149, 51, 189, 218, 7, 6, 61, 143, 134, 80, 189, 86, 198, 70, 188, 247, 61, 201, 58, 18, 79, 152, 188, 83, 216, 208, 60, 146, 132, 202, 186, 94, 144, 211, 187, 105, 90, 186, 59, 171, 168, 54, 189, 233, 246, 238, 190, 209, 108, 19, 190, 69, 194, 61, 62, 222, 250, 133, 62, 171, 252, 146, 62, 33, 112, 89, 62, 124, 248, 16, 61, 72, 212, 47, 60, 147, 248, 150, 189, 176, 7, 153, 189, 196, 10, 0, 190, 111, 129, 164, 189, 219, 4, 172, 60, 253, 89, 240, 190, 17, 52, 166, 190, 45, 68, 120, 190, 254, 120, 44, 190, 221, 127, 182, 189, 121, 94, 137, 187, 39, 154, 216, 60, 100, 198, 166, 61, 190, 107, 173, 61, 73, 137, 185, 61, 197, 56, 166, 61, 235, 208, 204, 60, 27, 218, 13, 61, 51, 96, 152, 61, 105, 160, 93, 61, 207, 134, 117, 61, 121, 226, 45, 61, 137, 249, 244, 59, 19, 206, 211, 188, 246, 163, 128, 188, 85, 240, 29, 188, 75, 116, 184, 59, 93, 49, 162, 60, 58, 182, 237, 60, 95, 129, 62, 61, 247, 190, 219, 60, 78, 201, 232, 62, 207, 153, 203, 62, 69, 96, 21, 63, 145, 184, 1, 63, 47, 203, 183, 62, 169, 223, 71, 62, 45, 197, 123, 60, 115, 102, 93, 189, 131, 158, 58, 190, 204, 200, 39, 190, 116, 135, 55, 190, 228, 131, 237, 189, 106, 128, 149, 189, 154, 51, 152, 190, 59, 214, 41, 190, 167, 195, 35, 190, 15, 129, 1, 190, 92, 44, 135, 188, 0, 119, 206, 60, 94, 192, 160, 60, 94, 221, 82, 61, 153, 227, 10, 61, 236, 100, 91, 186, 230, 209, 229, 187, 173, 180, 32, 60, 73, 26, 110, 58, 230, 200, 19, 189, 34, 41, 94, 189, 237, 28, 6, 189, 155, 216, 180, 188, 141, 135, 238, 188, 97, 94, 67, 188, 144, 227, 141, 188, 202, 140, 121, 59, 131, 50, 135, 60, 232, 132, 27, 60, 134, 95, 193, 60, 54, 205, 15, 60, 185, 38, 27, 60, 117, 196, 189, 190, 218, 10, 141, 188, 156, 33, 171, 62, 93, 161, 160, 62, 133, 22, 17, 62, 28, 224, 243, 189, 17, 200, 146, 190, 149, 233, 86, 190, 202, 194, 125, 190, 33, 26, 250, 189, 245, 154, 106, 189, 17, 157, 65, 61, 249, 65, 70, 62, 204, 18, 51, 191, 3, 12, 105, 190, 21, 12, 26, 190, 108, 191, 177, 189, 222, 110, 97, 59, 113, 31, 18, 62, 85, 40, 94, 61, 52, 172, 103, 61, 55, 34, 202, 61, 206, 8, 137, 61, 221, 182, 110, 60, 178, 50, 119, 59, 41, 51, 53, 61, 15, 146, 1, 62, 175, 235, 145, 189, 140, 61, 127, 189, 252, 73, 104, 60, 229, 48, 167, 59, 41, 120, 16, 189, 56, 22, 85, 61, 253, 59, 170, 61, 75, 175, 132, 60, 210, 87, 21, 61, 72, 19, 75, 187, 65, 27, 76, 189, 11, 225, 154, 189, 7, 141, 237, 191, 120, 104, 174, 190, 62, 215, 73, 61, 211, 209, 144, 188, 96, 36, 54, 61, 151, 191, 114, 60, 127, 171, 130, 61, 149, 252, 179, 61, 201, 4, 65, 189, 109, 94, 32, 189, 172, 140, 133, 188, 176, 132, 141, 60, 251, 165, 110, 61, 48, 90, 39, 188, 10, 213, 40, 61, 204, 213, 104, 61, 150, 116, 224, 61, 105, 7, 134, 61, 4, 152, 245, 59, 25, 119, 179, 188, 152, 0, 250, 60, 178, 70, 210, 60, 20, 3, 240, 188, 233, 38, 14, 61, 26, 119, 151, 187, 189, 54, 3, 187, 194, 57, 21, 62, 132, 149, 2, 62, 192, 175, 4, 62, 86, 120, 141, 61, 86, 2, 6, 61, 113, 229, 16, 61, 206, 201, 125, 189, 196, 4, 161, 189, 34, 132, 169, 61, 207, 52, 15, 61, 224, 155, 109, 61, 3, 64, 112, 61, 255, 206, 124, 189, 115, 179, 133, 192, 90, 160, 36, 191, 44, 112, 56, 63, 78, 129, 0, 190, 26, 12, 128, 62, 55, 181, 113, 60, 200, 79, 136, 60, 124, 228, 99, 62, 33, 39, 139, 189, 107, 188, 190, 60, 78, 204, 144, 187, 193, 151, 25, 62, 40, 7, 21, 62, 103, 142, 57, 60, 25, 17, 164, 60, 82, 235, 10, 61, 8, 244, 76, 61, 142, 108, 157, 61, 253, 55, 48, 61, 156, 63, 161, 58, 53, 57, 20, 189, 85, 35, 154, 189, 193, 91, 199, 188, 228, 120, 89, 60, 90, 73, 254, 59, 159, 78, 74, 189, 11, 133, 180, 61, 65, 120, 27, 57, 24, 48, 20, 188, 224, 14, 13, 188, 140, 104, 172, 60, 245, 48, 159, 188, 106, 200, 82, 189, 125, 22, 14, 61, 65, 27, 153, 60, 34, 184, 133, 61, 173, 4, 234, 60, 104, 242, 0, 61, 212, 208, 118, 60, 162, 106, 132, 192, 6, 85, 45, 191, 66, 221, 50, 63, 182, 94, 34, 190, 231, 234, 135, 62, 88, 70, 237, 60, 8, 83, 166, 188, 141, 71, 114, 62, 163, 12, 158, 189, 170, 88, 162, 59, 235, 234, 28, 189, 108, 59, 14, 62, 176, 251, 223, 61, 63, 100, 63, 189, 249, 210, 184, 188, 104, 85, 143, 188, 43, 43, 35, 189, 253, 79, 136, 189, 31, 93, 94, 189, 165, 44, 70, 187, 124, 233, 19, 61, 86, 34, 23, 61, 203, 207, 1, 61, 255, 184, 158, 188, 35, 242, 63, 188, 195, 252, 41, 61, 148, 17, 170, 189, 202, 13, 15, 189, 143, 98, 218, 188, 230, 67, 44, 188, 33, 151, 230, 188, 140, 193, 80, 60, 11, 21, 66, 61, 61, 109, 68, 188, 208, 209, 206, 187, 93, 218, 18, 189, 159, 79, 2, 187, 114, 183, 10, 189, 98, 233, 28, 187, 209, 86, 110, 192, 219, 167, 159, 190, 133, 101, 62, 62, 184, 160, 76, 62, 15, 187, 206, 60, 241, 23, 232, 61, 215, 148, 35, 61, 203, 228, 149, 189, 237, 44, 110, 61, 203, 161, 225, 60, 230, 31, 241, 61, 180, 210, 137, 61, 47, 122, 57, 188, 142, 104, 225, 189, 249, 44, 162, 60, 88, 89, 117, 188, 210, 12, 152, 188, 182, 20, 128, 59, 131, 115, 117, 188, 178, 248, 64, 60, 197, 211, 6, 188, 86, 137, 222, 188, 111, 117, 116, 188, 6, 180, 5, 188, 116, 124, 167, 58, 82, 70, 179, 60, 143, 208, 137, 187, 85, 29, 133, 188, 12, 21, 115, 189, 230, 133, 214, 58, 234, 234, 131, 60, 66, 3, 141, 187, 141, 181, 37, 60, 211, 156, 53, 58, 126, 241, 82, 188, 211, 141, 151, 188, 105, 33, 177, 188, 245, 103, 99, 57, 19, 99, 154, 59, 37, 147, 220, 191, 110, 202, 186, 190, 99, 93, 9, 62, 5, 47, 98, 61, 58, 3, 183, 61, 123, 225, 35, 189, 46, 240, 38, 60, 127, 221, 37, 61, 50, 204, 159, 189, 219, 214, 255, 60, 33, 140, 104, 61, 129, 253, 94, 61, 117, 147, 196, 187, 132, 126, 219, 189, 211, 151, 78, 60, 211, 236, 235, 59, 160, 2, 101, 60, 131, 226, 4, 60, 0, 248, 25, 60, 122, 56, 180, 59, 170, 132, 228, 59, 217, 146, 129, 60, 203, 139, 37, 60, 57, 110, 44, 188, 84, 62, 45, 187, 250, 122, 146, 187, 194, 248, 48, 189, 222, 99, 84, 189, 171, 230, 164, 188, 85, 199, 41, 187, 219, 111, 26, 60, 220, 88, 127, 60, 165, 80, 179, 60, 219, 211, 36, 61, 175, 221, 39, 61, 41, 246, 203, 60, 20, 186, 137, 187, 79, 245, 30, 60, 45, 38, 128, 60, 163, 190, 77, 190, 45, 38, 93, 189, 14, 178, 129, 188, 128, 96, 157, 188, 140, 104, 152, 60, 240, 44, 62, 189, 49, 87, 120, 60, 119, 34, 202, 60, 108, 156, 197, 188, 111, 119, 14, 61, 134, 182, 18, 188, 74, 183, 178, 60, 75, 126, 148, 58, 128, 238, 38, 188, 106, 141, 32, 61, 153, 137, 8, 60, 201, 109, 152, 189, 6, 43, 59, 188, 176, 1, 67, 61, 136, 72, 185, 60, 68, 248, 169, 59, 33, 66, 169, 60, 118, 53, 140, 187, 160, 108, 42, 187, 63, 201, 165, 60, 5, 81, 82, 60, 30, 213, 147, 61, 50, 234, 146, 60, 130, 233, 209, 60, 94, 38, 12, 188, 189, 178, 176, 188, 202, 34, 141, 188, 50, 149, 25, 60, 204, 81, 35, 188, 34, 78, 174, 60, 61, 34, 74, 60, 51, 178, 145, 60, 38, 8, 14, 188, 155, 235, 126, 60, 207, 188, 161, 191, 19, 146, 0, 191, 48, 16, 192, 189, 104, 143, 186, 61, 36, 18, 63, 62, 70, 50, 9, 62, 198, 159, 13, 61, 79, 40, 21, 188, 225, 172, 215, 188, 242, 244, 91, 60, 75, 157, 37, 61, 98, 79, 159, 188, 40, 45, 96, 187, 192, 68, 75, 189, 37, 78, 5, 188, 138, 211, 166, 187, 226, 152, 191, 58, 48, 65, 157, 187, 124, 30, 151, 58, 52, 35, 98, 187, 31, 108, 20, 188, 236, 178, 192, 187, 89, 82, 37, 188, 180, 185, 53, 60, 58, 217, 19, 58, 22, 135, 229, 59, 64, 215, 38, 61, 238, 187, 63, 61, 72, 196, 173, 60, 179, 245, 170, 187, 153, 4, 91, 188, 41, 39, 67, 188, 97, 88, 171, 188, 201, 166, 7, 189, 218, 86, 74, 189, 190, 11, 165, 188, 207, 218, 126, 59, 35, 200, 150, 58, 85, 98, 61, 58, 61, 55, 162, 189, 208, 51, 0, 189, 161, 60, 233, 59, 146, 153, 235, 186, 226, 171, 29, 61, 124, 24, 95, 189, 232, 147, 96, 188, 253, 203, 154, 60, 223, 25, 8, 189, 141, 113, 45, 189, 71, 132, 137, 189, 232, 170, 113, 188, 75, 114, 131, 187, 61, 134, 28, 190, 202, 239, 223, 188, 23, 209, 75, 189, 3, 130, 14, 60, 10, 240, 70, 61, 168, 83, 187, 188, 94, 27, 7, 188, 223, 233, 135, 188, 238, 79, 121, 189, 107, 143, 33, 61, 232, 44, 120, 60, 180, 68, 139, 187, 222, 151, 175, 188, 241, 149, 158, 189, 31, 54, 44, 189, 79, 243, 31, 189, 248, 86, 151, 188, 118, 1, 163, 58, 197, 12, 34, 61, 88, 219, 241, 187, 71, 254, 88, 59, 236, 28, 147, 60, 130, 168, 247, 188, 146, 19, 99, 187, 126, 80, 98, 60, 226, 170, 66, 187, 141, 217, 154, 191, 28, 178, 214, 190, 8, 137, 210, 189, 97, 43, 157, 189, 190, 126, 102, 61, 85, 240, 113, 61, 167, 110, 224, 60, 219, 254, 132, 61, 131, 134, 32, 61, 147, 201, 158, 60, 31, 67, 113, 61, 251, 212, 61, 61, 3, 113, 16, 61, 56, 4, 189, 189, 29, 145, 124, 59, 39, 201, 85, 60, 120, 136, 130, 60, 134, 105, 118, 59, 137, 165, 47, 60, 74, 49, 183, 60, 132, 14, 24, 60, 228, 17, 23, 188, 77, 187, 132, 187, 245, 98, 20, 188, 37, 25, 2, 188, 151, 13, 118, 187, 25, 136, 8, 62, 33, 254, 0, 62, 219, 118, 219, 61, 116, 232, 142, 61, 41, 126, 60, 61, 203, 11, 117, 59, 143, 162, 111, 189, 219, 23, 123, 189, 229, 170, 148, 189, 181, 139, 82, 189, 129, 221, 77, 189, 137, 46, 54, 189, 231, 219, 10, 189, 172, 205, 163, 191, 3, 112, 161, 190, 33, 216, 187, 187, 43, 132, 230, 188, 72, 239, 178, 61, 95, 141, 79, 61, 8, 177, 197, 59, 247, 135, 47, 61, 135, 200, 189, 56, 14, 168, 12, 189, 92, 24, 165, 59, 181, 99, 22, 189, 192, 207, 217, 188, 212, 32, 53, 189, 175, 168, 246, 60, 127, 5, 3, 61, 246, 31, 38, 61, 233, 226, 24, 61, 155, 144, 147, 60, 80, 254, 120, 188, 192, 50, 178, 188, 250, 133, 196, 187, 80, 128, 55, 59, 35, 138, 34, 60, 147, 253, 105, 60, 96, 134, 30, 58, 220, 241, 144, 189, 146, 44, 138, 189, 20, 19, 86, 189, 209, 120, 129, 188, 122, 50, 142, 186, 27, 154, 89, 60, 141, 25, 172, 60, 13, 120, 1, 59, 218, 97, 155, 60, 75, 194, 20, 61, 129, 60, 67, 61, 155, 175, 114, 61, 15, 110, 66, 61, 50, 212, 149, 191, 51, 54, 182, 190, 242, 149, 86, 189, 67, 166, 38, 189, 80, 198, 168, 61, 120, 11, 64, 61, 163, 252, 106, 188, 149, 85, 102, 57, 230, 160, 231, 188, 157, 63, 231, 188, 8, 81, 30, 61, 237, 134, 6, 60, 113, 17, 131, 60, 159, 236, 166, 189, 229, 51, 164, 60, 239, 195, 8, 61, 248, 174, 7, 60, 245, 41, 90, 60, 29, 234, 130, 60, 234, 65, 179, 60, 41, 164, 131, 60, 133, 240, 0, 188, 78, 209, 37, 189, 80, 104, 129, 189, 132, 143, 138, 189, 14, 20, 40, 189, 153, 48, 34, 189, 165, 179, 96, 189, 253, 186, 100, 189, 19, 206, 125, 189, 167, 209, 68, 189, 78, 224, 58, 188, 54, 199, 234, 60, 24, 118, 55, 61, 201, 24, 138, 61, 47, 49, 37, 61, 113, 193, 157, 60, 114, 250, 158, 60, 193, 8, 208, 60, 74, 222, 130, 191, 7, 224, 177, 190, 232, 60, 39, 189, 218, 13, 2, 189, 37, 72, 172, 61, 164, 132, 113, 61, 140, 246, 47, 188, 140, 132, 147, 60, 115, 214, 29, 187, 206, 110, 162, 188, 31, 47, 183, 60, 201, 194, 89, 60, 109, 62, 151, 60, 189, 68, 78, 190, 214, 230, 185, 189, 176, 90, 185, 189, 184, 138, 167, 189, 36, 5, 78, 189, 184, 42, 206, 188, 26, 88, 116, 188, 96, 157, 59, 60, 185, 197, 4, 61, 15, 117, 82, 61, 165, 228, 117, 61, 96, 115, 95, 61, 248, 153, 31, 61, 107, 247, 44, 61, 70, 254, 222, 60, 157, 168, 252, 60, 231, 49, 217, 60, 245, 154, 55, 60, 37, 38, 82, 188, 11, 65, 241, 59, 103, 71, 26, 60, 33, 186, 163, 188, 244, 16, 239, 188, 217, 101, 222, 188, 185, 55, 5, 189, 26, 53, 11, 189, 92, 126, 102, 191, 105, 45, 137, 190, 30, 238, 25, 62, 2, 2, 17, 62, 206, 133, 92, 62, 48, 84, 130, 62, 33, 22, 232, 61, 46, 71, 35, 62, 27, 130, 0, 62, 50, 100, 202, 59, 131, 125, 63, 61, 18, 74, 203, 61, 45, 235, 116, 61, 31, 223, 4, 190, 16, 22, 43, 188, 140, 235, 50, 60, 245, 61, 64, 60, 33, 129, 195, 60, 156, 23, 231, 59, 29, 68, 178, 59, 224, 159, 197, 187, 85, 34, 249, 187, 137, 153, 56, 188, 165, 40, 133, 188, 236, 145, 2, 188, 45, 246, 19, 188, 39, 26, 73, 60, 27, 241, 85, 60, 250, 35, 131, 60, 99, 128, 158, 60, 166, 178, 23, 188, 181, 131, 20, 188, 158, 118, 2, 59, 27, 212, 37, 188, 16, 129, 187, 188, 250, 129, 12, 188, 9, 123, 126, 60, 212, 19, 190, 185, 179, 23, 86, 188, 217, 101, 197, 191, 94, 120, 153, 190, 168, 65, 81, 188, 143, 3, 131, 189, 119, 95, 56, 61, 27, 231, 171, 61, 141, 190, 135, 188, 159, 176, 60, 61, 117, 232, 183, 60, 38, 82, 83, 59, 68, 20, 47, 61, 38, 208, 36, 61, 15, 178, 91, 61, 227, 203, 37, 62, 162, 221, 139, 60, 77, 238, 38, 61, 213, 24, 252, 188, 19, 156, 166, 60, 1, 41, 209, 60, 33, 140, 61, 61, 40, 217, 192, 60, 6, 1, 202, 60, 93, 127, 4, 189, 16, 74, 55, 60, 201, 97, 74, 188, 121, 19, 179, 187, 229, 95, 160, 62, 115, 185, 179, 61, 48, 73, 24, 62, 54, 115, 225, 61, 153, 148, 57, 61, 233, 213, 14, 189, 69, 112, 153, 59, 233, 123, 188, 189, 224, 184, 26, 189, 203, 104, 142, 188, 177, 199, 137, 188, 147, 125, 31, 189, 225, 9, 234, 188, 17, 165, 242, 191, 195, 112, 220, 190, 238, 183, 31, 60, 206, 200, 87, 189, 104, 0, 182, 61, 169, 114, 67, 61, 191, 206, 35, 189, 63, 126, 66, 61, 86, 245, 253, 60, 85, 69, 12, 61, 1, 62, 135, 61, 191, 32, 174, 61, 214, 0, 144, 61, 104, 247, 188, 189, 76, 5, 8, 189, 228, 137, 181, 60, 173, 213, 4, 60, 41, 177, 198, 60, 34, 131, 133, 187, 139, 10, 149, 188, 142, 0, 143, 188, 133, 233, 179, 59, 179, 114, 51, 59, 136, 12, 178, 188, 2, 182, 235, 187, 230, 91, 161, 188, 248, 158, 230, 61, 8, 217, 214, 60, 34, 114, 149, 59, 76, 209, 208, 60, 84, 109, 38, 61, 252, 189, 49, 61, 198, 159, 227, 60, 75, 134, 115, 60, 128, 130, 48, 189, 27, 193, 87, 189, 235, 241, 110, 189, 201, 253, 168, 189, 27, 150, 125, 189, 220, 170, 194, 191, 213, 179, 198, 190, 47, 158, 253, 60, 176, 4, 26, 61, 149, 251, 15, 62, 205, 152, 29, 62, 142, 65, 48, 188, 121, 149, 187, 60, 61, 198, 103, 188, 109, 252, 34, 189, 210, 106, 208, 188, 56, 181, 71, 60, 58, 250, 59, 61, 17, 14, 231, 60, 125, 192, 47, 61, 247, 242, 40, 59, 21, 75, 58, 189, 139, 32, 75, 189, 85, 148, 76, 189, 114, 248, 34, 189, 152, 13, 66, 188, 93, 163, 7, 189, 54, 232, 25, 188, 138, 231, 0, 60, 64, 37, 107, 61, 241, 243, 89, 61, 119, 62, 255, 61, 92, 237, 245, 60, 13, 79, 131, 189, 111, 127, 223, 189, 44, 124, 200, 189, 211, 145, 9, 190, 15, 207, 136, 189, 91, 145, 29, 60, 5, 16, 220, 61, 235, 79, 220, 61, 207, 242, 180, 61, 76, 101, 175, 61, 99, 176, 69, 61, 62, 202, 192, 191, 212, 58, 17, 191, 13, 64, 190, 189, 187, 185, 25, 61, 61, 123, 118, 62, 125, 124, 173, 61, 78, 84, 55, 189, 35, 183, 154, 61, 220, 136, 48, 188, 245, 100, 136, 61, 237, 26, 190, 60, 149, 189, 129, 61, 105, 174, 19, 62, 191, 69, 52, 190, 219, 184, 14, 189, 72, 226, 99, 60, 52, 152, 207, 60, 198, 186, 201, 61, 171, 152, 89, 61, 171, 251, 184, 60, 153, 45, 7, 60, 199, 187, 146, 60, 87, 205, 131, 60, 0, 148, 134, 61, 218, 229, 173, 61, 6, 64, 208, 60, 82, 207, 66, 61, 100, 247, 195, 188, 15, 66, 206, 60, 188, 184, 167, 59, 70, 79, 132, 60, 34, 174, 54, 61, 137, 0, 198, 60, 162, 19, 111, 188, 55, 60, 136, 61, 86, 238, 110, 61, 204, 172, 66, 61, 254, 103, 239, 60, 80, 252, 235, 60, 172, 51, 215, 191, 53, 153, 30, 191, 245, 219, 162, 189, 70, 31, 96, 61, 25, 220, 45, 62, 46, 200, 231, 61, 188, 186, 76, 188, 149, 77, 12, 61, 2, 241, 34, 60, 207, 37, 255, 61, 113, 227, 3, 61, 213, 97, 189, 61, 64, 242, 24, 62, 176, 105, 182, 59, 207, 7, 56, 189, 183, 96, 222, 187, 81, 248, 190, 189, 222, 128, 193, 189, 153, 15, 197, 189, 143, 200, 126, 188, 199, 75, 202, 58, 78, 24, 138, 61, 106, 170, 96, 61, 157, 248, 95, 188, 51, 47, 196, 187, 161, 17, 132, 58, 237, 33, 90, 62, 90, 118, 210, 61, 10, 153, 181, 61, 84, 54, 88, 189, 57, 232, 62, 188, 84, 173, 196, 188, 231, 219, 244, 187, 11, 180, 54, 61, 201, 108, 92, 60, 176, 12, 201, 189, 129, 215, 118, 189, 226, 1, 132, 189, 231, 179, 47, 189, 30, 126, 220, 191, 118, 13, 20, 191, 51, 143, 44, 190, 27, 208, 155, 188, 212, 169, 69, 62, 219, 36, 251, 61, 137, 29, 69, 61, 92, 211, 185, 61, 110, 164, 72, 187, 127, 158, 225, 61, 248, 84, 158, 59, 219, 205, 149, 61, 131, 250, 24, 62, 81, 35, 200, 189, 150, 180, 38, 59, 123, 136, 166, 60, 38, 188, 154, 60, 41, 23, 180, 60, 14, 181, 34, 61, 197, 254, 125, 60, 5, 140, 197, 59, 217, 233, 230, 187, 124, 252, 25, 189, 122, 1, 142, 188, 63, 129, 111, 188, 43, 149, 59, 58, 188, 175, 13, 60, 15, 33, 6, 189, 98, 142, 50, 188, 24, 38, 30, 188, 59, 203, 2, 189, 207, 239, 13, 58, 11, 117, 186, 60, 81, 133, 210, 188, 238, 20, 174, 188, 120, 84, 217, 59, 130, 157, 161, 60, 135, 132, 2, 59, 11, 102, 198, 188, 110, 157, 167, 191, 168, 160, 11, 191, 0, 102, 156, 189, 216, 211, 97, 60, 64, 14, 134, 62, 251, 29, 26, 62, 82, 133, 89, 61, 156, 167, 182, 61, 159, 128, 220, 187, 131, 177, 116, 61, 159, 78, 106, 189, 183, 142, 39, 59, 243, 165, 184, 61, 236, 118, 45, 190, 205, 146, 182, 189, 143, 180, 213, 189, 111, 119, 215, 189, 49, 43, 135, 189, 0, 215, 175, 189, 232, 193, 126, 189, 143, 51, 155, 188, 213, 134, 133, 188, 151, 52, 250, 60, 73, 167, 161, 60, 138, 211, 211, 60, 175, 166, 39, 61, 102, 236, 199, 60, 36, 163, 71, 61, 195, 164, 52, 186, 203, 16, 73, 61, 46, 208, 104, 60, 249, 26, 166, 189, 52, 225, 183, 189, 105, 129, 144, 188, 35, 39, 158, 189, 55, 14, 35, 189, 211, 177, 9, 189, 132, 149, 34, 188, 14, 159, 141, 60, 255, 87, 169, 198]), true, true);
Module['FS_createDataFile']('/rm1_200', 'sendump', [30, 0, 0, 0, 66, 69, 71, 73, 78, 32, 70, 73, 76, 69, 32, 70, 79, 82, 77, 65, 84, 32, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 48, 0, 0, 0, 40, 105, 110, 116, 51, 50, 41, 32, 60, 108, 101, 110, 103, 116, 104, 40, 115, 116, 114, 105, 110, 103, 41, 62, 32, 40, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 48, 41, 0, 32, 0, 0, 0, 60, 115, 116, 114, 105, 110, 103, 62, 32, 40, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 48, 41, 0, 51, 0, 0, 0, 46, 46, 46, 32, 112, 114, 101, 99, 101, 100, 105, 110, 103, 32, 50, 32, 105, 116, 101, 109, 115, 32, 114, 101, 112, 101, 97, 116, 101, 100, 32, 97, 110, 121, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 105, 109, 101, 115, 0, 51, 0, 0, 0, 40, 105, 110, 116, 51, 50, 41, 32, 48, 32, 40, 108, 101, 110, 103, 116, 104, 40, 115, 116, 114, 105, 110, 103, 41, 61, 48, 32, 116, 101, 114, 109, 105, 110, 97, 116, 101, 115, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 41, 0, 21, 0, 0, 0, 40, 105, 110, 116, 51, 50, 41, 32, 60, 35, 99, 111, 100, 101, 119, 111, 114, 100, 115, 62, 0, 16, 0, 0, 0, 40, 105, 110, 116, 51, 50, 41, 32, 60, 35, 112, 100, 102, 115, 62, 0, 58, 0, 0, 0, 50, 53, 54, 32, 40, 105, 110, 116, 51, 50, 41, 32, 99, 108, 117, 115, 116, 101, 114, 45, 112, 114, 111, 98, 32, 118, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 99, 111, 100, 101, 98, 111, 111, 107, 45, 48, 32, 99, 111, 100, 101, 119, 111, 114, 100, 45, 48, 0, 64, 0, 0, 0, 35, 112, 100, 102, 32, 40, 117, 110, 115, 105, 103, 110, 101, 100, 32, 99, 104, 97, 114, 41, 32, 99, 108, 117, 115, 116, 101, 114, 45, 112, 114, 111, 98, 32, 105, 100, 115, 32, 102, 111, 114, 32, 99, 111, 100, 101, 98, 111, 111, 107, 45, 48, 32, 99, 111, 100, 101, 119, 111, 114, 100, 45, 48, 0, 63, 0, 0, 0, 46, 46, 46, 32, 112, 114, 101, 99, 101, 100, 105, 110, 103, 32, 50, 32, 105, 116, 101, 109, 115, 32, 114, 101, 112, 101, 97, 116, 101, 100, 32, 102, 111, 114, 32, 97, 108, 108, 32, 99, 111, 100, 101, 119, 111, 114, 100, 115, 32, 105, 110, 32, 99, 111, 100, 101, 98, 111, 111, 107, 45, 48, 0, 50, 0, 0, 0, 112, 114, 101, 99, 101, 100, 105, 110, 103, 32, 51, 32, 105, 116, 101, 109, 115, 32, 114, 101, 112, 101, 97, 116, 101, 100, 32, 102, 111, 114, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 32, 49, 44, 32, 50, 44, 32, 51, 46, 0, 28, 0, 0, 0, 69, 78, 68, 32, 70, 73, 76, 69, 32, 70, 79, 82, 77, 65, 84, 32, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 0, 16, 0, 0, 0, 99, 108, 117, 115, 116, 101, 114, 95, 99, 111, 117, 110, 116, 32, 48, 0, 17, 0, 0, 0, 99, 111, 100, 101, 98, 111, 111, 107, 95, 99, 111, 117, 110, 116, 32, 49, 0, 16, 0, 0, 0, 102, 101, 97, 116, 117, 114, 101, 95, 99, 111, 117, 110, 116, 32, 49, 0, 3, 0, 0, 0, 33, 33, 33, 0, 0, 0, 0, 4, 0, 0, 0, 157, 0, 0, 0, 16, 15, 17, 18, 13, 15, 14, 16, 20, 25, 14, 17, 13, 14, 16, 10, 14, 14, 20, 16, 17, 14, 12, 15, 26, 15, 13, 12, 21, 17, 13, 16, 10, 21, 20, 16, 15, 17, 19, 15, 16, 16, 11, 13, 17, 14, 20, 17, 12, 18, 15, 13, 10, 20, 15, 15, 21, 16, 15, 13, 17, 18, 18, 20, 16, 15, 18, 14, 16, 15, 14, 12, 25, 14, 16, 14, 19, 13, 14, 14, 14, 13, 10, 13, 12, 13, 7, 14, 24, 19, 18, 19, 15, 17, 17, 15, 17, 14, 15, 15, 12, 16, 12, 15, 14, 24, 12, 21, 15, 13, 15, 13, 17, 22, 10, 19, 21, 21, 28, 16, 16, 14, 16, 9, 15, 15, 15, 19, 15, 16, 11, 13, 11, 13, 15, 11, 19, 14, 14, 13, 17, 20, 17, 12, 16, 15, 16, 16, 16, 15, 15, 14, 20, 11, 15, 19, 16, 12, 17, 15, 14, 18, 16, 19, 10, 15, 13, 11, 12, 15, 13, 11, 16, 15, 12, 11, 13, 12, 14, 13, 13, 9, 13, 18, 19, 10, 16, 14, 12, 18, 11, 11, 10, 13, 13, 13, 15, 15, 17, 13, 12, 9, 21, 14, 19, 17, 13, 15, 17, 16, 11, 13, 13, 12, 12, 17, 16, 15, 14, 14, 8, 13, 17, 9, 19, 10, 14, 14, 16, 13, 11, 10, 12, 9, 15, 13, 10, 10, 14, 16, 17, 19, 12, 29, 13, 10, 11, 12, 12, 14, 12, 13, 13, 12, 23, 13, 11, 17, 13, 20, 15, 15, 7, 19, 10, 14, 17, 14, 14, 9, 10, 18, 10, 11, 12, 10, 14, 10, 14, 14, 16, 14, 15, 13, 13, 15, 15, 15, 15, 13, 12, 15, 12, 11, 12, 15, 18, 14, 8, 19, 17, 15, 13, 13, 13, 13, 15, 10, 13, 14, 17, 14, 14, 17, 14, 10, 13, 12, 9, 13, 10, 14, 10, 11, 16, 13, 14, 14, 16, 15, 13, 18, 10, 12, 11, 13, 14, 14, 8, 13, 13, 11, 9, 13, 14, 14, 10, 13, 10, 14, 13, 14, 10, 13, 14, 13, 15, 13, 14, 10, 12, 11, 11, 13, 10, 10, 14, 8, 13, 13, 12, 14, 10, 13, 11, 12, 9, 17, 14, 10, 18, 10, 14, 12, 11, 15, 11, 16, 15, 17, 14, 14, 14, 15, 18, 13, 15, 13, 10, 12, 11, 12, 10, 10, 14, 14, 13, 11, 11, 14, 14, 8, 14, 14, 13, 13, 11, 14, 14, 14, 11, 9, 14, 12, 13, 13, 14, 11, 10, 12, 13, 12, 11, 11, 14, 11, 14, 16, 13, 18, 13, 10, 13, 14, 15, 13, 15, 13, 13, 17, 11, 14, 13, 12, 14, 16, 11, 12, 13, 12, 14, 13, 14, 10, 16, 11, 13, 11, 14, 11, 10, 14, 16, 12, 13, 20, 12, 15, 18, 15, 13, 16, 15, 14, 14, 14, 16, 14, 14, 19, 15, 18, 15, 18, 14, 27, 15, 13, 16, 23, 11, 16, 15, 25, 15, 19, 18, 15, 13, 17, 14, 12, 11, 17, 21, 21, 14, 12, 12, 18, 13, 19, 19, 17, 28, 15, 14, 13, 14, 16, 16, 14, 13, 17, 15, 14, 16, 14, 15, 18, 15, 18, 14, 13, 16, 16, 14, 16, 14, 14, 19, 17, 15, 16, 13, 19, 22, 25, 17, 18, 20, 13, 13, 14, 18, 17, 15, 14, 16, 14, 17, 15, 15, 17, 13, 13, 21, 16, 23, 13, 16, 14, 16, 18, 20, 25, 18, 13, 13, 16, 15, 18, 18, 13, 19, 14, 10, 15, 17, 14, 12, 16, 16, 17, 21, 13, 19, 18, 18, 14, 13, 12, 16, 12, 17, 14, 16, 13, 15, 12, 19, 17, 19, 11, 19, 13, 14, 15], true, true);
Module['FS_createDataFile']('/rm1_200', 'mixture_weights', [115, 51, 10, 118, 101, 114, 115, 105, 111, 110, 32, 49, 46, 48, 10, 99, 104, 107, 115, 117, 109, 48, 32, 121, 101, 115, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 104, 100, 114, 10, 68, 51, 34, 17, 157, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 116, 2, 0, 0, 167, 191, 197, 65, 129, 75, 17, 66, 18, 218, 231, 65, 253, 82, 240, 65, 172, 202, 53, 66, 178, 11, 7, 66, 112, 250, 147, 66, 24, 95, 26, 66, 247, 247, 51, 67, 118, 148, 92, 67, 220, 66, 142, 67, 235, 16, 149, 67, 111, 35, 206, 65, 236, 153, 20, 66, 103, 151, 56, 66, 245, 105, 32, 66, 7, 29, 92, 66, 184, 69, 251, 65, 231, 101, 166, 66, 185, 8, 219, 65, 200, 219, 16, 67, 176, 191, 249, 66, 229, 15, 41, 67, 55, 233, 58, 67, 230, 150, 250, 65, 44, 182, 143, 65, 35, 220, 60, 66, 167, 194, 223, 65, 132, 24, 84, 66, 213, 0, 196, 66, 127, 152, 138, 66, 47, 241, 42, 66, 77, 223, 7, 67, 182, 229, 101, 67, 234, 137, 192, 67, 234, 210, 90, 67, 204, 249, 47, 65, 110, 158, 23, 66, 158, 220, 63, 66, 217, 214, 18, 66, 102, 29, 89, 66, 59, 25, 141, 66, 207, 155, 45, 66, 110, 106, 56, 66, 55, 183, 85, 67, 26, 17, 169, 67, 248, 143, 154, 67, 110, 65, 130, 67, 183, 8, 126, 66, 9, 158, 78, 66, 68, 169, 107, 66, 133, 117, 94, 66, 205, 93, 143, 66, 108, 114, 168, 66, 101, 140, 143, 66, 131, 166, 142, 66, 116, 26, 73, 67, 40, 194, 179, 67, 22, 244, 73, 67, 110, 248, 111, 67, 214, 138, 123, 66, 34, 52, 5, 66, 136, 253, 20, 66, 165, 32, 6, 66, 128, 137, 140, 66, 120, 215, 117, 66, 94, 65, 161, 66, 11, 18, 135, 66, 188, 197, 18, 67, 52, 253, 57, 67, 67, 235, 193, 66, 149, 240, 16, 67, 225, 231, 189, 67, 252, 184, 118, 68, 131, 222, 131, 68, 101, 43, 212, 67, 148, 67, 35, 68, 153, 0, 107, 68, 173, 234, 117, 68, 42, 76, 62, 68, 128, 40, 120, 66, 140, 0, 211, 66, 215, 109, 247, 66, 227, 54, 115, 66, 40, 196, 149, 67, 119, 12, 144, 67, 214, 119, 159, 67, 166, 30, 122, 67, 39, 100, 172, 67, 177, 79, 155, 67, 237, 67, 141, 67, 25, 177, 50, 67, 128, 234, 205, 65, 174, 219, 5, 66, 103, 73, 230, 65, 31, 153, 225, 65, 142, 37, 167, 66, 171, 33, 221, 67, 123, 114, 247, 67, 165, 240, 147, 66, 171, 103, 129, 67, 162, 145, 160, 67, 123, 157, 158, 67, 149, 246, 131, 67, 178, 12, 70, 66, 154, 37, 243, 65, 255, 255, 63, 66, 155, 252, 68, 66, 144, 83, 45, 66, 230, 242, 168, 65, 128, 161, 80, 66, 144, 31, 240, 65, 65, 5, 152, 65, 71, 10, 108, 66, 34, 171, 124, 66, 116, 3, 128, 65, 106, 35, 184, 66, 39, 45, 196, 66, 171, 144, 5, 67, 184, 16, 35, 67, 5, 209, 178, 67, 120, 63, 166, 67, 23, 138, 168, 67, 182, 180, 137, 67, 3, 22, 39, 67, 244, 33, 120, 67, 207, 83, 79, 67, 166, 175, 59, 67, 90, 51, 208, 66, 46, 219, 62, 66, 14, 217, 212, 66, 242, 52, 175, 65, 95, 8, 81, 67, 176, 62, 19, 68, 194, 237, 243, 67, 214, 223, 192, 67, 115, 229, 99, 66, 8, 219, 10, 67, 73, 189, 25, 67, 45, 209, 114, 66, 144, 16, 251, 65, 43, 140, 95, 66, 44, 76, 25, 66, 188, 244, 201, 65, 21, 22, 235, 66, 48, 216, 8, 67, 123, 81, 20, 67, 100, 157, 225, 66, 92, 191, 151, 67, 189, 130, 235, 67, 217, 68, 221, 67, 56, 249, 242, 67, 133, 246, 135, 65, 225, 128, 235, 65, 217, 216, 42, 66, 60, 231, 168, 65, 252, 251, 32, 66, 75, 67, 28, 66, 67, 147, 72, 66, 76, 235, 46, 66, 123, 57, 109, 66, 212, 71, 128, 66, 118, 123, 140, 66, 122, 116, 168, 66, 80, 77, 34, 67, 7, 89, 25, 67, 64, 170, 92, 67, 149, 229, 129, 67, 26, 144, 1, 66, 254, 134, 218, 65, 46, 120, 176, 65, 212, 156, 142, 65, 236, 222, 47, 66, 76, 62, 77, 66, 22, 104, 61, 66, 18, 164, 156, 65, 223, 220, 25, 67, 167, 240, 178, 67, 93, 90, 90, 67, 51, 69, 196, 66, 168, 14, 124, 66, 147, 27, 251, 65, 108, 49, 208, 66, 168, 110, 125, 66, 162, 91, 132, 66, 156, 73, 236, 66, 134, 120, 17, 67, 33, 229, 16, 67, 40, 112, 126, 66, 3, 73, 82, 66, 97, 139, 253, 66, 215, 244, 231, 66, 125, 48, 36, 67, 50, 70, 217, 66, 117, 164, 70, 67, 12, 220, 178, 66, 200, 133, 137, 67, 55, 247, 233, 67, 41, 92, 218, 67, 254, 223, 223, 67, 82, 230, 56, 66, 216, 84, 61, 66, 117, 60, 155, 66, 56, 51, 229, 65, 136, 14, 96, 67, 73, 87, 21, 67, 160, 251, 146, 67, 118, 160, 241, 66, 115, 117, 193, 67, 94, 161, 89, 67, 209, 239, 130, 67, 175, 87, 59, 67, 1, 88, 4, 68, 170, 91, 159, 68, 45, 88, 220, 68, 26, 138, 91, 67, 244, 99, 3, 67, 3, 125, 32, 67, 27, 98, 41, 67, 229, 173, 9, 67, 110, 213, 160, 67, 225, 124, 190, 67, 90, 148, 191, 67, 3, 159, 175, 67, 58, 123, 61, 66, 159, 140, 243, 66, 148, 113, 243, 66, 42, 229, 221, 66, 167, 191, 197, 65, 129, 75, 17, 66, 18, 218, 231, 65, 253, 82, 240, 65, 172, 202, 53, 66, 178, 11, 7, 66, 112, 250, 147, 66, 24, 95, 26, 66, 184, 247, 111, 67, 150, 77, 52, 67, 207, 85, 117, 67, 252, 100, 46, 67, 42, 54, 208, 65, 123, 219, 255, 65, 152, 187, 71, 66, 21, 11, 13, 66, 111, 35, 206, 65, 236, 153, 20, 66, 103, 151, 56, 66, 245, 105, 32, 66, 135, 191, 161, 65, 202, 155, 241, 65, 134, 191, 73, 66, 140, 171, 191, 65, 91, 247, 31, 65, 151, 77, 5, 66, 191, 54, 81, 65, 233, 207, 124, 65, 188, 197, 207, 65, 164, 131, 15, 66, 116, 92, 5, 66, 233, 86, 250, 65, 19, 57, 141, 66, 156, 25, 103, 66, 153, 157, 243, 66, 37, 63, 127, 66, 52, 211, 0, 66, 201, 216, 156, 66, 92, 61, 242, 65, 237, 58, 49, 66, 230, 150, 250, 65, 44, 182, 143, 65, 35, 220, 60, 66, 167, 194, 223, 65, 132, 24, 84, 66, 213, 0, 196, 66, 127, 152, 138, 66, 47, 241, 42, 66, 40, 161, 134, 66, 97, 37, 141, 66, 93, 77, 168, 66, 204, 50, 123, 66, 228, 197, 18, 66, 127, 79, 21, 66, 38, 246, 81, 66, 166, 53, 199, 65, 93, 48, 38, 67, 213, 72, 226, 66, 102, 71, 252, 66, 14, 230, 255, 66, 204, 249, 47, 65, 110, 158, 23, 66, 158, 220, 63, 66, 217, 214, 18, 66, 102, 29, 89, 66, 59, 25, 141, 66, 207, 155, 45, 66, 110, 106, 56, 66, 252, 255, 183, 65, 228, 167, 42, 66, 4, 197, 205, 65, 34, 202, 183, 65, 133, 87, 42, 67, 78, 116, 67, 67, 149, 173, 253, 66, 36, 149, 45, 67, 111, 81, 81, 66, 8, 232, 9, 67, 235, 142, 165, 66, 128, 201, 135, 66, 183, 8, 126, 66, 9, 158, 78, 66, 68, 169, 107, 66, 133, 117, 94, 66, 205, 93, 143, 66, 108, 114, 168, 66, 101, 140, 143, 66, 131, 166, 142, 66, 182, 57, 42, 67, 46, 35, 106, 67, 12, 205, 25, 67, 118, 59, 187, 66, 243, 246, 27, 66, 210, 107, 103, 66, 46, 182, 205, 65, 175, 208, 218, 65, 20, 115, 88, 66, 177, 79, 64, 66, 205, 86, 86, 66, 170, 78, 52, 66, 214, 138, 123, 66, 34, 52, 5, 66, 136, 253, 20, 66, 165, 32, 6, 66, 169, 94, 60, 66, 193, 199, 251, 65, 229, 11, 59, 66, 213, 34, 54, 66, 145, 18, 6, 66, 111, 0, 128, 65, 72, 248, 41, 66, 230, 41, 136, 65, 184, 198, 214, 66, 228, 23, 251, 66, 30, 5, 243, 66, 240, 231, 54, 66, 163, 182, 181, 66, 0, 0, 16, 65, 84, 201, 114, 66, 86, 250, 94, 65, 38, 146, 243, 66, 2, 219, 7, 67, 89, 19, 19, 67, 84, 165, 185, 66, 36, 236, 29, 67, 86, 53, 29, 68, 182, 155, 32, 68, 153, 203, 138, 67, 143, 205, 189, 66, 114, 119, 91, 67, 189, 163, 108, 67, 252, 85, 181, 66, 225, 167, 187, 67, 65, 25, 38, 68, 81, 35, 16, 68, 119, 137, 27, 68, 210, 19, 193, 66, 196, 140, 70, 67, 162, 34, 44, 67, 70, 20, 61, 67, 245, 202, 209, 66, 26, 31, 215, 66, 67, 117, 234, 66, 238, 13, 227, 66, 128, 40, 120, 66, 140, 0, 211, 66, 215, 109, 247, 66, 227, 54, 115, 66, 56, 176, 1, 67, 220, 8, 60, 67, 159, 106, 116, 67, 189, 161, 0, 67, 87, 187, 214, 66, 44, 180, 252, 66, 252, 104, 244, 66, 196, 251, 219, 66, 130, 232, 217, 66, 119, 68, 46, 67, 46, 206, 20, 67, 167, 160, 17, 67, 159, 150, 3, 67, 220, 200, 85, 66, 159, 52, 114, 67, 78, 119, 223, 66, 128, 234, 205, 65, 174, 219, 5, 66, 103, 73, 230, 65, 31, 153, 225, 65, 34, 86, 74, 67, 223, 162, 138, 67, 77, 24, 92, 67, 191, 109, 23, 67, 152, 158, 146, 66, 237, 100, 54, 66, 152, 207, 133, 66, 152, 4, 103, 66, 148, 71, 7, 67, 193, 212, 61, 67, 113, 100, 56, 67, 66, 51, 16, 67, 169, 22, 170, 66, 209, 124, 15, 66, 116, 242, 191, 66, 251, 165, 80, 66, 90, 190, 98, 66, 79, 188, 89, 66, 254, 203, 106, 66, 151, 15, 137, 66, 252, 230, 189, 65, 48, 75, 161, 65, 20, 107, 176, 65, 180, 102, 201, 65, 134, 118, 0, 65, 71, 2, 52, 66, 6, 251, 175, 65, 208, 242, 47, 65, 144, 83, 45, 66, 230, 242, 168, 65, 128, 161, 80, 66, 144, 31, 240, 65, 65, 5, 152, 65, 71, 10, 108, 66, 34, 171, 124, 66, 116, 3, 128, 65, 53, 169, 47, 66, 148, 215, 72, 66, 214, 64, 72, 66, 219, 220, 105, 66, 121, 92, 163, 66, 208, 90, 89, 66, 123, 185, 174, 66, 129, 1, 115, 66, 92, 1, 42, 66, 7, 252, 74, 66, 10, 73, 87, 66, 174, 102, 65, 66, 109, 252, 157, 67, 128, 209, 134, 67, 214, 213, 152, 67, 204, 235, 87, 67, 56, 154, 40, 66, 134, 121, 192, 66, 57, 212, 98, 66, 61, 150, 32, 66, 208, 69, 133, 66, 29, 173, 95, 67, 132, 237, 75, 67, 237, 127, 161, 66, 90, 51, 208, 66, 46, 219, 62, 66, 14, 217, 212, 66, 242, 52, 175, 65, 205, 218, 133, 66, 23, 12, 31, 67, 195, 73, 2, 67, 178, 105, 151, 66, 102, 173, 22, 67, 14, 52, 202, 67, 206, 184, 170, 67, 141, 143, 171, 67, 125, 51, 137, 65, 239, 226, 50, 66, 4, 12, 49, 66, 21, 94, 32, 66, 130, 14, 32, 65, 74, 140, 116, 66, 180, 234, 104, 66, 227, 229, 8, 66, 77, 19, 162, 65, 188, 50, 205, 65, 205, 70, 2, 66, 146, 205, 175, 65, 144, 16, 251, 65, 43, 140, 95, 66, 44, 76, 25, 66, 188, 244, 201, 65, 206, 44, 34, 66, 123, 197, 21, 66, 154, 82, 74, 66, 225, 151, 217, 65, 231, 28, 85, 66, 233, 236, 128, 66, 83, 14, 132, 66, 186, 33, 137, 66, 179, 71, 56, 66, 186, 2, 180, 65, 162, 151, 182, 65, 48, 34, 128, 65, 17, 19, 136, 67, 34, 87, 143, 67, 234, 73, 160, 67, 165, 221, 144, 67, 214, 184, 97, 66, 28, 187, 105, 66, 86, 185, 44, 66, 172, 196, 185, 66, 6, 84, 128, 66, 80, 117, 159, 66, 193, 54, 153, 66, 132, 188, 121, 66, 133, 246, 135, 65, 225, 128, 235, 65, 217, 216, 42, 66, 60, 231, 168, 65, 252, 251, 32, 66, 75, 67, 28, 66, 67, 147, 72, 66, 76, 235, 46, 66, 123, 57, 109, 66, 212, 71, 128, 66, 118, 123, 140, 66, 122, 116, 168, 66, 183, 14, 160, 66, 28, 207, 86, 66, 25, 185, 81, 66, 210, 166, 51, 66, 38, 77, 28, 67, 77, 107, 4, 67, 25, 121, 31, 67, 48, 174, 233, 66, 26, 144, 1, 66, 254, 134, 218, 65, 46, 120, 176, 65, 212, 156, 142, 65, 236, 222, 47, 66, 76, 62, 77, 66, 22, 104, 61, 66, 18, 164, 156, 65, 142, 14, 193, 66, 131, 88, 200, 66, 244, 64, 1, 67, 192, 61, 242, 66, 213, 130, 23, 66, 60, 127, 2, 66, 127, 87, 152, 65, 148, 12, 128, 65, 253, 129, 40, 66, 194, 206, 192, 66, 59, 43, 179, 66, 22, 245, 61, 66, 217, 42, 87, 66, 73, 192, 128, 66, 141, 192, 82, 66, 33, 153, 15, 66, 101, 7, 96, 65, 205, 29, 63, 65, 247, 149, 112, 65, 72, 232, 97, 65, 64, 246, 149, 66, 70, 36, 56, 66, 129, 129, 168, 66, 145, 201, 155, 66, 188, 105, 158, 65, 102, 42, 210, 65, 203, 176, 198, 65, 78, 80, 253, 65, 85, 2, 64, 65, 40, 207, 31, 66, 147, 243, 143, 65, 14, 12, 152, 65, 40, 112, 126, 66, 3, 73, 82, 66, 97, 139, 253, 66, 215, 244, 231, 66, 217, 44, 222, 66, 106, 146, 114, 66, 54, 68, 219, 66, 124, 138, 127, 66, 100, 179, 214, 65, 65, 234, 238, 65, 223, 177, 17, 66, 138, 133, 3, 66, 97, 193, 164, 65, 46, 67, 195, 65, 69, 62, 211, 65, 48, 227, 145, 65, 39, 141, 77, 66, 133, 50, 137, 66, 16, 177, 122, 66, 64, 34, 138, 66, 9, 36, 62, 66, 60, 250, 130, 66, 244, 8, 135, 66, 68, 157, 79, 66, 14, 143, 100, 67, 219, 103, 151, 67, 234, 65, 137, 67, 235, 177, 168, 67, 82, 230, 56, 66, 216, 84, 61, 66, 117, 60, 155, 66, 56, 51, 229, 65, 228, 84, 151, 66, 149, 254, 250, 66, 0, 221, 135, 66, 136, 79, 107, 66, 184, 80, 49, 66, 81, 222, 68, 66, 111, 233, 108, 66, 22, 7, 217, 65, 108, 134, 64, 65, 238, 216, 178, 65, 70, 69, 213, 65, 68, 141, 240, 65, 29, 65, 169, 66, 18, 236, 49, 66, 38, 52, 168, 66, 133, 165, 29, 66, 22, 3, 137, 67, 113, 92, 147, 67, 162, 118, 141, 67, 253, 95, 166, 67, 20, 136, 14, 66, 133, 53, 101, 66, 86, 250, 153, 66, 250, 60, 100, 66, 174, 158, 16, 66, 96, 6, 6, 66, 111, 208, 130, 66, 193, 12, 31, 66, 65, 39, 23, 65], true, true);
Module['FS_createDataFile']('/rm1_200', 'transition_matrices', [115, 51, 10, 118, 101, 114, 115, 105, 111, 110, 32, 49, 46, 48, 10, 99, 104, 107, 115, 117, 109, 48, 32, 121, 101, 115, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 104, 100, 114, 10, 68, 51, 34, 17, 19, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 228, 0, 0, 0, 238, 32, 162, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 202, 24, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 12, 108, 68, 0, 0, 28, 66, 129, 86, 220, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 30, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 173, 18, 68, 0, 0, 28, 66, 0, 242, 170, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 15, 96, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 170, 104, 68, 0, 0, 28, 66, 46, 40, 189, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 85, 47, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 79, 135, 68, 0, 0, 28, 66, 100, 177, 62, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 130, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 226, 112, 68, 0, 0, 28, 66, 146, 238, 255, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 228, 112, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 234, 5, 68, 0, 0, 28, 66, 238, 143, 42, 69, 0, 0, 234, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 78, 73, 69, 0, 0, 234, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 15, 107, 67, 0, 0, 234, 66, 241, 181, 139, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 180, 134, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 97, 154, 66, 0, 0, 28, 66, 109, 246, 131, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 67, 140, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 39, 10, 67, 0, 0, 28, 66, 41, 63, 215, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 92, 236, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 228, 223, 67, 0, 0, 28, 66, 210, 243, 157, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 206, 64, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 35, 113, 67, 0, 0, 28, 66, 200, 19, 204, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 162, 185, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 173, 223, 66, 0, 0, 28, 66, 179, 65, 238, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 208, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 132, 142, 66, 0, 0, 28, 66, 119, 47, 6, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 234, 110, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 70, 61, 68, 0, 0, 28, 66, 27, 94, 114, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 107, 246, 66, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 78, 69, 68, 0, 0, 28, 66, 126, 219, 94, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 216, 217, 67, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 247, 159, 67, 0, 0, 28, 66, 132, 121, 2, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 142, 198, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 211, 32, 67, 0, 0, 28, 66, 82, 11, 9, 68, 0, 0, 112, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 112, 75, 68, 0, 0, 112, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 168, 93, 69, 0, 0, 112, 67, 61, 252, 11, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 193, 174, 68, 0, 0, 28, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 104, 181, 67, 0, 0, 28, 66, 192, 243, 69, 222], true, true);
Module['FS_createDataFile']('/rm1_200', 'mdef', [66, 77, 68, 70, 1, 0, 0, 0, 28, 4, 0, 0, 66, 69, 71, 73, 78, 32, 70, 73, 76, 69, 32, 70, 79, 82, 77, 65, 84, 32, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 10, 105, 110, 116, 51, 50, 32, 110, 95, 99, 105, 112, 104, 111, 110, 101, 59, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 97, 115, 101, 32, 40, 67, 73, 41, 32, 112, 104, 111, 110, 101, 115, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 112, 104, 111, 110, 101, 59, 9, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 97, 115, 101, 32, 40, 67, 73, 41, 32, 112, 104, 111, 110, 101, 115, 32, 43, 32, 40, 67, 68, 41, 32, 116, 114, 105, 112, 104, 111, 110, 101, 115, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 101, 109, 105, 116, 95, 115, 116, 97, 116, 101, 59, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 101, 109, 105, 116, 116, 105, 110, 103, 32, 115, 116, 97, 116, 101, 115, 32, 112, 101, 114, 32, 112, 104, 111, 110, 101, 32, 40, 48, 32, 105, 102, 32, 104, 101, 116, 101, 114, 111, 103, 101, 110, 101, 111, 117, 115, 41, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 99, 105, 95, 115, 101, 110, 59, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 67, 73, 32, 115, 101, 110, 111, 110, 101, 115, 59, 32, 116, 104, 101, 115, 101, 32, 97, 114, 101, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 115, 101, 110, 59, 9, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 101, 110, 111, 110, 101, 115, 32, 40, 67, 73, 43, 67, 68, 41, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 116, 109, 97, 116, 59, 9, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 99, 101, 115, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 115, 115, 101, 113, 59, 32, 32, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 117, 110, 105, 113, 117, 101, 32, 115, 101, 110, 111, 110, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 99, 116, 120, 59, 9, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 112, 104, 111, 110, 101, 115, 32, 111, 102, 32, 99, 111, 110, 116, 101, 120, 116, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 110, 95, 99, 100, 95, 116, 114, 101, 101, 59, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 110, 111, 100, 101, 115, 32, 105, 110, 32, 67, 68, 32, 116, 114, 101, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 42, 47, 10, 105, 110, 116, 51, 50, 32, 115, 105, 108, 59, 9, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 67, 73, 32, 112, 104, 111, 110, 101, 32, 73, 68, 32, 102, 111, 114, 32, 115, 105, 108, 101, 110, 99, 101, 32, 42, 47, 10, 99, 104, 97, 114, 32, 99, 105, 112, 104, 111, 110, 101, 115, 91, 93, 91, 93, 59, 32, 32, 47, 42, 42, 60, 32, 67, 73, 32, 112, 104, 111, 110, 101, 32, 115, 116, 114, 105, 110, 103, 115, 32, 40, 110, 117, 108, 108, 45, 116, 101, 114, 109, 105, 110, 97, 116, 101, 100, 41, 32, 42, 47, 10, 99, 104, 97, 114, 32, 112, 97, 100, 100, 105, 110, 103, 91, 93, 59, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 80, 97, 100, 100, 105, 110, 103, 32, 116, 111, 32, 97, 32, 52, 45, 98, 121, 116, 101, 115, 32, 98, 111, 117, 110, 100, 97, 114, 121, 32, 42, 47, 10, 115, 116, 114, 117, 99, 116, 32, 123, 32, 105, 110, 116, 49, 54, 32, 99, 116, 120, 59, 32, 105, 110, 116, 49, 54, 32, 110, 95, 100, 111, 119, 110, 59, 32, 105, 110, 116, 51, 50, 32, 112, 105, 100, 47, 100, 111, 119, 110, 32, 125, 32, 99, 100, 95, 116, 114, 101, 101, 91, 93, 59, 10, 115, 116, 114, 117, 99, 116, 32, 123, 32, 105, 110, 116, 51, 50, 32, 115, 115, 105, 100, 59, 32, 105, 110, 116, 51, 50, 32, 116, 109, 97, 116, 59, 32, 105, 110, 116, 56, 32, 97, 116, 116, 114, 91, 52, 93, 32, 125, 32, 112, 104, 111, 110, 101, 115, 91, 93, 59, 10, 105, 110, 116, 49, 54, 32, 115, 115, 101, 113, 91, 93, 59, 32, 32, 32, 32, 32, 32, 32, 47, 42, 42, 60, 32, 85, 110, 105, 113, 117, 101, 32, 115, 101, 110, 111, 110, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 32, 42, 47, 10, 105, 110, 116, 56, 32, 115, 115, 101, 113, 95, 108, 101, 110, 91, 93, 59, 32, 32, 32, 32, 47, 42, 42, 60, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 116, 97, 116, 101, 115, 32, 105, 110, 32, 101, 97, 99, 104, 32, 115, 115, 101, 113, 32, 40, 110, 111, 110, 101, 32, 105, 102, 32, 104, 111, 109, 111, 103, 101, 110, 101, 111, 117, 115, 41, 32, 42, 47, 10, 69, 78, 68, 32, 70, 73, 76, 69, 32, 70, 79, 82, 77, 65, 84, 32, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 10, 0, 19, 0, 0, 0, 219, 0, 0, 0, 3, 0, 0, 0, 57, 0, 0, 0, 157, 0, 0, 0, 19, 0, 0, 0, 70, 0, 0, 0, 3, 0, 0, 0, 122, 1, 0, 0, 17, 0, 0, 0, 65, 0, 65, 65, 89, 82, 0, 65, 73, 0, 65, 77, 83, 0, 65, 85, 83, 0, 65, 87, 77, 0, 66, 0, 67, 72, 0, 72, 0, 73, 78, 83, 0, 75, 72, 0, 77, 0, 78, 0, 79, 79, 78, 71, 0, 79, 79, 78, 83, 0, 79, 79, 84, 74, 0, 83, 0, 83, 73, 76, 0, 84, 0, 0, 0, 0, 19, 0, 4, 0, 0, 0, 1, 0, 19, 0, 23, 0, 0, 0, 2, 0, 19, 0, 42, 0, 0, 0, 3, 0, 19, 0, 61, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 255, 255, 255, 255, 3, 0, 0, 0, 255, 255, 255, 255, 4, 0, 0, 0, 255, 255, 255, 255, 5, 0, 0, 0, 255, 255, 255, 255, 6, 0, 0, 0, 255, 255, 255, 255, 7, 0, 0, 0, 255, 255, 255, 255, 8, 0, 0, 0, 255, 255, 255, 255, 9, 0, 0, 0, 255, 255, 255, 255, 10, 0, 0, 0, 255, 255, 255, 255, 11, 0, 0, 0, 255, 255, 255, 255, 12, 0, 0, 0, 255, 255, 255, 255, 13, 0, 0, 0, 255, 255, 255, 255, 14, 0, 0, 0, 255, 255, 255, 255, 15, 0, 0, 0, 255, 255, 255, 255, 16, 0, 0, 0, 255, 255, 255, 255, 17, 0, 0, 0, 255, 255, 255, 255, 18, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 255, 255, 255, 255, 3, 0, 0, 0, 255, 255, 255, 255, 4, 0, 0, 0, 255, 255, 255, 255, 5, 0, 0, 0, 255, 255, 255, 255, 6, 0, 11, 0, 80, 0, 0, 0, 7, 0, 11, 0, 91, 0, 0, 0, 8, 0, 11, 0, 102, 0, 0, 0, 9, 0, 0, 0, 255, 255, 255, 255, 10, 0, 11, 0, 113, 0, 0, 0, 11, 0, 11, 0, 124, 0, 0, 0, 12, 0, 11, 0, 135, 0, 0, 0, 13, 0, 0, 0, 255, 255, 255, 255, 14, 0, 0, 0, 255, 255, 255, 255, 15, 0, 0, 0, 255, 255, 255, 255, 16, 0, 11, 0, 146, 0, 0, 0, 17, 0, 0, 0, 255, 255, 255, 255, 18, 0, 11, 0, 157, 0, 0, 0, 0, 0, 1, 0, 168, 0, 0, 0, 1, 0, 1, 0, 169, 0, 0, 0, 2, 0, 1, 0, 170, 0, 0, 0, 3, 0, 1, 0, 171, 0, 0, 0, 4, 0, 1, 0, 172, 0, 0, 0, 5, 0, 1, 0, 173, 0, 0, 0, 6, 0, 0, 0, 255, 255, 255, 255, 7, 0, 0, 0, 255, 255, 255, 255, 8, 0, 0, 0, 255, 255, 255, 255, 9, 0, 1, 0, 174, 0, 0, 0, 10, 0, 0, 0, 255, 255, 255, 255, 11, 0, 0, 0, 255, 255, 255, 255, 12, 0, 0, 0, 255, 255, 255, 255, 13, 0, 1, 0, 175, 0, 0, 0, 14, 0, 1, 0, 176, 0, 0, 0, 15, 0, 1, 0, 177, 0, 0, 0, 16, 0, 0, 0, 255, 255, 255, 255, 17, 0, 0, 0, 255, 255, 255, 255, 18, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 255, 255, 255, 255, 3, 0, 0, 0, 255, 255, 255, 255, 4, 0, 0, 0, 255, 255, 255, 255, 5, 0, 0, 0, 255, 255, 255, 255, 6, 0, 0, 0, 255, 255, 255, 255, 7, 0, 0, 0, 255, 255, 255, 255, 8, 0, 0, 0, 255, 255, 255, 255, 9, 0, 0, 0, 255, 255, 255, 255, 10, 0, 0, 0, 255, 255, 255, 255, 11, 0, 0, 0, 255, 255, 255, 255, 12, 0, 0, 0, 255, 255, 255, 255, 13, 0, 0, 0, 255, 255, 255, 255, 14, 0, 0, 0, 255, 255, 255, 255, 15, 0, 0, 0, 255, 255, 255, 255, 16, 0, 0, 0, 255, 255, 255, 255, 17, 0, 0, 0, 255, 255, 255, 255, 18, 0, 0, 0, 255, 255, 255, 255, 17, 0, 3, 0, 178, 0, 0, 0, 15, 0, 3, 0, 181, 0, 0, 0, 14, 0, 3, 0, 184, 0, 0, 0, 13, 0, 3, 0, 187, 0, 0, 0, 9, 0, 3, 0, 190, 0, 0, 0, 5, 0, 3, 0, 193, 0, 0, 0, 4, 0, 3, 0, 196, 0, 0, 0, 3, 0, 3, 0, 199, 0, 0, 0, 2, 0, 3, 0, 202, 0, 0, 0, 1, 0, 3, 0, 205, 0, 0, 0, 0, 0, 3, 0, 208, 0, 0, 0, 17, 0, 1, 0, 211, 0, 0, 0, 15, 0, 1, 0, 212, 0, 0, 0, 14, 0, 1, 0, 213, 0, 0, 0, 13, 0, 1, 0, 214, 0, 0, 0, 9, 0, 1, 0, 215, 0, 0, 0, 5, 0, 1, 0, 216, 0, 0, 0, 4, 0, 1, 0, 217, 0, 0, 0, 3, 0, 1, 0, 218, 0, 0, 0, 2, 0, 1, 0, 219, 0, 0, 0, 1, 0, 1, 0, 220, 0, 0, 0, 0, 0, 1, 0, 221, 0, 0, 0, 17, 0, 1, 0, 222, 0, 0, 0, 15, 0, 1, 0, 223, 0, 0, 0, 14, 0, 1, 0, 224, 0, 0, 0, 13, 0, 1, 0, 225, 0, 0, 0, 9, 0, 1, 0, 226, 0, 0, 0, 5, 0, 1, 0, 227, 0, 0, 0, 4, 0, 1, 0, 228, 0, 0, 0, 3, 0, 1, 0, 229, 0, 0, 0, 2, 0, 1, 0, 230, 0, 0, 0, 1, 0, 1, 0, 231, 0, 0, 0, 0, 0, 1, 0, 232, 0, 0, 0, 17, 0, 1, 0, 233, 0, 0, 0, 15, 0, 1, 0, 234, 0, 0, 0, 14, 0, 1, 0, 235, 0, 0, 0, 13, 0, 1, 0, 236, 0, 0, 0, 9, 0, 1, 0, 237, 0, 0, 0, 5, 0, 1, 0, 238, 0, 0, 0, 4, 0, 1, 0, 239, 0, 0, 0, 3, 0, 1, 0, 240, 0, 0, 0, 2, 0, 1, 0, 241, 0, 0, 0, 1, 0, 1, 0, 242, 0, 0, 0, 0, 0, 1, 0, 243, 0, 0, 0, 17, 0, 1, 0, 244, 0, 0, 0, 15, 0, 1, 0, 245, 0, 0, 0, 14, 0, 1, 0, 246, 0, 0, 0, 13, 0, 1, 0, 247, 0, 0, 0, 9, 0, 1, 0, 248, 0, 0, 0, 5, 0, 1, 0, 249, 0, 0, 0, 4, 0, 1, 0, 250, 0, 0, 0, 3, 0, 1, 0, 251, 0, 0, 0, 2, 0, 1, 0, 252, 0, 0, 0, 1, 0, 1, 0, 253, 0, 0, 0, 0, 0, 1, 0, 254, 0, 0, 0, 17, 0, 1, 0, 255, 0, 0, 0, 15, 0, 1, 0, 0, 1, 0, 0, 14, 0, 1, 0, 1, 1, 0, 0, 13, 0, 1, 0, 2, 1, 0, 0, 9, 0, 1, 0, 3, 1, 0, 0, 5, 0, 1, 0, 4, 1, 0, 0, 4, 0, 1, 0, 5, 1, 0, 0, 3, 0, 1, 0, 6, 1, 0, 0, 2, 0, 1, 0, 7, 1, 0, 0, 1, 0, 1, 0, 8, 1, 0, 0, 0, 0, 1, 0, 9, 1, 0, 0, 17, 0, 1, 0, 10, 1, 0, 0, 15, 0, 1, 0, 11, 1, 0, 0, 14, 0, 1, 0, 12, 1, 0, 0, 13, 0, 1, 0, 13, 1, 0, 0, 9, 0, 1, 0, 14, 1, 0, 0, 5, 0, 1, 0, 15, 1, 0, 0, 4, 0, 1, 0, 16, 1, 0, 0, 3, 0, 1, 0, 17, 1, 0, 0, 2, 0, 1, 0, 18, 1, 0, 0, 1, 0, 1, 0, 19, 1, 0, 0, 0, 0, 1, 0, 20, 1, 0, 0, 17, 0, 1, 0, 21, 1, 0, 0, 15, 0, 1, 0, 22, 1, 0, 0, 14, 0, 1, 0, 23, 1, 0, 0, 13, 0, 1, 0, 24, 1, 0, 0, 9, 0, 1, 0, 25, 1, 0, 0, 5, 0, 1, 0, 26, 1, 0, 0, 4, 0, 1, 0, 27, 1, 0, 0, 3, 0, 1, 0, 28, 1, 0, 0, 2, 0, 1, 0, 29, 1, 0, 0, 1, 0, 1, 0, 30, 1, 0, 0, 0, 0, 1, 0, 31, 1, 0, 0, 6, 0, 9, 0, 32, 1, 0, 0, 6, 0, 9, 0, 41, 1, 0, 0, 8, 0, 9, 0, 50, 1, 0, 0, 18, 0, 9, 0, 59, 1, 0, 0, 16, 0, 9, 0, 68, 1, 0, 0, 12, 0, 9, 0, 77, 1, 0, 0, 7, 0, 9, 0, 86, 1, 0, 0, 10, 0, 9, 0, 95, 1, 0, 0, 6, 0, 9, 0, 104, 1, 0, 0, 11, 0, 9, 0, 113, 1, 0, 0, 14, 0, 0, 0, 105, 0, 0, 0, 1, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 14, 0, 0, 0, 102, 0, 0, 0, 1, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 14, 0, 0, 0, 99, 0, 0, 0, 1, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 14, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 14, 0, 0, 0, 93, 0, 0, 0, 1, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 14, 0, 0, 0, 90, 0, 0, 0, 1, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 14, 0, 0, 0, 87, 0, 0, 0, 1, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 14, 0, 0, 0, 84, 0, 0, 0, 1, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 14, 0, 0, 0, 81, 0, 0, 0, 1, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 14, 0, 0, 0, 78, 0, 0, 0, 1, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 14, 0, 0, 0, 75, 0, 0, 0, 1, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 9, 0, 0, 0, 116, 0, 0, 0, 9, 0, 0, 0, 115, 0, 0, 0, 9, 0, 0, 0, 114, 0, 0, 0, 9, 0, 0, 0, 113, 0, 0, 0, 9, 0, 0, 0, 112, 0, 0, 0, 9, 0, 0, 0, 111, 0, 0, 0, 9, 0, 0, 0, 110, 0, 0, 0, 9, 0, 0, 0, 109, 0, 0, 0, 9, 0, 0, 0, 108, 0, 0, 0, 9, 0, 0, 0, 107, 0, 0, 0, 9, 0, 0, 0, 106, 0, 0, 0, 2, 0, 0, 0, 127, 0, 0, 0, 2, 0, 0, 0, 126, 0, 0, 0, 2, 0, 0, 0, 125, 0, 0, 0, 2, 0, 0, 0, 124, 0, 0, 0, 2, 0, 0, 0, 123, 0, 0, 0, 2, 0, 0, 0, 122, 0, 0, 0, 2, 0, 0, 0, 121, 0, 0, 0, 2, 0, 0, 0, 120, 0, 0, 0, 2, 0, 0, 0, 119, 0, 0, 0, 2, 0, 0, 0, 118, 0, 0, 0, 2, 0, 0, 0, 117, 0, 0, 0, 13, 0, 0, 0, 147, 0, 0, 0, 13, 0, 0, 0, 146, 0, 0, 0, 13, 0, 0, 0, 145, 0, 0, 0, 13, 0, 0, 0, 144, 0, 0, 0, 13, 0, 0, 0, 143, 0, 0, 0, 13, 0, 0, 0, 142, 0, 0, 0, 13, 0, 0, 0, 141, 0, 0, 0, 13, 0, 0, 0, 140, 0, 0, 0, 13, 0, 0, 0, 139, 0, 0, 0, 13, 0, 0, 0, 138, 0, 0, 0, 13, 0, 0, 0, 137, 0, 0, 0, 15, 0, 0, 0, 158, 0, 0, 0, 15, 0, 0, 0, 157, 0, 0, 0, 15, 0, 0, 0, 156, 0, 0, 0, 15, 0, 0, 0, 155, 0, 0, 0, 15, 0, 0, 0, 154, 0, 0, 0, 15, 0, 0, 0, 153, 0, 0, 0, 15, 0, 0, 0, 152, 0, 0, 0, 15, 0, 0, 0, 151, 0, 0, 0, 15, 0, 0, 0, 150, 0, 0, 0, 15, 0, 0, 0, 149, 0, 0, 0, 15, 0, 0, 0, 148, 0, 0, 0, 5, 0, 0, 0, 169, 0, 0, 0, 5, 0, 0, 0, 168, 0, 0, 0, 5, 0, 0, 0, 167, 0, 0, 0, 5, 0, 0, 0, 166, 0, 0, 0, 5, 0, 0, 0, 165, 0, 0, 0, 5, 0, 0, 0, 164, 0, 0, 0, 5, 0, 0, 0, 163, 0, 0, 0, 5, 0, 0, 0, 162, 0, 0, 0, 5, 0, 0, 0, 161, 0, 0, 0, 5, 0, 0, 0, 160, 0, 0, 0, 5, 0, 0, 0, 159, 0, 0, 0, 4, 0, 0, 0, 207, 0, 0, 0, 4, 0, 0, 0, 206, 0, 0, 0, 4, 0, 0, 0, 205, 0, 0, 0, 4, 0, 0, 0, 204, 0, 0, 0, 4, 0, 0, 0, 203, 0, 0, 0, 4, 0, 0, 0, 202, 0, 0, 0, 4, 0, 0, 0, 201, 0, 0, 0, 4, 0, 0, 0, 200, 0, 0, 0, 4, 0, 0, 0, 199, 0, 0, 0, 4, 0, 0, 0, 198, 0, 0, 0, 4, 0, 0, 0, 197, 0, 0, 0, 3, 0, 0, 0, 218, 0, 0, 0, 3, 0, 0, 0, 217, 0, 0, 0, 3, 0, 0, 0, 216, 0, 0, 0, 3, 0, 0, 0, 215, 0, 0, 0, 3, 0, 0, 0, 214, 0, 0, 0, 3, 0, 0, 0, 213, 0, 0, 0, 3, 0, 0, 0, 212, 0, 0, 0, 3, 0, 0, 0, 211, 0, 0, 0, 3, 0, 0, 0, 210, 0, 0, 0, 3, 0, 0, 0, 209, 0, 0, 0, 3, 0, 0, 0, 208, 0, 0, 0, 18, 0, 0, 0, 27, 0, 0, 0, 17, 0, 0, 0, 26, 0, 0, 0, 16, 0, 0, 0, 25, 0, 0, 0, 12, 0, 0, 0, 24, 0, 0, 0, 11, 0, 0, 0, 23, 0, 0, 0, 10, 0, 0, 0, 22, 0, 0, 0, 8, 0, 0, 0, 21, 0, 0, 0, 7, 0, 0, 0, 20, 0, 0, 0, 6, 0, 0, 0, 19, 0, 0, 0, 18, 0, 0, 0, 36, 0, 0, 0, 17, 0, 0, 0, 35, 0, 0, 0, 16, 0, 0, 0, 34, 0, 0, 0, 12, 0, 0, 0, 33, 0, 0, 0, 11, 0, 0, 0, 32, 0, 0, 0, 10, 0, 0, 0, 31, 0, 0, 0, 8, 0, 0, 0, 30, 0, 0, 0, 7, 0, 0, 0, 29, 0, 0, 0, 6, 0, 0, 0, 28, 0, 0, 0, 18, 0, 0, 0, 45, 0, 0, 0, 17, 0, 0, 0, 44, 0, 0, 0, 16, 0, 0, 0, 43, 0, 0, 0, 12, 0, 0, 0, 42, 0, 0, 0, 11, 0, 0, 0, 41, 0, 0, 0, 10, 0, 0, 0, 40, 0, 0, 0, 8, 0, 0, 0, 39, 0, 0, 0, 7, 0, 0, 0, 38, 0, 0, 0, 6, 0, 0, 0, 37, 0, 0, 0, 18, 0, 0, 0, 54, 0, 0, 0, 17, 0, 0, 0, 53, 0, 0, 0, 16, 0, 0, 0, 52, 0, 0, 0, 12, 0, 0, 0, 51, 0, 0, 0, 11, 0, 0, 0, 50, 0, 0, 0, 10, 0, 0, 0, 49, 0, 0, 0, 8, 0, 0, 0, 48, 0, 0, 0, 7, 0, 0, 0, 47, 0, 0, 0, 6, 0, 0, 0, 46, 0, 0, 0, 18, 0, 0, 0, 63, 0, 0, 0, 17, 0, 0, 0, 62, 0, 0, 0, 16, 0, 0, 0, 61, 0, 0, 0, 12, 0, 0, 0, 60, 0, 0, 0, 11, 0, 0, 0, 59, 0, 0, 0, 10, 0, 0, 0, 58, 0, 0, 0, 8, 0, 0, 0, 57, 0, 0, 0, 7, 0, 0, 0, 56, 0, 0, 0, 6, 0, 0, 0, 55, 0, 0, 0, 18, 0, 0, 0, 72, 0, 0, 0, 17, 0, 0, 0, 71, 0, 0, 0, 16, 0, 0, 0, 70, 0, 0, 0, 12, 0, 0, 0, 69, 0, 0, 0, 11, 0, 0, 0, 68, 0, 0, 0, 10, 0, 0, 0, 67, 0, 0, 0, 8, 0, 0, 0, 66, 0, 0, 0, 7, 0, 0, 0, 65, 0, 0, 0, 6, 0, 0, 0, 64, 0, 0, 0, 18, 0, 0, 0, 136, 0, 0, 0, 17, 0, 0, 0, 135, 0, 0, 0, 16, 0, 0, 0, 134, 0, 0, 0, 12, 0, 0, 0, 133, 0, 0, 0, 11, 0, 0, 0, 132, 0, 0, 0, 10, 0, 0, 0, 131, 0, 0, 0, 8, 0, 0, 0, 130, 0, 0, 0, 7, 0, 0, 0, 129, 0, 0, 0, 6, 0, 0, 0, 128, 0, 0, 0, 18, 0, 0, 0, 178, 0, 0, 0, 17, 0, 0, 0, 177, 0, 0, 0, 16, 0, 0, 0, 176, 0, 0, 0, 12, 0, 0, 0, 175, 0, 0, 0, 11, 0, 0, 0, 174, 0, 0, 0, 10, 0, 0, 0, 173, 0, 0, 0, 8, 0, 0, 0, 172, 0, 0, 0, 7, 0, 0, 0, 171, 0, 0, 0, 6, 0, 0, 0, 170, 0, 0, 0, 18, 0, 0, 0, 187, 0, 0, 0, 17, 0, 0, 0, 186, 0, 0, 0, 16, 0, 0, 0, 185, 0, 0, 0, 12, 0, 0, 0, 184, 0, 0, 0, 11, 0, 0, 0, 183, 0, 0, 0, 10, 0, 0, 0, 182, 0, 0, 0, 8, 0, 0, 0, 181, 0, 0, 0, 7, 0, 0, 0, 180, 0, 0, 0, 6, 0, 0, 0, 179, 0, 0, 0, 18, 0, 0, 0, 196, 0, 0, 0, 17, 0, 0, 0, 195, 0, 0, 0, 16, 0, 0, 0, 194, 0, 0, 0, 12, 0, 0, 0, 193, 0, 0, 0, 11, 0, 0, 0, 192, 0, 0, 0, 10, 0, 0, 0, 191, 0, 0, 0, 8, 0, 0, 0, 190, 0, 0, 0, 7, 0, 0, 0, 189, 0, 0, 0, 6, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 6, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 7, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 8, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 10, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 11, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 12, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 16, 20, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 17, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 18, 21, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 6, 21, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 7, 21, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 8, 21, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 10, 21, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 11, 22, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 12, 22, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 16, 23, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 17, 21, 0, 0, 0, 1, 0, 0, 0, 2, 1, 6, 18, 24, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 6, 25, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 7, 24, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 8, 25, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 10, 25, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 11, 25, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 12, 25, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 16, 26, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 17, 25, 0, 0, 0, 2, 0, 0, 0, 2, 2, 8, 18, 27, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 6, 28, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 7, 27, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 8, 28, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 10, 28, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 11, 28, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 12, 28, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 16, 29, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 17, 28, 0, 0, 0, 3, 0, 0, 0, 2, 3, 18, 18, 30, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 6, 30, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 7, 30, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 8, 30, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 10, 30, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 11, 31, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 12, 31, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 16, 32, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 17, 31, 0, 0, 0, 4, 0, 0, 0, 2, 4, 16, 18, 33, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 6, 33, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 7, 33, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 8, 33, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 10, 33, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 11, 34, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 12, 34, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 16, 34, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 17, 34, 0, 0, 0, 5, 0, 0, 0, 2, 5, 12, 18, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 0, 0, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 0, 1, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 0, 14, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 1, 0, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 1, 1, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 1, 14, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 2, 0, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 2, 1, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 2, 14, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 3, 0, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 3, 1, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 3, 14, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 4, 0, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 4, 1, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 4, 14, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 5, 0, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 5, 1, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 5, 14, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 9, 0, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 9, 1, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 9, 14, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 13, 0, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 13, 1, 35, 0, 0, 0, 6, 0, 0, 0, 1, 6, 13, 14, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 14, 0, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 14, 1, 36, 0, 0, 0, 6, 0, 0, 0, 1, 6, 14, 14, 37, 0, 0, 0, 6, 0, 0, 0, 1, 6, 15, 0, 37, 0, 0, 0, 6, 0, 0, 0, 1, 6, 15, 1, 37, 0, 0, 0, 6, 0, 0, 0, 1, 6, 15, 14, 38, 0, 0, 0, 6, 0, 0, 0, 1, 6, 17, 0, 38, 0, 0, 0, 6, 0, 0, 0, 1, 6, 17, 1, 39, 0, 0, 0, 6, 0, 0, 0, 1, 6, 17, 14, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 0, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 1, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 2, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 3, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 4, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 5, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 9, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 13, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 14, 9, 40, 0, 0, 0, 7, 0, 0, 0, 1, 7, 15, 9, 41, 0, 0, 0, 7, 0, 0, 0, 1, 7, 17, 9, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 0, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 1, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 2, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 3, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 4, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 5, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 9, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 13, 2, 42, 0, 0, 0, 8, 0, 0, 0, 1, 8, 14, 2, 43, 0, 0, 0, 8, 0, 0, 0, 1, 8, 15, 2, 44, 0, 0, 0, 8, 0, 0, 0, 1, 8, 17, 2, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 6, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 7, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 8, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 10, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 11, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 12, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 16, 46, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 17, 45, 0, 0, 0, 9, 0, 0, 0, 2, 9, 7, 18, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 0, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 1, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 2, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 3, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 4, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 5, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 9, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 13, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 14, 13, 47, 0, 0, 0, 10, 0, 0, 0, 1, 10, 15, 13, 48, 0, 0, 0, 10, 0, 0, 0, 1, 10, 17, 13, 49, 0, 0, 0, 11, 0, 0, 0, 1, 11, 0, 15, 49, 0, 0, 0, 11, 0, 0, 0, 1, 11, 1, 15, 49, 0, 0, 0, 11, 0, 0, 0, 1, 11, 2, 15, 49, 0, 0, 0, 11, 0, 0, 0, 1, 11, 3, 15, 50, 0, 0, 0, 11, 0, 0, 0, 1, 11, 4, 15, 49, 0, 0, 0, 11, 0, 0, 0, 1, 11, 5, 15, 49, 0, 0, 0, 11, 0, 0, 0, 1, 11, 9, 15, 50, 0, 0, 0, 11, 0, 0, 0, 1, 11, 13, 15, 50, 0, 0, 0, 11, 0, 0, 0, 1, 11, 14, 15, 50, 0, 0, 0, 11, 0, 0, 0, 1, 11, 15, 15, 51, 0, 0, 0, 11, 0, 0, 0, 1, 11, 17, 15, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 0, 5, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 1, 5, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 2, 5, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 3, 5, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 4, 5, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 5, 5, 53, 0, 0, 0, 12, 0, 0, 0, 1, 12, 9, 5, 52, 0, 0, 0, 12, 0, 0, 0, 1, 12, 13, 5, 53, 0, 0, 0, 12, 0, 0, 0, 1, 12, 14, 5, 54, 0, 0, 0, 12, 0, 0, 0, 1, 12, 15, 5, 55, 0, 0, 0, 12, 0, 0, 0, 1, 12, 17, 5, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 6, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 7, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 8, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 10, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 11, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 12, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 16, 57, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 17, 56, 0, 0, 0, 13, 0, 0, 0, 2, 13, 10, 18, 58, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 6, 58, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 7, 58, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 8, 58, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 10, 58, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 11, 59, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 12, 59, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 16, 60, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 17, 59, 0, 0, 0, 14, 0, 0, 0, 2, 14, 6, 18, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 6, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 7, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 8, 62, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 10, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 11, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 12, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 16, 63, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 17, 61, 0, 0, 0, 15, 0, 0, 0, 2, 15, 11, 18, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 0, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 1, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 2, 4, 65, 0, 0, 0, 16, 0, 0, 0, 1, 16, 3, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 4, 4, 65, 0, 0, 0, 16, 0, 0, 0, 1, 16, 5, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 9, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 13, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 14, 4, 64, 0, 0, 0, 16, 0, 0, 0, 1, 16, 15, 4, 66, 0, 0, 0, 16, 0, 0, 0, 1, 16, 17, 4, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 0, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 1, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 2, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 3, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 4, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 5, 3, 68, 0, 0, 0, 18, 0, 0, 0, 1, 18, 9, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 13, 3, 68, 0, 0, 0, 18, 0, 0, 0, 1, 18, 14, 3, 67, 0, 0, 0, 18, 0, 0, 0, 1, 18, 15, 3, 69, 0, 0, 0, 18, 0, 0, 0, 1, 18, 17, 3, 210, 0, 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 57, 0, 58, 0, 60, 0, 61, 0, 62, 0, 65, 0, 61, 0, 63, 0, 66, 0, 61, 0, 62, 0, 64, 0, 67, 0, 68, 0, 71, 0, 67, 0, 68, 0, 69, 0, 67, 0, 68, 0, 70, 0, 72, 0, 73, 0, 76, 0, 72, 0, 73, 0, 75, 0, 72, 0, 73, 0, 74, 0, 77, 0, 78, 0, 79, 0, 77, 0, 78, 0, 81, 0, 77, 0, 78, 0, 80, 0, 82, 0, 84, 0, 86, 0, 82, 0, 83, 0, 85, 0, 88, 0, 90, 0, 93, 0, 89, 0, 91, 0, 93, 0, 89, 0, 90, 0, 93, 0, 87, 0, 92, 0, 93, 0, 89, 0, 92, 0, 93, 0, 94, 0, 96, 0, 98, 0, 95, 0, 97, 0, 98, 0, 100, 0, 103, 0, 104, 0, 99, 0, 101, 0, 104, 0, 99, 0, 102, 0, 105, 0, 106, 0, 107, 0, 108, 0, 106, 0, 107, 0, 109, 0, 110, 0, 112, 0, 114, 0, 111, 0, 113, 0, 114, 0, 115, 0, 118, 0, 120, 0, 116, 0, 119, 0, 120, 0, 115, 0, 117, 0, 120, 0, 121, 0, 126, 0, 127, 0, 122, 0, 124, 0, 127, 0, 121, 0, 124, 0, 127, 0, 123, 0, 125, 0, 127, 0, 128, 0, 129, 0, 131, 0, 128, 0, 129, 0, 130, 0, 132, 0, 133, 0, 136, 0, 132, 0, 133, 0, 134, 0, 132, 0, 133, 0, 135, 0, 137, 0, 139, 0, 142, 0, 137, 0, 140, 0, 142, 0, 138, 0, 141, 0, 142, 0, 144, 0, 146, 0, 149, 0, 143, 0, 148, 0, 149, 0, 145, 0, 147, 0, 149, 0, 150, 0, 154, 0, 155, 0, 151, 0, 154, 0, 156, 0, 152, 0, 153, 0, 155, 0], true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 72136;













































var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);











































/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a347() } },{ func: function() { __GLOBAL__I_a552() } });



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































var ___dso_handle;
var ___dso_handle=___dso_handle=allocate(1, "i32*", ALLOC_STATIC);


















































































































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,152,251,0,0,162,4,0,0,54,2,0,0,8,1,0,0,166,1,0,0,22,3,0,0,156,0,0,0,146,1,0,0,200,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv119__pointer_type_infoE;
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0,0,0,0,168,251,0,0,162,4,0,0,14,1,0,0,8,1,0,0,166,1,0,0,50,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,200,251,0,0,162,4,0,0,150,4,0,0,8,1,0,0,166,1,0,0,22,3,0,0,144,3,0,0,190,1,0,0,148,2,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;




















































































































































































































































































var __ZTIt;
__ZTIt=allocate([64,221,0,0,192,221,0,0], "i8", ALLOC_STATIC);;
var __ZTIs;
__ZTIs=allocate([64,221,0,0,200,221,0,0], "i8", ALLOC_STATIC);;
var __ZTIm;
__ZTIm=allocate([64,221,0,0,216,37,0,0], "i8", ALLOC_STATIC);;
var __ZTIl;
__ZTIl=allocate([64,221,0,0,208,221,0,0], "i8", ALLOC_STATIC);;
var __ZTIj;
__ZTIj=allocate([64,221,0,0,216,221,0,0], "i8", ALLOC_STATIC);;
var __ZTIi;
__ZTIi=allocate([64,221,0,0,224,221,0,0], "i8", ALLOC_STATIC);;
var __ZTIh;
__ZTIh=allocate([64,221,0,0,232,221,0,0], "i8", ALLOC_STATIC);;
var __ZTIf;
__ZTIf=allocate([64,221,0,0,240,221,0,0], "i8", ALLOC_STATIC);;
var __ZTId;
__ZTId=allocate([64,221,0,0,152,106,0,0], "i8", ALLOC_STATIC);;
var __ZTIc;
__ZTIc=allocate([64,221,0,0,248,221,0,0], "i8", ALLOC_STATIC);;


var __ZTIa;
__ZTIa=allocate([64,221,0,0,16,191,0,0], "i8", ALLOC_STATIC);;


var __ZTISt9exception;
var __ZTISt9exception=__ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);








































































































































































































































































































































































































/* memory initializer */ allocate([0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,15,18,19,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,2,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,2,17,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,224,25,0,0,64,192,0,0,96,186,0,0,48,180,0,0,224,173,0,0,120,167,0,0,104,163,0,0,104,158,0,0,160,152,0,0,160,148,0,0,216,143,0,0,176,138,0,0,192,135,0,0,104,129,0,0,96,124,0,0,200,120,0,0,8,118,0,0,240,114,0,0,192,111,0,0,24,108,0,0,160,103,0,0,0,100,0,0,0,96,0,0,240,89,0,0,64,87,0,0,176,85,0,0,232,83,0,0,208,81,0,0,88,80,0,0,40,78,0,0,16,76,0,0,72,74,0,0,216,72,0,0,24,69,0,0,96,67,0,0,144,66,0,0,0,0,0,0,0,0,0,0,50,24,1,30,31,5,32,30,31,6,33,24,34,44,33,17,34,46,47,18,26,50,49,9,27,10,56,8,9,48,10,49,54,49,49,55,7,52,53,15,19,20,21,29,25,28,57,45,0,42,43,51,22,0,23,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,0,0,0,0,32,111,114,32,37,115,0,0,44,32,101,120,112,101,99,116,105,110,103,32,37,115,0,0,0,2,1,2,3,2,2,3,4,5,3,1,2,3,1,2,4,5,1,3,1,2,1,2,1,2,3,3,1,1,1,1,2,2,0,0,0,0,0,0,0,20,21,21,21,22,23,23,23,23,24,25,25,26,27,27,28,28,29,29,30,30,31,31,32,32,33,34,35,35,35,35,35,35,0,0,0,0,0,0,219,219,219,219,219,219,41,43,244,240,253,220,219,219,219,15,255,254,36,22,35,8,219,219,32,33,30,22,219,17,219,37,219,13,219,34,31,252,219,17,219,38,39,219,219,252,219,219,0,252,252,18,252,42,219,219,219,19,219,219,21,19,20,9,219,252,42,219,219,219,219,219,219,252,0,0,0,0,0,0,255,2,3,4,16,11,12,13,14,35,36,37,38,39,40,41,0,0,0,2,0,0,6,1,0,0,0,0,11,3,14,0,5,0,7,0,0,0,12,4,15,0,0,8,13,0,28,29,0,0,0,0,18,20,22,30,31,24,10,9,0,25,0,0,16,0,21,23,32,33,17,26,27,19,0,0,0,0,0,0,36,13,3,7,8,7,10,7,8,11,14,23,16,29,14,7,16,33,34,11,7,57,13,6,11,8,17,5,6,11,8,13,11,13,13,15,0,18,19,4,8,8,12,12,7,11,49,32,255,11,11,9,11,255,11,0,0,0,42,0,11,0,11,0,97,0,12,0,20,0,11,0,97,0,34,0,13,0,21,0,35,0,14,0,20,0,11,0,31,0,11,0,65,0,21,0,54,0,32,0,31,0,11,0,15,0,16,0,53,0,32,0,47,0,17,0,48,0,49,0,50,0,66,0,96,0,55,0,95,0,18,0,11,0,11,0,54,0,12,0,78,0,65,0,51,0,94,0,13,0,44,0,85,0,14,0,48,0,74,0,50,0,74,0,87,0,55,0,54,0,79,0,66,0,93,0,15,0,16,0,54,0,86,0,51,0,17,0,51,0,74,0,88,0,74,0,88,0,55,0,53,0,18,0,23,0,11,0,24,0,55,0,25,0,25,0,65,0,33,0,26,0,92,0,27,0,28,0,25,0,91,0,78,0,74,0,87,0,90,0,89,0,73,0,84,0,66,0,83,0,44,0,85,0,82,0,81,0,59,0,51,0,79,0,80,0,29,0,25,0,23,0,11,0,24,0,76,0,25,0,25,0,86,0,75,0,26,0,73,0,27,0,28,0,25,0,71,0,64,0,63,0,62,0,61,0,60,0,59,0,57,0,56,0,41,0,40,0,39,0,38,0,37,0,33,0,97,0,97,0,97,0,29,0,25,0,44,0,44,0,45,0,97,0,44,0,44,0,97,0,97,0,44,0,97,0,44,0,44,0,44,0,97,0,97,0,97,0,97,0,46,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,44,0,44,0,44,0,44,0,45,0,97,0,44,0,44,0,97,0,97,0,44,0,97,0,44,0,44,0,44,0,97,0,97,0,97,0,97,0,46,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,44,0,44,0,68,0,44,0,69,0,97,0,68,0,68,0,97,0,97,0,68,0,97,0,68,0,68,0,68,0,97,0,97,0,97,0,97,0,70,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,68,0,68,0,68,0,44,0,69,0,97,0,68,0,68,0,97,0,97,0,68,0,97,0,68,0,68,0,68,0,97,0,97,0,97,0,97,0,70,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,68,0,68,0,10,0,10,0,10,0,19,0,19,0,19,0,22,0,22,0,22,0,30,0,30,0,30,0,36,0,36,0,43,0,43,0,43,0,52,0,52,0,53,0,53,0,53,0,58,0,58,0,58,0,44,0,44,0,44,0,67,0,67,0,67,0,72,0,72,0,72,0,77,0,77,0,77,0,68,0,68,0,68,0,9,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,1,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,1,0,0,0,12,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,1,0,0,0,1,0,0,0,17,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,18,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,19,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,1,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,1,0,0,0,1,0,0,0,26,0,0,0,27,0,0,0,1,0,0,0,28,0,0,0,29,0,0,0,1,0,0,0,30,0,0,0,1,0,0,0,31,0,0,0,32,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,33,0,0,0,6,0,0,0,34,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,35,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,37,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,98,0,98,0,99,0,99,0,100,0,100,0,101,0,101,0,97,0,97,0,97,0,97,0,97,0,102,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,103,0,97,0,104,0,97,0,97,0,97,0,105,0,106,0,97,0,97,0,97,0,97,0,97,0,107,0,102,0,97,0,97,0,97,0,97,0,97,0,103,0,104,0,108,0,103,0,109,0,97,0,97,0,110,0,97,0,97,0,105,0,106,0,111,0,97,0,97,0,97,0,107,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,112,0,43,0,108,0,43,0,109,0,97,0,110,0,97,0,97,0,97,0,97,0,106,0,111,0,106,0,97,0,97,0,97,0,97,0,97,0,108,0,112,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,0,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,103,0,1,0,1,0,0,0,1,0,3,0,3,0,0,0,13,0,1,0,3,0,13,0,1,0,4,0,4,0,7,0,7,0,44,0,4,0,29,0,7,0,8,0,8,0,1,0,1,0,54,0,8,0,26,0,1,0,26,0,26,0,26,0,44,0,93,0,29,0,92,0,1,0,2,0,2,0,53,0,2,0,54,0,68,0,26,0,91,0,2,0,66,0,66,0,2,0,50,0,50,0,50,0,71,0,71,0,53,0,77,0,54,0,68,0,90,0,2,0,2,0,79,0,66,0,50,0,2,0,71,0,75,0,75,0,88,0,88,0,77,0,78,0,2,0,5,0,5,0,5,0,79,0,5,0,5,0,85,0,84,0,5,0,83,0,5,0,5,0,5,0,82,0,78,0,87,0,87,0,81,0,80,0,72,0,64,0,85,0,63,0,86,0,86,0,62,0,61,0,58,0,87,0,78,0,57,0,5,0,5,0,6,0,6,0,6,0,52,0,6,0,6,0,86,0,51,0,6,0,49,0,6,0,6,0,6,0,48,0,40,0,39,0,38,0,37,0,36,0,35,0,33,0,32,0,21,0,18,0,17,0,16,0,15,0,12,0,9,0,0,0,0,0,6,0,6,0,24,0,24,0,24,0,0,0,24,0,24,0,0,0,0,0,24,0,0,0,24,0,24,0,24,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,43,0,43,0,43,0,0,0,43,0,43,0,0,0,0,0,43,0,0,0,43,0,43,0,43,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,43,0,46,0,46,0,46,0,0,0,46,0,46,0,0,0,0,0,46,0,0,0,46,0,46,0,46,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,46,0,70,0,70,0,70,0,0,0,70,0,70,0,0,0,0,0,70,0,0,0,70,0,70,0,70,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,70,0,98,0,98,0,98,0,99,0,99,0,99,0,100,0,100,0,100,0,101,0,101,0,101,0,102,0,102,0,104,0,104,0,104,0,105,0,105,0,106,0,106,0,106,0,107,0,107,0,107,0,108,0,108,0,108,0,109,0,109,0,109,0,110,0,110,0,110,0,111,0,111,0,111,0,112,0,112,0,112,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,36,0,4,0,12,0,72,0,105,0,14,0,20,0,135,0,56,1,56,1,117,0,2,0,0,0,103,0,105,0,99,0,95,0,56,1,56,1,119,0,0,0,56,1,138,0,56,1,21,0,56,1,0,0,1,0,56,1,56,1,118,0,109,0,56,1,123,0,111,0,104,0,94,0,101,0,85,0,56,1,0,0,171,0,14,0,0,0,204,0,56,1,109,0,113,0,41,0,106,0,96,0,21,0,23,0,56,1,56,1,88,0,98,0,56,1,56,1,73,0,71,0,70,0,89,0,56,1,44,0,0,0,39,0,0,0,237,0,43,0,90,0,56,1,56,1,57,0,56,1,37,0,69,0,43,0,77,0,64,0,57,0,58,0,64,0,76,0,94,0,79,0,59,0,56,1,39,0,14,0,14,0,4,0,56,1,56,1,56,1,56,1,15,1,18,1,21,1,24,1,27,1,0,0,29,1,32,1,34,1,37,1,40,1,43,1,46,1,49,1,52,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,22,0,1,0,22,0,22,0,22,0,22,0,22,0,22,0,22,0,5,0,1,0,5,0,17,0,1,0,17,0,21,0,21,0,18,0,21,0,21,0,9,0,1,0,9,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,17,0,17,0,0,0,17,0,17,0,7,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,16,0,8,0,0,0,0,0,2,0,14,0,0,0,0,0,0,0,0,0,19,0,0,0,17,0,0,0,17,0,17,0,0,0,0,0,6,0,20,0,0,0,15,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,12,0,13,0,11,0,0,0,0,0,0,0,188,137,216,151,178,210,156,60,51,167,168,213,35,246,73,57,61,167,244,68,253,15,165,50,157,151,140,207,8,186,91,37,67,111,172,100,40,6,104,17,0,0,0,0,0,0,240,63,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,64,143,64,0,0,0,0,0,136,195,64,0,0,0,0,0,106,248,64,0,0,0,0,128,132,46,65,0,0,0,0,208,18,99,65,0,0,0,0,132,215,151,65,0,0,0,0,101,205,205,65,0,0,0,32,95,160,2,66,0,0,0,232,118,72,55,66,0,0,0,162,148,26,109,66,0,0,64,229,156,48,162,66,0,0,144,30,196,188,214,66,0,0,52,38,245,107,12,67,0,128,224,55,121,195,65,67,0,160,216,133,87,52,118,67,0,200,78,103,109,193,171,67,0,61,145,96,228,88,225,67,64,140,181,120,29,175,21,68,80,239,226,214,228,26,75,68,146,213,77,6,207,240,128,68,112,149,0,0,58,3,0,0,196,4,0,0,162,2,0,0,88,159,0,0,176,3,0,0,194,1,0,0,80,3,0,0,128,3,0,0,250,0,0,0,101,0,0,0,211,0,0,0,51,1,0,0,145,1,0,0,247,1,0,0,89,2,0,0,189,2,0,0,41,3,0,0,139,3,0,0,241,3,0,0,177,4,0,0,65,6,0,0,211,7,0,0,107,9,0,0,185,11,0,0,161,15,0,0,139,19,0,0,119,23,0,0,89,27,0,0,73,31,0,0,41,35,0,0,23,39,0,0,231,46,0,0,129,62,0,0,43,78,0,0,193,93,0,0,59,117,0,0,73,156,0,0,101,195,0,0,109,234,0,0,113,17,1,0,149,56,1,0,145,95,1,0,163,134,1,0,203,212,1,0,1,113,2,0,67,13,3,0,135,169,3,0,231,147,4,0,137,26,6,0,41,161,7,0,203,39,9,0,97,174,10,0,11,53,12,0,161,187,13,0,255,255,255,255,5,0,0,0,25,0,0,0,125,0,0,0,0,0,0,0,40,60,0,0,186,2,0,0,68,0,0,0,170,1,0,0,216,1,0,0,226,3,0,0,0,0,0,0,72,2,0,0,56,3,0,0,176,1,0,0,0,0,128,63,0,128,212,69,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,136,0,0,0,0,0,0,242,2,0,0,178,4,0,0,192,2,0,0,132,1,0,0,210,0,0,0,218,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,4,0,0,142,0,0,0,148,4,0,0,106,1,0,0,224,1,0,0,164,1,0,0,36,2,0,0,228,3,0,0,152,0,0,0,64,0,0,0,94,4,0,0,30,4,0,0,30,3,0,0,254,1,0,0,130,2,0,0,84,0,0,0,54,1,0,0,74,3,0,0,104,2,0,0,220,2,0,0,158,4,0,0,70,1,0,0,184,2,0,0,152,3,0,0,144,40,0,0,96,0,0,0,254,3,0,0,94,1,0,0,80,4,0,0,20,1,0,0,108,0,0,0,210,2,0,0,80,1,0,0,168,1,0,0,88,0,0,0,176,2,0,0,88,187,0,0,112,180,0,0,0,174,0,0,0,0,0,0,113,2,0,0,0,0,0,0,96,150,0,0,232,0,0,0,20,4,0,0,88,4,0,0,84,2,0,0,168,4,0,0,128,38,0,0,244,0,0,0,216,0,0,0,150,2,0,0,98,4,0,0,78,4,0,0,182,4,0,0,168,2,0,0,10,1,0,0,76,2,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,223,176,8,153,76,1,0,0,132,3,0,0,72,66,0,0,222,0,0,0,190,2,0,0,142,3,0,0,132,2,0,0,200,3,0,0,48,3,0,0,30,2,0,0,164,4,0,0,206,0,0,0,88,121,0,0,16,0,0,0,72,67,0,0,24,52,0,0,48,118,0,0,16,0,0,0,72,67,0,0,56,50,0,0,240,143,0,0,8,0,0,0,224,135,0,0,144,45,0,0,96,26,0,0,4,0,0,0,168,43,0,0,120,42,0,0,112,152,0,0,4,0,0,0,72,41,0,0,192,40,0,0,72,184,0,0,2,0,0,0,160,39,0,0,216,38,0,0,200,31,0,0,4,0,0,0,56,36,0,0,192,35,0,0,104,187,0,0,2,0,0,0,240,34,0,0,144,34,0,0,248,41,0,0,2,0,0,0,144,33,0,0,200,32,0,0,64,40,0,0,4,0,0,0,104,30,0,0,72,29,0,0,168,37,0,0,4,0,0,0,96,28,0,0,232,27,0,0,152,35,0,0,16,0,0,0,232,68,0,0,56,27,0,0,88,34,0,0,16,0,0,0,232,68,0,0,136,26,0,0,72,193,0,0,2,0,0,0,240,24,0,0,136,24,0,0,64,31,0,0,16,0,0,0,72,67,0,0,72,24,0,0,64,29,0,0,2,0,0,0,176,23,0,0,48,23,0,0,88,168,0,0,2,0,0,0,144,193,0,0,168,191,0,0,16,164,0,0,2,0,0,0,144,193,0,0,128,190,0,0,112,38,0,0,8,0,0,0,88,47,0,0,128,189,0,0,184,26,0,0,8,0,0,0,88,187,0,0,64,188,0,0,168,24,0,0,8,0,0,0,0,0,0,0,208,185,0,0,144,71,0,0,16,0,0,0,72,67,0,0,32,185,0,0,200,58,0,0,2,0,0,0,144,184,0,0,0,184,0,0,176,158,0,0,16,0,0,0,72,67,0,0,192,182,0,0,240,153,0,0,16,0,0,0,232,68,0,0,0,181,0,0,32,149,0,0,16,0,0,0,232,68,0,0,136,178,0,0,72,62,0,0,16,0,0,0,72,67,0,0,216,177,0,0,16,87,0,0,8,0,0,0,32,118,0,0,16,177,0,0,216,88,0,0,2,0,0,0,240,24,0,0,112,176,0,0,80,66,0,0,8,0,0,0,64,182,0,0,240,174,0,0,128,54,0,0,8,0,0,0,176,174,0,0,120,173,0,0,200,64,0,0,16,0,0,0,72,67,0,0,56,172,0,0,168,63,0,0,8,0,0,0,72,140,0,0,232,171,0,0,8,57,0,0,4,0,0,0,160,171,0,0,64,171,0,0,112,161,0,0,8,0,0,0,0,0,0,0,176,170,0,0,232,60,0,0,2,0,0,0,176,23,0,0,8,170,0,0,128,60,0,0,8,0,0,0,0,0,0,0,88,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,3,0,0,60,0,0,0,40,0,0,0,38,3,0,0,34,1,0,0,44,1,0,0,230,3,0,0,32,0,0,0,10,0,0,0,22,1,0,0,4,1,0,0,180,3,0,0,136,2,0,0,114,4,0,0,144,4,0,0,64,4,0,0,240,2,0,0,18,0,0,0,88,2,0,0,12,1,0,0,174,4,0,0,0,0,0,0,152,110,0,0,240,176,0,0,16,127,0,0,88,88,0,0,0,68,0,0,136,56,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,68,97,114,112,97,32,84,114,105,103,114,97,109,32,76,77,0,0,0,0,0,0,0,0,72,140,0,0,64,182,0,0,232,130,0,0,0,0,0,0,32,9,13,10,0,0,0,0,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,72,140,0,0,104,182,0,0,24,131,0,0,176,91,0,0,37,56,100,32,99,97,110,100,105,100,97,116,101,32,119,111,114,100,115,32,102,111,114,32,101,110,116,101,114,105,110,103,32,108,97,115,116,32,112,104,111,110,101,32,40,37,100,47,102,114,41,10,0,0,0,0,74,117,108,0,0,0,0,0,76,101,110,103,116,104,32,111,102,32,115,105,110,45,99,117,114,118,101,32,102,111,114,32,108,105,102,116,101,114,105,110,103,44,32,111,114,32,48,32,102,111,114,32,110,111,32,108,105,102,116,101,114,105,110,103,46,0,0,0,0,0,0,0,35,115,101,110,111,110,101,115,32,105,110,99,111,110,115,105,115,116,101,110,116,58,32,37,100,32,105,110,32,37,115,59,32,37,100,32,105,110,32,37,115,10,0,0,0,0,0,0,45,97,119,0,0,0,0,0,74,117,110,0,0,0,0,0,48,0,0,0,0,0,0,0,118,97,114,102,105,108,101,32,33,61,32,78,85,76,76,0,65,112,114,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,110,103,114,97,109,95,115,101,97,114,99,104,95,102,119,100,116,114,101,101,46,99,0,45,102,115,103,117,115,101,102,105,108,108,101,114,0,0,0,77,97,114,0,0,0,0,0,85,115,101,32,100,111,117,98,108,101,32,98,97,110,100,119,105,100,116,104,32,102,105,108,116,101,114,115,32,40,115,97,109,101,32,99,101,110,116,101,114,32,102,114,101,113,41,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,99,101,112,32,99,111,101,102,102,105,99,105,101,110,116,115,0,0,0,0,0,0,45,119,97,114,112,95,112,97,114,97,109,115,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,49,51,0,0,0,0,0,0,108,111,110,103,0,0,0,0,58,32,37,115,10,0,0,0,37,115,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,97,114,103,117,109,101,110,116,32,110,97,109,101,32,105,110,32,100,101,102,105,110,105,116,105,111,110,58,32,37,115,10,0,0,0,0,0,0,101,110,100,104,100,114,0,0,45,119,105,112,0,0,0,0,125,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,87,105,108,108,32,117,115,101,32,109,101,109,111,114,121,45,109,97,112,112,101,100,32,73,47,79,32,102,111,114,32,76,77,32,102,105,108,101,10,0,37,56,100,32,61,32,35,112,114,111,98,51,32,101,110,116,114,105,101,115,10,0,0,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,101,110,100,32,111,102,32,98,117,102,102,101,114,32,109,105,115,115,101,100,0,36,101,110,100,0,0,0,0,37,115,32,100,101,99,108,97,114,97,116,105,111,110,32,109,105,115,115,105,110,103,10,0,37,115,58,32,86,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,37,115,44,32,101,120,112,101,99,116,105,110,103,32,37,115,10,0,40,110,32,60,32,48,41,32,38,38,32,40,33,103,110,41,0,0,0,0,0,0,0,0,65,71,67,32,78,79,73,83,69,58,32,109,97,120,61,32,37,54,46,51,102,10,0,0,108,105,110,101,97,114,0,0,45,97,108,112,104,97,0,0,45,109,105,120,119,102,108,111,111,114,0,0,0,0,0,0,37,102,32,0,0,0,0,0,79,99,116,111,98,101,114,0,82,111,117,110,100,32,109,101,108,32,102,105,108,116,101,114,32,102,114,101,113,117,101,110,99,105,101,115,32,116,111,32,68,70,84,32,112,111,105,110,116,115,0,0,0,0,0,0,45,119,97,114,112,95,116,121,112,101,0,0,0,0,0,0,37,56,100,32,115,101,110,111,110,101,115,32,101,118,97,108,117,97,116,101,100,32,40,37,100,47,102,114,41,10,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,37,56,100,32,119,111,114,100,115,32,102,111,114,32,119,104,105,99,104,32,108,97,115,116,32,99,104,97,110,110,101,108,115,32,101,118,97,108,117,97,116,101,100,32,40,37,100,47,102,114,41,10,0,0,0,0,65,117,103,117,115,116,0,0,78,111,114,109,97,108,105,122,101,32,109,101,108,32,102,105,108,116,101,114,115,32,116,111,32,117,110,105,116,32,97,114,101,97,0,0,0,0,0,0,102,119,100,102,108,97,116,0,35,115,101,110,111,110,101,61,37,100,59,32,109,117,115,116,32,98,101,32,62,49,10,0,74,117,108,121,0,0,0,0,109,101,97,110,102,105,108,101,32,33,61,32,78,85,76,76,0,0,0,0,0,0,0,0,74,117,110,101,0,0,0,0,70,83,71,40,98,101,97,109,58,32,37,100,44,32,112,98,101,97,109,58,32,37,100,44,32,119,98,101,97,109,58,32,37,100,59,32,119,105,112,58,32,37,100,44,32,112,105,112,58,32,37,100,41,10,0,0,77,97,121,0,0,0,0,0,85,112,112,101,114,32,101,100,103,101,32,111,102,32,102,105,108,116,101,114,115,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,109,115,95,115,101,110,111,110,101,46,99,0,0,0,0,65,112,114,105,108,0,0,0,54,56,53,53,46,52,57,55,54,0,0,0,0,0,0,0,102,101,97,116,95,119,105,110,100,111,119,95,115,105,122,101,40,102,99,98,41,32,61,61,32,52,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,98,121,116,101,45,111,114,100,101,114,32,109,97,114,107,101,114,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,51,41,32,61,61,32,49,50,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,109,115,95,109,103,97,117,46,99,0,0,0,0,0,0,45,108,105,102,116,101,114,0,76,111,119,101,114,32,101,100,103,101,32,111,102,32,102,105,108,116,101,114,115,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,50,41,32,61,61,32,51,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,97,32,112,105,112,101,32,102,111,114,32,97,32,99,111,109,109,97,110,100,32,39,37,115,39,32,109,111,100,101,32,39,37,115,39,0,0,0,0,0,0,86,101,114,121,32,108,97,114,103,101,32,104,97,115,104,32,116,97,98,108,101,32,114,101,113,117,101,115,116,101,100,32,40,37,100,32,101,110,116,114,105,101,115,41,10,0,0,0,37,115,58,32,34,37,115,34,44,32,108,105,110,101,32,37,108,100,58,32,37,115,0,0,72,101,97,100,101,114,32,102,111,114,109,97,116,32,101,114,114,111,114,44,32,108,105,110,101,32,37,100,10,0,0,0,45,108,119,0,0,0,0,0,123,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,49,51,51,46,51,51,51,51,52,0,0,0,0,0,0,0,66,121,116,101,115,119,97,112,112,105,110,103,32,114,101,113,117,105,114,101,100,44,32,119,105,108,108,32,110,111,116,32,117,115,101,32,109,101,109,111,114,121,45,109,97,112,112,101,100,32,73,47,79,32,102,111,114,32,76,77,32,102,105,108,101,10,0,0,0,0,0,0,37,56,100,32,61,32,35,116,114,105,103,114,97,109,115,32,99,114,101,97,116,101,100,10,0,0,0,0,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,101,110,115,117,114,101,95,98,117,102,102,101,114,95,115,116,97,99,107,40,41,0,0,0,0,0,0,0,0,80,85,66,76,73,67,32,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,49,41,32,61,61,32,50,52,0,0,0,45,100,111,117,98,108,101,98,119,0,0,0,0,0,0,0,66,97,115,101,32,119,111,114,100,32,37,115,32,110,111,116,32,112,114,101,115,101,110,116,32,105,110,32,70,83,71,32,118,111,99,97,98,117,108,97,114,121,33,10,0,0,0,0,48,46,49,0,0,0,0,0,40,110,50,32,60,32,48,41,32,38,38,32,40,33,103,110,50,41,0,0,0,0,0,0,65,71,67,69,77,97,120,58,32,111,98,115,61,32,37,46,50,102,44,32,110,101,119,61,32,37,46,50,102,10,0,0,105,110,118,101,114,115,101,0,45,119,108,101,110,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,10,0,0,0,45,109,105,120,119,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,116,114,101,97,109,32,108,101,110,103,116,104,32,102,111,114,32,102,101,97,116,117,114,101,32,37,100,10,0,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,48,41,32,61,61,32,49,50,0,0,0,82,101,110,111,114,109,97,108,105,122,105,110,103,32,83,99,111,114,101,115,32,97,116,32,102,114,97,109,101,32,37,100,44,32,98,101,115,116,32,115,99,111,114,101,32,37,100,10,0,0,0,0,0,0,0,0,37,56,100,32,119,111,114,100,115,32,114,101,99,111,103,110,105,122,101,100,32,40,37,100,47,102,114,41,10,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,102,105,108,116,101,114,32,98,97,110,107,115,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,109,115,95,103,97,117,100,101,110,46,99,0,0,0,0,102,101,97,116,95,110,95,115,116,114,101,97,109,40,102,99,98,41,32,61,61,32,52,0,37,56,100,32,99,104,97,110,110,101,108,115,32,115,101,97,114,99,104,101,100,32,40,37,100,47,102,114,41,44,32,37,100,32,49,115,116,44,32,37,100,32,108,97,115,116,10,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,52,48,0,0,0,0,0,0,102,101,97,116,95,119,105,110,100,111,119,95,115,105,122,101,40,102,99,98,41,32,61,61,32,51,0,0,0,0,0,0,102,119,100,116,114,101,101,0,104,97,115,104,95,116,97,98,108,101,95,101,110,116,101,114,40,37,115,41,32,102,97,105,108,101,100,59,32,100,117,112,108,105,99,97,116,101,32,67,73,112,104,111,110,101,63,10,0,0,0,0,0,0,0,0,77,97,112,112,105,110,103,32,115,101,110,111,110,101,115,32,116,111,32,105,110,100,105,118,105,100,117,97,108,32,99,111,100,101,98,111,111,107,115,10,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,48,41,32,61,61,32,51,57,0,0,0,45,114,111,117,110,100,95,102,105,108,116,101,114,115,0,0,112,32,60,32,109,45,62,110,95,99,105,112,104,111,110,101,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,83,105,122,101,32,111,102,32,70,70,84,0,0,0,0,0,102,101,97,116,95,99,101,112,115,105,122,101,40,102,99,98,41,32,61,61,32,49,51,0,77,105,115,115,105,110,103,32,102,105,108,108,101,114,32,97,116,114,105,98,117,116,101,32,102,105,101,108,100,58,32,37,115,10,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,53,49,50,0,0,0,0,0,102,101,97,116,95,119,105,110,100,111,119,95,115,105,122,101,40,102,99,98,41,32,61,61,32,70,69,65,84,95,68,67,69,80,95,87,73,78,32,43,32,49,0,0,0,0,0,0,66,97,100,32,99,111,110,116,101,120,116,32,105,110,102,111,32,102,111,114,32,98,97,115,101,32,112,104,111,110,101,58,32,37,115,10,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,48,41,32,61,61,32,102,101,97,116,95,99,101,112,115,105,122,101,40,102,99,98,41,32,42,32,51,0,0,0,0,0,0,0,0,45,117,110,105,116,95,97,114,101,97,0,0,0,0,0,0,45,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,72,97,109,109,105,110,103,32,119,105,110,100,111,119,32,108,101,110,103,116,104,0,0,0,102,101,97,116,95,119,105,110,100,111,119,95,115,105,122,101,40,102,99,98,41,32,61,61,32,70,69,65,84,95,68,67,69,80,95,87,73,78,32,42,32,50,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,98,97,115,101,32,112,104,111,110,101,58,32,37,115,10,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,48,46,48,50,53,54,50,53,0,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,45,99,111,109,112,97,108,108,115,101,110,0,0,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,48,41,32,61,61,32,102,101,97,116,95,99,101,112,115,105,122,101,40,102,99,98,41,32,42,32,52,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,37,100,10,0,0,0,68,117,112,108,105,99,97,116,101,32,116,114,105,112,104,111,110,101,58,32,37,115,10,0,37,115,58,32,37,115,40,37,108,100,41,58,32,37,115,0,37,115,37,110,0,0,0,0,37,49,48,50,51,115,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,87,114,111,110,103,32,104,101,97,100,101,114,32,37,115,58,32,37,115,32,105,115,32,110,111,116,32,97,32,100,117,109,112,32,102,105,108,101,10,0,37,56,100,32,61,32,35,98,111,95,119,116,50,32,101,110,116,114,105,101,115,10,0,0,37,115,10,0,0,0,0,0,37,115,32,97,116,32,108,105,110,101,32,37,100,32,99,117,114,114,101,110,116,32,116,111,107,101,110,32,39,37,115,39,10,0,0,0,0,0,0,0,68,101,102,105,110,101,100,32,114,117,108,101,58,32,37,115,37,115,10,0,0,0,0,0,102,101,97,116,95,119,105,110,100,111,119,95,115,105,122,101,40,102,99,98,41,32,61,61,32,50,0,0,0,0,0,0,45,117,112,112,101,114,102,0,65,100,100,101,100,32,37,100,32,115,105,108,101,110,99,101,32,119,111,114,100,32,116,114,97,110,115,105,116,105,111,110,115,10,0,0,0,0,0,0,109,0,0,0,0,0,0,0,39,37,115,39,58,32,48,45,108,101,110,103,116,104,32,115,117,98,118,101,99,116,111,114,10,0,0,0,0,0,0,0,86,97,114,105,97,110,99,101,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,108,105,118,101,32,109,111,100,101,32,100,101,99,111,100,101,10,0,0,0,0,0,67,77,78,58,32,0,0,0,65,71,67,69,77,97,120,58,32,109,97,120,61,32,37,46,50,102,10,0,0,0,0,0,112,32,60,32,109,45,62,110,95,112,104,111,110,101,0,0,45,105,110,112,117,116,95,101,110,100,105,97,110,0,0,0,107,119,115,0,0,0,0,0,45,115,101,110,100,117,109,112,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,110,117,109,98,101,114,32,111,102,32,102,101,97,116,117,114,101,32,115,116,114,101,97,109,115,10,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,114,97,109,101,32,114,97,116,101,0,0,0,0,0,0,102,101,97,116,95,115,116,114,101,97,109,95,108,101,110,40,102,99,98,44,32,48,41,32,61,61,32,102,101,97,116,95,99,101,112,115,105,122,101,40,102,99,98,41,32,42,32,50,0,0,0,0,0,0,0,0,80,111,115,116,101,114,105,111,114,32,112,114,111,98,97,98,105,108,105,116,105,101,115,32,97,114,101,32,110,111,116,32,114,101,116,117,114,110,101,100,32,102,114,111,109,32,112,104,111,110,101,32,108,111,111,112,32,115,101,97,114,99,104,0,78,111,110,45,101,109,112,116,121,32,98,101,121,111,110,100,32,110,111,110,45,101,109,105,116,116,105,110,103,32,102,105,110,97,108,32,115,116,97,116,101,58,32,37,115,10,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,49,48,48,0,0,0,0,0,102,101,97,116,95,119,105,110,100,111,119,95,115,105,122,101,40,102,99,98,41,32,61,61,32,48,0,0,0,0,0,0,74,111,105,110,116,32,80,40,79,44,83,41,32,61,32,37,100,32,80,40,83,124,79,41,32,61,32,37,100,10,0,0,83,101,103,73,116,101,109,0,77,105,115,115,105,110,103,32,110,111,110,45,101,109,105,116,116,105,110,103,32,115,116,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([116,101,32,115,112,101,99,58,32,37,115,10,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,102,101,97,116,95,110,95,115,116,114,101,97,109,40,102,99,98,41,32,61,61,32,49,0,45,108,111,119,101,114,102,0,76,97,110,103,117,97,103,101,32,109,111,100,101,108,47,115,101,116,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,60,47,115,62,44,32,114,101,99,111,103,110,105,116,105,111,110,32,119,105,108,108,32,102,97,105,108,10,0,0,0,0,0,0,0,0,110,103,114,97,109,0,0,0,110,95,101,109,105,116,95,115,116,97,116,101,32,62,32,48,0,0,0,0,0,0,0,0,46,115,51,99,111,110,116,46,0,0,0,0,0,0,0,0,83,97,109,112,108,105,110,103,32,114,97,116,101,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,83,101,110,111,110,101,45,105,100,40,37,100,41,32,62,32,35,115,101,110,111,110,101,115,40,37,100,41,58,32,37,115,10,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,49,54,48,48,48,0,0,0,37,115,32,37,115,32,37,115,32,37,99,0,0,0,0,0,78,111,114,109,97,108,105,122,101,114,32,80,40,79,41,32,61,32,97,108,112,104,97,40,37,115,58,37,100,58,37,100,41,32,61,32,37,100,10,0,67,73,45,115,101,110,111,110,101,45,105,100,40,37,100,41,32,62,32,35,67,73,45,115,101,110,111,110,101,115,40,37,100,41,58,32,37,115,10,0,40,119,112,111,115,32,62,61,32,48,41,32,38,38,32,40,119,112,111,115,32,60,32,78,95,87,79,82,68,95,80,79,83,78,41,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,45,110,102,105,108,116,0,0,108,105,110,107,45,62,112,97,116,104,95,115,99,114,32,33,61,32,77,65,88,95,78,69,71,95,73,78,84,51,50,0,77,105,115,115,105,110,103,32,111,114,32,98,97,100,32,115,116,97,116,101,91,37,100,93,45,62,115,101,110,111,110,101,32,109,97,112,112,105,110,103,58,32,37,115,10,0,0,0,40,114,99,32,62,61,32,48,41,32,38,38,32,40,114,99,32,60,32,109,45,62,110,95,99,105,112,104,111,110,101,41,0,0,0,0,0,0,0,0,80,114,101,101,109,112,104,97,115,105,115,32,112,97,114,97,109,101,116,101,114,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,116,109,97,116,45,105,100,40,37,100,41,32,62,32,35,116,109,97,116,32,105,110,32,104,101,97,100,101,114,40,37,100,41,58,32,37,115,10,0,0,82,101,97,100,105,110,103,32,98,105,110,97,114,121,32,109,111,100,101,108,32,100,101,102,105,110,105,116,105,111,110,58,32,37,115,10,0,0,0,0,40,108,99,32,62,61,32,48,41,32,38,38,32,40,108,99,32,60,32,109,45,62,110,95,99,105,112,104,111,110,101,41,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,102,115,103,95,115,101,97,114,99,104,46,99,0,0,0,48,46,57,55,0,0,0,0,37,45,50,48,115,32,37,45,53,100,32,37,45,53,100,32,37,45,49,46,51,102,32,37,45,49,48,100,32,37,45,49,48,100,32,37,45,51,100,10,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,111,114,32,98,97,100,32,116,114,97,110,115,105,116,105,111,110,32,109,97,116,114,105,120,32,105,100,58,32,37,115,10,0,0,0,0,0,0,0,0,40,99,105,32,62,61,32,48,41,32,38,38,32,40,99,105,32,60,32,109,45,62,110,95,99,105,112,104,111,110,101,41,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,108,98,97,99,107,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,112,105,111,46,99,0,37,115,40,37,108,100,41,58,32,37,115,0,0,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,70,44,32,108,105,110,101,32,37,100,10,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,110,103,114,97,109,95,109,111,100,101,108,46,99,0,0,0,87,105,108,108,32,112,114,101,112,101,110,100,32,39,37,115,39,32,116,111,32,117,110,113,117,97,108,105,102,105,101,100,32,112,97,116,104,115,10,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,10,0,0,0,0,0,87,104,105,99,104,32,116,121,112,101,32,111,102,32,116,114,97,110,115,102,111,114,109,32,116,111,32,117,115,101,32,116,111,32,99,97,108,99,117,108,97,116,101,32,99,101,112,115,116,114,97,32,40,108,101,103,97,99,121,44,32,100,99,116,44,32,111,114,32,104,116,107,41,0,0,0,0,0,0,0,37,56,100,32,61,32,35,112,114,111,98,50,32,101,110,116,114,105,101,115,10,0,0,0,60,37,115,46,103,37,48,53,100,62,0,0,0,0,0,0,65,100,100,105,110,103,32,115,105,108,101,110,99,101,32,116,114,97,110,115,105,116,105,111,110,115,32,102,111,114,32,37,115,32,116,111,32,70,83,71,10,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,32,102,114,111,109,32,116,114,97,110,115,102,111,114,109,32,102,105,108,101,32,39,37,115,39,10,0,108,115,99,114,0,0,0,0,42,115,116,114,112,32,61,61,32,39,47,39,0,0,0,0,99,109,110,95,112,114,105,111,114,95,117,112,100,97,116,101,58,32,116,111,32,32,32,60,32,0,0,0,0,0,0,0,109,102,99,32,33,61,32,78,85,76,76,0,0,0,0,0,65,71,67,77,97,120,58,32,111,98,115,61,109,97,120,61,32,37,46,50,102,10,0,0,98,101,115,116,112,97,116,104,32,37,46,50,102,32,119,97,108,108,32,37,46,51,102,32,120,82,84,10,0,0,0,0,37,115,91,37,48,52,117,93,58,32,37,54,46,51,102,32,0,0,0,0,0,0,0,0,102,101,95,119,97,114,112,32,109,111,100,117,108,101,32,109,117,115,116,32,98,101,32,99,111,110,102,105,103,117,114,101,100,32,119,47,32,97,32,118,97,108,105,100,32,73,68,10,0,0,0,0,0,0,0,0,66,97,100,32,102,105,108,108,101,114,32,97,116,116,114,105,98,117,116,101,32,102,105,101,108,100,58,32,37,115,10,0,108,105,116,116,108,101,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,116,114,97,110,115,105,116,105,111,110,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,68,105,109,101,110,115,105,111,110,32,111,102,32,115,116,114,101,97,109,32,37,100,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,58,32,37,100,32,33,61,32,37,100,10,0,0,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,99,111,100,101,98,111,111,107,115,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,110,117,109,98,101,114,32,111,102,32,99,105,112,104,111,110,101,115,44,32,100,111,101,115,110,39,116,32,108,111,111,107,32,108,105,107,101,32,80,84,77,58,32,37,100,32,33,61,32,37,100,10,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,110,117,109,98,101,114,32,111,102,32,77,76,76,82,32,99,108,97,115,115,101,115,10,0,0,99,105,32,60,32,109,45,62,110,95,99,105,112,104,111,110,101,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,102,115,103,95,108,101,120,116,114,101,101,46,99,0,0,97,115,99,114,0,0,0,0,72,121,112,111,116,104,101,115,101,115,32,97,114,101,32,110,111,116,32,114,101,116,117,114,110,101,100,32,102,114,111,109,32,112,104,111,110,101,32,108,111,111,112,32,115,101,97,114,99,104,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,84,79,84,65,76,32,102,119,100,102,108,97,116,32,37,46,50,102,32,119,97,108,108,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,0,98,101,115,116,112,97,116,104,32,37,46,50,102,32,67,80,85,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,110,47,97,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,102,115,103,95,104,105,115,116,111,114,121,46,99,0,0,109,32,33,61,32,78,85,76,76,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,37,100,32,98,121,116,101,115,32,102,114,111,109,32,115,101,110,100,117,109,112,10,0,0,0,112,112,114,111,98,0,0,0,67,111,110,102,105,103,73,116,101,109,0,0,0,0,0,0,102,105,108,108,101,114,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,87,114,105,116,101,32,111,117,116,32,99,101,112,115,116,114,97,108,45,115,109,111,111,116,104,101,100,32,108,111,103,115,112,101,99,116,114,97,108,32,102,105,108,101,115,0,0,0,85,115,105,110,103,32,109,101,109,111,114,121,45,109,97,112,112,101,100,32,73,47,79,32,102,111,114,32,115,101,110,111,110,101,115,10,0,0,0,0,110,111,114,109,32,33,61,32,48,120,55,102,102,102,102,102,102,102,0,0,0,0,0,0,60,47,115,62,0,0,0,0,101,110,100,0,0,0,0,0,45,97,115,99,97,108,101,0,77,105,115,115,105,110,103,32,102,105,108,108,101,114,32,97,116,116,114,105,98,117,116,101,32,102,105,101,108,100,58,32,37,115,10,0,0,0,0,0,77,97,112,112,105,110,103,32,115,101,110,111,110,101,115,32,116,111,32,99,111,110,116,101,120,116,45,105,110,100,101,112,101,110,100,101,110,116,32,112,104,111,110,101,32,99,111,100,101,98,111,111,107,115,10,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,100,105,99,116,50,112,105,100,46,99,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,67,108,117,115,116,101,114,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,52,32,111,114,32,56,10,0,0,0,115,116,97,114,116,0,0,0,45,98,101,115,116,112,97,116,104,108,119,0,0,0,0,0,66,97,100,32,119,111,114,100,45,112,111,115,105,116,105,111,110,32,115,112,101,99,58,32,37,115,10,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,87,114,105,116,101,32,111,117,116,32,108,111,103,115,112,101,99,116,114,97,108,32,102,105,108,101,115,32,105,110,115,116,101,97,100,32,111,102,32,99,101,112,115,116,114,97,0,0,66,97,100,32,111,114,32,109,105,115,115,105,110,103,32,110,103,114,97,109,32,99,111,117,110,116,10,0,0,0,0,0,67,108,117,115,116,101,114,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,48,44,32,49,53,44,32,111,114,32,49,54,10,0,0,0,0,0,119,111,114,100,0,0,0,0,77,105,115,115,105,110,103,32,111,114,32,98,97,100,32,119,111,114,100,45,112,111,115,105,116,105,111,110,32,115,112,101,99,58,32,37,115,10,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,92,49,45,103,114,97,109,115,58,32,109,97,114,107,0,0,0,78,117,109,98,101,114,32,111,102,32,115,101,110,111,110,101,115,32,109,105,115,109,97,116,99,104,58,32,37,100,32,33,61,32,37,100,10,0,0,0,37,45,50,48,115,32,37,45,53,115,32,37,45,53,115,32,37,45,53,115,32,37,45,49,48,115,32,37,45,49,48,115,32,37,45,51,115,10,0,0,45,102,119,100,102,108,97,116,108,119,0,0,0,0,0,0,65,108,108,111,99,97,116,105,110,103,32,37,100,94,51,32,42,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,119,111,114,100,45,105,110,105,116,105,97,108,32,116,114,105,112,104,111,110,101,115,10,0,85,110,107,110,111,119,110,32,114,105,103,104,116,32,32,99,111,110,116,101,120,116,58,32,37,115,10,0,0,0,0,0,77,105,115,115,105,110,103,32,98,97,115,101,32,119,111,114,100,32,102,111,114,58,32,37,115,10,0,0,0,0,0,0,80,77,0,0,0,0,0,0,105,100,32,62,61,32,48,0,92,49,45,103,114,97,109,115,58,0,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,100,101,110,115,105,116,105,101,115,32,109,105,115,109,97,116,99,104,58,32,37,100,32,33,61,32,37,100,10,0,37,115,58,32,37,115,32,40,37,100,41,10,0,0,0,0,45,102,105,108,108,112,114,111,98,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,114,105,103,104,116,32,99,111,110,116,101,120,116,58,32,37,115,10,0,0,0,0,0,0,65,108,108,111,99,97,116,105,110,103,32,37,100,32,42,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,67,68,32,116,114,101,101,10,0,0,65,77,0,0,0,0,0,0,45,99,109,110,105,110,105,116,0,0,0,0,0,0,0,0,69,79,70,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,110,103,114,97,109,32,99,111,117,110,116,115,10,0,78,117,109,98,101,114,32,111,102,32,102,101,97,116,117,114,101,32,115,116,114,101,97,109,115,32,109,105,115,109,97,116,99,104,58,32,37,100,32,33,61,32,37,100,10,0,0,0,45,98,97,99,107,116,114,97,99,101,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,98,108,107,97,114,114,97,121,95,108,105,115,116,46,99,0,0,0,0,0,0,0,0,45,115,105,108,112,114,111,98,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,108,101,102,116,32,99,111,110,116,101,120,116,58,32,37,115,10,0,0,0,0,0,0,0,115,104,111,114,116,0,0,0,80,97,114,115,101,100,32,109,111,100,101,108,45,115,112,101,99,105,102,105,99,32,102,101,97,116,117,114,101,32,112,97,114,97,109,101,116,101,114,115,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,110,103,114,97,109,32,40,37,100,41,10,0,0,0,0,0,82,111,119,115,58,32,37,100,44,32,67,111,108,117,109,110,115,58,32,37,100,10,0,0,70,97,105,108,101,100,32,116,111,32,112,114,111,99,101,115,115,32,100,97,116,97,44,32,117,116,116,101,114,97,110,99,101,32,105,115,32,110,111,116,32,115,116,97,114,116,101,100,46,32,85,115,101,32,115,116,97,114,116,95,117,116,116,32,116,111,32,115,116,97,114,116,32,105,116,10,0,0,0,0,98,117,110,122,105,112,50,0,70,97,105,108,101,100,32,116,111,32,117,110,109,97,112,32,37,108,100,32,98,121,116,101,115,32,97,116,32,37,112,0,77,105,115,115,105,110,103,32,108,101,102,116,32,99,111,110,116,101,120,116,58,32,37,115,10,0,0,0,0,0,0,0,70,65,84,65,76,0,0,0,37,115,32,37,115,10,0,0,82,101,97,100,105,110,103,32,76,77,32,99,111,110,116,114,111,108,32,102,105,108,101,32,39,37,115,39,10,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,87,114,111,110,103,32,109,97,103,105,99,32,104,101,97,100,101,114,32,115,105,122,101,32,110,117,109,98,101,114,32,37,120,58,32,37,115,32,105,115,32,110,111,116,32,97,32,100,117,109,112,32,102,105,108,101,10,0,0,0,0,0,0,0,45,97,103,99,116,104,114,101,115,104,0,0,0,0,0,0,37,56,100,32,61,32,35,98,105,103,114,97,109,115,32,99,114,101,97,116,101,100,10,0,110,103,114,97,109,32,37,100,61,37,100,0,0,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,35,99,111,108,117,109,110,115,0,0,0,0,37,100,32,110,117,108,108,32,116,114,97,110,115,105,116,105,111,110,115,32,97,100,100,101,100,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,115,101,110,111,110,101,32,115,99,111,114,101,32,108,111,103,32,102,105,108,101,32,37,115,0,39,37,115,39,58,32,66,97,100,32,100,101,108,105,109,105,116,101,114,32,64,112,111,115,32,37,100,10,0,0,0,0,99,109,110,95,112,114,105,111,114,95,117,112,100,97,116,101,58,32,102,114,111,109,32,60,32,0,0,0,0,0,0,0,109,101,97,110,91,48,93,61,32,37,46,50,102,44,32,109,101,97,110,91,49,46,46,37,100,93,61,32,48,46,48,10,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,71,67,32,116,121,112,101,32,39,37,115,39,10,0,0,45,110,119,112,101,110,0,0,87,97,114,112,32,102,97,99,116,111,114,32,37,103,32,114,101,115,117,108,116,115,32,105,110,32,102,114,101,113,117,101,110,99,121,32,40,37,46,49,102,41,32,104,105,103,104,101,114,32,116,104,97,110,32,78,121,113,117,105,115,116,32,40,37,46,49,102,41,10,0,0,102,101,95,119,97,114,112,32,109,111,100,117,108,101,32,109,105,115,99,111,110,102,105,103,117,114,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,102,101,95,119,97,114,112,95,105,100,32,37,117,10,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,98,97,115,101,32,112,104,111,110,101,58,32,37,115,10,0,45,115,101,101,100,0,0,0,84,104,101,32,119,111,114,100,32,39,37,115,39,32,105,115,32,109,105,115,115,105,110,103,32,105,110,32,116,104,101,32,100,105,99,116,105,111,110,97,114,121,10,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,115,116,114,101,97,109,115,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,58,32,37,100,32,33,61,32,37,100,10,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,99,111,100,101,98,111,111,107,115,32,101,120,99,101,101,100,115,32,50,53,54,58,32,37,100,10,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,85,115,105,110,103,32,115,117,98,118,101,99,116,111,114,32,115,112,101,99,105,102,105,99,97,116,105,111,110,32,37,115,10,0,0,0,0,0,0,0,78,111,32,92,100,97,116,97,92,32,109,97,114,107,32,105,110,32,76,77,32,102,105,108,101,10,0,0,0,0,0,0,42,105,110,111,117,116,95,110,115,97,109,112,115,32,62,61,32,40,115,105,122,101,95,116,41,102,101,45,62,102,114,97,109,101,95,115,104,105,102,116,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,35,114,111,119,115,0,0,0,0,0,0,0,87,114,105,116,105,110,103,32,115,101,110,111,110,101,32,115,99,111,114,101,32,108,111,103,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,45,107,119,115,0,0,0,0,112,104,111,110,101,95,108,111,111,112,0,0,0,0,0,0,84,79,84,65,76,32,102,119,100,102,108,97,116,32,37,46,50,102,32,67,80,85,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,98,97,115,101,32,112,104,111,110,101,32,110,97,109,101,58,32,37,115,10,0,0,0,0,45,115,118,115,112,101,99,0,60,115,62,0,0,0,0,0,92,100,97,116,97,92,0,0,89,111,117,32,97,114,101,32,117,115,105,110,103,32,37,100,32,97,115,32,116,104,101,32,115,101,101,100,46,10,0,0,99,108,117,115,116,101,114,95,98,105,116,115,32,0,0,0,46,115,101,110,0,0,0,0,87,111,114,100,0,0,0,0,45,109,97,120,104,109,109,112,102,0,0,0,0,0,0,0,45,108,100,97,100,105,109,0,110,95,104,105,115,116,32,61,61,32,48,0,0,0,0,0,108,109,95,116,46,117,99,111,117,110,116,40,37,100,41,32,33,61,32,35,117,110,105,103,114,97,109,115,32,114,101,97,100,40,37,100,41,10,0,0,89,111,117,32,97,114,101,32,117,115,105,110,103,32,116,104,101,32,105,110,116,101,114,110,97,108,32,109,101,99,104,97,110,105,115,109,32,116,111,32,103,101,110,101,114,97,116,101,32,116,104,101,32,115,101,101,100,46,10,0,0,0,0,0,99,108,117,115,116,101,114,95,99,111,117,110,116,32,0,0,45,108,97,116,115,105,122,101,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,114,97,119,32,97,117,100,105,111,32,108,111,103,32,102,105,108,101,32,37,115,0,0,0,0,45,109,97,120,119,112,102,0,106,32,61,61,32,110,95,115,115,101,113,0,0,0,0,0,77,97,112,112,105,110,103,32,97,108,108,32,115,101,110,111,110,101,115,32,116,111,32,111,110,101,32,99,111,100,101,98,111,111,107,10,0,0,0,0,82,101,97,100,105,110,103,32,108,105,110,101,97,114,32,102,101,97,116,117,114,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,102,114,111,109,32,37,115,10,0,0,84,114,105,103,114,97,109,32,37,100,32,104,97,115,32,110,111,32,118,97,108,105,100,32,117,110,105,103,114,97,109,32,112,97,114,101,110,116,10,0,45,118,101,114,98,111,115,101,0,0,0,0,0,0,0,0,109,111,100,101,108,95,99,111,117,110,116,32,0,0,0,0,87,114,105,116,105,110,103,32,114,97,119,32,97,117,100,105,111,32,108,111,103,32,102,105,108,101,58,32,37,115,10,0,45,102,119,100,102,108,97,116,119,98,101,97,109,0,0,0,36,40,0,0,0,0,0,0,105,98,101,115,117,0,0,0,84,114,105,103,114,97,109,32,37,100,32,104,97,115,32,110,111,32,118,97,108,105,100,32,98,105,103,114,97,109,32,112,97,114,101,110,116,10,0,0,84,111,111,32,109,97,110,121,32,117,110,105,103,114,97,109,115,10,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,70,70,84,32,112,111,105,110,116,115,32,104,97,115,32,116,111,32,98,101,32,97,32,112,111,119,101,114,32,111,102,32,50,32,104,105,103,104,101,114,32,116,104,97,110,32,37,100,10,0,0,0,0,0,109,105,120,116,117,114,101,95,99,111,117,110,116,32,0,0,46,114,97,119,0,0,0,0,45,102,119,100,102,108,97,116,98,101,97,109,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,98,105,110,95,109,100,101,102,46,99,0,0,0,0,0,45,97,103,99,0,0,0,0,85,110,112,97,114,115,101,100,32,98,111,111,108,101,97,110,32,118,97,108,117,101,32,39,37,115,39,10,0,0,0,0,66,105,103,114,97,109,32,37,100,32,104,97,115,32,110,111,32,118,97,108,105,100,32,117,110,105,103,114,97,109,32,112,97,114,101,110,116,10,0,0,70,111,114,109,97,116,32,101,114,114,111,114,59,32,117,110,105,103,114,97,109,32,105,103,110,111,114,101,100,58,32,37,115,10,0,0,0,0,0,0,102,101,45,62,102,114,97,109,101,95,115,104,105,102,116,32,62,32,49,0,0,0,0,0,102,101,97,116,117,114,101,95,99,111,117,110,116,32,0,0,104,45,62,102,114,97,109,101,95,101,110,116,114,105,101,115,91,115,93,91,108,99,93,32,61,61,32,78,85,76,76,0,45,108,112,111,110,108,121,98,101,97,109,0,0,0,0,0,82,101,97,108,108,111,99,97,116,105,110,103,32,116,111,32,37,100,32,75,105,66,32,102,111,114,32,119,111,114,100,32,101,110,116,114,105,101,115,10,0,0,0,0,0,0,0,0,98,108,45,62,112,116,114,91,98,108,45,62,99,117,114,95,114,111,119,93,32,61,61,32,78,85,76,76,0,0,0,0,45,118,97,114,110,111,114,109,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,108,109,51,103,95,116,101,109,112,108,97,116,101,115,46,99,0,0,0,0,0,0,0,0,92,50,45,103,114,97,109,115,58,0,0,0,0,0,0,0,87,105,108,108,32,37,115,117,115,101,32,100,111,117,98,108,101,32,98,97,110,100,119,105,100,116,104,32,105,110,32,109,101,108,32,102,105,108,116,101,114,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,32,115,116,114,105,110,103,32,115,105,122,101,32,102,114,111,109,32,37,115,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,77,70,67,67,32,108,111,103,32,102,105,108,101,32,37,115,0,45,108,112,98,101,97,109,0,35,67,73,45,115,101,110,111,110,101,115,40,37,100,41,32,33,61,32,35,67,73,45,112,104,111,110,101,40,37,100,41,32,120,32,35,101,109,105,116,116,105,110,103,45,115,116,97,116,101,115,40,37,100,41,10,0,0,0,0,0,0,0,0,80,104,111,110,101,32,110,97,109,101,115,32,97,114,101,32,110,111,116,32,105,110,32,115,111,114,116,101,100,32,111,114,100,101,114,44,32,115,111,114,114,121,46,0,0,0,0,0,102,115,103,0,0,0,0,0,45,99,109,110,0,0,0,0,85,110,107,110,111,119,110,32,97,114,103,117,109,101,110,116,32,116,121,112,101,58,32,37,100,10,0,0,0,0,0,0,82,101,97,100,105,110,103,32,117,110,105,103,114,97,109,115,10,0,0,0,0,0,0,0,114,117,108,101,95,97,116,111,109,0,0,0,0,0,0,0,87,105,108,108,32,37,115,114,111,117,110,100,32,102,105,108,116,101,114,32,102,114,101,113,117,101,110,99,105,101,115,32,116,111,32,68,70,84,32,112,111,105,110,116,115,10,0,0,66,97,100,32,104,101,97,100,101,114,32,105,110,32,100,117,109,112,32,102,105,108,101,10,0,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,45,112,98,101,97,109,0,0,78,111,110,45,101,109,112,116,121,32,102,105,108,101,32,98,101,121,111,110,100,32,101,120,112,101,99,116,101,100,32,35,112,104,111,110,101,115,32,40,37,100,41,10,0,0,0,0,45,109,108,108,114,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,110,111,0,0,0,0,0,0,66,97,100,32,98,105,103,114,97,109,58,32,37,115,10,0,114,117,108,101,95,111,112,116,105,111,110,97,108,0,0,0,87,105,108,108,32,37,115,110,111,114,109,97,108,105,122,101,32,102,105,108,116,101,114,115,32,116,111,32,117,110,105,116,32,97,114,101,97,10,0,0,67,97,110,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,0,0,0,0,0,0,87,114,105,116,105,110,103,32,77,70,67,67,32,108,111,103,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,32,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,109,109,97,112,32,37,108,108,100,32,98,121,116,101,115,0,0,0,0,0,0,0,45,119,98,101,97,109,0,0,69,82,82,79,82,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,70,32,114,101,97,100,105,110,103,32,112,104,111,110,101,32,37,100,10,0,60,115,105,108,62,0,0,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,10,0,0,0,0,0,0,68,117,109,112,32,102,105,108,101,32,105,115,32,99,111,109,112,114,101,115,115,101,100,44,32,119,105,108,108,32,110,111,116,32,117,115,101,32,109,101,109,111,114,121,45,109,97,112,112,101,100,32,73,47,79,10,0,0,0,0,0,0,0,0,70,97,108,108,105,110,103,32,98,97,99,107,32,116,111,32,103,101,110,101,114,97,108,32,109,117,108,116,105,45,115,116,114,101,97,109,32,71,77,77,32,99,111,109,112,117,116,97,116,105,111,110,10,0,0,0,37,56,100,32,61,32,35,117,110,105,103,114,97,109,115,32,99,114,101,97,116,101,100,10,0,0,0,0,0,0,0,0,121,101,115,0,0,0,0,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,0,0,0,0,0,0,0,92,51,45,103,114,97,109,115,58,0,0,0,0,0,0,0,114,117,108,101,95,103,114,111,117,112,0,0,0,0,0,0,87,105,108,108,32,97,112,112,108,121,32,115,105,110,101,45,99,117,114,118,101,32,108,105,102,116,101,114,105,110,103,44,32,112,101,114,105,111,100,32,37,100,10,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,32,115,105,122,101,32,102,114,111,109,32,37,115,0,0,0,0,0,0,116,108,49,45,62,119,105,100,32,60,32,48,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,116,114,97,110,115,102,111,114,109,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,46,109,102,99,0,0,0,0,39,37,115,39,58,32,68,117,112,108,105,99,97,116,101,32,100,105,109,101,110,115,105,111,110,32,101,110,100,105,110,103,32,64,112,111,115,32,37,100,10,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,67,77,78,32,116,121,112,101,32,39,37,115,39,10,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,97,116,47,97,103,99,46,99,0,80,105,101,99,101,119,105,115,101,32,108,105,110,101,97,114,32,119,97,114,112,105,110,103,32,99,97,110,110,111,116,32,104,97,118,101,32,115,108,111,112,101,32,122,101,114,111,44,32,119,97,114,112,105,110,103,32,110,111,116,32,97,112,112,108,105,101,100,46,10,0,0,73,110,118,101,114,115,101,32,108,105,110,101,97,114,32,119,97,114,112,105,110,103,32,99,97,110,110,111,116,32,104,97,118,101,32,115,108,111,112,101,32,122,101,114,111,44,32,119,97,114,112,105,110,103,32,110,111,116,32,97,112,112,108,105,101,100,46,10,0,0,0,0,82,101,97,100,32,37,100,45,62,37,100,32,115,101,110,111,110,101,45,99,111,100,101,98,111,111,107,32,109,97,112,112,105,110,103,115,10,0,0,0,102,101,97,116,32,109,111,100,117,108,101,32,109,117,115,116,32,98,101,32,99,111,110,102,105,103,117,114,101,100,32,119,47,32,97,32,118,97,108,105,100,32,73,68,10,0,0,0,65,102,102,105,110,101,32,119,97,114,112,105,110,103,32,99,97,110,110,111,116,32,104,97,118,101,32,115,108,111,112,101,32,122,101,114,111,44,32,119,97,114,112,105,110,103,32,110,111,116,32,97,112,112,108,105,101,100,46,10,0,0,0,0,83,73,76,0,0,0,0,0,45,100,105,116,104,101,114,0,75,87,83,40,98,101,97,109,58,32,37,100,44,32,112,108,112,58,32,37,100,44,32,100,101,102,97,117,108,116,32,116,104,114,101,115,104,111,108,100,32,37,100,41,10,0,0,0,65,100,100,101,100,32,37,100,32,97,108,116,101,114,110,97,116,101,32,119,111,114,100,32,116,114,97,110,115,105,116,105,111,110,115,10,0,0,0,0,82,101,97,100,105,110,103,32,72,77,77,32,116,114,97,110,115,105,116,105,111,110,32,112,114,111,98,97,98,105,108,105,116,121,32,109,97,116,114,105,99,101,115,58,32,37,115,10,0,0,0,0,0,0,0,0,45,118,97,114,102,108,111,111,114,0,0,0,0,0,0,0,82,101,97,100,105,110,103,32,77,76,76,82,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,102,105,108,101,32,39,37,115,39,10,0,0,65,116,116,101,109,112,116,105,110,103,32,116,111,32,117,115,101,32,80,84,72,77,77,32,99,111,109,112,117,116,97,116,105,111,110,32,109,111,100,117,108,101,10,0,0,0,0,0,37,115,44,0,0,0,0,0,66,105,103,114,97,109,32,37,115,32,37,115,32,110,111,116,32,105,110,32,117,110,105,103,114,97,109,32,111,114,100,101,114,32,119,111,114,100,32,105,100,58,32,37,100,32,112,114,101,118,32,119,111,114,100,32,105,100,58,32,37,100,10,0,114,117,108,101,95,105,116,101,109,0,0,0,0,0,0,0,87,105,108,108,32,110,111,116,32,97,100,100,32,100,105,116,104,101,114,32,116,111,32,97,117,100,105,111,10,0,0,0,45,106,115,103,102,0,0,0,83,116,97,116,101,32,98,101,97,109,32,37,100,32,80,104,111,110,101,32,101,120,105,116,32,98,101,97,109,32,37,100,32,73,110,115,101,114,116,105,111,110,32,112,101,110,97,108,116,121,32,37,100,10,0,0,98,112,32,33,61,32,78,79,95,66,80,0,0,0,0,0,77,111,114,101,32,100,97,116,97,32,116,104,97,110,32,101,120,112,101,99,116,101,100,32,105,110,32,37,115,58,32,37,100,10,0,0,0,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,70,32,114,101,97,100,105,110,103,32,67,73,112,104,111,110,101,32,37,100,10,0,0,0,0,0,0,0,80,65,78,73,67,33,32,70,114,97,109,101,32,37,100,58,32,35,72,77,77,32,101,118,97,108,117,97,116,101,100,40,37,100,41,32,62,32,35,80,78,111,100,101,115,40,37,100,41,10,0,0,0,0,0,0,65,116,116,101,109,112,116,105,110,103,32,116,111,32,117,115,101,32,83,67,72,77,77,32,99,111,109,112,117,116,97,116,105,111,110,32,109,111,100,117,108,101,10,0,0,0,0,0,37,101,0,0,0,0,0,0,77,105,115,115,105,110,103,32,37,115,32,109,97,114,107,101,114,10,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,98,105,103,114,97,109,115,10,0,0,0,0,0,0,0,116,97,103,103,101,100,95,114,117,108,101,95,105,116,101,109,0,0,0,0,0,0,0,0,68,105,116,104,101,114,32,115,101,101,100,101,100,32,119,105,116,104,32,37,100,10,0,0,66,97,100,32,116,105,116,108,101,32,105,110,32,100,117,109,112,32,102,105,108,101,10,0,37,48,57,117,0,0,0,0,82,85,78,84,73,77,69,95,69,82,82,79,82,0,0,0,101,102,32,60,32,100,97,103,45,62,110,95,102,114,97,109,101,115,0,0,0,0,0,0,77,97,112,112,105,110,103,32,37,100,32,115,101,110,111,110,101,115,32,116,111,32,37,100,32,99,111,100,101,98,111,111,107,115,10,0,0,0,0,0,84,79,84,65,76,32,102,119,100,116,114,101,101,32,37,46,50,102,32,119,97,108,108,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,0,72,101,97,100,101,114,32,101,114,114,111,114,58,32,110,95,115,116,97,116,101,95,109,97,112,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,110,95,99,105,42,110,95,116,114,105,10,0,65,108,108,111,99,97,116,101,100,32,37,100,32,75,105,66,32,102,111,114,32,115,116,114,105,110,103,115,44,32,37,100,32,75,105,66,32,102,111,114,32,112,104,111,110,101,115,10,0,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,85,115,105,110,103,32,103,101,110,101,114,97,108,32,109,117,108,116,105,45,115,116,114,101,97,109,32,71,77,77,32,99,111,109,112,117,116,97,116,105,111,110,10,0,0,0,0,0,37,108,100,0,0,0,0,0,42,101,110,100,95,99,111,109,109,101,110,116,42,10,0,0,85,110,107,110,111,119,110,32,119,111,114,100,58,32,37,115,44,32,115,107,105,112,112,105,110,103,32,98,105,103,114,97,109,32,40,37,115,32,37,115,41,10,0,0,0,0,0,0,114,117,108,101,95,101,120,112,97,110,115,105,111,110,0,0,87,105,108,108,32,97,100,100,32,100,105,116,104,101,114,32,116,111,32,97,117,100,105,111,10,0,0,0,0,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,116,105,116,108,101,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,110,103,114,97,109,95,115,101,97,114,99,104,46,99,0,78,111,32,115,101,97,114,99,104,32,109,111,100,117,108,101,32,105,115,32,115,101,108,101,99,116,101,100,44,32,100,105,100,32,121,111,117,32,102,111,114,103,101,116,32,116,111,32,115,112,101,99,105,102,121,32,97,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,32,111,114,32,103,114,97,109,109,97,114,63,10,0,0,0,67,111,117,108,100,110,39,116,32,102,105,110,100,32,60,115,62,32,105,110,32,102,105,114,115,116,32,102,114,97,109,101,10,0,0,0,0,0,0,0,98,105,111,95,102,114,101,97,100,95,49,100,40,37,115,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,37,115,58,32,35,116,109,97,116,115,32,40,37,100,41,32,101,120,99,101,101,100,115,32,108,105,109,105,116,32,40,37,100,41,10,0,0,0,0,0,104,109,109,95,102,114,97,109,101,40,104,109,109,41,32,61,61,32,102,115,103,115,45,62,102,114,97,109,101,0,0,0,46,99,111,110,116,46,0,0,76,105,110,101,32,37,100,58,32,70,97,105,108,101,100,32,116,111,32,97,100,100,32,116,104,101,32,119,111,114,100,32,39,37,115,39,32,40,100,117,112,108,105,99,97,116,101,63,41,59,32,105,103,110,111,114,101,100,10,0,0,0,0,0,66,97,100,32,66,89,84,69,79,82,68,69,82,32,77,65,71,73,67,32,78,79,58,32,37,48,56,120,44,32,101,120,112,101,99,116,105,110,103,32,37,48,56,120,10,0,0,0,82,101,97,100,105,110,103,32,98,105,103,114,97,109,115,10,0,0,0,0,0,0,0,0,97,108,116,101,114,110,97,116,101,95,108,105,115,116,0,0,110,111,116,32,0,0,0,0,84,105,116,108,101,32,108,101,110,103,116,104,32,37,120,32,105,110,32,100,117,109,112,32,102,105,108,101,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,10,0,0,0,85,110,107,110,111,119,110,32,112,104,111,110,101,32,37,115,32,105,110,32,112,104,111,110,101,32,115,116,114,105,110,103,32,37,115,10,0,0,0,0,114,109,49,95,50,48,48,0,70,97,105,108,101,100,32,116,111,32,102,105,110,100,32,68,65,71,32,110,111,100,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,37,115,10,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,35,103,97,117,100,101,110,41,32,102,97,105,108,101,100,10,0,0,0,0,0,32,37,100,120,37,100,10,0,37,115,58,32,35,115,101,110,111,110,101,115,32,40,37,100,41,32,101,120,99,101,101,100,115,32,108,105,109,105,116,32,40,37,100,41,10,0,0,0,70,114,97,109,101,32,37,100,58,32,78,111,32,97,99,116,105,118,101,32,72,77,77,33,33,10,0,0,0,0,0,0,76,105,110,101,32,37,100,58,32,80,104,111,110,101,32,39,37,115,39,32,105,115,32,109,105,115,105,110,103,32,105,110,32,116,104,101,32,97,99,111,117,115,116,105,99,32,109,111,100,101,108,59,32,119,111,114,100,32,39,37,115,39,32,105,103,110,111,114,101,100,10,0,78,111,32,109,101,97,110,47,118,97,114,47,116,109,97,116,32,102,105,108,101,115,32,115,112,101,99,105,102,105,101,100,10,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,9,91,86,65,76,85,69,93,10,0,0,0,0,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,66,89,84,69,79,82,68,69,82,32,77,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([71,73,67,32,78,79,46,10,0,0,0,0,0,0,0,0,40,112,105,100,32,62,61,32,48,41,32,38,38,32,40,112,105,100,32,60,32,109,45,62,110,95,112,104,111,110,101,41,0,0,0,0,0,0,0,0,66,97,100,32,116,114,105,103,114,97,109,58,32,37,115,10,0,0,0,0,0,0,0,0,114,117,108,101,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,105,116,108,101,32,115,105,122,101,32,102,114,111,109,32,37,115,0,0,0,0,0,0,0,45,102,100,105,99,116,0,0,60,47,115,62,32,110,111,116,32,102,111,117,110,100,32,105,110,32,108,97,115,116,32,102,114,97,109,101,44,32,117,115,105,110,103,32,37,115,46,37,100,32,105,110,115,116,101,97,100,10,0,0,0,0,0,0,82,101,97,100,105,110,103,32,110,117,109,98,101,114,32,111,102,32,99,111,100,101,98,111,111,107,115,32,102,114,111,109,32,37,115,10,0,0,0,0,37,100,32,99,111,100,101,98,111,111,107,44,32,37,100,32,102,101,97,116,117,114,101,44,32,115,105,122,101,58,32,10,0,0,0,0,0,0,0,0,37,115,58,32,35,80,104,111,110,101,115,32,40,37,100,41,32,101,120,99,101,101,100,115,32,108,105,109,105,116,32,40,37,100,41,10,0,0,0,0,76,105,110,101,32,37,100,58,32,78,111,32,112,114,111,110,117,110,99,105,97,116,105,111,110,32,102,111,114,32,119,111,114,100,32,39,37,115,39,59,32,105,103,110,111,114,101,100,10,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,9,91,68,69,83,67,82,93,10,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,101,108,101,109,115,105,122,101,32,102,111,114,32,98,121,116,101,115,119,97,112,112,105,110,103,58,32,37,100,10,0,0,0,0,0,0,92,101,110,100,92,0,0,0,114,117,108,101,95,108,105,115,116,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,100,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,108,101,120,116,114,101,101,32,108,101,97,102,110,111,100,101,115,10,0,0,0,0,0,0,87,105,108,108,32,37,115,114,101,109,111,118,101,32,68,67,32,111,102,102,115,101,116,32,97,116,32,102,114,97,109,101,32,108,101,118,101,108,10,0,76,111,97,100,105,110,103,32,115,101,110,111,110,101,115,32,102,114,111,109,32,100,117,109,112,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,104,45,62,102,114,97,109,101,95,101,110,116,114,105,101,115,0,0,0,0,0,0,0,0,78,111,32,119,111,114,100,32,101,120,105,116,115,32,102,111,117,110,100,32,105,110,32,108,97,115,116,32,102,114,97,109,101,32,40,37,100,41,44,32,97,115,115,117,109,105,110,103,32,110,111,32,114,101,99,111,103,110,105,116,105,111,110,10,0,0,0,0,0,0,0,0,37,115,58,32,66,97,100,32,118,101,114,115,105,111,110,32,110,111,46,32,115,116,114,105,110,103,58,32,37,115,10,0,37,115,58,32,35,67,73,32,112,104,111,110,101,115,32,40,37,100,41,32,101,120,99,101,101,100,115,32,108,105,109,105,116,32,40,37,100,41,10,0,119,105,100,32,62,61,32,48,0,0,0,0,0,0,0,0,110,119,100,32,62,32,109,97,120,119,100,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,66,108,111,99,107,32,97,114,114,97,121,32,40,37,100,120,37,100,41,32,101,120,104,97,117,115,116,101,100,10,0,0,9,91,68,69,70,76,84,93,0,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,101,108,101,109,115,105,122,101,32,102,111,114,32,99,104,101,99,107,115,117,109,58,32,37,100,10,0,0,46,0,0,0,0,0,0,0,105,109,112,111,114,116,95,115,116,97,116,101,109,101,110,116,0,0,0,0,0,0,0,0,66,97,100,32,102,101,97,116,117,114,101,32,116,121,112,101,32,97,114,103,117,109,101,110,116,10,0,0,0,0,0,0,9,83,116,97,114,116,32,85,116,116,32,83,116,97,116,117,115,58,32,32,32,32,32,32,32,32,32,32,37,100,10,0,78,111,32,112,117,98,108,105,99,32,114,117,108,101,115,32,102,111,117,110,100,32,105,110,32,37,115,10,0,0,0,0,112,114,111,99,101,115,115,0,69,109,112,116,121,32,98,97,99,107,112,111,105,110,116,101,114,32,116,97,98,108,101,58,32,99,97,110,32,110,111,116,32,98,117,105,108,100,32,68,65,71,46,10,0,0,0,0,37,102,0,0,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,100,101,110,115,105,116,121,100,97,116,97,41,32,102,97,105,108,101,100,10,0,37,115,58,32,69,114,114,111,114,32,105,110,32,104,101,97,100,101,114,10,0,0,0,0,78,117,109,98,101,114,32,111,102,32,112,104,111,110,101,115,32,101,120,99,101,101,100,115,32,108,105,109,105,116,58,32,37,100,32,62,32,37,100,10,0,0,0,0,0,0,0,0,102,108,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,45,116,109,97,116,102,108,111,111,114,0,0,0,0,0,0,83,105,122,101,32,111,102,32,116,114,105,103,114,97,109,32,115,101,103,109,101,110,116,32,105,115,32,98,105,103,103,101,114,32,116,104,97,110,32,54,53,53,51,53,44,32,115,117,99,104,32,97,32,98,105,103,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,117,115,101,32,115,109,97,108,108,101,114,32,118,111,99,97,98,117,108,97,114,121,10,0,0,0,0,0,105,109,112,111,114,116,95,104,101,97,100,101,114,0,0,0,37,117,0,0,0,0,0,0,9,78,117,109,98,101,114,32,111,102,32,79,118,101,114,102,108,111,119,32,83,97,109,112,115,58,32,32,37,100,10,0,82,101,97,100,32,37,100,32,120,32,37,100,32,120,32,37,100,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,10,0,0,0,0,0,0,83,116,97,114,116,32,114,117,108,101,32,37,115,32,110,111,116,32,102,111,117,110,100,10,0,0,0,0,0,0,0,0,115,116,111,112,0,0,0,0,76,97,116,116,105,99,101,32,104,97,115,32,37,100,32,110,111,100,101,115,44,32,37,100,32,108,105,110,107,115,10,0,49,46,50,0,0,0,0,0,37,115,58,32,35,109,102,99,99,95,116,115,40,37,100,41,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,100,105,109,101,110,115,105,111,110,115,58,32,37,100,32,120,32,37,100,32,120,32,37,100,10,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,104,101,97,100,101,114,32,108,105,110,101,58,32,37,115,10,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,78,111,32,116,109,97,116,32,102,105,108,101,32,115,112,101,99,105,102,105,101,100,10,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,45,102,101,97,116,0,0,0,91,78,65,77,69,93,0,0,77,105,115,115,105,110,103,32,98,105,103,114,97,109,32,102,111,114,32,116,114,105,103,114,97,109,58,32,37,115,0,0,103,114,97,109,109,97,114,95,104,101,97,100,101,114,0,0,9,78,117,109,98,101,114,32,111,102,32,102,105,108,116,101,114,115,58,32,32,32,32,32,32,32,32,32,37,100,10,0,77,111,114,101,32,100,97,116,97,32,116,104,97,110,32,101,120,112,101,99,116,101,100,32,105,110,32,37,115,10,0,0,62,0,0,0,0,0,0,0,103,101,116,67,111,117,110,116,0,0,0,0,0,0,0,0,122,99,97,116,0,0,0,0,70,97,105,108,101,100,32,116,111,32,115,116,97,116,32,37,115,0,0,0,0,0,0,0,69,110,100,32,110,111,100,101,32,111,102,32,108,97,116,116,105,99,101,32,105,115,111,108,97,116,101,100,59,32,117,110,114,101,97,99,104,97,98,108,101,10,0,0,0,0,0,0,118,111,105,100,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,109,97,112,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,116,111,116,97,108,32,35,102,108,111,97,116,115,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,87,65,82,78,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,100,116,111,97,46,99,0,0,0,0,0,0,0,0,110,95,116,105,101,100,95,116,109,97,116,0,0,0,0,0,112,110,111,100,101,0,0,0,115,101,110,109,103,97,117,0,45,99,101,112,108,101,110,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,98,105,111,46,99,0,102,101,97,116,46,112,97,114,97,109,115,0,0,0,0,0,115,101,116,0,0,0,0,0,102,101,97,116,117,114,101,95,116,114,97,110,115,102,111,114,109,0,0,0,0,0,0,0,103,101,116,0,0,0,0,0,68,117,109,112,32,102,105,108,101,32,37,115,32,110,111,116,32,102,111,117,110,100,10,0,110,111,105,115,101,100,105,99,116,0,0,0,0,0,0,0,115,105,122,101,0,0,0,0,85,110,107,110,111,119,110,32,97,114,103,117,109,101,110,116,58,32,37,115,10,0,0,0,37,56,100,32,61,32,97,115,99,105,105,32,119,111,114,100,32,115,116,114,105,110,103,115,32,114,101,97,100,10,0,0,84,114,105,103,114,97,109,115,32,110,111,116,32,105,110,32,98,105,103,114,97,109,32,111,114,100,101,114,10,0,0,0,106,115,103,102,95,104,101,97,100,101,114,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,70,83,71,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,0,0,0,0,60,78,85,76,76,62,0,0,115,101,110,100,117,109,112,0,49,115,95,52,99,0,0,0,112,117,115,104,95,98,97,99,107,0,0,0,0,0,0,0,9,85,112,112,101,114,32,70,114,101,113,117,101,110,99,121,58,32,32,32,32,32,32,32,32,32,32,32,37,103,10,0,87,101,105,103,104,116,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,102,97,105,108,101,100,32,102,111,114,32,37,100,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,99,111,109,112,111,110,101,110,116,115,10,0,0,67,111,109,112,117,116,105,110,103,32,116,114,97,110,115,105,116,105,118,101,32,99,108,111,115,117,114,101,32,102,111,114,32,110,117,108,108,32,116,114,97,110,115,105,116,105,111,110,115,10,0,0,0,0,0,0,109,105,120,116,117,114,101,95,119,101,105,103,104,116,115,0,60,0,0,0,0,0,0,0,39,37,115,39,58,32,66,97,100,32,115,117,98,114,97,110,103,101,32,115,112,101,99,32,101,110,100,105,110,103,32,64,112,111,115,32,37,100,10,0,116,114,97,110,115,105,116,105,111,110,95,109,97,116,114,105,99,101,115,0,0,0,0,0,62,10,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,97,116,47,99,109,110,46,99,0,103,101,116,72,121,112,115,101,103,0,0,0,0,0,0,0,110,111,105,115,101,0,0,0,33,102,114,111,109,45,62,114,101,97,99,104,97,98,108,101,0,0,0,0,0,0,0,0,80,105,101,99,101,119,105,115,101,32,108,105,110,101,97,114,32,119,97,114,112,105,110,103,32,116,97,107,101,115,32,117,112,32,116,111,32,116,119,111,32,97,114,103,117,109,101,110,116,115,44,32,37,115,32,105,103,110,111,114,101,100,46,10,0,0,0,0,0,0,0,0,118,97,114,105,97,110,99,101,115,0,0,0,0,0,0,0,73,110,118,101,114,115,101,32,108,105,110,101,97,114,32,119,97,114,112,105,110,103,32,116,97,107,101,115,32,111,110,108,121,32,111,110,101,32,97,114,103,117,109,101,110,116,44,32,37,115,32,105,103,110,111,114,101,100,46,10,0,0,0,0,82,101,97,100,105,110,103,32,115,101,110,111,110,101,32,103,97,117,100,101,110,45,99,111,100,101,98,111,111,107,32,109,97,112,32,102,105,108,101,58,32,37,115,10,0,0,0,0,9,37,115,10,0,0,0,0,65,102,102,105,110,101,32,119,97,114,112,105,110,103,32,116,97,107,101,115,32,117,112,32,116,111,32,116,119,111,32,97,114,103,117,109,101,110,116,115,44,32,37,115,32,105,103,110,111,114,101,100,46,10,0,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,102,105,108,116,101,114,98,97,110,107,44,32,102,114,101,113,117,101,110,99,121,32,114,97,110,103,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,46,32,83,97,109,112,108,101,32,114,97,116,101,32,37,102,44,32,70,70,84,32,115,105,122,101,32,37,100,44,32,108,111,119,101,114,102,32,37,102,32,60,32,102,114,101,113,32,37,102,32,62,32,117,112,112,101,114,102,32,37,102,46,10,0,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,102,101,97,116,117,114,101,45,108,101,110,103,116,104,115,41,32,102,97,105,108,101,100,10,0,0,0,0,0,109,101,97,110,115,0,0,0,80,114,105,110,116,32,119,111,114,100,32,116,105,109,101,115,32,105,110,32,102,105,108,101,32,116,114,97,110,115,99,114,105,112,116,105,111,110,46,0,110,95,116,105,101,100,95,115,116,97,116,101,0,0,0,0,70,114,97,109,101,32,114,97,116,101,32,37,100,32,99,97,110,32,110,111,116,32,98,101,32,98,105,103,103,101,114,32,116,104,97,110,32,115,97,109,112,108,101,32,114,97,116,101,32,37,46,48,50,102,10,0,109,100,101,102,0,0,0,0,45,107,119,115,95,116,104,114,101,115,104,111,108,100,0,0,45,116,105,109,101,0,0,0,104,109,109,95,102,114,97,109,101,40,104,109,109,41,32,61,61,32,102,115,103,115,45,62,102,114,97,109,101,32,43,32,49,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,116,109,97,116,46,99,0,45,118,97,114,0,0,0,0,65,117,100,105,111,32,102,105,108,101,32,116,111,32,116,114,97,110,115,99,114,105,98,101,46,0,0,0,0,0,0,0,45,105,110,102,105,108,101,0,37,100,32,67,73,45,112,104,111,110,101,44,32,37,100,32,67,68,45,112,104,111,110,101,44,32,37,100,32,101,109,105,116,115,116,97,116,101,47,112,104,111,110,101,44,32,37,100,32,67,73,45,115,101,110,44,32,37,100,32,83,101,110,44,32,37,100,32,83,101,110,45,83,101,113,10,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,78,97,109,101,32,111,102,32,97,117,100,105,111,32,100,101,118,105,99,101,32,116,111,32,117,115,101,32,102,111,114,32,105,110,112,117,116,46,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,97,99,111,117,115,116,105,99,32,109,111,100,101,108,32,100,101,102,105,110,105,116,105,111,110,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,0,45,97,100,99,100,101,118,0,65,114,103,117,109,101,110,116,115,32,108,105,115,116,32,100,101,102,105,110,105,116,105,111,110,58,10,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,119,111,114,100,32,105,110,32,100,105,99,116,105,111,110,97,114,121,58,32,37,115,10,0,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,116,114,105,103,114,97,109,115,10,0,0,0,0,0,0,104,101,97,100,101,114,0,0,49,115,95,51,99,0,0,0,65,114,103,117,109,101,110,116,32,102,105,108,101,32,103,105,118,105,110,103,32,101,120,116,114,97,32,97,114,103,117,109,101,110,116,115,46,0,0,0,9,76,111,119,101,114,32,70,114,101,113,117,101,110,99,121,58,32,32,32,32,32,32,32,32,32,32,32,37,103,10,0,98,105,111,95,102,114,101,97,100,40,37,115,41,32,40,97,114,114,97,121,100,97,116,97,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,45,116,111,112,114,117,108,101,0,0,0,0,0,0,0,0,37,100,32,114,111,111,116,44,32,37,100,32,110,111,110,45,114,111,111,116,32,99,104,97,110,110,101,108,115,44,32,37,100,32,115,105,110,103,108,101,45,112,104,111,110,101,32,119,111,114,100,115,10,0,0,0,45,97,114,103,102,105,108,101,0,0,0,0,0,0,0,0,45,102,115,103,0,0,0,0,45,112,105,112,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,102,119,100,102,108,97,116,58,32,109,105,110,95,101,102,95,119,105,100,116,104,32,61,32,37,100,44,32,109,97,120,95,115,102,95,119,105,110,32,61,32,37,100,10,0,0,0,0,68,105,114,101,99,116,111,114,121,32,116,111,32,108,111,103,32,115,101,110,111,110,101,32,115,99,111,114,101,32,102,105,108,101,115,32,116,111,0,0,103,101,116,72,121,112,0,0,69,108,105,109,105,110,97,116,101,100,32,37,100,32,110,111,100,101,115,32,98,101,102,111,114,101,32,101,110,100,32,110,111,100,101,10,0,0,0,0,82,101,97,100,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,102,111,114,32,37,100,32,115,101,110,111,110,101,115,58,32,37,100,32,102,101,97,116,117,114,101,115,32,120,32,37,100,32,99,111,100,101,119,111,114,100,115,10,0,0,0,0,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,35,100,101,110,115,105,116,121,47,99,111,100,101,98,111,111,107,41,32,102,97,105,108,101,100,10,0,0,0,68,105,114,101,99,116,111,114,121,32,116,111,32,108,111,103,32,114,97,119,32,97,117,100,105,111,32,102,105,108,101,115,32,116,111,0,0,0,0,0,110,95,116,105,101,100,95,99,105,95,115,116,97,116,101,0,102,115,103,115,45,62,102,114,97,109,101,32,61,61,32,102,115,103,95,104,105,115,116,95,101,110,116,114,121,95,102,114,97,109,101,40,104,105,115,116,95,101,110,116,114,121,41,0,68,105,114,101,99,116,111,114,121,32,116,111,32,108,111,103,32,102,101,97,116,117,114,101,32,102,105,108,101,115,32,116,111,0,0,0,0,0,0,0,40,119,32,62,61,32,48,41,32,38,38,32,40,119,32,60,32,100,45,62,110,95,119,111,114,100,41,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,115,116,114,102,117,110,99,115,46,99,0,0,0,0,86,101,114,98,111,115,105,116,121,32,108,101,118,101,108,32,102,111,114,32,100,101,98,117,103,103,105,110,103,32,109,101,115,115,97,103,101,115,0,0,70,111,108,100,101,114,32,39,37,115,39,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,97,99,111,117,115,116,105,99,32,109,111,100,101,108,32,100,101,102,105,110,105,116,105,111,110,32,39,109,100,101,102,39,10,0,0,85,110,99,108,111,115,101,100,32,113,117,111,116,97,116,105,111,110,44,32,104,97,118,105,110,103,32,69,79,70,32,99,108,111,115,101,32,105,116,46,46,46,10,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,119,111,114,100,32,115,116,114,105,110,103,115,32,40,37,100,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,110,95,117,110,105,103,114,97,109,115,32,37,100,41,10,0,0,0,0,85,110,107,110,111,119,110,32,119,111,114,100,58,32,37,115,44,32,115,107,105,112,112,105,110,103,32,116,114,105,103,114,97,109,32,40,37,115,32,37,115,32,37,115,41,10,0,0,103,114,97,109,109,97,114,0,82,105,103,104,116,32,114,101,99,117,114,115,105,111,110,32,37,115,32,37,100,32,61,62,32,37,100,10,0,0,0,0,70,83,71,58,32,37,100,32,115,116,97,116,101,115,44,32,37,100,32,117,110,105,113,117,101,32,119,111,114,100,115,44,32,37,100,32,116,114,97,110,115,105,116,105,111,110,115,32,40,37,100,32,110,117,108,108,41,10,0,0,0,0,0,0,49,115,95,99,0,0,0,0,70,105,108,101,32,116,111,32,119,114,105,116,101,32,108,111,103,32,109,101,115,115,97,103,101,115,32,105,110,0,0,0,9,70,70,84,32,83,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,100,10,0,37,115,58,32,35,102,108,111,97,116,51,50,115,40,37,100,41,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,104,101,97,100,101,114,32,100,105,109,101,110,115,105,111,110,115,58,32,37,100,32,120,32,37,100,32,120,32,37,100,10,0,0,0,0,0,0,0,0,70,105,108,108,101,114,32,119,111,114,100,32,37,100,32,61,32,37,115,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,112,104,111,110,101,44,32,105,103,110,111,114,105,110,103,32,105,116,46,10,0,0,0,0,0,0,84,104,114,101,115,104,111,108,100,32,102,111,114,32,112,40,104,121,112,41,47,112,40,97,108,116,101,114,110,97,116,105,118,101,115,41,32,114,97,116,105,111,0,0,0,0,0,0,115,119,105,116,99,104,83,101,97,114,99,104,0,0,0,0,66,65,68,95,65,82,71,85,77,69,78,84,0,0,0,0,108,97,116,116,105,99,101,32,115,116,97,114,116,32,110,111,100,101,32,37,115,46,37,100,32,101,110,100,32,110,111,100,101,32,37,115,46,37,100,10,0,0,0,0,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,35,102,101,97,116,117,114,101,115,41,32,102,97,105,108,101,100,10,0,0,0,80,104,111,110,101,32,108,111,111,112,32,112,114,111,98,97,98,105,108,105,116,121,32,102,111,114,32,107,101,121,119,111,114,100,32,115,112,111,116,116,105,110,103,0,0,0,0,0,84,79,84,65,76,32,102,119,100,116,114,101,101,32,37,46,50,102,32,67,80,85,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,0,0,110,95,115,116,97,116,101,95,109,97,112,0,0,0,0,0,49,101,45,49,0,0,0,0,114,0,0,0,0,0,0,0,104,105,115,116,95,101,110,116,114,121,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,37,115,0,0,0,0,0,0,0,75,101,121,112,104,114,97,115,101,32,116,111,32,115,112,111,116,0,0,0,0,0,0,0,67,68,32,112,104,111,110,101,32,37,100,32,104,97,115,32,102,101,119,101,114,32,115,116,97,116,101,115,32,116,104,97,110,32,67,73,32,112,104,111,110,101,32,37,100,10,0,0,65,99,111,117,115,116,105,99,32,109,111,100,101,108,32,100,101,102,105,110,105,116,105,111,110,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,32,101,105,116,104,101,114,32,119,105,116,104,32,45,109,100,101,102,32,111,112,116,105,111,110,32,111,114,32,119,105,116,104,32,45,104,109,109,10,0,0,0,0,0,0,0,73,110,115,101,114,116,32,102,105,108,108,101,114,32,119,111,114,100,115,32,97,116,32,101,97,99,104,32,115,116,97,116,101,46,0,0,0,0,0,0,78,101,115,116,105,110,103,32,113,117,111,116,97,116,105,111,110,115,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,33,10,0,0,0,76,77,67,76,65,83,83,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,119,111,114,100,115,10,0,0,0,82,101,97,100,105,110,103,32,116,114,105,103,114,97,109,115,10,0,0,0,0,0,0,0,36,97,99,99,101,112,116,0,79,110,108,121,32,114,105,103,104,116,45,114,101,99,117,114,115,105,111,110,32,105,115,32,112,101,114,109,105,116,116,101,100,32,40,105,110,32,37,115,46,37,115,41,10,0,0,0,76,105,110,101,91,37,100,93,58,32,116,114,97,110,115,105,116,105,111,110,32,115,112,101,99,32,109,97,108,102,111,114,109,101,100,59,32,69,120,112,101,99,116,105,110,103,32,102,108,111,97,116,32,97,115,32,116,114,97,110,115,105,116,105,111,110,32,112,114,111,98,97,98,105,108,105,116,121,10,0,99,101,112,0,0,0,0,0,9,70,114,97,109,101,32,83,104,105,102,116,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,100,10,0,35,70,101,97,116,117,114,101,115,32,115,116,114,101,97,109,115,40,37,100,41,32,33,61,32,37,100,10,0,0,0,0,45,102,119,100,116,114,101,101,0,0,0,0,0,0,0,0,37,100,32,117,110,105,113,117,101,32,105,110,105,116,105,97,108,32,100,105,112,104,111,110,101,115,10,0,0,0,0,0,65,100,100,32,97,108,116,101,114,110,97,116,101,32,112,114,111,110,117,110,99,105,97,116,105,111,110,115,32,116,111,32,70,83,71,0,0,0,0,0,115,119,105,116,99,104,71,114,97,109,109,97,114,0,0,0,45,109,105,110,95,101,110,100,102,114,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,108,111,103,109,97,116,104,46,99,0,0,0,0,0,83,116,97,114,116,32,114,117,108,101,32,102,111,114,32,74,83,71,70,32,40,102,105,114,115,116,32,112,117,98,108,105,99,32,114,117,108,101,32,105,115,32,100,101,102,97,117,108,116,41,0,0,0,0,0,0,102,114,101,97,100,40,37,115,41,32,40,35,99,111,100,101,98,111,111,107,115,41,32,102,97,105,108,101,100,10,0,0,110,95,116,114,105,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,108,105,115,116,101,108,101,109,95,97,108,108,111,99,46,99,0,0,0,0,0,0,74,83,71,70,32,103,114,97,109,109,97,114,32,102,105,108,101,0,0,0,0,0,0,0,70,105,110,97,108,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,116,104,101,32,103,114,97,109,109,97,114,32,105,110,32,102,114,97,109,101,32,37,100,10,0,0,0,0,65,108,108,111,99,97,116,101,100,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,108,101,102,116,32,97,110,100,32,114,105,103,104,116,32,99,111,110,116,101,120,116,32,112,104,111,110,101,115,10,0,0,46,112,116,109,46,0,0,0,100,0,0,0,0,0,0,0,83,112,104,105,110,120,32,102,111,114,109,97,116,32,102,105,110,105,116,101,32,115,116,97,116,101,32,103,114,97,109,109,97,114,32,102,105,108,101,0,83,101,110,111,110,101,32,37,100,32,105,115,32,115,104,97,114,101,100,32,98,101,116,119,101,101,110,32,109,117,108,116,105,112,108,101,32,98,97,115,101,32,112,104,111,110,101,115,10,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,87,104,101,116,104,101,114,32,116,111,32,100,117,109,112,32,116,104,101,32,108,101,120,116,114,101,101,32,115,116,114,117,99,116,117,114,101,32,116,111,32,115,116,100,101,114,114,32,40,102,111,114,32,100,101,98,117,103,103,105,110,103,41,44,32,49,32,102,111,114,32,82,97,118,105,39,115,32,102,111,114,109,97,116,44,32,50,32,102,111,114,32,68,111,116,32,102,111,114,109,97,116,44,32,76,97,114,103,101,114,32,116,104,97,110,32,50,32,119,105,108,108,32,98,101,32,116,114,101,97,116,101,100,32,97,115,32,82,97,118,105,39,115,32,102,111,114,109,97,116,0,0,46,66,90,50,0,0,0,0,67,97,110,110,111,116,32,111,112,101,110,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,32,37,115,32,102,111,114,32,114,101,97,100,105,110,103,10,0,0,69,78,68,0,0,0,0,0,37,56,100,32,61,32,76,77,46,116,115,101,103,95,98,97,115,101,32,101,110,116,114,105,101,115,32,114,101,97,100,10,0,0,0,0,0,0,0,0,39,43,39,0,0,0,0,0,85,110,100,101,102,105,110,101,100,32,114,117,108,101,32,105,110,32,82,72,83,58,32,37,115,10,0,0,0,0,0,0,76,105,110,101,91,37,100,93,58,32,116,114,97,110,115,105,116,105,111,110,32,115,112,101,99,32,109,97,108,102,111,114,109,101,100,59,32,69,120,112,101,99,116,105,110,103,58,32,102,114,111,109,45,115,116,97,116,101,32,116,111,45,115,116,97,116,101,32,116,114,97,110,115,45,112,114,111,98,32,91,119,111,114,100,93,10,0,0,49,115,95,99,95,100,0,0,45,108,101,120,116,114,101,101,100,117,109,112,0,0,0,0,9,70,114,97,109,101,32,83,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,100,10,0,98,105,111,95,102,114,101,97,100,40,37,115,41,32,40,97,114,114,97,121,115,105,122,101,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,104,97,115,104,95,116,97,98,108,101,46,99,0,0,97,102,116,101,114,58,32,37,100,32,114,111,111,116,44,32,37,100,32,110,111,110,45,114,111,111,116,32,99,104,97,110,110,101,108,115,44,32,37,100,32,115,105,110,103,108,101,45,112,104,111,110,101,32,119,111,114,100,115,10,0,0,0,0,66,105,103,114,97,109,45,109,111,100,101,58,32,73,102,32,84,82,85,69,32,111,110,108,121,32,111,110,101,32,66,80,32,101,110,116,114,121,47,102,114,97,109,101,59,32,101,108,115,101,32,111,110,101,32,112,101,114,32,76,77,32,115,116,97,116,101,0,0,0,0,0,45,98,103,104,105,115,116,0,97,100,100,75,101,121,119,111,114,100,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,103,108,105,115,116,46,99,0,0,0,0,0,0,0,70,105,108,108,101,114,32,119,111,114,100,32,116,114,97,110,115,105,116,105,111,110,32,112,114,111,98,97,98,105,108,105,116,121,0,0,0,0,0,0,37,112,0,0,0,0,0,0,49,101,45,56,0,0,0,0,110,95,98,97,115,101,0,0,115,105,108,99,105,112,105,100,32,62,61,32,48,0,0,0,68,69,66,85,71,0,0,0,83,105,108,101,110,99,101,32,119,111,114,100,32,116,114,97,110,115,105,116,105,111,110,32,112,114,111,98,97,98,105,108,105,116,121,0,0,0,0,0,110,102,0,0,0,0,0,0,87,111,114,100,32,39,37,115,39,32,109,117,115,116,32,111,99,99,117,114,32,40,111,110,108,121,41,32,105,110,32,102,105,108,108,101,114,32,100,105,99,116,105,111,110,97,114,121,10,0,0,0,0,0,0,0,48,46,48,48,53,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,37,100,32,98,121,116,101,115,32,111,102,32,100,97,116,97,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,85,110,105,103,114,97,109,32,119,101,105,103,104,116,0,0,46,71,90,0,0,0,0,0,70,105,108,101,32,37,115,32,110,111,116,32,102,111,117,110,100,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,114,105,103,114,97,109,32,105,110,100,101,120,10,0,0,0,40,105,100,32,62,61,32,48,41,32,38,38,32,40,105,100,32,60,32,109,45,62,110,95,99,105,112,104,111,110,101,41,0,0,0,0,0,0,0,0,39,42,39,0,0,0,0,0,60,86,79,73,68,62,0,0,84,82,65,78,83,73,84,73,79,78,0,0,0,0,0,0,99,101,112,95,100,99,101,112,0,0,0,0,0,0,0,0,9,83,97,109,112,108,105,110,103,32,82,97,116,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,102,10,0,100,101,99,111,100,101,0,0,78,111,32,119,111,114,100,32,102,114,111,109,32,116,104,101,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,32,104,97,115,32,112,114,111,110,117,110,99,105,97,116,105,111,110,32,105,110,32,116,104,101,32,100,105,99,116,105,111,110,97,114,121,10,0,0,0,0,80,104,111,110,101,32,105,110,115,101,114,116,105,111,110,32,112,101,110,97,108,116,121,0,97,100,100,71,114,97,109,109,97,114,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,101,109,105,116,116,105,110,103,32,115,116,97,116,101,115,32,109,117,115,116,32,98,101,32,60,61,32,37,100,10,0,0,0,0,0,0,0,0,78,101,119,32,119,111,114,100,32,116,114,97,110,115,105,116,105,111,110,32,112,101,110,97,108,116,121,0,0,0,0,0,84,114,97,110,115,112,111,115,105,110,103,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,105,110,32,109,101,109,111,114,121,10,0,0,69,114,114,111,114,32,105,110,32,104,101,97,100,101,114,58,32,37,115,10,0,0,0,0,83,116,97,114,116,32,110,111,100,101,32,37,115,46,37,100,58,37,100,58,37,100,10,0,104,109,109,95,110,111,110,109,112,120,95,115,115,105,100,40,38,112,110,111,100,101,45,62,104,109,109,41,32,61,61,32,115,115,105,100,0,0,0,0,99,97,108,108,111,99,40,37,100,44,37,100,41,32,102,97,105,108,101,100,32,102,114,111,109,32,37,115,40,37,100,41,10,0,0,0,0,0,0,0,87,111,114,100,32,105,110,115,101,114,116,105,111,110,32,112,101,110,97,108,116,121,0,0,48,46,54,53,0,0,0,0,45,109,109,97,112,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,109,100,101,102,32,105,115,32,111,116,104,101,114,45,101,110,100,105,97,110,46,32,32,87,105,108,108,32,110,111,116,32,109,101,109,111,114,121,45,109,97,112,46,10,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,98,105,116,118,101,99,46,99,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,37,100,32,118,97,108,117,101,115,32,116,111,32,108,111,103,32,102,105,108,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,73,110,118,101,114,115,101,32,111,102,32,97,99,111,117,115,116,105,99,32,109,111,100,101,108,32,115,99,97,108,101,32,102,111,114,32,99,111,110,102,105,100,101,110,99,101,32,115,99,111,114,101,32,99,97,108,99,117,108,97,116,105,111,110,0,0,0,0,0,0,0,0,46,122,0,0,0,0,0,0,37,56,100,32,61,32,76,77,46,112,114,111,98,51,32,101,110,116,114,105,101,115,32,114,101,97,100,10,0,0,0,0,39,93,39,0,0,0,0,0,108,97,115,116,110,111,100,101,32,62,61,32,48,0,0,0,84,0,0,0,0,0,0,0,49,115,95,99,95,100,95,108,100,95,100,100,0,0,0,0,50,48,46,48,0,0,0,0,67,117,114,114,101,110,116,32,70,69,32,80,97,114,97,109,101,116,101,114,115,58,10,0,65,108,108,111,99,97,116,101,100,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,97,108,108,32,108,101,120,116,114,101,101,32,110,111,100,101,115,10,0,0,0,0,0,0,78,111,32,100,101,102,97,117,108,116,32,76,77,32,110,97,109,101,32,40,45,108,109,110,97,109,101,41,32,102,111,114,32,96,45,108,109,99,116,108,39,10,0,0,0,0,0,0,97,102,116,101,114,58,32,109,97,120,32,110,111,110,114,111,111,116,32,99,104,97,110,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,100,10,0,0,0,0,0,0,0,0,98,108,107,97,114,114,97,121,95,108,105,115,116,95,110,95,118,97,108,105,100,40,104,45,62,101,110,116,114,105,101,115,41,32,61,61,32,48,0,0,76,97,110,103,117,97,103,101,32,109,111,100,101,108,32,112,114,111,98,97,98,105,108,105,116,121,32,119,101,105,103,104,116,32,102,111,114,32,98,101,115,116,112,97,116,104,32,115,101,97,114,99,104,0,0,0,97,100,100,87,111,114,100,115,0,0,0,0,0,0,0,0,98,101,102,111,114,101,58,32,37,100,32,114,111,111,116,44,32,37,100,32,110,111,110,45,114,111,111,116,32,99,104,97,110,110,101,108,115,44,32,37,100,32,115,105,110,103,108,101,45,112,104,111,110,101,32,119,111,114,100,115,10,0,0,0,115,51,10,0,0,0,0,0,57,46,53,0,0,0,0,0,78,111,116,32,116,114,97,110,115,112,111,115,105,110,103,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,105,110,32,109,101,109,111,114,121,10,0,0,0,0,0,0,66,117,105,108,100,105,110,103,32,80,73,68,32,116,97,98,108,101,115,32,102,111,114,32,100,105,99,116,105,111,110,97,114,121,10,0,0,0,0,0,37,100,32,37,115,0,0,0,76,97,110,103,117,97,103,101,32,109,111,100,101,108,32,112,114,111,98,97,98,105,108,105,116,121,32,119,101,105,103,104,116,32,102,111,114,32,102,108,97,116,32,108,101,120,105,99,111,110,32,40,50,110,100,32,112,97,115,115,41,32,100,101,99,111,100,105,110,103,0,0,106,32,60,32,110,95,99,105,0,0,0,0,0,0,0,0,56,46,53,0,0,0,0,0,98,108,0,0,0,0,0,0,76,97,110,103,117,97,103,101,32,109,111,100,101,108,32,112,114,111,98,97,98,105,108,105,116,121,32,119,101,105,103,104,116,0,0,0,0,0,0,0,54,46,53,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,112,97,114,115,101,32,97,114,103,117,109,101,110,116,115,32,108,105,115,116,10,0,78,117,109,98,101,114,32,111,102,32,99,108,97,115,115,101,115,32,99,97,110,110,111,116,32,101,120,99,101,101,100,32,49,50,56,32,40,115,111,114,114,121,41,10,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,114,105,103,114,97,109,32,112,114,111,98,97,98,105,108,105,116,121,10,0,0,0,0,0,39,91,39,0,0,0,0,0,60,37,115,46,37,115,0,0,70,83,71,95,69,78,68,0,49,115,95,99,95,100,95,100,100,0,0,0,0,0,0,0,45,115,109,111,111,116,104,115,112,101,99,0,0,0,0,0,45,108,109,110,97,109,101,0,87,104,105,99,104,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,32,105,110,32,45,108,109,99,116,108,32,116,111,32,117,115,101,32,98,121,32,100,101,102,97,117,108,116,0,0,0,0,0,0,0,0,114,101,73,110,105,116,0,0,67,114,101,97,116,105,110,103,32,115,101,97,114,99,104,32,116,114,101,101,10,0,0,0,84,114,117,110,99,97,116,105,110,103,32,115,101,110,111,110,101,32,108,111,103,115,51,40,112,100,102,41,32,118,97,108,117,101,115,32,98,121,32,37,100,32,98,105,116,115,10,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,110,103,114,97,109,95,109,111,100,101,108,95,115,101,116,46,99,0,0,0,0,0,0,0,83,112,101,99,105,102,121,32,97,32,115,101,116,32,111,102,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,10,0,0,0,0,0,0,0,0,73,110,99,111,109,112,108,101,116,101,32,104,101,97,100,101,114,10,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,115,101,110,111,110,101,32,115,101,113,117,101,110,99,101,115,32,101,120,99,101,101,100,115,32,108,105,109,105,116,58,32,37,100,32,62,32,37,100,10,0,0,0,0,0,0,69,110,100,32,110,111,100,101,32,37,115,46,37,100,58,37,100,58,37,100,32,40,37,100,41,10,0,0,0,0,0,0,103,108,105,115,116,45,62,99,105,32,61,61,32,99,105,32,38,38,32,103,108,105,115,116,45,62,114,99,32,61,61,32,114,99,0,0,0,0,0,0,87,111,114,100,32,116,114,105,103,114,97,109,32,108,97,110,103,117,97,103,101,32,109,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([100,101,108,32,105,110,112,117,116,32,102,105,108,101,0,0,38,109,45,62,115,105,108,0,85,115,101,32,119,105,116,104,105,110,45,119,111,114,100,32,112,104,111,110,101,115,32,111,110,108,121,0,0,0,0,0,58,32,0,0,0,0,0,0,45,117,115,101,119,100,112,104,111,110,101,115,0,0,0,0,67,117,114,114,101,110,116,32,99,111,110,102,105,103,117,114,97,116,105,111,110,58,10,0,67,104,101,99,107,115,117,109,32,101,114,114,111,114,59,32,102,105,108,101,45,99,104,101,99,107,115,117,109,32,37,48,56,120,44,32,99,111,109,112,117,116,101,100,32,37,48,56,120,10,0,0,0,0,0,0,37,56,100,32,61,32,76,77,46,98,111,95,119,116,50,32,101,110,116,114,105,101,115,32,114,101,97,100,10,0,0,0,39,41,39,0,0,0,0,0,47,0,0,0,0,0,0,0,76,105,110,101,91,37,100,93,58,32,116,114,97,110,115,105,116,105,111,110,32,111,114,32,70,83,71,95,69,78,68,32,115,116,97,116,101,109,101,110,116,32,101,120,112,101,99,116,101,100,10,0,0,0,0,0,49,115,95,49,50,99,95,49,50,100,95,51,112,95,49,50,100,100,0,0,0,0,0,0,77,97,120,105,109,117,109,32,110,101,119,32,79,79,86,115,32,116,104,97,116,32,99,97,110,32,98,101,32,97,100,100,101,100,32,97,116,32,114,117,110,32,116,105,109,101,0,0,45,108,111,103,115,112,101,99,0,0,0,0,0,0,0,0,116,109,97,116,91,37,100,93,91,37,100,93,91,37,100,93,32,61,32,37,100,10,0,0,97,100,100,105,110,103,32,115,101,97,114,99,104,32,37,115,10,0,0,0,0,0,0,0,50,48,0,0,0,0,0,0,45,109,97,120,110,101,119,111,111,118,0,0,0,0,0,0,82,101,99,111,103,110,105,122,101,114,0,0,0,0,0,0,104,109,109,95,102,114,97,109,101,40,38,104,109,109,45,62,104,109,109,41,32,61,61,32,102,114,97,109,101,95,105,100,120,0,0,0,0,0,0,0,68,105,99,116,105,111,110,97,114,121,32,105,115,32,99,97,115,101,32,115,101,110,115,105,116,105,118,101,32,40,78,79,84,69,58,32,99,97,115,101,32,105,110,115,101,110,115,105,116,105,118,105,116,121,32,97,112,112,108,105,101,115,32,116,111,32,65,83,67,73,73,32,99,104,97,114,97,99,116,101,114,115,32,111,110,108,121,41,0,0,0,0,0,0,0,0,109,105,120,119,102,108,111,111,114,32,40,37,101,41,32,110,111,116,32,105,110,32,114,97,110,103,101,32,40,48,44,32,49,41,10,0,0,0,0,0,45,109,109,97,112,0,0,0,86,101,114,115,105,111,110,32,101,114,114,111,114,58,32,69,120,112,101,99,105,110,103,32,37,115,44,32,98,117,116,32,114,101,97,100,32,37,115,10,0,0,0,0,0,0,0,0,78,111,105,115,101,32,119,111,114,100,32,112,114,111,110,117,110,99,105,97,116,105,111,110,32,100,105,99,116,105,111,110,97,114,121,32,105,110,112,117,116,32,102,105,108,101,0,0,114,99,108,105,115,116,91,48,93,32,62,61,32,48,0,0,82,101,97,100,105,110,103,32,102,105,108,108,101,114,32,100,105,99,116,105,111,110,97,114,121,58,32,37,115,10,0,0,77,97,105,110,32,112,114,111,110,117,110,99,105,97,116,105,111,110,32,100,105,99,116,105,111,110,97,114,121,32,40,108,101,120,105,99,111,110,41,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,0,38,109,45,62,110,95,99,100,95,116,114,101,101,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,102,114,97,109,101,32,102,114,111,109,32,115,101,110,111,110,101,32,102,105,108,101,0,0,0,99,104,97,114,0,0,0,0,87,105,110,100,111,119,32,111,102,32,102,114,97,109,101,115,32,105,110,32,108,97,116,116,105,99,101,32,116,111,32,115,101,97,114,99,104,32,102,111,114,32,115,117,99,99,101,115,115,111,114,32,119,111,114,100,115,32,105,110,32,102,119,100,102,108,97,116,32,115,101,97,114,99,104,32,0,0,0,0,67,111,110,102,105,103,117,114,101,100,32,102,101,97,116,117,114,101,32,108,101,110,103,116,104,32,37,100,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,102,101,97,116,117,114,101,32,101,120,116,114,97,99,116,105,111,110,32,111,117,116,112,117,116,32,115,105,122,101,32,37,100,10,0,0,0,10,10,0,0,0,0,0,0,102,114,101,97,100,40,99,104,107,115,117,109,41,32,102,97,105,108,101,100,10,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,98,97,99,107,111,102,102,32,119,101,105,103,104,116,115,10,0,39,40,39,0,0,0,0,0,40,115,116,100,105,110,41,0,76,105,110,101,91,37,100,93,58,32,102,105,110,97,108,32,115,116,97,116,101,32,100,101,99,108,97,114,97,116,105,111,110,32,108,105,110,101,32,109,105,115,115,105,110,103,32,111,114,32,109,97,108,102,111,114,109,101,100,10,0,0,0,0,115,51,95,49,120,51,57,0,73,110,118,97,108,105,100,32,116,114,97,110,115,102,111,114,109,32,116,121,112,101,32,40,118,97,108,117,101,115,32,97,114,101,32,39,100,99,116,39,44,32,39,108,101,103,97,99,121,39,44,32,39,104,116,107,39,41,10,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,32,99,111,110,116,114,111,108,32,102,105,108,101,58,32,37,115,10,0,77,105,110,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,101,110,100,32,102,114,97,109,101,115,32,102,111,114,32,97,32,119,111,114,100,32,116,111,32,98,101,32,115,101,97,114,99,104,101,100,32,105,110,32,102,119,100,102,108,97,116,32,115,101,97,114,99,104,0,0,0,0,0,0,0,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,110,111,32,97,99,116,105,111,110,32,102,111,117,110,100,0,0,0,0,0,0,116,114,97,110,115,105,116,105,111,110,115,0,0,0,0,0,110,103,115,45,62,119,111,114,100,95,99,104,97,110,91,119,93,32,33,61,32,78,85,76,76,0,0,0,0,0,0,0,32,45,99,32,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,109,109,105,111,46,99,0,0,0,0,0,0,0,0,78,111,100,101,115,32,105,103,110,111,114,101,100,32,105,110,32,108,97,116,116,105,99,101,32,99,111,110,115,116,114,117,99,116,105,111,110,32,105,102,32,116,104,101,121,32,112,101,114,115,105,115,116,32,102,111,114,32,102,101,119,101,114,32,116,104,97,110,32,78,32,102,114,97,109,101,115,0,0,0,37,115,58,32,35,102,108,111,97,116,51,50,115,40,37,100,41,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,100,105,109,101,110,115,105,111,110,115,58,32,37,100,32,120,32,37,100,32,120,32,37,100,10,0,0,0,0,0,0,0,69,108,101,109,101,110,116,32,115,105,122,101,32,42,32,98,108,111,99,107,32,115,105,122,101,32,101,120,99,101,101,100,115,32,50,53,54,107,44,32,117,115,101,32,109,97,108,108,111,99,32,105,110,115,116,101,97,100,46,10,0,0,0,0,73,78,70,79,67,79,78,84,0,0,0,0,0,0,0,0,97,110,0,0,0,0,0,0,48,46,51,0,0,0,0,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,97,99,116,105,118,101,32,72,77,77,115,32,116,111,32,109,97,105,110,116,97,105,110,32,97,116,32,101,97,99,104,32,102,114,97,109,101,32,40,111,114,32,45,49,32,102,111,114,32,110,111,32,112,114,117,110,105,110,103,41,0,0,108,99,108,105,115,116,91,48,93,32,62,61,32,48,0,0,49,48,48,48,48,0,0,0,101,110,100,104,100,114,10,0,37,100,32,119,111,114,100,115,32,114,101,97,100,10,0,0,106,115,103,102,95,112,97,114,115,101,114,46,121,0,0,0,38,109,45,62,110,95,99,116,120,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,100,105,115,116,105,110,99,116,32,119,111,114,100,32,101,120,105,116,115,32,97,116,32,101,97,99,104,32,102,114,97,109,101,32,40,111,114,32,45,49,32,102,111,114,32,110,111,32,112,114,117,110,105,110,103,41,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,110,103,114,97,109,95,109,111,100,101,108,95,100,109,112,46,99,0,0,0,0,0,0,0,70,114,97,109,101,32,37,100,32,111,117,116,115,105,100,101,32,113,117,101,117,101,32,111,102,32,37,100,32,102,114,97,109,101,115,44,32,37,100,32,97,108,108,111,99,32,40,37,100,32,62,32,37,100,41,44,32,99,97,110,110,111,116,32,115,99,111,114,101,10,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,108,109,51,103,95,109,111,100,101,108,46,99,0,0,0,0,239,187,191,0,0,0,0,0,37,115,32,0,0,0,0,0,110,32,61,61,32,108,95,100,49,32,42,32,108,95,100,50,32,42,32,108,95,100,51,0,37,56,100,32,61,32,76,77,46,112,114,111,98,50,32,101,110,116,114,105,101,115,32,114,101,97,100,10,0,0,0,0,39,124,39,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,112,97,114,115,101,32,74,83,71,70,32,103,114,97,109,109,97,114,32,102,114,111,109,32,39,37,115,39,10,0,70,73,78,65,76,95,83,84,65,84,69,0,0,0,0,0,115,50,95,52,120,32,102,101,97,116,117,114,101,115,32,114,101,113,117,105,114,101,32,99,101,112,115,105,122,101,32,61,61,32,49,51,10,0,0,0,73,110,105,116,105,97,108,32,98,97,99,107,112,111,105,110,116,101,114,32,116,97,98,108,101,32,115,105,122,101,0,0,104,116,107,0,0,0,0,0,108,105,110,107,32,61,61,32,108,105,110,107,50,0,0,0,76,68,65,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,109,117,108,116,105,45,115,116,114,101,97,109,32,102,101,97,116,117,114,101,115,32,40,110,95,115,116,114,101,97,109,32,61,32,37,100,41,10,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,106,115,103,102,46,99,0,0,45,108,109,99,116,108,0,0,53,48,48,48,0,0,0,0,39,37,115,39,58,32,67,111,117,108,100,110,39,116,32,114,101,97,100,32,105,110,116,51,50,32,64,112,111,115,32,37,100,10,0,0,0,0,0,0,37,53,46,50,102,32,0,0,110,117,109,83,116,97,116,101,115,0,0,0,0,0,0,0,112,114,105,111,114,0,0,0,98,105,116,118,101,99,95,105,115,95,115,101,116,40,110,103,115,45,62,119,111,114,100,95,97,99,116,105,118,101,44,32,119,41,0,0,0,0,0,0,101,109,97,120,0,0,0,0,112,114,101,115,112,99,104,95,98,117,102,45,62,112,99,109,95,119,114,105,116,101,95,112,116,114,32,60,32,112,114,101,115,112,99,104,95,98,117,102,45,62,110,117,109,95,102,114,97,109,101,115,95,112,99,109,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,119,97,114,112,95,112,105,101,99,101,119,105,115,101,95,108,105,110,101,97,114,46,99,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,119,97,114,112,95,105,110,118,101,114,115,101,95,108,105,110,101,97,114,46,99,0,0,0,0,0,0,0,0,80,114,105,110,116,32,114,101,115,117,108,116,115,32,97,110,100,32,98,97,99,107,116,114,97,99,101,115,32,116,111,32,108,111,103,32,102,105,108,101,46,0,0,0,0,0,0,0,73,109,112,108,101,109,101,110,116,101,100,32,102,117,110,99,116,105,111,110,115,32,97,114,101,58,10,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,119,97,114,112,95,97,102,102,105,110,101,46,99,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,104,105,103,104,32,102,105,108,116,101,114,32,101,100,103,101,32,61,32,37,102,32,40,37,102,41,10,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,70,111,117,110,100,32,98,121,116,101,45,111,114,100,101,114,32,109,97,114,107,32,37,46,52,115,44,32,97,115,115,117,109,105,110,103,32,116,104,105,115,32,105,115,32,97,32,98,105,110,97,114,121,32,109,100,101,102,32,102,105,108,101,10,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,105,110,116,101,114,102,97,99,101,46,99,0,0,45,107,119,115,95,112,108,112,0,0,0,0,0,0,0,0,82,117,110,32,98,101,115,116,112,97,116,104,32,40,68,105,106,107,115,116,114,97,41,32,115,101,97,114,99,104,32,111,118,101,114,32,119,111,114,100,32,108,97,116,116,105,99,101,32,40,51,114,100,32,112,97,115,115,41,0,0,0,0,0,112,114,111,110,108,101,110,32,62,61,32,49,0,0,0,0,45,109,101,97,110,0,0,0,82,101,97,100,105,110,103,32,109,97,105,110,32,100,105,99,116,105,111,110,97,114,121,58,32,37,115,10,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,77,76,76,82,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,0,0,0,82,117,110,32,102,111,114,119,97,114,100,32,102,108,97,116,45,108,101,120,105,99,111,110,32,115,101,97,114,99,104,32,111,118,101,114,32,119,111,114,100,32,108,97,116,116,105,99,101,32,40,50,110,100,32,112,97,115,115,41,0,0,0,0,38,109,45,62,110,95,115,115,101,113,0,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,102,115,103,95,109,111,100,101,108,46,99,0,0,0,0,0,82,117,110,32,102,111,114,119,97,114,100,32,108,101,120,105,99,111,110,45,116,114,101,101,32,115,101,97,114,99,104,32,40,49,115,116,32,112,97,115,115,41,0,0,0,0,0,0,46,90,0,0,0,0,0,0,92,10,9,0,0,0,0,0,79,83,32,101,114,114,111,114,32,105,110,32,98,105,111,95,102,114,101,97,100,95,51,100,0,0,0,0,0,0,0,0,102,114,101,97,100,40,112,114,111,98,50,41,32,102,97,105,108,101,100,10,0,0,0,0,39,61,39,0,0,0,0,0,70,0,0,0,0,0,0,0,102,101,97,116,0,0,0,0,115,50,95,52,120,0,0,0,108,101,103,97,99,121,0,0,84,111,112,111,108,111,103,121,32,110,111,116,32,76,101,102,116,45,116,111,45,82,105,103,104,116,32,111,114,32,66,97,107,105,115,10,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,100,101,102,97,117,108,116,0,67,111,109,112,117,116,101,32,97,108,108,32,115,101,110,111,110,101,32,115,99,111,114,101,115,32,105,110,32,101,118,101,114,121,32,102,114,97,109,101,32,40,99,97,110,32,98,101,32,102,97,115,116,101,114,32,119,104,101,110,32,116,104,101,114,101,32,97,114,101,32,109,97,110,121,32,115,101,110,111,110,101,115,41,0,0,0,0,45,108,109,0,0,0,0,0,45,112,108,95,112,98,101,97,109,0,0,0,0,0,0,0,45,102,119,100,102,108,97,116,115,102,119,105,110,0,0,0,71,114,97,109,109,97,114,0,98,105,116,118,101,99,95,105,115,95,99,108,101,97,114,40,110,103,115,45,62,119,111,114,100,95,97,99,116,105,118,101,44,32,119,41,0,0,0,0,101,110,100,95,98,112,105,100,120,32,60,32,110,103,115,45,62,98,112,95,116,97,98,108,101,95,115,105,122,101,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,112,104,111,110,101,32,108,111,111,112,32,116,114,97,110,115,105,116,105,111,110,115,32,102,111,114,32,108,111,111,107,97,104,101,97,100,0,0,0,0,0,0,49,101,45,53,0,0,0,0,70,68,77,66,0,0,0,0,70,97,105,108,101,100,32,116,111,32,102,105,110,100,32,116,104,101,32,101,110,100,32,110,111,100,101,10,0,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,112,104,111,110,101,32,108,111,111,112,32,115,101,97,114,99,104,32,102,111,114,32,108,111,111,107,97,104,101,97,100,0,0,0,45,100,105,99,116,99,97,115,101,0,0,0,0,0,0,0,49,101,45,49,48,0,0,0,38,109,45,62,110,95,116,109,97,116,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,102,114,97,109,101,32,116,111,32,115,101,110,111,110,101,32,102,105,108,101,0,0,0,0,80,104,111,110,101,109,101,32,108,111,111,107,97,104,101,97,100,32,119,105,110,100,111,119,32,115,105,122,101,44,32,105,110,32,102,114,97,109,101,115,0,0,0,0,0,0,0,0,46,98,122,50,0,0,0,0,80,97,114,115,105,110,103,32,99,111,109,109,97,110,100,32,108,105,110,101,58,10,0,0,84,111,116,97,108,32,99,108,97,115,115,32,112,114,111,98,97,98,105,108,105,116,121,32,105,115,32,37,102,44,32,119,105,108,108,32,110,111,114,109,97,108,105,122,101,10,0,0,37,56,100,32,61,32,76,77,46,116,114,105,103,114,97,109,115,32,114,101,97,100,10,0,39,59,39,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,37,115,32,102,111,114,32,112,97,114,115,105,110,103,0,0,0,76,105,110,101,91,37,100,93,58,32,115,116,97,114,116,32,115,116,97,116,101,32,100,101,99,108,97,114,97,116,105,111,110,32,108,105,110,101,32,109,105,115,115,105,110,103,32,111,114,32,109,97,108,102,111,114,109,101,100,10,0,0,0,0,100,99,116,0,0,0,0,0,37,100,37,110,0,0,0,0,84,109,97,116,32,110,111,116,32,117,112,112,101,114,32,116,114,105,97,110,103,117,108,97,114,10,0,0,0,0,0,0,85,116,116,101,114,97,110,99,101,32,118,111,99,97,98,117,108,97,114,121,32,99,111,110,116,97,105,110,115,32,37,100,32,119,111,114,100,115,10,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,119,111,114,100,32,101,120,105,116,115,32,105,110,32,115,101,99,111,110,100,45,112,97,115,115,32,102,108,97,116,32,115,101,97,114,99,104,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,97,116,47,99,109,110,95,112,114,105,111,114,46,99,0,0,0,73,110,116,101,103,101,114,115,0,0,0,0,0,0,0,0,66,65,68,95,83,84,65,84,69,0,0,0,0,0,0,0,104,109,109,95,102,114,97,109,101,40,38,104,109,109,45,62,104,109,109,41,32,33,61,32,110,102,0,0,0,0,0,0,110,111,110,101,0,0,0,0,112,97,116,104,32,33,61,32,110,103,115,45,62,98,112,105,100,120,0,0,0,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,101,118,101,114,121,32,102,114,97,109,101,32,105,110,32,115,101,99,111,110,100,45,112,97,115,115,32,102,108,97,116,32,115,101,97,114,99,104,0,0,0,0,82,101,97,100,105,110,103,32,109,105,120,116,117,114,101,32,103,97,117,115,115,105,97,110,32,112,97,114,97,109,101,116,101,114,58,32,37,115,10,0,49,101,45,54,52,0,0,0,66,77,68,70,0,0,0,0,70,97,105,108,101,100,32,116,111,32,102,105,110,100,32,116,104,101,32,115,116,97,114,116,32,110,111,100,101,10,0,0,35,112,104,111,110,101,115,32,62,32,37,100,59,32,105,110,99,114,101,97,115,101,32,70,83,71,95,80,78,79,68,69,95,67,84,88,84,95,66,86,83,90,32,97,110,100,32,114,101,99,111,109,112,105,108,101,10,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,112,114,101,115,112,99,104,95,98,117,102,46,99,0,0,0,0,0,0,0,0,73,83,95,83,51,83,83,73,68,40,98,105,110,95,109,100,101,102,95,112,105,100,50,115,115,105,100,40,109,100,101,102,44,32,112,41,41,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,108,97,115,116,32,112,104,111,110,101,32,105,110,32,115,105,110,103,108,101,45,112,104,111,110,101,32,119,111,114,100,115,0,0,65,108,108,111,99,97,116,105,110,103,32,37,100,32,42,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,119,111,114,100,32,101,110,116,114,105,101,115,10,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,110,111,105,115,101,46,99,0,0,0,0,0,0,38,109,45,62,110,95,115,101,110,0,0,0,0,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,108,97,115,116,32,112,104,111,110,101,32,105,110,32,119,111,114,100,115,0,0,0,0,0,0,0,67,105,114,99,117,108,97,114,32,102,101,97,116,117,114,101,32,98,117,102,102,101,114,32,99,97,110,110,111,116,32,98,101,32,114,101,119,111,117,110,100,32,40,111,117,116,112,117,116,32,102,114,97,109,101,32,37,100,44,32,97,108,108,111,99,32,37,100,41,10,0,0,49,101,45,52,48,0,0,0,112,105,101,99,101,119,105,115,101,95,108,105,110,101,97,114,32,58,61,61,32,60,32,119,39,32,61,32,97,32,42,32,119,44,32,119,32,60,32,70,32,62,0,0,0,0,0,0,67,97,110,39,116,32,97,100,100,32,119,111,114,100,32,39,37,115,39,32,116,111,32,114,101,97,100,45,111,110,108,121,32,108,97,110,103,117,97,103,101,32,109,111,100,101,108,46,32,68,105,115,97,98,108,101,32,109,109,97,112,32,119,105,116,104,32,39,45,109,109,97,112,32,110,111,39,32,116,111,32,109,97,107,101,32,105,116,32,119,114,105,116,97,98,108,101,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,114,105,103,114,97,109,115,32,100,97,116,97,10,0,0,0,87,69,73,71,72,84,0,0,83,84,65,82,84,95,83,84,65,84,69,0,0,0,0,0,45,116,114,97,110,115,102,111,114,109,0,0,0,0,0,0,78,111,110,45,101,109,112,116,121,32,102,105,108,101,32,98,101,121,111,110,100,32,101,110,100,32,111,102,32,100,97,116,97,10,0,0,0,0,0,0,82,101,97,100,105,110,103,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,102,105,108,101,32,39,37,115,39,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,109,105,120,116,117,114,101,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,45,102,119,100,102,108,97,116,0,0,0,0,0,0,0,0,110,103,115,45,62,119,111,114,100,95,99,104,97,110,91,119,105,100,93,32,61,61,32,78,85,76,76,0,0,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,112,104,111,110,101,32,116,114,97,110,115,105,116,105,111,110,115,0,105,110,118,101,114,115,101,95,108,105,110,101,97,114,32,58,61,61,32,60,32,119,39,32,61,32,120,32,47,32,97,32,62,0,0,0,0,0,0,0,83,101,103,109,101,110,116,97,116,105,111,110,0,0,0,0,33,100,105,99,116,95,102,105,108,108,101,114,95,119,111,114,100,40,112,115,95,115,101,97,114,99,104,95,100,105,99,116,40,110,103,115,41,44,32,99,97,110,100,112,45,62,119,105,100,41,0,0,0,0,0,0,82,101,115,105,122,101,100,32,115,99,111,114,101,32,115,116,97,99,107,32,116,111,32,37,100,32,101,110,116,114,105,101,115,10,0,0,0,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,119,111,114,100,32,101,120,105,116,115,0,0,0,0,0,0,0,0,37,100,32,118,97,114,105,97,110,99,101,32,118,97,108,117,101,115,32,102,108,111,111,114,101,100,10,0,0,0,0,0,55,101,45,50,57,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,119,97,114,112,46,99,0,0,0,0,0,0,0,69,109,112,116,121,32,102,105,108,101,58,32,37,115,10,0,97,102,102,105,110,101,32,58,61,61,32,60,32,119,39,32,61,32,97,32,42,32,120,32,43,32,98,32,62,0,0,0,40,78,85,76,76,41,0,0,42,97,108,108,111,99,95,104,101,97,100,32,61,61,32,78,85,76,76,0,0,0,0,0,46,115,101,109,105,46,0,0,65,108,108,111,99,97,116,101,100,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,119,111,114,100,45,102,105,110,97,108,32,116,114,105,112,104,111,110,101,115,10,0,0,0,66,101,97,109,32,119,105,100,116,104,32,97,112,112,108,105,101,100,32,116,111,32,101,118,101,114,121,32,102,114,97,109,101,32,105,110,32,86,105,116,101,114,98,105,32,115,101,97,114,99,104,32,40,115,109,97,108,108,101,114,32,118,97,108,117,101,115,32,109,101,97,110,32,119,105,100,101,114,32,98,101,97,109,41,0,0,0,0,78,117,109,98,101,114,32,111,102,32,119,111,114,100,115,32,105,110,32,100,105,99,116,105,111,110,97,114,105,101,115,32,40,37,100,41,32,101,120,99,101,101,100,115,32,108,105,109,105,116,32,40,37,100,41,10,0,0,0,0,0,0,0,0,49,101,45,52,56,0,0,0,38,109,45,62,110,95,99,105,95,115,101,110,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,47,102,101,95,115,105,103,112,114,111,99,46,99,0,0,0,0,97,99,109,111,100,45,62,110,95,102,101,97,116,95,102,114,97,109,101,32,60,61,32,97,99,109,111,100,45,62,110,95,102,101,97,116,95,97,108,108,111,99,0,0,0,0,0,0,66,97,115,101,32,105,110,32,119,104,105,99,104,32,97,108,108,32,108,111,103,45,108,105,107,101,108,105,104,111,111,100,115,32,99,97,108,99,117,108,97,116,101,100,0,0,0,0,46,103,122,0,0,0,0,0,99,97,110,110,111,116,32,114,101,100,105,114,101,99,116,32,108,111,103,32,111,117,116,112,117,116,0,0,0,0,0,0,72,97,115,104,32,105,110,115,101,114,116,105,111,110,32,102,97,105,108,101,100,32,102,111,114,32,119,111,114,100,32,37,115,32,61,62,32,37,112,32,40,115,104,111,117,108,100,32,110,111,116,32,104,97,112,112,101,110,41,10,0,0,0,0,37,56,100,32,61,32,76,77,46,98,105,103,114,97,109,115,40,43,116,114,97,105,108,101,114,41,32,114,101,97,100,10,0,0,0,0,0,0,0,0,84,65,71,0,0,0,0,0,73,109,112,111,114,116,101,100,32,37,115,10,0,0,0,0,83,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,102,101,97,116,117,114,101,32,115,116,114,101,97,109,32,116,111,32,116,121,112,101,58,32,39,37,115,39,44,32,99,101,112,108,101,110,61,37,100,44,32,67,77,78,61,39,37,115,39,44,32,86,65,82,78,79,82,77,61,39,37,115,39,44,32,65,71,67,61,39,37,115,39,10,0,49,46,48,48,48,49,0,0,45,114,101,109,111,118,101,95,115,105,108,101,110,99,101,0,78,111,114,109,97,108,105,122,97,116,105,111,110,32,102,97,105,108,101,100,32,102,111,114,32,116,114,97,110,115,105,116,105,111,110,32,109,97,116,114,105,120,32,37,100,32,102,114,111,109,32,115,116,97,116,101,32,37,100,10,0,0,0,0,115,50,95,115,101,109,105,0,45,98,101,115,116,112,97,116,104,0,0,0,0,0,0,0,100,105,99,116,95,105,115,95,115,105,110,103,108,101,95,112,104,111,110,101,40,112,115,95,115,101,97,114,99,104,95,100,105,99,116,40,110,103,115,41,44,32,119,41,0,0,0,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,71,97,117,115,115,105,97,110,115,32,112,101,114,32,108,101,97,102,32,110,111,100,101,32,105,110,32,107,100,45,84,114,101,101,115,0,0,0,67,111,110,102,105,103,0,0,99,97,110,100,95,115,102,91,93,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,100,32,101,110,116,114,105,101,115,10,0,0,0,0,0,0,82,101,115,105,122,101,100,32,98,97,99,107,112,111,105,110,116,101,114,32,116,97,98,108,101,32,116,111,32,37,100,32,101,110,116,114,105,101,115,10,0,0,0,0,0,0,0,0,45,107,100,109,97,120,98,98,105,0,0,0,0,0,0,0,109,115,0,0,0,0,0,0,105,32,60,32,110,95,116,111,112,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,100,101,112,116,104,32,111,102,32,107,100,45,84,114,101,101,115,32,116,111,32,117,115,101,0,0,0,0,0,0,0,0,45,107,100,109,97,120,100,101,112,116,104,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,102,105,110,100,32,116,104,101,32,98,101,115,116,112,97,116,104,32,105,110,32,97,32,108,97,116,116,105,99,101,10,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,100,32,37,100,32,98,121,116,101,115,32,40,37,100,32,75,105,66,41,32,102,111,114,32,115,105,110,103,108,101,45,112,104,111,110,101,32,119,111,114,100,32,116,114,105,112,104,111,110,101,115,10,0,0,0,0,107,100,45,84,114,101,101,32,102,105,108,101,32,102,111,114,32,71,97,117,115,115,105,97,110,32,115,101,108,101,99,116,105,111,110,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,108,101,114,32,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,45,107,100,116,114,101,101,0,38,109,45,62,110,95,101,109,105,116,95,115,116,97,116,101,0,0,0,0,0,0,0,0,66,101,97,109,32,119,105,100,116,104,32,117,115,101,100,32,116,111,32,100,101,116,101,114,109,105,110,101,32,116,111,112,45,78,32,71,97,117,115,115,105,97,110,115,32,40,111,114,32,97,32,108,105,115,116,44,32,112,101,114,45,102,101,97,116,117,114,101,41,0,0,0,67,111,109,112,114,101,115,115,101,100,32,102,105,108,101,32,111,112,101,114,97,116,105,111,110,32,102,111,114,32,109,111,100,101,32,37,115,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,67,0,0,0,0,0,0,0,45,108,111,103,102,110,0,0,85,110,97,98,108,101,32,116,111,32,114,101,97,100,32,99,111,109,112,108,101,116,101,32,100,97,116,97,0,0,0,0,79,109,105,116,32,100,117,112,108,105,99,97,116,101,32,119,111,114,100,32,39,37,115,39,10,0,0,0,0,0,0,0,45,115,97,109,112,114,97,116,101,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,98,105,103,114,97,109,115,32,100,97,116,97,10,0,0,0,0,82,85,76,69,78,65,77,69,0,0,0,0,0,0,0,0,99,32,33,61,32,78,85,76,76,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,109,100,101,102,46,99,0,76,105,110,101,91,37,100,93,58,32,35,115,116,97,116,101,115,32,100,101,99,108,97,114,97,116,105,111,110,32,108,105,110,101,32,109,105,115,115,105,110,103,32,111,114,32,109,97,108,102,111,114,109,101,100,10,0,0,0,0,0,0,0,0,111,102,114,32,62,32,48,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,116,111,112,32,71,97,117,115,115,105,97,110,115,32,116,111,32,117,115,101,32,105,110,32,115,99,111,114,105,110,103,46,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,107,119,115,95,100,101,116,101,99,116,105,111,110,115,46,99,0,0,0,0,0,0,0,45,114,101,109,111,118,101,95,110,111,105,115,101,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,114,97,110,115,105,116,105,111,110,32,109,97,116,114,105,120,32,37,100,32,102,114,111,109,32,39,37,115,39,10,0,0,45,112,108,95,119,105,110,100,111,119,0,0,0,0,0,0,45,108,111,103,98,97,115,101,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,33,100,105,99,116,95,105,115,95,115,105,110,103,108,101,95,112,104,111,110,101,40,112,115,95,115,101,97,114,99,104,95,100,105,99,116,40,110,103,115,41,44,32,119,41,0,0,0,52,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,107,119,115,95,115,101,97,114,99,104,46,99,0,0,0,86,101,99,116,111,114,87,111,114,100,115,0,0,0,0,0,115,116,97,114,116,95,115,99,111,114,101,32,66,69,84,84,69,82,95,84,72,65,78,32,87,79,82,83,84,95,83,67,79,82,69,0,0,0,0,0,78,111,32,101,110,116,114,105,101,115,32,105,110,32,98,97,99,107,112,111,105,110,116,101,114,32,116,97,98,108,101,33,0,0,0,0,0,0,0,0,45,116,109,97,116,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,104,109,109,46,99,0,0,70,114,97,109,101,32,71,77,77,32,99,111,109,112,117,116,97,116,105,111,110,32,100,111,119,110,115,97,109,112,108,105,110,103,32,114,97,116,105,111,0,0,0,0,0,0,0,0,45,116,111,112,110,32,97,114,103,117,109,101,110,116,32,40,37,100,41,32,105,110,118,97,108,105,100,32,111,114,32,62,32,35,100,101,110,115,105,116,121,32,99,111,100,101,119,111,114,100,115,32,40,37,100,41,59,32,115,101,116,32,116,111,32,108,97,116,116,101,114,10,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,109,100,101,102,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,0,0,0,45,115,101,110,109,103,97,117,0,0,0,0,0,0,0,0,85,115,101,32,109,101,109,111,114,121,45,109,97,112,112,101,100,32,73,47,79,32,40,105,102,32,112,111,115,115,105,98,108,101,41,32,102,111,114,32,109,111,100,101,108,32,102,105,108,101,115,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,98,116,97,105,110,32,116,104,101,32,108,97,116,116,105,99,101,32,119,104,105,108,101,32,98,101,115,116,112,97,116,104,32,101,110,97,98,108,101,100,10,0,0,0,0,100,50,112,45,62,108,114,100,105,112,104,95,114,99,0,0,59,59,0,0,0,0,0,0,45,109,100,101,102,0,0,0,77,76,76,82,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,116,111,32,97,112,112,108,121,32,116,111,32,109,101,97,110,115,32,97,110,100,32,118,97,114,105,97,110,99,101,115,0,0,0,0,0,38,109,45,62,110,95,112,104,111,110,101,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,45,102,101,97,116,112,97,114,97,109,115,0,0,0,0,0,83,101,110,111,110,101,32,100,117,109,112,32,40,99,111,109,112,114,101,115,115,101,100,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,41,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,37,100,10,0,0,0,0,118,101,99,116,111,114,0,0,78,111,32,97,114,103,117,109,101,110,116,115,32,103,105,118,101,110,44,32,97,118,97,105,108,97,98,108,101,32,111,112,116,105,111,110,115,32,97,114,101,58,10,0,0,0,0,0,102,114,101,97,100,40,97,114,114,97,121,100,97,116,97,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,60,85,78,75,62,0,0,0,45,109,109,97,112,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,116,114,105,103,114,97,109,32,105,110,100,101,120,32,105,115,32,110,111,116,32,119,111,114,100,45,97,108,105,103,110,101,100,46,32,32,87,105,108,108,32,110,111,116,32,109,101,109,111,114,121,45,109,97,112,46,10,0,0,84,79,75,69,78,0,0,0,77,117,108,116,105,112,108,121,32,105,109,112,111,114,116,101,100,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,37,100,0,0,0,0,0,0,107,32,62,61,32,102,99,98,45,62,115,118,95,100,105,109,0,0,0,0,0,0,0,0,45,114,101,109,111,118,101,95,100,99,0,0,0,0,0,0,37,115,58,32,73,110,118,97,108,105,100,32,116,114,97,110,115,105,116,105,111,110,115,46,32,78,117,109,98,101,114,32,111,102,32,99,111,101,102,102,105,99,105,101,110,116,115,32,40,37,100,41,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,101,120,112,101,99,116,101,100,32,97,114,114,97,121,32,100,105,109,101,110,115,105,111,110,58,32,37,100,32,120,32,37,100,32,120,32,37,100,10,0,0,0,0,0,0,37,100,32,72,77,77,32,110,111,100,101,115,32,105,110,32,108,101,120,116,114,101,101,32,40,37,100,32,108,101,97,118,101,115,41,10,0,0,0,0,112,116,109,0,0,0,0,0,45,115,101,110,108,111,103,100,105,114,0,0,0,0,0,0,73,83,95,83,51,83,83,73,68,40,104,109,109,95,109,112,120,95,115,115,105,100,40,38,114,104,109,109,45,62,104,109,109,44,32,48,41,41,0,0,73,110,118,101,114,115,101,32,119,101,105,103,104,116,32,97,112,112,108,105,101,100,32,116,111,32,97,99,111,117,115,116,105,99,32,115,99,111,114,101,115,46,0,0,0,0,0,0,83,119,105,116,99,104,105,110,103,32,70,83,71,32,119,104,105,108,101,32,104,105,115,116,111,114,121,32,110,111,116,32,101,109,112,116,121,59,32,104,105,115,116,111,114,121,32,99,108,101,97,114,101,100,10,0,47,117,115,114,47,108,111,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,115,50,95,115,101,109,105,95,109,103,97,117,46,99,0,49,0,0,0,0,0,0,0,86,101,99,116,111,114,84,114,97,110,115,105,116,105,111,110,115,0,0,0,0,0,0,0,112,97,116,104,32,33,61,32,98,112,0,0,0,0,0,0,70,105,108,108,105,110,103,32,105,110,32,99,111,110,116,101,120,116,32,116,114,105,112,104,111,110,101,115,32,102,111,114,32,37,115,40,63,44,63,41,10,0,0,0,0,0,0,0,84,104,101,32,118,97,108,117,101,32,111,102,32,116,111,112,110,58,32,37,100,10,0,0,83,101,110,111,110,101,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,102,108,111,111,114,32,40,97,112,112,108,105,101,100,32,116,111,32,100,97,116,97,32,102,114,111,109,32,45,109,105,120,119,32,102,105,108,101,41,0,0,48,46,48,48,48,48,48,48,49,0,0,0,0,0,0,0,37,100,32,102,114,97,109,101,115,44,32,37,100,32,72,77,77,115,32,40,37,100,47,102,114,41,44,32,37,100,32,115,101,110,111,110,101,115,32,40,37,100,47,102,114,41,44,32,37,100,32,104,105,115,116,111,114,121,32,101,110,116,114,105,101,115,32,40,37,100,47,102,114,41,10,10,0,0,0,0,45,108,100,97,0,0,0,0,35,35,0,0,0,0,0,0,83,101,110,111,110,101,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,32,105,110,112,117,116,32,102,105,108,101,32,40,117,110,99,111,109,112,114,101,115,115,101,100,41,0,0,0,0,0,0,0,0,38,109,45,62,110,95,99,105,112,104,111,110,101,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,100,105,99,116,46,99,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,112,116,109,95,109,103,97,117,46,99,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,108,111,103,98,97,115,101,0,77,105,120,116,117,114,101,32,103,97,117,115,115,105,97,110,32,118,97,114,105,97,110,99,101,32,102,108,111,111,114,32,40,97,112,112,108,105,101,100,32,116,111,32,100,97,116,97,32,102,114,111,109,32,45,118,97,114,32,102,105,108,101,41,0,0,0,0,0,0,0,0,98,122,105,112,50,0,0,0,37,46,48,76,102,0,0,0,77,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,97,114,103,117,109,101,110,116,32,37,115,10,0,0,0,66,97,100,32,97,114,114,97,121,115,105,122,101,58,32,37,100,10,0,0,0,0,0,0,65,100,100,101,100,32,99,108,97,115,115,32,37,115,32,99,111,110,116,97,105,110,105,110,103,32,37,100,32,119,111,114,100,115,10,0,0,0,0,0,37,56,100,32,61,32,76,77,46,117,110,105,103,114,97,109,115,40,43,116,114,97,105,108,101,114,41,32,114,101,97,100,10,0,0,0,0,0,0,0,80,85,66,76,73,67,0,0,65,108,114,101,97,100,121,32,105,109,112,111,114,116,101,100,32,37,115,10,0,0,0,0,78,85,77,95,83,84,65,84,69,83,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,112,115,95,109,108,108,114,46,99,0,0,0,0,0,0,107,32,62,61,32,102,101,97,116,95,100,105,109,101,110,115,105,111,110,40,102,99,98,41,0,0,0,0,0,0,0,0,45,118,97,100,95,112,111,115,116,115,112,101,101,99,104,0,37,115,58,32,85,110,115,117,112,112,111,114,116,101,100,32,116,114,97,110,115,105,116,105,111,110,32,109,97,116,114,105,120,46,32,78,117,109,98,101,114,32,111,102,32,115,111,117,114,99,101,32,115,116,97,116,101,115,32,40,37,100,41,32,33,61,32,110,117,109,98,101,114,32,111,102,32,116,97,114,103,101,116,32,115,116,97,116,101,115,32,40,37,100,41,45,49,10,0,0,0,0,0,0,32,37,100,0,0,0,0,0,45,114,97,119,108,111,103,100,105,114,0,0,0,0,0,0,110,103,115,45,62,119,111,114,100,95,99,104,97,110,91,119,105,100,93,32,33,61,32,78,85,76,76,0,0,0,0,0,77,105,120,116,117,114,101,32,103,97,117,115,115,105,97,110,32,118,97,114,105,97,110,99,101,115,32,105,110,112,117,116,32,102,105,108,101,0,0,0,65,117,100,105,111,66,117,102,102,101,114,0,0,0,0,0,104,109,109,95,102,114,97,109,101,40,38,104,109,109,45,62,104,109,109,41,32,62,61,32,102,114,97,109,101,95,105,100,120,0,0,0,0,0,0,0,87,111,114,100,32,39,37,115,39,32,115,117,114,118,105,118,101,100,32,102,111,114,32,37,100,32,102,114,97,109,101,115,44,32,112,111,116,101,110,116,105,97,108,32,111,118,101,114,112,114,117,110,105,110,103,10,0,0,0,0,0,0,0,0,77,105,120,116,117,114,101,32,103,97,117,115,115,105,97,110,32,109,101,97,110,115,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,0,0,82,101,97,100,105,110,103,32,109,111,100,101,108,32,100,101,102,105,110,105,116,105,111,110,58,32,37,115,10,0,0,0,72,77,77,32,115,116,97,116,101,32,116,114,97,110,115,105,116,105,111,110,32,112,114,111,98,97,98,105,108,105,116,121,32,102,108,111,111,114,32,40,97,112,112,108,105,101,100,32,116,111,32,45,116,109,97,116,32,102,105,108,101,41,0,0,78,117,109,98,101,114,32,111,102,32,115,101,110,111,110,101,115,32,101,120,99,101,101,100,115,32,108,105,109,105,116,58,32,37,100,32,62,32,37,100,10,0,0,0,0,0,0,0,102,115,103,115,45,62,112,110,111,100,101,95,97,99,116,105,118,101,95,110,101,120,116,32,61,61,32,78,85,76,76,0,48,46,48,48,48,49,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,37,115,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,72,77,77,32,115,116,97,116,101,32,116,114,97,110,115,105,116,105,111,110,32,109,97,116,114,105,120,32,105,110,112,117,116,32,102,105,108,101,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,110,95,115,101,110,0,0,0,32,45,99,32,62,32,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,66,97,100,32,100,101,102,97,117,108,116,32,97,114,103,117,109,101,110,116,32,118,97,108,117,101,32,102,111,114,32,37,115,58,32,37,115,10,0,0,102,114,101,97,100,40,97,114,114,97,121,115,105,122,101,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,99,108,97,115,115,32,37,115,32,105,110,32,99,111,110,116,114,111,108,32,102,105,108,101,10,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,117,110,105,103,114,97,109,115,32,100,97,116,97,10,0,0,0,73,77,80,79,82,84,0,0,73,109,112,111,114,116,105,110,103,32,37,115,32,102,114,111,109,32,37,115,32,116,111,32,37,115,10,0,0,0,0,0,78,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,112,115,95,108,97,116,116,105,99,101,46,99,0,0,0,102,101,97,116,95,100,105,109,101,110,115,105,111,110,40,102,99,98,41,32,62,32,48,0,83,101,110,111,110,101,32,116,111,32,99,111,100,101,98,111,111,107,32,109,97,112,112,105,110,103,32,105,110,112,117,116,32,102,105,108,101,32,40,117,115,117,97,108,108,121,32,110,111,116,32,110,101,101,100,101,100,41,0,0,0,0,0,0,45,118,97,100,95,112,114,101,115,112,101,101,99,104,0,0,37,115,58,32,78,117,109,98,101,114,32,111,102,32,116,114,97,110,115,105,116,105,111,110,32,109,97,116,114,105,99,101,115,32,40,37,100,41,32,101,120,99,101,101,100,115,32,108,105,109,105,116,32,40,37,100,41,10,0,0,0,0,0,0,84,111,112,45,78,32,98,101,97,109,115,58,0,0,0,0,77,97,120,105,109,117,109,32,116,111,112,45,78,58,32,37,100,10,0,0,0,0,0,0,45,109,102,99,108,111,103,100,105,114,0,0,0,0,0,0,102,119,100,102,108,97,116,32,37,46,50,102,32,119,97,108,108,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,77,111,100,101,108,32,100,101,102,105,110,105,116,105,111,110,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,108,111,103,112,0,0,0,0,80,65,78,73,67,58,32,78,111,32,119,111,114,115,116,32,66,80,116,97,98,108,101,32,101,110,116,114,121,32,114,101,109,97,105,110,105,110,103,10,0,0,0,0,0,0,0,0,83,117,98,118,101,99,116,111,114,32,115,112,101,99,105,102,105,99,97,116,105,111,110,32,40,101,46,103,46,44,32,50,52,44,48,45,49,49,47,50,53,44,49,50,45,50,51,47,50,54,45,51,56,32,111,114,32,48,45,49,50,47,49,51,45,50,53,47,50,54,45,51,56,41,0,0,0,0,0,0,84,79,84,65,76,32,98,101,115,116,112,97,116,104,32,37,46,50,102,32,119,97,108,108,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,83,101,110,111,110,101,115,32,117,115,101,32,102,101,119,101,114,32,99,111,100,101,98,111,111,107,115,32,40,37,100,41,32,116,104,97,110,32,112,114,101,115,101,110,116,32,40,37,100,41,10,0,0,0,0,0,68,105,109,101,110,115,105,111,110,97,108,105,116,121,32,111,102,32,111,117,116,112,117,116,32,111,102,32,102,101,97,116,117,114,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,40,48,32,116,111,32,117,115,101,32,101,110,116,105,114,101,32,109,97,116,114,105,120,41,0,0,0,0,0,40,110,95,116,111,112,32,62,32,48,41,32,38,38,32,40,110,95,116,111,112,32,60,61,32,103,45,62,110,95,100,101,110,115,105,116,121,41,0,0,70,105,108,101,32,99,111,110,116,97,105,110,105,110,103,32,102,101,97,116,117,114,101,32,101,120,116,114,97,99,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,46,0,0,70,105,108,101,32,99,111,110,116,97,105,110,105,110,103,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,109,97,116,114,105,120,32,116,111,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,102,101,97,116,117,114,101,115,32,40,115,105,110,103,108,101,45,115,116,114,101,97,109,32,102,101,97,116,117,114,101,115,32,111,110,108,121,41,0,0,0,78,111,32,109,100,101,102,45,102,105,108,101,10,0,0,0,102,115,103,115,45,62,112,110,111,100,101,95,97,99,116,105,118,101,32,61,61,32,78,85,76,76,0,0,0,0,0,0,73,110,105,116,105,97,108,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,97,117,116,111,109,97,116,105,99,32,103,97,105,110,32,99,111,110,116,114,111,108,0,0,0,0,68,105,114,101,99,116,111,114,121,32,99,111,110,116,97,105,110,105,110,103,32,97,99,111,117,115,116,105,99,32,109,111,100,101,108,32,102,105,108,101,115,46,0,0,0,0,0,0,50,46,48,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,32,108,101,110,103,116,104,32,102,114,111,109,32,37,115,10,0,0,0,83,97,116,0,0,0,0,0,65,117,116,111,109,97,116,105,99,32,103,97,105,110,32,99,111,110,116,114,111,108,32,102,111,114,32,99,48,32,40,39,109,97,120,39,44,32,39,101,109,97,120,39,44,32,39,110,111,105,115,101,39,44,32,111,114,32,39,110,111,110,101,39,41,0,0,0,0,0,0,0,70,114,105,0,0,0,0,0,86,97,114,105,97,110,99,101,32,110,111,114,109,97,108,105,122,101,32,101,97,99,104,32,117,116,116,101,114,97,110,99,101,32,40,111,110,108,121,32,105,102,32,67,77,78,32,61,61,32,99,117,114,114,101,110,116,41,0,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,98,111,111,108,0,0,0,0,99,111,109,112,114,101,115,115,0,0,0,0,0,0,0,0,37,76,102,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,97,99,109,111,100,46,99,0,0,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,97,114,103,117,109,101,110,116,32,110,97,109,101,32,105,110,32,97,114,103,117,109,101,110,116,115,58,32,37,115,10,0,0,0,0,0,0,0,115,119,97,112,95,99,104,101,99,107,32,102,97,105,108,101,100,10,0,0,0,0,0,0,84,104,117,0,0,0,0,0,76,77,110,97,109,101,32,109,105,115,115,105,110,103,32,97,102,116,101,114,32,76,77,70,105,108,101,78,97,109,101,32,39,37,115,39,10,0,0,0,73,110,105,116,105,97,108,32,118,97,108,117,101,115,32,40,99,111,109,109,97,45,115,101,112,97,114,97,116,101,100,41,32,102,111,114,32,99,101,112,115,116,114,97,108,32,109,101,97,110,32,119,104,101,110,32,39,112,114,105,111,114,39,32,105,115,32,117,115,101,100,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,97,112,105,110,103,32,105,100,32,37,100,10,0,0,0,0,71,82,65,77,77,65,82,0,46,103,114,97,109,0,0,0,117,110,107,110,111,119,110,0,110,102,114,32,62,32,48,0,112,105,101,99,101,119,105,115,101,95,108,105,110,101,97,114,0,0,0,0,0,0,0,0,70,70,84,58,32,78,117,109,98,101,114,32,111,102,32,112,111,105,110,116,115,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,111,114,32,101,113,117,97,108,32,116,111,32,102,114,97,109,101,32,115,105,122,101,32,40,37,100,32,115,97,109,112,108,101,115,41,10,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,32,102,114,111,109,32,39,37,115,39,10,0,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,116,111,112,45,78,58,32,37,100,32,0,0,0,0,0,0,87,101,100,0,0,0,0,0,56,46,48,0,0,0,0,0,45,100,101,98,117,103,0,0,102,119,100,102,108,97,116,32,37,46,50,102,32,67,80,85,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,84,117,101,0,0,0,0,0,32,9,10,13,12,0,0,0,67,101,112,115,116,114,97,108,32,109,101,97,110,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,115,99,104,101,109,101,32,40,39,99,117,114,114,101,110,116,39,44,32,39,112,114,105,111,114,39,44,32,111,114,32,39,110,111,110,101,39,41,0,0,0,0,0,0,116,111,0,0,0,0,0,0,104,109,109,95,109,112,120,95,115,115,105,100,40,38,114,104,109,109,45,62,104,109,109,44,32,48,41,32,33,61,32,66,65,68,95,83,83,73,68,0,103,117,110,122,105,112,0,0,77,111,110,0,0,0,0,0,84,79,84,65,76,32,98,101,115,116,112,97,116,104,32,37,46,50,102,32,67,80,85,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,0,66,97,115,101,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,49,46,48,10,0,0,76,105,115,116,32,105,116,101,109,32,115,105,122,101,32,40,37,108,117,41,32,110,111,116,32,109,117,108,116,105,112,108,101,32,111,102,32,115,105,122,101,111,102,40,118,111,105,100,32,42,41,44,32,114,111,117,110,100,105,110,103,32,116,111,32,37,108,117,10,0,0,0,82,101,97,100,105,110,103,32,115,101,110,111,110,101,32,109,105,120,116,117,114,101,32,119,101,105,103,104,116,115,58,32,37,115,10,0,0,0,0,0,83,101,110,111,110,101,115,32,110,101,101,100,32,109,111,114,101,32,99,111,100,101,98,111,111,107,115,32,40,37,100,41,32,116,104,97,110,32,112,114,101,115,101,110,116,32,40,37,100,41,10,0,0,0,0,0,83,117,110,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,115,32,105,110,32,116,104,101,32,105,110,112,117,116,32,102,101,97,116,117,114,101,32,118,101,99,116,111,114,0,0,0,0,0,0,0,0,70,101,97,116,117,114,101,32,108,101,110,103,116,104,115,32,102,111,114,32,109,101,97,110,115,32,97,110,100,32,118,97,114,105,97,110,99,101,115,32,100,105,102,102,101,114,10,0,112,114,101,100,45,62,110,101,120,116,32,61,61,32,103,110,0,0,0,0,0,0,0,0,73,78,70,79,0,0,0,0,105,110,105,116,121,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,101,97,116,117,114,101,32,115,116,114,101,97,109,32,116,121,112,101,44,32,100,101,112,101,110,100,115,32,111,110,32,116,104,101,32,97,99,111,117,115,116,105,99,32,109,111,100,101,108,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,117,116,105,108,47,99,109,100,95,108,110,46,99,0,0,0,0,0,0,109,97,108,108,111,99,40,37,100,41,32,102,97,105,108,101,100,32,102,114,111,109,32,37,115,40,37,100,41,10,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,83,104,111,119,32,105,110,112,117,116,32,102,105,108,101,110,97,109,101,115,0,0,0,0,76,111,103,45,109,97,116,104,32,112,97,114,97,109,101,116,101,114,115,32,100,111,110,39,116,32,109,97,116,99,104,44,32,119,105,108,108,32,110,111,116,32,99,114,101,97,116,101,32,76,77,32,115,101,116,10,0,0,0,0,0,0,0,0,70,105,108,101,32,102,111,114,109,97,116,32,118,101,114,115,105,111,110,32,37,100,32,102,111,114,32,37,115,32,105,115,32,110,101,119,101,114,32,116,104,97,110,32,108,105,98,114,97,114,121,10,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,84,117,101,115,100,97,121,0,69,110,97,98,108,101,115,32,86,65,68,44,32,114,101,109,111,118,101,115,32,115,105,108,101,110,99,101,32,102,114,97,109,101,115,32,102,114,111,109,32,112,114,111,99,101,115,115,105,110,103,0,0,0,0,0,100,111,117,98,108,101,0,0,109,100,101,102,95,102,105,108,101,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,108,109,47,110,103,114,97,109,95,109,111,100,101,108,95,97,114,112,97,46,99,0,0,0,0,0,0,33,78,71,82,65,77,95,73,83,95,67,76,65,83,83,87,73,68,40,119,105,100,41,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,95,99,114,101,97,116,101,95,98,117,102,102,101,114,40,41,0,0,0,0,0,32,62,32,0,0,0,0,0,66,97,100,32,97,114,103,117,109,101,110,116,32,118,97,108,117,101,32,102,111,114,32,37,115,58,32,37,115,10,0,0,118,101,114,115,105,111,110,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,77,111,110,100,97,121,0,0,82,101,97,100,105,110,103,32,108,109,32,102,114,111,109,32,39,37,115,39,10,0,0,0,110,103,114,97,109,115,32,49,61,37,100,44,32,50,61,37,100,44,32,51,61,37,100,10,0,0,0,0,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,95,103,101,116,95,110,101,120,116,95,98,117,102,102,101,114,40,41,0,0,0,72,69,65,68,69,82,0,0,46,42,62,0,0,0,0,0,70,83,71,32,110,97,109,101,32,105,115,32,109,105,115,115,105,110,103,10,0,0,0,0,74,83,71,70,95,80,65,84,72,0,0,0,0,0,0,0,102,99,98,0,0,0,0,0,97,102,102,105,110,101,0,0,102,102,116,58,32,110,117,109,98,101,114,32,111,102,32,112,111,105,110,116,115,32,109,117,115,116,32,98,101,32,97,32,112,111,119,101,114,32,111,102,32,50,32,40,105,115,32,37,100,41,10,0,0,0,0,0,99,104,107,115,117,109,48,0,45,116,111,112,110,95,98,101,97,109,0,0,0,0,0,0,70,97,105,108,101,100,32,114,101,97,100,105,110,103,32,77,76,76,82,32,118,97,114,105,97,110,99,101,32,115,99,97,108,101,32,40,37,100,44,37,100,44,37,100,41,10,0,0,83,117,110,100,97,121,0,0,82,101,109,111,118,101,32,110,111,105,115,101,32,119,105,116,104,32,115,112,101,99,116,114,97,108,32,115,117,98,116,114,97,99,116,105,111,110,32,105,110,32,109,101,108,45,101,110,101,114,103,105,101,115,0,0,78,117,108,108,32,116,114,97,110,115,105,116,105,111,110,32,112,114,111,98,32,109,117,115,116,32,98,101,32,60,61,32,49,46,48,32,40,115,116,97,116,101,32,37,100,32,45,62,32,37,100,41,10,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,97,116,47,108,100,97,46,99,0,37,56,100,32,119,111,114,100,32,116,114,97,110,115,105,116,105,111,110,115,32,40,37,100,47,102,114,41,10,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,115,112,104,105,110,120,98,97,115,101,47,115,114,99,47,108,105,98,115,112,104,105,110,120,98,97,115,101,47,102,101,97,116,47,102,101,97,116,46,99,0,0,0,0,0,0,0,0,102,114,111,109,0,0,0,0,99,117,114,114,101,110,116,0,102,119,100,116,114,101,101,32,37,46,50,102,32,119,97,108,108,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,109,97,120,0,0,0,0,0,112,114,101,115,112,99,104,95,98,117,102,45,62,99,101,112,95,119,114,105,116,101,95,112,116,114,32,60,32,112,114,101,115,112,99,104,95,98,117,102,45,62,110,117,109,95,102,114,97,109,101,115,95,99,101,112,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,82,101,109,111,118,101,32,68,67,32,111,102,102,115,101,116,32,102,114,111,109,32,101,97,99,104,32,102,114,97,109,101,0,0,0,0,0,0,0,0,32,9,0,0,0,0,0,0,85,110,105,109,112,108,101,109,101,110,116,101,100,32,119,97,114,112,105,110,103,32,102,117,110,99,116,105,111,110,32,37,115,10,0,0,0,0,0,0,40,110,95,116,111,112,32,62,32,48,41,32,38,38,32,40,110,95,116,111,112,32,60,61,32,115,45,62,110,95,99,119,41,0,0,0,0,0,0,0,35,68,101,110,115,105,116,105,101,115,32,109,105,115,109,97,116,99,104,58,32,103,97,117,100,101,110,61,32,37,100,44,32,115,101,110,111,110,101,61,32,37,100,10,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,79,117,116,32,111,102,32,82,97,110,103,101,58,32,108,111,119,32,32,102,105,108,116,101,114,32,101,100,103,101,32,61,32,37,102,32,40,37,102,41,10,0,0,0,0,0,0,0,77,105,120,116,117,114,101,45,103,97,117,115,115,105,97,110,115,32,100,105,109,101,110,115,105,111,110,115,32,102,111,114,32,109,101,97,110,115,32,97,110,100,32,118,97,114,105,97,110,99,101,115,32,100,105,102,102,101,114,10,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,83,101,101,100,32,102,111,114,32,114,97,110,100,111,109,32,110,117,109,98,101,114,32,103,101,110,101,114,97,116,111,114,59,32,105,102,32,108,101,115,115,32,116,104,97,110,32,122,101,114,111,44,32,112,105,99,107,32,111,117,114,32,111,119,110,0,0,0,0,0,0,0,45,102,114,97,116,101,0,0,45,98,101,97,109,0,0,0,104,109,109,95,102,114,97,109,101,40,104,109,109,41,32,61,61,32,40,102,115,103,115,45,62,102,114,97,109,101,32,43,32,49,41,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,45,49,0,0,0,0,0,0,76,111,103,32,98,97,115,101,32,37,102,32,105,115,32,116,111,111,32,115,109,97,108,108,32,116,111,32,114,101,112,114,101,115,101,110,116,32,97,100,100,32,116,97,98,108,101,32,105,110,32,56,32,98,105,116,115,10,0,0,0,0,0,0,45,100,105,99,116,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,118,101,114,115,105,111,110,32,102,114,111,109,32,37,115,10,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,65,100,100,32,49,47,50,45,98,105,116,32,110,111,105,115,101,0,0,0,0,0,0,0,110,111,100,101,45,62,114,101,97,99,104,97,98,108,101,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,102,108,111,97,116,0,0,0,103,122,105,112,0,0,0,0,65,114,103,117,109,101,110,116,32,118,97,108,117,101,32,102,111,114,32,39,37,115,39,32,109,105,115,115,105,110,103,10,0,0,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,69,79,70,32,105,110,32,37,115,10,0,0,0,80,97,114,97,109,101,116,101,114,115,32,100,101,102,105,110,105,110,103,32,116,104,101,32,119,97,114,112,105,110,103,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,119,111,114,100,10,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,105,110,112,117,116,32,105,110,32,102,108,101,120,32,115,99,97,110,110,101,114,32,102,97,105,108,101,100,0,0,0,0,36,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,73,109,112,111,114,116,101,100,32,114,117,108,101,32,105,115,32,110,111,116,32,113,117,97,108,105,102,105,101,100,58,32,37,115,10,0,0,0,0,0,76,105,110,101,91,37,100,93,58,32,109,97,108,102,111,114,109,101,100,32,70,83,71,95,66,69,71,73,78,32,100,101,99,108,97,114,97,116,105,111,110,10,0,0,0,0,0,0,76,68,65,32,109,97,116,114,105,120,32,100,105,109,101,110,115,105,111,110,32,37,100,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,102,101,97,116,117,114,101,32,115,116,114,101,97,109,32,115,105,122,101,32,37,100,10,0,0,0,84,111,116,97,108,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,32,111,102,32,115,117,98,118,101,99,116,111,114,32,115,112,101,99,105,102,105,99,97,116,105,111,110,32,37,100,32,62,32,102,101,97,116,117,114,101,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,32,37,100,10,0,105,110,118,101,114,115,101,95,108,105,110,101,97,114,0,0,45,110,102,102,116,0,0,0,86,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,40,37,115,41,58,32,37,115,44,32,101,120,112,101,99,116,105,110,103,32,37,115,10,0,45,116,111,112,110,0,0,0,70,97,105,108,101,100,32,114,101,97,100,105,110,103,32,77,76,76,82,32,98,105,97,115,32,40,37,100,44,37,100,44,37,100,41,10,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,56,100,32,119,111,114,100,115,32,115,101,97,114,99,104,101,100,32,40,37,100,47,102,114,41,10,0,0,0,0,0,45,112,108,95,98,101,97,109,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,97,114,112,105,110,103,32,102,117,110,99,116,105,111,110,32,116,121,112,101,32,40,111,114,32,115,104,97,112,101,41,0,0,0,0,0,0,0,0,45,102,119,100,102,108,97,116,101,102,119,105,100,0,0,0,84,114,97,110,115,105,116,105,111,110,0,0,0,0,0,0,102,119,100,116,114,101,101,32,37,46,50,102,32,67,80,85,32,37,46,51,102,32,120,82,84,10,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,98,101,115,116,112,97,116,104,0,0,0,0,0,0,0,0,40,105,100,32,62,61,32,48,41,32,38,38,32,40,105,100,32,60,32,115,45,62,110,95,115,101,110,41,0,0,0,0,35,70,101,97,116,117,114,101,32,109,105,115,109,97,116,99,104,58,32,103,97,117,100,101,110,61,32,37,100,44,32,115,101,110,111,110,101,61,32,37,100,10,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,118,97,114,102,108,111,111,114,32,62,32,48,46,48,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,69,110,100,105,97,110,110,101,115,115,32,111,102,32,105,110,112,117,116,32,100,97,116,97,44,32,98,105,103,32,111,114,32,108,105,116,116,108,101,44,32,105,103,110,111,114,101,100,32,105,102,32,78,73,83,84,32,111,114,32,77,83,32,87,97,118,0,0,0,0,0,0,45,102,115,103,117,115,101,97,108,116,112,114,111,110,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,45,104,109,109,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,112,104,111,110,101,95,108,111,111,112,95,115,101,97,114,99,104,46,99,0,0,0,0,77,117,115,116,32,98,121,116,101,45,115,119,97,112,32,37,115,10,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,117,109,32,111,102,32,115,112,101,101,99,104,32,102,114,97,109,101,115,32,116,111,32,116,114,105,103,103,101,114,32,118,97,100,32,102,114,111,109,32,115,112,101,101,99,104,32,116,111,32,115,105,108,101,110,99,101,46,0,0,0,0,0,78,111,118,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,116,104,101,32,119,97,114,112,105,110,103,32,102,117,110,99,116,105,111,110,46,10,0,0,0,0,0,119,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,97,114,103,117,109,101,110,116,32,110,97,109,101,32,39,37,115,39,10,0,0,0,0,0,77,97,120,32,97,114,103,45,118,97,108,117,101,32,108,105,109,105,116,40,37,100,41,32,101,120,99,101,101,100,101,100,59,32,105,110,99,114,101,97,115,101,32,66,73,79,95,72,68,82,65,82,71,95,77,65,88,10,0,0,0,0,0,0,45,117,119,0,0,0,0,0,79,99,116,0,0,0,0,0,82,101,97,100,105,110,103,32,99,108,97,115,115,100,101,102,32,102,114,111,109,32,39,37,115,39,10,0,0,0,0,0,78,117,109,32,111,102,32,115,112,101,101,99,104,32,102,114,97,109,101,115,32,116,111,32,116,114,105,103,103,101,114,32,118,97,100,32,102,114,111,109,32,115,105,108,101,110,99,101,32,116,111,32,115,112,101,101,99,104,46,0,0,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,76,77,32,102,105,108,101,110,97,109,101,32,105,110,32,104,101,97,100,101,114,10,0,0,0,0,0,0,102,97,116,97,108,32,101,114,114,111,114,32,45,32,115,99,97,110,110,101,114,32,105,110,112,117,116,32,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,101,114,114,111,114,0,0,0,77,117,108,116,105,112,108,121,32,100,101,102,105,110,101,100,32,115,121,109,98,111,108,58,32,37,115,10,0,0,0,0,70,83,71,95,66,69,71,73,78,0,0,0,0,0,0,0,37,115,58,32,98,105,111,95,102,114,101,97,100,95,51,100,40,108,100,97,41,32,102,97,105,108,101,100,10,0,0,0,83,117,98,118,101,99,116,111,114,32,115,112,101,99,105,102,105,99,97,116,105,111,110,115,32,114,101,113,117,105,114,101,32,115,105,110,103,108,101,45,115,116,114,101,97,109,32,102,101,97,116,117,114,101,115,33,0,0,0,0,0,0,0,0,112,105,101,99,101,119,105,115,101,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,110,103,114,97,109,95,115,101,97,114,99,104,95,102,119,100,102,108,97,116,46,99,0,45,110,99,101,112,0,0,0,49,46,48,0,0,0,0,0,45,100,115,0,0,0,0,0,70,97,105,108,101,100,32,114,101,97,100,105,110,103,32,77,76,76,82,32,114,111,116,97,116,105,111,110,32,40,37,100,44,37,100,44,37,100,44,37,100,41,10,0,0,0,0,0,50,53,0,0,0,0,0,0,83,101,112,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,114,99,47,68,101,116,97,105,84,104,83,47,112,111,99,107,101,116,115,112,104,105,110,120,46,106,115,47,112,111,99,107,101,116,115,112,104,105,110,120,47,115,114,99,47,108,105,98,112,111,99,107,101,116,115,112,104,105,110,120,47,112,111,99,107,101,116,115,112,104,105,110,120,46,99,0,37,56,100,32,99,104,97,110,110,101,108,115,32,115,101,97,114,99,104,101,100,32,40,37,100,47,102,114,41,10,0,0,65,117,103,0,0,0,0,0,83,85,67,67,69,83,83,0,82,101,116,117,114,110,84,121,112,101,0,0,0,0,0,0,192,31,0,0,88,26,0,0,216,192,0,0,0,0,0,0,119,111,114,100,95,116,114,97,110,115,105,116,105,111,110,0,116,114,105,112,104,111,110,101,95,97,100,100,0,0,0,0,115,115,101,113,95,99,111,109,112,114,101,115,115,0,0,0,115,101,116,95,114,101,97,108,95,119,105,100,0,0,0,0,115,101,110,111,110,101,95,101,118,97,108,0,0,0,0,0,112,116,109,95,109,103,97,117,95,99,111,100,101,98,111,111,107,95,101,118,97,108,0,0,112,115,117,98,116,114,101,101,95,97,100,100,95,116,114,97,110,115,0,0,0,0,0,0,112,115,95,108,97,116,116,105,99,101,95,100,101,108,101,116,101,95,117,110,114,101,97,99,104,97,98,108,101,0,0,0,112,115,95,108,97,116,116,105,99,101,95,98,101,115,116,112,97,116,104,0,0,0,0,0,112,114,117,110,101,95,119,111,114,100,95,99,104,97,110,0,112,114,117,110,101,95,110,111,110,114,111,111,116,95,99,104,97,110,0,0,0,0,0,0,112,111,112,117,108,97,116,101,95,108,114,100,105,112,104,0,112,97,114,115,101,95,115,117,98,118,101,99,115,0,0,0,110,103,114,97,109,95,115,101,97,114,99,104,95,115,97,118,101,95,98,112,0,0,0,0,110,103,114,97,109,95,115,101,97,114,99,104,95,108,97,116,116,105,99,101,0,0,0,0,110,103,114,97,109,95,115,101,97,114,99,104,95,102,105,110,100,95,101,120,105,116,0,0,110,103,114,97,109,95,115,101,97,114,99,104,95,98,112,50,105,116,111,114,0,0,0,0,110,103,114,97,109,95,115,101,97,114,99,104,95,97,108,108,111,99,95,97,108,108,95,114,99,0,0,0,0,0,0,0,110,103,114,97,109,95,99,111,109,112,117,116,101,95,115,101,103,95,115,99,111,114,101,0,109,100,101,102,95,112,104,111,110,101,95,115,116,114,0,0,109,100,101,102,95,99,105,112,104,111,110,101,95,115,116,114,0,0,0,0,0,0,0,0,108,109,51,103,95,116,101,109,112,108,97,116,101,95,105,116,101,114,0,0,0,0,0,0,108,109,51,103,95,97,100,100,95,117,103,0,0,0,0,0,108,97,115,116,95,112,104,111,110,101,95,116,114,97,110,115,105,116,105,111,110,0,0,0,106,115,103,102,95,105,109,112,111,114,116,95,114,117,108,101,0,0,0,0,0,0,0,0,104,109,109,95,99,111,110,116,101,120,116,95,105,110,105,116,0,0,0,0,0,0,0,0,103,110,111,100,101,95,102,114,101,101,0,0,0,0,0,0,103,97,117,100,101,110,95,105,110,105,116,0,0,0,0,0,103,97,117,100,101,110,95,100,105,115,116,0,0,0,0,0,102,119,100,102,108,97,116,95,119,111,114,100,95,116,114,97,110,115,105,116,105,111,110,0,102,119,100,102,108,97,116,95,112,114,117,110,101,95,99,104,97,110,0,0,0,0,0,0,102,115,103,95,115,101,97,114,99,104,95,119,111,114,100,95,116,114,97,110,115,0,0,0,102,115,103,95,115,101,97,114,99,104,95,115,116,101,112,0,102,115,103,95,115,101,97,114,99,104,95,115,116,97,114,116,0,0,0,0,0,0,0,0,102,115,103,95,115,101,97,114,99,104,95,115,101,110,95,97,99,116,105,118,101,0,0,0,102,115,103,95,115,101,97,114,99,104,95,112,110,111,100,101,95,116,114,97,110,115,0,0,102,115,103,95,115,101,97,114,99,104,95,112,110,111,100,101,95,101,120,105,116,0,0,0,102,115,103,95,115,101,97,114,99,104,95,104,109,109,95,112,114,117,110,101,95,112,114,111,112,0,0,0,0,0,0,0,102,115,103,95,115,101,97,114,99,104,95,104,109,109,95,101,118,97,108,0,0,0,0,0,102,115,103,95,112,115,117,98,116,114,101,101,95,105,110,105,116,0,0,0,0,0,0,0,102,115,103,95,109,111,100,101,108,95,116,97,103,95,116,114,97,110,115,95,97,100,100,0,102,115,103,95,109,111,100,101,108,95,110,117,108,108,95,116,114,97,110,115,95,99,108,111,115,117,114,101,0,0,0,0,102,115,103,95,108,101,120,116,114,101,101,95,108,99,95,114,99,0,0,0,0,0,0,0,102,115,103,95,104,105,115,116,111,114,121,95,117,116,116,95,115,116,97,114,116,0,0,0,102,101,97,116,95,115,51,95,99,101,112,95,100,99,101,112,0,0,0,0,0,0,0,0,102,101,97,116,95,115,51,95,99,101,112,0,0,0,0,0,102,101,97,116,95,115,51,95,49,120,51,57,95,99,101,112,50,102,101,97,116,0,0,0,102,101,97,116,95,115,50,95,52,120,95,99,101,112,50,102,101,97,116,0,0,0,0,0,102,101,97,116,95,114,101,97,100,95,108,100,97,0,0,0,102,101,97,116,95,97,114,114,97,121,95,114,101,97,108,108,111,99,0,0,0,0,0,0,102,101,97,116,95,97,114,114,97,121,95,97,108,108,111,99,0,0,0,0,0,0,0,0,102,101,97,116,95,49,115,95,99,95,100,95,108,100,95,100,100,95,99,101,112,50,102,101,97,116,0,0,0,0,0,0,102,101,97,116,95,49,115,95,99,95,100,95,100,100,95,99,101,112,50,102,101,97,116,0,102,101,95,112,114,111,99,101,115,115,95,102,114,97,109,101,115,0,0,0,0,0,0,0,102,101,95,112,114,101,115,112,99,104,95,119,114,105,116,101,95,112,99,109,0,0,0,0,102,101,95,112,114,101,115,112,99,104,95,119,114,105,116,101,95,99,101,112,0,0,0,0,102,101,95,105,110,105,116,95,97,117,116,111,95,114,0,0,101,120,112,97,110,100,95,114,117,108,101,0,0,0,0,0,101,118,97,108,95,119,111,114,100,95,99,104,97,110,0,0,101,118,97,108,95,110,111,110,114,111,111,116,95,99,104,97,110,0,0,0,0,0,0,0,100,105,99,116,95,119,111,114,100,105,100,0,0,0,0,0,100,105,99,116,95,114,101,97,108,95,119,111,114,100,0,0,100,105,99,116,95,114,101,97,100,0,0,0,0,0,0,0,100,105,99,116,95,102,105,108,108,101,114,95,119,111,114,100,0,0,0,0,0,0,0,0,100,105,99,116,50,112,105,100,95,98,117,105,108,100,0,0,100,101,115,116,114,111,121,95,102,119,100,102,108,97,116,95,99,104,97,110,0,0,0,0,99,114,101,97,116,101,95,100,97,103,95,110,111,100,101,115,0,0,0,0,0,0,0,0,99,111,109,112,117,116,101,95], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([100,105,115,116,0,0,0,0,99,111,109,112,114,101,115,115,95,108,101,102,116,95,114,105,103,104,116,95,99,111,110,116,101,120,116,95,116,114,101,101,0,0,0,0,0,0,0,0,99,109,110,0,0,0,0,0,99,105,112,104,111,110,101,95,97,100,100,0,0,0,0,0,98,117,105,108,100,95,102,119,100,102,108,97,116,95,99,104,97,110,0,0,0,0,0,0,98,108,107,97,114,114,97,121,95,108,105,115,116,95,97,112,112,101,110,100,0,0,0,0,98,105,111,95,102,114,101,97,100,95,51,100,0,0,0,0,98,105,110,95,109,100,101,102,95,112,104,111,110,101,95,105,100,0,0,0,0,0,0,0,98,105,110,95,109,100,101,102,95,99,105,112,104,111,110,101,95,115,116,114,0,0,0,0,97,99,109,111,100,95,112,114,111,99,101,115,115,95,99,101,112,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,88,121,0,0,16,0,0,0,72,67,0,0,24,52,0,0,48,118,0,0,16,0,0,0,72,67,0,0,56,50,0,0,240,143,0,0,8,0,0,0,224,135,0,0,144,45,0,0,96,26,0,0,4,0,0,0,168,43,0,0,120,42,0,0,112,152,0,0,4,0,0,0,72,41,0,0,192,40,0,0,72,184,0,0,2,0,0,0,160,39,0,0,216,38,0,0,200,31,0,0,4,0,0,0,56,36,0,0,192,35,0,0,104,187,0,0,2,0,0,0,240,34,0,0,144,34,0,0,248,41,0,0,2,0,0,0,144,33,0,0,200,32,0,0,64,40,0,0,4,0,0,0,104,30,0,0,72,29,0,0,168,37,0,0,4,0,0,0,96,28,0,0,232,27,0,0,152,35,0,0,16,0,0,0,232,68,0,0,56,27,0,0,88,34,0,0,16,0,0,0,232,68,0,0,136,26,0,0,72,193,0,0,2,0,0,0,240,24,0,0,136,24,0,0,64,31,0,0,16,0,0,0,72,67,0,0,72,24,0,0,64,29,0,0,2,0,0,0,176,23,0,0,48,23,0,0,88,168,0,0,2,0,0,0,144,193,0,0,168,191,0,0,16,164,0,0,2,0,0,0,144,193,0,0,128,190,0,0,112,38,0,0,8,0,0,0,88,47,0,0,128,189,0,0,184,26,0,0,8,0,0,0,88,187,0,0,64,188,0,0,168,24,0,0,8,0,0,0,0,0,0,0,208,185,0,0,144,71,0,0,16,0,0,0,72,67,0,0,32,185,0,0,200,58,0,0,2,0,0,0,144,184,0,0,0,184,0,0,176,158,0,0,16,0,0,0,72,67,0,0,192,182,0,0,240,153,0,0,16,0,0,0,232,68,0,0,0,181,0,0,32,149,0,0,16,0,0,0,232,68,0,0,136,178,0,0,72,62,0,0,16,0,0,0,72,67,0,0,216,177,0,0,16,87,0,0,8,0,0,0,32,118,0,0,16,177,0,0,216,88,0,0,2,0,0,0,240,24,0,0,112,176,0,0,80,66,0,0,8,0,0,0,64,182,0,0,240,174,0,0,128,54,0,0,8,0,0,0,176,174,0,0,120,173,0,0,200,64,0,0,16,0,0,0,72,67,0,0,56,172,0,0,168,63,0,0,8,0,0,0,72,140,0,0,232,171,0,0,8,57,0,0,4,0,0,0,160,171,0,0,64,171,0,0,112,161,0,0,8,0,0,0,0,0,0,0,176,170,0,0,232,60,0,0,2,0,0,0,176,23,0,0,8,170,0,0,128,60,0,0,8,0,0,0,0,0,0,0,88,169,0,0,248,189,0,0,8,0,0,0,0,0,0,0,112,171,0,0,80,157,0,0,8,0,0,0,0,0,0,0,128,170,0,0,232,156,0,0,8,0,0,0,0,0,0,0,0,169,0,0,80,156,0,0,8,0,0,0,0,0,0,0,24,168,0,0,72,155,0,0,8,0,0,0,0,0,0,0,144,166,0,0,40,85,0,0,4,0,0,0,56,166,0,0,168,165,0,0,56,134,0,0,8,0,0,0,0,0,0,0,96,165,0,0,144,94,0,0,8,0,0,0,0,0,0,0,192,164,0,0,40,72,0,0,4,0,0,0,56,166,0,0,136,162,0,0,248,31,0,0,8,0,0,0,0,0,0,0,128,161,0,0,104,26,0,0,4,0,0,0,16,161,0,0,208,160,0,0,160,23,0,0,2,0,0,0,88,160,0,0,152,159,0,0,136,38,0,0,8,0,0,0,0,0,0,0,96,157,0,0,48,67,0,0,8,0,0,0,0,0,0,0,240,156,0,0,112,122,0,0,16,0,0,0,232,68,0,0,96,156,0,0,88,193,0,0,2,0,0,0,88,160,0,0,160,155,0,0,152,187,0,0,2,0,0,0,136,154,0,0,88,153,0,0,184,180,0,0,8,0,0,0,176,23,0,0,160,151,0,0,128,151,0,0,8,0,0,0,0,0,0,0,32,151,0,0,160,150,0,0,2,0,0,0,176,23,0,0,120,150,0,0,80,150,0,0,2,0,0,0,144,184,0,0,184,149,0,0,64,154,0,0,4,0,0,0,24,149,0,0,224,147,0,0,80,184,0,0,4,0,0,0,64,147,0,0,168,146,0,0,248,67,0,0,4,0,0,0,184,145,0,0,112,145,0,0,248,66,0,0,4,0,0,0,64,147,0,0,176,144,0,0,208,65,0,0,4,0,0,0,24,143,0,0,160,142,0,0,104,64,0,0,4,0,0,0,184,145,0,0,200,141,0,0,64,63,0,0,4,0,0,0,208,140,0,0,104,140,0,0,136,62,0,0,4,0,0,0,184,145,0,0,112,139,0,0,48,154,0,0,2,0,0,0,176,23,0,0,24,138,0,0,8,188,0,0,4,0,0,0,216,137,0,0,144,137,0,0,176,136,0,0,4,0,0,0,96,137,0,0,32,137,0,0,80,36,0,0,16,0,0,0,72,67,0,0,80,136,0,0,112,104,0,0,16,0,0,0,232,68,0,0,72,135,0,0,128,144,0,0,16,0,0,0,232,68,0,0,144,134,0,0,120,149,0,0,16,0,0,0,232,68,0,0,232,133,0,0,224,54,0,0,16,0,0,0,72,67,0,0,48,132,0,0,120,61,0,0,2,0,0,0,160,130,0,0,208,129,0,0,176,61,0,0,2,0,0,0,144,184,0,0,208,127,0,0,216,60,0,0,2,0,0,0,144,127,0,0,48,127,0,0,216,104,0,0,2,0,0,0,176,23,0,0,64,126,0,0,104,188,0,0,2,0,0,0,136,154,0,0,40,125,0,0,192,136,0,0,2,0,0,0,144,193,0,0,128,123,0,0,216,184,0,0,9,0,0,0,0,0,0,0,8,123,0,0,136,80,0,0,8,0,0,0,0,0,0,0,168,122,0,0,200,137,0,0,16,0,0,0,72,67,0,0,232,121,0,0,160,121,0,0,2,0,0,0,152,121,0,0,40,121,0,0,72,120,0,0,16,0,0,0,72,67,0,0,32,120,0,0,168,136,0,0,8,0,0,0,0,0,0,0,240,119,0,0,152,130,0,0,8,0,0,0,0,0,0,0,48,119,0,0,64,118,0,0,8,0,0,0,72,136,0,0,72,118,0,0,80,30,0,0,4,0,0,0,136,117,0,0,96,117,0,0,48,53,0,0,4,0,0,0,80,117,0,0,248,116,0,0,200,51,0,0,4,0,0,0,144,116,0,0,0,116,0,0,184,50,0,0,4,0,0,0,32,115,0,0,128,114,0,0,72,25,0,0,4,0,0,0,152,113,0,0,128,113,0,0,32,58,0,0,4,0,0,0,80,193,0,0,184,112,0,0,224,96,0,0,4,0,0,0,80,193,0,0,96,112,0,0,120,191,0,0,4,0,0,0,80,193,0,0,72,111,0,0,80,55,0,0,4,0,0,0,8,111,0,0,160,110,0,0,24,54,0,0,4,0,0,0,120,110,0,0,72,110,0,0,216,109,0,0,16,0,0,0,72,67,0,0,144,109,0,0,160,108,0,0,2,0,0,0,176,23,0,0,24,107,0,0,216,96,0,0,8,0,0,0,0,0,0,0,160,106,0,0,8,73,0,0,8,0,0,0,0,0,0,0,0,106,0,0,128,96,0,0,8,0,0,0,0,0,0,0,64,105,0,0,200,189,0,0,16,0,0,0,232,68,0,0,160,104,0,0,48,24,0,0,16,0,0,0,232,68,0,0,24,103,0,0,32,60,0,0,8,0,0,0,0,0,0,0,120,102,0,0,216,133,0,0,4,0,0,0,64,102,0,0,216,101,0,0,0,94,0,0,4,0,0,0,88,160,0,0,56,101,0,0,40,152,0,0,8,0,0,0,0,0,0,0,112,100,0,0,184,174,0,0,2,0,0,0,0,0,0,0,248,98,0,0,208,168,0,0,8,0,0,0,0,0,0,0,88,98,0,0,144,164,0,0,8,0,0,0,0,0,0,0,240,97,0,0,96,159,0,0,8,0,0,0,0,0,0,0,40,97,0,0,200,96,0,0,8,0,0,0,0,0,0,0,16,96,0,0,152,95,0,0,8,0,0,0,0,0,0,0,56,95,0,0,184,94,0,0,8,0,0,0,0,0,0,0,152,94,0,0,16,94,0,0,16,0,0,0,72,67,0,0,136,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,242,0,0,110,0,0,0,18,2,0,0,160,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,242,0,0,104,3,0,0,180,2,0,0,78,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,243,0,0,58,1,0,0,206,4,0,0,98,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,243,0,0,160,1,0,0,82,0,0,0,28,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,243,0,0,160,1,0,0,30,0,0,0,28,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,243,0,0,160,1,0,0,66,0,0,0,28,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,244,0,0,196,2,0,0,110,1,0,0,186,0,0,0,2,3,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,244,0,0,186,4,0,0,20,3,0,0,186,0,0,0,126,4,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,244,0,0,178,2,0,0,28,3,0,0,186,0,0,0,8,3,0,0,156,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,244,0,0,194,4,0,0,96,2,0,0,186,0,0,0,244,2,0,0,124,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,245,0,0,172,4,0,0,154,1,0,0,186,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,245,0,0,172,2,0,0,246,1,0,0,186,0,0,0,32,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,245,0,0,138,0,0,0,248,1,0,0,186,0,0,0,46,4,0,0,38,0,0,0,34,3,0,0,50,0,0,0,74,1,0,0,50,4,0,0,126,1,0,0,248,255,255,255,112,245,0,0,178,0,0,0,76,0,0,0,42,1,0,0,124,0,0,0,14,0,0,0,236,1,0,0,86,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,245,0,0,146,4,0,0,66,4,0,0,186,0,0,0,172,0,0,0,202,0,0,0,90,4,0,0,116,2,0,0,18,1,0,0,24,0,0,0,10,4,0,0,248,255,255,255,152,245,0,0,78,2,0,0,186,3,0,0,12,4,0,0,74,4,0,0,122,3,0,0,148,1,0,0,212,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,245,0,0,90,1,0,0,44,3,0,0,186,0,0,0,180,1,0,0,120,1,0,0,182,0,0,0,80,2,0,0,224,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,245,0,0,2,1,0,0,26,2,0,0,186,0,0,0,138,1,0,0,14,3,0,0,6,1,0,0,252,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,245,0,0,152,4,0,0,2,0,0,0,186,0,0,0,128,2,0,0,176,4,0,0,154,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,0,176,0,0,0,16,0,0,0,186,0,0,0,86,1,0,0,88,1,0,0,52,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,246,0,0,166,0,0,0,10,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,246,0,0,102,0,0,0,94,2,0,0,98,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,246,0,0,20,0,0,0,206,2,0,0,186,0,0,0,150,0,0,0,62,3,0,0,128,0,0,0,134,0,0,0,126,0,0,0,146,0,0,0,144,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,246,0,0,178,1,0,0,62,0,0,0,186,0,0,0,96,3,0,0,100,3,0,0,88,3,0,0,98,3,0,0,172,1,0,0,92,3,0,0,90,3,0,0,218,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,246,0,0,140,0,0,0,78,0,0,0,186,0,0,0,202,3,0,0,196,3,0,0,182,3,0,0,188,3,0,0,12,3,0,0,194,3,0,0,46,3,0,0,210,3,0,0,206,3,0,0,204,3,0,0,60,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,246,0,0,208,0,0,0,6,0,0,0,186,0,0,0,138,4,0,0,122,4,0,0,116,4,0,0,118,4,0,0,84,4,0,0,120,4,0,0,110,2,0,0,132,4,0,0,130,4,0,0,128,4,0,0,190,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,246,0,0,72,1,0,0,150,1,0,0,186,0,0,0,56,2,0,0,84,3,0,0,250,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,246,0,0,100,0,0,0,226,2,0,0,186,0,0,0,68,3,0,0,244,3,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,246,0,0,234,0,0,0,10,3,0,0,186,0,0,0,122,0,0,0,254,2,0,0,248,2,0,0,44,4,0,0,66,2,0,0,24,4,0,0,248,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,246,0,0,234,2,0,0,70,2,0,0,186,0,0,0,102,4,0,0,180,4,0,0,114,3,0,0,196,1,0,0,74,0,0,0,120,3,0,0,94,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,247,0,0,234,2,0,0,70,0,0,0,186,0,0,0,158,1,0,0,168,0,0,0,136,1,0,0,146,3,0,0,14,2,0,0,160,2,0,0,134,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,247,0,0,234,2,0,0,204,1,0,0,186,0,0,0,86,3,0,0,212,2,0,0,242,3,0,0,0,1,0,0,120,2,0,0,92,2,0,0,192,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,247,0,0,234,2,0,0,120,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,247,0,0,228,0,0,0,146,2,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,248,0,0,234,2,0,0,96,1,0,0,186,0,0,0,100,2,0,0,56,1,0,0,42,2,0,0,178,3,0,0,60,1,0,0,126,3,0,0,54,3,0,0,92,0,0,0,190,0,0,0,16,4,0,0,214,1,0,0,62,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,248,0,0,204,4,0,0,130,0,0,0,186,0,0,0,42,0,0,0,118,2,0,0,62,2,0,0,4,4,0,0,224,0,0,0,68,2,0,0,182,2,0,0,166,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,104,248,0,0,208,3,0,0,102,3,0,0,200,255,255,255,200,255,255,255,104,248,0,0,112,0,0,0,210,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,248,0,0,40,1,0,0,52,4,0,0,154,2,0,0,140,3,0,0,32,2,0,0,218,3,0,0,48,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,248,0,0,234,2,0,0,112,1,0,0,186,0,0,0,86,3,0,0,212,2,0,0,242,3,0,0,0,1,0,0,120,2,0,0,92,2,0,0,192,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,248,0,0,234,2,0,0,188,2,0,0,186,0,0,0,86,3,0,0,212,2,0,0,242,3,0,0,0,1,0,0,120,2,0,0,92,2,0,0,192,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,248,0,0,188,0,0,0,26,4,0,0,52,3,0,0,76,4,0,0,106,3,0,0,164,0,0,0,186,1,0,0,24,3,0,0,58,2,0,0,60,4,0,0,94,0,0,0,212,3,0,0,38,2,0,0,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,248,0,0,52,2,0,0,104,4,0,0,66,1,0,0,126,2,0,0,124,2,0,0,136,3,0,0,60,3,0,0,168,3,0,0,246,3,0,0,230,0,0,0,160,0,0,0,198,0,0,0,200,4,0,0,36,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,248,0,0,36,0,0,0,20,2,0,0,52,3,0,0,76,4,0,0,72,4,0,0,70,3,0,0,186,1,0,0,24,3,0,0,58,2,0,0,56,0,0,0,94,0,0,0,106,4,0,0,38,2,0,0,246,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,240,248,0,0,162,0,0,0,236,3,0,0,252,255,255,255,252,255,255,255,240,248,0,0,106,2,0,0,48,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,249,0,0,32,4,0,0,108,4,0,0,252,255,255,255,252,255,255,255,8,249,0,0,244,1,0,0,130,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,32,249,0,0,130,1,0,0,208,4,0,0,248,255,255,255,248,255,255,255,32,249,0,0,236,2,0,0,100,4,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,56,249,0,0,240,1,0,0,174,3,0,0,248,255,255,255,248,255,255,255,56,249,0,0,82,2,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,249,0,0,158,3,0,0,238,2,0,0,98,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,250,0,0,154,4,0,0,70,4,0,0,46,1,0,0,126,2,0,0,124,2,0,0,136,3,0,0,228,1,0,0,168,3,0,0,246,3,0,0,230,0,0,0,160,0,0,0,198,0,0,0,198,3,0,0,112,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,250,0,0,134,2,0,0,232,2,0,0,0,2,0,0,76,4,0,0,72,4,0,0,70,3,0,0,136,0,0,0,24,3,0,0,58,2,0,0,56,0,0,0,94,0,0,0,106,4,0,0,136,4,0,0,36,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,250,0,0,54,4,0,0,102,2,0,0,186,0,0,0,74,2,0,0,18,4,0,0,108,2,0,0,170,4,0,0,4,2,0,0,206,1,0,0,202,1,0,0,92,1,0,0,64,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,250,0,0,230,1,0,0,226,0,0,0,186,0,0,0,240,3,0,0,0,4,0,0,164,3,0,0,56,4,0,0,82,4,0,0,144,1,0,0,252,3,0,0,228,2,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,250,0,0,68,4,0,0,16,2,0,0,186,0,0,0,148,0,0,0,8,2,0,0,118,0,0,0,138,2,0,0,190,4,0,0,230,2,0,0,118,3,0,0,0,3,0,0,24,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,250,0,0,84,1,0,0,202,2,0,0,186,0,0,0,172,3,0,0,216,3,0,0,198,1,0,0,14,4,0,0,152,1,0,0,68,1,0,0,158,2,0,0,232,3,0,0,220,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,251,0,0,78,3,0,0,58,0,0,0,16,3,0,0,126,2,0,0,124,2,0,0,136,3,0,0,60,3,0,0,168,3,0,0,246,3,0,0,86,2,0,0,250,2,0,0,26,1,0,0,200,4,0,0,36,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,251,0,0,48,0,0,0,38,4,0,0,156,3,0,0,76,4,0,0,72,4,0,0,70,3,0,0,186,1,0,0,24,3,0,0,58,2,0,0,134,3,0,0,196,0,0,0,54,0,0,0,38,2,0,0,246,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,251,0,0,162,4,0,0,116,1,0,0,8,1,0,0,166,1,0,0,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,251,0,0,162,4,0,0,110,3,0,0,8,1,0,0,166,1,0,0,22,3,0,0,106,0,0,0,22,4,0,0,208,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,251,0,0,162,4,0,0,38,1,0,0,8,1,0,0,166,1,0,0,118,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,0,0,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,0,0,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,55,83,101,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,52,87,111,114,100,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,84,114,97,110,115,105,116,105,111,110,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,67,111,110,102,105,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,80,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,82,101,99,111,103,110,105,122,101,114,69,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,55,83,101,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,52,87,111,114,100,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,84,114,97,110,115,105,116,105,111,110,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,67,111,110,102,105,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,80,75,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,82,101,99,111,103,110,105,122,101,114,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,55,83,101,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,52,87,111,114,100,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,84,114,97,110,115,105,116,105,111,110,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,67,111,110,102,105,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,115,78,83,95,57,97,108,108,111,99,97,116,111,114,73,115,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,55,83,101,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,52,87,111,114,100,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,84,114,97,110,115,105,116,105,111,110,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,67,111,110,102,105,103,73,116,101,109,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,55,83,101,103,73,116,101,109,69,0,0,0,0,0,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,55,71,114,97,109,109,97,114,69,0,0,0,0,0,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,52,87,111,114,100,69,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,84,114,97,110,115,105,116,105,111,110,69,0,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,82,101,116,117,114,110,84,121,112,101,69,0,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,82,101,99,111,103,110,105,122,101,114,69,0,0,78,49,52,112,111,99,107,101,116,115,112,104,105,110,120,106,115,49,48,67,111,110,102,105,103,73,116,101,109,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,68,110,0,0,0,0,0,0,64,221,0,0,184,221,0,0,64,221,0,0,0,222,0,0,0,0,0,0,8,222,0,0,0,0,0,0,24,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,222,0,0,56,243,0,0,0,0,0,0,0,0,0,0,104,222,0,0,56,243,0,0,0,0,0,0,0,0,0,0,128,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,222,0,0,0,0,0,0,88,247,0,0,0,0,0,0,184,222,0,0,0,0,0,0,112,247,0,0,0,0,0,0,224,222,0,0,0,0,0,0,136,247,0,0,0,0,0,0,32,223,0,0,0,0,0,0,160,247,0,0,0,0,0,0,96,223,0,0,0,0,0,0,184,247,0,0,0,0,0,0,168,223,0,0,0,0,0,0,208,247,0,0,0,0,0,0,240,223,0,0,0,0,0,0,88,251,0,0,0,0,0,0,16,224,0,0,1,0,0,0,88,247,0,0,0,0,0,0,56,224,0,0,1,0,0,0,112,247,0,0,0,0,0,0,96,224,0,0,1,0,0,0,136,247,0,0,0,0,0,0,168,224,0,0,1,0,0,0,160,247,0,0,0,0,0,0,232,224,0,0,1,0,0,0,184,247,0,0,0,0,0,0,48,225,0,0,1,0,0,0,208,247,0,0,0,0,0,0,120,225,0,0,1,0,0,0,88,251,0,0,0,0,0,0,160,225,0,0,104,221,0,0,184,225,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,88,250,0,0,0,0,0,0,104,221,0,0,0,226,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,96,250,0,0,0,0,0,0,104,221,0,0,72,226,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,104,250,0,0,0,0,0,0,104,221,0,0,144,226,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,112,250,0,0,0,0,0,0,0,0,0,0,216,226,0,0,32,246,0,0,0,0,0,0,0,0,0,0,8,227,0,0,32,246,0,0,0,0,0,0,104,221,0,0,56,227,0,0,0,0,0,0,1,0,0,0,216,248,0,0,0,0,0,0,104,221,0,0,80,227,0,0,0,0,0,0,1,0,0,0,216,248,0,0,0,0,0,0,104,221,0,0,104,227,0,0,0,0,0,0,1,0,0,0,224,248,0,0,0,0,0,0,104,221,0,0,128,227,0,0,0,0,0,0,1,0,0,0,224,248,0,0,0,0,0,0,104,221,0,0,152,227,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,8,251,0,0,0,8,0,0,104,221,0,0,224,227,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,8,251,0,0,0,8,0,0,104,221,0,0,40,228,0,0,0,0,0,0,3,0,0,0,232,247,0,0,2,0,0,0,40,244,0,0,2,0,0,0,88,248,0,0,0,8,0,0,104,221,0,0,112,228,0,0,0,0,0,0,3,0,0,0,232,247,0,0,2,0,0,0,40,244,0,0,2,0,0,0,96,248,0,0,0,8,0,0,0,0,0,0,184,228,0,0,232,247,0,0,0,0,0,0,0,0,0,0,208,228,0,0,232,247,0,0,0,0,0,0,104,221,0,0,232,228,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,232,248,0,0,2,0,0,0,104,221,0,0,0,229,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,232,248,0,0,2,0,0,0,0,0,0,0,24,229,0,0,0,0,0,0,48,229,0,0,224,249,0,0,0,0,0,0,104,221,0,0,80,229,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,208,244,0,0,0,0,0,0,104,221,0,0,152,229,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,232,244,0,0,0,0,0,0,104,221,0,0,224,229,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,0,245,0,0,0,0,0,0,104,221,0,0,40,230,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,24,245,0,0,0,0,0,0,0,0,0,0,112,230,0,0,232,247,0,0,0,0,0,0,0,0,0,0,136,230,0,0,232,247,0,0,0,0,0,0,104,221,0,0,160,230,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,240,249,0,0,2,0,0,0,104,221,0,0,200,230,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,240,249,0,0,2,0,0,0,104,221,0,0,240,230,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,240,249,0,0,2,0,0,0,104,221,0,0,24,231,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,240,249,0,0,2,0,0,0,104,221,0,0,64,231,0,0,0,0,0,0,1,0,0,0,80,249,0,0,0,0,0,0,104,221,0,0,104,231,0,0,0,0,0,0,1,0,0,0,104,249,0,0,0,0,0,0,104,221,0,0,144,231,0,0,0,0,0,0,1,0,0,0,128,249,0,0,0,0,0,0,104,221,0,0,208,231,0,0,0,0,0,0,1,0,0,0,152,249,0,0,0,0,0,0,104,221,0,0,16,232,0,0,0,0,0,0,1,0,0,0,176,249,0,0,0,0,0,0,104,221,0,0,88,232,0,0,0,0,0,0,1,0,0,0,200,249,0,0,0,0,0,0,0,0,0,0,160,232,0,0,208,248,0,0,0,0,0,0,0,0,0,0,184,232,0,0,232,247,0,0,0,0,0,0,104,221,0,0,208,232,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,0,251,0,0,2,0,0,0,104,221,0,0,232,232,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,0,251,0,0,2,0,0,0,0,0,0,0,0,233,0,0,0,0,0,0,40,233,0,0,0,0,0,0,80,233,0,0,0,0,0,0,120,233,0,0,0,0,0,0,160,233,0,0,8,249,0,0,0,0,0,0,0,0,0,0,232,233,0,0,40,250,0,0,0,0,0,0,0,0,0,0,8,234,0,0,56,247,0,0,0,0,0,0,0,0,0,0,48,234,0,0,56,247,0,0,0,0,0,0,0,0,0,0,88,234,0,0,192,248,0,0,0,0,0,0,0,0,0,0,160,234,0,0,0,0,0,0,216,234,0,0,0,0,0,0,16,235,0,0,0,0,0,0,48,235,0,0,0,0,0,0,80,235,0,0,0,0,0,0,112,235,0,0,0,0,0,0,144,235,0,0,104,221,0,0,168,235,0,0,0,0,0,0,1,0,0,0,176,244,0,0,3,244,255,255,104,221,0,0,216,235,0,0,0,0,0,0,1,0,0,0,192,244,0,0,3,244,255,255,104,221,0,0,8,236,0,0,0,0,0,0,1,0,0,0,176,244,0,0,3,244,255,255,104,221,0,0,56,236,0,0,0,0,0,0,1,0,0,0,192,244,0,0,3,244,255,255,104,221,0,0,104,236,0,0,0,0,0,0,1,0,0,0,80,248,0,0,0,0,0,0,104,221,0,0,152,236,0,0,0,0,0,0,1,0,0,0,80,248,0,0,0,0,0,0,104,221,0,0,200,236,0,0,0,0,0,0,1,0,0,0,80,248,0,0,0,0,0,0,104,221,0,0,16,237,0,0,0,0,0,0,1,0,0,0,80,248,0,0,0,0,0,0,104,221,0,0,88,237,0,0,0,0,0,0,1,0,0,0,80,248,0,0,0,0,0,0,104,221,0,0,168,237,0,0,0,0,0,0,1,0,0,0,80,248,0,0,0,0,0,0,0,0,0,0,248,237,0,0,8,243,0,0,0,0,0,0,0,0,0,0,16,238,0,0,104,221,0,0,40,238,0,0,0,0,0,0,1,0,0,0,72,248,0,0,0,0,0,0,104,221,0,0,104,238,0,0,0,0,0,0,1,0,0,0,72,248,0,0,0,0,0,0,0,0,0,0,168,238,0,0,200,248,0,0,0,0,0,0,0,0,0,0,192,238,0,0,184,248,0,0,0,0,0,0,0,0,0,0,224,238,0,0,192,248,0,0,0,0,0,0,0,0,0,0,0,239,0,0,0,0,0,0,32,239,0,0,0,0,0,0,64,239,0,0,0,0,0,0,96,239,0,0,104,221,0,0,128,239,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,248,250,0,0,2,0,0,0,104,221,0,0,160,239,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,248,250,0,0,2,0,0,0,104,221,0,0,192,239,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,248,250,0,0,2,0,0,0,104,221,0,0,224,239,0,0,0,0,0,0,2,0,0,0,232,247,0,0,2,0,0,0,248,250,0,0,2,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,24,240,0,0,0,0,0,0,48,240,0,0,0,0,0,0,72,240,0,0,184,248,0,0,0,0,0,0,0,0,0,0,96,240,0,0,192,248,0,0,0,0,0,0,0,0,0,0,120,240,0,0,0,0,0,0,152,240,0,0,0,0,0,0,184,240,0,0,0,0,0,0,208,240,0,0,152,221,0,0,240,240,0,0,0,0,0,0,16,241,0,0,0,0,0,0,48,241,0,0,0,0,0,0,80,241,0,0,0,0,0,0,104,241,0,0,0,0,0,0,136,241,0,0,216,251,0,0,0,0,0,0,0,0,0,0,176,241,0,0,200,251,0,0,0,0,0,0,0,0,0,0,216,241,0,0,200,251,0,0,0,0,0,0,0,0,0,0,0,242,0,0,184,251,0,0,0,0,0,0,0,0,0,0,40,242,0,0,216,251,0,0,0,0,0,0,0,0,0,0,80,242,0,0,216,251,0,0,0,0,0,0,0,0,0,0,120,242,0,0,224,242,0,0,0,0,0,0,0,0,0,0,160,242,0,0,216,251,0,0,0,0,0,0,64,221,0,0,200,242,0,0,56,0,0,0,0,0,0,0,8,249,0,0,32,4,0,0,108,4,0,0,200,255,255,255,200,255,255,255,8,249,0,0,244,1,0,0,130,3,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
function runPostSets() {

HEAP32[((62176 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((62184 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62192 )>>2)]=__ZTISt9exception;
HEAP32[((62200 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62208 )>>2)]=__ZTISt9exception;
HEAP32[((62216 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62224 )>>2)]=__ZTISt9exception;
HEAP32[((62232 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62248 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62264 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62272 )>>2)]=__ZTISt9exception;
HEAP32[((62280 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62296 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62312 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62328 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62344 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62360 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62376 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62392 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62408 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62424 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62440 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62456 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62472 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62488 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((62504 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((62640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62656 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62912 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((62928 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63008 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63016 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63160 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63176 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63464 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63480 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63560 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63568 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63576 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63584 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63592 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63608 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63624 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63656 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63672 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63680 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63688 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63696 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63704 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63712 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63720 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((63968 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((63984 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64040 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64056 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64072 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64088 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64096 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64104 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64112 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64248 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64256 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64264 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64272 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64288 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64304 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64312 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64320 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64328 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64344 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64352 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64360 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64368 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((64376 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64392 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64408 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64424 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64440 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64456 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64472 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((64488 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
      }
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }


  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  function __embind_register_class_function() {
  Module['printErr']('missing function: _embind_register_class_function'); abort(-1);
  }

  function __embind_register_class_constructor() {
  Module['printErr']('missing function: _embind_register_class_constructor'); abort(-1);
  }

  function __embind_register_class() {
  Module['printErr']('missing function: _embind_register_class'); abort(-1);
  }

  function __embind_register_value_object_field() {
  Module['printErr']('missing function: _embind_register_value_object_field'); abort(-1);
  }

  function __embind_finalize_value_object() {
  Module['printErr']('missing function: _embind_finalize_value_object'); abort(-1);
  }

  function __embind_register_value_object() {
  Module['printErr']('missing function: _embind_register_value_object'); abort(-1);
  }

  function __emval_undefined() {
  Module['printErr']('missing function: _emval_undefined'); abort(-1);
  }

  function __emval_take_value() {
  Module['printErr']('missing function: _emval_take_value'); abort(-1);
  }

  function __emval_decref() {
  Module['printErr']('missing function: _emval_decref'); abort(-1);
  }

  function __emval_incref() {
  Module['printErr']('missing function: _emval_incref'); abort(-1);
  }

  function __embind_register_value_array_element() {
  Module['printErr']('missing function: _embind_register_value_array_element'); abort(-1);
  }

  function __embind_finalize_value_array() {
  Module['printErr']('missing function: _embind_finalize_value_array'); abort(-1);
  }

  function __embind_register_value_array() {
  Module['printErr']('missing function: _embind_register_value_array'); abort(-1);
  }

  function __embind_register_enum_value() {
  Module['printErr']('missing function: _embind_register_enum_value'); abort(-1);
  }

  function __embind_register_enum() {
  Module['printErr']('missing function: _embind_register_enum'); abort(-1);
  }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      return FS.getStreamFromPtr(stream).fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }


  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }

  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return tempRet0 = (tempDouble=ret,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0),ret>>>0;
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      var streamObj = FS.getStreamFromPtr(stream);
      if (streamObj) streamObj.error = false;
    }


  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_;
      }
      HEAP8[(((s)+(i))|0)]=0;
      return s;
    }

  var _sqrt=Math_sqrt;

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  var _fabs=Math_abs;

  var _log=Math_log;

  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _cos=Math_cos;

  var _sin=Math_sin;

  var _pow=Math_pow;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  
  var ___strtok_state=0;
  
  function _strtok_r(s, delim, lasts) {
      var skip_leading_delim = 1;
      var spanp;
      var c, sc;
      var tok;
  
  
      if (s == 0 && (s = getValue(lasts, 'i8*')) == 0) {
        return 0;
      }
  
      cont: while (1) {
        c = getValue(s++, 'i8');
        for (spanp = delim; (sc = getValue(spanp++, 'i8')) != 0;) {
          if (c == sc) {
            if (skip_leading_delim) {
              continue cont;
            } else {
              setValue(lasts, s, 'i8*');
              setValue(s - 1, 0, 'i8');
              return s - 1;
            }
          }
        }
        break;
      }
  
      if (c == 0) {
        setValue(lasts, 0, 'i8*');
        return 0;
      }
      tok = s - 1;
  
      for (;;) {
        c = getValue(s++, 'i8');
        spanp = delim;
        do {
          if ((sc = getValue(spanp++, 'i8')) == c) {
            if (c == 0) {
              s = 0;
            } else {
              setValue(s - 1, 0, 'i8');
            }
            setValue(lasts, s, 'i8*');
            return tok;
          }
        } while (sc != 0);
      }
      abort('strtok_r error!');
    }function _strtok(s, delim) {
      return _strtok_r(s, delim, ___strtok_state);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }

  var _getc=_fgetc;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }

  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return FUNCTION_TABLE[cmp](base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  var _llvm_va_start=undefined;

  function _llvm_va_end() {}

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _abort() {
      Module['abort']();
    }


  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr;
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[((pdest+len+i)|0)]=HEAP8[((psrc+i)|0)];
        if (HEAP8[(((pdest)+(len+i))|0)] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[(((pdest)+(len+i))|0)]=0;
          break;
        }
      }
      return pdest;
    }

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }



  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }


  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated };
      return ptr;
    }

  function _getpagesize() {
      // int getpagesize(void);
      return PAGE_SIZE;
    }

  function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  function _popen(command, mode) {
      // FILE *popen(const char *command, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/popen.html
      // We allow only one process, so no pipes.
      ___setErrNo(ERRNO_CODES.EMFILE);
      return 0;
    }

  function _pclose(stream) {
      // int pclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/pclose.html
      // We allow only one process, so no pipes.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }

  function _getrusage(resource, rlp) {
      // int getrusage(int resource, struct rusage *rlp);
      HEAP32[((rlp)>>2)]=1;
      HEAP32[(((rlp)+(4))>>2)]=2;
      HEAP32[(((rlp)+(8))>>2)]=3;
      HEAP32[(((rlp)+(12))>>2)]=4;
      return 0;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  function _pthread_mutex_lock() {}

  function _pthread_cond_wait() {
      return 0;
    }

  function _pthread_mutex_unlock() {}

  function _strspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (!setcurr) return str - pstr;
        str++;
      }
    }


  function __embind_register_void() {
  Module['printErr']('missing function: _embind_register_void'); abort(-1);
  }

  function __embind_register_bool() {
  Module['printErr']('missing function: _embind_register_bool'); abort(-1);
  }

  function __embind_register_integer() {
  Module['printErr']('missing function: _embind_register_integer'); abort(-1);
  }

  function __embind_register_float() {
  Module['printErr']('missing function: _embind_register_float'); abort(-1);
  }

  function __embind_register_std_string() {
  Module['printErr']('missing function: _embind_register_std_string'); abort(-1);
  }

  function __embind_register_std_wstring() {
  Module['printErr']('missing function: _embind_register_std_wstring'); abort(-1);
  }

  function __embind_register_emval() {
  Module['printErr']('missing function: _embind_register_emval'); abort(-1);
  }

  function __embind_register_memory_view() {
  Module['printErr']('missing function: _embind_register_memory_view'); abort(-1);
  }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  var _llvm_memset_p0i8_i64=_memset;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function __ZNSt9exceptionD2Ev() {}

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }


  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_guard_abort() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  
  
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function _uselocale(locale) {
      return 0;
    }

  
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }

  function _llvm_bswap_i16(x) {
      return ((x&0xff)<<8) | ((x>>8)&0xff);
    }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  function _llvm_trap() {
      abort('trap!');
    }






  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___strtok_state = Runtime.staticAlloc(4);
___buildEnvironment(ENV);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIiNS3_9allocatorIiEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,_fe_warp_affine_doc,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNSt3__18messagesIcED0Ev,0,_fe_warp_piecewise_linear_n_param,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZN14pocketsphinxjs10Recognizer12switchSearchEi,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs4WordEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarEiE7setWireIS3_EEvRKMS3_iRT_i,0,__ZNSt12length_errorD0Ev,0,_fe_warp_affine_set_parameters,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERKNSt3__16vectorINS2_4WordENS5_9allocatorIS7_EEEEES4_PS3_JSC_EE6invokeERKSE_SF_PSA_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,_fe_warp_inverse_linear_id,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs10TransitionEEEvPT_,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERNSt3__16vectorIiNS5_9allocatorIiEEEERKNS2_7GrammarEES4_PS3_JSA_SD_EE6invokeERKSF_SG_PS9_PSB_,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,_fe_warp_inverse_linear_doc,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,_lm3g_template_iter_get2474,0,__ZNSt11logic_errorD0Ev,0,_phone_loop_search_step,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNSt12out_of_rangeD0Ev,0,_lm3g_template_raw_score,0,__ZNSt3__16vectorIiNS_9allocatorIiEEE9push_backERKi,0,_ngram_bp_seg_next,0,__ZN14pocketsphinxjs10Recognizer7processERKNSt3__16vectorIsNS1_9allocatorIsEEEE,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,_ngram_search_start,0,__ZN10emscripten8internal12operator_newIN14pocketsphinxjs10RecognizerEJEEEPT_DpT0_,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIsNS2_9allocatorIsEEEEE3setERS6_jRKs,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,_ngram_search_lattice,0,__ZNSt9bad_allocD2Ev,0,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__16vectorIiNS_9allocatorIiEEE4sizeEv,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,_ngram_model_dmp_apply_weights,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,_lm3g_template_successors2473,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERKNSt3__16vectorIsNS5_9allocatorIsEEEEES4_PS3_JSB_EE6invokeERKSD_SE_PS9_,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__18ios_baseD2Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,_feat_copy,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERNSt3__16vectorIiNS5_9allocatorIiEEEERKNS5_12basic_stringIcNS5_11char_traitsIcEENS7_IcEEEEES4_PS3_JSA_SH_EE6invokeERKSJ_SK_PS9_PNS0_11BindingTypeISF_EUt_E,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs4WordENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,_fsg_search_seg_iter,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,_ngram_model_set_add_ug,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_,0,_kws_search_step,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEE3getERKS8_j,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarENSt3__16vectorINS2_10TransitionENS4_9allocatorIS6_EEEEE7setWireIS3_EEvRKMS3_S9_RT_PS9_,0,_fsg_search_start,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,_ms_cont_mgau_frame_eval,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i,0,__ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs7GrammarEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,0,__ZN14pocketsphinxjs10Recognizer10addGrammarERNSt3__16vectorIiNS1_9allocatorIiEEEERKNS_7GrammarE,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE,0,_kws_search_start,0,__ZN14pocketsphinxjs10Recognizer8getCountEv,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIiNS2_9allocatorIiEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,0,_ps_lattice_seg_free,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIsNS2_9allocatorIsEEEEEEvPT_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,_fe_warp_affine_n_param,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,_kws_search_prob,0,_fe_warp_piecewise_linear_unwarped_to_warped,0,__ZN10__cxxabiv119__pointer_type_infoD0Ev,0,__ZNKSt3__16vectorIsNS_9allocatorIsEEE4sizeEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,_ngram_search_free,0,_fe_warp_affine_id,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERNSt3__16vectorINS2_7SegItemENS5_9allocatorIS7_EEEEES4_PS3_JSB_EE6invokeERKSD_SE_PSA_,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,_fe_warp_inverse_linear_warped_to_unwarped,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZN10__cxxabiv116__enum_type_infoD0Ev,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,_fe_warp_inverse_linear_unwarped_to_warped,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarEiE7getWireIS3_EEiRKMS3_iRKT_,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs4WordENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E,0,__ZNKSt3__18messagesIcE8do_closeEi,0,_lm3g_template_add_ug,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEJEEEPT_DpT0_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,_lm3g_template_iter_get,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,_fsg_seg_next,0,__ZNKSt8bad_cast4whatEv,0,_ngram_search_prob,0,__ZN10emscripten8internal12operator_newIN14pocketsphinxjs10RecognizerEJRKNSt3__16vectorINS2_10ConfigItemENS4_9allocatorIS6_EEEEEEEPT_DpT0_,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,_ngram_search_finish,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEE3getERKS8_j,0,_cmp_name,0,_lm3g_template_raw_score2468,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEEEvPT_,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,_feat_s2_4x_cep2feat,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_,0,_my_compare,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,_ngram_model_set_raw_score,0,_feat_s3_cep_dcep,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarENSt3__16vectorINS2_10TransitionENS4_9allocatorIS6_EEEEE7getWireIS3_EEPS9_RKMS3_S9_RKT_,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemEiE7getWireIS3_EEiRKMS3_iRKT_,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS_9allocatorIS2_EEE9push_backERKS2_,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIiNS2_9allocatorIiEEEEE3getERKS6_j,0,_lm3g_template_flush2470,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,_ngram_search_seg_iter,0,_phone_loop_search_finish,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZN10emscripten8internal13getActualTypeIN14pocketsphinxjs10RecognizerEEEPKNS0_7_TYPEIDEPT_,0,_phone_loop_search_seg_iter,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,_feat_s3_1x39_cep2feat,0,_feat_1s_c_d_dd_cep2feat,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs10RecognizerEEEvPT_,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__16vectorIN14pocketsphinxjs10TransitionENS_9allocatorIS2_EEE9push_backERKS2_,0,_ptm_mgau_mllr_transform,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,_phone_loop_search_reinit,0,_ngram_model_set_flush,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_,0,__ZN14pocketsphinxjs10Recognizer8addWordsERKNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEE,0,_lm3g_template_add_ug2469,0,__ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs10TransitionEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs7SegItemEEEvPT_,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIiNS2_9allocatorIiEEEEjRKiEbS7_JjS9_EE6invokeEPSB_PS6_ji,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZN14pocketsphinxjs10Recognizer10addKeywordERNSt3__16vectorIiNS1_9allocatorIiEEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs7SegItemEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,0,_ngram_model_arpa_apply_weights,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZN14pocketsphinxjs10Recognizer4stopEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIsNS2_9allocatorIsEEEEJEE6invokeEPFS7_vE,0,__ZN10emscripten8internal7InvokerIPN14pocketsphinxjs10RecognizerEJEE6invokeEPFS4_vE,0,__ZNSt3__18numpunctIcED0Ev,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E,0,_fsg_search_hyp,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,_lm3g_template_iter2471,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs7SegItemENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeEvES4_PS3_JEE6invokeERKS6_S7_,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs10ConfigItemEEEvPT_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,_phone_loop_search_hyp,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,_kws_search_seg_iter,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,_kws_seg_next,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,_fe_warp_piecewise_linear_warped_to_unwarped,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs4WordENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,_lm3g_template_iter,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionEiE7setWireIS3_EEvRKMS3_iRT_i,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIsNS2_9allocatorIsEEEEEEPKNS0_7_TYPEIDEPT_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,_lm3g_template_score,0,_fsg_search_reinit,0,__ZNSt3__111__stdoutbufIcED1Ev,0,_fe_warp_affine_unwarped_to_warped,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_,0,__ZNKSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE4sizeEv,0,__ZN14pocketsphinxjs10Recognizer13switchGrammarEi,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,_kws_search_finish,0,__ZN10emscripten8internal12operator_newINSt3__16vectorIsNS2_9allocatorIsEEEEJEEEPT_DpT0_,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,_s2_semi_mgau_free,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,_kws_search_hyp,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIsNS2_9allocatorIsEEEEjRKsEbS7_JjS9_EE6invokeEPSB_PS6_js,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEJEEEPT_DpT0_,0,_ngram_bp_seg_free,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,_lm3g_template_iter_next,0,_phone_loop_search_start,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,_fsg_search_step,0,_ngram_model_set_score,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZN14pocketsphinxjs10Recognizer9getHypsegERNSt3__16vectorINS_7SegItemENS1_9allocatorIS3_EEEE,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNKSt3__16vectorIN14pocketsphinxjs10TransitionENS_9allocatorIS2_EEE4sizeEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEJEEEPT_DpT0_,0,_ngram_search_hyp,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFivEiPS3_JEE6invokeERKS5_S6_,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEEEvPT_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,_lm3g_template_mgrams,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIsNS2_9allocatorIsEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,_fe_warp_piecewise_linear_id,0,_ngram_model_set_free,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIiNS2_9allocatorIiEEEEEEPKNS0_7_TYPEIDEPT_,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNSt3__16vectorIsNS_9allocatorIsEEE9push_backERKs,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERKNSt3__16vectorINS2_10ConfigItemENS5_9allocatorIS7_EEEEES4_PS3_JSC_EE6invokeERKSE_SF_PSA_,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,_ngram_model_arpa_free,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIsNS2_9allocatorIsEEEEE3getERKS6_j,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,_fe_warp_inverse_linear_n_param,0,__ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs10ConfigItemEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10ConfigItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,_fsg_search_lattice,0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,_phone_loop_search_prob,0,_s2_semi_mgau_frame_eval,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10ConfigItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeEiES4_PS3_JiEE6invokeERKS6_S7_i,0,_lm3g_template_flush,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionEiE7getWireIS3_EEiRKMS3_iRKT_,0,__ZNSt3__110__stdinbufIwED1Ev,0,_ptm_mgau_free,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt8bad_castD2Ev,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE9push_backERKS2_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,_ps_lattice_seg_next,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,_fsg_seg_free,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,_fe_warp_inverse_linear_set_parameters,0,__ZNKSt3__114error_category23default_error_conditionEi,0,_fsg_search_finish,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEE3getERKS8_j,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_,0,_lm3g_template_iter_free,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt9bad_alloc4whatEv,0,__ZN14pocketsphinxjs10Recognizer6reInitERKNSt3__16vectorINS_10ConfigItemENS1_9allocatorIS3_EEEE,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEvESA_PS3_JEE6invokeERKSC_SD_,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,_ptm_mgau_frame_eval,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,_fe_warp_affine_warped_to_unwarped,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIiNS2_9allocatorIiEEEEE3setERS6_jRKi,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,_feat_1s_c_d_ld_dd_cep2feat,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,_fsg_search_free,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZN10emscripten8internal12operator_newINSt3__16vectorIiNS2_9allocatorIiEEEEJEEEPT_DpT0_,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIiNS2_9allocatorIiEEEEEEvPT_,0,_phone_loop_search_free,0,_lm3g_template_mgrams2472,0,_fe_warp_inverse_linear_print,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEEEvPT_,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,_ngram_search_step,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs7GrammarEEEvPT_,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEJEEEPT_DpT0_,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIsNS2_9allocatorIsEEEEFvRKsEvPS6_JS8_EE6invokeERKSA_SB_s,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,_ms_mgau_mllr_transform,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNKSt11logic_error4whatEv,0,_lm3g_template_iter_free2476,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIsNS3_9allocatorIsEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,0,__ZNKSt3__16vectorIN14pocketsphinxjs4WordENS_9allocatorIS2_EEE4sizeEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__16vectorIN14pocketsphinxjs10ConfigItemENS_9allocatorIS2_EEE4sizeEv,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,0,__ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs4WordEEEvPT_,0,_fe_warp_piecewise_linear_doc,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,_kws_search_free,0,_ngram_search_reinit,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,_ms_mgau_free,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,_feat_s3_cep,0,_lm3g_template_iter_next2475,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j,0,_kws_search_reinit,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs10TransitionENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,_fe_warp_affine_print,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,_ngram_model_dmp_free,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEE3getERKS8_j,0,___cxx_global_array_dtor,0,_fe_warp_piecewise_linear_set_parameters,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,_lm3g_template_score2467,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,_lm3g_template_successors,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemEiE7setWireIS3_EEvRKMS3_iRT_i,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,_fsg_search_prob,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEEEvPT_,0,_kws_seg_free,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,_fe_warp_piecewise_linear_print,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,_ngram_model_set_apply_weights,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,_kws_search_lattice,0,__ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__16vectorIN14pocketsphinxjs4WordENS_9allocatorIS2_EEE9push_backERKS2_,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,_s2_semi_mgau_mllr_transform,0,__ZN14pocketsphinxjs10Recognizer6getHypEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZN14pocketsphinxjs10Recognizer5startEv,0,___cxx_global_array_dtor120,0,__ZN10emscripten8internal7InvokerIPN14pocketsphinxjs10RecognizerEJRKNSt3__16vectorINS2_10ConfigItemENS5_9allocatorIS7_EEEEEE6invokeEPFS4_SC_EPSA_,0];

// EMSCRIPTEN_START_FUNCS
function __ZNSt3__111__stdoutbufIwED1Ev(r1){var r2;HEAP32[r1>>2]=55728;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__111__stdoutbufIwED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55728;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1;_free(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1;_free(r4);return}function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE(r1,r2){var r3,r4;FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+24>>2]](r1);r3=__ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[r2>>2],71144);r2=r3;HEAP32[r1+36>>2]=r2;r4=FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+28>>2]](r2)&1;HEAP8[r1+44|0]=r4;return}function __ZNSt3__111__stdoutbufIwE4syncEv(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r5=r3+8;r6=r1+36|0;r7=r1+40|0;r8=r4|0;r9=r4+8|0;r10=r4;r4=r1+32|0;while(1){r1=HEAP32[r6>>2];r11=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+20>>2]](r1,HEAP32[r7>>2],r8,r9,r5);r1=HEAP32[r5>>2]-r10|0;if((_fwrite(r8,1,r1,HEAP32[r4>>2])|0)!=(r1|0)){r12=-1;r2=5;break}if((r11|0)==2){r12=-1;r2=5;break}else if((r11|0)!=1){r2=4;break}}if(r2==4){r12=((_fflush(HEAP32[r4>>2])|0)!=0)<<31>>31;STACKTOP=r3;return r12}else if(r2==5){STACKTOP=r3;return r12}}function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi(r1,r2,r3){var r4,r5,r6,r7,r8;r4=0;if((HEAP8[r1+44|0]|0)!=0){r5=_fwrite(r2,4,r3,HEAP32[r1+32>>2]);return r5}r6=r1;if((r3|0)>0){r7=r2;r8=0}else{r5=0;return r5}while(1){if((FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+52>>2]](r1,HEAP32[r7>>2])|0)==-1){r5=r8;r4=6;break}r2=r8+1|0;if((r2|0)<(r3|0)){r7=r7+4|0;r8=r2}else{r5=r2;r4=6;break}}if(r4==6){return r5}}function __ZNSt3__111__stdoutbufIwE8overflowEj(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+32|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=(r2|0)==-1;L1:do{if(!r9){HEAP32[r6>>2]=r2;if((HEAP8[r1+44|0]|0)!=0){if((_fwrite(r6,4,1,HEAP32[r1+32>>2])|0)==1){break}else{r10=-1}STACKTOP=r4;return r10}r11=r5|0;HEAP32[r7>>2]=r11;r12=r6+4|0;r13=r1+36|0;r14=r1+40|0;r15=r5+8|0;r16=r5;r17=r1+32|0;r18=r6;while(1){r19=HEAP32[r13>>2];r20=FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+12>>2]](r19,HEAP32[r14>>2],r18,r12,r8,r11,r15,r7);if((HEAP32[r8>>2]|0)==(r18|0)){r10=-1;r3=12;break}if((r20|0)==3){r3=7;break}r19=(r20|0)==1;if(r20>>>0>=2){r10=-1;r3=12;break}r20=HEAP32[r7>>2]-r16|0;if((_fwrite(r11,1,r20,HEAP32[r17>>2])|0)!=(r20|0)){r10=-1;r3=12;break}if(r19){r18=r19?HEAP32[r8>>2]:r18}else{break L1}}if(r3==7){if((_fwrite(r18,1,1,HEAP32[r17>>2])|0)==1){break}else{r10=-1}STACKTOP=r4;return r10}else if(r3==12){STACKTOP=r4;return r10}}}while(0);r10=r9?0:r2;STACKTOP=r4;return r10}function __ZNSt3__110__stdinbufIwED1Ev(r1){var r2;HEAP32[r1>>2]=55728;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__110__stdinbufIwED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55728;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1;_free(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1;_free(r4);return}function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(r1,r2){var r3,r4,r5;r3=__ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[r2>>2],71144);r2=r3;r4=r1+36|0;HEAP32[r4>>2]=r2;r5=FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+24>>2]](r2);r2=r1+44|0;HEAP32[r2>>2]=r5;r5=HEAP32[r4>>2];r4=FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+28>>2]](r5)&1;HEAP8[r1+53|0]=r4;if((HEAP32[r2>>2]|0)>8){__ZNSt3__121__throw_runtime_errorEPKc(6328)}else{return}}function __ZNSt3__110__stdinbufIwE9underflowEv(r1){return __ZNSt3__110__stdinbufIwE9__getcharEb(r1,0)}function __ZNSt3__110__stdinbufIwE5uflowEv(r1){return __ZNSt3__110__stdinbufIwE9__getcharEb(r1,1)}function __ZNSt3__110__stdinbufIwE9pbackfailEj(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r3=STACKTOP;STACKTOP=STACKTOP+32|0;r4=r3;r5=r3+8;r6=r3+16;r7=r3+24;r8=r1+52|0;r9=(HEAP8[r8]|0)!=0;if((r2|0)==-1){if(r9){r10=-1;STACKTOP=r3;return r10}r11=HEAP32[r1+48>>2];HEAP8[r8]=(r11|0)!=-1|0;r10=r11;STACKTOP=r3;return r10}r11=r1+48|0;L8:do{if(r9){HEAP32[r6>>2]=HEAP32[r11>>2];r12=HEAP32[r1+36>>2];r13=r4|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+12>>2]](r12,HEAP32[r1+40>>2],r6,r6+4|0,r7,r13,r4+8|0,r5);if((r14|0)==2|(r14|0)==1){r10=-1;STACKTOP=r3;return r10}else if((r14|0)==3){HEAP8[r13]=HEAP32[r11>>2];HEAP32[r5>>2]=r4+1}r14=r1+32|0;while(1){r12=HEAP32[r5>>2];if(r12>>>0<=r13>>>0){break L8}r15=r12-1|0;HEAP32[r5>>2]=r15;if((_ungetc(HEAP8[r15]|0,HEAP32[r14>>2])|0)==-1){r10=-1;break}}STACKTOP=r3;return r10}}while(0);HEAP32[r11>>2]=r2;HEAP8[r8]=1;r10=r2;STACKTOP=r3;return r10}function __ZNSt3__110__stdinbufIwE9__getcharEb(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+32|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r1+52|0;if((HEAP8[r9]|0)!=0){r10=r1+48|0;r11=HEAP32[r10>>2];if(!r2){r12=r11;STACKTOP=r4;return r12}HEAP32[r10>>2]=-1;HEAP8[r9]=0;r12=r11;STACKTOP=r4;return r12}r11=HEAP32[r1+44>>2];r9=(r11|0)>1?r11:1;L8:do{if((r9|0)>0){r11=r1+32|0;r10=0;while(1){r13=_fgetc(HEAP32[r11>>2]);if((r13|0)==-1){r12=-1;break}HEAP8[r5+r10|0]=r13;r13=r10+1|0;if((r13|0)<(r9|0)){r10=r13}else{break L8}}STACKTOP=r4;return r12}}while(0);L15:do{if((HEAP8[r1+53|0]|0)==0){r10=r1+40|0;r11=r1+36|0;r13=r5|0;r14=r6+4|0;r15=r1+32|0;r16=r9;while(1){r17=HEAP32[r10>>2];r18=r17;r19=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=HEAP32[r11>>2];r21=r5+r16|0;r22=FUNCTION_TABLE[HEAP32[HEAP32[r18>>2]+16>>2]](r18,r17,r13,r21,r7,r6,r14,r8);if((r22|0)==2){r12=-1;r3=22;break}else if((r22|0)==3){r3=14;break}else if((r22|0)!=1){r23=r16;break L15}r22=HEAP32[r10>>2];HEAP32[r22>>2]=r19;HEAP32[r22+4>>2]=r20;if((r16|0)==8){r12=-1;r3=22;break}r20=_fgetc(HEAP32[r15>>2]);if((r20|0)==-1){r12=-1;r3=22;break}HEAP8[r21]=r20;r16=r16+1|0}if(r3==14){HEAP32[r6>>2]=HEAP8[r13]|0;r23=r16;break}else if(r3==22){STACKTOP=r4;return r12}}else{HEAP32[r6>>2]=HEAP8[r5|0]|0;r23=r9}}while(0);if(r2){r2=HEAP32[r6>>2];HEAP32[r1+48>>2]=r2;r12=r2;STACKTOP=r4;return r12}r2=r1+32|0;r1=r23;while(1){if((r1|0)<=0){break}r23=r1-1|0;if((_ungetc(HEAP8[r5+r23|0]|0,HEAP32[r2>>2])|0)==-1){r12=-1;r3=22;break}else{r1=r23}}if(r3==22){STACKTOP=r4;return r12}r12=HEAP32[r6>>2];STACKTOP=r4;return r12}function __ZNSt3__111__stdoutbufIcED1Ev(r1){var r2;HEAP32[r1>>2]=55800;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__111__stdoutbufIcED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55800;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1;_free(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1;_free(r4);return}function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE(r1,r2){var r3,r4;FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+24>>2]](r1);r3=__ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[r2>>2],71152);r2=r3;HEAP32[r1+36>>2]=r2;r4=FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+28>>2]](r2)&1;HEAP8[r1+44|0]=r4;return}function __ZNSt3__111__stdoutbufIcE4syncEv(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r5=r3+8;r6=r1+36|0;r7=r1+40|0;r8=r4|0;r9=r4+8|0;r10=r4;r4=r1+32|0;while(1){r1=HEAP32[r6>>2];r11=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+20>>2]](r1,HEAP32[r7>>2],r8,r9,r5);r1=HEAP32[r5>>2]-r10|0;if((_fwrite(r8,1,r1,HEAP32[r4>>2])|0)!=(r1|0)){r12=-1;r2=5;break}if((r11|0)==2){r12=-1;r2=5;break}else if((r11|0)!=1){r2=4;break}}if(r2==4){r12=((_fflush(HEAP32[r4>>2])|0)!=0)<<31>>31;STACKTOP=r3;return r12}else if(r2==5){STACKTOP=r3;return r12}}function __ZNSt3__111__stdoutbufIcE6xsputnEPKci(r1,r2,r3){var r4,r5,r6,r7,r8;r4=0;if((HEAP8[r1+44|0]|0)!=0){r5=_fwrite(r2,1,r3,HEAP32[r1+32>>2]);return r5}r6=r1;if((r3|0)>0){r7=r2;r8=0}else{r5=0;return r5}while(1){if((FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+52>>2]](r1,HEAPU8[r7])|0)==-1){r5=r8;r4=6;break}r2=r8+1|0;if((r2|0)<(r3|0)){r7=r7+1|0;r8=r2}else{r5=r2;r4=6;break}}if(r4==6){return r5}}function __ZNSt3__111__stdoutbufIcE8overflowEi(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+32|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=(r2|0)==-1;L1:do{if(!r9){HEAP8[r6]=r2;if((HEAP8[r1+44|0]|0)!=0){if((_fwrite(r6,1,1,HEAP32[r1+32>>2])|0)==1){break}else{r10=-1}STACKTOP=r4;return r10}r11=r5|0;HEAP32[r7>>2]=r11;r12=r6+1|0;r13=r1+36|0;r14=r1+40|0;r15=r5+8|0;r16=r5;r17=r1+32|0;r18=r6;while(1){r19=HEAP32[r13>>2];r20=FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+12>>2]](r19,HEAP32[r14>>2],r18,r12,r8,r11,r15,r7);if((HEAP32[r8>>2]|0)==(r18|0)){r10=-1;r3=12;break}if((r20|0)==3){r3=7;break}r19=(r20|0)==1;if(r20>>>0>=2){r10=-1;r3=12;break}r20=HEAP32[r7>>2]-r16|0;if((_fwrite(r11,1,r20,HEAP32[r17>>2])|0)!=(r20|0)){r10=-1;r3=12;break}if(r19){r18=r19?HEAP32[r8>>2]:r18}else{break L1}}if(r3==7){if((_fwrite(r18,1,1,HEAP32[r17>>2])|0)==1){break}else{r10=-1}STACKTOP=r4;return r10}else if(r3==12){STACKTOP=r4;return r10}}}while(0);r10=r9?0:r2;STACKTOP=r4;return r10}function __ZNSt3__110__stdinbufIcED1Ev(r1){var r2;HEAP32[r1>>2]=55800;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__110__stdinbufIcED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55800;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1;_free(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1;_free(r4);return}function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(r1,r2){var r3,r4,r5;r3=__ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[r2>>2],71152);r2=r3;r4=r1+36|0;HEAP32[r4>>2]=r2;r5=FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+24>>2]](r2);r2=r1+44|0;HEAP32[r2>>2]=r5;r5=HEAP32[r4>>2];r4=FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+28>>2]](r5)&1;HEAP8[r1+53|0]=r4;if((HEAP32[r2>>2]|0)>8){__ZNSt3__121__throw_runtime_errorEPKc(6328)}else{return}}function __ZNSt3__110__stdinbufIcE9underflowEv(r1){return __ZNSt3__110__stdinbufIcE9__getcharEb(r1,0)}function __ZNSt3__110__stdinbufIcE5uflowEv(r1){return __ZNSt3__110__stdinbufIcE9__getcharEb(r1,1)}function __ZNSt3__110__stdinbufIcE9pbackfailEi(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r3=STACKTOP;STACKTOP=STACKTOP+32|0;r4=r3;r5=r3+8;r6=r3+16;r7=r3+24;r8=r1+52|0;r9=(HEAP8[r8]|0)!=0;if((r2|0)==-1){if(r9){r10=-1;STACKTOP=r3;return r10}r11=HEAP32[r1+48>>2];HEAP8[r8]=(r11|0)!=-1|0;r10=r11;STACKTOP=r3;return r10}r11=r1+48|0;L8:do{if(r9){HEAP8[r6]=HEAP32[r11>>2];r12=HEAP32[r1+36>>2];r13=r4|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+12>>2]](r12,HEAP32[r1+40>>2],r6,r6+1|0,r7,r13,r4+8|0,r5);if((r14|0)==2|(r14|0)==1){r10=-1;STACKTOP=r3;return r10}else if((r14|0)==3){HEAP8[r13]=HEAP32[r11>>2];HEAP32[r5>>2]=r4+1}r14=r1+32|0;while(1){r12=HEAP32[r5>>2];if(r12>>>0<=r13>>>0){break L8}r15=r12-1|0;HEAP32[r5>>2]=r15;if((_ungetc(HEAP8[r15]|0,HEAP32[r14>>2])|0)==-1){r10=-1;break}}STACKTOP=r3;return r10}}while(0);HEAP32[r11>>2]=r2;HEAP8[r8]=1;r10=r2;STACKTOP=r3;return r10}function __ZNSt3__110__stdinbufIcE9__getcharEb(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+32|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r1+52|0;if((HEAP8[r9]|0)!=0){r10=r1+48|0;r11=HEAP32[r10>>2];if(!r2){r12=r11;STACKTOP=r4;return r12}HEAP32[r10>>2]=-1;HEAP8[r9]=0;r12=r11;STACKTOP=r4;return r12}r11=HEAP32[r1+44>>2];r9=(r11|0)>1?r11:1;L8:do{if((r9|0)>0){r11=r1+32|0;r10=0;while(1){r13=_fgetc(HEAP32[r11>>2]);if((r13|0)==-1){r12=-1;break}HEAP8[r5+r10|0]=r13;r13=r10+1|0;if((r13|0)<(r9|0)){r10=r13}else{break L8}}STACKTOP=r4;return r12}}while(0);L15:do{if((HEAP8[r1+53|0]|0)==0){r10=r1+40|0;r11=r1+36|0;r13=r5|0;r14=r6+1|0;r15=r1+32|0;r16=r9;while(1){r17=HEAP32[r10>>2];r18=r17;r19=HEAP32[r18>>2];r20=HEAP32[r18+4>>2];r18=HEAP32[r11>>2];r21=r5+r16|0;r22=FUNCTION_TABLE[HEAP32[HEAP32[r18>>2]+16>>2]](r18,r17,r13,r21,r7,r6,r14,r8);if((r22|0)==3){r3=14;break}else if((r22|0)==2){r12=-1;r3=23;break}else if((r22|0)!=1){r23=r16;break L15}r22=HEAP32[r10>>2];HEAP32[r22>>2]=r19;HEAP32[r22+4>>2]=r20;if((r16|0)==8){r12=-1;r3=23;break}r20=_fgetc(HEAP32[r15>>2]);if((r20|0)==-1){r12=-1;r3=23;break}HEAP8[r21]=r20;r16=r16+1|0}if(r3==14){HEAP8[r6]=HEAP8[r13];r23=r16;break}else if(r3==23){STACKTOP=r4;return r12}}else{HEAP8[r6]=HEAP8[r5|0];r23=r9}}while(0);do{if(r2){r9=HEAP8[r6];HEAP32[r1+48>>2]=r9&255;r24=r9}else{r9=r1+32|0;r8=r23;while(1){if((r8|0)<=0){r3=21;break}r7=r8-1|0;if((_ungetc(HEAPU8[r5+r7|0],HEAP32[r9>>2])|0)==-1){r12=-1;r3=23;break}else{r8=r7}}if(r3==21){r24=HEAP8[r6];break}else if(r3==23){STACKTOP=r4;return r12}}}while(0);r12=r24&255;STACKTOP=r4;return r12}function __GLOBAL__I_a552(){var r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47;r1=HEAP32[_stdin>>2];HEAP32[70824>>2]=55800;__ZNSt3__16localeC2Ev(70828);HEAP32[70832>>2]=0;HEAP32[70836>>2]=0;HEAP32[70840>>2]=0;HEAP32[70844>>2]=0;HEAP32[70848>>2]=0;HEAP32[70852>>2]=0;HEAP32[70824>>2]=56568;HEAP32[70856>>2]=r1;HEAP32[70864>>2]=70952;HEAP32[70872>>2]=-1;HEAP8[70876]=0;r2=HEAP32[70828>>2];r3=r2+4|0;tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+1,tempValue;r4=__ZNKSt3__16locale9use_facetERNS0_2idE(r2,71152);r5=r4;HEAP32[70860>>2]=r5;r6=FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+24>>2]](r5);HEAP32[70868>>2]=r6;r6=HEAP32[70860>>2];r5=FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+28>>2]](r6)&1;HEAP8[70877]=r5;if((HEAP32[70868>>2]|0)>8){__ZNSt3__121__throw_runtime_errorEPKc(6328)}if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0)}HEAP32[71816>>2]=56020;HEAP32[71824>>2]=56040;HEAP32[71820>>2]=0;HEAP32[71848>>2]=70824;HEAP32[71840>>2]=0;HEAP32[71844>>2]=0;HEAP32[71828>>2]=4098;HEAP32[71836>>2]=0;HEAP32[71832>>2]=6;_memset(71856,0,40)|0;__ZNSt3__16localeC2Ev(71852);HEAP32[71896>>2]=0;HEAP32[71900>>2]=-1;r2=HEAP32[_stdout>>2];HEAP32[70728>>2]=55800;__ZNSt3__16localeC2Ev(70732);HEAP32[70736>>2]=0;HEAP32[70740>>2]=0;HEAP32[70744>>2]=0;HEAP32[70748>>2]=0;HEAP32[70752>>2]=0;HEAP32[70756>>2]=0;HEAP32[70728>>2]=56168;HEAP32[70760>>2]=r2;r3=HEAP32[70732>>2];r5=r3+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;r6=__ZNKSt3__16locale9use_facetERNS0_2idE(r3,71152);r4=r6;if(((tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+8>>2]](r3|0)}HEAP32[70764>>2]=r4;HEAP32[70768>>2]=70960;r3=FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+28>>2]](r4)&1;HEAP8[70772]=r3;HEAP32[71552>>2]=55924;HEAP32[71556>>2]=55944;HEAP32[71580>>2]=70728;HEAP32[71572>>2]=0;HEAP32[71576>>2]=0;HEAP32[71560>>2]=4098;HEAP32[71568>>2]=0;HEAP32[71564>>2]=6;_memset(71588,0,40)|0;__ZNSt3__16localeC2Ev(71584);HEAP32[71628>>2]=0;HEAP32[71632>>2]=-1;r3=HEAP32[_stderr>>2];HEAP32[70776>>2]=55800;__ZNSt3__16localeC2Ev(70780);HEAP32[70784>>2]=0;HEAP32[70788>>2]=0;HEAP32[70792>>2]=0;HEAP32[70796>>2]=0;HEAP32[70800>>2]=0;HEAP32[70804>>2]=0;HEAP32[70776>>2]=56168;HEAP32[70808>>2]=r3;r4=HEAP32[70780>>2];r6=r4+4|0;tempValue=HEAP32[r6>>2],HEAP32[r6>>2]=tempValue+1,tempValue;r5=__ZNKSt3__16locale9use_facetERNS0_2idE(r4,71152);r7=r5;if(((tempValue=HEAP32[r6>>2],HEAP32[r6>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+8>>2]](r4|0)}HEAP32[70812>>2]=r7;HEAP32[70816>>2]=70968;r4=FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+28>>2]](r7)&1;HEAP8[70820]=r4;HEAP32[71728>>2]=55924;HEAP32[71732>>2]=55944;HEAP32[71756>>2]=70776;HEAP32[71748>>2]=0;HEAP32[71752>>2]=0;HEAP32[71736>>2]=4098;HEAP32[71744>>2]=0;HEAP32[71740>>2]=6;_memset(71764,0,40)|0;__ZNSt3__16localeC2Ev(71760);HEAP32[71804>>2]=0;HEAP32[71808>>2]=-1;r4=HEAP32[HEAP32[HEAP32[71728>>2]-12>>2]+71752>>2];HEAP32[71640>>2]=55924;HEAP32[71644>>2]=55944;HEAP32[71668>>2]=r4;HEAP32[71660>>2]=(r4|0)==0;HEAP32[71664>>2]=0;HEAP32[71648>>2]=4098;HEAP32[71656>>2]=0;HEAP32[71652>>2]=6;_memset(71676,0,40)|0;__ZNSt3__16localeC2Ev(71672);HEAP32[71716>>2]=0;HEAP32[71720>>2]=-1;HEAP32[HEAP32[HEAP32[71816>>2]-12>>2]+71888>>2]=71552;r4=HEAP32[HEAP32[71728>>2]-12>>2]+71732|0;HEAP32[r4>>2]=HEAP32[r4>>2]|8192;HEAP32[HEAP32[HEAP32[71728>>2]-12>>2]+71800>>2]=71552;HEAP32[70672>>2]=55728;__ZNSt3__16localeC2Ev(70676);HEAP32[70680>>2]=0;HEAP32[70684>>2]=0;HEAP32[70688>>2]=0;HEAP32[70692>>2]=0;HEAP32[70696>>2]=0;HEAP32[70700>>2]=0;HEAP32[70672>>2]=56496;HEAP32[70704>>2]=r1;HEAP32[70712>>2]=70976;HEAP32[70720>>2]=-1;HEAP8[70724]=0;r1=HEAP32[70676>>2];r4=r1+4|0;tempValue=HEAP32[r4>>2],HEAP32[r4>>2]=tempValue+1,tempValue;r7=__ZNKSt3__16locale9use_facetERNS0_2idE(r1,71144);r5=r7;HEAP32[70708>>2]=r5;r6=FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+24>>2]](r5);HEAP32[70716>>2]=r6;r6=HEAP32[70708>>2];r5=FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+28>>2]](r6)&1;HEAP8[70725]=r5;if((HEAP32[70716>>2]|0)>8){__ZNSt3__121__throw_runtime_errorEPKc(6328)}if(((tempValue=HEAP32[r4>>2],HEAP32[r4>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+8>>2]](r1|0)}HEAP32[71464>>2]=55972;HEAP32[71472>>2]=55992;HEAP32[71468>>2]=0;HEAP32[71496>>2]=70672;HEAP32[71488>>2]=0;HEAP32[71492>>2]=0;HEAP32[71476>>2]=4098;HEAP32[71484>>2]=0;HEAP32[71480>>2]=6;_memset(71504,0,40)|0;__ZNSt3__16localeC2Ev(71500);HEAP32[71544>>2]=0;HEAP32[71548>>2]=-1;HEAP32[70576>>2]=55728;__ZNSt3__16localeC2Ev(70580);HEAP32[70584>>2]=0;HEAP32[70588>>2]=0;HEAP32[70592>>2]=0;HEAP32[70596>>2]=0;HEAP32[70600>>2]=0;HEAP32[70604>>2]=0;HEAP32[70576>>2]=56096;HEAP32[70608>>2]=r2;r2=HEAP32[70580>>2];r1=r2+4|0;tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+1,tempValue;r4=__ZNKSt3__16locale9use_facetERNS0_2idE(r2,71144);r5=r4;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0)}HEAP32[70612>>2]=r5;HEAP32[70616>>2]=70984;r2=FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+28>>2]](r5)&1;HEAP8[70620]=r2;HEAP32[71184>>2]=55876;HEAP32[71188>>2]=55896;HEAP32[71212>>2]=70576;HEAP32[71204>>2]=0;HEAP32[71208>>2]=0;HEAP32[71192>>2]=4098;HEAP32[71200>>2]=0;HEAP32[71196>>2]=6;_memset(71220,0,40)|0;__ZNSt3__16localeC2Ev(71216);HEAP32[71260>>2]=0;HEAP32[71264>>2]=-1;HEAP32[70624>>2]=55728;__ZNSt3__16localeC2Ev(70628);HEAP32[70632>>2]=0;HEAP32[70636>>2]=0;HEAP32[70640>>2]=0;HEAP32[70644>>2]=0;HEAP32[70648>>2]=0;HEAP32[70652>>2]=0;HEAP32[70624>>2]=56096;HEAP32[70656>>2]=r3;r3=HEAP32[70628>>2];r2=r3+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;r5=__ZNKSt3__16locale9use_facetERNS0_2idE(r3,71144);r4=r5;if(((tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+ -1,tempValue)|0)!=0){HEAP32[70660>>2]=r4;HEAP32[70664>>2]=70992;r8=r5;r9=HEAP32[r8>>2];r10=r9+28|0;r11=HEAP32[r10>>2];r12=FUNCTION_TABLE[r11](r4);r13=r12&1;HEAP8[70668]=r13;HEAP32[71360>>2]=55876;HEAP32[71364>>2]=55896;HEAP32[71388>>2]=70624;HEAP32[71380>>2]=0;HEAP32[71384>>2]=0;HEAP32[71368>>2]=4098;HEAP32[71376>>2]=0;HEAP32[71372>>2]=6;_memset(71396,0,40)|0;__ZNSt3__16localeC2Ev(71392);HEAP32[71436>>2]=0;HEAP32[71440>>2]=-1;r14=HEAP32[71360>>2];r15=r14-12|0;r16=r15;r17=HEAP32[r16>>2];r18=r17+24|0;r19=r18+71360|0;r20=r19;r21=HEAP32[r20>>2];HEAP32[71272>>2]=55876;HEAP32[71276>>2]=55896;HEAP32[71300>>2]=r21;r22=(r21|0)==0;r23=r22&1;HEAP32[71292>>2]=r23;HEAP32[71296>>2]=0;HEAP32[71280>>2]=4098;HEAP32[71288>>2]=0;HEAP32[71284>>2]=6;_memset(71308,0,40)|0;__ZNSt3__16localeC2Ev(71304);HEAP32[71348>>2]=0;HEAP32[71352>>2]=-1;r24=HEAP32[71464>>2];r25=r24-12|0;r26=r25;r27=HEAP32[r26>>2];r28=r27+72|0;r29=r28+71464|0;r30=r29;HEAP32[r30>>2]=71184;r31=HEAP32[71360>>2];r32=r31-12|0;r33=r32;r34=HEAP32[r33>>2];r35=r34+4|0;r36=r35+71360|0;r37=r36;r38=HEAP32[r37>>2];r39=r38|8192;HEAP32[r37>>2]=r39;r40=HEAP32[71360>>2];r41=r40-12|0;r42=r41;r43=HEAP32[r42>>2];r44=r43+72|0;r45=r44+71360|0;r46=r45;HEAP32[r46>>2]=71184;r47=_atexit(610,71904,___dso_handle);return}FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+8>>2]](r3|0);HEAP32[70660>>2]=r4;HEAP32[70664>>2]=70992;r8=r5;r9=HEAP32[r8>>2];r10=r9+28|0;r11=HEAP32[r10>>2];r12=FUNCTION_TABLE[r11](r4);r13=r12&1;HEAP8[70668]=r13;HEAP32[71360>>2]=55876;HEAP32[71364>>2]=55896;HEAP32[71388>>2]=70624;HEAP32[71380>>2]=0;HEAP32[71384>>2]=0;HEAP32[71368>>2]=4098;HEAP32[71376>>2]=0;HEAP32[71372>>2]=6;_memset(71396,0,40)|0;__ZNSt3__16localeC2Ev(71392);HEAP32[71436>>2]=0;HEAP32[71440>>2]=-1;r14=HEAP32[71360>>2];r15=r14-12|0;r16=r15;r17=HEAP32[r16>>2];r18=r17+24|0;r19=r18+71360|0;r20=r19;r21=HEAP32[r20>>2];HEAP32[71272>>2]=55876;HEAP32[71276>>2]=55896;HEAP32[71300>>2]=r21;r22=(r21|0)==0;r23=r22&1;HEAP32[71292>>2]=r23;HEAP32[71296>>2]=0;HEAP32[71280>>2]=4098;HEAP32[71288>>2]=0;HEAP32[71284>>2]=6;_memset(71308,0,40)|0;__ZNSt3__16localeC2Ev(71304);HEAP32[71348>>2]=0;HEAP32[71352>>2]=-1;r24=HEAP32[71464>>2];r25=r24-12|0;r26=r25;r27=HEAP32[r26>>2];r28=r27+72|0;r29=r28+71464|0;r30=r29;HEAP32[r30>>2]=71184;r31=HEAP32[71360>>2];r32=r31-12|0;r33=r32;r34=HEAP32[r33>>2];r35=r34+4|0;r36=r35+71360|0;r37=r36;r38=HEAP32[r37>>2];r39=r38|8192;HEAP32[r37>>2]=r39;r40=HEAP32[71360>>2];r41=r40-12|0;r42=r41;r43=HEAP32[r42>>2];r44=r43+72|0;r45=r44+71360|0;r46=r45;HEAP32[r46>>2]=71184;r47=_atexit(610,71904,___dso_handle);return}function __ZNSt11logic_errorD0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53984;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)<0){_free(HEAP32[r2>>2]-12|0);r4=r1;_free(r4);return}else{r4=r1;_free(r4);return}}function __ZNSt11logic_errorD2Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53984;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)>=0){r4=r1|0;return}_free(HEAP32[r2>>2]-12|0);r4=r1|0;return}function __ZNKSt11logic_error4whatEv(r1){return HEAP32[r1+4>>2]}function __ZNSt13runtime_errorD0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53888;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)<0){_free(HEAP32[r2>>2]-12|0);r4=r1;_free(r4);return}else{r4=r1;_free(r4);return}}function __ZNSt13runtime_errorD2Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53888;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)>=0){r4=r1|0;return}_free(HEAP32[r2>>2]-12|0);r4=r1|0;return}function __ZNKSt13runtime_error4whatEv(r1){return HEAP32[r1+4>>2]}function __ZNSt12length_errorD0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53984;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)<0){_free(HEAP32[r2>>2]-12|0);r4=r1;_free(r4);return}else{r4=r1;_free(r4);return}}function __ZNSt12out_of_rangeD0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53984;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)<0){_free(HEAP32[r2>>2]-12|0);r4=r1;_free(r4);return}else{r4=r1;_free(r4);return}}function __ZNKSt3__114error_category23default_error_conditionEi(r1,r2,r3){HEAP32[r1>>2]=r3;HEAP32[r1+4>>2]=r2;return}function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE(r1,r2,r3){var r4,r5,r6;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+12>>2]](r5,r1,r2);if((HEAP32[r5+4>>2]|0)!=(HEAP32[r3+4>>2]|0)){r6=0;STACKTOP=r4;return r6}r6=(HEAP32[r5>>2]|0)==(HEAP32[r3>>2]|0);STACKTOP=r4;return r6}function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi(r1,r2,r3){var r4;if((HEAP32[r2+4>>2]|0)!=(r1|0)){r4=0;return r4}r4=(HEAP32[r2>>2]|0)==(r3|0);return r4}function __ZNSt3__112system_errorD0Ev(r1){var r2,r3,r4,r5;HEAP32[r1>>2]=53888;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)>=0){r4=r1|0;r5=r1;_free(r5);return}_free(HEAP32[r2>>2]-12|0);r4=r1|0;r5=r1;_free(r5);return}function __ZNSt3__112system_errorD2Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53888;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)>=0){r4=r1|0;return}_free(HEAP32[r2>>2]-12|0);r4=r1|0;return}function __ZNSt3__111__call_onceERVmPvPFvS2_E(r1,r2){var r3,r4,r5,r6;if((HEAP32[r1>>2]|0)==1){while(1){_pthread_cond_wait(70904,70880);if((HEAP32[r1>>2]|0)!=1){break}}}if((HEAP32[r1>>2]|0)!=0){return}HEAP32[r1>>2]=1;r3=r2+4|0;r4=HEAP32[r3+4>>2];r5=HEAP32[r2>>2]+(r4>>1)|0;r2=HEAP32[r3>>2];if((r4&1|0)==0){r6=r2}else{r6=HEAP32[HEAP32[r5>>2]+r2>>2]}FUNCTION_TABLE[r6](r5);HEAP32[r1>>2]=-1;_pthread_cond_broadcast(70904);return}function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(){var r1,r2,r3,r4,r5,r6,r7;r1=0;r2=___cxa_allocate_exception(8);r3=r2;HEAP32[r3>>2]=53984;r4=_strlen(7520);r5=r4+13|0;r6=(r5|0)==0?1:r5;while(1){r7=_malloc(r6);if((r7|0)!=0){r1=18;break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){break}FUNCTION_TABLE[r5]()}if(r1==18){HEAP32[r7+4>>2]=r4;HEAP32[r7>>2]=r4;r1=r7+12|0;HEAP32[r2+4>>2]=r1;HEAP32[r7+8>>2]=0;_memcpy(r1,7520,r4+1|0)|0;HEAP32[r3>>2]=53952;___cxa_throw(r2,62248,416)}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(){var r1,r2,r3,r4,r5,r6,r7;r1=0;r2=___cxa_allocate_exception(8);r3=r2;HEAP32[r3>>2]=53984;r4=_strlen(7520);r5=r4+13|0;r6=(r5|0)==0?1:r5;while(1){r7=_malloc(r6);if((r7|0)!=0){r1=18;break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){break}FUNCTION_TABLE[r5]()}if(r1==18){HEAP32[r7+4>>2]=r4;HEAP32[r7>>2]=r4;r1=r7+12|0;HEAP32[r2+4>>2]=r1;HEAP32[r7+8>>2]=0;_memcpy(r1,7520,r4+1|0)|0;HEAP32[r3>>2]=53920;___cxa_throw(r2,62232,416)}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12;r5=0;r6=HEAP8[r2];r7=(r6&1)==0;if(r7){r8=(r6&255)>>>1}else{r8=HEAP32[r2+4>>2]}if(r8>>>0<r3>>>0){__ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv()}if(r7){r9=r2+1|0}else{r9=HEAP32[r2+8>>2]}r2=r9+r3|0;r9=r8-r3|0;r3=r9>>>0<r4>>>0?r9:r4;if(r3>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}if(r3>>>0<11){HEAP8[r1]=r3<<1;r10=r1+1|0;_memcpy(r10,r2,r3)|0;r11=r10+r3|0;HEAP8[r11]=0;return}r4=r3+16&-16;r9=(r4|0)==0?1:r4;while(1){r12=_malloc(r9);if((r12|0)!=0){r5=24;break}r8=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r8|0)==0){r5=21;break}FUNCTION_TABLE[r8]()}if(r5==21){r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}else if(r5==24){HEAP32[r1+8>>2]=r12;HEAP32[r1>>2]=r4|1;HEAP32[r1+4>>2]=r3;r10=r12;_memcpy(r10,r2,r3)|0;r11=r10+r3|0;HEAP8[r11]=0;return}}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(r1){var r2;if((HEAP8[r1]&1)==0){return}r2=HEAP32[r1+8>>2];if((r2|0)==0){return}_free(r2);return}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r1,r2){var r3,r4,r5,r6,r7,r8,r9;if((r1|0)==(r2|0)){return}r3=HEAP8[r2];if((r3&1)==0){r4=(r3&255)>>>1;r5=r2+1|0}else{r4=HEAP32[r2+4>>2];r5=HEAP32[r2+8>>2]}r2=r1;r3=HEAP8[r2];if((r3&1)==0){r6=10;r7=r3}else{r3=HEAP32[r1>>2];r6=(r3&-2)-1|0;r7=r3&255}r3=(r7&1)==0;if(r6>>>0<r4>>>0){if(r3){r8=(r7&255)>>>1}else{r8=HEAP32[r1+4>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(r1,r6,r4-r6|0,r8,0,r8,r4,r5);return}if(r3){r9=r1+1|0}else{r9=HEAP32[r1+8>>2]}_memmove(r9,r5,r4,1,0);HEAP8[r9+r4|0]=0;if((HEAP8[r2]&1)==0){HEAP8[r2]=r4<<1;return}else{HEAP32[r1+4>>2]=r4;return}}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=_strlen(r2);r4=r1;r5=HEAP8[r4];if((r5&1)==0){r6=10;r7=r5}else{r5=HEAP32[r1>>2];r6=(r5&-2)-1|0;r7=r5&255}r5=(r7&1)==0;if(r6>>>0<r3>>>0){if(r5){r8=(r7&255)>>>1}else{r8=HEAP32[r1+4>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(r1,r6,r3-r6|0,r8,0,r8,r3,r2);return}if(r5){r9=r1+1|0}else{r9=HEAP32[r1+8>>2]}_memmove(r9,r2,r3,1,0);HEAP8[r9+r3|0]=0;if((HEAP8[r4]&1)==0){HEAP8[r4]=r3<<1;return}else{HEAP32[r1+4>>2]=r3;return}}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;r3=r1;r4=HEAP8[r3];r5=(r4&1)==0;if(r5){r6=(r4&255)>>>1}else{r6=HEAP32[r1+4>>2]}if(r6>>>0>=r2>>>0){if(r5){HEAP8[r2+(r1+1)|0]=0;HEAP8[r3]=r2<<1;return}else{HEAP8[HEAP32[r1+8>>2]+r2|0]=0;HEAP32[r1+4>>2]=r2;return}}r7=r2-r6|0;if((r6|0)==(r2|0)){return}if(r5){r8=10;r9=r4}else{r4=HEAP32[r1>>2];r8=(r4&-2)-1|0;r9=r4&255}if((r9&1)==0){r10=(r9&255)>>>1}else{r10=HEAP32[r1+4>>2]}if((r8-r10|0)>>>0<r7>>>0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r1,r8,r7-r8+r10|0,r10,r10,0);r11=HEAP8[r3]}else{r11=r9}if((r11&1)==0){r12=r1+1|0}else{r12=HEAP32[r1+8>>2]}_memset(r12+r10|0,0,r7)|0;r11=r10+r7|0;if((HEAP8[r3]&1)==0){HEAP8[r3]=r11<<1}else{HEAP32[r1+4>>2]=r11}HEAP8[r12+r11|0]=0;return}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r2=0;r3=r1;r4=HEAP8[r3];if((r4&1)==0){r5=10;r6=r4}else{r4=HEAP32[r1>>2];r5=(r4&-2)-1|0;r6=r4&255}r4=(r6&1)==0;if(r4){r7=(r6&255)>>>1}else{r7=HEAP32[r1+4>>2]}if(r7>>>0<11){r8=10}else{r8=(r7+16&-16)-1|0}if((r8|0)==(r5|0)){return}do{if((r8|0)==10){r9=r1+1|0;r10=HEAP32[r1+8>>2];if(!r4){r11=0;r12=1;r13=r10;r14=r9;r2=37;break}_memcpy(r9,r10,((r6&255)>>>1)+1|0)|0;r15=r9;r16=r10;r17=0;r2=39}else{r10=r8+1|0;r9=(r10|0)==0?1:r10;L16:do{if(r8>>>0>r5>>>0){while(1){r10=_malloc(r9);if((r10|0)!=0){r18=r10;break L16}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){break}FUNCTION_TABLE[r10]()}r10=___cxa_allocate_exception(4);HEAP32[r10>>2]=53824;___cxa_throw(r10,62184,110)}else{while(1){r10=_malloc(r9);if((r10|0)!=0){r18=r10;break L16}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){break}FUNCTION_TABLE[r10]()}r10=___cxa_allocate_exception(4);HEAP32[r10>>2]=53824;___cxa_throw(r10,62184,110)}}while(0);if(r4){_memcpy(r18,r1+1|0,((r6&255)>>>1)+1|0)|0;r19=r18;break}else{r11=1;r12=1;r13=HEAP32[r1+8>>2];r14=r18;r2=37;break}}}while(0);if(r2==37){_memcpy(r14,r13,HEAP32[r1+4>>2]+1|0)|0;r15=r14;r16=r13;r17=r11;r2=39}do{if(r2==39){if((r16|0)==0){if(r17){r19=r15;break}}else{_free(r16);if(r17){r19=r15;break}}HEAP8[r3]=r7<<1;return}}while(0);HEAP32[r1>>2]=r8+1|1;HEAP32[r1+4>>2]=r7;HEAP32[r1+8>>2]=r19;return}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r4=r1;r5=HEAP8[r4];if((r5&1)==0){r6=10;r7=r5}else{r5=HEAP32[r1>>2];r6=(r5&-2)-1|0;r7=r5&255}r5=(r7&1)==0;if(r5){r8=(r7&255)>>>1}else{r8=HEAP32[r1+4>>2]}if((r6-r8|0)>>>0<r3>>>0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(r1,r6,r3-r6+r8|0,r8,r8,0,r3,r2);return}if((r3|0)==0){return}if(r5){r9=r1+1|0}else{r9=HEAP32[r1+8>>2]}_memcpy(r9+r8|0,r2,r3)|0;r2=r8+r3|0;if((HEAP8[r4]&1)==0){HEAP8[r4]=r2<<1}else{HEAP32[r1+4>>2]=r2}HEAP8[r9+r2|0]=0;return}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r9=0;if((-18-r2|0)>>>0<r3>>>0){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}if((HEAP8[r1]&1)==0){r10=r1+1|0}else{r10=HEAP32[r1+8>>2]}do{if(r2>>>0<2147483623){r11=r3+r2|0;r12=r2<<1;r13=r11>>>0<r12>>>0?r12:r11;if(r13>>>0<11){r14=11;break}r14=r13+16&-16}else{r14=-17}}while(0);r3=(r14|0)==0?1:r14;while(1){r15=_malloc(r3);if((r15|0)!=0){break}r13=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r13|0)==0){r9=17;break}FUNCTION_TABLE[r13]()}if(r9==17){r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}if((r5|0)!=0){_memcpy(r15,r10,r5)|0}if((r7|0)!=0){_memcpy(r15+r5|0,r8,r7)|0}r8=r4-r6|0;if((r8|0)!=(r5|0)){_memcpy(r15+(r7+r5)|0,r10+(r6+r5)|0,r8-r5|0)|0}if((r2|0)==10|(r10|0)==0){r16=r1+8|0;HEAP32[r16>>2]=r15;r17=r14|1;r18=r1|0;HEAP32[r18>>2]=r17;r19=r8+r7|0;r20=r1+4|0;HEAP32[r20>>2]=r19;r21=r15+r19|0;HEAP8[r21]=0;return}_free(r10);r16=r1+8|0;HEAP32[r16>>2]=r15;r17=r14|1;r18=r1|0;HEAP32[r18>>2]=r17;r19=r8+r7|0;r20=r1+4|0;HEAP32[r20>>2]=r19;r21=r15+r19|0;HEAP8[r21]=0;return}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r7=0;if((-17-r2|0)>>>0<r3>>>0){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}if((HEAP8[r1]&1)==0){r8=r1+1|0}else{r8=HEAP32[r1+8>>2]}do{if(r2>>>0<2147483623){r9=r3+r2|0;r10=r2<<1;r11=r9>>>0<r10>>>0?r10:r9;if(r11>>>0<11){r12=11;break}r12=r11+16&-16}else{r12=-17}}while(0);r3=(r12|0)==0?1:r12;while(1){r13=_malloc(r3);if((r13|0)!=0){break}r11=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r11|0)==0){r7=17;break}FUNCTION_TABLE[r11]()}if(r7==17){r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}if((r5|0)!=0){_memcpy(r13,r8,r5)|0}if((r4|0)!=(r5|0)){_memcpy(r13+(r6+r5)|0,r8+r5|0,r4-r5|0)|0}if((r2|0)==10|(r8|0)==0){r14=r1+8|0;HEAP32[r14>>2]=r13;r15=r12|1;r16=r1|0;HEAP32[r16>>2]=r15;return}_free(r8);r14=r1+8|0;HEAP32[r14>>2]=r13;r15=r12|1;r16=r1|0;HEAP32[r16>>2]=r15;return}function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13;r5=0;r6=HEAP8[r1];r7=(r6&1)==0;if(r7){r8=(r6&255)>>>1}else{r8=HEAP32[r1+4>>2]}if(r8>>>0<r3>>>0|(r8-r3|0)>>>0<r4>>>0){r9=-1;return r9}if((r4|0)==0){r9=r3;return r9}if(r7){r10=r1+1|0}else{r10=HEAP32[r1+8>>2]}r1=r10+r3|0;r7=r10+r8|0;r6=r2+r4|0;if((r7-r1|0)<(r4|0)){r9=-1;return r9}r11=r8+(1-r4)|0;r4=r10+r11|0;if((r11|0)==(r3|0)){r9=-1;return r9}r3=HEAP8[r2];r11=r1;L21:while(1){if((HEAP8[r11]|0)==r3<<24>>24){r1=r2;r8=r11;while(1){r12=r1+1|0;if((r12|0)==(r6|0)){break L21}r13=r8+1|0;if((HEAP8[r13]|0)==(HEAP8[r12]|0)){r1=r12;r8=r13}else{break}}}r8=r11+1|0;if((r8|0)==(r4|0)){r9=-1;r5=18;break}else{r11=r8}}if(r5==18){return r9}if((r11|0)==(r7|0)){r9=-1;return r9}r9=r11-r10|0;return r9}function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r3=0;r4=_strlen(r2);r5=HEAP8[r1];r6=(r5&1)==0;if(r6){r7=(r5&255)>>>1}else{r7=HEAP32[r1+4>>2]}if((r4|0)==-1){__ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv()}if(r6){r8=r1+1|0}else{r8=HEAP32[r1+8>>2]}r1=r7>>>0>r4>>>0;r6=r1?r4:r7;if((r6|0)==0){r9=r7>>>0<r4>>>0;r10=r1&1;r11=r9?-1:r10;return r11}else{r12=r6;r13=r8;r14=r2}while(1){r15=HEAP8[r13];r16=HEAP8[r14];if(r15<<24>>24!=r16<<24>>24){break}r2=r12-1|0;if((r2|0)==0){r3=14;break}else{r12=r2;r13=r13+1|0;r14=r14+1|0}}if(r3==14){r9=r7>>>0<r4>>>0;r10=r1&1;r11=r9?-1:r10;return r11}if(r15<<24>>24==r16<<24>>24){r9=r7>>>0<r4>>>0;r10=r1&1;r11=r9?-1:r10;return r11}else{return(r15&255)-(r16&255)|0}}function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(r1){var r2;if((HEAP8[r1]&1)==0){return}r2=HEAP32[r1+8>>2];if((r2|0)==0){return}_free(r2);return}function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r3=0;r4=r2;while(1){if((HEAP32[r4>>2]|0)==0){break}else{r4=r4+4|0}}r5=r2;r6=r4-r5|0;r4=r6>>2;r7=r1;r8=HEAP8[r7];if((r8&1)==0){r9=1;r10=r8}else{r8=HEAP32[r1>>2];r9=(r8&-2)-1|0;r10=r8&255}if(r9>>>0>=r4>>>0){if((r10&1)==0){r11=r1+4|0}else{r11=HEAP32[r1+8>>2]}r8=(r4|0)==0;do{if(r11-r5>>2>>>0<r4>>>0){if(r8){break}else{r12=r4}while(1){r13=r12-1|0;HEAP32[r11+(r13<<2)>>2]=HEAP32[r2+(r13<<2)>>2];if((r13|0)==0){break}else{r12=r13}}}else{if(r8){break}else{r14=r2;r15=r4;r16=r11}while(1){r13=r15-1|0;HEAP32[r16>>2]=HEAP32[r14>>2];if((r13|0)==0){break}else{r14=r14+4|0;r15=r13;r16=r16+4|0}}}}while(0);HEAP32[r11+(r4<<2)>>2]=0;if((HEAP8[r7]&1)==0){HEAP8[r7]=r6>>>1;return}else{HEAP32[r1+4>>2]=r4;return}}if((1073741806-r9|0)>>>0<(r4-r9|0)>>>0){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}if((r10&1)==0){r17=r1+4|0}else{r17=HEAP32[r1+8>>2]}do{if(r9>>>0<536870887){r10=r9<<1;r6=r4>>>0<r10>>>0?r10:r4;if(r6>>>0<2){r18=2;break}r18=r6+4&-4}else{r18=1073741807}}while(0);r6=r18<<2;r10=(r6|0)==0?1:r6;while(1){r19=_malloc(r10);if((r19|0)!=0){break}r6=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r6|0)==0){r3=33;break}FUNCTION_TABLE[r6]()}if(r3==33){r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}r3=r19;if((r4|0)!=0){r19=r2;r2=r4;r10=r3;while(1){r6=r2-1|0;HEAP32[r10>>2]=HEAP32[r19>>2];if((r6|0)==0){break}else{r19=r19+4|0;r2=r6;r10=r10+4|0}}}if(!((r9|0)==1|(r17|0)==0)){_free(r17)}HEAP32[r1+8>>2]=r3;HEAP32[r1>>2]=r18|1;HEAP32[r1+4>>2]=r4;HEAP32[r3+(r4<<2)>>2]=0;return}function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;r2=0;r3=r1;r4=HEAP8[r3];if((r4&1)==0){r5=1;r6=r4}else{r4=HEAP32[r1>>2];r5=(r4&-2)-1|0;r6=r4&255}r4=(r6&1)==0;if(r4){r7=(r6&255)>>>1}else{r7=HEAP32[r1+4>>2]}if(r7>>>0<2){r8=1}else{r8=(r7+4&-4)-1|0}if((r8|0)==(r5|0)){return}do{if((r8|0)==1){r9=r1+4|0;r10=HEAP32[r1+8>>2];if(r4){r11=0;r12=1;r13=r10;r14=r9;r2=38}else{r15=0;r16=1;r17=r10;r18=r9;r2=37}}else{r9=(r8<<2)+4|0;r10=(r9|0)==0?1:r9;L16:do{if(r8>>>0>r5>>>0){while(1){r9=_malloc(r10);if((r9|0)!=0){r19=r9;break L16}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}else{while(1){r9=_malloc(r10);if((r9|0)!=0){r19=r9;break L16}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);r10=r19;if(r4){r11=1;r12=0;r13=r1+4|0;r14=r10;r2=38;break}else{r15=1;r16=1;r17=HEAP32[r1+8>>2];r18=r10;r2=37;break}}}while(0);if(r2==37){r20=HEAP32[r1+4>>2];r21=r15;r22=r16;r23=r17;r24=r18}else if(r2==38){r20=(r6&255)>>>1;r21=r11;r22=r12;r23=r13;r24=r14}r14=r20+1|0;if((r14|0)!=0){r20=r23;r13=r14;r14=r24;while(1){r12=r13-1|0;HEAP32[r14>>2]=HEAP32[r20>>2];if((r12|0)==0){break}else{r20=r20+4|0;r13=r12;r14=r14+4|0}}}if(!(r22^1|(r23|0)==0)){_free(r23)}if(r21){HEAP32[r1>>2]=r8+1|1;HEAP32[r1+4>>2]=r7;HEAP32[r1+8>>2]=r24;return}else{HEAP8[r3]=r7<<1;return}}function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r8=0;if((1073741807-r2|0)>>>0<r3>>>0){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}if((HEAP8[r1]&1)==0){r9=r1+4|0}else{r9=HEAP32[r1+8>>2]}do{if(r2>>>0<536870887){r10=r3+r2|0;r11=r2<<1;r12=r10>>>0<r11>>>0?r11:r10;if(r12>>>0<2){r13=2;break}r13=r12+4&-4}else{r13=1073741807}}while(0);r3=r13<<2;r12=(r3|0)==0?1:r3;while(1){r14=_malloc(r12);if((r14|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r8=17;break}FUNCTION_TABLE[r3]()}if(r8==17){r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}r8=r14;if((r5|0)!=0){r14=r9;r12=r5;r3=r8;while(1){r10=r12-1|0;HEAP32[r3>>2]=HEAP32[r14>>2];if((r10|0)==0){break}else{r14=r14+4|0;r12=r10;r3=r3+4|0}}}r3=r4-r6|0;if((r3|0)!=(r5|0)){r4=r9+(r6+r5<<2)|0;r6=r3-r5|0;r3=r8+(r7+r5<<2)|0;while(1){r5=r6-1|0;HEAP32[r3>>2]=HEAP32[r4>>2];if((r5|0)==0){break}else{r4=r4+4|0;r6=r5;r3=r3+4|0}}}if((r2|0)==1|(r9|0)==0){r15=r1+8|0;HEAP32[r15>>2]=r8;r16=r13|1;r17=r1|0;HEAP32[r17>>2]=r16;return}_free(r9);r15=r1+8|0;HEAP32[r15>>2]=r8;r16=r13|1;r17=r1|0;HEAP32[r17>>2]=r16;return}function __ZNSt3__18ios_base5clearEj(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+48|0;r5=r4;r6=r4+16;r7=r4+32;r8=(HEAP32[r1+24>>2]|0)==0;if(r8){HEAP32[r1+16>>2]=r2|1}else{HEAP32[r1+16>>2]=r2}if(((r8&1|r2)&HEAP32[r1+20>>2]|0)==0){STACKTOP=r4;return}r4=___cxa_allocate_exception(16);do{if((HEAP8[72024]|0)==0){if((___cxa_guard_acquire(72024)|0)==0){break}HEAP32[69920>>2]=55496}}while(0);r1=r6;r2=r7;while(1){r9=_malloc(16);if((r9|0)!=0){break}r8=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r8|0)==0){r3=17;break}FUNCTION_TABLE[r8]()}if(r3==17){r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}r8=r7+8|0;HEAP32[r8>>2]=r9;HEAP32[r7>>2]=17;r10=r7+4|0;HEAP32[r10>>2]=15;_memcpy(r9,34528,15)|0;HEAP8[r9+15|0]=0;r9=r5;r11=HEAP8[r2];if((r11&1)==0){r12=(r11&255)>>>1}else{r12=HEAP32[r10>>2]}if((r12|0)!=0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(r7,30784,2)}FUNCTION_TABLE[HEAP32[HEAP32[69920>>2]+24>>2]](r5,69920,1);r12=HEAP8[r9];if((r12&1)==0){r13=(r12&255)>>>1;r14=r5+1|0}else{r13=HEAP32[r5+4>>2];r14=HEAP32[r5+8>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(r7,r14,r13);do{if((HEAP8[r9]&1)!=0){r13=HEAP32[r5+8>>2];if((r13|0)==0){break}_free(r13)}}while(0);HEAP32[r1>>2]=HEAP32[r2>>2];HEAP32[r1+4>>2]=HEAP32[r2+4>>2];HEAP32[r1+8>>2]=HEAP32[r2+8>>2];HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;r5=r4;HEAP32[r5>>2]=53888;r9=r4+4|0;if((HEAP8[r1]&1)==0){r15=r6+1|0}else{r15=HEAP32[r6+8>>2]}r13=_strlen(r15);r14=r13+13|0;r7=(r14|0)==0?1:r14;while(1){r16=_malloc(r7);if((r16|0)!=0){break}r14=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r14|0)==0){r3=47;break}FUNCTION_TABLE[r14]()}if(r3==47){r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}HEAP32[r16+4>>2]=r13;HEAP32[r16>>2]=r13;r3=r16+12|0;HEAP32[r9>>2]=r3;HEAP32[r16+8>>2]=0;_memcpy(r3,r15,r13+1|0)|0;do{if((HEAP8[r1]&1)!=0){r13=HEAP32[r6+8>>2];if((r13|0)==0){break}_free(r13)}}while(0);do{if((HEAP8[r2]&1)!=0){r6=HEAP32[r8>>2];if((r6|0)==0){break}_free(r6)}}while(0);HEAP32[r5>>2]=56064;r8=r4+8|0;r2=_bitshift64Shl(69920,0,32);HEAP32[r8>>2]=r2|1;HEAP32[r8+4>>2]=tempRet0;HEAP32[r5>>2]=54632;___cxa_throw(r4,63016,102)}function __ZNSt3__18ios_baseD2Ev(r1){var r2,r3,r4,r5;HEAP32[r1>>2]=54608;r2=HEAP32[r1+40>>2];r3=r1+32|0;r4=r1+36|0;if((r2|0)!=0){r5=r2;while(1){r2=r5-1|0;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+(r2<<2)>>2]](0,r1,HEAP32[HEAP32[r4>>2]+(r2<<2)>>2]);if((r2|0)==0){break}else{r5=r2}}}r5=HEAP32[r1+28>>2];r2=r5+4|0;if(((tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5)}_free(HEAP32[r3>>2]);_free(HEAP32[r4>>2]);_free(HEAP32[r1+48>>2]);_free(HEAP32[r1+60>>2]);return}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55800;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1;_free(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1;_free(r4);return}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev(r1){var r2;HEAP32[r1>>2]=55800;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(r1,r2){return}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(r1,r2,r3){return r1}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(r1,r2,r3,r4,r5,r6){r6=r1;HEAP32[r6>>2]=0;HEAP32[r6+4>>2]=0;r6=r1+8|0;HEAP32[r6>>2]=-1;HEAP32[r6+4>>2]=-1;return}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(r1,r2,r3,r4){r4=STACKTOP;r2=r3;r3=STACKTOP;STACKTOP=STACKTOP+16|0;HEAP32[r3>>2]=HEAP32[r2>>2];HEAP32[r3+4>>2]=HEAP32[r2+4>>2];HEAP32[r3+8>>2]=HEAP32[r2+8>>2];HEAP32[r3+12>>2]=HEAP32[r2+12>>2];r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;r2=r1+8|0;HEAP32[r2>>2]=-1;HEAP32[r2+4>>2]=-1;STACKTOP=r4;return}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv(r1){return 0}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(r1){return 0}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=0;r5=r1;if((r3|0)<=0){r6=0;return r6}r7=r1+12|0;r8=r1+16|0;r9=r2;r2=0;while(1){r10=HEAP32[r7>>2];if(r10>>>0<HEAP32[r8>>2]>>>0){HEAP32[r7>>2]=r10+1;r11=HEAP8[r10]}else{r10=FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+40>>2]](r1);if((r10|0)==-1){r6=r2;r4=8;break}r11=r10&255}HEAP8[r9]=r11;r10=r2+1|0;if((r10|0)<(r3|0)){r9=r9+1|0;r2=r10}else{r6=r10;r4=8;break}}if(r4==8){return r6}}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv(r1){return-1}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv(r1){var r2,r3;if((FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r1)|0)==-1){r2=-1;return r2}r3=r1+12|0;r1=HEAP32[r3>>2];HEAP32[r3>>2]=r1+1;r2=HEAPU8[r1];return r2}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(r1,r2){return-1}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=0;r5=r1;if((r3|0)<=0){r6=0;return r6}r7=r1+24|0;r8=r1+28|0;r9=0;r10=r2;while(1){r2=HEAP32[r7>>2];if(r2>>>0<HEAP32[r8>>2]>>>0){r11=HEAP8[r10];HEAP32[r7>>2]=r2+1;HEAP8[r2]=r11}else{if((FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+52>>2]](r1,HEAPU8[r10])|0)==-1){r6=r9;r4=7;break}}r11=r9+1|0;if((r11|0)<(r3|0)){r9=r11;r10=r10+1|0}else{r6=r11;r4=7;break}}if(r4==7){return r6}}function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi(r1,r2){return-1}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55728;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1;_free(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1;_free(r4);return}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev(r1){var r2;HEAP32[r1>>2]=55728;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(r1,r2){return}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(r1,r2,r3){return r1}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(r1,r2,r3,r4,r5,r6){r6=r1;HEAP32[r6>>2]=0;HEAP32[r6+4>>2]=0;r6=r1+8|0;HEAP32[r6>>2]=-1;HEAP32[r6+4>>2]=-1;return}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(r1,r2,r3,r4){r4=STACKTOP;r2=r3;r3=STACKTOP;STACKTOP=STACKTOP+16|0;HEAP32[r3>>2]=HEAP32[r2>>2];HEAP32[r3+4>>2]=HEAP32[r2+4>>2];HEAP32[r3+8>>2]=HEAP32[r2+8>>2];HEAP32[r3+12>>2]=HEAP32[r2+12>>2];r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;r2=r1+8|0;HEAP32[r2>>2]=-1;HEAP32[r2+4>>2]=-1;STACKTOP=r4;return}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv(r1){return 0}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(r1){return 0}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=0;r5=r1;if((r3|0)<=0){r6=0;return r6}r7=r1+12|0;r8=r1+16|0;r9=r2;r2=0;while(1){r10=HEAP32[r7>>2];if(r10>>>0<HEAP32[r8>>2]>>>0){HEAP32[r7>>2]=r10+4;r11=HEAP32[r10>>2]}else{r10=FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+40>>2]](r1);if((r10|0)==-1){r6=r2;r4=8;break}else{r11=r10}}HEAP32[r9>>2]=r11;r10=r2+1|0;if((r10|0)>=(r3|0)){r6=r10;r4=8;break}r9=r9+4|0;r2=r10}if(r4==8){return r6}}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv(r1){return-1}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv(r1){var r2,r3;if((FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r1)|0)==-1){r2=-1;return r2}r3=r1+12|0;r1=HEAP32[r3>>2];HEAP32[r3>>2]=r1+4;r2=HEAP32[r1>>2];return r2}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(r1,r2){return-1}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=0;r5=r1;if((r3|0)<=0){r6=0;return r6}r7=r1+24|0;r8=r1+28|0;r9=0;r10=r2;while(1){r2=HEAP32[r7>>2];if(r2>>>0<HEAP32[r8>>2]>>>0){r11=HEAP32[r10>>2];HEAP32[r7>>2]=r2+4;HEAP32[r2>>2]=r11}else{if((FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+52>>2]](r1,HEAP32[r10>>2])|0)==-1){r6=r9;r4=8;break}}r11=r9+1|0;if((r11|0)>=(r3|0)){r6=r11;r4=8;break}r9=r11;r10=r10+4|0}if(r4==8){return r6}}function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj(r1,r2){return-1}function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+8|0);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+8|0);return}function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(r1){var r2,r3;r2=r1;r3=HEAP32[HEAP32[r1>>2]-12>>2];r1=r2+r3|0;__ZNSt3__18ios_baseD2Ev(r2+(r3+8)|0);if((r1|0)==0){return}_free(r1);return}function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+(HEAP32[HEAP32[r1>>2]-12>>2]+8)|0);return}function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(r1){var r2,r3,r4,r5,r6,r7,r8;r2=STACKTOP;STACKTOP=STACKTOP+8|0;r3=r2;r4=r1;r5=HEAP32[HEAP32[r4>>2]-12>>2];r6=r1;if((HEAP32[r6+(r5+24)>>2]|0)==0){STACKTOP=r2;return}r7=r3|0;HEAP8[r7]=0;HEAP32[r3+4>>2]=r1;do{if((HEAP32[r6+(r5+16)>>2]|0)==0){r1=HEAP32[r6+(r5+72)>>2];if((r1|0)==0){r8=r5}else{__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(r1);r8=HEAP32[HEAP32[r4>>2]-12>>2]}HEAP8[r7]=1;r1=HEAP32[r6+(r8+24)>>2];if((FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+24>>2]](r1)|0)!=-1){break}r1=HEAP32[HEAP32[r4>>2]-12>>2];__ZNSt3__18ios_base5clearEj(r6+r1|0,HEAP32[r6+(r1+16)>>2]|1)}}while(0);__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(r3);STACKTOP=r2;return}function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+8|0);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+8|0);return}function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(r1){var r2,r3;r2=r1;r3=HEAP32[HEAP32[r1>>2]-12>>2];r1=r2+r3|0;__ZNSt3__18ios_baseD2Ev(r2+(r3+8)|0);if((r1|0)==0){return}_free(r1);return}function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+(HEAP32[HEAP32[r1>>2]-12>>2]+8)|0);return}function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(r1){var r2,r3,r4,r5,r6,r7,r8;r2=STACKTOP;STACKTOP=STACKTOP+8|0;r3=r2;r4=r1;r5=HEAP32[HEAP32[r4>>2]-12>>2];r6=r1;if((HEAP32[r6+(r5+24)>>2]|0)==0){STACKTOP=r2;return}r7=r3|0;HEAP8[r7]=0;HEAP32[r3+4>>2]=r1;do{if((HEAP32[r6+(r5+16)>>2]|0)==0){r1=HEAP32[r6+(r5+72)>>2];if((r1|0)==0){r8=r5}else{__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(r1);r8=HEAP32[HEAP32[r4>>2]-12>>2]}HEAP8[r7]=1;r1=HEAP32[r6+(r8+24)>>2];if((FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+24>>2]](r1)|0)!=-1){break}r1=HEAP32[HEAP32[r4>>2]-12>>2];__ZNSt3__18ios_base5clearEj(r6+r1|0,HEAP32[r6+(r1+16)>>2]|1)}}while(0);__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(r3);STACKTOP=r2;return}function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+4|0);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+4|0);return}function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(r1){var r2,r3;r2=r1;r3=HEAP32[HEAP32[r1>>2]-12>>2];r1=r2+r3|0;__ZNSt3__18ios_baseD2Ev(r2+(r3+4)|0);if((r1|0)==0){return}_free(r1);return}function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+(HEAP32[HEAP32[r1>>2]-12>>2]+4)|0);return}function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(r1){var r2,r3,r4;r2=r1+4|0;r1=HEAP32[r2>>2];r3=HEAP32[HEAP32[r1>>2]-12>>2];r4=r1;if((HEAP32[r4+(r3+24)>>2]|0)==0){return}if((HEAP32[r4+(r3+16)>>2]|0)!=0){return}if((HEAP32[r4+(r3+4)>>2]&8192|0)==0){return}if(__ZSt18uncaught_exceptionv()){return}r3=HEAP32[r2>>2];r4=HEAP32[r3+(HEAP32[HEAP32[r3>>2]-12>>2]+24)>>2];if((FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+24>>2]](r4)|0)!=-1){return}r4=HEAP32[r2>>2];r2=HEAP32[HEAP32[r4>>2]-12>>2];r3=r4;__ZNSt3__18ios_base5clearEj(r3+r2|0,HEAP32[r3+(r2+16)>>2]|1);return}function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r3=STACKTOP;STACKTOP=STACKTOP+24|0;r4=r3;r5=r3+8;r6=r3+16;r7=r5|0;HEAP8[r7]=0;HEAP32[r5+4>>2]=r1;r8=r1;r9=HEAP32[HEAP32[r8>>2]-12>>2];r10=r1;do{if((HEAP32[r10+(r9+16)>>2]|0)==0){r1=HEAP32[r10+(r9+72)>>2];if((r1|0)==0){r11=r9}else{__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(r1);r11=HEAP32[HEAP32[r8>>2]-12>>2]}HEAP8[r7]=1;r1=HEAP32[r10+(r11+28)>>2];r12=r1+4|0;tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+1,tempValue;r13=__ZNKSt3__16locale9use_facetERNS0_2idE(r1,71104);r14=r13;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+8>>2]](r1|0)}r1=HEAP32[HEAP32[r8>>2]-12>>2];r12=HEAP32[r10+(r1+24)>>2];r15=r10+r1|0;r16=r10+(r1+76)|0;r17=HEAP32[r16>>2];r18=r17&255;if((r17|0)==-1){r17=HEAP32[r10+(r1+28)>>2];r1=r17+4|0;tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+1,tempValue;r19=__ZNKSt3__16locale9use_facetERNS0_2idE(r17,71456);r20=FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+28>>2]](r19,32);if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+8>>2]](r17|0)}HEAP32[r16>>2]=r20<<24>>24;r21=r20}else{r21=r18}r18=HEAP32[HEAP32[r13>>2]+16>>2];HEAP32[r4>>2]=r12;FUNCTION_TABLE[r18](r6,r14,r4,r15,r21,r2);if((HEAP32[r6>>2]|0)!=0){break}r15=HEAP32[HEAP32[r8>>2]-12>>2];__ZNSt3__18ios_base5clearEj(r10+r15|0,HEAP32[r10+(r15+16)>>2]|5)}}while(0);__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(r5);STACKTOP=r3;return}function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+4|0);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+4|0);return}function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(r1){var r2,r3;r2=r1;r3=HEAP32[HEAP32[r1>>2]-12>>2];r1=r2+r3|0;__ZNSt3__18ios_baseD2Ev(r2+(r3+4)|0);if((r1|0)==0){return}_free(r1);return}function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(r1){__ZNSt3__18ios_baseD2Ev(r1+(HEAP32[HEAP32[r1>>2]-12>>2]+4)|0);return}function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(r1){var r2,r3,r4;r2=r1+4|0;r1=HEAP32[r2>>2];r3=HEAP32[HEAP32[r1>>2]-12>>2];r4=r1;if((HEAP32[r4+(r3+24)>>2]|0)==0){return}if((HEAP32[r4+(r3+16)>>2]|0)!=0){return}if((HEAP32[r4+(r3+4)>>2]&8192|0)==0){return}if(__ZSt18uncaught_exceptionv()){return}r3=HEAP32[r2>>2];r4=HEAP32[r3+(HEAP32[HEAP32[r3>>2]-12>>2]+24)>>2];if((FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+24>>2]](r4)|0)!=-1){return}r4=HEAP32[r2>>2];r2=HEAP32[HEAP32[r4>>2]-12>>2];r3=r4;__ZNSt3__18ios_base5clearEj(r3+r2|0,HEAP32[r3+(r2+16)>>2]|1);return}function __ZNKSt3__119__iostream_category4nameEv(r1){return 43944}function __ZNKSt3__119__iostream_category7messageEi(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r2=0;if((r3|0)==1){while(1){r4=_malloc(48);if((r4|0)!=0){r2=29;break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){r2=26;break}FUNCTION_TABLE[r5]()}if(r2==26){r5=___cxa_allocate_exception(4);HEAP32[r5>>2]=53824;___cxa_throw(r5,62184,110)}else if(r2==29){HEAP32[r1+8>>2]=r4;HEAP32[r1>>2]=49;HEAP32[r1+4>>2]=35;_memcpy(r4,47432,35)|0;HEAP8[r4+35|0]=0;return}}r4=_strerror(r3);r3=_strlen(r4);if(r3>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r3>>>0<11){HEAP8[r1]=r3<<1;r6=r1+1|0}else{r5=r3+16&-16;r7=(r5|0)==0?1:r5;while(1){r8=_malloc(r7);if((r8|0)!=0){r2=17;break}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}if(r2==17){HEAP32[r1+8>>2]=r8;HEAP32[r1>>2]=r5|1;HEAP32[r1+4>>2]=r3;r6=r8;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);_memcpy(r6,r4,r3)|0;HEAP8[r6+r3|0]=0;return}function __ZNSt3__119__iostream_categoryD1Ev(r1){return}function __ZNSt3__18ios_base7failureD0Ev(r1){var r2,r3,r4,r5;HEAP32[r1>>2]=53888;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)>=0){r4=r1|0;r5=r1;_free(r5);return}_free(HEAP32[r2>>2]-12|0);r4=r1|0;r5=r1;_free(r5);return}function __ZNSt3__18ios_base7failureD2Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=53888;r2=r1+4|0;r3=HEAP32[r2>>2]-4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)-1|0)>=0){r4=r1|0;return}_free(HEAP32[r2>>2]-12|0);r4=r1|0;return}function __ZNSt3__18ios_baseD0Ev(r1){__ZNSt3__18ios_baseD2Ev(r1);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__119__iostream_categoryD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17collateIcED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17collateIcED1Ev(r1){return}function __ZNSt3__16locale5facetD2Ev(r1){return}function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11;r1=0;L1:do{if((r4|0)==(r5|0)){r6=r2}else{r7=r2;r8=r4;while(1){if((r7|0)==(r3|0)){r9=-1;r1=7;break}r10=HEAP8[r7];r11=HEAP8[r8];if(r10<<24>>24<r11<<24>>24){r9=-1;r1=7;break}if(r11<<24>>24<r10<<24>>24){r9=1;r1=7;break}r10=r7+1|0;r11=r8+1|0;if((r11|0)==(r5|0)){r6=r10;break L1}else{r7=r10;r8=r11}}if(r1==7){return r9}}}while(0);r9=(r6|0)!=(r3|0)|0;return r9}function __ZNKSt3__17collateIcE12do_transformEPKcS3_(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r2=0;r5=r3;r6=r4-r5|0;if(r6>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r6>>>0<11){HEAP8[r1]=r6<<1;r7=r1+1|0}else{r8=r6+16&-16;r9=(r8|0)==0?1:r8;while(1){r10=_malloc(r9);if((r10|0)!=0){r2=16;break}r11=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r11|0)==0){break}FUNCTION_TABLE[r11]()}if(r2==16){HEAP32[r1+8>>2]=r10;HEAP32[r1>>2]=r8|1;HEAP32[r1+4>>2]=r6;r7=r10;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);if((r3|0)==(r4|0)){r12=r7;HEAP8[r12]=0;return}else{r13=r7;r14=r3}while(1){HEAP8[r13]=HEAP8[r14];r3=r14+1|0;if((r3|0)==(r4|0)){break}else{r13=r13+1|0;r14=r3}}r12=r7+(r4+ -r5)|0;HEAP8[r12]=0;return}function __ZNKSt3__17collateIcE7do_hashEPKcS3_(r1,r2,r3){var r4,r5,r6,r7;if((r2|0)==(r3|0)){r4=0;return r4}else{r5=r2;r6=0}while(1){r2=HEAP8[r5]+(r6<<4)|0;r1=r2&-268435456;r7=(r1>>>24|r1)^r2;r2=r5+1|0;if((r2|0)==(r3|0)){r4=r7;break}else{r5=r2;r6=r7}}return r4}function __ZNSt3__17collateIwED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17collateIwED1Ev(r1){return}function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11;r1=0;L1:do{if((r4|0)==(r5|0)){r6=r2}else{r7=r2;r8=r4;while(1){if((r7|0)==(r3|0)){r9=-1;r1=7;break}r10=HEAP32[r7>>2];r11=HEAP32[r8>>2];if((r10|0)<(r11|0)){r9=-1;r1=7;break}if((r11|0)<(r10|0)){r9=1;r1=7;break}r10=r7+4|0;r11=r8+4|0;if((r11|0)==(r5|0)){r6=r10;break L1}else{r7=r10;r8=r11}}if(r1==7){return r9}}}while(0);r9=(r6|0)!=(r3|0)|0;return r9}function __ZNKSt3__17collateIwE12do_transformEPKwS3_(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13;r2=0;r5=r3;r6=r4-r5|0;r7=r6>>2;if(r7>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r7>>>0<2){HEAP8[r1]=r6>>>1;r8=r1+4|0}else{r9=r7+4&-4;r10=r9<<2;r11=(r10|0)==0?1:r10;while(1){r12=_malloc(r11);if((r12|0)!=0){r2=16;break}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){break}FUNCTION_TABLE[r10]()}if(r2==16){r11=r12;HEAP32[r1+8>>2]=r11;HEAP32[r1>>2]=r9|1;HEAP32[r1+4>>2]=r7;r8=r11;break}r11=___cxa_allocate_exception(4);HEAP32[r11>>2]=53824;___cxa_throw(r11,62184,110)}}while(0);if((r3|0)==(r4|0)){r13=r8;HEAP32[r13>>2]=0;return}r7=r4-4+ -r5|0;r5=r8;r1=r3;while(1){HEAP32[r5>>2]=HEAP32[r1>>2];r3=r1+4|0;if((r3|0)==(r4|0)){break}else{r5=r5+4|0;r1=r3}}r13=r8+((r7>>>2)+1<<2)|0;HEAP32[r13>>2]=0;return}function __ZNKSt3__17collateIwE7do_hashEPKwS3_(r1,r2,r3){var r4,r5,r6,r7;if((r2|0)==(r3|0)){r4=0;return r4}else{r5=r2;r6=0}while(1){r2=HEAP32[r5>>2]+(r6<<4)|0;r1=r2&-268435456;r7=(r1>>>24|r1)^r2;r2=r5+4|0;if((r2|0)==(r3|0)){r4=r7;break}else{r5=r2;r6=r7}}return r4}function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(r1){return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r8=STACKTOP;STACKTOP=STACKTOP+88|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+16;r11=r8+32;r12=r8+40;r13=r8+48;r14=r8+56;r15=r8+64;if((HEAP32[r5+4>>2]&1|0)==0){HEAP32[r11>>2]=-1;r16=HEAP32[HEAP32[r2>>2]+16>>2];r17=r3|0;HEAP32[r13>>2]=HEAP32[r17>>2];HEAP32[r14>>2]=HEAP32[r4>>2];FUNCTION_TABLE[r16](r12,r2,r13,r14,r5,r6,r11);r14=HEAP32[r12>>2];HEAP32[r17>>2]=r14;r17=HEAP32[r11>>2];if((r17|0)==0){HEAP8[r7]=0}else if((r17|0)==1){HEAP8[r7]=1}else{HEAP8[r7]=1;HEAP32[r6>>2]=4}HEAP32[r1>>2]=r14;STACKTOP=r8;return}r14=r5+28|0;r5=HEAP32[r14>>2];r17=r5+4|0;tempValue=HEAP32[r17>>2],HEAP32[r17>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r10>>2]=71456;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r10)}r10=HEAP32[71460>>2]-1|0;r17=HEAP32[r5+8>>2];do{if(HEAP32[r5+12>>2]-r17>>2>>>0>r10>>>0){r11=HEAP32[r17+(r10<<2)>>2];if((r11|0)==0){break}r12=r11;r11=r5+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5)}r11=HEAP32[r14>>2];r13=r11+4|0;tempValue=HEAP32[r13>>2],HEAP32[r13>>2]=tempValue+1,tempValue;if((HEAP32[71072>>2]|0)!=-1){HEAP32[r9>>2]=71072;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r9)}r13=HEAP32[71076>>2]-1|0;r2=HEAP32[r11+8>>2];do{if(HEAP32[r11+12>>2]-r2>>2>>>0>r13>>>0){r16=HEAP32[r2+(r13<<2)>>2];if((r16|0)==0){break}r18=r16;r19=r11+4|0;if(((tempValue=HEAP32[r19>>2],HEAP32[r19>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+8>>2]](r11)}r19=r15|0;r20=r16;FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+24>>2]](r19,r18);r16=r15+12|0;FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+28>>2]](r16,r18);r18=(__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,HEAP32[r4>>2],r19,r15+24|0,r12,r6,1)|0)==(r19|0)|0;HEAP8[r7]=r18;HEAP32[r1>>2]=HEAP32[r3>>2];do{if((HEAP8[r16]&1)!=0){r18=HEAP32[r15+20>>2];if((r18|0)==0){break}_free(r18)}}while(0);if((HEAP8[r15]&1)==0){STACKTOP=r8;return}r16=HEAP32[r15+8>>2];if((r16|0)==0){STACKTOP=r8;return}_free(r16);STACKTOP=r8;return}}while(0);r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53856;___cxa_throw(r12,62200,872)}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+104|0;r10=(r4-r3|0)/12&-1;r11=r9|0;do{if(r10>>>0>100){r12=_malloc(r10);if((r12|0)!=0){r13=r12;r14=r12;break}r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53824;___cxa_throw(r12,62184,110)}else{r13=r11;r14=0}}while(0);r11=(r3|0)==(r4|0);if(r11){r15=r10;r16=0}else{r12=r10;r10=0;r17=r13;r18=r3;while(1){r19=HEAP8[r18];if((r19&1)==0){r20=(r19&255)>>>1}else{r20=HEAP32[r18+4>>2]}if((r20|0)==0){HEAP8[r17]=2;r21=r10+1|0;r22=r12-1|0}else{HEAP8[r17]=1;r21=r10;r22=r12}r19=r18+12|0;if((r19|0)==(r4|0)){r15=r22;r16=r21;break}else{r12=r22;r10=r21;r17=r17+1|0;r18=r19}}}r18=r1|0;r1=r5;r17=0;r21=r16;r16=r15;r15=r2;L18:while(1){r2=(r16|0)!=0;r10=r17;r22=r15;while(1){r12=HEAP32[r18>>2];do{if((r12|0)==0){r23=0}else{if((HEAP32[r12+12>>2]|0)!=(HEAP32[r12+16>>2]|0)){r23=r12;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+36>>2]](r12)|0)==-1){HEAP32[r18>>2]=0;r23=0;break}else{r23=HEAP32[r18>>2];break}}}while(0);r12=(r23|0)==0;do{if((r22|0)==0){r24=0;r25=0}else{if((HEAP32[r22+12>>2]|0)!=(HEAP32[r22+16>>2]|0)){r24=r22;r25=r22;break}r20=(FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)|0)==-1;r24=r20?0:r22;r25=r20?0:r22}}while(0);r26=(r24|0)==0;r27=HEAP32[r18>>2];if(!((r12^r26)&r2)){break L18}r20=HEAP32[r27+12>>2];if((r20|0)==(HEAP32[r27+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)&255}else{r28=HEAP8[r20]}if(r7){r29=r28}else{r29=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+12>>2]](r5,r28)}r30=r10+1|0;if(r11){r10=r30;r22=r25}else{break}}L45:do{if(r7){r22=r16;r2=r21;r20=r13;r19=0;r31=r3;while(1){do{if((HEAP8[r20]|0)==1){r32=HEAP8[r31];r33=(r32&1)==0;if(r33){r34=r31+1|0}else{r34=HEAP32[r31+8>>2]}if(r29<<24>>24!=(HEAP8[r34+r10|0]|0)){HEAP8[r20]=0;r35=r19;r36=r2;r37=r22-1|0;break}if(r33){r38=(r32&255)>>>1}else{r38=HEAP32[r31+4>>2]}if((r38|0)!=(r30|0)){r35=1;r36=r2;r37=r22;break}HEAP8[r20]=2;r35=1;r36=r2+1|0;r37=r22-1|0}else{r35=r19;r36=r2;r37=r22}}while(0);r32=r31+12|0;if((r32|0)==(r4|0)){r39=r37;r40=r36;r41=r35;break L45}r22=r37;r2=r36;r20=r20+1|0;r19=r35;r31=r32}}else{r31=r16;r19=r21;r20=r13;r2=0;r22=r3;while(1){do{if((HEAP8[r20]|0)==1){r12=r22;if((HEAP8[r12]&1)==0){r42=r22+1|0}else{r42=HEAP32[r22+8>>2]}if(r29<<24>>24!=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+12>>2]](r5,HEAP8[r42+r10|0])<<24>>24){HEAP8[r20]=0;r43=r2;r44=r19;r45=r31-1|0;break}r32=HEAP8[r12];if((r32&1)==0){r46=(r32&255)>>>1}else{r46=HEAP32[r22+4>>2]}if((r46|0)!=(r30|0)){r43=1;r44=r19;r45=r31;break}HEAP8[r20]=2;r43=1;r44=r19+1|0;r45=r31-1|0}else{r43=r2;r44=r19;r45=r31}}while(0);r32=r22+12|0;if((r32|0)==(r4|0)){r39=r45;r40=r44;r41=r43;break L45}r31=r45;r19=r44;r20=r20+1|0;r2=r43;r22=r32}}}while(0);if(!r41){r17=r30;r21=r40;r16=r39;r15=r25;continue}r10=HEAP32[r18>>2];r22=r10+12|0;r2=HEAP32[r22>>2];if((r2|0)==(HEAP32[r10+16>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+40>>2]](r10)}else{HEAP32[r22>>2]=r2+1}if((r39+r40|0)>>>0<2){r17=r30;r21=r40;r16=r39;r15=r25;continue}else{r47=r40;r48=r13;r49=r3}while(1){do{if((HEAP8[r48]|0)==2){r2=HEAP8[r49];if((r2&1)==0){r50=(r2&255)>>>1}else{r50=HEAP32[r49+4>>2]}if((r50|0)==(r30|0)){r51=r47;break}HEAP8[r48]=0;r51=r47-1|0}else{r51=r47}}while(0);r2=r49+12|0;if((r2|0)==(r4|0)){r17=r30;r21=r51;r16=r39;r15=r25;continue L18}else{r47=r51;r48=r48+1|0;r49=r2}}}do{if((r27|0)==0){r52=0}else{if((HEAP32[r27+12>>2]|0)!=(HEAP32[r27+16>>2]|0)){r52=r27;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)|0)==-1){HEAP32[r18>>2]=0;r52=0;break}else{r52=HEAP32[r18>>2];break}}}while(0);r18=(r52|0)==0;do{if(r26){r8=92}else{if((HEAP32[r24+12>>2]|0)!=(HEAP32[r24+16>>2]|0)){if(r18){break}else{r8=94;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+36>>2]](r24)|0)==-1){r8=92;break}if(!r18){r8=94}}}while(0);if(r8==92){if(r18){r8=94}}if(r8==94){HEAP32[r6>>2]=HEAP32[r6>>2]|2}L120:do{if(r11){r8=99}else{if((HEAP8[r13]|0)==2){r53=r3;break}else{r54=r3;r55=r13}while(1){r18=r54+12|0;r24=r55+1|0;if((r18|0)==(r4|0)){r8=99;break L120}if((HEAP8[r24]|0)==2){r53=r18;break}else{r54=r18;r55=r24}}}}while(0);if(r8==99){HEAP32[r6>>2]=HEAP32[r6>>2]|4;r53=r4}if((r14|0)==0){r56=100;r57=0;STACKTOP=r9;return r53}_free(r14);r56=100;r57=0;STACKTOP=r9;return r53}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+256|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+56;r12=r8+72;r13=r8+80;r14=r8+240;r15=r8+248;r16=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r17=r10;r18=r11;r19=HEAP32[r5+4>>2]&74;if((r19|0)==8){r20=16}else if((r19|0)==0){r20=0}else if((r19|0)==64){r20=8}else{r20=10}__ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r10,r5,r4,r9);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,10);if((HEAP8[r18]&1)==0){r5=r11+1|0;r21=r5;r22=r5;r23=r11+8|0}else{r5=r11+8|0;r21=HEAP32[r5>>2];r22=r11+1|0;r23=r5}HEAP32[r12>>2]=r21;r5=r13|0;HEAP32[r14>>2]=r5;HEAP32[r15>>2]=0;r19=r11|0;r24=r11+4|0;r25=HEAP8[r9];r9=r21;r21=r16;r16=r3;L11:while(1){do{if((r21|0)==0){r26=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r26=r21;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r26=r3?0:r21}}while(0);r27=(r26|0)==0;do{if((r16|0)==0){r2=19}else{if((HEAP32[r16+12>>2]|0)!=(HEAP32[r16+16>>2]|0)){if(r27){r28=r16;break}else{r29=r9;r30=r16;break L11}}if((FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+36>>2]](r16)|0)==-1){r2=19;break}if(r27){r28=r16}else{r29=r9;r30=r16;break L11}}}while(0);if(r2==19){r2=0;if(r27){r29=r9;r30=0;break}else{r28=0}}r3=HEAP8[r18];r31=(r3&1)==0;if(r31){r32=(r3&255)>>>1}else{r32=HEAP32[r24>>2]}if((HEAP32[r12>>2]-r9|0)==(r32|0)){if(r31){r33=(r3&255)>>>1}else{r33=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r33<<1);if((HEAP8[r18]&1)==0){r34=10}else{r34=(HEAP32[r19>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r34);if((HEAP8[r18]&1)==0){r35=r22}else{r35=HEAP32[r23>>2]}HEAP32[r12>>2]=r35+r33;r36=r35}else{r36=r9}r3=r26+12|0;r31=HEAP32[r3>>2];r37=r26+16|0;if((r31|0)==(HEAP32[r37>>2]|0)){r38=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)&255}else{r38=HEAP8[r31]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r38,r20,r36,r12,r15,r25,r10,r5,r14,r4)|0)!=0){r29=r36;r30=r28;break}r31=HEAP32[r3>>2];if((r31|0)==(HEAP32[r37>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+40>>2]](r26);r9=r36;r21=r26;r16=r28;continue}else{HEAP32[r3>>2]=r31+1;r9=r36;r21=r26;r16=r28;continue}}r28=HEAP8[r17];if((r28&1)==0){r39=(r28&255)>>>1}else{r39=HEAP32[r10+4>>2]}do{if((r39|0)!=0){r28=HEAP32[r14>>2];if((r28-r13|0)>=160){break}r16=HEAP32[r15>>2];HEAP32[r14>>2]=r28+4;HEAP32[r28>>2]=r16}}while(0);r15=__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(r29,HEAP32[r12>>2],r6,r20);HEAP32[r7>>2]=r15;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r10,r5,HEAP32[r14>>2],r6);do{if(r27){r40=0}else{if((HEAP32[r26+12>>2]|0)!=(HEAP32[r26+16>>2]|0)){r40=r26;break}r14=(FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)|0)==-1;r40=r14?0:r26}}while(0);r26=(r40|0)==0;do{if((r30|0)==0){r2=68}else{if((HEAP32[r30+12>>2]|0)!=(HEAP32[r30+16>>2]|0)){if(r26){break}else{r2=70;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r30>>2]+36>>2]](r30)|0)==-1){r2=68;break}if(!r26){r2=70}}}while(0);if(r2==68){if(r26){r2=70}}if(r2==70){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r40;do{if((HEAP8[r18]&1)!=0){r40=HEAP32[r11+8>>2];if((r40|0)==0){break}_free(r40)}}while(0);if((HEAP8[r17]&1)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}r17=HEAP32[r10+8>>2];if((r17|0)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}_free(r17);r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+256|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+56;r12=r8+72;r13=r8+80;r14=r8+240;r15=r8+248;r16=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r17=r10;r18=r11;r19=HEAP32[r5+4>>2]&74;if((r19|0)==64){r20=8}else if((r19|0)==0){r20=0}else if((r19|0)==8){r20=16}else{r20=10}__ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r10,r5,r4,r9);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,10);if((HEAP8[r18]&1)==0){r5=r11+1|0;r21=r5;r22=r5;r23=r11+8|0}else{r5=r11+8|0;r21=HEAP32[r5>>2];r22=r11+1|0;r23=r5}HEAP32[r12>>2]=r21;r5=r13|0;HEAP32[r14>>2]=r5;HEAP32[r15>>2]=0;r19=r11|0;r24=r11+4|0;r25=HEAP8[r9];r9=r21;r21=r16;r16=r3;L11:while(1){do{if((r21|0)==0){r26=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r26=r21;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r26=r3?0:r21}}while(0);r27=(r26|0)==0;do{if((r16|0)==0){r2=19}else{if((HEAP32[r16+12>>2]|0)!=(HEAP32[r16+16>>2]|0)){if(r27){r28=r16;break}else{r29=r9;r30=r16;break L11}}if((FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+36>>2]](r16)|0)==-1){r2=19;break}if(r27){r28=r16}else{r29=r9;r30=r16;break L11}}}while(0);if(r2==19){r2=0;if(r27){r29=r9;r30=0;break}else{r28=0}}r3=HEAP8[r18];r31=(r3&1)==0;if(r31){r32=(r3&255)>>>1}else{r32=HEAP32[r24>>2]}if((HEAP32[r12>>2]-r9|0)==(r32|0)){if(r31){r33=(r3&255)>>>1}else{r33=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r33<<1);if((HEAP8[r18]&1)==0){r34=10}else{r34=(HEAP32[r19>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r34);if((HEAP8[r18]&1)==0){r35=r22}else{r35=HEAP32[r23>>2]}HEAP32[r12>>2]=r35+r33;r36=r35}else{r36=r9}r3=r26+12|0;r31=HEAP32[r3>>2];r37=r26+16|0;if((r31|0)==(HEAP32[r37>>2]|0)){r38=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)&255}else{r38=HEAP8[r31]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r38,r20,r36,r12,r15,r25,r10,r5,r14,r4)|0)!=0){r29=r36;r30=r28;break}r31=HEAP32[r3>>2];if((r31|0)==(HEAP32[r37>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+40>>2]](r26);r9=r36;r21=r26;r16=r28;continue}else{HEAP32[r3>>2]=r31+1;r9=r36;r21=r26;r16=r28;continue}}r28=HEAP8[r17];if((r28&1)==0){r39=(r28&255)>>>1}else{r39=HEAP32[r10+4>>2]}do{if((r39|0)!=0){r28=HEAP32[r14>>2];if((r28-r13|0)>=160){break}r16=HEAP32[r15>>2];HEAP32[r14>>2]=r28+4;HEAP32[r28>>2]=r16}}while(0);r15=__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(r29,HEAP32[r12>>2],r6,r20);HEAP32[r7>>2]=r15;HEAP32[r7+4>>2]=tempRet0;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r10,r5,HEAP32[r14>>2],r6);do{if(r27){r40=0}else{if((HEAP32[r26+12>>2]|0)!=(HEAP32[r26+16>>2]|0)){r40=r26;break}r14=(FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)|0)==-1;r40=r14?0:r26}}while(0);r26=(r40|0)==0;do{if((r30|0)==0){r2=68}else{if((HEAP32[r30+12>>2]|0)!=(HEAP32[r30+16>>2]|0)){if(r26){break}else{r2=70;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r30>>2]+36>>2]](r30)|0)==-1){r2=68;break}if(!r26){r2=70}}}while(0);if(r2==68){if(r26){r2=70}}if(r2==70){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r40;do{if((HEAP8[r18]&1)!=0){r40=HEAP32[r11+8>>2];if((r40|0)==0){break}_free(r40)}}while(0);if((HEAP8[r17]&1)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}r17=HEAP32[r10+8>>2];if((r17|0)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}_free(r17);r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+256|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+56;r12=r8+72;r13=r8+80;r14=r8+240;r15=r8+248;r16=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r17=r10;r18=r11;r19=HEAP32[r5+4>>2]&74;if((r19|0)==8){r20=16}else if((r19|0)==0){r20=0}else if((r19|0)==64){r20=8}else{r20=10}__ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r10,r5,r4,r9);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,10);if((HEAP8[r18]&1)==0){r5=r11+1|0;r21=r5;r22=r5;r23=r11+8|0}else{r5=r11+8|0;r21=HEAP32[r5>>2];r22=r11+1|0;r23=r5}HEAP32[r12>>2]=r21;r5=r13|0;HEAP32[r14>>2]=r5;HEAP32[r15>>2]=0;r19=r11|0;r24=r11+4|0;r25=HEAP8[r9];r9=r21;r21=r16;r16=r3;L11:while(1){do{if((r21|0)==0){r26=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r26=r21;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r26=r3?0:r21}}while(0);r27=(r26|0)==0;do{if((r16|0)==0){r2=19}else{if((HEAP32[r16+12>>2]|0)!=(HEAP32[r16+16>>2]|0)){if(r27){r28=r16;break}else{r29=r9;r30=r16;break L11}}if((FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+36>>2]](r16)|0)==-1){r2=19;break}if(r27){r28=r16}else{r29=r9;r30=r16;break L11}}}while(0);if(r2==19){r2=0;if(r27){r29=r9;r30=0;break}else{r28=0}}r3=HEAP8[r18];r31=(r3&1)==0;if(r31){r32=(r3&255)>>>1}else{r32=HEAP32[r24>>2]}if((HEAP32[r12>>2]-r9|0)==(r32|0)){if(r31){r33=(r3&255)>>>1}else{r33=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r33<<1);if((HEAP8[r18]&1)==0){r34=10}else{r34=(HEAP32[r19>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r34);if((HEAP8[r18]&1)==0){r35=r22}else{r35=HEAP32[r23>>2]}HEAP32[r12>>2]=r35+r33;r36=r35}else{r36=r9}r3=r26+12|0;r31=HEAP32[r3>>2];r37=r26+16|0;if((r31|0)==(HEAP32[r37>>2]|0)){r38=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)&255}else{r38=HEAP8[r31]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r38,r20,r36,r12,r15,r25,r10,r5,r14,r4)|0)!=0){r29=r36;r30=r28;break}r31=HEAP32[r3>>2];if((r31|0)==(HEAP32[r37>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+40>>2]](r26);r9=r36;r21=r26;r16=r28;continue}else{HEAP32[r3>>2]=r31+1;r9=r36;r21=r26;r16=r28;continue}}r28=HEAP8[r17];if((r28&1)==0){r39=(r28&255)>>>1}else{r39=HEAP32[r10+4>>2]}do{if((r39|0)!=0){r28=HEAP32[r14>>2];if((r28-r13|0)>=160){break}r16=HEAP32[r15>>2];HEAP32[r14>>2]=r28+4;HEAP32[r28>>2]=r16}}while(0);r15=__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(r29,HEAP32[r12>>2],r6,r20);HEAP16[r7>>1]=r15;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r10,r5,HEAP32[r14>>2],r6);do{if(r27){r40=0}else{if((HEAP32[r26+12>>2]|0)!=(HEAP32[r26+16>>2]|0)){r40=r26;break}r14=(FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)|0)==-1;r40=r14?0:r26}}while(0);r26=(r40|0)==0;do{if((r30|0)==0){r2=68}else{if((HEAP32[r30+12>>2]|0)!=(HEAP32[r30+16>>2]|0)){if(r26){break}else{r2=70;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r30>>2]+36>>2]](r30)|0)==-1){r2=68;break}if(!r26){r2=70}}}while(0);if(r2==68){if(r26){r2=70}}if(r2==70){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r40;do{if((HEAP8[r18]&1)!=0){r40=HEAP32[r11+8>>2];if((r40|0)==0){break}_free(r40)}}while(0);if((HEAP8[r17]&1)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}r17=HEAP32[r10+8>>2];if((r17|0)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}_free(r17);r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+256|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+56;r12=r8+72;r13=r8+80;r14=r8+240;r15=r8+248;r16=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r17=r10;r18=r11;r19=HEAP32[r5+4>>2]&74;if((r19|0)==8){r20=16}else if((r19|0)==64){r20=8}else if((r19|0)==0){r20=0}else{r20=10}__ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r10,r5,r4,r9);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,10);if((HEAP8[r18]&1)==0){r5=r11+1|0;r21=r5;r22=r5;r23=r11+8|0}else{r5=r11+8|0;r21=HEAP32[r5>>2];r22=r11+1|0;r23=r5}HEAP32[r12>>2]=r21;r5=r13|0;HEAP32[r14>>2]=r5;HEAP32[r15>>2]=0;r19=r11|0;r24=r11+4|0;r25=HEAP8[r9];r9=r21;r21=r16;r16=r3;L11:while(1){do{if((r21|0)==0){r26=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r26=r21;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r26=r3?0:r21}}while(0);r27=(r26|0)==0;do{if((r16|0)==0){r2=19}else{if((HEAP32[r16+12>>2]|0)!=(HEAP32[r16+16>>2]|0)){if(r27){r28=r16;break}else{r29=r9;r30=r16;break L11}}if((FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+36>>2]](r16)|0)==-1){r2=19;break}if(r27){r28=r16}else{r29=r9;r30=r16;break L11}}}while(0);if(r2==19){r2=0;if(r27){r29=r9;r30=0;break}else{r28=0}}r3=HEAP8[r18];r31=(r3&1)==0;if(r31){r32=(r3&255)>>>1}else{r32=HEAP32[r24>>2]}if((HEAP32[r12>>2]-r9|0)==(r32|0)){if(r31){r33=(r3&255)>>>1}else{r33=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r33<<1);if((HEAP8[r18]&1)==0){r34=10}else{r34=(HEAP32[r19>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r34);if((HEAP8[r18]&1)==0){r35=r22}else{r35=HEAP32[r23>>2]}HEAP32[r12>>2]=r35+r33;r36=r35}else{r36=r9}r3=r26+12|0;r31=HEAP32[r3>>2];r37=r26+16|0;if((r31|0)==(HEAP32[r37>>2]|0)){r38=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)&255}else{r38=HEAP8[r31]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r38,r20,r36,r12,r15,r25,r10,r5,r14,r4)|0)!=0){r29=r36;r30=r28;break}r31=HEAP32[r3>>2];if((r31|0)==(HEAP32[r37>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+40>>2]](r26);r9=r36;r21=r26;r16=r28;continue}else{HEAP32[r3>>2]=r31+1;r9=r36;r21=r26;r16=r28;continue}}r28=HEAP8[r17];if((r28&1)==0){r39=(r28&255)>>>1}else{r39=HEAP32[r10+4>>2]}do{if((r39|0)!=0){r28=HEAP32[r14>>2];if((r28-r13|0)>=160){break}r16=HEAP32[r15>>2];HEAP32[r14>>2]=r28+4;HEAP32[r28>>2]=r16}}while(0);r15=__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(r29,HEAP32[r12>>2],r6,r20);HEAP32[r7>>2]=r15;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r10,r5,HEAP32[r14>>2],r6);do{if(r27){r40=0}else{if((HEAP32[r26+12>>2]|0)!=(HEAP32[r26+16>>2]|0)){r40=r26;break}r14=(FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)|0)==-1;r40=r14?0:r26}}while(0);r26=(r40|0)==0;do{if((r30|0)==0){r2=68}else{if((HEAP32[r30+12>>2]|0)!=(HEAP32[r30+16>>2]|0)){if(r26){break}else{r2=70;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r30>>2]+36>>2]](r30)|0)==-1){r2=68;break}if(!r26){r2=70}}}while(0);if(r2==68){if(r26){r2=70}}if(r2==70){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r40;do{if((HEAP8[r18]&1)!=0){r40=HEAP32[r11+8>>2];if((r40|0)==0){break}_free(r40)}}while(0);if((HEAP8[r17]&1)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}r17=HEAP32[r10+8>>2];if((r17|0)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}_free(r17);r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+256|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+56;r12=r8+72;r13=r8+80;r14=r8+240;r15=r8+248;r16=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r17=r10;r18=r11;r19=HEAP32[r5+4>>2]&74;if((r19|0)==8){r20=16}else if((r19|0)==0){r20=0}else if((r19|0)==64){r20=8}else{r20=10}__ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r10,r5,r4,r9);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,10);if((HEAP8[r18]&1)==0){r5=r11+1|0;r21=r5;r22=r5;r23=r11+8|0}else{r5=r11+8|0;r21=HEAP32[r5>>2];r22=r11+1|0;r23=r5}HEAP32[r12>>2]=r21;r5=r13|0;HEAP32[r14>>2]=r5;HEAP32[r15>>2]=0;r19=r11|0;r24=r11+4|0;r25=HEAP8[r9];r9=r21;r21=r16;r16=r3;L11:while(1){do{if((r21|0)==0){r26=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r26=r21;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r26=r3?0:r21}}while(0);r27=(r26|0)==0;do{if((r16|0)==0){r2=19}else{if((HEAP32[r16+12>>2]|0)!=(HEAP32[r16+16>>2]|0)){if(r27){r28=r16;break}else{r29=r9;r30=r16;break L11}}if((FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+36>>2]](r16)|0)==-1){r2=19;break}if(r27){r28=r16}else{r29=r9;r30=r16;break L11}}}while(0);if(r2==19){r2=0;if(r27){r29=r9;r30=0;break}else{r28=0}}r3=HEAP8[r18];r31=(r3&1)==0;if(r31){r32=(r3&255)>>>1}else{r32=HEAP32[r24>>2]}if((HEAP32[r12>>2]-r9|0)==(r32|0)){if(r31){r33=(r3&255)>>>1}else{r33=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r33<<1);if((HEAP8[r18]&1)==0){r34=10}else{r34=(HEAP32[r19>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r34);if((HEAP8[r18]&1)==0){r35=r22}else{r35=HEAP32[r23>>2]}HEAP32[r12>>2]=r35+r33;r36=r35}else{r36=r9}r3=r26+12|0;r31=HEAP32[r3>>2];r37=r26+16|0;if((r31|0)==(HEAP32[r37>>2]|0)){r38=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)&255}else{r38=HEAP8[r31]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r38,r20,r36,r12,r15,r25,r10,r5,r14,r4)|0)!=0){r29=r36;r30=r28;break}r31=HEAP32[r3>>2];if((r31|0)==(HEAP32[r37>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+40>>2]](r26);r9=r36;r21=r26;r16=r28;continue}else{HEAP32[r3>>2]=r31+1;r9=r36;r21=r26;r16=r28;continue}}r28=HEAP8[r17];if((r28&1)==0){r39=(r28&255)>>>1}else{r39=HEAP32[r10+4>>2]}do{if((r39|0)!=0){r28=HEAP32[r14>>2];if((r28-r13|0)>=160){break}r16=HEAP32[r15>>2];HEAP32[r14>>2]=r28+4;HEAP32[r28>>2]=r16}}while(0);r15=__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(r29,HEAP32[r12>>2],r6,r20);HEAP32[r7>>2]=r15;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r10,r5,HEAP32[r14>>2],r6);do{if(r27){r40=0}else{if((HEAP32[r26+12>>2]|0)!=(HEAP32[r26+16>>2]|0)){r40=r26;break}r14=(FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)|0)==-1;r40=r14?0:r26}}while(0);r26=(r40|0)==0;do{if((r30|0)==0){r2=68}else{if((HEAP32[r30+12>>2]|0)!=(HEAP32[r30+16>>2]|0)){if(r26){break}else{r2=70;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r30>>2]+36>>2]](r30)|0)==-1){r2=68;break}if(!r26){r2=70}}}while(0);if(r2==68){if(r26){r2=70}}if(r2==70){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r40;do{if((HEAP8[r18]&1)!=0){r40=HEAP32[r11+8>>2];if((r40|0)==0){break}_free(r40)}}while(0);if((HEAP8[r17]&1)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}r17=HEAP32[r10+8>>2];if((r17|0)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}_free(r17);r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+256|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+56;r12=r8+72;r13=r8+80;r14=r8+240;r15=r8+248;r16=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r17=r10;r18=r11;r19=HEAP32[r5+4>>2]&74;if((r19|0)==64){r20=8}else if((r19|0)==0){r20=0}else if((r19|0)==8){r20=16}else{r20=10}__ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r10,r5,r4,r9);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,10);if((HEAP8[r18]&1)==0){r5=r11+1|0;r21=r5;r22=r5;r23=r11+8|0}else{r5=r11+8|0;r21=HEAP32[r5>>2];r22=r11+1|0;r23=r5}HEAP32[r12>>2]=r21;r5=r13|0;HEAP32[r14>>2]=r5;HEAP32[r15>>2]=0;r19=r11|0;r24=r11+4|0;r25=HEAP8[r9];r9=r21;r21=r16;r16=r3;L11:while(1){do{if((r21|0)==0){r26=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r26=r21;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r26=r3?0:r21}}while(0);r27=(r26|0)==0;do{if((r16|0)==0){r2=19}else{if((HEAP32[r16+12>>2]|0)!=(HEAP32[r16+16>>2]|0)){if(r27){r28=r16;break}else{r29=r9;r30=r16;break L11}}if((FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+36>>2]](r16)|0)==-1){r2=19;break}if(r27){r28=r16}else{r29=r9;r30=r16;break L11}}}while(0);if(r2==19){r2=0;if(r27){r29=r9;r30=0;break}else{r28=0}}r3=HEAP8[r18];r31=(r3&1)==0;if(r31){r32=(r3&255)>>>1}else{r32=HEAP32[r24>>2]}if((HEAP32[r12>>2]-r9|0)==(r32|0)){if(r31){r33=(r3&255)>>>1}else{r33=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r33<<1);if((HEAP8[r18]&1)==0){r34=10}else{r34=(HEAP32[r19>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r11,r34);if((HEAP8[r18]&1)==0){r35=r22}else{r35=HEAP32[r23>>2]}HEAP32[r12>>2]=r35+r33;r36=r35}else{r36=r9}r3=r26+12|0;r31=HEAP32[r3>>2];r37=r26+16|0;if((r31|0)==(HEAP32[r37>>2]|0)){r38=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)&255}else{r38=HEAP8[r31]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r38,r20,r36,r12,r15,r25,r10,r5,r14,r4)|0)!=0){r29=r36;r30=r28;break}r31=HEAP32[r3>>2];if((r31|0)==(HEAP32[r37>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+40>>2]](r26);r9=r36;r21=r26;r16=r28;continue}else{HEAP32[r3>>2]=r31+1;r9=r36;r21=r26;r16=r28;continue}}r28=HEAP8[r17];if((r28&1)==0){r39=(r28&255)>>>1}else{r39=HEAP32[r10+4>>2]}do{if((r39|0)!=0){r28=HEAP32[r14>>2];if((r28-r13|0)>=160){break}r16=HEAP32[r15>>2];HEAP32[r14>>2]=r28+4;HEAP32[r28>>2]=r16}}while(0);r15=__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(r29,HEAP32[r12>>2],r6,r20);HEAP32[r7>>2]=r15;HEAP32[r7+4>>2]=tempRet0;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r10,r5,HEAP32[r14>>2],r6);do{if(r27){r40=0}else{if((HEAP32[r26+12>>2]|0)!=(HEAP32[r26+16>>2]|0)){r40=r26;break}r14=(FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)|0)==-1;r40=r14?0:r26}}while(0);r26=(r40|0)==0;do{if((r30|0)==0){r2=68}else{if((HEAP32[r30+12>>2]|0)!=(HEAP32[r30+16>>2]|0)){if(r26){break}else{r2=70;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r30>>2]+36>>2]](r30)|0)==-1){r2=68;break}if(!r26){r2=70}}}while(0);if(r2==68){if(r26){r2=70}}if(r2==70){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r40;do{if((HEAP8[r18]&1)!=0){r40=HEAP32[r11+8>>2];if((r40|0)==0){break}_free(r40)}}while(0);if((HEAP8[r17]&1)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}r17=HEAP32[r10+8>>2];if((r17|0)==0){r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}_free(r17);r41=26;r42=0;r43=1;r44=0;r45=12;r46=0;r47=12;r48=0;r49=4;r50=0;r51=4;r52=0;r53=4;r54=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+280|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+48;r12=r8+64;r13=r8+80;r14=r8+88;r15=r8+248;r16=r8+256;r17=r8+264;r18=r8+272;r19=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r20=r11;r21=r12;__ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(r11,r5,r4,r9,r10);HEAP32[r21>>2]=0;HEAP32[r21+4>>2]=0;HEAP32[r21+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r21]&1)==0){r5=r12+1|0;r22=r5;r23=r5;r24=r12+8|0}else{r5=r12+8|0;r22=HEAP32[r5>>2];r23=r12+1|0;r24=r5}HEAP32[r13>>2]=r22;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;HEAP8[r17]=1;HEAP8[r18]=69;r25=r12|0;r26=r12+4|0;r27=HEAP8[r9];r9=HEAP8[r10];r10=r22;r22=r19;r19=r3;L6:while(1){do{if((r22|0)==0){r28=0}else{if((HEAP32[r22+12>>2]|0)!=(HEAP32[r22+16>>2]|0)){r28=r22;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)|0)==-1;r28=r3?0:r22}}while(0);r29=(r28|0)==0;do{if((r19|0)==0){r2=15}else{if((HEAP32[r19+12>>2]|0)!=(HEAP32[r19+16>>2]|0)){if(r29){r30=r19;break}else{r31=r10;r32=r19;break L6}}if((FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+36>>2]](r19)|0)==-1){r2=15;break}if(r29){r30=r19}else{r31=r10;r32=r19;break L6}}}while(0);if(r2==15){r2=0;if(r29){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r21];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r26>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r26>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r21]&1)==0){r36=10}else{r36=(HEAP32[r25>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r21]&1)==0){r37=r23}else{r37=HEAP32[r24>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r28+12|0;r33=HEAP32[r3>>2];r39=r28+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+36>>2]](r28)&255}else{r40=HEAP8[r33]}if((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(r40,r17,r18,r38,r13,r27,r9,r11,r5,r15,r16,r4)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+40>>2]](r28);r10=r38;r22=r28;r19=r30;continue}else{HEAP32[r3>>2]=r33+1;r10=r38;r22=r28;r19=r30;continue}}r30=HEAP8[r20];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){if((HEAP8[r17]|0)==0){break}r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r19=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r19}}while(0);r16=__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(r31,HEAP32[r13>>2],r6);HEAPF32[r7>>2]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);do{if(r29){r42=0}else{if((HEAP32[r28+12>>2]|0)!=(HEAP32[r28+16>>2]|0)){r42=r28;break}r15=(FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+36>>2]](r28)|0)==-1;r42=r15?0:r28}}while(0);r28=(r42|0)==0;do{if((r32|0)==0){r2=65}else{if((HEAP32[r32+12>>2]|0)!=(HEAP32[r32+16>>2]|0)){if(r28){break}else{r2=67;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)|0)==-1){r2=65;break}if(!r28){r2=67}}}while(0);if(r2==65){if(r28){r2=67}}if(r2==67){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r42;do{if((HEAP8[r21]&1)!=0){r42=HEAP32[r12+8>>2];if((r42|0)==0){break}_free(r42)}}while(0);if((HEAP8[r20]&1)==0){r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}r20=HEAP32[r11+8>>2];if((r20|0)==0){r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}_free(r20);r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+280|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+48;r12=r8+64;r13=r8+80;r14=r8+88;r15=r8+248;r16=r8+256;r17=r8+264;r18=r8+272;r19=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r20=r11;r21=r12;__ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(r11,r5,r4,r9,r10);HEAP32[r21>>2]=0;HEAP32[r21+4>>2]=0;HEAP32[r21+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r21]&1)==0){r5=r12+1|0;r22=r5;r23=r5;r24=r12+8|0}else{r5=r12+8|0;r22=HEAP32[r5>>2];r23=r12+1|0;r24=r5}HEAP32[r13>>2]=r22;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;HEAP8[r17]=1;HEAP8[r18]=69;r25=r12|0;r26=r12+4|0;r27=HEAP8[r9];r9=HEAP8[r10];r10=r22;r22=r19;r19=r3;L6:while(1){do{if((r22|0)==0){r28=0}else{if((HEAP32[r22+12>>2]|0)!=(HEAP32[r22+16>>2]|0)){r28=r22;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)|0)==-1;r28=r3?0:r22}}while(0);r29=(r28|0)==0;do{if((r19|0)==0){r2=15}else{if((HEAP32[r19+12>>2]|0)!=(HEAP32[r19+16>>2]|0)){if(r29){r30=r19;break}else{r31=r10;r32=r19;break L6}}if((FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+36>>2]](r19)|0)==-1){r2=15;break}if(r29){r30=r19}else{r31=r10;r32=r19;break L6}}}while(0);if(r2==15){r2=0;if(r29){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r21];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r26>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r26>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r21]&1)==0){r36=10}else{r36=(HEAP32[r25>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r21]&1)==0){r37=r23}else{r37=HEAP32[r24>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r28+12|0;r33=HEAP32[r3>>2];r39=r28+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+36>>2]](r28)&255}else{r40=HEAP8[r33]}if((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(r40,r17,r18,r38,r13,r27,r9,r11,r5,r15,r16,r4)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+40>>2]](r28);r10=r38;r22=r28;r19=r30;continue}else{HEAP32[r3>>2]=r33+1;r10=r38;r22=r28;r19=r30;continue}}r30=HEAP8[r20];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){if((HEAP8[r17]|0)==0){break}r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r19=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r19}}while(0);r16=__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(r31,HEAP32[r13>>2],r6);HEAPF64[r7>>3]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);do{if(r29){r42=0}else{if((HEAP32[r28+12>>2]|0)!=(HEAP32[r28+16>>2]|0)){r42=r28;break}r15=(FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+36>>2]](r28)|0)==-1;r42=r15?0:r28}}while(0);r28=(r42|0)==0;do{if((r32|0)==0){r2=65}else{if((HEAP32[r32+12>>2]|0)!=(HEAP32[r32+16>>2]|0)){if(r28){break}else{r2=67;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)|0)==-1){r2=65;break}if(!r28){r2=67}}}while(0);if(r2==65){if(r28){r2=67}}if(r2==67){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r42;do{if((HEAP8[r21]&1)!=0){r42=HEAP32[r12+8>>2];if((r42|0)==0){break}_free(r42)}}while(0);if((HEAP8[r20]&1)==0){r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}r20=HEAP32[r11+8>>2];if((r20|0)==0){r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}_free(r20);r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+280|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+32;r10=r8+40;r11=r8+48;r12=r8+64;r13=r8+80;r14=r8+88;r15=r8+248;r16=r8+256;r17=r8+264;r18=r8+272;r19=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r8|0;r20=r11;r21=r12;__ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(r11,r5,r4,r9,r10);HEAP32[r21>>2]=0;HEAP32[r21+4>>2]=0;HEAP32[r21+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r21]&1)==0){r5=r12+1|0;r22=r5;r23=r5;r24=r12+8|0}else{r5=r12+8|0;r22=HEAP32[r5>>2];r23=r12+1|0;r24=r5}HEAP32[r13>>2]=r22;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;HEAP8[r17]=1;HEAP8[r18]=69;r25=r12|0;r26=r12+4|0;r27=HEAP8[r9];r9=HEAP8[r10];r10=r22;r22=r19;r19=r3;L6:while(1){do{if((r22|0)==0){r28=0}else{if((HEAP32[r22+12>>2]|0)!=(HEAP32[r22+16>>2]|0)){r28=r22;break}r3=(FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)|0)==-1;r28=r3?0:r22}}while(0);r29=(r28|0)==0;do{if((r19|0)==0){r2=15}else{if((HEAP32[r19+12>>2]|0)!=(HEAP32[r19+16>>2]|0)){if(r29){r30=r19;break}else{r31=r10;r32=r19;break L6}}if((FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+36>>2]](r19)|0)==-1){r2=15;break}if(r29){r30=r19}else{r31=r10;r32=r19;break L6}}}while(0);if(r2==15){r2=0;if(r29){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r21];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r26>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r26>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r21]&1)==0){r36=10}else{r36=(HEAP32[r25>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r21]&1)==0){r37=r23}else{r37=HEAP32[r24>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r28+12|0;r33=HEAP32[r3>>2];r39=r28+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+36>>2]](r28)&255}else{r40=HEAP8[r33]}if((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(r40,r17,r18,r38,r13,r27,r9,r11,r5,r15,r16,r4)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+40>>2]](r28);r10=r38;r22=r28;r19=r30;continue}else{HEAP32[r3>>2]=r33+1;r10=r38;r22=r28;r19=r30;continue}}r30=HEAP8[r20];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){if((HEAP8[r17]|0)==0){break}r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r19=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r19}}while(0);r16=__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(r31,HEAP32[r13>>2],r6);HEAPF64[r7>>3]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);do{if(r29){r42=0}else{if((HEAP32[r28+12>>2]|0)!=(HEAP32[r28+16>>2]|0)){r42=r28;break}r15=(FUNCTION_TABLE[HEAP32[HEAP32[r28>>2]+36>>2]](r28)|0)==-1;r42=r15?0:r28}}while(0);r28=(r42|0)==0;do{if((r32|0)==0){r2=65}else{if((HEAP32[r32+12>>2]|0)!=(HEAP32[r32+16>>2]|0)){if(r28){break}else{r2=67;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)|0)==-1){r2=65;break}if(!r28){r2=67}}}while(0);if(r2==65){if(r28){r2=67}}if(r2==67){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r42;do{if((HEAP8[r21]&1)!=0){r42=HEAP32[r12+8>>2];if((r42|0)==0){break}_free(r42)}}while(0);if((HEAP8[r20]&1)==0){r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}r20=HEAP32[r11+8>>2];if((r20|0)==0){r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}_free(r20);r43=32;r44=0;r45=1;r46=0;r47=1;r48=0;r49=12;r50=0;r51=12;r52=0;r53=4;r54=0;r55=4;r56=0;r57=4;r58=0;r59=1;r60=0;r61=1;r62=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44;r2=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+264|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r10>>2];r10=r9;r11=r9+16;r12=r9+48;r13=r9+64;r14=r9+80;r15=r9+88;r16=r9+248;r17=r9+256;r18=r12;HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;r19=HEAP32[r5+28>>2];r5=r19+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r10>>2]=71456;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r10)}r10=HEAP32[71460>>2]-1|0;r5=HEAP32[r19+8>>2];do{if(HEAP32[r19+12>>2]-r5>>2>>>0>r10>>>0){r20=HEAP32[r5+(r10<<2)>>2];if((r20|0)==0){break}r21=r11|0;FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+32>>2]](r20,64552,64578,r21);r20=r19+4|0;if(((tempValue=HEAP32[r20>>2],HEAP32[r20>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+8>>2]](r19)}r20=r13;HEAP32[r20>>2]=0;HEAP32[r20+4>>2]=0;HEAP32[r20+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,10);if((HEAP8[r20]&1)==0){r22=r13+1|0;r23=r22;r24=r22;r25=r13+8|0}else{r22=r13+8|0;r23=HEAP32[r22>>2];r24=r13+1|0;r25=r22}HEAP32[r14>>2]=r23;r22=r15|0;HEAP32[r16>>2]=r22;HEAP32[r17>>2]=0;r26=r3|0;r27=r4|0;r28=r13|0;r29=r13+4|0;r30=r23;r31=HEAP32[r26>>2];L16:while(1){do{if((r31|0)==0){r32=0}else{if((HEAP32[r31+12>>2]|0)!=(HEAP32[r31+16>>2]|0)){r32=r31;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r31>>2]+36>>2]](r31)|0)!=-1){r32=r31;break}HEAP32[r26>>2]=0;r32=0}}while(0);r33=(r32|0)==0;r34=HEAP32[r27>>2];do{if((r34|0)==0){r2=26}else{if((HEAP32[r34+12>>2]|0)!=(HEAP32[r34+16>>2]|0)){if(r33){break}else{r35=r30;break L16}}if((FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)|0)==-1){HEAP32[r27>>2]=0;r2=26;break}else{if(r33){break}else{r35=r30;break L16}}}}while(0);if(r2==26){r2=0;if(r33){r35=r30;break}}r34=HEAP8[r20];r36=(r34&1)==0;if(r36){r37=(r34&255)>>>1}else{r37=HEAP32[r29>>2]}if((HEAP32[r14>>2]-r30|0)==(r37|0)){if(r36){r38=(r34&255)>>>1}else{r38=HEAP32[r29>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,r38<<1);if((HEAP8[r20]&1)==0){r39=10}else{r39=(HEAP32[r28>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,r39);if((HEAP8[r20]&1)==0){r40=r24}else{r40=HEAP32[r25>>2]}HEAP32[r14>>2]=r40+r38;r41=r40}else{r41=r30}r34=r32+12|0;r36=HEAP32[r34>>2];r42=r32+16|0;if((r36|0)==(HEAP32[r42>>2]|0)){r43=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)&255}else{r43=HEAP8[r36]}if((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r43,16,r41,r14,r17,0,r12,r22,r16,r21)|0)!=0){r35=r41;break}r36=HEAP32[r34>>2];if((r36|0)==(HEAP32[r42>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+40>>2]](r32);r30=r41;r31=r32;continue}else{HEAP32[r34>>2]=r36+1;r30=r41;r31=r32;continue}}HEAP8[r35+3|0]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r31=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r31}}while(0);r31=__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(r35,HEAP32[69912>>2],(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r7,r8));STACKTOP=r8;if((r31|0)!=1){HEAP32[r6>>2]=4}r31=HEAP32[r26>>2];do{if((r31|0)==0){r44=0}else{if((HEAP32[r31+12>>2]|0)!=(HEAP32[r31+16>>2]|0)){r44=r31;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r31>>2]+36>>2]](r31)|0)!=-1){r44=r31;break}HEAP32[r26>>2]=0;r44=0}}while(0);r26=(r44|0)==0;r31=HEAP32[r27>>2];do{if((r31|0)==0){r2=76}else{if((HEAP32[r31+12>>2]|0)!=(HEAP32[r31+16>>2]|0)){if(r26){break}else{r2=78;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r31>>2]+36>>2]](r31)|0)==-1){HEAP32[r27>>2]=0;r2=76;break}else{if(r26){break}else{r2=78;break}}}}while(0);if(r2==76){if(r26){r2=78}}if(r2==78){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r44;do{if((HEAP8[r20]&1)!=0){r27=HEAP32[r13+8>>2];if((r27|0)==0){break}_free(r27)}}while(0);if((HEAP8[r18]&1)==0){STACKTOP=r9;return}r20=HEAP32[r12+8>>2];if((r20|0)==0){STACKTOP=r9;return}_free(r20);STACKTOP=r9;return}}while(0);r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53856;___cxa_throw(r9,62200,872)}function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10){var r11,r12,r13,r14,r15,r16;r11=HEAP32[r4>>2];r12=(r11|0)==(r3|0);do{if(r12){r13=(HEAP8[r10+24|0]|0)==r1<<24>>24;if(!r13){if((HEAP8[r10+25|0]|0)!=r1<<24>>24){break}}HEAP32[r4>>2]=r3+1;HEAP8[r3]=r13?43:45;HEAP32[r5>>2]=0;r14=0;return r14}}while(0);r13=HEAP8[r7];if((r13&1)==0){r15=(r13&255)>>>1}else{r15=HEAP32[r7+4>>2]}if((r15|0)!=0&r1<<24>>24==r6<<24>>24){r6=HEAP32[r9>>2];if((r6-r8|0)>=160){r14=0;return r14}r8=HEAP32[r5>>2];HEAP32[r9>>2]=r6+4;HEAP32[r6>>2]=r8;HEAP32[r5>>2]=0;r14=0;return r14}r8=r10+26|0;r6=r10;while(1){r9=r6+1|0;if((HEAP8[r6]|0)==r1<<24>>24){r16=r6;break}if((r9|0)==(r8|0)){r16=r8;break}else{r6=r9}}r6=r16-r10|0;if((r6|0)>23){r14=-1;return r14}do{if((r2|0)==16){if((r6|0)<22){break}if(r12){r14=-1;return r14}if((r11-r3|0)>=3){r14=-1;return r14}if((HEAP8[r11-1|0]|0)!=48){r14=-1;return r14}HEAP32[r5>>2]=0;r10=HEAP8[r6+64552|0];HEAP32[r4>>2]=r11+1;HEAP8[r11]=r10;r14=0;return r14}else if((r2|0)==8|(r2|0)==10){if((r6|0)<(r2|0)){break}else{r14=-1}return r14}}while(0);r2=HEAP8[r6+64552|0];HEAP32[r4>>2]=r11+1;HEAP8[r11]=r2;HEAP32[r5>>2]=HEAP32[r5>>2]+1;r14=0;return r14}function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(r1,r2,r3){var r4,r5,r6;r4=STACKTOP;STACKTOP=STACKTOP+16|0;r5=r4;r6=r5;HEAP32[r6>>2]=r3;HEAP32[r6+4>>2]=0;r6=_uselocale(r2);r2=_vsscanf(r1,28272,r5|0);if((r6|0)==0){STACKTOP=r4;return r2}_uselocale(r6);STACKTOP=r4;return r2}function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(r1){return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r8=STACKTOP;STACKTOP=STACKTOP+88|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+16;r11=r8+32;r12=r8+40;r13=r8+48;r14=r8+56;r15=r8+64;if((HEAP32[r5+4>>2]&1|0)==0){HEAP32[r11>>2]=-1;r16=HEAP32[HEAP32[r2>>2]+16>>2];r17=r3|0;HEAP32[r13>>2]=HEAP32[r17>>2];HEAP32[r14>>2]=HEAP32[r4>>2];FUNCTION_TABLE[r16](r12,r2,r13,r14,r5,r6,r11);r14=HEAP32[r12>>2];HEAP32[r17>>2]=r14;r17=HEAP32[r11>>2];if((r17|0)==1){HEAP8[r7]=1}else if((r17|0)==0){HEAP8[r7]=0}else{HEAP8[r7]=1;HEAP32[r6>>2]=4}HEAP32[r1>>2]=r14;STACKTOP=r8;return}r14=r5+28|0;r5=HEAP32[r14>>2];r17=r5+4|0;tempValue=HEAP32[r17>>2],HEAP32[r17>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r10>>2]=71448;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r10)}r10=HEAP32[71452>>2]-1|0;r17=HEAP32[r5+8>>2];do{if(HEAP32[r5+12>>2]-r17>>2>>>0>r10>>>0){r11=HEAP32[r17+(r10<<2)>>2];if((r11|0)==0){break}r12=r11;r11=r5+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5)}r11=HEAP32[r14>>2];r13=r11+4|0;tempValue=HEAP32[r13>>2],HEAP32[r13>>2]=tempValue+1,tempValue;if((HEAP32[71064>>2]|0)!=-1){HEAP32[r9>>2]=71064;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r9)}r13=HEAP32[71068>>2]-1|0;r2=HEAP32[r11+8>>2];do{if(HEAP32[r11+12>>2]-r2>>2>>>0>r13>>>0){r16=HEAP32[r2+(r13<<2)>>2];if((r16|0)==0){break}r18=r16;r19=r11+4|0;if(((tempValue=HEAP32[r19>>2],HEAP32[r19>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+8>>2]](r11)}r19=r15|0;r20=r16;FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+24>>2]](r19,r18);r16=r15+12|0;FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+28>>2]](r16,r18);r18=(__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,HEAP32[r4>>2],r19,r15+24|0,r12,r6,1)|0)==(r19|0)|0;HEAP8[r7]=r18;HEAP32[r1>>2]=HEAP32[r3>>2];do{if((HEAP8[r16]&1)!=0){r18=HEAP32[r15+20>>2];if((r18|0)==0){break}_free(r18)}}while(0);if((HEAP8[r15]&1)==0){STACKTOP=r8;return}r16=HEAP32[r15+8>>2];if((r16|0)==0){STACKTOP=r8;return}_free(r16);STACKTOP=r8;return}}while(0);r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53856;___cxa_throw(r12,62200,872)}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+104|0;r10=(r4-r3|0)/12&-1;r11=r9|0;do{if(r10>>>0>100){r12=_malloc(r10);if((r12|0)!=0){r13=r12;r14=r12;break}r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53824;___cxa_throw(r12,62184,110)}else{r13=r11;r14=0}}while(0);r11=(r3|0)==(r4|0);if(r11){r15=r10;r16=0}else{r12=r10;r10=0;r17=r13;r18=r3;while(1){r19=HEAP8[r18];if((r19&1)==0){r20=(r19&255)>>>1}else{r20=HEAP32[r18+4>>2]}if((r20|0)==0){HEAP8[r17]=2;r21=r10+1|0;r22=r12-1|0}else{HEAP8[r17]=1;r21=r10;r22=r12}r19=r18+12|0;if((r19|0)==(r4|0)){r15=r22;r16=r21;break}else{r12=r22;r10=r21;r17=r17+1|0;r18=r19}}}r18=r1|0;r1=r5;r17=0;r21=r16;r16=r15;r15=r2;L18:while(1){r2=(r16|0)!=0;r10=r17;r22=r15;while(1){r12=HEAP32[r18>>2];do{if((r12|0)==0){r23=1}else{r20=HEAP32[r12+12>>2];if((r20|0)==(HEAP32[r12+16>>2]|0)){r24=FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+36>>2]](r12)}else{r24=HEAP32[r20>>2]}if((r24|0)==-1){HEAP32[r18>>2]=0;r23=1;break}else{r23=(HEAP32[r18>>2]|0)==0;break}}}while(0);if((r22|0)==0){r25=1;r26=0;r27=0}else{r12=HEAP32[r22+12>>2];if((r12|0)==(HEAP32[r22+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)}else{r28=HEAP32[r12>>2]}r12=(r28|0)==-1;r25=r12?1:0;r26=r12?0:r22;r27=r12?0:r22}r29=HEAP32[r18>>2];if(!((r23^r25)&r2)){break L18}r12=HEAP32[r29+12>>2];if((r12|0)==(HEAP32[r29+16>>2]|0)){r30=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r30=HEAP32[r12>>2]}if(r7){r31=r30}else{r31=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+28>>2]](r5,r30)}r32=r10+1|0;if(r11){r10=r32;r22=r27}else{break}}L48:do{if(r7){r22=r16;r2=r21;r12=r13;r20=0;r19=r3;while(1){do{if((HEAP8[r12]|0)==1){r33=HEAP8[r19];r34=(r33&1)==0;if(r34){r35=r19+4|0}else{r35=HEAP32[r19+8>>2]}if((r31|0)!=(HEAP32[r35+(r10<<2)>>2]|0)){HEAP8[r12]=0;r36=r20;r37=r2;r38=r22-1|0;break}if(r34){r39=(r33&255)>>>1}else{r39=HEAP32[r19+4>>2]}if((r39|0)!=(r32|0)){r36=1;r37=r2;r38=r22;break}HEAP8[r12]=2;r36=1;r37=r2+1|0;r38=r22-1|0}else{r36=r20;r37=r2;r38=r22}}while(0);r33=r19+12|0;if((r33|0)==(r4|0)){r40=r38;r41=r37;r42=r36;break L48}r22=r38;r2=r37;r12=r12+1|0;r20=r36;r19=r33}}else{r19=r16;r20=r21;r12=r13;r2=0;r22=r3;while(1){do{if((HEAP8[r12]|0)==1){r33=r22;if((HEAP8[r33]&1)==0){r43=r22+4|0}else{r43=HEAP32[r22+8>>2]}if((r31|0)!=(FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+28>>2]](r5,HEAP32[r43+(r10<<2)>>2])|0)){HEAP8[r12]=0;r44=r2;r45=r20;r46=r19-1|0;break}r34=HEAP8[r33];if((r34&1)==0){r47=(r34&255)>>>1}else{r47=HEAP32[r22+4>>2]}if((r47|0)!=(r32|0)){r44=1;r45=r20;r46=r19;break}HEAP8[r12]=2;r44=1;r45=r20+1|0;r46=r19-1|0}else{r44=r2;r45=r20;r46=r19}}while(0);r34=r22+12|0;if((r34|0)==(r4|0)){r40=r46;r41=r45;r42=r44;break L48}r19=r46;r20=r45;r12=r12+1|0;r2=r44;r22=r34}}}while(0);if(!r42){r17=r32;r21=r41;r16=r40;r15=r27;continue}r10=HEAP32[r18>>2];r22=r10+12|0;r2=HEAP32[r22>>2];if((r2|0)==(HEAP32[r10+16>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+40>>2]](r10)}else{HEAP32[r22>>2]=r2+4}if((r40+r41|0)>>>0<2){r17=r32;r21=r41;r16=r40;r15=r27;continue}else{r48=r41;r49=r13;r50=r3}while(1){do{if((HEAP8[r49]|0)==2){r2=HEAP8[r50];if((r2&1)==0){r51=(r2&255)>>>1}else{r51=HEAP32[r50+4>>2]}if((r51|0)==(r32|0)){r52=r48;break}HEAP8[r49]=0;r52=r48-1|0}else{r52=r48}}while(0);r2=r50+12|0;if((r2|0)==(r4|0)){r17=r32;r21=r52;r16=r40;r15=r27;continue L18}else{r48=r52;r49=r49+1|0;r50=r2}}}do{if((r29|0)==0){r53=1}else{r50=HEAP32[r29+12>>2];if((r50|0)==(HEAP32[r29+16>>2]|0)){r54=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r54=HEAP32[r50>>2]}if((r54|0)==-1){HEAP32[r18>>2]=0;r53=1;break}else{r53=(HEAP32[r18>>2]|0)==0;break}}}while(0);do{if((r26|0)==0){r8=94}else{r18=HEAP32[r26+12>>2];if((r18|0)==(HEAP32[r26+16>>2]|0)){r55=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)}else{r55=HEAP32[r18>>2]}if((r55|0)==-1){r8=94;break}if(!r53){r8=96}}}while(0);if(r8==94){if(r53){r8=96}}if(r8==96){HEAP32[r6>>2]=HEAP32[r6>>2]|2}L125:do{if(r11){r8=101}else{if((HEAP8[r13]|0)==2){r56=r3;break}else{r57=r3;r58=r13}while(1){r53=r57+12|0;r55=r58+1|0;if((r53|0)==(r4|0)){r8=101;break L125}if((HEAP8[r55]|0)==2){r56=r53;break}else{r57=r53;r58=r55}}}}while(0);if(r8==101){HEAP32[r6>>2]=HEAP32[r6>>2]|4;r56=r4}if((r14|0)==0){r59=100;r60=0;STACKTOP=r9;return r56}_free(r14);r59=100;r60=0;STACKTOP=r9;return r56}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+328|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+104;r11=r8+112;r12=r8+128;r13=r8+144;r14=r8+152;r15=r8+312;r16=r8+320;r17=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r18=r12;r19=HEAP32[r5+4>>2]&74;if((r19|0)==0){r20=0}else if((r19|0)==64){r20=8}else if((r19|0)==8){r20=16}else{r20=10}r19=r9|0;__ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r11,r5,r19,r10);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r18]&1)==0){r5=r12+1|0;r21=r5;r22=r5;r23=r12+8|0}else{r5=r12+8|0;r21=HEAP32[r5>>2];r22=r12+1|0;r23=r5}HEAP32[r13>>2]=r21;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;r9=r12|0;r24=r12+4|0;r25=HEAP32[r10>>2];r10=r21;r21=r17;r17=r3;L11:while(1){if((r21|0)==0){r26=1;r27=0}else{r3=HEAP32[r21+12>>2];if((r3|0)==(HEAP32[r21+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r28=HEAP32[r3>>2]}r3=(r28|0)==-1;r26=r3?1:0;r27=r3?0:r21}do{if((r17|0)==0){r2=20}else{r3=HEAP32[r17+12>>2];if((r3|0)==(HEAP32[r17+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r29=HEAP32[r3>>2]}if((r29|0)==-1){r2=20;break}if(r26){r30=r17}else{r31=r10;r32=r17;break L11}}}while(0);if(r2==20){r2=0;if(r26){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r18];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r24>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r18]&1)==0){r36=10}else{r36=(HEAP32[r9>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r18]&1)==0){r37=r22}else{r37=HEAP32[r23>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r27+12|0;r33=HEAP32[r3>>2];r39=r27+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r40=HEAP32[r33>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r40,r20,r38,r13,r16,r25,r11,r5,r15,r19)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+40>>2]](r27);r10=r38;r21=r27;r17=r30;continue}else{HEAP32[r3>>2]=r33+4;r10=r38;r21=r27;r17=r30;continue}}r30=HEAP8[r4];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r17=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r17}}while(0);r16=__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(r31,HEAP32[r13>>2],r6,r20);HEAP32[r7>>2]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r27|0)==0){r42=1;r43=0}else{r15=HEAP32[r27+12>>2];if((r15|0)==(HEAP32[r27+16>>2]|0)){r44=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r44=HEAP32[r15>>2]}r15=(r44|0)==-1;r42=r15?1:0;r43=r15?0:r27}do{if((r32|0)==0){r2=69}else{r27=HEAP32[r32+12>>2];if((r27|0)==(HEAP32[r32+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)}else{r45=HEAP32[r27>>2]}if((r45|0)==-1){r2=69;break}if(!r42){r2=71}}}while(0);if(r2==69){if(r42){r2=71}}if(r2==71){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r43;do{if((HEAP8[r18]&1)!=0){r43=HEAP32[r12+8>>2];if((r43|0)==0){break}_free(r43)}}while(0);if((HEAP8[r4]&1)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}_free(r4);r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+328|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+104;r11=r8+112;r12=r8+128;r13=r8+144;r14=r8+152;r15=r8+312;r16=r8+320;r17=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r18=r12;r19=HEAP32[r5+4>>2]&74;if((r19|0)==64){r20=8}else if((r19|0)==0){r20=0}else if((r19|0)==8){r20=16}else{r20=10}r19=r9|0;__ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r11,r5,r19,r10);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r18]&1)==0){r5=r12+1|0;r21=r5;r22=r5;r23=r12+8|0}else{r5=r12+8|0;r21=HEAP32[r5>>2];r22=r12+1|0;r23=r5}HEAP32[r13>>2]=r21;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;r9=r12|0;r24=r12+4|0;r25=HEAP32[r10>>2];r10=r21;r21=r17;r17=r3;L11:while(1){if((r21|0)==0){r26=1;r27=0}else{r3=HEAP32[r21+12>>2];if((r3|0)==(HEAP32[r21+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r28=HEAP32[r3>>2]}r3=(r28|0)==-1;r26=r3?1:0;r27=r3?0:r21}do{if((r17|0)==0){r2=20}else{r3=HEAP32[r17+12>>2];if((r3|0)==(HEAP32[r17+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r29=HEAP32[r3>>2]}if((r29|0)==-1){r2=20;break}if(r26){r30=r17}else{r31=r10;r32=r17;break L11}}}while(0);if(r2==20){r2=0;if(r26){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r18];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r24>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r18]&1)==0){r36=10}else{r36=(HEAP32[r9>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r18]&1)==0){r37=r22}else{r37=HEAP32[r23>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r27+12|0;r33=HEAP32[r3>>2];r39=r27+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r40=HEAP32[r33>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r40,r20,r38,r13,r16,r25,r11,r5,r15,r19)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+40>>2]](r27);r10=r38;r21=r27;r17=r30;continue}else{HEAP32[r3>>2]=r33+4;r10=r38;r21=r27;r17=r30;continue}}r30=HEAP8[r4];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r17=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r17}}while(0);r16=__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(r31,HEAP32[r13>>2],r6,r20);HEAP32[r7>>2]=r16;HEAP32[r7+4>>2]=tempRet0;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r27|0)==0){r42=1;r43=0}else{r15=HEAP32[r27+12>>2];if((r15|0)==(HEAP32[r27+16>>2]|0)){r44=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r44=HEAP32[r15>>2]}r15=(r44|0)==-1;r42=r15?1:0;r43=r15?0:r27}do{if((r32|0)==0){r2=69}else{r27=HEAP32[r32+12>>2];if((r27|0)==(HEAP32[r32+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)}else{r45=HEAP32[r27>>2]}if((r45|0)==-1){r2=69;break}if(!r42){r2=71}}}while(0);if(r2==69){if(r42){r2=71}}if(r2==71){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r43;do{if((HEAP8[r18]&1)!=0){r43=HEAP32[r12+8>>2];if((r43|0)==0){break}_free(r43)}}while(0);if((HEAP8[r4]&1)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}_free(r4);r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+328|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+104;r11=r8+112;r12=r8+128;r13=r8+144;r14=r8+152;r15=r8+312;r16=r8+320;r17=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r18=r12;r19=HEAP32[r5+4>>2]&74;if((r19|0)==0){r20=0}else if((r19|0)==64){r20=8}else if((r19|0)==8){r20=16}else{r20=10}r19=r9|0;__ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r11,r5,r19,r10);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r18]&1)==0){r5=r12+1|0;r21=r5;r22=r5;r23=r12+8|0}else{r5=r12+8|0;r21=HEAP32[r5>>2];r22=r12+1|0;r23=r5}HEAP32[r13>>2]=r21;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;r9=r12|0;r24=r12+4|0;r25=HEAP32[r10>>2];r10=r21;r21=r17;r17=r3;L11:while(1){if((r21|0)==0){r26=1;r27=0}else{r3=HEAP32[r21+12>>2];if((r3|0)==(HEAP32[r21+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r28=HEAP32[r3>>2]}r3=(r28|0)==-1;r26=r3?1:0;r27=r3?0:r21}do{if((r17|0)==0){r2=20}else{r3=HEAP32[r17+12>>2];if((r3|0)==(HEAP32[r17+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r29=HEAP32[r3>>2]}if((r29|0)==-1){r2=20;break}if(r26){r30=r17}else{r31=r10;r32=r17;break L11}}}while(0);if(r2==20){r2=0;if(r26){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r18];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r24>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r18]&1)==0){r36=10}else{r36=(HEAP32[r9>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r18]&1)==0){r37=r22}else{r37=HEAP32[r23>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r27+12|0;r33=HEAP32[r3>>2];r39=r27+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r40=HEAP32[r33>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r40,r20,r38,r13,r16,r25,r11,r5,r15,r19)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+40>>2]](r27);r10=r38;r21=r27;r17=r30;continue}else{HEAP32[r3>>2]=r33+4;r10=r38;r21=r27;r17=r30;continue}}r30=HEAP8[r4];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r17=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r17}}while(0);r16=__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(r31,HEAP32[r13>>2],r6,r20);HEAP16[r7>>1]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r27|0)==0){r42=1;r43=0}else{r15=HEAP32[r27+12>>2];if((r15|0)==(HEAP32[r27+16>>2]|0)){r44=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r44=HEAP32[r15>>2]}r15=(r44|0)==-1;r42=r15?1:0;r43=r15?0:r27}do{if((r32|0)==0){r2=69}else{r27=HEAP32[r32+12>>2];if((r27|0)==(HEAP32[r32+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)}else{r45=HEAP32[r27>>2]}if((r45|0)==-1){r2=69;break}if(!r42){r2=71}}}while(0);if(r2==69){if(r42){r2=71}}if(r2==71){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r43;do{if((HEAP8[r18]&1)!=0){r43=HEAP32[r12+8>>2];if((r43|0)==0){break}_free(r43)}}while(0);if((HEAP8[r4]&1)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}_free(r4);r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+328|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+104;r11=r8+112;r12=r8+128;r13=r8+144;r14=r8+152;r15=r8+312;r16=r8+320;r17=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r18=r12;r19=HEAP32[r5+4>>2]&74;if((r19|0)==64){r20=8}else if((r19|0)==0){r20=0}else if((r19|0)==8){r20=16}else{r20=10}r19=r9|0;__ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r11,r5,r19,r10);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r18]&1)==0){r5=r12+1|0;r21=r5;r22=r5;r23=r12+8|0}else{r5=r12+8|0;r21=HEAP32[r5>>2];r22=r12+1|0;r23=r5}HEAP32[r13>>2]=r21;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;r9=r12|0;r24=r12+4|0;r25=HEAP32[r10>>2];r10=r21;r21=r17;r17=r3;L11:while(1){if((r21|0)==0){r26=1;r27=0}else{r3=HEAP32[r21+12>>2];if((r3|0)==(HEAP32[r21+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r28=HEAP32[r3>>2]}r3=(r28|0)==-1;r26=r3?1:0;r27=r3?0:r21}do{if((r17|0)==0){r2=20}else{r3=HEAP32[r17+12>>2];if((r3|0)==(HEAP32[r17+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r29=HEAP32[r3>>2]}if((r29|0)==-1){r2=20;break}if(r26){r30=r17}else{r31=r10;r32=r17;break L11}}}while(0);if(r2==20){r2=0;if(r26){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r18];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r24>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r18]&1)==0){r36=10}else{r36=(HEAP32[r9>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r18]&1)==0){r37=r22}else{r37=HEAP32[r23>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r27+12|0;r33=HEAP32[r3>>2];r39=r27+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r40=HEAP32[r33>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r40,r20,r38,r13,r16,r25,r11,r5,r15,r19)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+40>>2]](r27);r10=r38;r21=r27;r17=r30;continue}else{HEAP32[r3>>2]=r33+4;r10=r38;r21=r27;r17=r30;continue}}r30=HEAP8[r4];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r17=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r17}}while(0);r16=__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(r31,HEAP32[r13>>2],r6,r20);HEAP32[r7>>2]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r27|0)==0){r42=1;r43=0}else{r15=HEAP32[r27+12>>2];if((r15|0)==(HEAP32[r27+16>>2]|0)){r44=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r44=HEAP32[r15>>2]}r15=(r44|0)==-1;r42=r15?1:0;r43=r15?0:r27}do{if((r32|0)==0){r2=69}else{r27=HEAP32[r32+12>>2];if((r27|0)==(HEAP32[r32+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)}else{r45=HEAP32[r27>>2]}if((r45|0)==-1){r2=69;break}if(!r42){r2=71}}}while(0);if(r2==69){if(r42){r2=71}}if(r2==71){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r43;do{if((HEAP8[r18]&1)!=0){r43=HEAP32[r12+8>>2];if((r43|0)==0){break}_free(r43)}}while(0);if((HEAP8[r4]&1)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}_free(r4);r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+328|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+104;r11=r8+112;r12=r8+128;r13=r8+144;r14=r8+152;r15=r8+312;r16=r8+320;r17=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r18=r12;r19=HEAP32[r5+4>>2]&74;if((r19|0)==0){r20=0}else if((r19|0)==64){r20=8}else if((r19|0)==8){r20=16}else{r20=10}r19=r9|0;__ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r11,r5,r19,r10);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r18]&1)==0){r5=r12+1|0;r21=r5;r22=r5;r23=r12+8|0}else{r5=r12+8|0;r21=HEAP32[r5>>2];r22=r12+1|0;r23=r5}HEAP32[r13>>2]=r21;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;r9=r12|0;r24=r12+4|0;r25=HEAP32[r10>>2];r10=r21;r21=r17;r17=r3;L11:while(1){if((r21|0)==0){r26=1;r27=0}else{r3=HEAP32[r21+12>>2];if((r3|0)==(HEAP32[r21+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r28=HEAP32[r3>>2]}r3=(r28|0)==-1;r26=r3?1:0;r27=r3?0:r21}do{if((r17|0)==0){r2=20}else{r3=HEAP32[r17+12>>2];if((r3|0)==(HEAP32[r17+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r29=HEAP32[r3>>2]}if((r29|0)==-1){r2=20;break}if(r26){r30=r17}else{r31=r10;r32=r17;break L11}}}while(0);if(r2==20){r2=0;if(r26){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r18];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r24>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r18]&1)==0){r36=10}else{r36=(HEAP32[r9>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r18]&1)==0){r37=r22}else{r37=HEAP32[r23>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r27+12|0;r33=HEAP32[r3>>2];r39=r27+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r40=HEAP32[r33>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r40,r20,r38,r13,r16,r25,r11,r5,r15,r19)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+40>>2]](r27);r10=r38;r21=r27;r17=r30;continue}else{HEAP32[r3>>2]=r33+4;r10=r38;r21=r27;r17=r30;continue}}r30=HEAP8[r4];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r17=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r17}}while(0);r16=__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(r31,HEAP32[r13>>2],r6,r20);HEAP32[r7>>2]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r27|0)==0){r42=1;r43=0}else{r15=HEAP32[r27+12>>2];if((r15|0)==(HEAP32[r27+16>>2]|0)){r44=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r44=HEAP32[r15>>2]}r15=(r44|0)==-1;r42=r15?1:0;r43=r15?0:r27}do{if((r32|0)==0){r2=69}else{r27=HEAP32[r32+12>>2];if((r27|0)==(HEAP32[r32+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)}else{r45=HEAP32[r27>>2]}if((r45|0)==-1){r2=69;break}if(!r42){r2=71}}}while(0);if(r2==69){if(r42){r2=71}}if(r2==71){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r43;do{if((HEAP8[r18]&1)!=0){r43=HEAP32[r12+8>>2];if((r43|0)==0){break}_free(r43)}}while(0);if((HEAP8[r4]&1)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}_free(r4);r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+328|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=r8+104;r11=r8+112;r12=r8+128;r13=r8+144;r14=r8+152;r15=r8+312;r16=r8+320;r17=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r18=r12;r19=HEAP32[r5+4>>2]&74;if((r19|0)==8){r20=16}else if((r19|0)==64){r20=8}else if((r19|0)==0){r20=0}else{r20=10}r19=r9|0;__ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r11,r5,r19,r10);HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r18]&1)==0){r5=r12+1|0;r21=r5;r22=r5;r23=r12+8|0}else{r5=r12+8|0;r21=HEAP32[r5>>2];r22=r12+1|0;r23=r5}HEAP32[r13>>2]=r21;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;r9=r12|0;r24=r12+4|0;r25=HEAP32[r10>>2];r10=r21;r21=r17;r17=r3;L11:while(1){if((r21|0)==0){r26=1;r27=0}else{r3=HEAP32[r21+12>>2];if((r3|0)==(HEAP32[r21+16>>2]|0)){r28=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r28=HEAP32[r3>>2]}r3=(r28|0)==-1;r26=r3?1:0;r27=r3?0:r21}do{if((r17|0)==0){r2=20}else{r3=HEAP32[r17+12>>2];if((r3|0)==(HEAP32[r17+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r29=HEAP32[r3>>2]}if((r29|0)==-1){r2=20;break}if(r26){r30=r17}else{r31=r10;r32=r17;break L11}}}while(0);if(r2==20){r2=0;if(r26){r31=r10;r32=0;break}else{r30=0}}r3=HEAP8[r18];r33=(r3&1)==0;if(r33){r34=(r3&255)>>>1}else{r34=HEAP32[r24>>2]}if((HEAP32[r13>>2]-r10|0)==(r34|0)){if(r33){r35=(r3&255)>>>1}else{r35=HEAP32[r24>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r35<<1);if((HEAP8[r18]&1)==0){r36=10}else{r36=(HEAP32[r9>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r36);if((HEAP8[r18]&1)==0){r37=r22}else{r37=HEAP32[r23>>2]}HEAP32[r13>>2]=r37+r35;r38=r37}else{r38=r10}r3=r27+12|0;r33=HEAP32[r3>>2];r39=r27+16|0;if((r33|0)==(HEAP32[r39>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r40=HEAP32[r33>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r40,r20,r38,r13,r16,r25,r11,r5,r15,r19)|0)!=0){r31=r38;r32=r30;break}r33=HEAP32[r3>>2];if((r33|0)==(HEAP32[r39>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+40>>2]](r27);r10=r38;r21=r27;r17=r30;continue}else{HEAP32[r3>>2]=r33+4;r10=r38;r21=r27;r17=r30;continue}}r30=HEAP8[r4];if((r30&1)==0){r41=(r30&255)>>>1}else{r41=HEAP32[r11+4>>2]}do{if((r41|0)!=0){r30=HEAP32[r15>>2];if((r30-r14|0)>=160){break}r17=HEAP32[r16>>2];HEAP32[r15>>2]=r30+4;HEAP32[r30>>2]=r17}}while(0);r16=__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(r31,HEAP32[r13>>2],r6,r20);HEAP32[r7>>2]=r16;HEAP32[r7+4>>2]=tempRet0;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r27|0)==0){r42=1;r43=0}else{r15=HEAP32[r27+12>>2];if((r15|0)==(HEAP32[r27+16>>2]|0)){r44=FUNCTION_TABLE[HEAP32[HEAP32[r27>>2]+36>>2]](r27)}else{r44=HEAP32[r15>>2]}r15=(r44|0)==-1;r42=r15?1:0;r43=r15?0:r27}do{if((r32|0)==0){r2=69}else{r27=HEAP32[r32+12>>2];if((r27|0)==(HEAP32[r32+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r32)}else{r45=HEAP32[r27>>2]}if((r45|0)==-1){r2=69;break}if(!r42){r2=71}}}while(0);if(r2==69){if(r42){r2=71}}if(r2==71){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r43;do{if((HEAP8[r18]&1)!=0){r43=HEAP32[r12+8>>2];if((r43|0)==0){break}_free(r43)}}while(0);if((HEAP8[r4]&1)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}_free(r4);r46=104;r47=0;r48=4;r49=0;r50=12;r51=0;r52=12;r53=0;r54=4;r55=0;r56=4;r57=0;r58=4;r59=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+376|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+128;r10=r8+136;r11=r8+144;r12=r8+160;r13=r8+176;r14=r8+184;r15=r8+344;r16=r8+352;r17=r8+360;r18=r8+368;r19=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r20=r12;r21=r8|0;__ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(r11,r5,r21,r9,r10);HEAP32[r20>>2]=0;HEAP32[r20+4>>2]=0;HEAP32[r20+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r20]&1)==0){r5=r12+1|0;r22=r5;r23=r5;r24=r12+8|0}else{r5=r12+8|0;r22=HEAP32[r5>>2];r23=r12+1|0;r24=r5}HEAP32[r13>>2]=r22;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;HEAP8[r17]=1;HEAP8[r18]=69;r25=r12|0;r26=r12+4|0;r27=HEAP32[r9>>2];r9=HEAP32[r10>>2];r10=r22;r22=r19;r19=r3;L6:while(1){if((r22|0)==0){r28=1;r29=0}else{r3=HEAP32[r22+12>>2];if((r3|0)==(HEAP32[r22+16>>2]|0)){r30=FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)}else{r30=HEAP32[r3>>2]}r3=(r30|0)==-1;r28=r3?1:0;r29=r3?0:r22}do{if((r19|0)==0){r2=16}else{r3=HEAP32[r19+12>>2];if((r3|0)==(HEAP32[r19+16>>2]|0)){r31=FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+36>>2]](r19)}else{r31=HEAP32[r3>>2]}if((r31|0)==-1){r2=16;break}if(r28){r32=r19}else{r33=r10;r34=r19;break L6}}}while(0);if(r2==16){r2=0;if(r28){r33=r10;r34=0;break}else{r32=0}}r3=HEAP8[r20];r35=(r3&1)==0;if(r35){r36=(r3&255)>>>1}else{r36=HEAP32[r26>>2]}if((HEAP32[r13>>2]-r10|0)==(r36|0)){if(r35){r37=(r3&255)>>>1}else{r37=HEAP32[r26>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r37<<1);if((HEAP8[r20]&1)==0){r38=10}else{r38=(HEAP32[r25>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r38);if((HEAP8[r20]&1)==0){r39=r23}else{r39=HEAP32[r24>>2]}HEAP32[r13>>2]=r39+r37;r40=r39}else{r40=r10}r3=r29+12|0;r35=HEAP32[r3>>2];r41=r29+16|0;if((r35|0)==(HEAP32[r41>>2]|0)){r42=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r42=HEAP32[r35>>2]}if((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(r42,r17,r18,r40,r13,r27,r9,r11,r5,r15,r16,r21)|0)!=0){r33=r40;r34=r32;break}r35=HEAP32[r3>>2];if((r35|0)==(HEAP32[r41>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+40>>2]](r29);r10=r40;r22=r29;r19=r32;continue}else{HEAP32[r3>>2]=r35+4;r10=r40;r22=r29;r19=r32;continue}}r32=HEAP8[r4];if((r32&1)==0){r43=(r32&255)>>>1}else{r43=HEAP32[r11+4>>2]}do{if((r43|0)!=0){if((HEAP8[r17]|0)==0){break}r32=HEAP32[r15>>2];if((r32-r14|0)>=160){break}r19=HEAP32[r16>>2];HEAP32[r15>>2]=r32+4;HEAP32[r32>>2]=r19}}while(0);r16=__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(r33,HEAP32[r13>>2],r6);HEAPF32[r7>>2]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r29|0)==0){r44=1;r45=0}else{r15=HEAP32[r29+12>>2];if((r15|0)==(HEAP32[r29+16>>2]|0)){r46=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r46=HEAP32[r15>>2]}r15=(r46|0)==-1;r44=r15?1:0;r45=r15?0:r29}do{if((r34|0)==0){r2=66}else{r29=HEAP32[r34+12>>2];if((r29|0)==(HEAP32[r34+16>>2]|0)){r47=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)}else{r47=HEAP32[r29>>2]}if((r47|0)==-1){r2=66;break}if(!r44){r2=68}}}while(0);if(r2==66){if(r44){r2=68}}if(r2==68){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r45;do{if((HEAP8[r20]&1)!=0){r45=HEAP32[r12+8>>2];if((r45|0)==0){break}_free(r45)}}while(0);if((HEAP8[r4]&1)==0){r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}_free(r4);r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+376|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+128;r10=r8+136;r11=r8+144;r12=r8+160;r13=r8+176;r14=r8+184;r15=r8+344;r16=r8+352;r17=r8+360;r18=r8+368;r19=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r20=r12;r21=r8|0;__ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(r11,r5,r21,r9,r10);HEAP32[r20>>2]=0;HEAP32[r20+4>>2]=0;HEAP32[r20+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r20]&1)==0){r5=r12+1|0;r22=r5;r23=r5;r24=r12+8|0}else{r5=r12+8|0;r22=HEAP32[r5>>2];r23=r12+1|0;r24=r5}HEAP32[r13>>2]=r22;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;HEAP8[r17]=1;HEAP8[r18]=69;r25=r12|0;r26=r12+4|0;r27=HEAP32[r9>>2];r9=HEAP32[r10>>2];r10=r22;r22=r19;r19=r3;L6:while(1){if((r22|0)==0){r28=1;r29=0}else{r3=HEAP32[r22+12>>2];if((r3|0)==(HEAP32[r22+16>>2]|0)){r30=FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)}else{r30=HEAP32[r3>>2]}r3=(r30|0)==-1;r28=r3?1:0;r29=r3?0:r22}do{if((r19|0)==0){r2=16}else{r3=HEAP32[r19+12>>2];if((r3|0)==(HEAP32[r19+16>>2]|0)){r31=FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+36>>2]](r19)}else{r31=HEAP32[r3>>2]}if((r31|0)==-1){r2=16;break}if(r28){r32=r19}else{r33=r10;r34=r19;break L6}}}while(0);if(r2==16){r2=0;if(r28){r33=r10;r34=0;break}else{r32=0}}r3=HEAP8[r20];r35=(r3&1)==0;if(r35){r36=(r3&255)>>>1}else{r36=HEAP32[r26>>2]}if((HEAP32[r13>>2]-r10|0)==(r36|0)){if(r35){r37=(r3&255)>>>1}else{r37=HEAP32[r26>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r37<<1);if((HEAP8[r20]&1)==0){r38=10}else{r38=(HEAP32[r25>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r38);if((HEAP8[r20]&1)==0){r39=r23}else{r39=HEAP32[r24>>2]}HEAP32[r13>>2]=r39+r37;r40=r39}else{r40=r10}r3=r29+12|0;r35=HEAP32[r3>>2];r41=r29+16|0;if((r35|0)==(HEAP32[r41>>2]|0)){r42=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r42=HEAP32[r35>>2]}if((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(r42,r17,r18,r40,r13,r27,r9,r11,r5,r15,r16,r21)|0)!=0){r33=r40;r34=r32;break}r35=HEAP32[r3>>2];if((r35|0)==(HEAP32[r41>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+40>>2]](r29);r10=r40;r22=r29;r19=r32;continue}else{HEAP32[r3>>2]=r35+4;r10=r40;r22=r29;r19=r32;continue}}r32=HEAP8[r4];if((r32&1)==0){r43=(r32&255)>>>1}else{r43=HEAP32[r11+4>>2]}do{if((r43|0)!=0){if((HEAP8[r17]|0)==0){break}r32=HEAP32[r15>>2];if((r32-r14|0)>=160){break}r19=HEAP32[r16>>2];HEAP32[r15>>2]=r32+4;HEAP32[r32>>2]=r19}}while(0);r16=__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(r33,HEAP32[r13>>2],r6);HEAPF64[r7>>3]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r29|0)==0){r44=1;r45=0}else{r15=HEAP32[r29+12>>2];if((r15|0)==(HEAP32[r29+16>>2]|0)){r46=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r46=HEAP32[r15>>2]}r15=(r46|0)==-1;r44=r15?1:0;r45=r15?0:r29}do{if((r34|0)==0){r2=66}else{r29=HEAP32[r34+12>>2];if((r29|0)==(HEAP32[r34+16>>2]|0)){r47=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)}else{r47=HEAP32[r29>>2]}if((r47|0)==-1){r2=66;break}if(!r44){r2=68}}}while(0);if(r2==66){if(r44){r2=68}}if(r2==68){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r45;do{if((HEAP8[r20]&1)!=0){r45=HEAP32[r12+8>>2];if((r45|0)==0){break}_free(r45)}}while(0);if((HEAP8[r4]&1)==0){r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}_free(r4);r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+376|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8+128;r10=r8+136;r11=r8+144;r12=r8+160;r13=r8+176;r14=r8+184;r15=r8+344;r16=r8+352;r17=r8+360;r18=r8+368;r19=HEAP32[r3>>2];r3=HEAP32[r4>>2];r4=r11;r20=r12;r21=r8|0;__ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(r11,r5,r21,r9,r10);HEAP32[r20>>2]=0;HEAP32[r20+4>>2]=0;HEAP32[r20+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,10);if((HEAP8[r20]&1)==0){r5=r12+1|0;r22=r5;r23=r5;r24=r12+8|0}else{r5=r12+8|0;r22=HEAP32[r5>>2];r23=r12+1|0;r24=r5}HEAP32[r13>>2]=r22;r5=r14|0;HEAP32[r15>>2]=r5;HEAP32[r16>>2]=0;HEAP8[r17]=1;HEAP8[r18]=69;r25=r12|0;r26=r12+4|0;r27=HEAP32[r9>>2];r9=HEAP32[r10>>2];r10=r22;r22=r19;r19=r3;L6:while(1){if((r22|0)==0){r28=1;r29=0}else{r3=HEAP32[r22+12>>2];if((r3|0)==(HEAP32[r22+16>>2]|0)){r30=FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)}else{r30=HEAP32[r3>>2]}r3=(r30|0)==-1;r28=r3?1:0;r29=r3?0:r22}do{if((r19|0)==0){r2=16}else{r3=HEAP32[r19+12>>2];if((r3|0)==(HEAP32[r19+16>>2]|0)){r31=FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+36>>2]](r19)}else{r31=HEAP32[r3>>2]}if((r31|0)==-1){r2=16;break}if(r28){r32=r19}else{r33=r10;r34=r19;break L6}}}while(0);if(r2==16){r2=0;if(r28){r33=r10;r34=0;break}else{r32=0}}r3=HEAP8[r20];r35=(r3&1)==0;if(r35){r36=(r3&255)>>>1}else{r36=HEAP32[r26>>2]}if((HEAP32[r13>>2]-r10|0)==(r36|0)){if(r35){r37=(r3&255)>>>1}else{r37=HEAP32[r26>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r37<<1);if((HEAP8[r20]&1)==0){r38=10}else{r38=(HEAP32[r25>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r12,r38);if((HEAP8[r20]&1)==0){r39=r23}else{r39=HEAP32[r24>>2]}HEAP32[r13>>2]=r39+r37;r40=r39}else{r40=r10}r3=r29+12|0;r35=HEAP32[r3>>2];r41=r29+16|0;if((r35|0)==(HEAP32[r41>>2]|0)){r42=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r42=HEAP32[r35>>2]}if((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(r42,r17,r18,r40,r13,r27,r9,r11,r5,r15,r16,r21)|0)!=0){r33=r40;r34=r32;break}r35=HEAP32[r3>>2];if((r35|0)==(HEAP32[r41>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+40>>2]](r29);r10=r40;r22=r29;r19=r32;continue}else{HEAP32[r3>>2]=r35+4;r10=r40;r22=r29;r19=r32;continue}}r32=HEAP8[r4];if((r32&1)==0){r43=(r32&255)>>>1}else{r43=HEAP32[r11+4>>2]}do{if((r43|0)!=0){if((HEAP8[r17]|0)==0){break}r32=HEAP32[r15>>2];if((r32-r14|0)>=160){break}r19=HEAP32[r16>>2];HEAP32[r15>>2]=r32+4;HEAP32[r32>>2]=r19}}while(0);r16=__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(r33,HEAP32[r13>>2],r6);HEAPF64[r7>>3]=r16;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r11,r5,HEAP32[r15>>2],r6);if((r29|0)==0){r44=1;r45=0}else{r15=HEAP32[r29+12>>2];if((r15|0)==(HEAP32[r29+16>>2]|0)){r46=FUNCTION_TABLE[HEAP32[HEAP32[r29>>2]+36>>2]](r29)}else{r46=HEAP32[r15>>2]}r15=(r46|0)==-1;r44=r15?1:0;r45=r15?0:r29}do{if((r34|0)==0){r2=66}else{r29=HEAP32[r34+12>>2];if((r29|0)==(HEAP32[r34+16>>2]|0)){r47=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)}else{r47=HEAP32[r29>>2]}if((r47|0)==-1){r2=66;break}if(!r44){r2=68}}}while(0);if(r2==66){if(r44){r2=68}}if(r2==68){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r45;do{if((HEAP8[r20]&1)!=0){r45=HEAP32[r12+8>>2];if((r45|0)==0){break}_free(r45)}}while(0);if((HEAP8[r4]&1)==0){r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}r4=HEAP32[r11+8>>2];if((r4|0)==0){r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}_free(r4);r48=128;r49=0;r50=4;r51=0;r52=4;r53=0;r54=12;r55=0;r56=12;r57=0;r58=4;r59=0;r60=4;r61=0;r62=4;r63=0;r64=1;r65=0;r66=1;r67=0;STACKTOP=r8;return}function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51;r2=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+336|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r10>>2];r10=r9;r11=r9+16;r12=r9+120;r13=r9+136;r14=r9+152;r15=r9+160;r16=r9+320;r17=r9+328;r18=r12;HEAP32[r18>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18+8>>2]=0;r19=HEAP32[r5+28>>2];r5=r19+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r10>>2]=71448;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r10)}r10=HEAP32[71452>>2]-1|0;r5=HEAP32[r19+8>>2];do{if(HEAP32[r19+12>>2]-r5>>2>>>0>r10>>>0){r20=HEAP32[r5+(r10<<2)>>2];if((r20|0)==0){break}r21=r11|0;FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+48>>2]](r20,64552,64578,r21);r20=r19+4|0;if(((tempValue=HEAP32[r20>>2],HEAP32[r20>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+8>>2]](r19)}r20=r13;HEAP32[r20>>2]=0;HEAP32[r20+4>>2]=0;HEAP32[r20+8>>2]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,10);if((HEAP8[r20]&1)==0){r22=r13+1|0;r23=r22;r24=r22;r25=r13+8|0}else{r22=r13+8|0;r23=HEAP32[r22>>2];r24=r13+1|0;r25=r22}HEAP32[r14>>2]=r23;r22=r15|0;HEAP32[r16>>2]=r22;HEAP32[r17>>2]=0;r26=r3|0;r27=r4|0;r28=r13|0;r29=r13+4|0;r30=r23;r31=HEAP32[r26>>2];L16:while(1){do{if((r31|0)==0){r32=1;r33=0}else{r34=HEAP32[r31+12>>2];if((r34|0)==(HEAP32[r31+16>>2]|0)){r35=FUNCTION_TABLE[HEAP32[HEAP32[r31>>2]+36>>2]](r31)}else{r35=HEAP32[r34>>2]}if((r35|0)!=-1){r32=0;r33=r31;break}HEAP32[r26>>2]=0;r32=1;r33=0}}while(0);r34=HEAP32[r27>>2];do{if((r34|0)==0){r2=27}else{r36=HEAP32[r34+12>>2];if((r36|0)==(HEAP32[r34+16>>2]|0)){r37=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)}else{r37=HEAP32[r36>>2]}if((r37|0)==-1){HEAP32[r27>>2]=0;r2=27;break}else{if(r32){break}else{r38=r30;break L16}}}}while(0);if(r2==27){r2=0;if(r32){r38=r30;break}}r34=HEAP8[r20];r36=(r34&1)==0;if(r36){r39=(r34&255)>>>1}else{r39=HEAP32[r29>>2]}if((HEAP32[r14>>2]-r30|0)==(r39|0)){if(r36){r40=(r34&255)>>>1}else{r40=HEAP32[r29>>2]}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,r40<<1);if((HEAP8[r20]&1)==0){r41=10}else{r41=(HEAP32[r28>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,r41);if((HEAP8[r20]&1)==0){r42=r24}else{r42=HEAP32[r25>>2]}HEAP32[r14>>2]=r42+r40;r43=r42}else{r43=r30}r34=r33+12|0;r36=HEAP32[r34>>2];r44=r33+16|0;if((r36|0)==(HEAP32[r44>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r33>>2]+36>>2]](r33)}else{r45=HEAP32[r36>>2]}if((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r45,16,r43,r14,r17,0,r12,r22,r16,r21)|0)!=0){r38=r43;break}r36=HEAP32[r34>>2];if((r36|0)==(HEAP32[r44>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r33>>2]+40>>2]](r33);r30=r43;r31=r33;continue}else{HEAP32[r34>>2]=r36+4;r30=r43;r31=r33;continue}}HEAP8[r38+3|0]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r31=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r31}}while(0);r31=__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(r38,HEAP32[69912>>2],(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r7,r8));STACKTOP=r8;if((r31|0)!=1){HEAP32[r6>>2]=4}r31=HEAP32[r26>>2];do{if((r31|0)==0){r46=1;r47=0}else{r30=HEAP32[r31+12>>2];if((r30|0)==(HEAP32[r31+16>>2]|0)){r48=FUNCTION_TABLE[HEAP32[HEAP32[r31>>2]+36>>2]](r31)}else{r48=HEAP32[r30>>2]}if((r48|0)!=-1){r46=0;r47=r31;break}HEAP32[r26>>2]=0;r46=1;r47=0}}while(0);r26=HEAP32[r27>>2];do{if((r26|0)==0){r2=77}else{r31=HEAP32[r26+12>>2];if((r31|0)==(HEAP32[r26+16>>2]|0)){r49=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)}else{r49=HEAP32[r31>>2]}if((r49|0)==-1){HEAP32[r27>>2]=0;r2=77;break}else{if(r46){break}else{r2=79;break}}}}while(0);if(r2==77){if(r46){r2=79}}if(r2==79){HEAP32[r6>>2]=HEAP32[r6>>2]|2}HEAP32[r1>>2]=r47;do{if((HEAP8[r20]&1)!=0){r27=HEAP32[r13+8>>2];if((r27|0)==0){break}_free(r27)}}while(0);if((HEAP8[r18]&1)==0){r50=104;r51=0;STACKTOP=r9;return}r20=HEAP32[r12+8>>2];if((r20|0)==0){r50=104;r51=0;STACKTOP=r9;return}_free(r20);r50=104;r51=0;STACKTOP=r9;return}}while(0);r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53856;___cxa_throw(r9,62200,872)}function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10){var r11,r12,r13,r14,r15,r16;r11=HEAP32[r4>>2];r12=(r11|0)==(r3|0);do{if(r12){r13=(HEAP32[r10+96>>2]|0)==(r1|0);if(!r13){if((HEAP32[r10+100>>2]|0)!=(r1|0)){break}}HEAP32[r4>>2]=r3+1;HEAP8[r3]=r13?43:45;HEAP32[r5>>2]=0;r14=0;return r14}}while(0);r13=HEAP8[r7];if((r13&1)==0){r15=(r13&255)>>>1}else{r15=HEAP32[r7+4>>2]}if((r15|0)!=0&(r1|0)==(r6|0)){r6=HEAP32[r9>>2];if((r6-r8|0)>=160){r14=0;return r14}r8=HEAP32[r5>>2];HEAP32[r9>>2]=r6+4;HEAP32[r6>>2]=r8;HEAP32[r5>>2]=0;r14=0;return r14}r8=r10+104|0;r6=r10;while(1){r9=r6+4|0;if((HEAP32[r6>>2]|0)==(r1|0)){r16=r6;break}if((r9|0)==(r8|0)){r16=r8;break}else{r6=r9}}r6=r16-r10|0;r10=r6>>2;if((r6|0)>92){r14=-1;return r14}do{if((r2|0)==16){if((r6|0)<88){break}if(r12){r14=-1;return r14}if((r11-r3|0)>=3){r14=-1;return r14}if((HEAP8[r11-1|0]|0)!=48){r14=-1;return r14}HEAP32[r5>>2]=0;r16=HEAP8[r10+64552|0];HEAP32[r4>>2]=r11+1;HEAP8[r11]=r16;r14=0;return r14}else if((r2|0)==8|(r2|0)==10){if((r10|0)<(r2|0)){break}else{r14=-1}return r14}}while(0);r2=HEAP8[r10+64552|0];HEAP32[r4>>2]=r11+1;HEAP8[r11]=r2;HEAP32[r5>>2]=HEAP32[r5>>2]+1;r14=0;return r14}function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r5=STACKTOP;STACKTOP=STACKTOP+32|0;r6=r5;r7=r5+16;r8=HEAP32[r2+28>>2];r2=r8+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r7>>2]=71456;HEAP32[r7+4>>2]=46;HEAP32[r7+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r7)}r7=HEAP32[71460>>2]-1|0;r2=r8+12|0;r9=r8+8|0;r10=HEAP32[r9>>2];do{if(HEAP32[r2>>2]-r10>>2>>>0>r7>>>0){r11=HEAP32[r10+(r7<<2)>>2];if((r11|0)==0){break}FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+32>>2]](r11,64552,64578,r3);if((HEAP32[71072>>2]|0)!=-1){HEAP32[r6>>2]=71072;HEAP32[r6+4>>2]=46;HEAP32[r6+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r6)}r11=HEAP32[71076>>2]-1|0;r12=HEAP32[r9>>2];do{if(HEAP32[r2>>2]-r12>>2>>>0>r11>>>0){r13=HEAP32[r12+(r11<<2)>>2];if((r13|0)==0){break}r14=r13;r15=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+16>>2]](r14);HEAP8[r4]=r15;FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+20>>2]](r1,r14);r14=r8+4|0;if(((tempValue=HEAP32[r14>>2],HEAP32[r14>>2]=tempValue+ -1,tempValue)|0)!=0){STACKTOP=r5;return}FUNCTION_TABLE[HEAP32[HEAP32[r8>>2]+8>>2]](r8);STACKTOP=r5;return}}while(0);r11=___cxa_allocate_exception(4);HEAP32[r11>>2]=53856;___cxa_throw(r11,62200,872)}}while(0);r5=___cxa_allocate_exception(4);HEAP32[r5>>2]=53856;___cxa_throw(r5,62200,872)}function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r6=STACKTOP;STACKTOP=STACKTOP+32|0;r7=r6;r8=r6+16;r9=HEAP32[r2+28>>2];r2=r9+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r8>>2]=71456;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r8)}r8=HEAP32[71460>>2]-1|0;r2=r9+12|0;r10=r9+8|0;r11=HEAP32[r10>>2];do{if(HEAP32[r2>>2]-r11>>2>>>0>r8>>>0){r12=HEAP32[r11+(r8<<2)>>2];if((r12|0)==0){break}FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+32>>2]](r12,64552,64584,r3);if((HEAP32[71072>>2]|0)!=-1){HEAP32[r7>>2]=71072;HEAP32[r7+4>>2]=46;HEAP32[r7+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r7)}r12=HEAP32[71076>>2]-1|0;r13=HEAP32[r10>>2];do{if(HEAP32[r2>>2]-r13>>2>>>0>r12>>>0){r14=HEAP32[r13+(r12<<2)>>2];if((r14|0)==0){break}r15=r14;r16=r14;r17=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+12>>2]](r15);HEAP8[r4]=r17;r17=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+16>>2]](r15);HEAP8[r5]=r17;FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+20>>2]](r1,r15);r15=r9+4|0;if(((tempValue=HEAP32[r15>>2],HEAP32[r15>>2]=tempValue+ -1,tempValue)|0)!=0){STACKTOP=r6;return}FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+8>>2]](r9);STACKTOP=r6;return}}while(0);r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53856;___cxa_throw(r12,62200,872)}}while(0);r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53856;___cxa_throw(r6,62200,872)}function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12){var r13,r14,r15,r16,r17;if(r1<<24>>24==r6<<24>>24){if((HEAP8[r2]|0)==0){r13=-1;return r13}HEAP8[r2]=0;r6=HEAP32[r5>>2];HEAP32[r5>>2]=r6+1;HEAP8[r6]=46;r6=HEAP8[r8];if((r6&1)==0){r14=(r6&255)>>>1}else{r14=HEAP32[r8+4>>2]}if((r14|0)==0){r13=0;return r13}r14=HEAP32[r10>>2];if((r14-r9|0)>=160){r13=0;return r13}r6=HEAP32[r11>>2];HEAP32[r10>>2]=r14+4;HEAP32[r14>>2]=r6;r13=0;return r13}do{if(r1<<24>>24==r7<<24>>24){r6=HEAP8[r8];if((r6&1)==0){r15=(r6&255)>>>1}else{r15=HEAP32[r8+4>>2]}if((r15|0)==0){break}if((HEAP8[r2]|0)==0){r13=-1;return r13}r6=HEAP32[r10>>2];if((r6-r9|0)>=160){r13=0;return r13}r14=HEAP32[r11>>2];HEAP32[r10>>2]=r6+4;HEAP32[r6>>2]=r14;HEAP32[r11>>2]=0;r13=0;return r13}}while(0);r15=r12+32|0;r7=r12;while(1){r14=r7+1|0;if((HEAP8[r7]|0)==r1<<24>>24){r16=r7;break}if((r14|0)==(r15|0)){r16=r15;break}else{r7=r14}}r7=r16-r12|0;if((r7|0)>31){r13=-1;return r13}r12=HEAP8[r7+64552|0];if((r7|0)==22|(r7|0)==23){HEAP8[r3]=80;r16=HEAP32[r5>>2];HEAP32[r5>>2]=r16+1;HEAP8[r16]=r12;r13=0;return r13}else if((r7|0)==25|(r7|0)==24){r16=HEAP32[r5>>2];do{if((r16|0)!=(r4|0)){if((HEAP8[r16-1|0]&95|0)==(HEAP8[r3]&127|0)){break}else{r13=-1}return r13}}while(0);HEAP32[r5>>2]=r16+1;HEAP8[r16]=r12;r13=0;return r13}else{r16=HEAP8[r3];do{if((r12&95|0)==(r16<<24>>24|0)){HEAP8[r3]=r16|-128;if((HEAP8[r2]|0)==0){break}HEAP8[r2]=0;r4=HEAP8[r8];if((r4&1)==0){r17=(r4&255)>>>1}else{r17=HEAP32[r8+4>>2]}if((r17|0)==0){break}r4=HEAP32[r10>>2];if((r4-r9|0)>=160){break}r15=HEAP32[r11>>2];HEAP32[r10>>2]=r4+4;HEAP32[r4>>2]=r15}}while(0);r10=HEAP32[r5>>2];HEAP32[r5>>2]=r10+1;HEAP8[r10]=r12;if((r7|0)>21){r13=0;return r13}HEAP32[r11>>2]=HEAP32[r11>>2]+1;r13=0;return r13}}function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r5=STACKTOP;STACKTOP=STACKTOP+32|0;r6=r5;r7=r5+16;r8=HEAP32[r2+28>>2];r2=r8+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r7>>2]=71448;HEAP32[r7+4>>2]=46;HEAP32[r7+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r7)}r7=HEAP32[71452>>2]-1|0;r2=r8+12|0;r9=r8+8|0;r10=HEAP32[r9>>2];do{if(HEAP32[r2>>2]-r10>>2>>>0>r7>>>0){r11=HEAP32[r10+(r7<<2)>>2];if((r11|0)==0){break}FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+48>>2]](r11,64552,64578,r3);if((HEAP32[71064>>2]|0)!=-1){HEAP32[r6>>2]=71064;HEAP32[r6+4>>2]=46;HEAP32[r6+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r6)}r11=HEAP32[71068>>2]-1|0;r12=HEAP32[r9>>2];do{if(HEAP32[r2>>2]-r12>>2>>>0>r11>>>0){r13=HEAP32[r12+(r11<<2)>>2];if((r13|0)==0){break}r14=r13;r15=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+16>>2]](r14);HEAP32[r4>>2]=r15;FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+20>>2]](r1,r14);r14=r8+4|0;if(((tempValue=HEAP32[r14>>2],HEAP32[r14>>2]=tempValue+ -1,tempValue)|0)!=0){STACKTOP=r5;return}FUNCTION_TABLE[HEAP32[HEAP32[r8>>2]+8>>2]](r8);STACKTOP=r5;return}}while(0);r11=___cxa_allocate_exception(4);HEAP32[r11>>2]=53856;___cxa_throw(r11,62200,872)}}while(0);r5=___cxa_allocate_exception(4);HEAP32[r5>>2]=53856;___cxa_throw(r5,62200,872)}function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r6=STACKTOP;STACKTOP=STACKTOP+32|0;r7=r6;r8=r6+16;r9=HEAP32[r2+28>>2];r2=r9+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r8>>2]=71448;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r8)}r8=HEAP32[71452>>2]-1|0;r2=r9+12|0;r10=r9+8|0;r11=HEAP32[r10>>2];do{if(HEAP32[r2>>2]-r11>>2>>>0>r8>>>0){r12=HEAP32[r11+(r8<<2)>>2];if((r12|0)==0){break}FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+48>>2]](r12,64552,64584,r3);if((HEAP32[71064>>2]|0)!=-1){HEAP32[r7>>2]=71064;HEAP32[r7+4>>2]=46;HEAP32[r7+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r7)}r12=HEAP32[71068>>2]-1|0;r13=HEAP32[r10>>2];do{if(HEAP32[r2>>2]-r13>>2>>>0>r12>>>0){r14=HEAP32[r13+(r12<<2)>>2];if((r14|0)==0){break}r15=r14;r16=r14;r17=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+12>>2]](r15);HEAP32[r4>>2]=r17;r17=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+16>>2]](r15);HEAP32[r5>>2]=r17;FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+20>>2]](r1,r15);r15=r9+4|0;if(((tempValue=HEAP32[r15>>2],HEAP32[r15>>2]=tempValue+ -1,tempValue)|0)!=0){STACKTOP=r6;return}FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+8>>2]](r9);STACKTOP=r6;return}}while(0);r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53856;___cxa_throw(r12,62200,872)}}while(0);r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53856;___cxa_throw(r6,62200,872)}function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12){var r13,r14,r15,r16,r17;if((r1|0)==(r6|0)){if((HEAP8[r2]|0)==0){r13=-1;return r13}HEAP8[r2]=0;r6=HEAP32[r5>>2];HEAP32[r5>>2]=r6+1;HEAP8[r6]=46;r6=HEAP8[r8];if((r6&1)==0){r14=(r6&255)>>>1}else{r14=HEAP32[r8+4>>2]}if((r14|0)==0){r13=0;return r13}r14=HEAP32[r10>>2];if((r14-r9|0)>=160){r13=0;return r13}r6=HEAP32[r11>>2];HEAP32[r10>>2]=r14+4;HEAP32[r14>>2]=r6;r13=0;return r13}do{if((r1|0)==(r7|0)){r6=HEAP8[r8];if((r6&1)==0){r15=(r6&255)>>>1}else{r15=HEAP32[r8+4>>2]}if((r15|0)==0){break}if((HEAP8[r2]|0)==0){r13=-1;return r13}r6=HEAP32[r10>>2];if((r6-r9|0)>=160){r13=0;return r13}r14=HEAP32[r11>>2];HEAP32[r10>>2]=r6+4;HEAP32[r6>>2]=r14;HEAP32[r11>>2]=0;r13=0;return r13}}while(0);r15=r12+128|0;r7=r12;while(1){r14=r7+4|0;if((HEAP32[r7>>2]|0)==(r1|0)){r16=r7;break}if((r14|0)==(r15|0)){r16=r15;break}else{r7=r14}}r7=r16-r12|0;r12=r7>>2;if((r7|0)>124){r13=-1;return r13}r16=HEAP8[r12+64552|0];do{if((r12|0)==25|(r12|0)==24){r15=HEAP32[r5>>2];do{if((r15|0)!=(r4|0)){if((HEAP8[r15-1|0]&95|0)==(HEAP8[r3]&127|0)){break}else{r13=-1}return r13}}while(0);HEAP32[r5>>2]=r15+1;HEAP8[r15]=r16;r13=0;return r13}else if((r12|0)==22|(r12|0)==23){HEAP8[r3]=80}else{r1=HEAP8[r3];if((r16&95|0)!=(r1<<24>>24|0)){break}HEAP8[r3]=r1|-128;if((HEAP8[r2]|0)==0){break}HEAP8[r2]=0;r1=HEAP8[r8];if((r1&1)==0){r17=(r1&255)>>>1}else{r17=HEAP32[r8+4>>2]}if((r17|0)==0){break}r1=HEAP32[r10>>2];if((r1-r9|0)>=160){break}r14=HEAP32[r11>>2];HEAP32[r10>>2]=r1+4;HEAP32[r1>>2]=r14}}while(0);r10=HEAP32[r5>>2];HEAP32[r5>>2]=r10+1;HEAP8[r10]=r16;if((r7|0)>84){r13=0;return r13}HEAP32[r11>>2]=HEAP32[r11>>2]+1;r13=0;return r13}function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(r1){return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r7=STACKTOP;STACKTOP=STACKTOP+40|0;r8=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r8>>2];r8=r7;r9=r7+16;r10=r7+24;if((HEAP32[r4+4>>2]&1|0)==0){r11=HEAP32[HEAP32[r2>>2]+24>>2];HEAP32[r9>>2]=HEAP32[r3>>2];FUNCTION_TABLE[r11](r1,r2,r9,r4,r5,r6&1);STACKTOP=r7;return}r5=HEAP32[r4+28>>2];r4=r5+4|0;tempValue=HEAP32[r4>>2],HEAP32[r4>>2]=tempValue+1,tempValue;if((HEAP32[71072>>2]|0)!=-1){HEAP32[r8>>2]=71072;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r8)}r8=HEAP32[71076>>2]-1|0;r4=HEAP32[r5+8>>2];do{if(HEAP32[r5+12>>2]-r4>>2>>>0>r8>>>0){r9=HEAP32[r4+(r8<<2)>>2];if((r9|0)==0){break}r2=r9;r11=r5+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5)}r11=HEAP32[r9>>2];if(r6){FUNCTION_TABLE[HEAP32[r11+24>>2]](r10,r2)}else{FUNCTION_TABLE[HEAP32[r11+28>>2]](r10,r2)}r2=r10;r11=HEAP8[r2];if((r11&1)==0){r9=r10+1|0;r12=r9;r13=r9;r14=r10+8|0}else{r9=r10+8|0;r12=HEAP32[r9>>2];r13=r10+1|0;r14=r9}r9=r3|0;r15=r10+4|0;r16=r12;r17=r11;while(1){r18=(r17&1)==0;if(r18){r19=(r17&255)>>>1;r20=r13}else{r19=HEAP32[r15>>2];r20=HEAP32[r14>>2]}if((r16|0)==(r20+r19|0)){break}r11=HEAP8[r16];r21=HEAP32[r9>>2];do{if((r21|0)!=0){r22=r21+24|0;r23=HEAP32[r22>>2];if((r23|0)!=(HEAP32[r21+28>>2]|0)){HEAP32[r22>>2]=r23+1;HEAP8[r23]=r11;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+52>>2]](r21,r11&255)|0)!=-1){break}HEAP32[r9>>2]=0}}while(0);r16=r16+1|0;r17=HEAP8[r2]}HEAP32[r1>>2]=HEAP32[r9>>2];if(r18){STACKTOP=r7;return}r2=HEAP32[r10+8>>2];if((r2|0)==0){STACKTOP=r7;return}_free(r2);STACKTOP=r7;return}}while(0);r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53856;___cxa_throw(r7,62200,872)}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+72|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+24;r12=r8+48;r13=r8+56;r14=r8+64;r15=r9|0;HEAP8[r15]=HEAP8[51912];HEAP8[r15+1|0]=HEAP8[51913];HEAP8[r15+2|0]=HEAP8[51914];HEAP8[r15+3|0]=HEAP8[51915];HEAP8[r15+4|0]=HEAP8[51916];HEAP8[r15+5|0]=HEAP8[51917];r16=r9+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r16}else{HEAP8[r16]=43;r19=r9+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;r19=r20+1|0;r20=r18&74;do{if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else if((r20|0)==64){HEAP8[r19]=111}else{HEAP8[r19]=100}}while(0);r19=r10|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r20=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r20}}while(0);r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,12,HEAP32[69912>>2],r15,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r6,r7));STACKTOP=r7;r7=r10+r20|0;r6=HEAP32[r17>>2]&176;do{if((r6|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r10+1|0;break}if(!((r20|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r10+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r10+2|0}else if((r6|0)==32){r21=r7}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r11|0;r11=r14|0;r6=HEAP32[r4+28>>2];HEAP32[r11>>2]=r6;r10=r6+4|0;tempValue=HEAP32[r10>>2],HEAP32[r10>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r19,r21,r7,r2,r12,r13,r14);r14=HEAP32[r11>>2];r11=r14+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);STACKTOP=r8;return}FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+8>>2]](r14|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);STACKTOP=r8;return}function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r1,r2,r3,r4,r5){var r6,r7,r8;r6=STACKTOP;STACKTOP=STACKTOP+16|0;r7=r6;r8=r7;HEAP32[r8>>2]=r5;HEAP32[r8+4>>2]=0;r8=_uselocale(r3);r3=_vsnprintf(r1,r2,r4,r7|0);if((r8|0)==0){STACKTOP=r6;return r3}_uselocale(r8);STACKTOP=r6;return r3}function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34;r8=STACKTOP;STACKTOP=STACKTOP+48|0;r9=r8;r10=r8+16;r11=r8+32;r12=r7|0;r7=HEAP32[r12>>2];if((HEAP32[71456>>2]|0)!=-1){HEAP32[r10>>2]=71456;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r10)}r10=HEAP32[71460>>2]-1|0;r13=HEAP32[r7+8>>2];if(HEAP32[r7+12>>2]-r13>>2>>>0<=r10>>>0){r14=___cxa_allocate_exception(4);r15=r14;HEAP32[r15>>2]=53856;___cxa_throw(r14,62200,872)}r7=HEAP32[r13+(r10<<2)>>2];if((r7|0)==0){r14=___cxa_allocate_exception(4);r15=r14;HEAP32[r15>>2]=53856;___cxa_throw(r14,62200,872)}r14=r7;r15=HEAP32[r12>>2];if((HEAP32[71072>>2]|0)!=-1){HEAP32[r9>>2]=71072;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r9)}r9=HEAP32[71076>>2]-1|0;r12=HEAP32[r15+8>>2];if(HEAP32[r15+12>>2]-r12>>2>>>0<=r9>>>0){r16=___cxa_allocate_exception(4);r17=r16;HEAP32[r17>>2]=53856;___cxa_throw(r16,62200,872)}r15=HEAP32[r12+(r9<<2)>>2];if((r15|0)==0){r16=___cxa_allocate_exception(4);r17=r16;HEAP32[r17>>2]=53856;___cxa_throw(r16,62200,872)}r16=r15;FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+20>>2]](r11,r16);r17=r11;r9=HEAP8[r17];if((r9&1)==0){r18=(r9&255)>>>1}else{r18=HEAP32[r11+4>>2]}do{if((r18|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+32>>2]](r14,r1,r3,r4);HEAP32[r6>>2]=r4+(r3-r1)}else{HEAP32[r6>>2]=r4;r9=HEAP8[r1];if(r9<<24>>24==45|r9<<24>>24==43){r12=FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+28>>2]](r14,r9);r9=HEAP32[r6>>2];HEAP32[r6>>2]=r9+1;HEAP8[r9]=r12;r19=r1+1|0}else{r19=r1}do{if((r3-r19|0)>1){if((HEAP8[r19]|0)!=48){r20=r19;break}r12=r19+1|0;r9=HEAP8[r12];if(!(r9<<24>>24==120|r9<<24>>24==88)){r20=r19;break}r9=r7;r10=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+28>>2]](r14,48);r13=HEAP32[r6>>2];HEAP32[r6>>2]=r13+1;HEAP8[r13]=r10;r10=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+28>>2]](r14,HEAP8[r12]);r12=HEAP32[r6>>2];HEAP32[r6>>2]=r12+1;HEAP8[r12]=r10;r20=r19+2|0}else{r20=r19}}while(0);do{if((r20|0)!=(r3|0)){r10=r3-1|0;if(r10>>>0>r20>>>0){r21=r20;r22=r10}else{break}while(1){r10=HEAP8[r21];HEAP8[r21]=HEAP8[r22];HEAP8[r22]=r10;r10=r21+1|0;r12=r22-1|0;if(r10>>>0<r12>>>0){r21=r10;r22=r12}else{break}}}}while(0);r12=FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+16>>2]](r16);if(r20>>>0<r3>>>0){r10=r11+1|0;r9=r7;r13=r11+4|0;r23=r11+8|0;r24=0;r25=0;r26=r20;while(1){r27=HEAP8[((HEAP8[r17]&1)==0?r10:HEAP32[r23>>2])+r25|0];if(r27<<24>>24!=0&(r24|0)==(r27<<24>>24|0)){r27=HEAP32[r6>>2];HEAP32[r6>>2]=r27+1;HEAP8[r27]=r12;r27=HEAP8[r17];if((r27&1)==0){r28=(r27&255)>>>1}else{r28=HEAP32[r13>>2]}r29=(r25>>>0<(r28-1|0)>>>0)+r25|0;r30=0}else{r29=r25;r30=r24}r27=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+28>>2]](r14,HEAP8[r26]);r31=HEAP32[r6>>2];HEAP32[r6>>2]=r31+1;HEAP8[r31]=r27;r27=r26+1|0;if(r27>>>0<r3>>>0){r24=r30+1|0;r25=r29;r26=r27}else{break}}}r26=r4+(r20-r1)|0;r25=HEAP32[r6>>2];if((r26|0)==(r25|0)){break}r24=r25-1|0;if(r24>>>0>r26>>>0){r32=r26;r33=r24}else{break}while(1){r24=HEAP8[r32];HEAP8[r32]=HEAP8[r33];HEAP8[r33]=r24;r24=r32+1|0;r26=r33-1|0;if(r24>>>0<r26>>>0){r32=r24;r33=r26}else{break}}}}while(0);if((r2|0)==(r3|0)){r34=HEAP32[r6>>2]}else{r34=r4+(r2-r1)|0}HEAP32[r5>>2]=r34;if((HEAP8[r17]&1)==0){STACKTOP=r8;return}r17=HEAP32[r11+8>>2];if((r17|0)==0){STACKTOP=r8;return}_free(r17);STACKTOP=r8;return}function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+16|0;r10=r9;if((r2|0)==0){HEAP32[r1>>2]=0;STACKTOP=r9;return}r11=r5;r5=r3;r12=r11-r5|0;r13=r6+12|0;r6=HEAP32[r13>>2];r14=(r6|0)>(r12|0)?r6-r12|0:0;r12=r4;r6=r12-r5|0;do{if((r6|0)>0){if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+48>>2]](r2,r3,r6)|0)==(r6|0)){break}HEAP32[r1>>2]=0;STACKTOP=r9;return}}while(0);do{if((r14|0)>0){do{if(r14>>>0<11){r6=r10;HEAP8[r6]=r14<<1;r15=r10+1|0;r16=r6}else{r6=r14+16&-16;r3=(r6|0)==0?1:r6;while(1){r17=_malloc(r3);if((r17|0)!=0){r8=20;break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){break}FUNCTION_TABLE[r5]()}if(r8==20){HEAP32[r10+8>>2]=r17;HEAP32[r10>>2]=r6|1;HEAP32[r10+4>>2]=r14;r15=r17;r16=r10;break}r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}}while(0);_memset(r15,r7,r14)|0;HEAP8[r15+r14|0]=0;if((HEAP8[r16]&1)==0){r18=r10+1|0}else{r18=HEAP32[r10+8>>2]}if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+48>>2]](r2,r18,r14)|0)==(r14|0)){if((HEAP8[r16]&1)==0){break}r3=HEAP32[r10+8>>2];if((r3|0)==0){break}_free(r3);break}HEAP32[r1>>2]=0;if((HEAP8[r16]&1)==0){STACKTOP=r9;return}r3=HEAP32[r10+8>>2];if((r3|0)==0){STACKTOP=r9;return}_free(r3);STACKTOP=r9;return}}while(0);r10=r11-r12|0;do{if((r10|0)>0){if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+48>>2]](r2,r4,r10)|0)==(r10|0)){break}HEAP32[r1>>2]=0;STACKTOP=r9;return}}while(0);HEAP32[r13>>2]=0;HEAP32[r1>>2]=r2;STACKTOP=r9;return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+104|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r9;r11=r9+8;r12=r9+32;r13=r9+80;r14=r9+88;r15=r9+96;HEAP32[r10>>2]=37;HEAP32[r10+4>>2]=0;r16=r10;r10=r16+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r10}else{HEAP8[r10]=43;r19=r16+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;HEAP8[r20+1|0]=108;r19=r20+2|0;r20=r18&74;do{if((r20|0)==64){HEAP8[r19]=111}else if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else{HEAP8[r19]=100}}while(0);r19=r11|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,22,HEAP32[69912>>2],r16,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r7,r8));STACKTOP=r8;r8=r11+r18|0;r7=HEAP32[r17>>2]&176;do{if((r7|0)==32){r21=r8}else if((r7|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r11+1|0;break}if(!((r18|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r11+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r11+2|0}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r12|0;r12=r15|0;r11=HEAP32[r4+28>>2];HEAP32[r12>>2]=r11;r18=r11+4|0;tempValue=HEAP32[r18>>2],HEAP32[r18>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r19,r21,r8,r2,r13,r14,r15);r15=HEAP32[r12>>2];r12=r15+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=41;r27=0;STACKTOP=r9;return}FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=41;r27=0;STACKTOP=r9;return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+72|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+24;r12=r8+48;r13=r8+56;r14=r8+64;r15=r9|0;HEAP8[r15]=HEAP8[51912];HEAP8[r15+1|0]=HEAP8[51913];HEAP8[r15+2|0]=HEAP8[51914];HEAP8[r15+3|0]=HEAP8[51915];HEAP8[r15+4|0]=HEAP8[51916];HEAP8[r15+5|0]=HEAP8[51917];r16=r9+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r16}else{HEAP8[r16]=43;r19=r9+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;r19=r20+1|0;r20=r18&74;do{if((r20|0)==64){HEAP8[r19]=111}else if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else{HEAP8[r19]=117}}while(0);r19=r10|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,12,HEAP32[69912>>2],r15,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r6,r7));STACKTOP=r7;r7=r10+r18|0;r6=HEAP32[r17>>2]&176;do{if((r6|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r10+1|0;break}if(!((r18|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r10+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r10+2|0}else if((r6|0)==32){r21=r7}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r11|0;r11=r14|0;r6=HEAP32[r4+28>>2];HEAP32[r11>>2]=r6;r10=r6+4|0;tempValue=HEAP32[r10>>2],HEAP32[r10>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r19,r21,r7,r2,r12,r13,r14);r14=HEAP32[r11>>2];r11=r14+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);STACKTOP=r8;return}FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+8>>2]](r14|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);STACKTOP=r8;return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+104|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r9;r11=r9+8;r12=r9+32;r13=r9+80;r14=r9+88;r15=r9+96;HEAP32[r10>>2]=37;HEAP32[r10+4>>2]=0;r16=r10;r10=r16+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r10}else{HEAP8[r10]=43;r19=r16+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;HEAP8[r20+1|0]=108;r19=r20+2|0;r20=r18&74;do{if((r20|0)==64){HEAP8[r19]=111}else if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else{HEAP8[r19]=117}}while(0);r19=r11|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,23,HEAP32[69912>>2],r16,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r7,r8));STACKTOP=r8;r8=r11+r18|0;r7=HEAP32[r17>>2]&176;do{if((r7|0)==32){r21=r8}else if((r7|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r11+1|0;break}if(!((r18|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r11+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r11+2|0}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r12|0;r12=r15|0;r11=HEAP32[r4+28>>2];HEAP32[r12>>2]=r11;r18=r11+4|0;tempValue=HEAP32[r18>>2],HEAP32[r18>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r19,r21,r8,r2,r13,r14,r15);r15=HEAP32[r12>>2];r12=r15+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=43;r27=0;STACKTOP=r9;return}FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=43;r27=0;STACKTOP=r9;return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+144|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+40;r12=r8+48;r13=r8+112;r14=r8+120;r15=r8+128;r16=r8+136;HEAP32[r9>>2]=37;HEAP32[r9+4>>2]=0;r17=r9;r9=r17+1|0;r18=r4+4|0;r19=HEAP32[r18>>2];if((r19&2048|0)==0){r20=r9}else{HEAP8[r9]=43;r20=r17+2|0}if((r19&1024|0)==0){r21=r20}else{HEAP8[r20]=35;r21=r20+1|0}r20=r19&260;r9=r19>>>14;do{if((r20|0)==260){if((r9&1|0)==0){HEAP8[r21]=97;r22=0;break}else{HEAP8[r21]=65;r22=0;break}}else{HEAP8[r21]=46;r19=r21+2|0;HEAP8[r21+1|0]=42;if((r20|0)==256){if((r9&1|0)==0){HEAP8[r19]=101;r22=1;break}else{HEAP8[r19]=69;r22=1;break}}else if((r20|0)==4){if((r9&1|0)==0){HEAP8[r19]=102;r22=1;break}else{HEAP8[r19]=70;r22=1;break}}else{if((r9&1|0)==0){HEAP8[r19]=103;r22=1;break}else{HEAP8[r19]=71;r22=1;break}}}}while(0);r9=r10|0;HEAP32[r11>>2]=r9;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=HEAP32[69912>>2];if(r22){r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r23=r20}else{r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r7>>3]=r6,r7));STACKTOP=r7;r23=r20}do{if((r23|0)>29){r20=(HEAP8[72016]|0)==0;if(r22){do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r24=r10}else{do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r20=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r24=r20}r20=HEAP32[r11>>2];if((r20|0)!=0){r25=r24;r26=r20;r27=r20;break}r20=___cxa_allocate_exception(4);HEAP32[r20>>2]=53824;___cxa_throw(r20,62184,110)}else{r25=r23;r26=0;r27=HEAP32[r11>>2]}}while(0);r11=r27+r25|0;r23=HEAP32[r18>>2]&176;do{if((r23|0)==16){r18=HEAP8[r27];if(r18<<24>>24==45|r18<<24>>24==43){r28=r27+1|0;break}if(!((r25|0)>1&r18<<24>>24==48)){r2=53;break}r18=HEAP8[r27+1|0];if(!(r18<<24>>24==120|r18<<24>>24==88)){r2=53;break}r28=r27+2|0}else if((r23|0)==32){r28=r11}else{r2=53}}while(0);if(r2==53){r28=r27}do{if((r27|0)==(r9|0)){r29=r12|0;r30=0;r31=r9}else{r2=_malloc(r25<<1);if((r2|0)!=0){r29=r2;r30=r2;r31=r27;break}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}}while(0);r27=r15|0;r25=HEAP32[r4+28>>2];HEAP32[r27>>2]=r25;r9=r25+4|0;tempValue=HEAP32[r9>>2],HEAP32[r9>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r31,r28,r11,r29,r13,r14,r15);r15=HEAP32[r27>>2];r27=r15+4|0;if(((tempValue=HEAP32[r27>>2],HEAP32[r27>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0)}r15=r3|0;__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r16,HEAP32[r15>>2],r29,HEAP32[r13>>2],HEAP32[r14>>2],r4,r5);r5=HEAP32[r16>>2];HEAP32[r15>>2]=r5;HEAP32[r1>>2]=r5;if((r30|0)!=0){_free(r30)}if((r26|0)==0){STACKTOP=r8;return}_free(r26);STACKTOP=r8;return}function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r1,r2,r3,r4){var r5,r6,r7;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=r6;HEAP32[r7>>2]=r4;HEAP32[r7+4>>2]=0;r7=_uselocale(r2);r2=_vasprintf(r1,r3,r6|0);if((r7|0)==0){STACKTOP=r5;return r2}_uselocale(r7);STACKTOP=r5;return r2}function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+48|0;r10=r9;r11=r9+16;r12=r9+32;r13=r7|0;r7=HEAP32[r13>>2];if((HEAP32[71456>>2]|0)!=-1){HEAP32[r11>>2]=71456;HEAP32[r11+4>>2]=46;HEAP32[r11+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r11)}r11=HEAP32[71460>>2]-1|0;r14=HEAP32[r7+8>>2];if(HEAP32[r7+12>>2]-r14>>2>>>0<=r11>>>0){r15=___cxa_allocate_exception(4);r16=r15;HEAP32[r16>>2]=53856;___cxa_throw(r15,62200,872)}r7=HEAP32[r14+(r11<<2)>>2];if((r7|0)==0){r15=___cxa_allocate_exception(4);r16=r15;HEAP32[r16>>2]=53856;___cxa_throw(r15,62200,872)}r15=r7;r16=HEAP32[r13>>2];if((HEAP32[71072>>2]|0)!=-1){HEAP32[r10>>2]=71072;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r10)}r10=HEAP32[71076>>2]-1|0;r13=HEAP32[r16+8>>2];if(HEAP32[r16+12>>2]-r13>>2>>>0<=r10>>>0){r17=___cxa_allocate_exception(4);r18=r17;HEAP32[r18>>2]=53856;___cxa_throw(r17,62200,872)}r16=HEAP32[r13+(r10<<2)>>2];if((r16|0)==0){r17=___cxa_allocate_exception(4);r18=r17;HEAP32[r18>>2]=53856;___cxa_throw(r17,62200,872)}r17=r16;FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+20>>2]](r12,r17);HEAP32[r6>>2]=r4;r18=HEAP8[r1];if(r18<<24>>24==45|r18<<24>>24==43){r10=FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+28>>2]](r15,r18);r18=HEAP32[r6>>2];HEAP32[r6>>2]=r18+1;HEAP8[r18]=r10;r19=r1+1|0}else{r19=r1}r10=r3;L23:do{if((r10-r19|0)>1){if((HEAP8[r19]|0)!=48){r8=24;break}r18=r19+1|0;r13=HEAP8[r18];if(!(r13<<24>>24==120|r13<<24>>24==88)){r8=24;break}r13=r7;r11=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+28>>2]](r15,48);r14=HEAP32[r6>>2];HEAP32[r6>>2]=r14+1;HEAP8[r14]=r11;r11=r19+2|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+28>>2]](r15,HEAP8[r18]);r18=HEAP32[r6>>2];HEAP32[r6>>2]=r18+1;HEAP8[r18]=r14;if(r11>>>0<r3>>>0){r20=r11}else{r21=r11;r22=r11;break}while(1){r14=HEAP8[r20];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=r20+1|0;if((_isxdigit_l(r14<<24>>24,HEAP32[69912>>2])|0)==0){r21=r11;r22=r20;break L23}if(r18>>>0<r3>>>0){r20=r18}else{r21=r11;r22=r18;break}}}else{r8=24}}while(0);L38:do{if(r8==24){if(r19>>>0<r3>>>0){r23=r19}else{r21=r19;r22=r19;break}while(1){r20=HEAP8[r23];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r11=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r11}}while(0);r14=r23+1|0;if((_isdigit_l(r20<<24>>24,HEAP32[69912>>2])|0)==0){r21=r19;r22=r23;break L38}if(r14>>>0<r3>>>0){r23=r14}else{r21=r19;r22=r14;break}}}}while(0);r19=r12;r23=HEAP8[r19];if((r23&1)==0){r24=(r23&255)>>>1}else{r24=HEAP32[r12+4>>2]}do{if((r24|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+32>>2]](r15,r21,r22,HEAP32[r6>>2]);HEAP32[r6>>2]=HEAP32[r6>>2]+(r22-r21)}else{do{if((r21|0)!=(r22|0)){r23=r22-1|0;if(r23>>>0>r21>>>0){r25=r21;r26=r23}else{break}while(1){r23=HEAP8[r25];HEAP8[r25]=HEAP8[r26];HEAP8[r26]=r23;r23=r25+1|0;r8=r26-1|0;if(r23>>>0<r8>>>0){r25=r23;r26=r8}else{break}}}}while(0);r20=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+16>>2]](r17);if(r21>>>0<r22>>>0){r8=r12+1|0;r23=r12+4|0;r14=r12+8|0;r11=r7;r18=0;r13=0;r27=r21;while(1){r28=HEAP8[((HEAP8[r19]&1)==0?r8:HEAP32[r14>>2])+r13|0];if(r28<<24>>24>0&(r18|0)==(r28<<24>>24|0)){r28=HEAP32[r6>>2];HEAP32[r6>>2]=r28+1;HEAP8[r28]=r20;r28=HEAP8[r19];if((r28&1)==0){r29=(r28&255)>>>1}else{r29=HEAP32[r23>>2]}r30=(r13>>>0<(r29-1|0)>>>0)+r13|0;r31=0}else{r30=r13;r31=r18}r28=FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+28>>2]](r15,HEAP8[r27]);r32=HEAP32[r6>>2];HEAP32[r6>>2]=r32+1;HEAP8[r32]=r28;r28=r27+1|0;if(r28>>>0<r22>>>0){r18=r31+1|0;r13=r30;r27=r28}else{break}}}r27=r4+(r21-r1)|0;r13=HEAP32[r6>>2];if((r27|0)==(r13|0)){break}r18=r13-1|0;if(r18>>>0>r27>>>0){r33=r27;r34=r18}else{break}while(1){r18=HEAP8[r33];HEAP8[r33]=HEAP8[r34];HEAP8[r34]=r18;r18=r33+1|0;r27=r34-1|0;if(r18>>>0<r27>>>0){r33=r18;r34=r27}else{break}}}}while(0);L81:do{if(r22>>>0<r3>>>0){r34=r7;r33=r22;while(1){r21=HEAP8[r33];if(r21<<24>>24==46){break}r30=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+28>>2]](r15,r21);r21=HEAP32[r6>>2];HEAP32[r6>>2]=r21+1;HEAP8[r21]=r30;r30=r33+1|0;if(r30>>>0<r3>>>0){r33=r30}else{r35=r30;break L81}}r34=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+12>>2]](r17);r30=HEAP32[r6>>2];HEAP32[r6>>2]=r30+1;HEAP8[r30]=r34;r35=r33+1|0}else{r35=r22}}while(0);FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+32>>2]](r15,r35,r3,HEAP32[r6>>2]);r15=HEAP32[r6>>2]+(r10-r35)|0;HEAP32[r6>>2]=r15;if((r2|0)==(r3|0)){r36=r15}else{r36=r4+(r2-r1)|0}HEAP32[r5>>2]=r36;if((HEAP8[r19]&1)==0){STACKTOP=r9;return}r19=HEAP32[r12+8>>2];if((r19|0)==0){STACKTOP=r9;return}_free(r19);STACKTOP=r9;return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+144|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+40;r12=r8+48;r13=r8+112;r14=r8+120;r15=r8+128;r16=r8+136;HEAP32[r9>>2]=37;HEAP32[r9+4>>2]=0;r17=r9;r9=r17+1|0;r18=r4+4|0;r19=HEAP32[r18>>2];if((r19&2048|0)==0){r20=r9}else{HEAP8[r9]=43;r20=r17+2|0}if((r19&1024|0)==0){r21=r20}else{HEAP8[r20]=35;r21=r20+1|0}r20=r19&260;r9=r19>>>14;do{if((r20|0)==260){HEAP8[r21]=76;r19=r21+1|0;if((r9&1|0)==0){HEAP8[r19]=97;r22=0;break}else{HEAP8[r19]=65;r22=0;break}}else{HEAP8[r21]=46;HEAP8[r21+1|0]=42;HEAP8[r21+2|0]=76;r19=r21+3|0;if((r20|0)==256){if((r9&1|0)==0){HEAP8[r19]=101;r22=1;break}else{HEAP8[r19]=69;r22=1;break}}else if((r20|0)==4){if((r9&1|0)==0){HEAP8[r19]=102;r22=1;break}else{HEAP8[r19]=70;r22=1;break}}else{if((r9&1|0)==0){HEAP8[r19]=103;r22=1;break}else{HEAP8[r19]=71;r22=1;break}}}}while(0);r9=r10|0;HEAP32[r11>>2]=r9;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=HEAP32[69912>>2];if(r22){r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r23=r20}else{r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r7>>3]=r6,r7));STACKTOP=r7;r23=r20}do{if((r23|0)>29){r20=(HEAP8[72016]|0)==0;if(r22){do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r24=r10}else{do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r20=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r7>>3]=r6,r7));STACKTOP=r7;r24=r20}r20=HEAP32[r11>>2];if((r20|0)!=0){r25=r24;r26=r20;r27=r20;break}r20=___cxa_allocate_exception(4);HEAP32[r20>>2]=53824;___cxa_throw(r20,62184,110)}else{r25=r23;r26=0;r27=HEAP32[r11>>2]}}while(0);r11=r27+r25|0;r23=HEAP32[r18>>2]&176;do{if((r23|0)==16){r18=HEAP8[r27];if(r18<<24>>24==45|r18<<24>>24==43){r28=r27+1|0;break}if(!((r25|0)>1&r18<<24>>24==48)){r2=53;break}r18=HEAP8[r27+1|0];if(!(r18<<24>>24==120|r18<<24>>24==88)){r2=53;break}r28=r27+2|0}else if((r23|0)==32){r28=r11}else{r2=53}}while(0);if(r2==53){r28=r27}do{if((r27|0)==(r9|0)){r29=r12|0;r30=0;r31=r9}else{r2=_malloc(r25<<1);if((r2|0)!=0){r29=r2;r30=r2;r31=r27;break}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}}while(0);r27=r15|0;r25=HEAP32[r4+28>>2];HEAP32[r27>>2]=r25;r9=r25+4|0;tempValue=HEAP32[r9>>2],HEAP32[r9>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(r31,r28,r11,r29,r13,r14,r15);r15=HEAP32[r27>>2];r27=r15+4|0;if(((tempValue=HEAP32[r27>>2],HEAP32[r27>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0)}r15=r3|0;__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r16,HEAP32[r15>>2],r29,HEAP32[r13>>2],HEAP32[r14>>2],r4,r5);r5=HEAP32[r16>>2];HEAP32[r15>>2]=r5;HEAP32[r1>>2]=r5;if((r30|0)!=0){_free(r30)}if((r26|0)==0){STACKTOP=r8;return}_free(r26);STACKTOP=r8;return}function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+88|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+24;r11=r8+48;r12=r8+16|0;HEAP8[r12]=HEAP8[51920];HEAP8[r12+1|0]=HEAP8[51921];HEAP8[r12+2|0]=HEAP8[51922];HEAP8[r12+3|0]=HEAP8[51923];HEAP8[r12+4|0]=HEAP8[51924];HEAP8[r12+5|0]=HEAP8[51925];r13=r10|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r14=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r14}}while(0);r14=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r13,20,HEAP32[69912>>2],r12,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r6,r7));STACKTOP=r7;r7=r10+r14|0;r6=HEAP32[r4+4>>2]&176;do{if((r6|0)==16){r12=HEAP8[r13];if(r12<<24>>24==45|r12<<24>>24==43){r15=r10+1|0;break}if(!((r14|0)>1&r12<<24>>24==48)){r2=12;break}r12=HEAP8[r10+1|0];if(!(r12<<24>>24==120|r12<<24>>24==88)){r2=12;break}r15=r10+2|0}else if((r6|0)==32){r15=r7}else{r2=12}}while(0);if(r2==12){r15=r13}r2=r11|0;r6=HEAP32[r4+28>>2];r12=r6+4|0;tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r9>>2]=71456;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r9)}r9=HEAP32[71460>>2]-1|0;r12=HEAP32[r6+8>>2];do{if(HEAP32[r6+12>>2]-r12>>2>>>0>r9>>>0){r16=HEAP32[r12+(r9<<2)>>2];if((r16|0)==0){break}r17=r6+4|0;if(((tempValue=HEAP32[r17>>2],HEAP32[r17>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+8>>2]](r6)}FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+32>>2]](r16,r13,r7,r2);r16=r11+r14|0;if((r15|0)==(r7|0)){r18=r16;r19=r3|0;r20=HEAP32[r19>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r20,r2,r18,r16,r4,r5);r21=37;r22=0;STACKTOP=r8;return}r18=r11+(r15-r10)|0;r19=r3|0;r20=HEAP32[r19>>2];__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r20,r2,r18,r16,r4,r5);r21=37;r22=0;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(r1){return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r7=STACKTOP;STACKTOP=STACKTOP+40|0;r8=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r8>>2];r8=r7;r9=r7+16;r10=r7+24;if((HEAP32[r4+4>>2]&1|0)==0){r11=HEAP32[HEAP32[r2>>2]+24>>2];HEAP32[r9>>2]=HEAP32[r3>>2];FUNCTION_TABLE[r11](r1,r2,r9,r4,r5,r6&1);STACKTOP=r7;return}r5=HEAP32[r4+28>>2];r4=r5+4|0;tempValue=HEAP32[r4>>2],HEAP32[r4>>2]=tempValue+1,tempValue;if((HEAP32[71064>>2]|0)!=-1){HEAP32[r8>>2]=71064;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r8)}r8=HEAP32[71068>>2]-1|0;r4=HEAP32[r5+8>>2];do{if(HEAP32[r5+12>>2]-r4>>2>>>0>r8>>>0){r9=HEAP32[r4+(r8<<2)>>2];if((r9|0)==0){break}r2=r9;r11=r5+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5)}r11=HEAP32[r9>>2];if(r6){FUNCTION_TABLE[HEAP32[r11+24>>2]](r10,r2)}else{FUNCTION_TABLE[HEAP32[r11+28>>2]](r10,r2)}r2=r10;r11=HEAP8[r2];if((r11&1)==0){r9=r10+4|0;r12=r9;r13=r9;r14=r10+8|0}else{r9=r10+8|0;r12=HEAP32[r9>>2];r13=r10+4|0;r14=r9}r9=r3|0;r15=r12;r16=r11;while(1){r17=(r16&1)==0;if(r17){r18=(r16&255)>>>1;r19=r13}else{r18=HEAP32[r13>>2];r19=HEAP32[r14>>2]}if((r15|0)==(r19+(r18<<2)|0)){break}r11=HEAP32[r15>>2];r20=HEAP32[r9>>2];do{if((r20|0)!=0){r21=r20+24|0;r22=HEAP32[r21>>2];if((r22|0)==(HEAP32[r20+28>>2]|0)){r23=FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+52>>2]](r20,r11)}else{HEAP32[r21>>2]=r22+4;HEAP32[r22>>2]=r11;r23=r11}if((r23|0)!=-1){break}HEAP32[r9>>2]=0}}while(0);r15=r15+4|0;r16=HEAP8[r2]}HEAP32[r1>>2]=HEAP32[r9>>2];if(r17){STACKTOP=r7;return}r2=HEAP32[r10+8>>2];if((r2|0)==0){STACKTOP=r7;return}_free(r2);STACKTOP=r7;return}}while(0);r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53856;___cxa_throw(r7,62200,872)}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+136|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+24;r12=r8+112;r13=r8+120;r14=r8+128;r15=r9|0;HEAP8[r15]=HEAP8[51912];HEAP8[r15+1|0]=HEAP8[51913];HEAP8[r15+2|0]=HEAP8[51914];HEAP8[r15+3|0]=HEAP8[51915];HEAP8[r15+4|0]=HEAP8[51916];HEAP8[r15+5|0]=HEAP8[51917];r16=r9+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r16}else{HEAP8[r16]=43;r19=r9+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;r19=r20+1|0;r20=r18&74;do{if((r20|0)==64){HEAP8[r19]=111}else if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else{HEAP8[r19]=100}}while(0);r19=r10|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,12,HEAP32[69912>>2],r15,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r6,r7));STACKTOP=r7;r7=r10+r18|0;r6=HEAP32[r17>>2]&176;do{if((r6|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r10+1|0;break}if(!((r18|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r10+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r10+2|0}else if((r6|0)==32){r21=r7}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r11|0;r11=r14|0;r6=HEAP32[r4+28>>2];HEAP32[r11>>2]=r6;r10=r6+4|0;tempValue=HEAP32[r10>>2],HEAP32[r10>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(r19,r21,r7,r2,r12,r13,r14);r14=HEAP32[r11>>2];r11=r14+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=84;r27=0;STACKTOP=r8;return}FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+8>>2]](r14|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=84;r27=0;STACKTOP=r8;return}function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37;r8=STACKTOP;STACKTOP=STACKTOP+48|0;r9=r8;r10=r8+16;r11=r8+32;r12=r7|0;r7=HEAP32[r12>>2];if((HEAP32[71448>>2]|0)!=-1){HEAP32[r10>>2]=71448;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r10)}r10=HEAP32[71452>>2]-1|0;r13=HEAP32[r7+8>>2];if(HEAP32[r7+12>>2]-r13>>2>>>0<=r10>>>0){r14=___cxa_allocate_exception(4);r15=r14;HEAP32[r15>>2]=53856;___cxa_throw(r14,62200,872)}r7=HEAP32[r13+(r10<<2)>>2];if((r7|0)==0){r14=___cxa_allocate_exception(4);r15=r14;HEAP32[r15>>2]=53856;___cxa_throw(r14,62200,872)}r14=r7;r15=HEAP32[r12>>2];if((HEAP32[71064>>2]|0)!=-1){HEAP32[r9>>2]=71064;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r9)}r9=HEAP32[71068>>2]-1|0;r12=HEAP32[r15+8>>2];if(HEAP32[r15+12>>2]-r12>>2>>>0<=r9>>>0){r16=___cxa_allocate_exception(4);r17=r16;HEAP32[r17>>2]=53856;___cxa_throw(r16,62200,872)}r15=HEAP32[r12+(r9<<2)>>2];if((r15|0)==0){r16=___cxa_allocate_exception(4);r17=r16;HEAP32[r17>>2]=53856;___cxa_throw(r16,62200,872)}r16=r15;FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+20>>2]](r11,r16);r17=r11;r9=HEAP8[r17];if((r9&1)==0){r18=(r9&255)>>>1}else{r18=HEAP32[r11+4>>2]}do{if((r18|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+48>>2]](r14,r1,r3,r4);r9=r4+(r3-r1<<2)|0;HEAP32[r6>>2]=r9;r19=r9}else{HEAP32[r6>>2]=r4;r9=HEAP8[r1];if(r9<<24>>24==45|r9<<24>>24==43){r12=FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+44>>2]](r14,r9);r9=HEAP32[r6>>2];HEAP32[r6>>2]=r9+4;HEAP32[r9>>2]=r12;r20=r1+1|0}else{r20=r1}do{if((r3-r20|0)>1){if((HEAP8[r20]|0)!=48){r21=r20;break}r12=r20+1|0;r9=HEAP8[r12];if(!(r9<<24>>24==120|r9<<24>>24==88)){r21=r20;break}r9=r7;r10=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+44>>2]](r14,48);r13=HEAP32[r6>>2];HEAP32[r6>>2]=r13+4;HEAP32[r13>>2]=r10;r10=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+44>>2]](r14,HEAP8[r12]);r12=HEAP32[r6>>2];HEAP32[r6>>2]=r12+4;HEAP32[r12>>2]=r10;r21=r20+2|0}else{r21=r20}}while(0);do{if((r21|0)!=(r3|0)){r10=r3-1|0;if(r10>>>0>r21>>>0){r22=r21;r23=r10}else{break}while(1){r10=HEAP8[r22];HEAP8[r22]=HEAP8[r23];HEAP8[r23]=r10;r10=r22+1|0;r12=r23-1|0;if(r10>>>0<r12>>>0){r22=r10;r23=r12}else{break}}}}while(0);r12=FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+16>>2]](r16);if(r21>>>0<r3>>>0){r10=r11+1|0;r9=r7;r13=r11+4|0;r24=r11+8|0;r25=0;r26=0;r27=r21;while(1){r28=HEAP8[((HEAP8[r17]&1)==0?r10:HEAP32[r24>>2])+r26|0];if(r28<<24>>24!=0&(r25|0)==(r28<<24>>24|0)){r28=HEAP32[r6>>2];HEAP32[r6>>2]=r28+4;HEAP32[r28>>2]=r12;r28=HEAP8[r17];if((r28&1)==0){r29=(r28&255)>>>1}else{r29=HEAP32[r13>>2]}r30=(r26>>>0<(r29-1|0)>>>0)+r26|0;r31=0}else{r30=r26;r31=r25}r28=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+44>>2]](r14,HEAP8[r27]);r32=HEAP32[r6>>2];r33=r32+4|0;HEAP32[r6>>2]=r33;HEAP32[r32>>2]=r28;r28=r27+1|0;if(r28>>>0<r3>>>0){r25=r31+1|0;r26=r30;r27=r28}else{r34=r33;break}}}else{r34=HEAP32[r6>>2]}r27=r4+(r21-r1<<2)|0;if((r27|0)==(r34|0)){r19=r34;break}r26=r34-4|0;if(r26>>>0>r27>>>0){r35=r27;r36=r26}else{r19=r34;break}while(1){r26=HEAP32[r35>>2];HEAP32[r35>>2]=HEAP32[r36>>2];HEAP32[r36>>2]=r26;r26=r35+4|0;r27=r36-4|0;if(r26>>>0<r27>>>0){r35=r26;r36=r27}else{r19=r34;break}}}}while(0);if((r2|0)==(r3|0)){r37=r19}else{r37=r4+(r2-r1<<2)|0}HEAP32[r5>>2]=r37;if((HEAP8[r17]&1)==0){STACKTOP=r8;return}r17=HEAP32[r11+8>>2];if((r17|0)==0){STACKTOP=r8;return}_free(r17);STACKTOP=r8;return}function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+16|0;r10=r9;if((r2|0)==0){HEAP32[r1>>2]=0;STACKTOP=r9;return}r11=r5;r5=r3;r12=r11-r5>>2;r13=r6+12|0;r6=HEAP32[r13>>2];r14=(r6|0)>(r12|0)?r6-r12|0:0;r12=r4;r6=r12-r5|0;r5=r6>>2;do{if((r6|0)>0){if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+48>>2]](r2,r3,r5)|0)==(r5|0)){break}HEAP32[r1>>2]=0;STACKTOP=r9;return}}while(0);do{if((r14|0)>0){if(r14>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r14>>>0<2){HEAP8[r10]=r14<<1;r15=r10+4|0;r8=23}else{r5=r14+4&-4;r3=r5<<2;r6=(r3|0)==0?1:r3;while(1){r16=_malloc(r6);if((r16|0)!=0){r8=22;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r8==22){r6=r16;HEAP32[r10+8>>2]=r6;HEAP32[r10>>2]=r5|1;HEAP32[r10+4>>2]=r14;if((r14|0)==0){r17=r6;break}else{r15=r6;r8=23;break}}r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53824;___cxa_throw(r6,62184,110)}}while(0);if(r8==23){r6=r14;r3=r15;while(1){r18=r6-1|0;HEAP32[r3>>2]=r7;if((r18|0)==0){r17=r15;break}else{r6=r18;r3=r3+4|0}}}HEAP32[r17+(r14<<2)>>2]=0;r3=r10;if((HEAP8[r3]&1)==0){r19=r10+4|0}else{r19=HEAP32[r10+8>>2]}if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+48>>2]](r2,r19,r14)|0)==(r14|0)){if((HEAP8[r3]&1)==0){break}r6=HEAP32[r10+8>>2];if((r6|0)==0){break}_free(r6);break}HEAP32[r1>>2]=0;if((HEAP8[r3]&1)==0){STACKTOP=r9;return}r3=HEAP32[r10+8>>2];if((r3|0)==0){STACKTOP=r9;return}_free(r3);STACKTOP=r9;return}}while(0);r10=r11-r12|0;r12=r10>>2;do{if((r10|0)>0){if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+48>>2]](r2,r4,r12)|0)==(r12|0)){break}HEAP32[r1>>2]=0;STACKTOP=r9;return}}while(0);HEAP32[r13>>2]=0;HEAP32[r1>>2]=r2;STACKTOP=r9;return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+224|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r9;r11=r9+8;r12=r9+32;r13=r9+200;r14=r9+208;r15=r9+216;HEAP32[r10>>2]=37;HEAP32[r10+4>>2]=0;r16=r10;r10=r16+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r10}else{HEAP8[r10]=43;r19=r16+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;HEAP8[r20+1|0]=108;r19=r20+2|0;r20=r18&74;do{if((r20|0)==64){HEAP8[r19]=111}else if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else{HEAP8[r19]=100}}while(0);r19=r11|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,22,HEAP32[69912>>2],r16,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r7,r8));STACKTOP=r8;r8=r11+r18|0;r7=HEAP32[r17>>2]&176;do{if((r7|0)==32){r21=r8}else if((r7|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r11+1|0;break}if(!((r18|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r11+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r11+2|0}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r12|0;r12=r15|0;r11=HEAP32[r4+28>>2];HEAP32[r12>>2]=r11;r18=r11+4|0;tempValue=HEAP32[r18>>2],HEAP32[r18>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(r19,r21,r8,r2,r13,r14,r15);r15=HEAP32[r12>>2];r12=r15+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=164;r27=0;STACKTOP=r9;return}FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=164;r27=0;STACKTOP=r9;return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+136|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+24;r12=r8+112;r13=r8+120;r14=r8+128;r15=r9|0;HEAP8[r15]=HEAP8[51912];HEAP8[r15+1|0]=HEAP8[51913];HEAP8[r15+2|0]=HEAP8[51914];HEAP8[r15+3|0]=HEAP8[51915];HEAP8[r15+4|0]=HEAP8[51916];HEAP8[r15+5|0]=HEAP8[51917];r16=r9+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r16}else{HEAP8[r16]=43;r19=r9+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;r19=r20+1|0;r20=r18&74;do{if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else if((r20|0)==64){HEAP8[r19]=111}else{HEAP8[r19]=117}}while(0);r19=r10|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r20=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r20}}while(0);r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,12,HEAP32[69912>>2],r15,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r6,r7));STACKTOP=r7;r7=r10+r20|0;r6=HEAP32[r17>>2]&176;do{if((r6|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r10+1|0;break}if(!((r20|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r10+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r10+2|0}else if((r6|0)==32){r21=r7}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r11|0;r11=r14|0;r6=HEAP32[r4+28>>2];HEAP32[r11>>2]=r6;r10=r6+4|0;tempValue=HEAP32[r10>>2],HEAP32[r10>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(r19,r21,r7,r2,r12,r13,r14);r14=HEAP32[r11>>2];r11=r14+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=84;r27=0;STACKTOP=r8;return}FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+8>>2]](r14|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r12>>2];r25=HEAP32[r13>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=84;r27=0;STACKTOP=r8;return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+232|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r9;r11=r9+8;r12=r9+32;r13=r9+208;r14=r9+216;r15=r9+224;HEAP32[r10>>2]=37;HEAP32[r10+4>>2]=0;r16=r10;r10=r16+1|0;r17=r4+4|0;r18=HEAP32[r17>>2];if((r18&2048|0)==0){r19=r10}else{HEAP8[r10]=43;r19=r16+2|0}if((r18&512|0)==0){r20=r19}else{HEAP8[r19]=35;r20=r19+1|0}HEAP8[r20]=108;HEAP8[r20+1|0]=108;r19=r20+2|0;r20=r18&74;do{if((r20|0)==8){if((r18&16384|0)==0){HEAP8[r19]=120;break}else{HEAP8[r19]=88;break}}else if((r20|0)==64){HEAP8[r19]=111}else{HEAP8[r19]=117}}while(0);r19=r11|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r20=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r20}}while(0);r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r19,23,HEAP32[69912>>2],r16,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r7,r8));STACKTOP=r8;r8=r11+r20|0;r7=HEAP32[r17>>2]&176;do{if((r7|0)==16){r17=HEAP8[r19];if(r17<<24>>24==45|r17<<24>>24==43){r21=r11+1|0;break}if(!((r20|0)>1&r17<<24>>24==48)){r2=22;break}r17=HEAP8[r11+1|0];if(!(r17<<24>>24==120|r17<<24>>24==88)){r2=22;break}r21=r11+2|0}else if((r7|0)==32){r21=r8}else{r2=22}}while(0);if(r2==22){r21=r19}r2=r12|0;r12=r15|0;r7=HEAP32[r4+28>>2];HEAP32[r12>>2]=r7;r11=r7+4|0;tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(r19,r21,r8,r2,r13,r14,r15);r15=HEAP32[r12>>2];r12=r15+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)!=0){r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=172;r27=0;STACKTOP=r9;return}FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0);r22=r3|0;r23=HEAP32[r22>>2];r24=HEAP32[r13>>2];r25=HEAP32[r14>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r23,r2,r24,r25,r4,r5);r26=172;r27=0;STACKTOP=r9;return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+312|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+40;r12=r8+48;r13=r8+280;r14=r8+288;r15=r8+296;r16=r8+304;HEAP32[r9>>2]=37;HEAP32[r9+4>>2]=0;r17=r9;r9=r17+1|0;r18=r4+4|0;r19=HEAP32[r18>>2];if((r19&2048|0)==0){r20=r9}else{HEAP8[r9]=43;r20=r17+2|0}if((r19&1024|0)==0){r21=r20}else{HEAP8[r20]=35;r21=r20+1|0}r20=r19&260;r9=r19>>>14;do{if((r20|0)==260){if((r9&1|0)==0){HEAP8[r21]=97;r22=0;break}else{HEAP8[r21]=65;r22=0;break}}else{HEAP8[r21]=46;r19=r21+2|0;HEAP8[r21+1|0]=42;if((r20|0)==4){if((r9&1|0)==0){HEAP8[r19]=102;r22=1;break}else{HEAP8[r19]=70;r22=1;break}}else if((r20|0)==256){if((r9&1|0)==0){HEAP8[r19]=101;r22=1;break}else{HEAP8[r19]=69;r22=1;break}}else{if((r9&1|0)==0){HEAP8[r19]=103;r22=1;break}else{HEAP8[r19]=71;r22=1;break}}}}while(0);r9=r10|0;HEAP32[r11>>2]=r9;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=HEAP32[69912>>2];if(r22){r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r23=r20}else{r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r7>>3]=r6,r7));STACKTOP=r7;r23=r20}do{if((r23|0)>29){r20=(HEAP8[72016]|0)==0;if(r22){do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r24=r10}else{do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r20=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r24=r20}r20=HEAP32[r11>>2];if((r20|0)!=0){r25=r24;r26=r20;r27=r20;break}r20=___cxa_allocate_exception(4);HEAP32[r20>>2]=53824;___cxa_throw(r20,62184,110)}else{r25=r23;r26=0;r27=HEAP32[r11>>2]}}while(0);r11=r27+r25|0;r23=HEAP32[r18>>2]&176;do{if((r23|0)==32){r28=r11}else if((r23|0)==16){r18=HEAP8[r27];if(r18<<24>>24==45|r18<<24>>24==43){r28=r27+1|0;break}if(!((r25|0)>1&r18<<24>>24==48)){r2=53;break}r18=HEAP8[r27+1|0];if(!(r18<<24>>24==120|r18<<24>>24==88)){r2=53;break}r28=r27+2|0}else{r2=53}}while(0);if(r2==53){r28=r27}do{if((r27|0)==(r9|0)){r29=r12|0;r30=0;r31=r9}else{r2=_malloc(r25<<3);r23=r2;if((r2|0)!=0){r29=r23;r30=r23;r31=r27;break}r23=___cxa_allocate_exception(4);HEAP32[r23>>2]=53824;___cxa_throw(r23,62184,110)}}while(0);r27=r15|0;r25=HEAP32[r4+28>>2];HEAP32[r27>>2]=r25;r9=r25+4|0;tempValue=HEAP32[r9>>2],HEAP32[r9>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(r31,r28,r11,r29,r13,r14,r15);r15=HEAP32[r27>>2];r27=r15+4|0;if(((tempValue=HEAP32[r27>>2],HEAP32[r27>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0)}r15=r3|0;__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r16,HEAP32[r15>>2],r29,HEAP32[r13>>2],HEAP32[r14>>2],r4,r5);r5=HEAP32[r16>>2];HEAP32[r15>>2]=r5;HEAP32[r1>>2]=r5;if((r30|0)!=0){_free(r30)}if((r26|0)==0){STACKTOP=r8;return}_free(r26);STACKTOP=r8;return}function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+48|0;r10=r9;r11=r9+16;r12=r9+32;r13=r7|0;r7=HEAP32[r13>>2];if((HEAP32[71448>>2]|0)!=-1){HEAP32[r11>>2]=71448;HEAP32[r11+4>>2]=46;HEAP32[r11+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r11)}r11=HEAP32[71452>>2]-1|0;r14=HEAP32[r7+8>>2];if(HEAP32[r7+12>>2]-r14>>2>>>0<=r11>>>0){r15=___cxa_allocate_exception(4);r16=r15;HEAP32[r16>>2]=53856;___cxa_throw(r15,62200,872)}r7=HEAP32[r14+(r11<<2)>>2];if((r7|0)==0){r15=___cxa_allocate_exception(4);r16=r15;HEAP32[r16>>2]=53856;___cxa_throw(r15,62200,872)}r15=r7;r16=HEAP32[r13>>2];if((HEAP32[71064>>2]|0)!=-1){HEAP32[r10>>2]=71064;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r10)}r10=HEAP32[71068>>2]-1|0;r13=HEAP32[r16+8>>2];if(HEAP32[r16+12>>2]-r13>>2>>>0<=r10>>>0){r17=___cxa_allocate_exception(4);r18=r17;HEAP32[r18>>2]=53856;___cxa_throw(r17,62200,872)}r16=HEAP32[r13+(r10<<2)>>2];if((r16|0)==0){r17=___cxa_allocate_exception(4);r18=r17;HEAP32[r18>>2]=53856;___cxa_throw(r17,62200,872)}r17=r16;FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+20>>2]](r12,r17);HEAP32[r6>>2]=r4;r18=HEAP8[r1];if(r18<<24>>24==45|r18<<24>>24==43){r10=FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+44>>2]](r15,r18);r18=HEAP32[r6>>2];HEAP32[r6>>2]=r18+4;HEAP32[r18>>2]=r10;r19=r1+1|0}else{r19=r1}r10=r3;L23:do{if((r10-r19|0)>1){if((HEAP8[r19]|0)!=48){r8=24;break}r18=r19+1|0;r13=HEAP8[r18];if(!(r13<<24>>24==120|r13<<24>>24==88)){r8=24;break}r13=r7;r11=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+44>>2]](r15,48);r14=HEAP32[r6>>2];HEAP32[r6>>2]=r14+4;HEAP32[r14>>2]=r11;r11=r19+2|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+44>>2]](r15,HEAP8[r18]);r18=HEAP32[r6>>2];HEAP32[r6>>2]=r18+4;HEAP32[r18>>2]=r14;if(r11>>>0<r3>>>0){r20=r11}else{r21=r11;r22=r11;break}while(1){r14=HEAP8[r20];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r18=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r18}}while(0);r18=r20+1|0;if((_isxdigit_l(r14<<24>>24,HEAP32[69912>>2])|0)==0){r21=r11;r22=r20;break L23}if(r18>>>0<r3>>>0){r20=r18}else{r21=r11;r22=r18;break}}}else{r8=24}}while(0);L38:do{if(r8==24){if(r19>>>0<r3>>>0){r23=r19}else{r21=r19;r22=r19;break}while(1){r20=HEAP8[r23];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r11=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r11}}while(0);r14=r23+1|0;if((_isdigit_l(r20<<24>>24,HEAP32[69912>>2])|0)==0){r21=r19;r22=r23;break L38}if(r14>>>0<r3>>>0){r23=r14}else{r21=r19;r22=r14;break}}}}while(0);r19=r12;r23=HEAP8[r19];if((r23&1)==0){r24=(r23&255)>>>1}else{r24=HEAP32[r12+4>>2]}do{if((r24|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+48>>2]](r15,r21,r22,HEAP32[r6>>2]);r23=HEAP32[r6>>2]+(r22-r21<<2)|0;HEAP32[r6>>2]=r23;r25=r23}else{do{if((r21|0)!=(r22|0)){r23=r22-1|0;if(r23>>>0>r21>>>0){r26=r21;r27=r23}else{break}while(1){r23=HEAP8[r26];HEAP8[r26]=HEAP8[r27];HEAP8[r27]=r23;r23=r26+1|0;r8=r27-1|0;if(r23>>>0<r8>>>0){r26=r23;r27=r8}else{break}}}}while(0);r20=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+16>>2]](r17);if(r21>>>0<r22>>>0){r8=r12+1|0;r23=r12+4|0;r14=r12+8|0;r11=r7;r18=0;r13=0;r28=r21;while(1){r29=HEAP8[((HEAP8[r19]&1)==0?r8:HEAP32[r14>>2])+r13|0];if(r29<<24>>24>0&(r18|0)==(r29<<24>>24|0)){r29=HEAP32[r6>>2];HEAP32[r6>>2]=r29+4;HEAP32[r29>>2]=r20;r29=HEAP8[r19];if((r29&1)==0){r30=(r29&255)>>>1}else{r30=HEAP32[r23>>2]}r31=(r13>>>0<(r30-1|0)>>>0)+r13|0;r32=0}else{r31=r13;r32=r18}r29=FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+44>>2]](r15,HEAP8[r28]);r33=HEAP32[r6>>2];r34=r33+4|0;HEAP32[r6>>2]=r34;HEAP32[r33>>2]=r29;r29=r28+1|0;if(r29>>>0<r22>>>0){r18=r32+1|0;r13=r31;r28=r29}else{r35=r34;break}}}else{r35=HEAP32[r6>>2]}r28=r4+(r21-r1<<2)|0;if((r28|0)==(r35|0)){r25=r35;break}r13=r35-4|0;if(r13>>>0>r28>>>0){r36=r28;r37=r13}else{r25=r35;break}while(1){r13=HEAP32[r36>>2];HEAP32[r36>>2]=HEAP32[r37>>2];HEAP32[r37>>2]=r13;r13=r36+4|0;r28=r37-4|0;if(r13>>>0<r28>>>0){r36=r13;r37=r28}else{r25=r35;break}}}}while(0);L82:do{if(r22>>>0<r3>>>0){r35=r7;r37=r22;while(1){r36=HEAP8[r37];if(r36<<24>>24==46){break}r21=FUNCTION_TABLE[HEAP32[HEAP32[r35>>2]+44>>2]](r15,r36);r36=HEAP32[r6>>2];r31=r36+4|0;HEAP32[r6>>2]=r31;HEAP32[r36>>2]=r21;r21=r37+1|0;if(r21>>>0<r3>>>0){r37=r21}else{r38=r21;r39=r31;break L82}}r35=FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+12>>2]](r17);r31=HEAP32[r6>>2];r21=r31+4|0;HEAP32[r6>>2]=r21;HEAP32[r31>>2]=r35;r38=r37+1|0;r39=r21}else{r38=r22;r39=r25}}while(0);FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+48>>2]](r15,r38,r3,r39);r39=HEAP32[r6>>2]+(r10-r38<<2)|0;HEAP32[r6>>2]=r39;if((r2|0)==(r3|0)){r40=r39}else{r40=r4+(r2-r1<<2)|0}HEAP32[r5>>2]=r40;if((HEAP8[r19]&1)==0){STACKTOP=r9;return}r19=HEAP32[r12+8>>2];if((r19|0)==0){STACKTOP=r9;return}_free(r19);STACKTOP=r9;return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+312|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+8;r11=r8+40;r12=r8+48;r13=r8+280;r14=r8+288;r15=r8+296;r16=r8+304;HEAP32[r9>>2]=37;HEAP32[r9+4>>2]=0;r17=r9;r9=r17+1|0;r18=r4+4|0;r19=HEAP32[r18>>2];if((r19&2048|0)==0){r20=r9}else{HEAP8[r9]=43;r20=r17+2|0}if((r19&1024|0)==0){r21=r20}else{HEAP8[r20]=35;r21=r20+1|0}r20=r19&260;r9=r19>>>14;do{if((r20|0)==260){HEAP8[r21]=76;r19=r21+1|0;if((r9&1|0)==0){HEAP8[r19]=97;r22=0;break}else{HEAP8[r19]=65;r22=0;break}}else{HEAP8[r21]=46;HEAP8[r21+1|0]=42;HEAP8[r21+2|0]=76;r19=r21+3|0;if((r20|0)==4){if((r9&1|0)==0){HEAP8[r19]=102;r22=1;break}else{HEAP8[r19]=70;r22=1;break}}else if((r20|0)==256){if((r9&1|0)==0){HEAP8[r19]=101;r22=1;break}else{HEAP8[r19]=69;r22=1;break}}else{if((r9&1|0)==0){HEAP8[r19]=103;r22=1;break}else{HEAP8[r19]=71;r22=1;break}}}}while(0);r9=r10|0;HEAP32[r11>>2]=r9;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=HEAP32[69912>>2];if(r22){r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r23=r20}else{r20=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r9,30,r10,r17,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r7>>3]=r6,r7));STACKTOP=r7;r23=r20}do{if((r23|0)>29){r20=(HEAP8[72016]|0)==0;if(r22){do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r4+8>>2],HEAPF64[r7+8>>3]=r6,r7));STACKTOP=r7;r24=r10}else{do{if(r20){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r20=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r11,HEAP32[69912>>2],r17,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r7>>3]=r6,r7));STACKTOP=r7;r24=r20}r20=HEAP32[r11>>2];if((r20|0)!=0){r25=r24;r26=r20;r27=r20;break}r20=___cxa_allocate_exception(4);HEAP32[r20>>2]=53824;___cxa_throw(r20,62184,110)}else{r25=r23;r26=0;r27=HEAP32[r11>>2]}}while(0);r11=r27+r25|0;r23=HEAP32[r18>>2]&176;do{if((r23|0)==16){r18=HEAP8[r27];if(r18<<24>>24==45|r18<<24>>24==43){r28=r27+1|0;break}if(!((r25|0)>1&r18<<24>>24==48)){r2=53;break}r18=HEAP8[r27+1|0];if(!(r18<<24>>24==120|r18<<24>>24==88)){r2=53;break}r28=r27+2|0}else if((r23|0)==32){r28=r11}else{r2=53}}while(0);if(r2==53){r28=r27}do{if((r27|0)==(r9|0)){r29=r12|0;r30=0;r31=r9}else{r2=_malloc(r25<<3);r23=r2;if((r2|0)!=0){r29=r23;r30=r23;r31=r27;break}r23=___cxa_allocate_exception(4);HEAP32[r23>>2]=53824;___cxa_throw(r23,62184,110)}}while(0);r27=r15|0;r25=HEAP32[r4+28>>2];HEAP32[r27>>2]=r25;r9=r25+4|0;tempValue=HEAP32[r9>>2],HEAP32[r9>>2]=tempValue+1,tempValue;__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(r31,r28,r11,r29,r13,r14,r15);r15=HEAP32[r27>>2];r27=r15+4|0;if(((tempValue=HEAP32[r27>>2],HEAP32[r27>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r15>>2]+8>>2]](r15|0)}r15=r3|0;__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r16,HEAP32[r15>>2],r29,HEAP32[r13>>2],HEAP32[r14>>2],r4,r5);r5=HEAP32[r16>>2];HEAP32[r15>>2]=r5;HEAP32[r1>>2]=r5;if((r30|0)!=0){_free(r30)}if((r26|0)==0){STACKTOP=r8;return}_free(r26);STACKTOP=r8;return}function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r2=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+200|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+24;r11=r8+48;r12=r8+16|0;HEAP8[r12]=HEAP8[51920];HEAP8[r12+1|0]=HEAP8[51921];HEAP8[r12+2|0]=HEAP8[51922];HEAP8[r12+3|0]=HEAP8[51923];HEAP8[r12+4|0]=HEAP8[51924];HEAP8[r12+5|0]=HEAP8[51925];r13=r10|0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r14=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r14}}while(0);r14=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(r13,20,HEAP32[69912>>2],r12,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r6,r7));STACKTOP=r7;r7=r10+r14|0;r6=HEAP32[r4+4>>2]&176;do{if((r6|0)==32){r15=r7}else if((r6|0)==16){r12=HEAP8[r13];if(r12<<24>>24==45|r12<<24>>24==43){r15=r10+1|0;break}if(!((r14|0)>1&r12<<24>>24==48)){r2=12;break}r12=HEAP8[r10+1|0];if(!(r12<<24>>24==120|r12<<24>>24==88)){r2=12;break}r15=r10+2|0}else{r2=12}}while(0);if(r2==12){r15=r13}r2=HEAP32[r4+28>>2];r6=r2+4|0;tempValue=HEAP32[r6>>2],HEAP32[r6>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r9>>2]=71448;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r9)}r9=HEAP32[71452>>2]-1|0;r6=HEAP32[r2+8>>2];do{if(HEAP32[r2+12>>2]-r6>>2>>>0>r9>>>0){r12=HEAP32[r6+(r9<<2)>>2];if((r12|0)==0){break}r16=r2+4|0;if(((tempValue=HEAP32[r16>>2],HEAP32[r16>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2)}r16=r11|0;FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+48>>2]](r12,r13,r7,r16);r12=r11+(r14<<2)|0;if((r15|0)==(r7|0)){r17=r12;r18=r3|0;r19=HEAP32[r18>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r19,r16,r17,r12,r4,r5);r20=148;r21=0;STACKTOP=r8;return}r17=r11+(r15-r10<<2)|0;r18=r3|0;r19=HEAP32[r18>>2];__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,r19,r16,r17,r12,r4,r5);r20=148;r21=0;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r1,r2,r3,r4,r5,r6,r7,r8,r9){var r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67;r10=0;r11=STACKTOP;STACKTOP=STACKTOP+40|0;r12=r11;r13=r11+16;r14=r11+24;r15=r11+32;r16=HEAP32[r5+28>>2];r17=r16+4|0;tempValue=HEAP32[r17>>2],HEAP32[r17>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r12>>2]=71456;HEAP32[r12+4>>2]=46;HEAP32[r12+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r12)}r12=HEAP32[71460>>2]-1|0;r17=HEAP32[r16+8>>2];do{if(HEAP32[r16+12>>2]-r17>>2>>>0>r12>>>0){r18=HEAP32[r17+(r12<<2)>>2];if((r18|0)==0){break}r19=r18;r20=r16+4|0;if(((tempValue=HEAP32[r20>>2],HEAP32[r20>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+8>>2]](r16)}HEAP32[r6>>2]=0;L10:do{if((r8|0)==(r9|0)){r21=r3;r22=r4}else{r20=r18;r23=r18+8|0;r24=r18;r25=r2;r26=r14|0;r27=r15|0;r28=r13|0;r29=r8;r30=0;r31=r4;r32=r3;L12:while(1){r33=r30;r34=r31;r35=r32;while(1){if((r33|0)!=0){r21=r35;r22=r34;break L10}do{if((r35|0)==0){r36=0;r37=0}else{if((HEAP32[r35+12>>2]|0)!=(HEAP32[r35+16>>2]|0)){r36=r35;r37=r35;break}r38=(FUNCTION_TABLE[HEAP32[HEAP32[r35>>2]+36>>2]](r35)|0)==-1;r36=r38?0:r35;r37=r38?0:r35}}while(0);r38=(r36|0)==0;do{if((r34|0)==0){r10=20}else{if((HEAP32[r34+12>>2]|0)==(HEAP32[r34+16>>2]|0)){if((FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)|0)==-1){r10=20;break}}if(r38){r39=r34}else{r40=r34;r10=21;break L12}}}while(0);if(r10==20){r10=0;if(r38){r40=0;r10=21;break L12}else{r39=0}}if(FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+36>>2]](r19,HEAP8[r29],0)<<24>>24==37){r10=26;break}r41=HEAP8[r29];if(r41<<24>>24>-1){r42=HEAP32[r23>>2];if((HEAP16[r42+(r41<<24>>24<<1)>>1]&8192)!=0){r43=r29;r10=37;break}}r44=r36+12|0;r41=HEAP32[r44>>2];r45=r36+16|0;if((r41|0)==(HEAP32[r45>>2]|0)){r46=FUNCTION_TABLE[HEAP32[HEAP32[r36>>2]+36>>2]](r36)&255}else{r46=HEAP8[r41]}r41=FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+12>>2]](r19,r46);if(r41<<24>>24==FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+12>>2]](r19,HEAP8[r29])<<24>>24){r10=62;break}HEAP32[r6>>2]=4;r33=4;r34=r39;r35=r37}L38:do{if(r10==26){r10=0;r35=r29+1|0;if((r35|0)==(r9|0)){r10=27;break L12}r34=FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+36>>2]](r19,HEAP8[r35],0);if(r34<<24>>24==69|r34<<24>>24==48){r33=r29+2|0;if((r33|0)==(r9|0)){r10=30;break L12}r47=r34;r48=FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+36>>2]](r19,HEAP8[r33],0);r49=r33}else{r47=0;r48=r34;r49=r35}r35=HEAP32[HEAP32[r25>>2]+36>>2];HEAP32[r26>>2]=r36;HEAP32[r27>>2]=r39;FUNCTION_TABLE[r35](r13,r2,r14,r15,r5,r6,r7,r48,r47);r50=r49+1|0;r51=r39;r52=HEAP32[r28>>2]}else if(r10==37){while(1){r10=0;r35=r43+1|0;if((r35|0)==(r9|0)){r53=r9;break}r34=HEAP8[r35];if(r34<<24>>24<=-1){r53=r35;break}if((HEAP16[r42+(r34<<24>>24<<1)>>1]&8192)==0){r53=r35;break}else{r43=r35;r10=37}}r38=r36;r35=r39;r34=r39;r33=r39;r41=r37;while(1){do{if((r38|0)==0){r54=0;r55=r41}else{if((HEAP32[r38+12>>2]|0)!=(HEAP32[r38+16>>2]|0)){r54=r38;r55=r41;break}r56=(FUNCTION_TABLE[HEAP32[HEAP32[r38>>2]+36>>2]](r38)|0)==-1;r54=r56?0:r38;r55=r56?0:r41}}while(0);r56=(r54|0)==0;do{if((r35|0)==0){r57=r34;r58=r33;r10=48}else{if((HEAP32[r35+12>>2]|0)!=(HEAP32[r35+16>>2]|0)){if(r56){r59=r35;r60=r34;r61=r33;break}else{r50=r53;r51=r33;r52=r55;break L38}}if((FUNCTION_TABLE[HEAP32[HEAP32[r35>>2]+36>>2]](r35)|0)==-1){r57=0;r58=0;r10=48;break}if(r56^(r34|0)==0){r59=r34;r60=r34;r61=r33}else{r50=r53;r51=r33;r52=r55;break L38}}}while(0);if(r10==48){r10=0;if(r56){r50=r53;r51=r58;r52=r55;break L38}else{r59=0;r60=r57;r61=r58}}r62=r54+12|0;r63=HEAP32[r62>>2];r64=r54+16|0;if((r63|0)==(HEAP32[r64>>2]|0)){r65=FUNCTION_TABLE[HEAP32[HEAP32[r54>>2]+36>>2]](r54)&255}else{r65=HEAP8[r63]}if(r65<<24>>24<=-1){r50=r53;r51=r61;r52=r55;break L38}if((HEAP16[HEAP32[r23>>2]+(r65<<24>>24<<1)>>1]&8192)==0){r50=r53;r51=r61;r52=r55;break L38}r63=HEAP32[r62>>2];if((r63|0)==(HEAP32[r64>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r54>>2]+40>>2]](r54);r38=r54;r35=r59;r34=r60;r33=r61;r41=r55;continue}else{HEAP32[r62>>2]=r63+1;r38=r54;r35=r59;r34=r60;r33=r61;r41=r55;continue}}}else if(r10==62){r10=0;r41=HEAP32[r44>>2];if((r41|0)==(HEAP32[r45>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r36>>2]+40>>2]](r36)}else{HEAP32[r44>>2]=r41+1}r50=r29+1|0;r51=r39;r52=r37}}while(0);if((r50|0)==(r9|0)){r21=r52;r22=r51;break L10}r29=r50;r30=HEAP32[r6>>2];r31=r51;r32=r52}if(r10==21){HEAP32[r6>>2]=4;r21=r36;r22=r40;break}else if(r10==27){HEAP32[r6>>2]=4;r21=r36;r22=r39;break}else if(r10==30){HEAP32[r6>>2]=4;r21=r36;r22=r39;break}}}while(0);do{if((r21|0)==0){r66=0}else{if((HEAP32[r21+12>>2]|0)!=(HEAP32[r21+16>>2]|0)){r66=r21;break}r19=(FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)|0)==-1;r66=r19?0:r21}}while(0);r19=(r66|0)==0;do{if((r22|0)==0){r10=74}else{if((HEAP32[r22+12>>2]|0)==(HEAP32[r22+16>>2]|0)){if((FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)|0)==-1){r10=74;break}}if(!r19){break}r67=r1|0;HEAP32[r67>>2]=r66;STACKTOP=r11;return}}while(0);do{if(r10==74){if(r19){break}r67=r1|0;HEAP32[r67>>2]=r66;STACKTOP=r11;return}}while(0);HEAP32[r6>>2]=HEAP32[r6>>2]|2;r67=r1|0;HEAP32[r67>>2]=r66;STACKTOP=r11;return}}while(0);r11=___cxa_allocate_exception(4);HEAP32[r11>>2]=53856;___cxa_throw(r11,62200,872)}function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(r1){return}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(r1){return 2}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9;r8=STACKTOP;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r1,r2,HEAP32[r3>>2],HEAP32[r4>>2],r5,r6,r7,51904,51912);STACKTOP=r8;return}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12;r8=STACKTOP;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r2+8|0;r10=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+20>>2]](r9);r9=HEAP8[r10];if((r9&1)==0){r11=(r9&255)>>>1;r12=r10+1|0}else{r11=HEAP32[r10+4>>2];r12=HEAP32[r10+8>>2]}__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r1,r2,HEAP32[r3>>2],HEAP32[r4>>2],r5,r6,r7,r12,r12+r11|0);STACKTOP=r8;return}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r8=STACKTOP;STACKTOP=STACKTOP+16|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=HEAP32[r5+28>>2];r5=r10+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r9>>2]=71456;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r9)}r9=HEAP32[71460>>2]-1|0;r5=HEAP32[r10+8>>2];do{if(HEAP32[r10+12>>2]-r5>>2>>>0>r9>>>0){r11=HEAP32[r5+(r9<<2)>>2];if((r11|0)==0){break}r12=r10+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10)}r12=HEAP32[r4>>2];r13=r2+8|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]>>2]](r13);r13=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r12,r14,r14+168|0,r11,r6,0)-r14|0;if((r13|0)>=168){r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}HEAP32[r7+24>>2]=((r13|0)/12&-1|0)%7&-1;r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r8=STACKTOP;STACKTOP=STACKTOP+16|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=HEAP32[r5+28>>2];r5=r10+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r9>>2]=71456;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r9)}r9=HEAP32[71460>>2]-1|0;r5=HEAP32[r10+8>>2];do{if(HEAP32[r10+12>>2]-r5>>2>>>0>r9>>>0){r11=HEAP32[r5+(r9<<2)>>2];if((r11|0)==0){break}r12=r10+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10)}r12=HEAP32[r4>>2];r13=r2+8|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+4>>2]](r13);r13=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r12,r14,r14+288|0,r11,r6,0)-r14|0;if((r13|0)>=288){r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}HEAP32[r7+16>>2]=((r13|0)/12&-1|0)%12&-1;r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15;r2=STACKTOP;STACKTOP=STACKTOP+16|0;r8=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r8>>2];r8=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r8>>2];r8=r2;r9=HEAP32[r5+28>>2];r5=r9+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r8>>2]=71456;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r8)}r8=HEAP32[71460>>2]-1|0;r5=HEAP32[r9+8>>2];do{if(HEAP32[r9+12>>2]-r5>>2>>>0>r8>>>0){r10=HEAP32[r5+(r8<<2)>>2];if((r10|0)==0){break}r11=r9+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+8>>2]](r9)}r11=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,HEAP32[r4>>2],r6,r10,4);if((HEAP32[r6>>2]&4|0)!=0){r12=r3|0;r13=HEAP32[r12>>2];r14=r1|0;HEAP32[r14>>2]=r13;STACKTOP=r2;return}if((r11|0)<69){r15=r11+2e3|0}else{r15=(r11-69|0)>>>0<31?r11+1900|0:r11}HEAP32[r7+20>>2]=r15-1900;r12=r3|0;r13=HEAP32[r12>>2];r14=r1|0;HEAP32[r14>>2]=r13;STACKTOP=r2;return}}while(0);r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53856;___cxa_throw(r2,62200,872)}function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(r1,r2,r3,r4,r5,r6,r7,r8,r9){var r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543;r10=0;r11=STACKTOP;STACKTOP=STACKTOP+88|0;r12=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r12>>2];r12=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r12>>2];r13=r11;r14=r11+16;r15=r11+24;r16=r11+32;r17=r11+40;r18=r11+48;r19=r11+56;r20=r11+64;r21=r11+72;r22=r11+80;HEAP32[r6>>2]=0;r23=r5+28|0;r24=HEAP32[r23>>2];r25=r24+4|0;r26=r25;r27=(tempValue=HEAP32[r26>>2],HEAP32[r26>>2]=tempValue+1,tempValue);r28=r13;r29=12;r30=0;r31=HEAP32[71456>>2];r32=(r31|0)==-1;if(!r32){r33=r13|0;HEAP32[r33>>2]=71456;r34=r13+4|0;HEAP32[r34>>2]=46;r35=r13+8|0;HEAP32[r35>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r28)}r36=12;r37=0;r38=HEAP32[71460>>2];r39=r38-1|0;r40=r24+12|0;r41=r40;r42=HEAP32[r41>>2];r43=r24+8|0;r44=r43;r45=HEAP32[r44>>2];r46=r42;r47=r45;r48=r46-r47|0;r49=r48>>2;r50=r49>>>0>r39>>>0;do{if(r50){r51=r45+(r39<<2)|0;r52=HEAP32[r51>>2];r53=(r52|0)==0;if(r53){break}r54=r52;r55=r24+4|0;r56=r55;r57=(tempValue=HEAP32[r56>>2],HEAP32[r56>>2]=tempValue+ -1,tempValue);r58=(r57|0)==0;if(r58){r59=r24;r60=r24;r61=HEAP32[r60>>2];r62=r61+8|0;r63=HEAP32[r62>>2];FUNCTION_TABLE[r63](r59)}r64=r8<<24>>24;L10:do{switch(r64|0){case 83:{r65=r4|0;r66=HEAP32[r65>>2];r67=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r66,r6,r54,2);r68=HEAP32[r6>>2];r69=r68&4;r70=(r69|0)==0;r71=(r67|0)<61;r72=r70&r71;if(r72){r73=r7|0;HEAP32[r73>>2]=r67;break L10}else{r74=r68|4;HEAP32[r6>>2]=r74;break L10}break};case 109:{r75=r4|0;r76=HEAP32[r75>>2];r77=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r76,r6,r54,2);r78=HEAP32[r6>>2];r79=r78&4;r80=(r79|0)==0;r81=(r77|0)<13;r82=r80&r81;if(r82){r83=r7+16|0;r84=r77-1|0;HEAP32[r83>>2]=r84;break L10}else{r85=r78|4;HEAP32[r6>>2]=r85;break L10}break};case 77:{r86=r4|0;r87=HEAP32[r86>>2];r88=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r87,r6,r54,2);r89=HEAP32[r6>>2];r90=r89&4;r91=(r90|0)==0;r92=(r88|0)<60;r93=r91&r92;if(r93){r94=r7+4|0;HEAP32[r94>>2]=r88;break L10}else{r95=r89|4;HEAP32[r6>>2]=r95;break L10}break};case 110:case 116:{r96=r4|0;r97=HEAP32[r96>>2];r98=r3|0;r99=r52+8|0;r100=r99;r101=r97;L24:while(1){r102=HEAP32[r98>>2];r103=(r102|0)==0;do{if(r103){r104=0}else{r105=r102+12|0;r106=HEAP32[r105>>2];r107=r102+16|0;r108=HEAP32[r107>>2];r109=(r106|0)==(r108|0);if(!r109){r104=r102;break}r110=r102;r111=HEAP32[r110>>2];r112=r111+36|0;r113=HEAP32[r112>>2];r114=FUNCTION_TABLE[r113](r102);r115=(r114|0)==-1;if(r115){HEAP32[r98>>2]=0;r104=0;break}else{r116=HEAP32[r98>>2];r104=r116;break}}}while(0);r117=(r104|0)==0;r118=(r101|0)==0;do{if(r118){r10=53}else{r119=r101+12|0;r120=HEAP32[r119>>2];r121=r101+16|0;r122=HEAP32[r121>>2];r123=(r120|0)==(r122|0);if(!r123){if(r117){r124=r101;break}else{r125=r101;break L24}}r126=r101;r127=HEAP32[r126>>2];r128=r127+36|0;r129=HEAP32[r128>>2];r130=FUNCTION_TABLE[r129](r101);r131=(r130|0)==-1;if(r131){r10=53;break}if(r117){r124=r101}else{r125=r101;break L24}}}while(0);if(r10==53){r10=0;if(r117){r125=0;break}else{r124=0}}r132=HEAP32[r98>>2];r133=r132+12|0;r134=HEAP32[r133>>2];r135=r132+16|0;r136=HEAP32[r135>>2];r137=(r134|0)==(r136|0);if(r137){r138=r132;r139=HEAP32[r138>>2];r140=r139+36|0;r141=HEAP32[r140>>2];r142=FUNCTION_TABLE[r141](r132);r143=r142&255;r144=r143}else{r145=HEAP8[r134];r144=r145}r146=r144<<24>>24>-1;if(!r146){r125=r124;break}r147=r144<<24>>24;r148=HEAP32[r100>>2];r149=r148+(r147<<1)|0;r150=HEAP16[r149>>1];r151=r150&8192;r152=r151<<16>>16==0;if(r152){r125=r124;break}r153=HEAP32[r98>>2];r154=r153+12|0;r155=HEAP32[r154>>2];r156=r153+16|0;r157=HEAP32[r156>>2];r158=(r155|0)==(r157|0);if(r158){r159=r153;r160=HEAP32[r159>>2];r161=r160+40|0;r162=HEAP32[r161>>2];r163=FUNCTION_TABLE[r162](r153);r101=r124;continue}else{r164=r155+1|0;HEAP32[r154>>2]=r164;r101=r124;continue}}r165=HEAP32[r98>>2];r166=(r165|0)==0;do{if(r166){r167=0}else{r168=r165+12|0;r169=HEAP32[r168>>2];r170=r165+16|0;r171=HEAP32[r170>>2];r172=(r169|0)==(r171|0);if(!r172){r167=r165;break}r173=r165;r174=HEAP32[r173>>2];r175=r174+36|0;r176=HEAP32[r175>>2];r177=FUNCTION_TABLE[r176](r165);r178=(r177|0)==-1;if(r178){HEAP32[r98>>2]=0;r167=0;break}else{r179=HEAP32[r98>>2];r167=r179;break}}}while(0);r180=(r167|0)==0;r181=(r125|0)==0;do{if(r181){r10=72}else{r182=r125+12|0;r183=HEAP32[r182>>2];r184=r125+16|0;r185=HEAP32[r184>>2];r186=(r183|0)==(r185|0);if(r186){r187=r125;r188=HEAP32[r187>>2];r189=r188+36|0;r190=HEAP32[r189>>2];r191=FUNCTION_TABLE[r190](r125);r192=(r191|0)==-1;if(r192){r10=72;break}}if(r180){break L10}}}while(0);if(r10==72){if(!r180){break L10}}r193=HEAP32[r6>>2];r194=r193|2;HEAP32[r6>>2]=r194;break};case 99:{r195=r2+8|0;r196=r195;r197=HEAP32[r196>>2];r198=r197+12|0;r199=HEAP32[r198>>2];r200=FUNCTION_TABLE[r199](r195);r201=r3|0;r202=HEAP32[r201>>2];r203=r4|0;r204=HEAP32[r203>>2];r205=r200;r206=HEAP8[r205];r207=r206&1;r208=r207<<24>>24==0;if(r208){r209=r200;r210=r209+1|0;r211=r206&255;r212=r211>>>1;r213=r212;r214=r210}else{r215=r200+8|0;r216=HEAP32[r215>>2];r217=r200+4|0;r218=HEAP32[r217>>2];r213=r218;r214=r216}r219=r214+r213|0;__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r14,r2,r202,r204,r5,r6,r7,r214,r219);r220=r14|0;r221=HEAP32[r220>>2];HEAP32[r201>>2]=r221;break};case 120:{r222=r2;r223=HEAP32[r222>>2];r224=r223+20|0;r225=HEAP32[r224>>2];r226=r3|0;r227=HEAP32[r226>>2];r228=r20|0;HEAP32[r228>>2]=r227;r229=r4|0;r230=HEAP32[r229>>2];r231=r21|0;HEAP32[r231>>2]=r230;FUNCTION_TABLE[r225](r1,r2,r20,r21,r5,r6,r7);STACKTOP=r11;return;break};case 88:{r232=r2+8|0;r233=r232;r234=HEAP32[r233>>2];r235=r234+24|0;r236=HEAP32[r235>>2];r237=FUNCTION_TABLE[r236](r232);r238=r3|0;r239=HEAP32[r238>>2];r240=r4|0;r241=HEAP32[r240>>2];r242=r237;r243=HEAP8[r242];r244=r243&1;r245=r244<<24>>24==0;if(r245){r246=r237;r247=r246+1|0;r248=r243&255;r249=r248>>>1;r250=r249;r251=r247}else{r252=r237+8|0;r253=HEAP32[r252>>2];r254=r237+4|0;r255=HEAP32[r254>>2];r250=r255;r251=r253}r256=r251+r250|0;__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r22,r2,r239,r241,r5,r6,r7,r251,r256);r257=r22|0;r258=HEAP32[r257>>2];HEAP32[r238>>2]=r258;break};case 72:{r259=r4|0;r260=HEAP32[r259>>2];r261=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r260,r6,r54,2);r262=HEAP32[r6>>2];r263=r262&4;r264=(r263|0)==0;r265=(r261|0)<24;r266=r264&r265;if(r266){r267=r7+8|0;HEAP32[r267>>2]=r261;break L10}else{r268=r262|4;HEAP32[r6>>2]=r268;break L10}break};case 97:case 65:{r269=r4|0;r270=HEAP32[r269>>2];r271=r2+8|0;r272=r271;r273=HEAP32[r272>>2];r274=HEAP32[r273>>2];r275=FUNCTION_TABLE[r274](r271);r276=r275+168|0;r277=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r270,r275,r276,r54,r6,0);r278=r277;r279=r275;r280=r278-r279|0;r281=(r280|0)<168;if(!r281){break L10}r282=r7+24|0;r283=(r280|0)/12&-1;r284=(r283|0)%7&-1;HEAP32[r282>>2]=r284;break};case 73:{r285=r7+8|0;r286=r4|0;r287=HEAP32[r286>>2];r288=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r287,r6,r54,2);r289=HEAP32[r6>>2];r290=r289&4;r291=(r290|0)==0;do{if(r291){r292=r288-1|0;r293=r292>>>0<12;if(!r293){break}HEAP32[r285>>2]=r288;break L10}}while(0);r294=r289|4;HEAP32[r6>>2]=r294;break};case 70:{r295=r3|0;r296=HEAP32[r295>>2];r297=r4|0;r298=HEAP32[r297>>2];__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r16,r2,r296,r298,r5,r6,r7,51888,51896);r299=r16|0;r300=HEAP32[r299>>2];HEAP32[r295>>2]=r300;break};case 68:{r301=r3|0;r302=HEAP32[r301>>2];r303=r4|0;r304=HEAP32[r303>>2];__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r15,r2,r302,r304,r5,r6,r7,51896,51904);r305=r15|0;r306=HEAP32[r305>>2];HEAP32[r301>>2]=r306;break};case 112:{r307=r7+8|0;r308=r4|0;r309=HEAP32[r308>>2];r310=r2+8|0;r311=r310;r312=HEAP32[r311>>2];r313=r312+8|0;r314=HEAP32[r313>>2];r315=FUNCTION_TABLE[r314](r310);r316=r315;r317=HEAP8[r316];r318=r317&1;r319=r318<<24>>24==0;if(r319){r320=r317&255;r321=r320>>>1;r322=r321}else{r323=r315+4|0;r324=HEAP32[r323>>2];r322=r324}r325=r315+12|0;r326=r325;r327=HEAP8[r326];r328=r327&1;r329=r328<<24>>24==0;if(r329){r330=r327&255;r331=r330>>>1;r332=r331}else{r333=r315+16|0;r334=HEAP32[r333>>2];r332=r334}r335=-r332|0;r336=(r322|0)==(r335|0);if(r336){r337=HEAP32[r6>>2];r338=r337|4;HEAP32[r6>>2]=r338;break L10}r339=r315+24|0;r340=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r309,r315,r339,r54,r6,0);r341=r340;r342=r315;r343=r341-r342|0;r344=(r340|0)==(r315|0);do{if(r344){r345=HEAP32[r307>>2];r346=(r345|0)==12;if(!r346){break}HEAP32[r307>>2]=0;break L10}}while(0);r347=(r343|0)==12;if(!r347){break L10}r348=HEAP32[r307>>2];r349=(r348|0)<12;if(!r349){break L10}r350=r348+12|0;HEAP32[r307>>2]=r350;break};case 84:{r351=r3|0;r352=HEAP32[r351>>2];r353=r4|0;r354=HEAP32[r353>>2];__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r19,r2,r352,r354,r5,r6,r7,51856,51864);r355=r19|0;r356=HEAP32[r355>>2];HEAP32[r351>>2]=r356;break};case 119:{r357=r4|0;r358=HEAP32[r357>>2];r359=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r358,r6,r54,1);r360=HEAP32[r6>>2];r361=r360&4;r362=(r361|0)==0;r363=(r359|0)<7;r364=r362&r363;if(r364){r365=r7+24|0;HEAP32[r365>>2]=r359;break L10}else{r366=r360|4;HEAP32[r6>>2]=r366;break L10}break};case 121:{r367=r7+20|0;r368=r4|0;r369=HEAP32[r368>>2];r370=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r369,r6,r54,4);r371=HEAP32[r6>>2];r372=r371&4;r373=(r372|0)==0;if(!r373){break L10}r374=(r370|0)<69;if(r374){r375=r370+2e3|0;r376=r375}else{r377=r370-69|0;r378=r377>>>0<31;r379=r370+1900|0;r380=r378?r379:r370;r376=r380}r381=r376-1900|0;HEAP32[r367>>2]=r381;break};case 98:case 66:case 104:{r382=r4|0;r383=HEAP32[r382>>2];r384=r2+8|0;r385=r384;r386=HEAP32[r385>>2];r387=r386+4|0;r388=HEAP32[r387>>2];r389=FUNCTION_TABLE[r388](r384);r390=r389+288|0;r391=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r383,r389,r390,r54,r6,0);r392=r391;r393=r389;r394=r392-r393|0;r395=(r394|0)<288;if(!r395){break L10}r396=r7+16|0;r397=(r394|0)/12&-1;r398=(r397|0)%12&-1;HEAP32[r396>>2]=r398;break};case 89:{r399=r4|0;r400=HEAP32[r399>>2];r401=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r400,r6,r54,4);r402=HEAP32[r6>>2];r403=r402&4;r404=(r403|0)==0;if(!r404){break L10}r405=r7+20|0;r406=r401-1900|0;HEAP32[r405>>2]=r406;break};case 114:{r407=r3|0;r408=HEAP32[r407>>2];r409=r4|0;r410=HEAP32[r409>>2];__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r17,r2,r408,r410,r5,r6,r7,51872,51883);r411=r17|0;r412=HEAP32[r411>>2];HEAP32[r407>>2]=r412;break};case 82:{r413=r3|0;r414=HEAP32[r413>>2];r415=r4|0;r416=HEAP32[r415>>2];__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(r18,r2,r414,r416,r5,r6,r7,51864,51869);r417=r18|0;r418=HEAP32[r417>>2];HEAP32[r413>>2]=r418;break};case 100:case 101:{r419=r7+12|0;r420=r4|0;r421=HEAP32[r420>>2];r422=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r421,r6,r54,2);r423=HEAP32[r6>>2];r424=r423&4;r425=(r424|0)==0;do{if(r425){r426=r422-1|0;r427=r426>>>0<31;if(!r427){break}HEAP32[r419>>2]=r422;break L10}}while(0);r428=r423|4;HEAP32[r6>>2]=r428;break};case 106:{r429=r4|0;r430=HEAP32[r429>>2];r431=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r430,r6,r54,3);r432=HEAP32[r6>>2];r433=r432&4;r434=(r433|0)==0;r435=(r431|0)<366;r436=r434&r435;if(r436){r437=r7+28|0;HEAP32[r437>>2]=r431;break L10}else{r438=r432|4;HEAP32[r6>>2]=r438;break L10}break};case 37:{r439=r4|0;r440=HEAP32[r439>>2];r441=r3|0;r442=HEAP32[r441>>2];r443=(r442|0)==0;do{if(r443){r444=0}else{r445=r442+12|0;r446=HEAP32[r445>>2];r447=r442+16|0;r448=HEAP32[r447>>2];r449=(r446|0)==(r448|0);if(!r449){r444=r442;break}r450=r442;r451=HEAP32[r450>>2];r452=r451+36|0;r453=HEAP32[r452>>2];r454=FUNCTION_TABLE[r453](r442);r455=(r454|0)==-1;if(r455){HEAP32[r441>>2]=0;r444=0;break}else{r456=HEAP32[r441>>2];r444=r456;break}}}while(0);r457=(r444|0)==0;r458=(r440|0)==0;do{if(r458){r10=118}else{r459=r440+12|0;r460=HEAP32[r459>>2];r461=r440+16|0;r462=HEAP32[r461>>2];r463=(r460|0)==(r462|0);if(r463){r464=r440;r465=HEAP32[r464>>2];r466=r465+36|0;r467=HEAP32[r466>>2];r468=FUNCTION_TABLE[r467](r440);r469=(r468|0)==-1;if(r469){r10=118;break}}if(r457){r470=r440}else{r10=119}}}while(0);if(r10==118){if(r457){r10=119}else{r470=0}}if(r10==119){r471=HEAP32[r6>>2];r472=r471|6;HEAP32[r6>>2]=r472;break L10}r473=HEAP32[r441>>2];r474=r473+12|0;r475=HEAP32[r474>>2];r476=r473+16|0;r477=HEAP32[r476>>2];r478=(r475|0)==(r477|0);if(r478){r479=r473;r480=HEAP32[r479>>2];r481=r480+36|0;r482=HEAP32[r481>>2];r483=FUNCTION_TABLE[r482](r473);r484=r483&255;r485=r484}else{r486=HEAP8[r475];r485=r486}r487=r52;r488=HEAP32[r487>>2];r489=r488+36|0;r490=HEAP32[r489>>2];r491=FUNCTION_TABLE[r490](r54,r485,0);r492=r491<<24>>24==37;if(!r492){r493=HEAP32[r6>>2];r494=r493|4;HEAP32[r6>>2]=r494;break L10}r495=HEAP32[r441>>2];r496=r495+12|0;r497=HEAP32[r496>>2];r498=r495+16|0;r499=HEAP32[r498>>2];r500=(r497|0)==(r499|0);if(r500){r501=r495;r502=HEAP32[r501>>2];r503=r502+40|0;r504=HEAP32[r503>>2];r505=FUNCTION_TABLE[r504](r495)}else{r506=r497+1|0;HEAP32[r496>>2]=r506}r507=HEAP32[r441>>2];r508=(r507|0)==0;do{if(r508){r509=0}else{r510=r507+12|0;r511=HEAP32[r510>>2];r512=r507+16|0;r513=HEAP32[r512>>2];r514=(r511|0)==(r513|0);if(!r514){r509=r507;break}r515=r507;r516=HEAP32[r515>>2];r517=r516+36|0;r518=HEAP32[r517>>2];r519=FUNCTION_TABLE[r518](r507);r520=(r519|0)==-1;if(r520){HEAP32[r441>>2]=0;r509=0;break}else{r521=HEAP32[r441>>2];r509=r521;break}}}while(0);r522=(r509|0)==0;r523=(r470|0)==0;do{if(r523){r10=137}else{r524=r470+12|0;r525=HEAP32[r524>>2];r526=r470+16|0;r527=HEAP32[r526>>2];r528=(r525|0)==(r527|0);if(r528){r529=r470;r530=HEAP32[r529>>2];r531=r530+36|0;r532=HEAP32[r531>>2];r533=FUNCTION_TABLE[r532](r470);r534=(r533|0)==-1;if(r534){r10=137;break}}if(r522){break L10}}}while(0);if(r10==137){if(!r522){break L10}}r535=HEAP32[r6>>2];r536=r535|2;HEAP32[r6>>2]=r536;break};default:{r537=HEAP32[r6>>2];r538=r537|4;HEAP32[r6>>2]=r538}}}while(0);r539=r3|0;r540=HEAP32[r539>>2];r541=r1|0;HEAP32[r541>>2]=r540;STACKTOP=r11;return}}while(0);r542=___cxa_allocate_exception(4);r543=r542;HEAP32[r543>>2]=53856;___cxa_throw(r542,62200,872)}function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r6=0;r7=r1|0;r1=HEAP32[r7>>2];do{if((r1|0)==0){r8=0}else{if((HEAP32[r1+12>>2]|0)!=(HEAP32[r1+16>>2]|0)){r8=r1;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r1)|0)==-1){HEAP32[r7>>2]=0;r8=0;break}else{r8=HEAP32[r7>>2];break}}}while(0);r1=(r8|0)==0;do{if((r2|0)==0){r6=10}else{if((HEAP32[r2+12>>2]|0)==(HEAP32[r2+16>>2]|0)){if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+36>>2]](r2)|0)==-1){r6=10;break}}if(r1){r9=r2}else{r6=11}}}while(0);if(r6==10){if(r1){r6=11}else{r9=0}}if(r6==11){HEAP32[r3>>2]=HEAP32[r3>>2]|6;r10=0;return r10}r1=HEAP32[r7>>2];r2=HEAP32[r1+12>>2];if((r2|0)==(HEAP32[r1+16>>2]|0)){r11=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r1)&255}else{r11=HEAP8[r2]}do{if(r11<<24>>24>-1){r2=r4+8|0;if((HEAP16[HEAP32[r2>>2]+(r11<<24>>24<<1)>>1]&2048)==0){break}r1=r4;r8=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r4,r11,0)<<24>>24;r12=HEAP32[r7>>2];r13=r12+12|0;r14=HEAP32[r13>>2];if((r14|0)==(HEAP32[r12+16>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+40>>2]](r12);r15=r8;r16=r5;r17=r9;r18=r9}else{HEAP32[r13>>2]=r14+1;r15=r8;r16=r5;r17=r9;r18=r9}while(1){r19=r15-48|0;r8=r16-1|0;r14=HEAP32[r7>>2];do{if((r14|0)==0){r20=0}else{if((HEAP32[r14+12>>2]|0)!=(HEAP32[r14+16>>2]|0)){r20=r14;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+36>>2]](r14)|0)==-1){HEAP32[r7>>2]=0;r20=0;break}else{r20=HEAP32[r7>>2];break}}}while(0);r14=(r20|0)==0;do{if((r17|0)==0){r21=0;r22=r18}else{if((HEAP32[r17+12>>2]|0)!=(HEAP32[r17+16>>2]|0)){r21=r17;r22=r18;break}r13=(FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)|0)==-1;r21=r13?0:r18;r22=r13?0:r18}}while(0);r23=HEAP32[r7>>2];if(!((r14^(r21|0)==0)&(r8|0)>0)){r6=38;break}r13=HEAP32[r23+12>>2];if((r13|0)==(HEAP32[r23+16>>2]|0)){r24=FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)&255}else{r24=HEAP8[r13]}if(r24<<24>>24<=-1){r10=r19;r6=49;break}if((HEAP16[HEAP32[r2>>2]+(r24<<24>>24<<1)>>1]&2048)==0){r10=r19;r6=49;break}r13=(FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r4,r24,0)<<24>>24)+(r19*10&-1)|0;r12=HEAP32[r7>>2];r25=r12+12|0;r26=HEAP32[r25>>2];if((r26|0)==(HEAP32[r12+16>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+40>>2]](r12);r15=r13;r16=r8;r17=r21;r18=r22;continue}else{HEAP32[r25>>2]=r26+1;r15=r13;r16=r8;r17=r21;r18=r22;continue}}if(r6==38){do{if((r23|0)==0){r27=0}else{if((HEAP32[r23+12>>2]|0)!=(HEAP32[r23+16>>2]|0)){r27=r23;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)|0)==-1){HEAP32[r7>>2]=0;r27=0;break}else{r27=HEAP32[r7>>2];break}}}while(0);r1=(r27|0)==0;do{if((r22|0)==0){r6=47}else{if((HEAP32[r22+12>>2]|0)==(HEAP32[r22+16>>2]|0)){if((FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)|0)==-1){r6=47;break}}if(r1){r10=r19}else{break}return r10}}while(0);do{if(r6==47){if(r1){break}else{r10=r19}return r10}}while(0);HEAP32[r3>>2]=HEAP32[r3>>2]|2;r10=r19;return r10}else if(r6==49){return r10}}}while(0);HEAP32[r3>>2]=HEAP32[r3>>2]|4;r10=0;return r10}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r1,r2,r3,r4,r5,r6,r7,r8,r9){var r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74;r10=0;r11=STACKTOP;STACKTOP=STACKTOP+40|0;r12=r11;r13=r11+16;r14=r11+24;r15=r11+32;r16=HEAP32[r5+28>>2];r17=r16+4|0;tempValue=HEAP32[r17>>2],HEAP32[r17>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r12>>2]=71448;HEAP32[r12+4>>2]=46;HEAP32[r12+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r12)}r12=HEAP32[71452>>2]-1|0;r17=HEAP32[r16+8>>2];do{if(HEAP32[r16+12>>2]-r17>>2>>>0>r12>>>0){r18=HEAP32[r17+(r12<<2)>>2];if((r18|0)==0){break}r19=r18;r20=r16+4|0;if(((tempValue=HEAP32[r20>>2],HEAP32[r20>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+8>>2]](r16)}HEAP32[r6>>2]=0;L10:do{if((r8|0)==(r9|0)){r21=r3;r22=r4}else{r20=r18;r23=r18;r24=r18;r25=r2;r26=r14|0;r27=r15|0;r28=r13|0;r29=r8;r30=0;r31=r4;r32=r3;L12:while(1){r33=r30;r34=r31;r35=r32;while(1){if((r33|0)!=0){r21=r35;r22=r34;break L10}if((r35|0)==0){r36=1;r37=0;r38=0}else{r39=HEAP32[r35+12>>2];if((r39|0)==(HEAP32[r35+16>>2]|0)){r40=FUNCTION_TABLE[HEAP32[HEAP32[r35>>2]+36>>2]](r35)}else{r40=HEAP32[r39>>2]}r39=(r40|0)==-1;r36=r39?1:0;r37=r39?0:r35;r38=r39?0:r35}do{if((r34|0)==0){r10=23}else{r39=HEAP32[r34+12>>2];if((r39|0)==(HEAP32[r34+16>>2]|0)){r41=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)}else{r41=HEAP32[r39>>2]}if((r41|0)==-1){r10=23;break}if(r36){r42=r34}else{r43=r34;r10=25;break L12}}}while(0);if(r10==23){r10=0;if(r36){r43=0;r10=25;break L12}else{r42=0}}if(FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+52>>2]](r19,HEAP32[r29>>2],0)<<24>>24==37){r10=30;break}if(FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+12>>2]](r19,8192,HEAP32[r29>>2])){r44=r29;r10=40;break}r45=r37+12|0;r39=HEAP32[r45>>2];r46=r37+16|0;if((r39|0)==(HEAP32[r46>>2]|0)){r47=FUNCTION_TABLE[HEAP32[HEAP32[r37>>2]+36>>2]](r37)}else{r47=HEAP32[r39>>2]}r39=FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+28>>2]](r19,r47);if((r39|0)==(FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+28>>2]](r19,HEAP32[r29>>2])|0)){r10=66;break}HEAP32[r6>>2]=4;r33=4;r34=r42;r35=r38}L41:do{if(r10==30){r10=0;r35=r29+4|0;if((r35|0)==(r9|0)){r10=31;break L12}r34=FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+52>>2]](r19,HEAP32[r35>>2],0);if(r34<<24>>24==69|r34<<24>>24==48){r33=r29+8|0;if((r33|0)==(r9|0)){r10=34;break L12}r48=r34;r49=FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+52>>2]](r19,HEAP32[r33>>2],0);r50=r33}else{r48=0;r49=r34;r50=r35}r35=HEAP32[HEAP32[r25>>2]+36>>2];HEAP32[r26>>2]=r37;HEAP32[r27>>2]=r42;FUNCTION_TABLE[r35](r13,r2,r14,r15,r5,r6,r7,r49,r48);r51=r50+4|0;r52=r42;r53=HEAP32[r28>>2]}else if(r10==40){while(1){r10=0;r35=r44+4|0;if((r35|0)==(r9|0)){r54=r9;break}if(FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+12>>2]](r19,8192,HEAP32[r35>>2])){r44=r35;r10=40}else{r54=r35;break}}r35=r37;r34=r42;r33=r42;r39=r42;r55=r38;while(1){if((r35|0)==0){r56=1;r57=0;r58=r55}else{r59=HEAP32[r35+12>>2];if((r59|0)==(HEAP32[r35+16>>2]|0)){r60=FUNCTION_TABLE[HEAP32[HEAP32[r35>>2]+36>>2]](r35)}else{r60=HEAP32[r59>>2]}r59=(r60|0)==-1;r56=r59?1:0;r57=r59?0:r35;r58=r59?0:r55}do{if((r34|0)==0){r61=r33;r62=r39;r10=53}else{r59=HEAP32[r34+12>>2];if((r59|0)==(HEAP32[r34+16>>2]|0)){r63=FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+36>>2]](r34)}else{r63=HEAP32[r59>>2]}if((r63|0)==-1){r61=0;r62=0;r10=53;break}if(r56^(r33|0)==0){r64=r33;r65=r33;r66=r39}else{r51=r54;r52=r39;r53=r58;break L41}}}while(0);if(r10==53){r10=0;if(r56){r51=r54;r52=r62;r53=r58;break L41}else{r64=0;r65=r61;r66=r62}}r59=r57+12|0;r67=HEAP32[r59>>2];r68=r57+16|0;if((r67|0)==(HEAP32[r68>>2]|0)){r69=FUNCTION_TABLE[HEAP32[HEAP32[r57>>2]+36>>2]](r57)}else{r69=HEAP32[r67>>2]}if(!FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+12>>2]](r19,8192,r69)){r51=r54;r52=r66;r53=r58;break L41}r67=HEAP32[r59>>2];if((r67|0)==(HEAP32[r68>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r57>>2]+40>>2]](r57);r35=r57;r34=r64;r33=r65;r39=r66;r55=r58;continue}else{HEAP32[r59>>2]=r67+4;r35=r57;r34=r64;r33=r65;r39=r66;r55=r58;continue}}}else if(r10==66){r10=0;r55=HEAP32[r45>>2];if((r55|0)==(HEAP32[r46>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r37>>2]+40>>2]](r37)}else{HEAP32[r45>>2]=r55+4}r51=r29+4|0;r52=r42;r53=r38}}while(0);if((r51|0)==(r9|0)){r21=r53;r22=r52;break L10}r29=r51;r30=HEAP32[r6>>2];r31=r52;r32=r53}if(r10==25){HEAP32[r6>>2]=4;r21=r37;r22=r43;break}else if(r10==31){HEAP32[r6>>2]=4;r21=r37;r22=r42;break}else if(r10==34){HEAP32[r6>>2]=4;r21=r37;r22=r42;break}}}while(0);if((r21|0)==0){r70=1;r71=0}else{r19=HEAP32[r21+12>>2];if((r19|0)==(HEAP32[r21+16>>2]|0)){r72=FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+36>>2]](r21)}else{r72=HEAP32[r19>>2]}r19=(r72|0)==-1;r70=r19?1:0;r71=r19?0:r21}do{if((r22|0)==0){r10=81}else{r19=HEAP32[r22+12>>2];if((r19|0)==(HEAP32[r22+16>>2]|0)){r73=FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+36>>2]](r22)}else{r73=HEAP32[r19>>2]}if((r73|0)==-1){r10=81;break}if(!r70){break}r74=r1|0;HEAP32[r74>>2]=r71;STACKTOP=r11;return}}while(0);do{if(r10==81){if(r70){break}r74=r1|0;HEAP32[r74>>2]=r71;STACKTOP=r11;return}}while(0);HEAP32[r6>>2]=HEAP32[r6>>2]|2;r74=r1|0;HEAP32[r74>>2]=r71;STACKTOP=r11;return}}while(0);r11=___cxa_allocate_exception(4);HEAP32[r11>>2]=53856;___cxa_throw(r11,62200,872)}function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(r1){return}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(r1){return 2}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9;r8=STACKTOP;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r1,r2,HEAP32[r3>>2],HEAP32[r4>>2],r5,r6,r7,51824,51856);STACKTOP=r8;return}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12;r8=STACKTOP;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r2+8|0;r10=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+20>>2]](r9);r9=HEAP8[r10];if((r9&1)==0){r11=(r9&255)>>>1;r12=r10+4|0}else{r11=HEAP32[r10+4>>2];r12=HEAP32[r10+8>>2]}__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r1,r2,HEAP32[r3>>2],HEAP32[r4>>2],r5,r6,r7,r12,r12+(r11<<2)|0);STACKTOP=r8;return}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r8=STACKTOP;STACKTOP=STACKTOP+16|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=HEAP32[r5+28>>2];r5=r10+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r9>>2]=71448;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r9)}r9=HEAP32[71452>>2]-1|0;r5=HEAP32[r10+8>>2];do{if(HEAP32[r10+12>>2]-r5>>2>>>0>r9>>>0){r11=HEAP32[r5+(r9<<2)>>2];if((r11|0)==0){break}r12=r10+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10)}r12=HEAP32[r4>>2];r13=r2+8|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]>>2]](r13);r13=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r12,r14,r14+168|0,r11,r6,0)-r14|0;if((r13|0)>=168){r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}HEAP32[r7+24>>2]=((r13|0)/12&-1|0)%7&-1;r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r8=STACKTOP;STACKTOP=STACKTOP+16|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r9>>2];r9=r8;r10=HEAP32[r5+28>>2];r5=r10+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r9>>2]=71448;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r9)}r9=HEAP32[71452>>2]-1|0;r5=HEAP32[r10+8>>2];do{if(HEAP32[r10+12>>2]-r5>>2>>>0>r9>>>0){r11=HEAP32[r5+(r9<<2)>>2];if((r11|0)==0){break}r12=r10+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10)}r12=HEAP32[r4>>2];r13=r2+8|0;r14=FUNCTION_TABLE[HEAP32[HEAP32[r13>>2]+4>>2]](r13);r13=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r12,r14,r14+288|0,r11,r6,0)-r14|0;if((r13|0)>=288){r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}HEAP32[r7+16>>2]=((r13|0)/12&-1|0)%12&-1;r15=r3|0;r16=HEAP32[r15>>2];r17=r1|0;HEAP32[r17>>2]=r16;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15;r2=STACKTOP;STACKTOP=STACKTOP+16|0;r8=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r8>>2];r8=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r8>>2];r8=r2;r9=HEAP32[r5+28>>2];r5=r9+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r8>>2]=71448;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r8)}r8=HEAP32[71452>>2]-1|0;r5=HEAP32[r9+8>>2];do{if(HEAP32[r9+12>>2]-r5>>2>>>0>r8>>>0){r10=HEAP32[r5+(r8<<2)>>2];if((r10|0)==0){break}r11=r9+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+8>>2]](r9)}r11=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,HEAP32[r4>>2],r6,r10,4);if((HEAP32[r6>>2]&4|0)!=0){r12=r3|0;r13=HEAP32[r12>>2];r14=r1|0;HEAP32[r14>>2]=r13;STACKTOP=r2;return}if((r11|0)<69){r15=r11+2e3|0}else{r15=(r11-69|0)>>>0<31?r11+1900|0:r11}HEAP32[r7+20>>2]=r15-1900;r12=r3|0;r13=HEAP32[r12>>2];r14=r1|0;HEAP32[r14>>2]=r13;STACKTOP=r2;return}}while(0);r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53856;___cxa_throw(r2,62200,872)}function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(r1,r2,r3,r4,r5,r6,r7,r8,r9){var r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543,r544,r545,r546,r547,r548,r549,r550,r551;r10=0;r11=STACKTOP;STACKTOP=STACKTOP+88|0;r12=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r12>>2];r12=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r12>>2];r13=r11;r14=r11+16;r15=r11+24;r16=r11+32;r17=r11+40;r18=r11+48;r19=r11+56;r20=r11+64;r21=r11+72;r22=r11+80;HEAP32[r6>>2]=0;r23=r5+28|0;r24=HEAP32[r23>>2];r25=r24+4|0;r26=r25;r27=(tempValue=HEAP32[r26>>2],HEAP32[r26>>2]=tempValue+1,tempValue);r28=r13;r29=12;r30=0;r31=HEAP32[71448>>2];r32=(r31|0)==-1;if(!r32){r33=r13|0;HEAP32[r33>>2]=71448;r34=r13+4|0;HEAP32[r34>>2]=46;r35=r13+8|0;HEAP32[r35>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r28)}r36=12;r37=0;r38=HEAP32[71452>>2];r39=r38-1|0;r40=r24+12|0;r41=r40;r42=HEAP32[r41>>2];r43=r24+8|0;r44=r43;r45=HEAP32[r44>>2];r46=r42;r47=r45;r48=r46-r47|0;r49=r48>>2;r50=r49>>>0>r39>>>0;do{if(r50){r51=r45+(r39<<2)|0;r52=HEAP32[r51>>2];r53=(r52|0)==0;if(r53){break}r54=r52;r55=r24+4|0;r56=r55;r57=(tempValue=HEAP32[r56>>2],HEAP32[r56>>2]=tempValue+ -1,tempValue);r58=(r57|0)==0;if(r58){r59=r24;r60=r24;r61=HEAP32[r60>>2];r62=r61+8|0;r63=HEAP32[r62>>2];FUNCTION_TABLE[r63](r59)}r64=r8<<24>>24;L10:do{switch(r64|0){case 68:{r65=r3|0;r66=HEAP32[r65>>2];r67=r4|0;r68=HEAP32[r67>>2];__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r15,r2,r66,r68,r5,r6,r7,51792,51824);r69=r15|0;r70=HEAP32[r69>>2];HEAP32[r65>>2]=r70;break};case 98:case 66:case 104:{r71=r4|0;r72=HEAP32[r71>>2];r73=r2+8|0;r74=r73;r75=HEAP32[r74>>2];r76=r75+4|0;r77=HEAP32[r76>>2];r78=FUNCTION_TABLE[r77](r73);r79=r78+288|0;r80=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r72,r78,r79,r54,r6,0);r81=r80;r82=r78;r83=r81-r82|0;r84=(r83|0)<288;if(!r84){break L10}r85=r7+16|0;r86=(r83|0)/12&-1;r87=(r86|0)%12&-1;HEAP32[r85>>2]=r87;break};case 70:{r88=r3|0;r89=HEAP32[r88>>2];r90=r4|0;r91=HEAP32[r90>>2];__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r16,r2,r89,r91,r5,r6,r7,51656,51688);r92=r16|0;r93=HEAP32[r92>>2];HEAP32[r88>>2]=r93;break};case 114:{r94=r3|0;r95=HEAP32[r94>>2];r96=r4|0;r97=HEAP32[r96>>2];__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r17,r2,r95,r97,r5,r6,r7,51744,51788);r98=r17|0;r99=HEAP32[r98>>2];HEAP32[r94>>2]=r99;break};case 73:{r100=r7+8|0;r101=r4|0;r102=HEAP32[r101>>2];r103=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r102,r6,r54,2);r104=HEAP32[r6>>2];r105=r104&4;r106=(r105|0)==0;do{if(r106){r107=r103-1|0;r108=r107>>>0<12;if(!r108){break}HEAP32[r100>>2]=r103;break L10}}while(0);r109=r104|4;HEAP32[r6>>2]=r109;break};case 82:{r110=r3|0;r111=HEAP32[r110>>2];r112=r4|0;r113=HEAP32[r112>>2];__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r18,r2,r111,r113,r5,r6,r7,51720,51740);r114=r18|0;r115=HEAP32[r114>>2];HEAP32[r110>>2]=r115;break};case 83:{r116=r4|0;r117=HEAP32[r116>>2];r118=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r117,r6,r54,2);r119=HEAP32[r6>>2];r120=r119&4;r121=(r120|0)==0;r122=(r118|0)<61;r123=r121&r122;if(r123){r124=r7|0;HEAP32[r124>>2]=r118;break L10}else{r125=r119|4;HEAP32[r6>>2]=r125;break L10}break};case 84:{r126=r3|0;r127=HEAP32[r126>>2];r128=r4|0;r129=HEAP32[r128>>2];__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r19,r2,r127,r129,r5,r6,r7,51688,51720);r130=r19|0;r131=HEAP32[r130>>2];HEAP32[r126>>2]=r131;break};case 119:{r132=r4|0;r133=HEAP32[r132>>2];r134=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r133,r6,r54,1);r135=HEAP32[r6>>2];r136=r135&4;r137=(r136|0)==0;r138=(r134|0)<7;r139=r137&r138;if(r139){r140=r7+24|0;HEAP32[r140>>2]=r134;break L10}else{r141=r135|4;HEAP32[r6>>2]=r141;break L10}break};case 106:{r142=r4|0;r143=HEAP32[r142>>2];r144=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r143,r6,r54,3);r145=HEAP32[r6>>2];r146=r145&4;r147=(r146|0)==0;r148=(r144|0)<366;r149=r147&r148;if(r149){r150=r7+28|0;HEAP32[r150>>2]=r144;break L10}else{r151=r145|4;HEAP32[r6>>2]=r151;break L10}break};case 112:{r152=r7+8|0;r153=r4|0;r154=HEAP32[r153>>2];r155=r2+8|0;r156=r155;r157=HEAP32[r156>>2];r158=r157+8|0;r159=HEAP32[r158>>2];r160=FUNCTION_TABLE[r159](r155);r161=r160;r162=HEAP8[r161];r163=r162&1;r164=r163<<24>>24==0;if(r164){r165=r162&255;r166=r165>>>1;r167=r166}else{r168=r160+4|0;r169=HEAP32[r168>>2];r167=r169}r170=r160+12|0;r171=r170;r172=HEAP8[r171];r173=r172&1;r174=r173<<24>>24==0;if(r174){r175=r172&255;r176=r175>>>1;r177=r176}else{r178=r160+16|0;r179=HEAP32[r178>>2];r177=r179}r180=-r177|0;r181=(r167|0)==(r180|0);if(r181){r182=HEAP32[r6>>2];r183=r182|4;HEAP32[r6>>2]=r183;break L10}r184=r160+24|0;r185=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r154,r160,r184,r54,r6,0);r186=r185;r187=r160;r188=r186-r187|0;r189=(r185|0)==(r160|0);do{if(r189){r190=HEAP32[r152>>2];r191=(r190|0)==12;if(!r191){break}HEAP32[r152>>2]=0;break L10}}while(0);r192=(r188|0)==12;if(!r192){break L10}r193=HEAP32[r152>>2];r194=(r193|0)<12;if(!r194){break L10}r195=r193+12|0;HEAP32[r152>>2]=r195;break};case 100:case 101:{r196=r7+12|0;r197=r4|0;r198=HEAP32[r197>>2];r199=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r198,r6,r54,2);r200=HEAP32[r6>>2];r201=r200&4;r202=(r201|0)==0;do{if(r202){r203=r199-1|0;r204=r203>>>0<31;if(!r204){break}HEAP32[r196>>2]=r199;break L10}}while(0);r205=r200|4;HEAP32[r6>>2]=r205;break};case 77:{r206=r4|0;r207=HEAP32[r206>>2];r208=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r207,r6,r54,2);r209=HEAP32[r6>>2];r210=r209&4;r211=(r210|0)==0;r212=(r208|0)<60;r213=r211&r212;if(r213){r214=r7+4|0;HEAP32[r214>>2]=r208;break L10}else{r215=r209|4;HEAP32[r6>>2]=r215;break L10}break};case 109:{r216=r4|0;r217=HEAP32[r216>>2];r218=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r217,r6,r54,2);r219=HEAP32[r6>>2];r220=r219&4;r221=(r220|0)==0;r222=(r218|0)<13;r223=r221&r222;if(r223){r224=r7+16|0;r225=r218-1|0;HEAP32[r224>>2]=r225;break L10}else{r226=r219|4;HEAP32[r6>>2]=r226;break L10}break};case 97:case 65:{r227=r4|0;r228=HEAP32[r227>>2];r229=r2+8|0;r230=r229;r231=HEAP32[r230>>2];r232=HEAP32[r231>>2];r233=FUNCTION_TABLE[r232](r229);r234=r233+168|0;r235=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(r3,r228,r233,r234,r54,r6,0);r236=r235;r237=r233;r238=r236-r237|0;r239=(r238|0)<168;if(!r239){break L10}r240=r7+24|0;r241=(r238|0)/12&-1;r242=(r241|0)%7&-1;HEAP32[r240>>2]=r242;break};case 121:{r243=r7+20|0;r244=r4|0;r245=HEAP32[r244>>2];r246=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r245,r6,r54,4);r247=HEAP32[r6>>2];r248=r247&4;r249=(r248|0)==0;if(!r249){break L10}r250=(r246|0)<69;if(r250){r251=r246+2e3|0;r252=r251}else{r253=r246-69|0;r254=r253>>>0<31;r255=r246+1900|0;r256=r254?r255:r246;r252=r256}r257=r252-1900|0;HEAP32[r243>>2]=r257;break};case 99:{r258=r2+8|0;r259=r258;r260=HEAP32[r259>>2];r261=r260+12|0;r262=HEAP32[r261>>2];r263=FUNCTION_TABLE[r262](r258);r264=r3|0;r265=HEAP32[r264>>2];r266=r4|0;r267=HEAP32[r266>>2];r268=r263;r269=HEAP8[r268];r270=r269&1;r271=r270<<24>>24==0;if(r271){r272=r263+4|0;r273=r269&255;r274=r273>>>1;r275=r274;r276=r272}else{r277=r263+8|0;r278=HEAP32[r277>>2];r279=r263+4|0;r280=HEAP32[r279>>2];r275=r280;r276=r278}r281=r276+(r275<<2)|0;__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r14,r2,r265,r267,r5,r6,r7,r276,r281);r282=r14|0;r283=HEAP32[r282>>2];HEAP32[r264>>2]=r283;break};case 110:case 116:{r284=r4|0;r285=HEAP32[r284>>2];r286=r3|0;r287=r52;r288=r285;L81:while(1){r289=HEAP32[r286>>2];r290=(r289|0)==0;do{if(r290){r291=1}else{r292=r289+12|0;r293=HEAP32[r292>>2];r294=r289+16|0;r295=HEAP32[r294>>2];r296=(r293|0)==(r295|0);if(r296){r297=r289;r298=HEAP32[r297>>2];r299=r298+36|0;r300=HEAP32[r299>>2];r301=FUNCTION_TABLE[r300](r289);r302=r301}else{r303=HEAP32[r293>>2];r302=r303}r304=(r302|0)==-1;if(r304){HEAP32[r286>>2]=0;r291=1;break}else{r305=HEAP32[r286>>2];r306=(r305|0)==0;r291=r306;break}}}while(0);r307=(r288|0)==0;do{if(r307){r10=56}else{r308=r288+12|0;r309=HEAP32[r308>>2];r310=r288+16|0;r311=HEAP32[r310>>2];r312=(r309|0)==(r311|0);if(r312){r313=r288;r314=HEAP32[r313>>2];r315=r314+36|0;r316=HEAP32[r315>>2];r317=FUNCTION_TABLE[r316](r288);r318=r317}else{r319=HEAP32[r309>>2];r318=r319}r320=(r318|0)==-1;if(r320){r10=56;break}if(r291){r321=r288}else{r322=r288;break L81}}}while(0);if(r10==56){r10=0;if(r291){r322=0;break}else{r321=0}}r323=HEAP32[r286>>2];r324=r323+12|0;r325=HEAP32[r324>>2];r326=r323+16|0;r327=HEAP32[r326>>2];r328=(r325|0)==(r327|0);if(r328){r329=r323;r330=HEAP32[r329>>2];r331=r330+36|0;r332=HEAP32[r331>>2];r333=FUNCTION_TABLE[r332](r323);r334=r333}else{r335=HEAP32[r325>>2];r334=r335}r336=HEAP32[r287>>2];r337=r336+12|0;r338=HEAP32[r337>>2];r339=FUNCTION_TABLE[r338](r54,8192,r334);if(!r339){r322=r321;break}r340=HEAP32[r286>>2];r341=r340+12|0;r342=HEAP32[r341>>2];r343=r340+16|0;r344=HEAP32[r343>>2];r345=(r342|0)==(r344|0);if(r345){r346=r340;r347=HEAP32[r346>>2];r348=r347+40|0;r349=HEAP32[r348>>2];r350=FUNCTION_TABLE[r349](r340);r288=r321;continue}else{r351=r342+4|0;HEAP32[r341>>2]=r351;r288=r321;continue}}r352=HEAP32[r286>>2];r353=(r352|0)==0;do{if(r353){r354=1}else{r355=r352+12|0;r356=HEAP32[r355>>2];r357=r352+16|0;r358=HEAP32[r357>>2];r359=(r356|0)==(r358|0);if(r359){r360=r352;r361=HEAP32[r360>>2];r362=r361+36|0;r363=HEAP32[r362>>2];r364=FUNCTION_TABLE[r363](r352);r365=r364}else{r366=HEAP32[r356>>2];r365=r366}r367=(r365|0)==-1;if(r367){HEAP32[r286>>2]=0;r354=1;break}else{r368=HEAP32[r286>>2];r369=(r368|0)==0;r354=r369;break}}}while(0);r370=(r322|0)==0;do{if(r370){r10=77}else{r371=r322+12|0;r372=HEAP32[r371>>2];r373=r322+16|0;r374=HEAP32[r373>>2];r375=(r372|0)==(r374|0);if(r375){r376=r322;r377=HEAP32[r376>>2];r378=r377+36|0;r379=HEAP32[r378>>2];r380=FUNCTION_TABLE[r379](r322);r381=r380}else{r382=HEAP32[r372>>2];r381=r382}r383=(r381|0)==-1;if(r383){r10=77;break}if(r354){break L10}}}while(0);if(r10==77){if(!r354){break L10}}r384=HEAP32[r6>>2];r385=r384|2;HEAP32[r6>>2]=r385;break};case 72:{r386=r4|0;r387=HEAP32[r386>>2];r388=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r387,r6,r54,2);r389=HEAP32[r6>>2];r390=r389&4;r391=(r390|0)==0;r392=(r388|0)<24;r393=r391&r392;if(r393){r394=r7+8|0;HEAP32[r394>>2]=r388;break L10}else{r395=r389|4;HEAP32[r6>>2]=r395;break L10}break};case 89:{r396=r4|0;r397=HEAP32[r396>>2];r398=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r3,r397,r6,r54,4);r399=HEAP32[r6>>2];r400=r399&4;r401=(r400|0)==0;if(!r401){break L10}r402=r7+20|0;r403=r398-1900|0;HEAP32[r402>>2]=r403;break};case 37:{r404=r4|0;r405=HEAP32[r404>>2];r406=r3|0;r407=HEAP32[r406>>2];r408=(r407|0)==0;do{if(r408){r409=1}else{r410=r407+12|0;r411=HEAP32[r410>>2];r412=r407+16|0;r413=HEAP32[r412>>2];r414=(r411|0)==(r413|0);if(r414){r415=r407;r416=HEAP32[r415>>2];r417=r416+36|0;r418=HEAP32[r417>>2];r419=FUNCTION_TABLE[r418](r407);r420=r419}else{r421=HEAP32[r411>>2];r420=r421}r422=(r420|0)==-1;if(r422){HEAP32[r406>>2]=0;r409=1;break}else{r423=HEAP32[r406>>2];r424=(r423|0)==0;r409=r424;break}}}while(0);r425=(r405|0)==0;do{if(r425){r10=127}else{r426=r405+12|0;r427=HEAP32[r426>>2];r428=r405+16|0;r429=HEAP32[r428>>2];r430=(r427|0)==(r429|0);if(r430){r431=r405;r432=HEAP32[r431>>2];r433=r432+36|0;r434=HEAP32[r433>>2];r435=FUNCTION_TABLE[r434](r405);r436=r435}else{r437=HEAP32[r427>>2];r436=r437}r438=(r436|0)==-1;if(r438){r10=127;break}if(r409){r439=r405}else{r10=129}}}while(0);if(r10==127){if(r409){r10=129}else{r439=0}}if(r10==129){r440=HEAP32[r6>>2];r441=r440|6;HEAP32[r6>>2]=r441;break L10}r442=HEAP32[r406>>2];r443=r442+12|0;r444=HEAP32[r443>>2];r445=r442+16|0;r446=HEAP32[r445>>2];r447=(r444|0)==(r446|0);if(r447){r448=r442;r449=HEAP32[r448>>2];r450=r449+36|0;r451=HEAP32[r450>>2];r452=FUNCTION_TABLE[r451](r442);r453=r452}else{r454=HEAP32[r444>>2];r453=r454}r455=r52;r456=HEAP32[r455>>2];r457=r456+52|0;r458=HEAP32[r457>>2];r459=FUNCTION_TABLE[r458](r54,r453,0);r460=r459<<24>>24==37;if(!r460){r461=HEAP32[r6>>2];r462=r461|4;HEAP32[r6>>2]=r462;break L10}r463=HEAP32[r406>>2];r464=r463+12|0;r465=HEAP32[r464>>2];r466=r463+16|0;r467=HEAP32[r466>>2];r468=(r465|0)==(r467|0);if(r468){r469=r463;r470=HEAP32[r469>>2];r471=r470+40|0;r472=HEAP32[r471>>2];r473=FUNCTION_TABLE[r472](r463)}else{r474=r465+4|0;HEAP32[r464>>2]=r474}r475=HEAP32[r406>>2];r476=(r475|0)==0;do{if(r476){r477=1}else{r478=r475+12|0;r479=HEAP32[r478>>2];r480=r475+16|0;r481=HEAP32[r480>>2];r482=(r479|0)==(r481|0);if(r482){r483=r475;r484=HEAP32[r483>>2];r485=r484+36|0;r486=HEAP32[r485>>2];r487=FUNCTION_TABLE[r486](r475);r488=r487}else{r489=HEAP32[r479>>2];r488=r489}r490=(r488|0)==-1;if(r490){HEAP32[r406>>2]=0;r477=1;break}else{r491=HEAP32[r406>>2];r492=(r491|0)==0;r477=r492;break}}}while(0);r493=(r439|0)==0;do{if(r493){r10=150}else{r494=r439+12|0;r495=HEAP32[r494>>2];r496=r439+16|0;r497=HEAP32[r496>>2];r498=(r495|0)==(r497|0);if(r498){r499=r439;r500=HEAP32[r499>>2];r501=r500+36|0;r502=HEAP32[r501>>2];r503=FUNCTION_TABLE[r502](r439);r504=r503}else{r505=HEAP32[r495>>2];r504=r505}r506=(r504|0)==-1;if(r506){r10=150;break}if(r477){break L10}}}while(0);if(r10==150){if(!r477){break L10}}r507=HEAP32[r6>>2];r508=r507|2;HEAP32[r6>>2]=r508;break};case 120:{r509=r2;r510=HEAP32[r509>>2];r511=r510+20|0;r512=HEAP32[r511>>2];r513=r3|0;r514=HEAP32[r513>>2];r515=r20|0;HEAP32[r515>>2]=r514;r516=r4|0;r517=HEAP32[r516>>2];r518=r21|0;HEAP32[r518>>2]=r517;FUNCTION_TABLE[r512](r1,r2,r20,r21,r5,r6,r7);STACKTOP=r11;return;break};case 88:{r519=r2+8|0;r520=r519;r521=HEAP32[r520>>2];r522=r521+24|0;r523=HEAP32[r522>>2];r524=FUNCTION_TABLE[r523](r519);r525=r3|0;r526=HEAP32[r525>>2];r527=r4|0;r528=HEAP32[r527>>2];r529=r524;r530=HEAP8[r529];r531=r530&1;r532=r531<<24>>24==0;if(r532){r533=r524+4|0;r534=r530&255;r535=r534>>>1;r536=r535;r537=r533}else{r538=r524+8|0;r539=HEAP32[r538>>2];r540=r524+4|0;r541=HEAP32[r540>>2];r536=r541;r537=r539}r542=r537+(r536<<2)|0;__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(r22,r2,r526,r528,r5,r6,r7,r537,r542);r543=r22|0;r544=HEAP32[r543>>2];HEAP32[r525>>2]=r544;break};default:{r545=HEAP32[r6>>2];r546=r545|4;HEAP32[r6>>2]=r546}}}while(0);r547=r3|0;r548=HEAP32[r547>>2];r549=r1|0;HEAP32[r549>>2]=r548;STACKTOP=r11;return}}while(0);r550=___cxa_allocate_exception(4);r551=r550;HEAP32[r551>>2]=53856;___cxa_throw(r550,62200,872)}function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30;r6=0;r7=r1|0;r1=HEAP32[r7>>2];do{if((r1|0)==0){r8=1}else{r9=HEAP32[r1+12>>2];if((r9|0)==(HEAP32[r1+16>>2]|0)){r10=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+36>>2]](r1)}else{r10=HEAP32[r9>>2]}if((r10|0)==-1){HEAP32[r7>>2]=0;r8=1;break}else{r8=(HEAP32[r7>>2]|0)==0;break}}}while(0);do{if((r2|0)==0){r6=13}else{r10=HEAP32[r2+12>>2];if((r10|0)==(HEAP32[r2+16>>2]|0)){r11=FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+36>>2]](r2)}else{r11=HEAP32[r10>>2]}if((r11|0)==-1){r6=13;break}if(r8){r12=r2}else{r6=15}}}while(0);if(r6==13){if(r8){r6=15}else{r12=0}}if(r6==15){HEAP32[r3>>2]=HEAP32[r3>>2]|6;r13=0;return r13}r8=HEAP32[r7>>2];r2=HEAP32[r8+12>>2];if((r2|0)==(HEAP32[r8+16>>2]|0)){r14=FUNCTION_TABLE[HEAP32[HEAP32[r8>>2]+36>>2]](r8)}else{r14=HEAP32[r2>>2]}r2=r4;if(!FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+12>>2]](r4,2048,r14)){HEAP32[r3>>2]=HEAP32[r3>>2]|4;r13=0;return r13}r8=r4;r11=FUNCTION_TABLE[HEAP32[HEAP32[r8>>2]+52>>2]](r4,r14,0)<<24>>24;r14=HEAP32[r7>>2];r10=r14+12|0;r1=HEAP32[r10>>2];if((r1|0)==(HEAP32[r14+16>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+40>>2]](r14);r15=r11;r16=r5;r17=r12;r18=r12}else{HEAP32[r10>>2]=r1+4;r15=r11;r16=r5;r17=r12;r18=r12}while(1){r19=r15-48|0;r12=r16-1|0;r5=HEAP32[r7>>2];do{if((r5|0)==0){r20=1}else{r11=HEAP32[r5+12>>2];if((r11|0)==(HEAP32[r5+16>>2]|0)){r21=FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+36>>2]](r5)}else{r21=HEAP32[r11>>2]}if((r21|0)==-1){HEAP32[r7>>2]=0;r20=1;break}else{r20=(HEAP32[r7>>2]|0)==0;break}}}while(0);if((r17|0)==0){r22=1;r23=0;r24=r18}else{r5=HEAP32[r17+12>>2];if((r5|0)==(HEAP32[r17+16>>2]|0)){r25=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r17)}else{r25=HEAP32[r5>>2]}r5=(r25|0)==-1;r22=r5?1:(r18|0)==0;r23=r5?0:r18;r24=r5?0:r18}r26=HEAP32[r7>>2];if(!((r20^r22)&(r12|0)>0)){break}r5=HEAP32[r26+12>>2];if((r5|0)==(HEAP32[r26+16>>2]|0)){r27=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)}else{r27=HEAP32[r5>>2]}if(!FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+12>>2]](r4,2048,r27)){r13=r19;r6=59;break}r5=(FUNCTION_TABLE[HEAP32[HEAP32[r8>>2]+52>>2]](r4,r27,0)<<24>>24)+(r19*10&-1)|0;r11=HEAP32[r7>>2];r1=r11+12|0;r10=HEAP32[r1>>2];if((r10|0)==(HEAP32[r11+16>>2]|0)){FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+40>>2]](r11);r15=r5;r16=r12;r17=r23;r18=r24;continue}else{HEAP32[r1>>2]=r10+4;r15=r5;r16=r12;r17=r23;r18=r24;continue}}if(r6==59){return r13}do{if((r26|0)==0){r28=1}else{r18=HEAP32[r26+12>>2];if((r18|0)==(HEAP32[r26+16>>2]|0)){r29=FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+36>>2]](r26)}else{r29=HEAP32[r18>>2]}if((r29|0)==-1){HEAP32[r7>>2]=0;r28=1;break}else{r28=(HEAP32[r7>>2]|0)==0;break}}}while(0);do{if((r24|0)==0){r6=56}else{r7=HEAP32[r24+12>>2];if((r7|0)==(HEAP32[r24+16>>2]|0)){r30=FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+36>>2]](r24)}else{r30=HEAP32[r7>>2]}if((r30|0)==-1){r6=56;break}if(r28){r13=r19}else{break}return r13}}while(0);do{if(r6==56){if(r28){break}else{r13=r19}return r13}}while(0);HEAP32[r3>>2]=HEAP32[r3>>2]|2;r13=r19;return r13}function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(r1){var r2,r3,r4;r2=r1+8|0;r3=HEAP32[r2>>2];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r4=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r4}}while(0);if((r3|0)!=(HEAP32[69912>>2]|0)){_freelocale(HEAP32[r2>>2])}if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(r1){var r2,r3;r2=r1+8|0;r1=HEAP32[r2>>2];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r3=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r3}}while(0);if((r1|0)==(HEAP32[69912>>2]|0)){return}_freelocale(HEAP32[r2>>2]);return}function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r5=STACKTOP;STACKTOP=STACKTOP+112|0;r4=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r4>>2];r4=r5;r9=r5+8;r10=r9|0;r11=r4|0;HEAP8[r11]=37;r12=r4+1|0;HEAP8[r12]=r7;r13=r4+2|0;HEAP8[r13]=r8;HEAP8[r4+3|0]=0;if(r8<<24>>24!=0){HEAP8[r12]=r8;HEAP8[r13]=r7}r7=_strftime_l(r10,100,r11,r6,HEAP32[r2+8>>2]);r2=r9+r7|0;r9=HEAP32[r3>>2];if((r7|0)==0){r14=r9;r15=r1|0;HEAP32[r15>>2]=r14;r16=100;r17=0;STACKTOP=r5;return}else{r18=r10;r19=r9;r20=r9}while(1){r9=HEAP8[r18];do{if((r19|0)==0){r21=0;r22=r20}else{r10=r19+24|0;r7=HEAP32[r10>>2];if((r7|0)==(HEAP32[r19+28>>2]|0)){r3=(FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+52>>2]](r19,r9&255)|0)==-1;r21=r3?0:r19;r22=r3?0:r20;break}else{HEAP32[r10>>2]=r7+1;HEAP8[r7]=r9;r21=r19;r22=r20;break}}}while(0);r9=r18+1|0;if((r9|0)==(r2|0)){r14=r22;break}else{r18=r9;r19=r21;r20=r22}}r15=r1|0;HEAP32[r15>>2]=r14;r16=100;r17=0;STACKTOP=r5;return}function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(r1){var r2,r3,r4;r2=r1+8|0;r3=HEAP32[r2>>2];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r4=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r4}}while(0);if((r3|0)!=(HEAP32[69912>>2]|0)){_freelocale(HEAP32[r2>>2])}if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(r1){var r2,r3;r2=r1+8|0;r1=HEAP32[r2>>2];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r3=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r3}}while(0);if((r1|0)==(HEAP32[69912>>2]|0)){return}_freelocale(HEAP32[r2>>2]);return}function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26;r5=STACKTOP;STACKTOP=STACKTOP+528|0;r4=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r4>>2];r4=r5;r9=r5+112;r10=r5+120;r11=r5+128;r12=r11|0;r13=r5+8|0;r14=r4|0;HEAP8[r14]=37;r15=r4+1|0;HEAP8[r15]=r7;r16=r4+2|0;HEAP8[r16]=r8;HEAP8[r4+3|0]=0;if(r8<<24>>24!=0){HEAP8[r15]=r8;HEAP8[r16]=r7}r7=r2+8|0;_strftime_l(r13,100,r14,r6,HEAP32[r7>>2]);HEAP32[r9>>2]=0;HEAP32[r9+4>>2]=0;HEAP32[r10>>2]=r13;r13=_uselocale(HEAP32[r7>>2]);r7=_mbsrtowcs(r12,r10,100,r9);if((r13|0)!=0){_uselocale(r13)}if((r7|0)==-1){__ZNSt3__121__throw_runtime_errorEPKc(19328)}r13=r11+(r7<<2)|0;r11=HEAP32[r3>>2];if((r7|0)==0){r17=r11;r18=r1|0;HEAP32[r18>>2]=r17;r19=400;r20=0;STACKTOP=r5;return}else{r21=r12;r22=r11;r23=r11}while(1){r11=HEAP32[r21>>2];if((r22|0)==0){r24=0;r25=r23}else{r12=r22+24|0;r7=HEAP32[r12>>2];if((r7|0)==(HEAP32[r22+28>>2]|0)){r26=FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+52>>2]](r22,r11)}else{HEAP32[r12>>2]=r7+4;HEAP32[r7>>2]=r11;r26=r11}r11=(r26|0)==-1;r24=r11?0:r22;r25=r11?0:r23}r11=r21+4|0;if((r11|0)==(r13|0)){r17=r25;break}else{r21=r11;r22=r24;r23=r25}}r18=r1|0;HEAP32[r18>>2]=r17;r19=400;r20=0;STACKTOP=r5;return}function __ZNSt3__110moneypunctIcLb0EED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__110moneypunctIcLb0EED1Ev(r1){return}function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv(r1){return 127}function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv(r1){return 127}function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv(r1,r2){HEAP8[r1]=2;r2=r1;HEAP8[r2+1|0]=45;HEAP8[r2+2|0]=0;return}function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv(r1){return 0}function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNSt3__110moneypunctIcLb1EED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__110moneypunctIcLb1EED1Ev(r1){return}function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv(r1){return 127}function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv(r1){return 127}function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv(r1,r2){HEAP8[r1]=2;r2=r1;HEAP8[r2+1|0]=45;HEAP8[r2+2|0]=0;return}function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv(r1){return 0}function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNSt3__110moneypunctIwLb0EED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__110moneypunctIwLb0EED1Ev(r1){return}function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv(r1){return 2147483647}function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv(r1){return 2147483647}function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv(r1,r2){var r3,r4;HEAP8[r1]=2;r2=r1+4|0;r1=1;r3=r2;while(1){r4=r1-1|0;HEAP32[r3>>2]=45;if((r4|0)==0){break}else{r1=r4;r3=r3+4|0}}HEAP32[r2+4>>2]=0;return}function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv(r1){return 0}function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNSt3__110moneypunctIwLb1EED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__110moneypunctIwLb1EED1Ev(r1){return}function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv(r1){return 2147483647}function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv(r1){return 2147483647}function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv(r1,r2){r2=r1;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return}function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv(r1,r2){var r3,r4;HEAP8[r1]=2;r2=r1+4|0;r1=1;r3=r2;while(1){r4=r1-1|0;HEAP32[r3>>2]=45;if((r4|0)==0){break}else{r1=r4;r3=r3+4|0}}HEAP32[r2+4>>2]=0;return}function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv(r1){return 0}function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv(r1,r2){r2=r1;tempBigInt=67109634;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;return}function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(r1){return}function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45;r2=0;r9=0;r10=STACKTOP;STACKTOP=STACKTOP+264|0;r11=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r11>>2];r11=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r11>>2];r11=r10;r12=r10+16;r13=r10+120;r14=r10+128;r15=r10+136;r16=r10+144;r17=r10+160;r18=r13|0;HEAP32[r18>>2]=r12;r19=r13+4|0;HEAP32[r19>>2]=706;r20=r12+100|0;r12=HEAP32[r6+28>>2];r21=r12;r22=r12+4|0;tempValue=HEAP32[r22>>2],HEAP32[r22>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r11>>2]=71456;HEAP32[r11+4>>2]=46;HEAP32[r11+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r11)}r11=HEAP32[71460>>2]-1|0;r22=HEAP32[r12+8>>2];do{if(HEAP32[r12+12>>2]-r22>>2>>>0>r11>>>0){r23=HEAP32[r22+(r11<<2)>>2];if((r23|0)==0){break}r24=r23;HEAP8[r15]=0;r25=r4|0;do{if(__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(r3,HEAP32[r25>>2],r5,r21,HEAP32[r6+4>>2],r7,r15,r24,r13,r14,r20)){r26=r16|0;FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+32>>2]](r24,51640,51650,r26);r27=r17|0;r28=HEAP32[r14>>2];r29=HEAP32[r18>>2];r30=r28-r29|0;do{if((r30|0)>98){r31=_malloc(r30+2|0);if((r31|0)!=0){r32=r31;r33=r31;break}r31=___cxa_allocate_exception(4);HEAP32[r31>>2]=53824;___cxa_throw(r31,62184,110)}else{r32=r27;r33=0}}while(0);if((HEAP8[r15]|0)==0){r34=r32}else{HEAP8[r32]=45;r34=r32+1|0}if(r29>>>0<r28>>>0){r30=r16+10|0;r31=r16;r35=r34;r36=r29;while(1){r37=HEAP8[r36];r38=r26;while(1){r39=r38+1|0;if((HEAP8[r38]|0)==r37<<24>>24){r40=r38;break}if((r39|0)==(r30|0)){r40=r30;break}else{r38=r39}}HEAP8[r35]=HEAP8[51640+(r40-r31)|0];r38=r36+1|0;r37=r35+1|0;if(r38>>>0<HEAP32[r14>>2]>>>0){r35=r37;r36=r38}else{r41=r37;break}}}else{r41=r34}HEAP8[r41]=0;r36=_sscanf(r27,44192,(r9=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r9>>2]=r8,r9));STACKTOP=r9;if((r36|0)==1){if((r33|0)==0){break}_free(r33);break}r36=___cxa_allocate_exception(8);HEAP32[r36>>2]=53888;r35=_strlen(42712);r31=r35+13|0;r30=(r31|0)==0?1:r31;while(1){r42=_malloc(r30);if((r42|0)!=0){r2=44;break}r31=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r31|0)==0){r2=36;break}FUNCTION_TABLE[r31]()}if(r2==36){r30=___cxa_allocate_exception(4);HEAP32[r30>>2]=53824;___cxa_throw(r30,62184,110)}else if(r2==44){HEAP32[r42+4>>2]=r35;HEAP32[r42>>2]=r35;r30=r42+12|0;HEAP32[r36+4>>2]=r30;HEAP32[r42+8>>2]=0;_memcpy(r30,42712,r35+1|0)|0;___cxa_throw(r36,62216,314)}}}while(0);r24=r3|0;r23=HEAP32[r24>>2];do{if((r23|0)==0){r43=0}else{if((HEAP32[r23+12>>2]|0)!=(HEAP32[r23+16>>2]|0)){r43=r23;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)|0)!=-1){r43=r23;break}HEAP32[r24>>2]=0;r43=0}}while(0);r24=(r43|0)==0;r23=HEAP32[r25>>2];do{if((r23|0)==0){r2=59}else{if((HEAP32[r23+12>>2]|0)!=(HEAP32[r23+16>>2]|0)){if(r24){break}else{r2=61;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)|0)==-1){HEAP32[r25>>2]=0;r2=59;break}else{if(r24){break}else{r2=61;break}}}}while(0);if(r2==59){if(r24){r2=61}}if(r2==61){HEAP32[r7>>2]=HEAP32[r7>>2]|2}HEAP32[r1>>2]=r43;r25=r12+4|0;if(((tempValue=HEAP32[r25>>2],HEAP32[r25>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+8>>2]](r12)}r25=HEAP32[r18>>2];HEAP32[r18>>2]=0;if((r25|0)==0){r44=100;r45=0;STACKTOP=r10;return}FUNCTION_TABLE[HEAP32[r19>>2]](r25);r44=100;r45=0;STACKTOP=r10;return}}while(0);r10=___cxa_allocate_exception(4);HEAP32[r10>>2]=53856;___cxa_throw(r10,62200,872)}function __ZNSt3__112__do_nothingEPv(r1){return}function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11){var r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543,r544,r545,r546,r547,r548,r549,r550,r551,r552,r553,r554,r555,r556,r557,r558,r559,r560,r561,r562,r563,r564,r565,r566,r567,r568,r569,r570,r571,r572,r573,r574,r575,r576,r577,r578,r579,r580,r581,r582,r583,r584,r585,r586,r587,r588,r589,r590,r591,r592,r593,r594,r595,r596,r597,r598,r599,r600,r601,r602,r603,r604,r605,r606,r607,r608,r609,r610,r611,r612,r613,r614,r615,r616,r617,r618,r619,r620,r621,r622,r623,r624,r625,r626,r627,r628,r629,r630,r631,r632,r633,r634,r635,r636,r637,r638,r639,r640,r641,r642,r643,r644,r645,r646,r647,r648,r649,r650,r651,r652,r653,r654,r655,r656,r657,r658,r659,r660,r661,r662,r663,r664,r665,r666,r667,r668,r669,r670,r671,r672,r673,r674,r675,r676,r677,r678,r679,r680,r681,r682,r683,r684,r685,r686,r687,r688,r689,r690,r691,r692,r693,r694,r695,r696,r697,r698,r699,r700,r701,r702,r703,r704,r705,r706,r707,r708,r709,r710,r711,r712,r713,r714,r715,r716,r717,r718,r719,r720,r721,r722,r723,r724,r725,r726,r727,r728,r729,r730,r731,r732,r733,r734,r735,r736,r737,r738,r739,r740,r741,r742,r743,r744,r745,r746,r747,r748,r749,r750,r751,r752,r753,r754,r755,r756,r757,r758,r759,r760,r761,r762,r763,r764,r765,r766,r767,r768,r769,r770,r771,r772,r773,r774,r775,r776,r777,r778,r779,r780,r781,r782,r783,r784,r785,r786,r787,r788,r789,r790,r791,r792,r793,r794,r795,r796,r797,r798,r799,r800,r801,r802,r803,r804,r805,r806,r807,r808,r809,r810,r811,r812,r813,r814,r815,r816,r817,r818,r819,r820,r821,r822,r823,r824,r825,r826,r827,r828,r829,r830,r831,r832,r833,r834,r835,r836,r837,r838,r839,r840,r841,r842,r843,r844,r845,r846,r847,r848,r849,r850,r851,r852,r853,r854,r855,r856,r857,r858,r859,r860,r861,r862,r863,r864,r865,r866,r867,r868,r869,r870,r871,r872,r873,r874,r875,r876,r877,r878,r879,r880,r881,r882,r883,r884,r885,r886,r887,r888,r889,r890,r891,r892,r893,r894,r895,r896,r897,r898,r899,r900,r901,r902,r903,r904,r905,r906,r907,r908,r909,r910,r911,r912,r913,r914,r915,r916,r917,r918,r919,r920,r921,r922,r923,r924,r925,r926,r927,r928,r929,r930,r931,r932,r933,r934,r935,r936,r937,r938,r939,r940,r941,r942,r943,r944,r945,r946,r947,r948,r949,r950,r951,r952,r953,r954,r955,r956,r957,r958,r959,r960,r961,r962,r963,r964,r965,r966,r967,r968,r969,r970,r971,r972,r973,r974,r975,r976,r977,r978,r979,r980,r981,r982,r983,r984,r985,r986,r987,r988,r989,r990,r991,r992,r993,r994,r995,r996,r997,r998,r999,r1000,r1001,r1002,r1003,r1004,r1005,r1006,r1007,r1008,r1009,r1010,r1011,r1012,r1013,r1014,r1015,r1016,r1017,r1018,r1019,r1020,r1021,r1022,r1023,r1024,r1025,r1026,r1027,r1028,r1029,r1030,r1031,r1032,r1033,r1034,r1035,r1036,r1037,r1038,r1039,r1040,r1041,r1042,r1043,r1044,r1045,r1046,r1047,r1048,r1049,r1050,r1051,r1052,r1053,r1054,r1055,r1056,r1057,r1058,r1059,r1060,r1061,r1062,r1063,r1064,r1065,r1066,r1067,r1068,r1069,r1070,r1071,r1072,r1073,r1074,r1075,r1076,r1077,r1078,r1079,r1080,r1081,r1082,r1083,r1084,r1085,r1086,r1087,r1088,r1089,r1090,r1091,r1092,r1093,r1094,r1095,r1096,r1097,r1098,r1099,r1100,r1101,r1102,r1103,r1104,r1105,r1106,r1107,r1108,r1109,r1110,r1111,r1112,r1113,r1114,r1115,r1116,r1117,r1118,r1119,r1120,r1121,r1122,r1123,r1124,r1125,r1126,r1127,r1128,r1129,r1130,r1131,r1132,r1133,r1134,r1135,r1136,r1137,r1138,r1139,r1140,r1141,r1142,r1143,r1144,r1145,r1146,r1147,r1148,r1149,r1150,r1151,r1152,r1153,r1154,r1155,r1156,r1157,r1158,r1159,r1160,r1161,r1162,r1163,r1164,r1165,r1166,r1167,r1168,r1169,r1170,r1171,r1172,r1173,r1174,r1175,r1176,r1177,r1178,r1179,r1180,r1181,r1182,r1183,r1184,r1185,r1186,r1187,r1188,r1189,r1190,r1191,r1192,r1193,r1194,r1195,r1196,r1197,r1198,r1199,r1200,r1201,r1202,r1203,r1204,r1205,r1206,r1207,r1208,r1209,r1210,r1211,r1212,r1213,r1214,r1215,r1216,r1217,r1218,r1219,r1220,r1221,r1222,r1223,r1224,r1225,r1226,r1227,r1228,r1229,r1230,r1231,r1232,r1233,r1234,r1235,r1236,r1237,r1238,r1239,r1240,r1241,r1242,r1243,r1244,r1245,r1246,r1247,r1248,r1249,r1250,r1251,r1252,r1253,r1254,r1255,r1256,r1257,r1258,r1259,r1260,r1261,r1262,r1263,r1264,r1265,r1266,r1267,r1268,r1269,r1270,r1271,r1272,r1273,r1274,r1275,r1276,r1277,r1278,r1279,r1280,r1281,r1282,r1283,r1284,r1285,r1286,r1287,r1288,r1289,r1290,r1291,r1292,r1293,r1294,r1295,r1296,r1297,r1298,r1299,r1300,r1301,r1302,r1303,r1304,r1305,r1306,r1307,r1308,r1309,r1310,r1311,r1312,r1313,r1314,r1315,r1316,r1317,r1318,r1319,r1320,r1321,r1322,r1323,r1324,r1325,r1326,r1327,r1328,r1329,r1330,r1331,r1332,r1333,r1334,r1335,r1336,r1337,r1338,r1339,r1340,r1341,r1342,r1343,r1344,r1345,r1346,r1347,r1348,r1349,r1350,r1351,r1352,r1353,r1354,r1355,r1356,r1357,r1358,r1359,r1360,r1361,r1362,r1363;r12=0;r13=STACKTOP;STACKTOP=STACKTOP+672|0;r14=r13;r15=r13+16;r16=r13+32;r17=r13+40;r18=r13+56;r19=r13+72;r20=r13+88;r21=r13+104;r22=r13+112;r23=r13+128;r24=r13+144;r25=r13+160;r26=r13+176;r27=r13+576;r28=r13+584;r29=r13+600;r30=r13+616;r31=r13+632;r32=r13+648;r33=r13+664;r34=r26;r35=400;r36=0;r37=r26|0;HEAP32[r27>>2]=0;r38=r28;HEAP32[r38>>2]=0;HEAP32[r38+4>>2]=0;HEAP32[r38+8>>2]=0;r39=r29;HEAP32[r39>>2]=0;HEAP32[r39+4>>2]=0;HEAP32[r39+8>>2]=0;r40=r30;HEAP32[r40>>2]=0;HEAP32[r40+4>>2]=0;HEAP32[r40+8>>2]=0;r41=r31;HEAP32[r41>>2]=0;HEAP32[r41+4>>2]=0;HEAP32[r41+8>>2]=0;r42=r32;HEAP32[r42>>2]=0;HEAP32[r42+4>>2]=0;HEAP32[r42+8>>2]=0;r43=r16;r44=4;r45=0;r46=r17;r47=12;r48=0;r49=r18;r50=12;r51=0;r52=r19;r53=12;r54=0;r55=r20;r56=12;r57=0;r58=r21;r59=4;r60=0;r61=r22;r62=12;r63=0;r64=r23;r65=12;r66=0;r67=r24;r68=12;r69=0;r70=r25;r71=12;r72=0;L1:do{if(r3){r73=r16;r74=r15;r75=12;r76=0;r77=HEAP32[71928>>2];r78=(r77|0)==-1;if(!r78){r79=r15|0;HEAP32[r79>>2]=71928;r80=r15+4|0;HEAP32[r80>>2]=46;r81=r15+8|0;HEAP32[r81>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71928,r74)}r82=12;r83=0;r84=HEAP32[71932>>2];r85=r84-1|0;r86=r4+12|0;r87=HEAP32[r86>>2];r88=r4+8|0;r89=HEAP32[r88>>2];r90=r87;r91=r89;r92=r90-r91|0;r93=r92>>2;r94=r93>>>0>r85>>>0;do{if(r94){r95=r89+(r85<<2)|0;r96=HEAP32[r95>>2];r97=(r96|0)==0;if(r97){break}r98=r96;r99=r96;r100=HEAP32[r99>>2];r101=r100+44|0;r102=HEAP32[r101>>2];FUNCTION_TABLE[r102](r73,r98);r103=HEAP32[r16>>2];HEAP32[r27>>2]=r103;r104=r96;r105=HEAP32[r104>>2];r106=r105+32|0;r107=HEAP32[r106>>2];FUNCTION_TABLE[r107](r17,r98);r108=HEAP8[r41];r109=r108&1;r110=r109<<24>>24==0;if(r110){r111=r31;r112=r111+1|0;HEAP8[r112]=0;HEAP8[r41]=0}else{r113=r31+8|0;r114=HEAP32[r113>>2];HEAP8[r114]=0;r115=r31+4|0;HEAP32[r115>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r31);HEAP32[r41>>2]=HEAP32[r46>>2];HEAP32[r41+4>>2]=HEAP32[r46+4>>2];HEAP32[r41+8>>2]=HEAP32[r46+8>>2];HEAP32[r46>>2]=0;HEAP32[r46+4>>2]=0;HEAP32[r46+8>>2]=0;r116=HEAP32[r104>>2];r117=r116+28|0;r118=HEAP32[r117>>2];FUNCTION_TABLE[r118](r18,r98);r119=HEAP8[r40];r120=r119&1;r121=r120<<24>>24==0;if(r121){r122=r30;r123=r122+1|0;HEAP8[r123]=0;HEAP8[r40]=0}else{r124=r30+8|0;r125=HEAP32[r124>>2];HEAP8[r125]=0;r126=r30+4|0;HEAP32[r126>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r30);HEAP32[r40>>2]=HEAP32[r49>>2];HEAP32[r40+4>>2]=HEAP32[r49+4>>2];HEAP32[r40+8>>2]=HEAP32[r49+8>>2];HEAP32[r49>>2]=0;HEAP32[r49+4>>2]=0;HEAP32[r49+8>>2]=0;r127=r96;r128=HEAP32[r127>>2];r129=r128+12|0;r130=HEAP32[r129>>2];r131=FUNCTION_TABLE[r130](r98);r132=HEAP32[r127>>2];r133=r132+16|0;r134=HEAP32[r133>>2];r135=FUNCTION_TABLE[r134](r98);r136=HEAP32[r104>>2];r137=r136+20|0;r138=HEAP32[r137>>2];FUNCTION_TABLE[r138](r19,r98);r139=HEAP8[r38];r140=r139&1;r141=r140<<24>>24==0;if(r141){r142=r28;r143=r142+1|0;HEAP8[r143]=0;HEAP8[r38]=0}else{r144=r28+8|0;r145=HEAP32[r144>>2];HEAP8[r145]=0;r146=r28+4|0;HEAP32[r146>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r28);HEAP32[r38>>2]=HEAP32[r52>>2];HEAP32[r38+4>>2]=HEAP32[r52+4>>2];HEAP32[r38+8>>2]=HEAP32[r52+8>>2];HEAP32[r52>>2]=0;HEAP32[r52+4>>2]=0;HEAP32[r52+8>>2]=0;r147=HEAP32[r104>>2];r148=r147+24|0;r149=HEAP32[r148>>2];FUNCTION_TABLE[r149](r20,r98);r150=HEAP8[r39];r151=r150&1;r152=r151<<24>>24==0;if(r152){r153=r29;r154=r153+1|0;HEAP8[r154]=0;HEAP8[r39]=0}else{r155=r29+8|0;r156=HEAP32[r155>>2];HEAP8[r156]=0;r157=r29+4|0;HEAP32[r157>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r29);HEAP32[r39>>2]=HEAP32[r55>>2];HEAP32[r39+4>>2]=HEAP32[r55+4>>2];HEAP32[r39+8>>2]=HEAP32[r55+8>>2];HEAP32[r55>>2]=0;HEAP32[r55+4>>2]=0;HEAP32[r55+8>>2]=0;r158=r96;r159=HEAP32[r158>>2];r160=r159+36|0;r161=HEAP32[r160>>2];r162=FUNCTION_TABLE[r161](r98);r163=r162;r164=r135;r165=r131;break L1}}while(0);r166=___cxa_allocate_exception(4);r167=r166;HEAP32[r167>>2]=53856;___cxa_throw(r166,62200,872)}else{r168=r21;r169=r14;r170=12;r171=0;r172=HEAP32[71936>>2];r173=(r172|0)==-1;if(!r173){r174=r14|0;HEAP32[r174>>2]=71936;r175=r14+4|0;HEAP32[r175>>2]=46;r176=r14+8|0;HEAP32[r176>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71936,r169)}r177=12;r178=0;r179=HEAP32[71940>>2];r180=r179-1|0;r181=r4+12|0;r182=HEAP32[r181>>2];r183=r4+8|0;r184=HEAP32[r183>>2];r185=r182;r186=r184;r187=r185-r186|0;r188=r187>>2;r189=r188>>>0>r180>>>0;do{if(r189){r190=r184+(r180<<2)|0;r191=HEAP32[r190>>2];r192=(r191|0)==0;if(r192){break}r193=r191;r194=r191;r195=HEAP32[r194>>2];r196=r195+44|0;r197=HEAP32[r196>>2];FUNCTION_TABLE[r197](r168,r193);r198=HEAP32[r21>>2];HEAP32[r27>>2]=r198;r199=r191;r200=HEAP32[r199>>2];r201=r200+32|0;r202=HEAP32[r201>>2];FUNCTION_TABLE[r202](r22,r193);r203=HEAP8[r41];r204=r203&1;r205=r204<<24>>24==0;if(r205){r206=r31;r207=r206+1|0;HEAP8[r207]=0;HEAP8[r41]=0}else{r208=r31+8|0;r209=HEAP32[r208>>2];HEAP8[r209]=0;r210=r31+4|0;HEAP32[r210>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r31);HEAP32[r41>>2]=HEAP32[r61>>2];HEAP32[r41+4>>2]=HEAP32[r61+4>>2];HEAP32[r41+8>>2]=HEAP32[r61+8>>2];HEAP32[r61>>2]=0;HEAP32[r61+4>>2]=0;HEAP32[r61+8>>2]=0;r211=HEAP32[r199>>2];r212=r211+28|0;r213=HEAP32[r212>>2];FUNCTION_TABLE[r213](r23,r193);r214=HEAP8[r40];r215=r214&1;r216=r215<<24>>24==0;if(r216){r217=r30;r218=r217+1|0;HEAP8[r218]=0;HEAP8[r40]=0}else{r219=r30+8|0;r220=HEAP32[r219>>2];HEAP8[r220]=0;r221=r30+4|0;HEAP32[r221>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r30);HEAP32[r40>>2]=HEAP32[r64>>2];HEAP32[r40+4>>2]=HEAP32[r64+4>>2];HEAP32[r40+8>>2]=HEAP32[r64+8>>2];HEAP32[r64>>2]=0;HEAP32[r64+4>>2]=0;HEAP32[r64+8>>2]=0;r222=r191;r223=HEAP32[r222>>2];r224=r223+12|0;r225=HEAP32[r224>>2];r226=FUNCTION_TABLE[r225](r193);r227=HEAP32[r222>>2];r228=r227+16|0;r229=HEAP32[r228>>2];r230=FUNCTION_TABLE[r229](r193);r231=HEAP32[r199>>2];r232=r231+20|0;r233=HEAP32[r232>>2];FUNCTION_TABLE[r233](r24,r193);r234=HEAP8[r38];r235=r234&1;r236=r235<<24>>24==0;if(r236){r237=r28;r238=r237+1|0;HEAP8[r238]=0;HEAP8[r38]=0}else{r239=r28+8|0;r240=HEAP32[r239>>2];HEAP8[r240]=0;r241=r28+4|0;HEAP32[r241>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r28);HEAP32[r38>>2]=HEAP32[r67>>2];HEAP32[r38+4>>2]=HEAP32[r67+4>>2];HEAP32[r38+8>>2]=HEAP32[r67+8>>2];HEAP32[r67>>2]=0;HEAP32[r67+4>>2]=0;HEAP32[r67+8>>2]=0;r242=HEAP32[r199>>2];r243=r242+24|0;r244=HEAP32[r243>>2];FUNCTION_TABLE[r244](r25,r193);r245=HEAP8[r39];r246=r245&1;r247=r246<<24>>24==0;if(r247){r248=r29;r249=r248+1|0;HEAP8[r249]=0;HEAP8[r39]=0}else{r250=r29+8|0;r251=HEAP32[r250>>2];HEAP8[r251]=0;r252=r29+4|0;HEAP32[r252>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r29);HEAP32[r39>>2]=HEAP32[r70>>2];HEAP32[r39+4>>2]=HEAP32[r70+4>>2];HEAP32[r39+8>>2]=HEAP32[r70+8>>2];HEAP32[r70>>2]=0;HEAP32[r70+4>>2]=0;HEAP32[r70+8>>2]=0;r253=r191;r254=HEAP32[r253>>2];r255=r254+36|0;r256=HEAP32[r255>>2];r257=FUNCTION_TABLE[r256](r193);r163=r257;r164=r230;r165=r226;break L1}}while(0);r258=___cxa_allocate_exception(4);r259=r258;HEAP32[r259>>2]=53856;___cxa_throw(r258,62200,872)}}while(0);r260=4;r261=0;r262=12;r263=0;r264=12;r265=0;r266=12;r267=0;r268=12;r269=0;r270=4;r271=0;r272=12;r273=0;r274=12;r275=0;r276=12;r277=0;r278=12;r279=0;r280=r26+400|0;r281=r9|0;r282=HEAP32[r281>>2];HEAP32[r10>>2]=r282;r283=r1|0;r284=r27;r285=r8+8|0;r286=r31;r287=r286+1|0;r288=r31+4|0;r289=r31+8|0;r290=r30;r291=r290+1|0;r292=r30+4|0;r293=r30+8|0;r294=r5&512;r295=(r294|0)!=0;r296=r29;r297=r296+1|0;r298=r29+8|0;r299=r29+4|0;r300=r32;r301=r300+1|0;r302=r32+8|0;r303=r32+4|0;r304=r284+3|0;r305=r9+4|0;r306=r28+4|0;r307=r32|0;r308=r11;r309=706;r310=r37;r311=r37;r312=r280;r313=0;r314=0;r315=r163;r316=r2;L75:while(1){r317=HEAP32[r283>>2];r318=(r317|0)==0;do{if(r318){r319=0}else{r320=r317+12|0;r321=HEAP32[r320>>2];r322=r317+16|0;r323=HEAP32[r322>>2];r324=(r321|0)==(r323|0);if(!r324){r319=r317;break}r325=r317;r326=HEAP32[r325>>2];r327=r326+36|0;r328=HEAP32[r327>>2];r329=FUNCTION_TABLE[r328](r317);r330=(r329|0)==-1;if(r330){HEAP32[r283>>2]=0;r319=0;break}else{r331=HEAP32[r283>>2];r319=r331;break}}}while(0);r332=(r319|0)==0;r333=(r316|0)==0;do{if(r333){r12=82}else{r334=r316+12|0;r335=HEAP32[r334>>2];r336=r316+16|0;r337=HEAP32[r336>>2];r338=(r335|0)==(r337|0);if(!r338){if(r332){r339=r316;break}else{r340=r309;r341=r310;r342=r311;r343=r314;r344=r316;r12=411;break L75}}r345=r316;r346=HEAP32[r345>>2];r347=r346+36|0;r348=HEAP32[r347>>2];r349=FUNCTION_TABLE[r348](r316);r350=(r349|0)==-1;if(r350){r12=82;break}if(r332){r339=r316}else{r340=r309;r341=r310;r342=r311;r343=r314;r344=r316;r12=411;break L75}}}while(0);if(r12==82){r12=0;if(r332){r340=r309;r341=r310;r342=r311;r343=r314;r344=0;r12=411;break}else{r339=0}}r351=r284+r313|0;r352=HEAP8[r351];r353=r352<<24>>24;L95:do{switch(r353|0){case 2:{r354=(r314|0)!=0;r355=r313>>>0<2;r356=r354|r355;if(!r356){r357=(r313|0)==2;if(r357){r358=HEAP8[r304];r359=r358<<24>>24!=0;r360=r359}else{r360=0}r361=r295|r360;if(!r361){r362=0;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}}r370=HEAP8[r39];r371=r370&1;r372=r371<<24>>24==0;r373=HEAP32[r298>>2];r374=r372?r297:r373;r375=(r313|0)==0;L103:do{if(r375){r376=r374;r377=r370;r378=r339;r379=r339;r380=r339}else{r381=r313-1|0;r382=r284+r381|0;r383=HEAP8[r382];r384=(r383&255)<2;if(!r384){r376=r374;r377=r370;r378=r339;r379=r339;r380=r339;break}r385=r370&255;r386=r385>>>1;r387=HEAP32[r299>>2];r388=r372?r386:r387;r389=r374+r388|0;r390=r374;while(1){r391=(r390|0)==(r389|0);if(r391){r392=r389;break}r393=HEAP8[r390];r394=r393<<24>>24>-1;if(!r394){r392=r390;break}r395=r393<<24>>24;r396=HEAP32[r285>>2];r397=r396+(r395<<1)|0;r398=HEAP16[r397>>1];r399=r398&8192;r400=r399<<16>>16==0;r401=r390+1|0;if(r400){r392=r390;break}else{r390=r401}}r402=r392;r403=r374;r404=r402-r403|0;r405=HEAP8[r42];r406=r405&1;r407=r406<<24>>24==0;if(r407){r408=r405&255;r409=r408>>>1;r410=r409}else{r411=HEAP32[r303>>2];r410=r411}r412=r404>>>0>r410>>>0;if(r412){r376=r374;r377=r370;r378=r339;r379=r339;r380=r339;break}if(r407){r413=r405&255;r414=r413>>>1;r415=r414-r404|0;r416=r415+(r300+1)|0;r417=r414;r418=r301;r419=r416}else{r420=HEAP32[r302>>2];r421=HEAP32[r303>>2];r422=r421-r404|0;r423=r420+r422|0;r417=r421;r418=r420;r419=r423}r424=r418+r417|0;r425=(r419|0)==(r424|0);if(r425){r376=r392;r377=r370;r378=r339;r379=r339;r380=r339;break}else{r426=r419;r427=r374}while(1){r428=HEAP8[r426];r429=HEAP8[r427];r430=r428<<24>>24==r429<<24>>24;if(!r430){r376=r374;r377=r370;r378=r339;r379=r339;r380=r339;break L103}r431=r426+1|0;r432=r427+1|0;r433=(r431|0)==(r424|0);if(r433){r376=r392;r377=r370;r378=r339;r379=r339;r380=r339;break}else{r426=r431;r427=r432}}}}while(0);L123:while(1){r434=r377&1;r435=r434<<24>>24==0;if(r435){r436=r377&255;r437=r436>>>1;r438=r437;r439=r297}else{r440=HEAP32[r298>>2];r441=HEAP32[r299>>2];r438=r441;r439=r440}r442=r439+r438|0;r443=(r376|0)==(r442|0);if(r443){r444=r380;break}r445=HEAP32[r283>>2];r446=(r445|0)==0;do{if(r446){r447=0}else{r448=r445+12|0;r449=HEAP32[r448>>2];r450=r445+16|0;r451=HEAP32[r450>>2];r452=(r449|0)==(r451|0);if(!r452){r447=r445;break}r453=r445;r454=HEAP32[r453>>2];r455=r454+36|0;r456=HEAP32[r455>>2];r457=FUNCTION_TABLE[r456](r445);r458=(r457|0)==-1;if(r458){HEAP32[r283>>2]=0;r447=0;break}else{r459=HEAP32[r283>>2];r447=r459;break}}}while(0);r460=(r447|0)==0;r461=(r378|0)==0;do{if(r461){r462=r379;r463=r380;r12=274}else{r464=r378+12|0;r465=HEAP32[r464>>2];r466=r378+16|0;r467=HEAP32[r466>>2];r468=(r465|0)==(r467|0);if(!r468){if(r460){r469=r378;r470=r379;r471=r380;break}else{r444=r380;break L123}}r472=r378;r473=HEAP32[r472>>2];r474=r473+36|0;r475=HEAP32[r474>>2];r476=FUNCTION_TABLE[r475](r378);r477=(r476|0)==-1;if(r477){r462=0;r463=0;r12=274;break}r478=(r379|0)==0;r479=r460^r478;if(r479){r469=r379;r470=r379;r471=r380}else{r444=r380;break L123}}}while(0);if(r12==274){r12=0;if(r460){r444=r463;break}else{r469=0;r470=r462;r471=r463}}r480=HEAP32[r283>>2];r481=r480+12|0;r482=HEAP32[r481>>2];r483=r480+16|0;r484=HEAP32[r483>>2];r485=(r482|0)==(r484|0);if(r485){r486=r480;r487=HEAP32[r486>>2];r488=r487+36|0;r489=HEAP32[r488>>2];r490=FUNCTION_TABLE[r489](r480);r491=r490&255;r492=r491}else{r493=HEAP8[r482];r492=r493}r494=HEAP8[r376];r495=r492<<24>>24==r494<<24>>24;if(!r495){r444=r471;break}r496=HEAP32[r283>>2];r497=r496+12|0;r498=HEAP32[r497>>2];r499=r496+16|0;r500=HEAP32[r499>>2];r501=(r498|0)==(r500|0);if(r501){r502=r496;r503=HEAP32[r502>>2];r504=r503+40|0;r505=HEAP32[r504>>2];r506=FUNCTION_TABLE[r505](r496)}else{r507=r498+1|0;HEAP32[r497>>2]=r507}r508=r376+1|0;r509=HEAP8[r39];r376=r508;r377=r509;r378=r469;r379=r470;r380=r471}if(!r295){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r444;break L95}r510=HEAP8[r39];r511=r510&1;r512=r511<<24>>24==0;if(r512){r513=r510&255;r514=r513>>>1;r515=r514;r516=r297}else{r517=HEAP32[r298>>2];r518=HEAP32[r299>>2];r515=r518;r516=r517}r519=r516+r515|0;r520=(r376|0)==(r519|0);if(r520){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r444}else{r12=290;break L75}break};case 0:{r12=136;break};case 3:{r521=HEAP8[r40];r522=r521&1;r523=r522<<24>>24==0;if(r523){r524=r521&255;r525=r524>>>1;r526=r525}else{r527=HEAP32[r292>>2];r526=r527}r528=HEAP8[r41];r529=r528&1;r530=r529<<24>>24==0;if(r530){r531=r528&255;r532=r531>>>1;r533=r532}else{r534=HEAP32[r288>>2];r533=r534}r535=-r533|0;r536=(r526|0)==(r535|0);if(r536){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}if(r523){r537=r521&255;r538=r537>>>1;r539=r538}else{r540=HEAP32[r292>>2];r539=r540}r541=(r539|0)==0;do{if(!r541){if(r530){r542=r528&255;r543=r542>>>1;r544=r543}else{r545=HEAP32[r288>>2];r544=r545}r546=(r544|0)==0;if(r546){break}r547=HEAP32[r283>>2];r548=r547+12|0;r549=HEAP32[r548>>2];r550=r547+16|0;r551=HEAP32[r550>>2];r552=(r549|0)==(r551|0);if(r552){r553=r547;r554=HEAP32[r553>>2];r555=r554+36|0;r556=HEAP32[r555>>2];r557=FUNCTION_TABLE[r556](r547);r558=r557&255;r559=HEAP8[r40];r560=HEAP32[r283>>2];r561=r560+12|0;r562=HEAP32[r561>>2];r563=r560+16|0;r564=HEAP32[r563>>2];r565=r558;r566=r559;r567=r560;r568=r562;r569=r564}else{r570=HEAP8[r549];r565=r570;r566=r521;r567=r547;r568=r549;r569=r551}r571=r566&1;r572=r571<<24>>24==0;r573=HEAP32[r293>>2];r574=r572?r291:r573;r575=HEAP8[r574];r576=r565<<24>>24==r575<<24>>24;r577=r567+12|0;r578=(r568|0)==(r569|0);if(r576){if(r578){r579=r567;r580=HEAP32[r579>>2];r581=r580+40|0;r582=HEAP32[r581>>2];r583=FUNCTION_TABLE[r582](r567)}else{r584=r568+1|0;HEAP32[r577>>2]=r584}r585=HEAP8[r40];r586=r585&1;r587=r586<<24>>24==0;if(r587){r588=r585&255;r589=r588>>>1;r590=r589}else{r591=HEAP32[r292>>2];r590=r591}r592=r590>>>0>1;r593=r592?r30:r314;r362=r593;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}if(r578){r594=r567;r595=HEAP32[r594>>2];r596=r595+36|0;r597=HEAP32[r596>>2];r598=FUNCTION_TABLE[r597](r567);r599=r598&255;r600=r599}else{r601=HEAP8[r568];r600=r601}r602=HEAP8[r41];r603=r602&1;r604=r603<<24>>24==0;r605=HEAP32[r289>>2];r606=r604?r287:r605;r607=HEAP8[r606];r608=r600<<24>>24==r607<<24>>24;if(!r608){r12=238;break L75}r609=HEAP32[r283>>2];r610=r609+12|0;r611=HEAP32[r610>>2];r612=r609+16|0;r613=HEAP32[r612>>2];r614=(r611|0)==(r613|0);if(r614){r615=r609;r616=HEAP32[r615>>2];r617=r616+40|0;r618=HEAP32[r617>>2];r619=FUNCTION_TABLE[r618](r609)}else{r620=r611+1|0;HEAP32[r610>>2]=r620}HEAP8[r7]=1;r621=HEAP8[r41];r622=r621&1;r623=r622<<24>>24==0;if(r623){r624=r621&255;r625=r624>>>1;r626=r625}else{r627=HEAP32[r288>>2];r626=r627}r628=r626>>>0>1;r629=r628?r31:r314;r362=r629;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}}while(0);if(r523){r630=r521&255;r631=r630>>>1;r632=r631}else{r633=HEAP32[r292>>2];r632=r633}r634=(r632|0)==0;r635=HEAP32[r283>>2];r636=r635+12|0;r637=HEAP32[r636>>2];r638=r635+16|0;r639=HEAP32[r638>>2];r640=(r637|0)==(r639|0);if(r634){if(r640){r641=r635;r642=HEAP32[r641>>2];r643=r642+36|0;r644=HEAP32[r643>>2];r645=FUNCTION_TABLE[r644](r635);r646=r645&255;r647=HEAP8[r41];r648=r646;r649=r647}else{r650=HEAP8[r637];r648=r650;r649=r528}r651=r649&1;r652=r651<<24>>24==0;r653=HEAP32[r289>>2];r654=r652?r287:r653;r655=HEAP8[r654];r656=r648<<24>>24==r655<<24>>24;if(!r656){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}r657=HEAP32[r283>>2];r658=r657+12|0;r659=HEAP32[r658>>2];r660=r657+16|0;r661=HEAP32[r660>>2];r662=(r659|0)==(r661|0);if(r662){r663=r657;r664=HEAP32[r663>>2];r665=r664+40|0;r666=HEAP32[r665>>2];r667=FUNCTION_TABLE[r666](r657)}else{r668=r659+1|0;HEAP32[r658>>2]=r668}HEAP8[r7]=1;r669=HEAP8[r41];r670=r669&1;r671=r670<<24>>24==0;if(r671){r672=r669&255;r673=r672>>>1;r674=r673}else{r675=HEAP32[r288>>2];r674=r675}r676=r674>>>0>1;r677=r676?r31:r314;r362=r677;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}if(r640){r678=r635;r679=HEAP32[r678>>2];r680=r679+36|0;r681=HEAP32[r680>>2];r682=FUNCTION_TABLE[r681](r635);r683=r682&255;r684=HEAP8[r40];r685=r683;r686=r684}else{r687=HEAP8[r637];r685=r687;r686=r521}r688=r686&1;r689=r688<<24>>24==0;r690=HEAP32[r293>>2];r691=r689?r291:r690;r692=HEAP8[r691];r693=r685<<24>>24==r692<<24>>24;if(!r693){HEAP8[r7]=1;r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break L95}r694=HEAP32[r283>>2];r695=r694+12|0;r696=HEAP32[r695>>2];r697=r694+16|0;r698=HEAP32[r697>>2];r699=(r696|0)==(r698|0);if(r699){r700=r694;r701=HEAP32[r700>>2];r702=r701+40|0;r703=HEAP32[r702>>2];r704=FUNCTION_TABLE[r703](r694)}else{r705=r696+1|0;HEAP32[r695>>2]=r705}r706=HEAP8[r40];r707=r706&1;r708=r707<<24>>24==0;if(r708){r709=r706&255;r710=r709>>>1;r711=r710}else{r712=HEAP32[r292>>2];r711=r712}r713=r711>>>0>1;r714=r713?r30:r314;r362=r714;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339;break};case 1:{r715=(r313|0)==3;if(r715){r340=r309;r341=r310;r342=r311;r343=r314;r344=r339;r12=411;break L75}r716=HEAP32[r283>>2];r717=r716+12|0;r718=HEAP32[r717>>2];r719=r716+16|0;r720=HEAP32[r719>>2];r721=(r718|0)==(r720|0);if(r721){r722=r716;r723=HEAP32[r722>>2];r724=r723+36|0;r725=HEAP32[r724>>2];r726=FUNCTION_TABLE[r725](r716);r727=r726&255;r728=r727}else{r729=HEAP8[r718];r728=r729}r730=r728<<24>>24>-1;if(!r730){r12=135;break L75}r731=r728<<24>>24;r732=HEAP32[r285>>2];r733=r732+(r731<<1)|0;r734=HEAP16[r733>>1];r735=r734&8192;r736=r735<<16>>16==0;if(r736){r12=135;break L75}r737=HEAP32[r283>>2];r738=r737+12|0;r739=HEAP32[r738>>2];r740=r737+16|0;r741=HEAP32[r740>>2];r742=(r739|0)==(r741|0);if(r742){r743=r737;r744=HEAP32[r743>>2];r745=r744+40|0;r746=HEAP32[r745>>2];r747=FUNCTION_TABLE[r746](r737);r748=r747&255;r749=r748}else{r750=r739+1|0;HEAP32[r738>>2]=r750;r751=HEAP8[r739];r749=r751}r752=HEAP8[r42];r753=r752&1;r754=r753<<24>>24!=0;if(r754){r755=HEAP32[r307>>2];r756=r755&-2;r757=r756-1|0;r758=HEAP32[r303>>2];r759=r758;r760=r757}else{r761=r752&255;r762=r761>>>1;r759=r762;r760=10}r763=(r759|0)==(r760|0);if(r763){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r32,r760,1,r760,r760,0);r764=HEAP8[r42];r765=r764&1;r766=r765<<24>>24==0;if(r766){r12=132}else{r12=133}}else{if(r754){r12=133}else{r12=132}}if(r12==132){r12=0;r767=r759<<1;r768=r767+2|0;r769=r768&255;HEAP8[r42]=r769;r770=r759+1|0;r771=r301;r772=r770}else if(r12==133){r12=0;r773=HEAP32[r302>>2];r774=r759+1|0;HEAP32[r303>>2]=r774;r771=r773;r772=r774}r775=r771+r759|0;HEAP8[r775]=r749;r776=r771+r772|0;HEAP8[r776]=0;r12=136;break};case 4:{r777=0;r778=r312;r779=r311;r780=r310;r781=r309;r782=r308;r783=r339;L279:while(1){r784=HEAP32[r283>>2];r785=(r784|0)==0;do{if(r785){r786=0}else{r787=r784+12|0;r788=HEAP32[r787>>2];r789=r784+16|0;r790=HEAP32[r789>>2];r791=(r788|0)==(r790|0);if(!r791){r786=r784;break}r792=r784;r793=HEAP32[r792>>2];r794=r793+36|0;r795=HEAP32[r794>>2];r796=FUNCTION_TABLE[r795](r784);r797=(r796|0)==-1;if(r797){HEAP32[r283>>2]=0;r786=0;break}else{r798=HEAP32[r283>>2];r786=r798;break}}}while(0);r799=(r786|0)==0;r800=(r783|0)==0;do{if(r800){r12=302}else{r801=r783+12|0;r802=HEAP32[r801>>2];r803=r783+16|0;r804=HEAP32[r803>>2];r805=(r802|0)==(r804|0);if(!r805){if(r799){r806=r783;break}else{r807=r783;break L279}}r808=r783;r809=HEAP32[r808>>2];r810=r809+36|0;r811=HEAP32[r810>>2];r812=FUNCTION_TABLE[r811](r783);r813=(r812|0)==-1;if(r813){r12=302;break}if(r799){r806=r783}else{r807=r783;break L279}}}while(0);if(r12==302){r12=0;if(r799){r807=0;break}else{r806=0}}r814=HEAP32[r283>>2];r815=r814+12|0;r816=HEAP32[r815>>2];r817=r814+16|0;r818=HEAP32[r817>>2];r819=(r816|0)==(r818|0);if(r819){r820=r814;r821=HEAP32[r820>>2];r822=r821+36|0;r823=HEAP32[r822>>2];r824=FUNCTION_TABLE[r823](r814);r825=r824&255;r826=r825}else{r827=HEAP8[r816];r826=r827}r828=r826<<24>>24>-1;do{if(r828){r829=r826<<24>>24;r830=HEAP32[r285>>2];r831=r830+(r829<<1)|0;r832=HEAP16[r831>>1];r833=r832&2048;r834=r833<<16>>16==0;if(r834){r12=322;break}r835=HEAP32[r10>>2];r836=(r835|0)==(r782|0);if(r836){r837=HEAP32[r305>>2];r838=(r837|0)!=706;r839=HEAP32[r281>>2];r840=r782;r841=r839;r842=r840-r841|0;r843=r842>>>0<2147483647;r844=r842<<1;r845=r843?r844:-1;r846=r838?r839:0;r847=_realloc(r846,r845);r848=(r847|0)==0;if(r848){r12=312;break L75}do{if(r838){HEAP32[r281>>2]=r847;r849=r847}else{r850=HEAP32[r281>>2];HEAP32[r281>>2]=r847;r851=(r850|0)==0;if(r851){r849=r847;break}r852=HEAP32[r305>>2];FUNCTION_TABLE[r852](r850);r853=HEAP32[r281>>2];r849=r853}}while(0);HEAP32[r305>>2]=356;r854=r849+r842|0;HEAP32[r10>>2]=r854;r855=HEAP32[r281>>2];r856=r855+r845|0;r857=r856;r858=r854}else{r857=r782;r858=r835}r859=r858+1|0;HEAP32[r10>>2]=r859;HEAP8[r858]=r826;r860=r777+1|0;r861=r860;r862=r778;r863=r779;r864=r780;r865=r781;r866=r857}else{r12=322}}while(0);if(r12==322){r12=0;r867=HEAP8[r38];r868=r867&1;r869=r868<<24>>24==0;if(r869){r870=r867&255;r871=r870>>>1;r872=r871}else{r873=HEAP32[r306>>2];r872=r873}r874=(r872|0)==0;r875=(r777|0)==0;r876=r874|r875;r877=r876^1;r878=r826<<24>>24==r164<<24>>24;r879=r877&r878;if(!r879){r807=r806;break}r880=(r779|0)==(r778|0);if(r880){r881=(r781|0)==706;r882=r779;r883=r780;r884=r882-r883|0;r885=r884>>>0<2147483647;r886=r884<<1;r887=r885?r886:-1;r888=r884>>2;if(r881){r889=0}else{r890=r780;r889=r890}r891=_realloc(r889,r887);r892=r891;r893=(r891|0)==0;if(r893){r12=330;break L75}r894=r887>>>2;r895=r892+(r888<<2)|0;r896=r892+(r894<<2)|0;r897=r896;r898=r895;r899=r892;r900=356}else{r897=r778;r898=r779;r899=r780;r900=r781}r901=r898+4|0;HEAP32[r898>>2]=r777;r861=0;r862=r897;r863=r901;r864=r899;r865=r900;r866=r782}r902=HEAP32[r283>>2];r903=r902+12|0;r904=HEAP32[r903>>2];r905=r902+16|0;r906=HEAP32[r905>>2];r907=(r904|0)==(r906|0);if(r907){r908=r902;r909=HEAP32[r908>>2];r910=r909+40|0;r911=HEAP32[r910>>2];r912=FUNCTION_TABLE[r911](r902);r777=r861;r778=r862;r779=r863;r780=r864;r781=r865;r782=r866;r783=r806;continue}else{r913=r904+1|0;HEAP32[r903>>2]=r913;r777=r861;r778=r862;r779=r863;r780=r864;r781=r865;r782=r866;r783=r806;continue}}r914=(r780|0)==(r779|0);r915=(r777|0)==0;r916=r914|r915;if(r916){r917=r778;r918=r779;r919=r780;r920=r781}else{r921=(r779|0)==(r778|0);if(r921){r922=(r781|0)==706;r923=r779;r924=r780;r925=r923-r924|0;r926=r925>>>0<2147483647;r927=r925<<1;r928=r926?r927:-1;r929=r925>>2;if(r922){r930=0}else{r931=r780;r930=r931}r932=_realloc(r930,r928);r933=r932;r934=(r932|0)==0;if(r934){r12=342;break L75}r935=r928>>>2;r936=r933+(r929<<2)|0;r937=r933+(r935<<2)|0;r938=r937;r939=r936;r940=r933;r941=356}else{r938=r778;r939=r779;r940=r780;r941=r781}r942=r939+4|0;HEAP32[r939>>2]=r777;r917=r938;r918=r942;r919=r940;r920=r941}r943=(r315|0)>0;if(r943){r944=HEAP32[r283>>2];r945=(r944|0)==0;do{if(r945){r946=0}else{r947=r944+12|0;r948=HEAP32[r947>>2];r949=r944+16|0;r950=HEAP32[r949>>2];r951=(r948|0)==(r950|0);if(!r951){r946=r944;break}r952=r944;r953=HEAP32[r952>>2];r954=r953+36|0;r955=HEAP32[r954>>2];r956=FUNCTION_TABLE[r955](r944);r957=(r956|0)==-1;if(r957){HEAP32[r283>>2]=0;r946=0;break}else{r958=HEAP32[r283>>2];r946=r958;break}}}while(0);r959=(r946|0)==0;r960=(r807|0)==0;do{if(r960){r12=358}else{r961=r807+12|0;r962=HEAP32[r961>>2];r963=r807+16|0;r964=HEAP32[r963>>2];r965=(r962|0)==(r964|0);if(!r965){if(r959){r966=r807;break}else{r12=365;break L75}}r967=r807;r968=HEAP32[r967>>2];r969=r968+36|0;r970=HEAP32[r969>>2];r971=FUNCTION_TABLE[r970](r807);r972=(r971|0)==-1;if(r972){r12=358;break}if(r959){r966=r807}else{r12=365;break L75}}}while(0);if(r12==358){r12=0;if(r959){r12=365;break L75}else{r966=0}}r973=HEAP32[r283>>2];r974=r973+12|0;r975=HEAP32[r974>>2];r976=r973+16|0;r977=HEAP32[r976>>2];r978=(r975|0)==(r977|0);if(r978){r979=r973;r980=HEAP32[r979>>2];r981=r980+36|0;r982=HEAP32[r981>>2];r983=FUNCTION_TABLE[r982](r973);r984=r983&255;r985=r984}else{r986=HEAP8[r975];r985=r986}r987=r985<<24>>24==r165<<24>>24;if(!r987){r12=365;break L75}r988=HEAP32[r283>>2];r989=r988+12|0;r990=HEAP32[r989>>2];r991=r988+16|0;r992=HEAP32[r991>>2];r993=(r990|0)==(r992|0);if(r993){r994=r988;r995=HEAP32[r994>>2];r996=r995+40|0;r997=HEAP32[r996>>2];r998=FUNCTION_TABLE[r997](r988);r999=r782;r1000=r966;r1001=r966;r1002=r315;r1003=r966}else{r1004=r990+1|0;HEAP32[r989>>2]=r1004;r999=r782;r1000=r966;r1001=r966;r1002=r315;r1003=r966}while(1){r1005=HEAP32[r283>>2];r1006=(r1005|0)==0;do{if(r1006){r1007=0}else{r1008=r1005+12|0;r1009=HEAP32[r1008>>2];r1010=r1005+16|0;r1011=HEAP32[r1010>>2];r1012=(r1009|0)==(r1011|0);if(!r1012){r1007=r1005;break}r1013=r1005;r1014=HEAP32[r1013>>2];r1015=r1014+36|0;r1016=HEAP32[r1015>>2];r1017=FUNCTION_TABLE[r1016](r1005);r1018=(r1017|0)==-1;if(r1018){HEAP32[r283>>2]=0;r1007=0;break}else{r1019=HEAP32[r283>>2];r1007=r1019;break}}}while(0);r1020=(r1007|0)==0;r1021=(r1000|0)==0;do{if(r1021){r1022=r1001;r1023=r1003;r12=380}else{r1024=r1000+12|0;r1025=HEAP32[r1024>>2];r1026=r1000+16|0;r1027=HEAP32[r1026>>2];r1028=(r1025|0)==(r1027|0);if(!r1028){if(r1020){r1029=r1001;r1030=r1000;r1031=r1003;break}else{r12=388;break L75}}r1032=r1000;r1033=HEAP32[r1032>>2];r1034=r1033+36|0;r1035=HEAP32[r1034>>2];r1036=FUNCTION_TABLE[r1035](r1000);r1037=(r1036|0)==-1;if(r1037){r1022=0;r1023=0;r12=380;break}r1038=(r1001|0)==0;r1039=r1020^r1038;if(r1039){r1029=r1001;r1030=r1001;r1031=r1003}else{r12=388;break L75}}}while(0);if(r12==380){r12=0;if(r1020){r12=388;break L75}else{r1029=r1022;r1030=0;r1031=r1023}}r1040=HEAP32[r283>>2];r1041=r1040+12|0;r1042=HEAP32[r1041>>2];r1043=r1040+16|0;r1044=HEAP32[r1043>>2];r1045=(r1042|0)==(r1044|0);if(r1045){r1046=r1040;r1047=HEAP32[r1046>>2];r1048=r1047+36|0;r1049=HEAP32[r1048>>2];r1050=FUNCTION_TABLE[r1049](r1040);r1051=r1050&255;r1052=r1051}else{r1053=HEAP8[r1042];r1052=r1053}r1054=r1052<<24>>24>-1;if(!r1054){r12=388;break L75}r1055=r1052<<24>>24;r1056=HEAP32[r285>>2];r1057=r1056+(r1055<<1)|0;r1058=HEAP16[r1057>>1];r1059=r1058&2048;r1060=r1059<<16>>16==0;if(r1060){r12=388;break L75}r1061=HEAP32[r10>>2];r1062=(r1061|0)==(r999|0);if(r1062){r1063=HEAP32[r305>>2];r1064=(r1063|0)!=706;r1065=HEAP32[r281>>2];r1066=r999;r1067=r1065;r1068=r1066-r1067|0;r1069=r1068>>>0<2147483647;r1070=r1068<<1;r1071=r1069?r1070:-1;r1072=r1064?r1065:0;r1073=_realloc(r1072,r1071);r1074=(r1073|0)==0;if(r1074){r12=391;break L75}do{if(r1064){HEAP32[r281>>2]=r1073;r1075=r1073}else{r1076=HEAP32[r281>>2];HEAP32[r281>>2]=r1073;r1077=(r1076|0)==0;if(r1077){r1075=r1073;break}r1078=HEAP32[r305>>2];FUNCTION_TABLE[r1078](r1076);r1079=HEAP32[r281>>2];r1075=r1079}}while(0);HEAP32[r305>>2]=356;r1080=r1075+r1068|0;HEAP32[r10>>2]=r1080;r1081=HEAP32[r281>>2];r1082=r1081+r1071|0;r1083=r1082;r1084=r1080}else{r1083=r999;r1084=r1061}r1085=HEAP32[r283>>2];r1086=r1085+12|0;r1087=HEAP32[r1086>>2];r1088=r1085+16|0;r1089=HEAP32[r1088>>2];r1090=(r1087|0)==(r1089|0);if(r1090){r1091=r1085;r1092=HEAP32[r1091>>2];r1093=r1092+36|0;r1094=HEAP32[r1093>>2];r1095=FUNCTION_TABLE[r1094](r1085);r1096=r1095&255;r1097=HEAP32[r10>>2];r1098=r1096;r1099=r1097}else{r1100=HEAP8[r1087];r1098=r1100;r1099=r1084}r1101=r1099+1|0;HEAP32[r10>>2]=r1101;HEAP8[r1099]=r1098;r1102=r1002-1|0;r1103=HEAP32[r283>>2];r1104=r1103+12|0;r1105=HEAP32[r1104>>2];r1106=r1103+16|0;r1107=HEAP32[r1106>>2];r1108=(r1105|0)==(r1107|0);if(r1108){r1109=r1103;r1110=HEAP32[r1109>>2];r1111=r1110+40|0;r1112=HEAP32[r1111>>2];r1113=FUNCTION_TABLE[r1112](r1103)}else{r1114=r1105+1|0;HEAP32[r1104>>2]=r1114}r1115=(r1102|0)>0;if(r1115){r999=r1083;r1000=r1030;r1001=r1029;r1002=r1102;r1003=r1031}else{r1116=r1083;r1117=r1102;r1118=r1031;break}}}else{r1116=r782;r1117=r315;r1118=r807}r1119=HEAP32[r10>>2];r1120=HEAP32[r281>>2];r1121=(r1119|0)==(r1120|0);if(r1121){r12=409;break L75}else{r362=r314;r363=r917;r364=r918;r365=r919;r366=r920;r367=r1116;r368=r1117;r369=r1118}break};default:{r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r339}}}while(0);L422:do{if(r12==136){r12=0;r1122=(r313|0)==3;if(r1122){r340=r309;r341=r310;r342=r311;r343=r314;r344=r339;r12=411;break L75}else{r1123=r339;r1124=r339;r1125=r339}while(1){r1126=HEAP32[r283>>2];r1127=(r1126|0)==0;do{if(r1127){r1128=0}else{r1129=r1126+12|0;r1130=HEAP32[r1129>>2];r1131=r1126+16|0;r1132=HEAP32[r1131>>2];r1133=(r1130|0)==(r1132|0);if(!r1133){r1128=r1126;break}r1134=r1126;r1135=HEAP32[r1134>>2];r1136=r1135+36|0;r1137=HEAP32[r1136>>2];r1138=FUNCTION_TABLE[r1137](r1126);r1139=(r1138|0)==-1;if(r1139){HEAP32[r283>>2]=0;r1128=0;break}else{r1140=HEAP32[r283>>2];r1128=r1140;break}}}while(0);r1141=(r1128|0)==0;r1142=(r1123|0)==0;do{if(r1142){r1143=r1124;r1144=r1125;r12=148}else{r1145=r1123+12|0;r1146=HEAP32[r1145>>2];r1147=r1123+16|0;r1148=HEAP32[r1147>>2];r1149=(r1146|0)==(r1148|0);if(!r1149){if(r1141){r1150=r1123;r1151=r1124;r1152=r1125;break}else{r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r1125;break L422}}r1153=r1123;r1154=HEAP32[r1153>>2];r1155=r1154+36|0;r1156=HEAP32[r1155>>2];r1157=FUNCTION_TABLE[r1156](r1123);r1158=(r1157|0)==-1;if(r1158){r1143=0;r1144=0;r12=148;break}r1159=(r1124|0)==0;r1160=r1141^r1159;if(r1160){r1150=r1124;r1151=r1124;r1152=r1125}else{r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r1125;break L422}}}while(0);if(r12==148){r12=0;if(r1141){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r1144;break L422}else{r1150=0;r1151=r1143;r1152=r1144}}r1161=HEAP32[r283>>2];r1162=r1161+12|0;r1163=HEAP32[r1162>>2];r1164=r1161+16|0;r1165=HEAP32[r1164>>2];r1166=(r1163|0)==(r1165|0);if(r1166){r1167=r1161;r1168=HEAP32[r1167>>2];r1169=r1168+36|0;r1170=HEAP32[r1169>>2];r1171=FUNCTION_TABLE[r1170](r1161);r1172=r1171&255;r1173=r1172}else{r1174=HEAP8[r1163];r1173=r1174}r1175=r1173<<24>>24>-1;if(!r1175){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r1152;break L422}r1176=r1173<<24>>24;r1177=HEAP32[r285>>2];r1178=r1177+(r1176<<1)|0;r1179=HEAP16[r1178>>1];r1180=r1179&8192;r1181=r1180<<16>>16==0;if(r1181){r362=r314;r363=r312;r364=r311;r365=r310;r366=r309;r367=r308;r368=r315;r369=r1152;break L422}r1182=HEAP32[r283>>2];r1183=r1182+12|0;r1184=HEAP32[r1183>>2];r1185=r1182+16|0;r1186=HEAP32[r1185>>2];r1187=(r1184|0)==(r1186|0);if(r1187){r1188=r1182;r1189=HEAP32[r1188>>2];r1190=r1189+40|0;r1191=HEAP32[r1190>>2];r1192=FUNCTION_TABLE[r1191](r1182);r1193=r1192&255;r1194=r1193}else{r1195=r1184+1|0;HEAP32[r1183>>2]=r1195;r1196=HEAP8[r1184];r1194=r1196}r1197=HEAP8[r42];r1198=r1197&1;r1199=r1198<<24>>24!=0;if(r1199){r1200=HEAP32[r307>>2];r1201=r1200&-2;r1202=r1201-1|0;r1203=HEAP32[r303>>2];r1204=r1203;r1205=r1202}else{r1206=r1197&255;r1207=r1206>>>1;r1204=r1207;r1205=10}r1208=(r1204|0)==(r1205|0);if(r1208){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r32,r1205,1,r1205,r1205,0);r1209=HEAP8[r42];r1210=r1209&1;r1211=r1210<<24>>24==0;if(r1211){r12=167}else{r12=168}}else{if(r1199){r12=168}else{r12=167}}if(r12==167){r12=0;r1212=r1204<<1;r1213=r1212+2|0;r1214=r1213&255;HEAP8[r42]=r1214;r1215=r1204+1|0;r1216=r301;r1217=r1215}else if(r12==168){r12=0;r1218=HEAP32[r302>>2];r1219=r1204+1|0;HEAP32[r303>>2]=r1219;r1216=r1218;r1217=r1219}r1220=r1216+r1204|0;HEAP8[r1220]=r1194;r1221=r1216+r1217|0;HEAP8[r1221]=0;r1123=r1150;r1124=r1151;r1125=r1152}}}while(0);r1222=r313+1|0;r1223=r1222>>>0<4;if(r1223){r308=r367;r309=r366;r310=r365;r311=r364;r312=r363;r313=r1222;r314=r362;r315=r368;r316=r369}else{r340=r366;r341=r365;r342=r364;r343=r362;r344=r369;r12=411;break}}L469:do{if(r12==135){r1224=HEAP32[r6>>2];r1225=r1224|4;HEAP32[r6>>2]=r1225;r1226=0;r1227=r310;r1228=r309}else if(r12==238){r1229=HEAP32[r6>>2];r1230=r1229|4;HEAP32[r6>>2]=r1230;r1226=0;r1227=r310;r1228=r309}else if(r12==290){r1231=HEAP32[r6>>2];r1232=r1231|4;HEAP32[r6>>2]=r1232;r1226=0;r1227=r310;r1228=r309}else if(r12==312){r1233=___cxa_allocate_exception(4);r1234=r1233;HEAP32[r1234>>2]=53824;___cxa_throw(r1233,62184,110)}else if(r12==330){r1235=___cxa_allocate_exception(4);r1236=r1235;HEAP32[r1236>>2]=53824;___cxa_throw(r1235,62184,110)}else if(r12==342){r1237=___cxa_allocate_exception(4);r1238=r1237;HEAP32[r1238>>2]=53824;___cxa_throw(r1237,62184,110)}else if(r12==365){r1239=HEAP32[r6>>2];r1240=r1239|4;HEAP32[r6>>2]=r1240;r1226=0;r1227=r919;r1228=r920}else if(r12==388){r1241=HEAP32[r6>>2];r1242=r1241|4;HEAP32[r6>>2]=r1242;r1226=0;r1227=r919;r1228=r920}else if(r12==391){r1243=___cxa_allocate_exception(4);r1244=r1243;HEAP32[r1244>>2]=53824;___cxa_throw(r1243,62184,110)}else if(r12==409){r1245=HEAP32[r6>>2];r1246=r1245|4;HEAP32[r6>>2]=r1246;r1226=0;r1227=r919;r1228=r920}else if(r12==411){r1247=(r343|0)==0;L479:do{if(!r1247){r1248=r343;r1249=r343;r1250=r1249+1|0;r1251=r343+8|0;r1252=r343+4|0;r1253=1;r1254=r344;L481:while(1){r1255=HEAP8[r1248];r1256=r1255&1;r1257=r1256<<24>>24==0;if(r1257){r1258=r1255&255;r1259=r1258>>>1;r1260=r1259}else{r1261=HEAP32[r1252>>2];r1260=r1261}r1262=r1253>>>0<r1260>>>0;if(!r1262){break L479}r1263=HEAP32[r283>>2];r1264=(r1263|0)==0;do{if(r1264){r1265=0}else{r1266=r1263+12|0;r1267=HEAP32[r1266>>2];r1268=r1263+16|0;r1269=HEAP32[r1268>>2];r1270=(r1267|0)==(r1269|0);if(!r1270){r1265=r1263;break}r1271=r1263;r1272=HEAP32[r1271>>2];r1273=r1272+36|0;r1274=HEAP32[r1273>>2];r1275=FUNCTION_TABLE[r1274](r1263);r1276=(r1275|0)==-1;if(r1276){HEAP32[r283>>2]=0;r1265=0;break}else{r1277=HEAP32[r283>>2];r1265=r1277;break}}}while(0);r1278=(r1265|0)==0;r1279=(r1254|0)==0;do{if(r1279){r12=428}else{r1280=r1254+12|0;r1281=HEAP32[r1280>>2];r1282=r1254+16|0;r1283=HEAP32[r1282>>2];r1284=(r1281|0)==(r1283|0);if(!r1284){if(r1278){r1285=r1254;break}else{break L481}}r1286=r1254;r1287=HEAP32[r1286>>2];r1288=r1287+36|0;r1289=HEAP32[r1288>>2];r1290=FUNCTION_TABLE[r1289](r1254);r1291=(r1290|0)==-1;if(r1291){r12=428;break}if(r1278){r1285=r1254}else{break L481}}}while(0);if(r12==428){r12=0;if(r1278){break}else{r1285=0}}r1292=HEAP32[r283>>2];r1293=r1292+12|0;r1294=HEAP32[r1293>>2];r1295=r1292+16|0;r1296=HEAP32[r1295>>2];r1297=(r1294|0)==(r1296|0);if(r1297){r1298=r1292;r1299=HEAP32[r1298>>2];r1300=r1299+36|0;r1301=HEAP32[r1300>>2];r1302=FUNCTION_TABLE[r1301](r1292);r1303=r1302&255;r1304=r1303}else{r1305=HEAP8[r1294];r1304=r1305}r1306=HEAP8[r1248];r1307=r1306&1;r1308=r1307<<24>>24==0;if(r1308){r1309=r1250}else{r1310=HEAP32[r1251>>2];r1309=r1310}r1311=r1309+r1253|0;r1312=HEAP8[r1311];r1313=r1304<<24>>24==r1312<<24>>24;if(!r1313){break}r1314=r1253+1|0;r1315=HEAP32[r283>>2];r1316=r1315+12|0;r1317=HEAP32[r1316>>2];r1318=r1315+16|0;r1319=HEAP32[r1318>>2];r1320=(r1317|0)==(r1319|0);if(r1320){r1321=r1315;r1322=HEAP32[r1321>>2];r1323=r1322+40|0;r1324=HEAP32[r1323>>2];r1325=FUNCTION_TABLE[r1324](r1315);r1253=r1314;r1254=r1285;continue}else{r1326=r1317+1|0;HEAP32[r1316>>2]=r1326;r1253=r1314;r1254=r1285;continue}}r1327=HEAP32[r6>>2];r1328=r1327|4;HEAP32[r6>>2]=r1328;r1226=0;r1227=r341;r1228=r340;break L469}}while(0);r1329=(r341|0)==(r342|0);if(r1329){r1226=1;r1227=r342;r1228=r340;break}HEAP32[r33>>2]=0;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r28,r341,r342,r33);r1330=HEAP32[r33>>2];r1331=(r1330|0)==0;if(r1331){r1226=1;r1227=r341;r1228=r340;break}r1332=HEAP32[r6>>2];r1333=r1332|4;HEAP32[r6>>2]=r1333;r1226=0;r1227=r341;r1228=r340}}while(0);r1334=HEAP8[r42];r1335=r1334&1;r1336=r1335<<24>>24==0;do{if(!r1336){r1337=HEAP32[r302>>2];r1338=(r1337|0)==0;if(r1338){break}_free(r1337)}}while(0);r1339=HEAP8[r41];r1340=r1339&1;r1341=r1340<<24>>24==0;do{if(!r1341){r1342=HEAP32[r289>>2];r1343=(r1342|0)==0;if(r1343){break}_free(r1342)}}while(0);r1344=HEAP8[r40];r1345=r1344&1;r1346=r1345<<24>>24==0;do{if(!r1346){r1347=HEAP32[r293>>2];r1348=(r1347|0)==0;if(r1348){break}_free(r1347)}}while(0);r1349=HEAP8[r39];r1350=r1349&1;r1351=r1350<<24>>24==0;do{if(!r1351){r1352=HEAP32[r298>>2];r1353=(r1352|0)==0;if(r1353){break}_free(r1352)}}while(0);r1354=HEAP8[r38];r1355=r1354&1;r1356=r1355<<24>>24==0;do{if(!r1356){r1357=r28+8|0;r1358=HEAP32[r1357>>2];r1359=(r1358|0)==0;if(r1359){break}_free(r1358)}}while(0);r1360=(r1227|0)==0;if(r1360){r1361=400;r1362=0;STACKTOP=r13;return r1226}r1363=r1227;FUNCTION_TABLE[r1228](r1363);r1361=400;r1362=0;STACKTOP=r13;return r1226}function __ZNSt3__121__throw_runtime_errorEPKc(r1){var r2,r3,r4,r5,r6,r7;r2=0;r3=___cxa_allocate_exception(8);HEAP32[r3>>2]=53888;r4=_strlen(r1);r5=r4+13|0;r6=(r5|0)==0?1:r5;while(1){r7=_malloc(r6);if((r7|0)!=0){r2=18;break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){break}FUNCTION_TABLE[r5]()}if(r2==18){HEAP32[r7+4>>2]=r4;HEAP32[r7>>2]=r4;r2=r7+12|0;HEAP32[r3+4>>2]=r2;HEAP32[r7+8>>2]=0;_memcpy(r2,r1,r4+1|0)|0;___cxa_throw(r3,62216,314)}r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43;r2=0;r9=STACKTOP;STACKTOP=STACKTOP+144|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r10>>2];r10=r9;r11=r9+16;r12=r9+120;r13=r9+128;r14=r9+136;r15=r12|0;HEAP32[r15>>2]=r11;r16=r12+4|0;HEAP32[r16>>2]=706;r17=r11+100|0;r11=HEAP32[r6+28>>2];r18=r11;r19=r11+4|0;tempValue=HEAP32[r19>>2],HEAP32[r19>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r10>>2]=71456;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r10)}r10=HEAP32[71460>>2]-1|0;r19=HEAP32[r11+8>>2];do{if(HEAP32[r11+12>>2]-r19>>2>>>0>r10>>>0){r20=HEAP32[r19+(r10<<2)>>2];if((r20|0)==0){break}r21=r20;HEAP8[r14]=0;r22=r4|0;r23=HEAP32[r22>>2];do{if(__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(r3,r23,r5,r18,HEAP32[r6+4>>2],r7,r14,r21,r12,r13,r17)){r24=r8;if((HEAP8[r24]&1)==0){HEAP8[r8+1|0]=0;HEAP8[r24]=0}else{HEAP8[HEAP32[r8+8>>2]]=0;HEAP32[r8+4>>2]=0}r25=r20;if((HEAP8[r14]|0)!=0){r26=FUNCTION_TABLE[HEAP32[HEAP32[r25>>2]+28>>2]](r21,45);r27=HEAP8[r24];r28=(r27&1)!=0;if(r28){r29=HEAP32[r8+4>>2];r30=(HEAP32[r8>>2]&-2)-1|0}else{r29=(r27&255)>>>1;r30=10}if((r29|0)==(r30|0)){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r8,r30,1,r30,r30,0);if((HEAP8[r24]&1)==0){r2=21}else{r2=22}}else{if(r28){r2=22}else{r2=21}}if(r2==21){HEAP8[r24]=(r29<<1)+2;r31=r8+1|0;r32=r29+1|0}else if(r2==22){r28=HEAP32[r8+8>>2];r27=r29+1|0;HEAP32[r8+4>>2]=r27;r31=r28;r32=r27}HEAP8[r31+r29|0]=r26;HEAP8[r31+r32|0]=0}r26=FUNCTION_TABLE[HEAP32[HEAP32[r25>>2]+28>>2]](r21,48);r25=HEAP32[r15>>2];r27=HEAP32[r13>>2];r28=r27-1|0;L31:do{if(r25>>>0<r28>>>0){r33=r25;while(1){r34=r33+1|0;if((HEAP8[r33]|0)!=r26<<24>>24){r35=r33;break L31}if(r34>>>0<r28>>>0){r33=r34}else{r35=r34;break}}}else{r35=r25}}while(0);r25=r35;r28=HEAP8[r24];if((r28&1)==0){r36=10;r37=r28;r38=(r28&255)>>>1}else{r28=HEAP32[r8>>2];r36=(r28&-2)-1|0;r37=r28&255;r38=HEAP32[r8+4>>2]}r28=r27-r25|0;if((r27|0)==(r35|0)){break}if((r36-r38|0)>>>0<r28>>>0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r8,r36,r38+r28-r36|0,r38,r38,0);r39=HEAP8[r24]}else{r39=r37}if((r39&1)==0){r40=r8+1|0}else{r40=HEAP32[r8+8>>2]}r26=r27+(r38-r25)|0;r25=r35;r33=r40+r38|0;while(1){HEAP8[r33]=HEAP8[r25];r34=r25+1|0;if((r34|0)==(r27|0)){break}r25=r34;r33=r33+1|0}HEAP8[r40+r26|0]=0;r33=r38+r28|0;if((HEAP8[r24]&1)==0){HEAP8[r24]=r33<<1;break}else{HEAP32[r8+4>>2]=r33;break}}}while(0);r21=r3|0;r20=HEAP32[r21>>2];do{if((r20|0)==0){r41=0}else{if((HEAP32[r20+12>>2]|0)!=(HEAP32[r20+16>>2]|0)){r41=r20;break}if((FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+36>>2]](r20)|0)!=-1){r41=r20;break}HEAP32[r21>>2]=0;r41=0}}while(0);r21=(r41|0)==0;do{if((r23|0)==0){r2=55}else{if((HEAP32[r23+12>>2]|0)!=(HEAP32[r23+16>>2]|0)){if(r21){break}else{r2=57;break}}if((FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)|0)==-1){HEAP32[r22>>2]=0;r2=55;break}else{if(r21){break}else{r2=57;break}}}}while(0);if(r2==55){if(r21){r2=57}}if(r2==57){HEAP32[r7>>2]=HEAP32[r7>>2]|2}HEAP32[r1>>2]=r41;r22=r11+4|0;if(((tempValue=HEAP32[r22>>2],HEAP32[r22>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+8>>2]](r11)}r22=HEAP32[r15>>2];HEAP32[r15>>2]=0;if((r22|0)==0){r42=100;r43=0;STACKTOP=r9;return}FUNCTION_TABLE[HEAP32[r16>>2]](r22);r42=100;r43=0;STACKTOP=r9;return}}while(0);r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53856;___cxa_throw(r9,62200,872)}function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r5=r1;r6=HEAP8[r5];if((r6&1)==0){r7=(r6&255)>>>1}else{r7=HEAP32[r1+4>>2]}if((r7|0)==0){return}do{if((r2|0)==(r3|0)){r8=r6}else{r7=r3-4|0;if(r7>>>0>r2>>>0){r9=r2;r10=r7}else{r8=r6;break}while(1){r7=HEAP32[r9>>2];HEAP32[r9>>2]=HEAP32[r10>>2];HEAP32[r10>>2]=r7;r7=r9+4|0;r11=r10-4|0;if(r7>>>0<r11>>>0){r9=r7;r10=r11}else{break}}r8=HEAP8[r5]}}while(0);if((r8&1)==0){r12=(r8&255)>>>1;r13=r1+1|0}else{r12=HEAP32[r1+4>>2];r13=HEAP32[r1+8>>2]}r1=r3-4|0;r3=HEAP8[r13];r8=r3<<24>>24<1|r3<<24>>24==127;L18:do{if(r1>>>0>r2>>>0){r5=r13+r12|0;r10=r13;r9=r2;r6=r3;r11=r8;while(1){if(!r11){if((r6<<24>>24|0)!=(HEAP32[r9>>2]|0)){break}}r7=(r5-r10|0)>1?r10+1|0:r10;r14=r9+4|0;r15=HEAP8[r7];r16=r15<<24>>24<1|r15<<24>>24==127;if(r14>>>0<r1>>>0){r10=r7;r9=r14;r6=r15;r11=r16}else{r17=r15;r18=r16;break L18}}HEAP32[r4>>2]=4;return}else{r17=r3;r18=r8}}while(0);if(r18){return}r18=HEAP32[r1>>2];if(!(r17<<24>>24>>>0<r18>>>0|(r18|0)==0)){return}HEAP32[r4>>2]=4;return}function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(r1){return}function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48;r2=0;r9=0;r10=STACKTOP;STACKTOP=STACKTOP+584|0;r11=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r11>>2];r11=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r11>>2];r11=r10;r12=r10+16;r13=r10+416;r14=r10+424;r15=r10+432;r16=r10+440;r17=r10+480;r18=r13|0;HEAP32[r18>>2]=r12;r19=r13+4|0;HEAP32[r19>>2]=706;r20=r12+400|0;r12=HEAP32[r6+28>>2];r21=r12;r22=r12+4|0;tempValue=HEAP32[r22>>2],HEAP32[r22>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r11>>2]=71448;HEAP32[r11+4>>2]=46;HEAP32[r11+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r11)}r11=HEAP32[71452>>2]-1|0;r22=HEAP32[r12+8>>2];do{if(HEAP32[r12+12>>2]-r22>>2>>>0>r11>>>0){r23=HEAP32[r22+(r11<<2)>>2];if((r23|0)==0){break}r24=r23;HEAP8[r15]=0;r25=r4|0;do{if(__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(r3,HEAP32[r25>>2],r5,r21,HEAP32[r6+4>>2],r7,r15,r24,r13,r14,r20)){r26=r16|0;FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+48>>2]](r24,51624,51634,r26);r27=r17|0;r28=HEAP32[r14>>2];r29=HEAP32[r18>>2];r30=r28-r29|0;do{if((r30|0)>392){r31=_malloc((r30>>2)+2|0);if((r31|0)!=0){r32=r31;r33=r31;break}r31=___cxa_allocate_exception(4);HEAP32[r31>>2]=53824;___cxa_throw(r31,62184,110)}else{r32=r27;r33=0}}while(0);if((HEAP8[r15]|0)==0){r34=r32}else{HEAP8[r32]=45;r34=r32+1|0}if(r29>>>0<r28>>>0){r30=r16+40|0;r31=r16;r35=r34;r36=r29;while(1){r37=HEAP32[r36>>2];r38=r26;while(1){r39=r38+4|0;if((HEAP32[r38>>2]|0)==(r37|0)){r40=r38;break}if((r39|0)==(r30|0)){r40=r30;break}else{r38=r39}}HEAP8[r35]=HEAP8[51624+(r40-r31>>2)|0];r38=r36+4|0;r37=r35+1|0;if(r38>>>0<HEAP32[r14>>2]>>>0){r35=r37;r36=r38}else{r41=r37;break}}}else{r41=r34}HEAP8[r41]=0;r36=_sscanf(r27,44192,(r9=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r9>>2]=r8,r9));STACKTOP=r9;if((r36|0)==1){if((r33|0)==0){break}_free(r33);break}r36=___cxa_allocate_exception(8);HEAP32[r36>>2]=53888;r35=_strlen(42712);r31=r35+13|0;r30=(r31|0)==0?1:r31;while(1){r42=_malloc(r30);if((r42|0)!=0){r2=44;break}r31=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r31|0)==0){r2=36;break}FUNCTION_TABLE[r31]()}if(r2==36){r30=___cxa_allocate_exception(4);HEAP32[r30>>2]=53824;___cxa_throw(r30,62184,110)}else if(r2==44){HEAP32[r42+4>>2]=r35;HEAP32[r42>>2]=r35;r30=r42+12|0;HEAP32[r36+4>>2]=r30;HEAP32[r42+8>>2]=0;_memcpy(r30,42712,r35+1|0)|0;___cxa_throw(r36,62216,314)}}}while(0);r24=r3|0;r23=HEAP32[r24>>2];do{if((r23|0)==0){r43=1;r44=0}else{r30=HEAP32[r23+12>>2];if((r30|0)==(HEAP32[r23+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)}else{r45=HEAP32[r30>>2]}if((r45|0)!=-1){r43=0;r44=r23;break}HEAP32[r24>>2]=0;r43=1;r44=0}}while(0);r24=HEAP32[r25>>2];do{if((r24|0)==0){r2=60}else{r23=HEAP32[r24+12>>2];if((r23|0)==(HEAP32[r24+16>>2]|0)){r46=FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+36>>2]](r24)}else{r46=HEAP32[r23>>2]}if((r46|0)==-1){HEAP32[r25>>2]=0;r2=60;break}else{if(r43){break}else{r2=62;break}}}}while(0);if(r2==60){if(r43){r2=62}}if(r2==62){HEAP32[r7>>2]=HEAP32[r7>>2]|2}HEAP32[r1>>2]=r44;r25=r12+4|0;if(((tempValue=HEAP32[r25>>2],HEAP32[r25>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+8>>2]](r12)}r25=HEAP32[r18>>2];HEAP32[r18>>2]=0;if((r25|0)==0){r47=400;r48=0;STACKTOP=r10;return}FUNCTION_TABLE[HEAP32[r19>>2]](r25);r47=400;r48=0;STACKTOP=r10;return}}while(0);r10=___cxa_allocate_exception(4);HEAP32[r10>>2]=53856;___cxa_throw(r10,62200,872)}function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11){var r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543,r544,r545,r546,r547,r548,r549,r550,r551,r552,r553,r554,r555,r556,r557,r558,r559,r560,r561,r562,r563,r564,r565,r566,r567,r568,r569,r570,r571,r572,r573,r574,r575,r576,r577,r578,r579,r580,r581,r582,r583,r584,r585,r586,r587,r588,r589,r590,r591,r592,r593,r594,r595,r596,r597,r598,r599,r600,r601,r602,r603,r604,r605,r606,r607,r608,r609,r610,r611,r612,r613,r614,r615,r616,r617,r618,r619,r620,r621,r622,r623,r624,r625,r626,r627,r628,r629,r630,r631,r632,r633,r634,r635,r636,r637,r638,r639,r640,r641,r642,r643,r644,r645,r646,r647,r648,r649,r650,r651,r652,r653,r654,r655,r656,r657,r658,r659,r660,r661,r662,r663,r664,r665,r666,r667,r668,r669,r670,r671,r672,r673,r674,r675,r676,r677,r678,r679,r680,r681,r682,r683,r684,r685,r686,r687,r688,r689,r690,r691,r692,r693,r694,r695,r696,r697,r698,r699,r700,r701,r702,r703,r704,r705,r706,r707,r708,r709,r710,r711,r712,r713,r714,r715,r716,r717,r718,r719,r720,r721,r722,r723,r724,r725,r726,r727,r728,r729,r730,r731,r732,r733,r734,r735,r736,r737,r738,r739,r740,r741,r742,r743,r744,r745,r746,r747,r748,r749,r750,r751,r752,r753,r754,r755,r756,r757,r758,r759,r760,r761,r762,r763,r764,r765,r766,r767,r768,r769,r770,r771,r772,r773,r774,r775,r776,r777,r778,r779,r780,r781,r782,r783,r784,r785,r786,r787,r788,r789,r790,r791,r792,r793,r794,r795,r796,r797,r798,r799,r800,r801,r802,r803,r804,r805,r806,r807,r808,r809,r810,r811,r812,r813,r814,r815,r816,r817,r818,r819,r820,r821,r822,r823,r824,r825,r826,r827,r828,r829,r830,r831,r832,r833,r834,r835,r836,r837,r838,r839,r840,r841,r842,r843,r844,r845,r846,r847,r848,r849,r850,r851,r852,r853,r854,r855,r856,r857,r858,r859,r860,r861,r862,r863,r864,r865,r866,r867,r868,r869,r870,r871,r872,r873,r874,r875,r876,r877,r878,r879,r880,r881,r882,r883,r884,r885,r886,r887,r888,r889,r890,r891,r892,r893,r894,r895,r896,r897,r898,r899,r900,r901,r902,r903,r904,r905,r906,r907,r908,r909,r910,r911,r912,r913,r914,r915,r916,r917,r918,r919,r920,r921,r922,r923,r924,r925,r926,r927,r928,r929,r930,r931,r932,r933,r934,r935,r936,r937,r938,r939,r940,r941,r942,r943,r944,r945,r946,r947,r948,r949,r950,r951,r952,r953,r954,r955,r956,r957,r958,r959,r960,r961,r962,r963,r964,r965,r966,r967,r968,r969,r970,r971,r972,r973,r974,r975,r976,r977,r978,r979,r980,r981,r982,r983,r984,r985,r986,r987,r988,r989,r990,r991,r992,r993,r994,r995,r996,r997,r998,r999,r1000,r1001,r1002,r1003,r1004,r1005,r1006,r1007,r1008,r1009,r1010,r1011,r1012,r1013,r1014,r1015,r1016,r1017,r1018,r1019,r1020,r1021,r1022,r1023,r1024,r1025,r1026,r1027,r1028,r1029,r1030,r1031,r1032,r1033,r1034,r1035,r1036,r1037,r1038,r1039,r1040,r1041,r1042,r1043,r1044,r1045,r1046,r1047,r1048,r1049,r1050,r1051,r1052,r1053,r1054,r1055,r1056,r1057,r1058,r1059,r1060,r1061,r1062,r1063,r1064,r1065,r1066,r1067,r1068,r1069,r1070,r1071,r1072,r1073,r1074,r1075,r1076,r1077,r1078,r1079,r1080,r1081,r1082,r1083,r1084,r1085,r1086,r1087,r1088,r1089,r1090,r1091,r1092,r1093,r1094,r1095,r1096,r1097,r1098,r1099,r1100,r1101,r1102,r1103,r1104,r1105,r1106,r1107,r1108,r1109,r1110,r1111,r1112,r1113,r1114,r1115,r1116,r1117,r1118,r1119,r1120,r1121,r1122,r1123,r1124,r1125,r1126,r1127,r1128,r1129,r1130,r1131,r1132,r1133,r1134,r1135,r1136,r1137,r1138,r1139,r1140,r1141,r1142,r1143,r1144,r1145,r1146,r1147,r1148,r1149,r1150,r1151,r1152,r1153,r1154,r1155,r1156,r1157,r1158,r1159,r1160,r1161,r1162,r1163,r1164,r1165,r1166,r1167,r1168,r1169,r1170,r1171,r1172,r1173,r1174,r1175,r1176,r1177,r1178,r1179,r1180,r1181,r1182,r1183,r1184,r1185,r1186,r1187,r1188,r1189,r1190,r1191,r1192,r1193,r1194,r1195,r1196,r1197,r1198,r1199,r1200,r1201,r1202,r1203,r1204,r1205,r1206,r1207,r1208,r1209,r1210,r1211,r1212,r1213,r1214,r1215,r1216,r1217,r1218,r1219,r1220,r1221,r1222,r1223,r1224,r1225,r1226,r1227,r1228,r1229,r1230,r1231,r1232,r1233,r1234,r1235,r1236,r1237,r1238,r1239,r1240,r1241,r1242,r1243,r1244,r1245,r1246,r1247,r1248,r1249,r1250,r1251,r1252,r1253,r1254,r1255,r1256,r1257,r1258,r1259,r1260,r1261,r1262,r1263,r1264,r1265,r1266,r1267,r1268,r1269,r1270,r1271,r1272,r1273,r1274,r1275,r1276,r1277,r1278,r1279,r1280,r1281,r1282,r1283,r1284,r1285,r1286,r1287,r1288,r1289,r1290,r1291,r1292,r1293,r1294,r1295,r1296,r1297,r1298,r1299,r1300,r1301,r1302,r1303,r1304,r1305,r1306,r1307,r1308,r1309,r1310,r1311;r12=0;r13=STACKTOP;STACKTOP=STACKTOP+680|0;r14=r13;r15=r13+16;r16=r13+32;r17=r13+40;r18=r13+56;r19=r13+72;r20=r13+88;r21=r13+104;r22=r13+112;r23=r13+128;r24=r13+144;r25=r13+160;r26=r13+176;r27=r13+184;r28=r13+584;r29=r13+592;r30=r13+608;r31=r13+624;r32=r13+640;r33=r13+656;r34=r13+672;HEAP32[r26>>2]=r11;r35=r27;r36=400;r37=0;r38=r27|0;HEAP32[r28>>2]=0;r39=r29;HEAP32[r39>>2]=0;HEAP32[r39+4>>2]=0;HEAP32[r39+8>>2]=0;r40=r30;HEAP32[r40>>2]=0;HEAP32[r40+4>>2]=0;HEAP32[r40+8>>2]=0;r41=r31;HEAP32[r41>>2]=0;HEAP32[r41+4>>2]=0;HEAP32[r41+8>>2]=0;r42=r32;HEAP32[r42>>2]=0;HEAP32[r42+4>>2]=0;HEAP32[r42+8>>2]=0;r43=r33;HEAP32[r43>>2]=0;HEAP32[r43+4>>2]=0;HEAP32[r43+8>>2]=0;r44=r16;r45=4;r46=0;r47=r17;r48=12;r49=0;r50=r18;r51=12;r52=0;r53=r19;r54=12;r55=0;r56=r20;r57=12;r58=0;r59=r21;r60=4;r61=0;r62=r22;r63=12;r64=0;r65=r23;r66=12;r67=0;r68=r24;r69=12;r70=0;r71=r25;r72=12;r73=0;L1:do{if(r3){r74=r16;r75=r15;r76=12;r77=0;r78=HEAP32[71912>>2];r79=(r78|0)==-1;if(!r79){r80=r15|0;HEAP32[r80>>2]=71912;r81=r15+4|0;HEAP32[r81>>2]=46;r82=r15+8|0;HEAP32[r82>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71912,r75)}r83=12;r84=0;r85=HEAP32[71916>>2];r86=r85-1|0;r87=r4+12|0;r88=HEAP32[r87>>2];r89=r4+8|0;r90=HEAP32[r89>>2];r91=r88;r92=r90;r93=r91-r92|0;r94=r93>>2;r95=r94>>>0>r86>>>0;do{if(r95){r96=r90+(r86<<2)|0;r97=HEAP32[r96>>2];r98=(r97|0)==0;if(r98){break}r99=r97;r100=r97;r101=HEAP32[r100>>2];r102=r101+44|0;r103=HEAP32[r102>>2];FUNCTION_TABLE[r103](r74,r99);r104=HEAP32[r16>>2];HEAP32[r28>>2]=r104;r105=r97;r106=HEAP32[r105>>2];r107=r106+32|0;r108=HEAP32[r107>>2];FUNCTION_TABLE[r108](r17,r99);r109=HEAP8[r42];r110=r109&1;r111=r110<<24>>24==0;if(r111){r112=r32+4|0;HEAP32[r112>>2]=0;HEAP8[r42]=0}else{r113=r32+8|0;r114=HEAP32[r113>>2];HEAP32[r114>>2]=0;r115=r32+4|0;HEAP32[r115>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r32);HEAP32[r42>>2]=HEAP32[r47>>2];HEAP32[r42+4>>2]=HEAP32[r47+4>>2];HEAP32[r42+8>>2]=HEAP32[r47+8>>2];HEAP32[r47>>2]=0;HEAP32[r47+4>>2]=0;HEAP32[r47+8>>2]=0;r116=HEAP32[r105>>2];r117=r116+28|0;r118=HEAP32[r117>>2];FUNCTION_TABLE[r118](r18,r99);r119=HEAP8[r41];r120=r119&1;r121=r120<<24>>24==0;if(r121){r122=r31+4|0;HEAP32[r122>>2]=0;HEAP8[r41]=0}else{r123=r31+8|0;r124=HEAP32[r123>>2];HEAP32[r124>>2]=0;r125=r31+4|0;HEAP32[r125>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r31);HEAP32[r41>>2]=HEAP32[r50>>2];HEAP32[r41+4>>2]=HEAP32[r50+4>>2];HEAP32[r41+8>>2]=HEAP32[r50+8>>2];HEAP32[r50>>2]=0;HEAP32[r50+4>>2]=0;HEAP32[r50+8>>2]=0;r126=r97;r127=HEAP32[r126>>2];r128=r127+12|0;r129=HEAP32[r128>>2];r130=FUNCTION_TABLE[r129](r99);r131=HEAP32[r126>>2];r132=r131+16|0;r133=HEAP32[r132>>2];r134=FUNCTION_TABLE[r133](r99);r135=r97;r136=HEAP32[r135>>2];r137=r136+20|0;r138=HEAP32[r137>>2];FUNCTION_TABLE[r138](r19,r99);r139=HEAP8[r39];r140=r139&1;r141=r140<<24>>24==0;if(r141){r142=r29;r143=r142+1|0;HEAP8[r143]=0;HEAP8[r39]=0}else{r144=r29+8|0;r145=HEAP32[r144>>2];HEAP8[r145]=0;r146=r29+4|0;HEAP32[r146>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r29);HEAP32[r39>>2]=HEAP32[r53>>2];HEAP32[r39+4>>2]=HEAP32[r53+4>>2];HEAP32[r39+8>>2]=HEAP32[r53+8>>2];HEAP32[r53>>2]=0;HEAP32[r53+4>>2]=0;HEAP32[r53+8>>2]=0;r147=HEAP32[r105>>2];r148=r147+24|0;r149=HEAP32[r148>>2];FUNCTION_TABLE[r149](r20,r99);r150=HEAP8[r40];r151=r150&1;r152=r151<<24>>24==0;if(r152){r153=r30+4|0;HEAP32[r153>>2]=0;HEAP8[r40]=0}else{r154=r30+8|0;r155=HEAP32[r154>>2];HEAP32[r155>>2]=0;r156=r30+4|0;HEAP32[r156>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r30);HEAP32[r40>>2]=HEAP32[r56>>2];HEAP32[r40+4>>2]=HEAP32[r56+4>>2];HEAP32[r40+8>>2]=HEAP32[r56+8>>2];HEAP32[r56>>2]=0;HEAP32[r56+4>>2]=0;HEAP32[r56+8>>2]=0;r157=HEAP32[r126>>2];r158=r157+36|0;r159=HEAP32[r158>>2];r160=FUNCTION_TABLE[r159](r99);r161=r160;r162=r134;r163=r130;break L1}}while(0);r164=___cxa_allocate_exception(4);r165=r164;HEAP32[r165>>2]=53856;___cxa_throw(r164,62200,872)}else{r166=r21;r167=r14;r168=12;r169=0;r170=HEAP32[71920>>2];r171=(r170|0)==-1;if(!r171){r172=r14|0;HEAP32[r172>>2]=71920;r173=r14+4|0;HEAP32[r173>>2]=46;r174=r14+8|0;HEAP32[r174>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71920,r167)}r175=12;r176=0;r177=HEAP32[71924>>2];r178=r177-1|0;r179=r4+12|0;r180=HEAP32[r179>>2];r181=r4+8|0;r182=HEAP32[r181>>2];r183=r180;r184=r182;r185=r183-r184|0;r186=r185>>2;r187=r186>>>0>r178>>>0;do{if(r187){r188=r182+(r178<<2)|0;r189=HEAP32[r188>>2];r190=(r189|0)==0;if(r190){break}r191=r189;r192=r189;r193=HEAP32[r192>>2];r194=r193+44|0;r195=HEAP32[r194>>2];FUNCTION_TABLE[r195](r166,r191);r196=HEAP32[r21>>2];HEAP32[r28>>2]=r196;r197=r189;r198=HEAP32[r197>>2];r199=r198+32|0;r200=HEAP32[r199>>2];FUNCTION_TABLE[r200](r22,r191);r201=HEAP8[r42];r202=r201&1;r203=r202<<24>>24==0;if(r203){r204=r32+4|0;HEAP32[r204>>2]=0;HEAP8[r42]=0}else{r205=r32+8|0;r206=HEAP32[r205>>2];HEAP32[r206>>2]=0;r207=r32+4|0;HEAP32[r207>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r32);HEAP32[r42>>2]=HEAP32[r62>>2];HEAP32[r42+4>>2]=HEAP32[r62+4>>2];HEAP32[r42+8>>2]=HEAP32[r62+8>>2];HEAP32[r62>>2]=0;HEAP32[r62+4>>2]=0;HEAP32[r62+8>>2]=0;r208=HEAP32[r197>>2];r209=r208+28|0;r210=HEAP32[r209>>2];FUNCTION_TABLE[r210](r23,r191);r211=HEAP8[r41];r212=r211&1;r213=r212<<24>>24==0;if(r213){r214=r31+4|0;HEAP32[r214>>2]=0;HEAP8[r41]=0}else{r215=r31+8|0;r216=HEAP32[r215>>2];HEAP32[r216>>2]=0;r217=r31+4|0;HEAP32[r217>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r31);HEAP32[r41>>2]=HEAP32[r65>>2];HEAP32[r41+4>>2]=HEAP32[r65+4>>2];HEAP32[r41+8>>2]=HEAP32[r65+8>>2];HEAP32[r65>>2]=0;HEAP32[r65+4>>2]=0;HEAP32[r65+8>>2]=0;r218=r189;r219=HEAP32[r218>>2];r220=r219+12|0;r221=HEAP32[r220>>2];r222=FUNCTION_TABLE[r221](r191);r223=HEAP32[r218>>2];r224=r223+16|0;r225=HEAP32[r224>>2];r226=FUNCTION_TABLE[r225](r191);r227=r189;r228=HEAP32[r227>>2];r229=r228+20|0;r230=HEAP32[r229>>2];FUNCTION_TABLE[r230](r24,r191);r231=HEAP8[r39];r232=r231&1;r233=r232<<24>>24==0;if(r233){r234=r29;r235=r234+1|0;HEAP8[r235]=0;HEAP8[r39]=0}else{r236=r29+8|0;r237=HEAP32[r236>>2];HEAP8[r237]=0;r238=r29+4|0;HEAP32[r238>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r29);HEAP32[r39>>2]=HEAP32[r68>>2];HEAP32[r39+4>>2]=HEAP32[r68+4>>2];HEAP32[r39+8>>2]=HEAP32[r68+8>>2];HEAP32[r68>>2]=0;HEAP32[r68+4>>2]=0;HEAP32[r68+8>>2]=0;r239=HEAP32[r197>>2];r240=r239+24|0;r241=HEAP32[r240>>2];FUNCTION_TABLE[r241](r25,r191);r242=HEAP8[r40];r243=r242&1;r244=r243<<24>>24==0;if(r244){r245=r30+4|0;HEAP32[r245>>2]=0;HEAP8[r40]=0}else{r246=r30+8|0;r247=HEAP32[r246>>2];HEAP32[r247>>2]=0;r248=r30+4|0;HEAP32[r248>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r30);HEAP32[r40>>2]=HEAP32[r71>>2];HEAP32[r40+4>>2]=HEAP32[r71+4>>2];HEAP32[r40+8>>2]=HEAP32[r71+8>>2];HEAP32[r71>>2]=0;HEAP32[r71+4>>2]=0;HEAP32[r71+8>>2]=0;r249=HEAP32[r218>>2];r250=r249+36|0;r251=HEAP32[r250>>2];r252=FUNCTION_TABLE[r251](r191);r161=r252;r162=r226;r163=r222;break L1}}while(0);r253=___cxa_allocate_exception(4);r254=r253;HEAP32[r254>>2]=53856;___cxa_throw(r253,62200,872)}}while(0);r255=4;r256=0;r257=12;r258=0;r259=12;r260=0;r261=12;r262=0;r263=12;r264=0;r265=4;r266=0;r267=12;r268=0;r269=12;r270=0;r271=12;r272=0;r273=12;r274=0;r275=r27+400|0;r276=r9|0;r277=HEAP32[r276>>2];HEAP32[r10>>2]=r277;r278=r1|0;r279=r28;r280=r8;r281=r32+4|0;r282=r32+8|0;r283=r31+4|0;r284=r31+8|0;r285=r5&512;r286=(r285|0)!=0;r287=r30+4|0;r288=r30+8|0;r289=r33+4|0;r290=r33+8|0;r291=r279+3|0;r292=r29+4|0;r293=r33|0;r294=706;r295=r38;r296=r38;r297=r275;r298=0;r299=0;r300=r161;r301=r2;L75:while(1){r302=HEAP32[r278>>2];r303=(r302|0)==0;do{if(r303){r304=1}else{r305=r302+12|0;r306=HEAP32[r305>>2];r307=r302+16|0;r308=HEAP32[r307>>2];r309=(r306|0)==(r308|0);if(r309){r310=r302;r311=HEAP32[r310>>2];r312=r311+36|0;r313=HEAP32[r312>>2];r314=FUNCTION_TABLE[r313](r302);r315=r314}else{r316=HEAP32[r306>>2];r315=r316}r317=(r315|0)==-1;if(r317){HEAP32[r278>>2]=0;r304=1;break}else{r318=HEAP32[r278>>2];r319=(r318|0)==0;r304=r319;break}}}while(0);r320=(r301|0)==0;do{if(r320){r12=83}else{r321=r301+12|0;r322=HEAP32[r321>>2];r323=r301+16|0;r324=HEAP32[r323>>2];r325=(r322|0)==(r324|0);if(r325){r326=r301;r327=HEAP32[r326>>2];r328=r327+36|0;r329=HEAP32[r328>>2];r330=FUNCTION_TABLE[r329](r301);r331=r330}else{r332=HEAP32[r322>>2];r331=r332}r333=(r331|0)==-1;if(r333){r12=83;break}if(r304){r334=r301}else{r335=r294;r336=r295;r337=r296;r338=r299;r339=r301;r12=395;break L75}}}while(0);if(r12==83){r12=0;if(r304){r335=r294;r336=r295;r337=r296;r338=r299;r339=0;r12=395;break}else{r334=0}}r340=r279+r298|0;r341=HEAP8[r340];r342=r341<<24>>24;L97:do{switch(r342|0){case 2:{r343=(r299|0)!=0;r344=r298>>>0<2;r345=r343|r344;if(!r345){r346=(r298|0)==2;if(r346){r347=HEAP8[r291];r348=r347<<24>>24!=0;r349=r348}else{r349=0}r350=r286|r349;if(!r350){r351=0;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}}r358=HEAP8[r40];r359=r358&1;r360=r359<<24>>24==0;r361=HEAP32[r288>>2];r362=r360?r287:r361;r363=(r298|0)==0;L105:do{if(r363){r364=r362;r365=r358;r366=r334;r367=r334;r368=r334}else{r369=r298-1|0;r370=r279+r369|0;r371=HEAP8[r370];r372=(r371&255)<2;if(r372){r373=r362;r374=r358}else{r364=r362;r365=r358;r366=r334;r367=r334;r368=r334;break}while(1){r375=r374&1;r376=r375<<24>>24==0;if(r376){r377=r374&255;r378=r377>>>1;r379=r378;r380=r287}else{r381=HEAP32[r288>>2];r382=HEAP32[r287>>2];r379=r382;r380=r381}r383=r380+(r379<<2)|0;r384=(r373|0)==(r383|0);if(r384){r385=r374;break}r386=HEAP32[r373>>2];r387=HEAP32[r280>>2];r388=r387+12|0;r389=HEAP32[r388>>2];r390=FUNCTION_TABLE[r389](r8,8192,r386);if(!r390){r12=249;break}r391=r373+4|0;r392=HEAP8[r40];r373=r391;r374=r392}if(r12==249){r12=0;r393=HEAP8[r40];r385=r393}r394=r385&1;r395=r394<<24>>24==0;r396=HEAP32[r288>>2];r397=r395?r287:r396;r398=r373;r399=r397;r400=r398-r399|0;r401=r400>>2;r402=HEAP8[r43];r403=r402&1;r404=r403<<24>>24==0;if(r404){r405=r402&255;r406=r405>>>1;r407=r406}else{r408=HEAP32[r289>>2];r407=r408}r409=r401>>>0>r407>>>0;if(r409){r364=r397;r365=r385;r366=r334;r367=r334;r368=r334;break}if(r404){r410=r402&255;r411=r410>>>1;r412=r411-r401|0;r413=r289+(r412<<2)|0;r414=r411;r415=r289;r416=r413}else{r417=HEAP32[r290>>2];r418=HEAP32[r289>>2];r419=r418-r401|0;r420=r417+(r419<<2)|0;r414=r418;r415=r417;r416=r420}r421=r415+(r414<<2)|0;r422=(r416|0)==(r421|0);if(r422){r364=r373;r365=r385;r366=r334;r367=r334;r368=r334;break}else{r423=r416;r424=r397}while(1){r425=HEAP32[r423>>2];r426=HEAP32[r424>>2];r427=(r425|0)==(r426|0);if(!r427){r364=r397;r365=r385;r366=r334;r367=r334;r368=r334;break L105}r428=r423+4|0;r429=(r428|0)==(r421|0);if(r429){r364=r373;r365=r385;r366=r334;r367=r334;r368=r334;break L105}r430=r424+4|0;r423=r428;r424=r430}}}while(0);L132:while(1){r431=r365&1;r432=r431<<24>>24==0;if(r432){r433=r365&255;r434=r433>>>1;r435=r434;r436=r287}else{r437=HEAP32[r288>>2];r438=HEAP32[r287>>2];r435=r438;r436=r437}r439=r436+(r435<<2)|0;r440=(r364|0)==(r439|0);if(r440){r441=r368;break}r442=HEAP32[r278>>2];r443=(r442|0)==0;do{if(r443){r444=1}else{r445=r442+12|0;r446=HEAP32[r445>>2];r447=r442+16|0;r448=HEAP32[r447>>2];r449=(r446|0)==(r448|0);if(r449){r450=r442;r451=HEAP32[r450>>2];r452=r451+36|0;r453=HEAP32[r452>>2];r454=FUNCTION_TABLE[r453](r442);r455=r454}else{r456=HEAP32[r446>>2];r455=r456}r457=(r455|0)==-1;if(r457){HEAP32[r278>>2]=0;r444=1;break}else{r458=HEAP32[r278>>2];r459=(r458|0)==0;r444=r459;break}}}while(0);r460=(r366|0)==0;do{if(r460){r461=r367;r462=r368;r12=277}else{r463=r366+12|0;r464=HEAP32[r463>>2];r465=r366+16|0;r466=HEAP32[r465>>2];r467=(r464|0)==(r466|0);if(r467){r468=r366;r469=HEAP32[r468>>2];r470=r469+36|0;r471=HEAP32[r470>>2];r472=FUNCTION_TABLE[r471](r366);r473=r472}else{r474=HEAP32[r464>>2];r473=r474}r475=(r473|0)==-1;if(r475){r461=0;r462=0;r12=277;break}r476=(r367|0)==0;r477=r444^r476;if(r477){r478=r367;r479=r367;r480=r368}else{r441=r368;break L132}}}while(0);if(r12==277){r12=0;if(r444){r441=r462;break}else{r478=0;r479=r461;r480=r462}}r481=HEAP32[r278>>2];r482=r481+12|0;r483=HEAP32[r482>>2];r484=r481+16|0;r485=HEAP32[r484>>2];r486=(r483|0)==(r485|0);if(r486){r487=r481;r488=HEAP32[r487>>2];r489=r488+36|0;r490=HEAP32[r489>>2];r491=FUNCTION_TABLE[r490](r481);r492=r491}else{r493=HEAP32[r483>>2];r492=r493}r494=HEAP32[r364>>2];r495=(r492|0)==(r494|0);if(!r495){r441=r480;break}r496=HEAP32[r278>>2];r497=r496+12|0;r498=HEAP32[r497>>2];r499=r496+16|0;r500=HEAP32[r499>>2];r501=(r498|0)==(r500|0);if(r501){r502=r496;r503=HEAP32[r502>>2];r504=r503+40|0;r505=HEAP32[r504>>2];r506=FUNCTION_TABLE[r505](r496)}else{r507=r498+4|0;HEAP32[r497>>2]=r507}r508=r364+4|0;r509=HEAP8[r40];r364=r508;r365=r509;r366=r478;r367=r479;r368=r480}if(!r286){r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r441;break L97}r510=HEAP8[r40];r511=r510&1;r512=r511<<24>>24==0;if(r512){r513=r510&255;r514=r513>>>1;r515=r514;r516=r287}else{r517=HEAP32[r288>>2];r518=HEAP32[r287>>2];r515=r518;r516=r517}r519=r516+(r515<<2)|0;r520=(r364|0)==(r519|0);if(r520){r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r441}else{r12=292;break L75}break};case 4:{r521=0;r522=r297;r523=r296;r524=r295;r525=r294;r526=r334;L174:while(1){r527=HEAP32[r278>>2];r528=(r527|0)==0;do{if(r528){r529=1}else{r530=r527+12|0;r531=HEAP32[r530>>2];r532=r527+16|0;r533=HEAP32[r532>>2];r534=(r531|0)==(r533|0);if(r534){r535=r527;r536=HEAP32[r535>>2];r537=r536+36|0;r538=HEAP32[r537>>2];r539=FUNCTION_TABLE[r538](r527);r540=r539}else{r541=HEAP32[r531>>2];r540=r541}r542=(r540|0)==-1;if(r542){HEAP32[r278>>2]=0;r529=1;break}else{r543=HEAP32[r278>>2];r544=(r543|0)==0;r529=r544;break}}}while(0);r545=(r526|0)==0;do{if(r545){r12=305}else{r546=r526+12|0;r547=HEAP32[r546>>2];r548=r526+16|0;r549=HEAP32[r548>>2];r550=(r547|0)==(r549|0);if(r550){r551=r526;r552=HEAP32[r551>>2];r553=r552+36|0;r554=HEAP32[r553>>2];r555=FUNCTION_TABLE[r554](r526);r556=r555}else{r557=HEAP32[r547>>2];r556=r557}r558=(r556|0)==-1;if(r558){r12=305;break}if(r529){r559=r526}else{r560=r526;break L174}}}while(0);if(r12==305){r12=0;if(r529){r560=0;break}else{r559=0}}r561=HEAP32[r278>>2];r562=r561+12|0;r563=HEAP32[r562>>2];r564=r561+16|0;r565=HEAP32[r564>>2];r566=(r563|0)==(r565|0);if(r566){r567=r561;r568=HEAP32[r567>>2];r569=r568+36|0;r570=HEAP32[r569>>2];r571=FUNCTION_TABLE[r570](r561);r572=r571}else{r573=HEAP32[r563>>2];r572=r573}r574=HEAP32[r280>>2];r575=r574+12|0;r576=HEAP32[r575>>2];r577=FUNCTION_TABLE[r576](r8,2048,r572);if(r577){r578=HEAP32[r10>>2];r579=HEAP32[r26>>2];r580=(r578|0)==(r579|0);if(r580){__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(r9,r10,r26);r581=HEAP32[r10>>2];r582=r581}else{r582=r578}r583=r582+4|0;HEAP32[r10>>2]=r583;HEAP32[r582>>2]=r572;r584=r521+1|0;r585=r584;r586=r522;r587=r523;r588=r524;r589=r525}else{r590=HEAP8[r39];r591=r590&1;r592=r591<<24>>24==0;if(r592){r593=r590&255;r594=r593>>>1;r595=r594}else{r596=HEAP32[r292>>2];r595=r596}r597=(r595|0)==0;r598=(r521|0)==0;r599=r597|r598;r600=r599^1;r601=(r572|0)==(r162|0);r602=r600&r601;if(!r602){r560=r559;break}r603=(r523|0)==(r522|0);if(r603){r604=(r525|0)==706;r605=r523;r606=r524;r607=r605-r606|0;r608=r607>>>0<2147483647;r609=r607<<1;r610=r608?r609:-1;r611=r607>>2;if(r604){r612=0}else{r613=r524;r612=r613}r614=_realloc(r612,r610);r615=r614;r616=(r614|0)==0;if(r616){r12=324;break L75}r617=r610>>>2;r618=r615+(r611<<2)|0;r619=r615+(r617<<2)|0;r620=r619;r621=r618;r622=r615;r623=356}else{r620=r522;r621=r523;r622=r524;r623=r525}r624=r621+4|0;HEAP32[r621>>2]=r521;r585=0;r586=r620;r587=r624;r588=r622;r589=r623}r625=HEAP32[r278>>2];r626=r625+12|0;r627=HEAP32[r626>>2];r628=r625+16|0;r629=HEAP32[r628>>2];r630=(r627|0)==(r629|0);if(r630){r631=r625;r632=HEAP32[r631>>2];r633=r632+40|0;r634=HEAP32[r633>>2];r635=FUNCTION_TABLE[r634](r625);r521=r585;r522=r586;r523=r587;r524=r588;r525=r589;r526=r559;continue}else{r636=r627+4|0;HEAP32[r626>>2]=r636;r521=r585;r522=r586;r523=r587;r524=r588;r525=r589;r526=r559;continue}}r637=(r524|0)==(r523|0);r638=(r521|0)==0;r639=r637|r638;if(r639){r640=r522;r641=r523;r642=r524;r643=r525}else{r644=(r523|0)==(r522|0);if(r644){r645=(r525|0)==706;r646=r523;r647=r524;r648=r646-r647|0;r649=r648>>>0<2147483647;r650=r648<<1;r651=r649?r650:-1;r652=r648>>2;if(r645){r653=0}else{r654=r524;r653=r654}r655=_realloc(r653,r651);r656=r655;r657=(r655|0)==0;if(r657){r12=336;break L75}r658=r651>>>2;r659=r656+(r652<<2)|0;r660=r656+(r658<<2)|0;r661=r660;r662=r659;r663=r656;r664=356}else{r661=r522;r662=r523;r663=r524;r664=r525}r665=r662+4|0;HEAP32[r662>>2]=r521;r640=r661;r641=r665;r642=r663;r643=r664}r666=(r300|0)>0;if(r666){r667=HEAP32[r278>>2];r668=(r667|0)==0;do{if(r668){r669=1}else{r670=r667+12|0;r671=HEAP32[r670>>2];r672=r667+16|0;r673=HEAP32[r672>>2];r674=(r671|0)==(r673|0);if(r674){r675=r667;r676=HEAP32[r675>>2];r677=r676+36|0;r678=HEAP32[r677>>2];r679=FUNCTION_TABLE[r678](r667);r680=r679}else{r681=HEAP32[r671>>2];r680=r681}r682=(r680|0)==-1;if(r682){HEAP32[r278>>2]=0;r669=1;break}else{r683=HEAP32[r278>>2];r684=(r683|0)==0;r669=r684;break}}}while(0);r685=(r560|0)==0;do{if(r685){r12=353}else{r686=r560+12|0;r687=HEAP32[r686>>2];r688=r560+16|0;r689=HEAP32[r688>>2];r690=(r687|0)==(r689|0);if(r690){r691=r560;r692=HEAP32[r691>>2];r693=r692+36|0;r694=HEAP32[r693>>2];r695=FUNCTION_TABLE[r694](r560);r696=r695}else{r697=HEAP32[r687>>2];r696=r697}r698=(r696|0)==-1;if(r698){r12=353;break}if(r669){r699=r560}else{r12=359;break L75}}}while(0);if(r12==353){r12=0;if(r669){r12=359;break L75}else{r699=0}}r700=HEAP32[r278>>2];r701=r700+12|0;r702=HEAP32[r701>>2];r703=r700+16|0;r704=HEAP32[r703>>2];r705=(r702|0)==(r704|0);if(r705){r706=r700;r707=HEAP32[r706>>2];r708=r707+36|0;r709=HEAP32[r708>>2];r710=FUNCTION_TABLE[r709](r700);r711=r710}else{r712=HEAP32[r702>>2];r711=r712}r713=(r711|0)==(r163|0);if(!r713){r12=359;break L75}r714=HEAP32[r278>>2];r715=r714+12|0;r716=HEAP32[r715>>2];r717=r714+16|0;r718=HEAP32[r717>>2];r719=(r716|0)==(r718|0);if(r719){r720=r714;r721=HEAP32[r720>>2];r722=r721+40|0;r723=HEAP32[r722>>2];r724=FUNCTION_TABLE[r723](r714);r725=r699;r726=r300;r727=r699;r728=r699}else{r729=r716+4|0;HEAP32[r715>>2]=r729;r725=r699;r726=r300;r727=r699;r728=r699}while(1){r730=HEAP32[r278>>2];r731=(r730|0)==0;do{if(r731){r732=1}else{r733=r730+12|0;r734=HEAP32[r733>>2];r735=r730+16|0;r736=HEAP32[r735>>2];r737=(r734|0)==(r736|0);if(r737){r738=r730;r739=HEAP32[r738>>2];r740=r739+36|0;r741=HEAP32[r740>>2];r742=FUNCTION_TABLE[r741](r730);r743=r742}else{r744=HEAP32[r734>>2];r743=r744}r745=(r743|0)==-1;if(r745){HEAP32[r278>>2]=0;r732=1;break}else{r746=HEAP32[r278>>2];r747=(r746|0)==0;r732=r747;break}}}while(0);r748=(r725|0)==0;do{if(r748){r749=r727;r750=r728;r12=375}else{r751=r725+12|0;r752=HEAP32[r751>>2];r753=r725+16|0;r754=HEAP32[r753>>2];r755=(r752|0)==(r754|0);if(r755){r756=r725;r757=HEAP32[r756>>2];r758=r757+36|0;r759=HEAP32[r758>>2];r760=FUNCTION_TABLE[r759](r725);r761=r760}else{r762=HEAP32[r752>>2];r761=r762}r763=(r761|0)==-1;if(r763){r749=0;r750=0;r12=375;break}r764=(r727|0)==0;r765=r732^r764;if(r765){r766=r727;r767=r727;r768=r728}else{r12=382;break L75}}}while(0);if(r12==375){r12=0;if(r732){r12=382;break L75}else{r766=r749;r767=0;r768=r750}}r769=HEAP32[r278>>2];r770=r769+12|0;r771=HEAP32[r770>>2];r772=r769+16|0;r773=HEAP32[r772>>2];r774=(r771|0)==(r773|0);if(r774){r775=r769;r776=HEAP32[r775>>2];r777=r776+36|0;r778=HEAP32[r777>>2];r779=FUNCTION_TABLE[r778](r769);r780=r779}else{r781=HEAP32[r771>>2];r780=r781}r782=HEAP32[r280>>2];r783=r782+12|0;r784=HEAP32[r783>>2];r785=FUNCTION_TABLE[r784](r8,2048,r780);if(!r785){r12=382;break L75}r786=HEAP32[r10>>2];r787=HEAP32[r26>>2];r788=(r786|0)==(r787|0);if(r788){__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(r9,r10,r26)}r789=HEAP32[r278>>2];r790=r789+12|0;r791=HEAP32[r790>>2];r792=r789+16|0;r793=HEAP32[r792>>2];r794=(r791|0)==(r793|0);if(r794){r795=r789;r796=HEAP32[r795>>2];r797=r796+36|0;r798=HEAP32[r797>>2];r799=FUNCTION_TABLE[r798](r789);r800=r799}else{r801=HEAP32[r791>>2];r800=r801}r802=HEAP32[r10>>2];r803=r802+4|0;HEAP32[r10>>2]=r803;HEAP32[r802>>2]=r800;r804=r726-1|0;r805=HEAP32[r278>>2];r806=r805+12|0;r807=HEAP32[r806>>2];r808=r805+16|0;r809=HEAP32[r808>>2];r810=(r807|0)==(r809|0);if(r810){r811=r805;r812=HEAP32[r811>>2];r813=r812+40|0;r814=HEAP32[r813>>2];r815=FUNCTION_TABLE[r814](r805)}else{r816=r807+4|0;HEAP32[r806>>2]=r816}r817=(r804|0)>0;if(r817){r725=r767;r726=r804;r727=r766;r728=r768}else{r818=r804;r819=r768;break}}}else{r818=r300;r819=r560}r820=HEAP32[r10>>2];r821=HEAP32[r276>>2];r822=(r820|0)==(r821|0);if(r822){r12=393;break L75}else{r351=r299;r352=r640;r353=r641;r354=r642;r355=r643;r356=r818;r357=r819}break};case 1:{r823=(r298|0)==3;if(r823){r335=r294;r336=r295;r337=r296;r338=r299;r339=r334;r12=395;break L75}r824=HEAP32[r278>>2];r825=r824+12|0;r826=HEAP32[r825>>2];r827=r824+16|0;r828=HEAP32[r827>>2];r829=(r826|0)==(r828|0);if(r829){r830=r824;r831=HEAP32[r830>>2];r832=r831+36|0;r833=HEAP32[r832>>2];r834=FUNCTION_TABLE[r833](r824);r835=r834}else{r836=HEAP32[r826>>2];r835=r836}r837=HEAP32[r280>>2];r838=r837+12|0;r839=HEAP32[r838>>2];r840=FUNCTION_TABLE[r839](r8,8192,r835);if(!r840){r12=134;break L75}r841=HEAP32[r278>>2];r842=r841+12|0;r843=HEAP32[r842>>2];r844=r841+16|0;r845=HEAP32[r844>>2];r846=(r843|0)==(r845|0);if(r846){r847=r841;r848=HEAP32[r847>>2];r849=r848+40|0;r850=HEAP32[r849>>2];r851=FUNCTION_TABLE[r850](r841);r852=r851}else{r853=r843+4|0;HEAP32[r842>>2]=r853;r854=HEAP32[r843>>2];r852=r854}r855=HEAP8[r43];r856=r855&1;r857=r856<<24>>24!=0;if(r857){r858=HEAP32[r293>>2];r859=r858&-2;r860=r859-1|0;r861=HEAP32[r289>>2];r862=r861;r863=r860}else{r864=r855&255;r865=r864>>>1;r862=r865;r863=1}r866=(r862|0)==(r863|0);if(r866){__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(r33,r863,1,r863,r863,0,0);r867=HEAP8[r43];r868=r867&1;r869=r868<<24>>24==0;if(r869){r12=131}else{r12=132}}else{if(r857){r12=132}else{r12=131}}if(r12==131){r12=0;r870=r862<<1;r871=r870+2|0;r872=r871&255;HEAP8[r43]=r872;r873=r862+1|0;r874=r289;r875=r873}else if(r12==132){r12=0;r876=HEAP32[r290>>2];r877=r862+1|0;HEAP32[r289>>2]=r877;r874=r876;r875=r877}r878=r874+(r862<<2)|0;HEAP32[r878>>2]=r852;r879=r874+(r875<<2)|0;HEAP32[r879>>2]=0;r12=135;break};case 0:{r12=135;break};case 3:{r880=HEAP8[r41];r881=r880&1;r882=r881<<24>>24==0;if(r882){r883=r880&255;r884=r883>>>1;r885=r884}else{r886=HEAP32[r283>>2];r885=r886}r887=HEAP8[r42];r888=r887&1;r889=r888<<24>>24==0;if(r889){r890=r887&255;r891=r890>>>1;r892=r891}else{r893=HEAP32[r281>>2];r892=r893}r894=-r892|0;r895=(r885|0)==(r894|0);if(r895){r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}if(r882){r896=r880&255;r897=r896>>>1;r898=r897}else{r899=HEAP32[r283>>2];r898=r899}r900=(r898|0)==0;do{if(!r900){if(r889){r901=r887&255;r902=r901>>>1;r903=r902}else{r904=HEAP32[r281>>2];r903=r904}r905=(r903|0)==0;if(r905){break}r906=HEAP32[r278>>2];r907=r906+12|0;r908=HEAP32[r907>>2];r909=r906+16|0;r910=HEAP32[r909>>2];r911=(r908|0)==(r910|0);if(r911){r912=r906;r913=HEAP32[r912>>2];r914=r913+36|0;r915=HEAP32[r914>>2];r916=FUNCTION_TABLE[r915](r906);r917=HEAP8[r41];r918=HEAP32[r278>>2];r919=r918+12|0;r920=HEAP32[r919>>2];r921=r918+16|0;r922=HEAP32[r921>>2];r923=r916;r924=r917;r925=r918;r926=r920;r927=r922}else{r928=HEAP32[r908>>2];r923=r928;r924=r880;r925=r906;r926=r908;r927=r910}r929=r924&1;r930=r929<<24>>24==0;r931=HEAP32[r284>>2];r932=r930?r283:r931;r933=HEAP32[r932>>2];r934=(r923|0)==(r933|0);r935=r925+12|0;r936=(r926|0)==(r927|0);if(r934){if(r936){r937=r925;r938=HEAP32[r937>>2];r939=r938+40|0;r940=HEAP32[r939>>2];r941=FUNCTION_TABLE[r940](r925)}else{r942=r926+4|0;HEAP32[r935>>2]=r942}r943=HEAP8[r41];r944=r943&1;r945=r944<<24>>24==0;if(r945){r946=r943&255;r947=r946>>>1;r948=r947}else{r949=HEAP32[r283>>2];r948=r949}r950=r948>>>0>1;r951=r950?r31:r299;r351=r951;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}if(r936){r952=r925;r953=HEAP32[r952>>2];r954=r953+36|0;r955=HEAP32[r954>>2];r956=FUNCTION_TABLE[r955](r925);r957=r956}else{r958=HEAP32[r926>>2];r957=r958}r959=HEAP8[r42];r960=r959&1;r961=r960<<24>>24==0;r962=HEAP32[r282>>2];r963=r961?r281:r962;r964=HEAP32[r963>>2];r965=(r957|0)==(r964|0);if(!r965){r12=235;break L75}r966=HEAP32[r278>>2];r967=r966+12|0;r968=HEAP32[r967>>2];r969=r966+16|0;r970=HEAP32[r969>>2];r971=(r968|0)==(r970|0);if(r971){r972=r966;r973=HEAP32[r972>>2];r974=r973+40|0;r975=HEAP32[r974>>2];r976=FUNCTION_TABLE[r975](r966)}else{r977=r968+4|0;HEAP32[r967>>2]=r977}HEAP8[r7]=1;r978=HEAP8[r42];r979=r978&1;r980=r979<<24>>24==0;if(r980){r981=r978&255;r982=r981>>>1;r983=r982}else{r984=HEAP32[r281>>2];r983=r984}r985=r983>>>0>1;r986=r985?r32:r299;r351=r986;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}}while(0);if(r882){r987=r880&255;r988=r987>>>1;r989=r988}else{r990=HEAP32[r283>>2];r989=r990}r991=(r989|0)==0;r992=HEAP32[r278>>2];r993=r992+12|0;r994=HEAP32[r993>>2];r995=r992+16|0;r996=HEAP32[r995>>2];r997=(r994|0)==(r996|0);if(r991){if(r997){r998=r992;r999=HEAP32[r998>>2];r1000=r999+36|0;r1001=HEAP32[r1000>>2];r1002=FUNCTION_TABLE[r1001](r992);r1003=HEAP8[r42];r1004=r1002;r1005=r1003}else{r1006=HEAP32[r994>>2];r1004=r1006;r1005=r887}r1007=r1005&1;r1008=r1007<<24>>24==0;r1009=HEAP32[r282>>2];r1010=r1008?r281:r1009;r1011=HEAP32[r1010>>2];r1012=(r1004|0)==(r1011|0);if(!r1012){r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}r1013=HEAP32[r278>>2];r1014=r1013+12|0;r1015=HEAP32[r1014>>2];r1016=r1013+16|0;r1017=HEAP32[r1016>>2];r1018=(r1015|0)==(r1017|0);if(r1018){r1019=r1013;r1020=HEAP32[r1019>>2];r1021=r1020+40|0;r1022=HEAP32[r1021>>2];r1023=FUNCTION_TABLE[r1022](r1013)}else{r1024=r1015+4|0;HEAP32[r1014>>2]=r1024}HEAP8[r7]=1;r1025=HEAP8[r42];r1026=r1025&1;r1027=r1026<<24>>24==0;if(r1027){r1028=r1025&255;r1029=r1028>>>1;r1030=r1029}else{r1031=HEAP32[r281>>2];r1030=r1031}r1032=r1030>>>0>1;r1033=r1032?r32:r299;r351=r1033;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}if(r997){r1034=r992;r1035=HEAP32[r1034>>2];r1036=r1035+36|0;r1037=HEAP32[r1036>>2];r1038=FUNCTION_TABLE[r1037](r992);r1039=HEAP8[r41];r1040=r1038;r1041=r1039}else{r1042=HEAP32[r994>>2];r1040=r1042;r1041=r880}r1043=r1041&1;r1044=r1043<<24>>24==0;r1045=HEAP32[r284>>2];r1046=r1044?r283:r1045;r1047=HEAP32[r1046>>2];r1048=(r1040|0)==(r1047|0);if(!r1048){HEAP8[r7]=1;r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break L97}r1049=HEAP32[r278>>2];r1050=r1049+12|0;r1051=HEAP32[r1050>>2];r1052=r1049+16|0;r1053=HEAP32[r1052>>2];r1054=(r1051|0)==(r1053|0);if(r1054){r1055=r1049;r1056=HEAP32[r1055>>2];r1057=r1056+40|0;r1058=HEAP32[r1057>>2];r1059=FUNCTION_TABLE[r1058](r1049)}else{r1060=r1051+4|0;HEAP32[r1050>>2]=r1060}r1061=HEAP8[r41];r1062=r1061&1;r1063=r1062<<24>>24==0;if(r1063){r1064=r1061&255;r1065=r1064>>>1;r1066=r1065}else{r1067=HEAP32[r283>>2];r1066=r1067}r1068=r1066>>>0>1;r1069=r1068?r31:r299;r351=r1069;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334;break};default:{r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r334}}}while(0);L417:do{if(r12==135){r12=0;r1070=(r298|0)==3;if(r1070){r335=r294;r336=r295;r337=r296;r338=r299;r339=r334;r12=395;break L75}else{r1071=r334;r1072=r334;r1073=r334}while(1){r1074=HEAP32[r278>>2];r1075=(r1074|0)==0;do{if(r1075){r1076=1}else{r1077=r1074+12|0;r1078=HEAP32[r1077>>2];r1079=r1074+16|0;r1080=HEAP32[r1079>>2];r1081=(r1078|0)==(r1080|0);if(r1081){r1082=r1074;r1083=HEAP32[r1082>>2];r1084=r1083+36|0;r1085=HEAP32[r1084>>2];r1086=FUNCTION_TABLE[r1085](r1074);r1087=r1086}else{r1088=HEAP32[r1078>>2];r1087=r1088}r1089=(r1087|0)==-1;if(r1089){HEAP32[r278>>2]=0;r1076=1;break}else{r1090=HEAP32[r278>>2];r1091=(r1090|0)==0;r1076=r1091;break}}}while(0);r1092=(r1071|0)==0;do{if(r1092){r1093=r1072;r1094=r1073;r12=148}else{r1095=r1071+12|0;r1096=HEAP32[r1095>>2];r1097=r1071+16|0;r1098=HEAP32[r1097>>2];r1099=(r1096|0)==(r1098|0);if(r1099){r1100=r1071;r1101=HEAP32[r1100>>2];r1102=r1101+36|0;r1103=HEAP32[r1102>>2];r1104=FUNCTION_TABLE[r1103](r1071);r1105=r1104}else{r1106=HEAP32[r1096>>2];r1105=r1106}r1107=(r1105|0)==-1;if(r1107){r1093=0;r1094=0;r12=148;break}r1108=(r1072|0)==0;r1109=r1076^r1108;if(r1109){r1110=r1072;r1111=r1072;r1112=r1073}else{r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r1073;break L417}}}while(0);if(r12==148){r12=0;if(r1076){r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r1094;break L417}else{r1110=0;r1111=r1093;r1112=r1094}}r1113=HEAP32[r278>>2];r1114=r1113+12|0;r1115=HEAP32[r1114>>2];r1116=r1113+16|0;r1117=HEAP32[r1116>>2];r1118=(r1115|0)==(r1117|0);if(r1118){r1119=r1113;r1120=HEAP32[r1119>>2];r1121=r1120+36|0;r1122=HEAP32[r1121>>2];r1123=FUNCTION_TABLE[r1122](r1113);r1124=r1123}else{r1125=HEAP32[r1115>>2];r1124=r1125}r1126=HEAP32[r280>>2];r1127=r1126+12|0;r1128=HEAP32[r1127>>2];r1129=FUNCTION_TABLE[r1128](r8,8192,r1124);if(!r1129){r351=r299;r352=r297;r353=r296;r354=r295;r355=r294;r356=r300;r357=r1112;break L417}r1130=HEAP32[r278>>2];r1131=r1130+12|0;r1132=HEAP32[r1131>>2];r1133=r1130+16|0;r1134=HEAP32[r1133>>2];r1135=(r1132|0)==(r1134|0);if(r1135){r1136=r1130;r1137=HEAP32[r1136>>2];r1138=r1137+40|0;r1139=HEAP32[r1138>>2];r1140=FUNCTION_TABLE[r1139](r1130);r1141=r1140}else{r1142=r1132+4|0;HEAP32[r1131>>2]=r1142;r1143=HEAP32[r1132>>2];r1141=r1143}r1144=HEAP8[r43];r1145=r1144&1;r1146=r1145<<24>>24!=0;if(r1146){r1147=HEAP32[r293>>2];r1148=r1147&-2;r1149=r1148-1|0;r1150=HEAP32[r289>>2];r1151=r1150;r1152=r1149}else{r1153=r1144&255;r1154=r1153>>>1;r1151=r1154;r1152=1}r1155=(r1151|0)==(r1152|0);if(r1155){__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(r33,r1152,1,r1152,r1152,0,0);r1156=HEAP8[r43];r1157=r1156&1;r1158=r1157<<24>>24==0;if(r1158){r12=165}else{r12=166}}else{if(r1146){r12=166}else{r12=165}}if(r12==165){r12=0;r1159=r1151<<1;r1160=r1159+2|0;r1161=r1160&255;HEAP8[r43]=r1161;r1162=r1151+1|0;r1163=r289;r1164=r1162}else if(r12==166){r12=0;r1165=HEAP32[r290>>2];r1166=r1151+1|0;HEAP32[r289>>2]=r1166;r1163=r1165;r1164=r1166}r1167=r1163+(r1151<<2)|0;HEAP32[r1167>>2]=r1141;r1168=r1163+(r1164<<2)|0;HEAP32[r1168>>2]=0;r1071=r1110;r1072=r1111;r1073=r1112}}}while(0);r1169=r298+1|0;r1170=r1169>>>0<4;if(r1170){r294=r355;r295=r354;r296=r353;r297=r352;r298=r1169;r299=r351;r300=r356;r301=r357}else{r335=r355;r336=r354;r337=r353;r338=r351;r339=r357;r12=395;break}}L464:do{if(r12==134){r1171=HEAP32[r6>>2];r1172=r1171|4;HEAP32[r6>>2]=r1172;r1173=0;r1174=r295;r1175=r294}else if(r12==235){r1176=HEAP32[r6>>2];r1177=r1176|4;HEAP32[r6>>2]=r1177;r1173=0;r1174=r295;r1175=r294}else if(r12==292){r1178=HEAP32[r6>>2];r1179=r1178|4;HEAP32[r6>>2]=r1179;r1173=0;r1174=r295;r1175=r294}else if(r12==324){r1180=___cxa_allocate_exception(4);r1181=r1180;HEAP32[r1181>>2]=53824;___cxa_throw(r1180,62184,110)}else if(r12==336){r1182=___cxa_allocate_exception(4);r1183=r1182;HEAP32[r1183>>2]=53824;___cxa_throw(r1182,62184,110)}else if(r12==359){r1184=HEAP32[r6>>2];r1185=r1184|4;HEAP32[r6>>2]=r1185;r1173=0;r1174=r642;r1175=r643}else if(r12==382){r1186=HEAP32[r6>>2];r1187=r1186|4;HEAP32[r6>>2]=r1187;r1173=0;r1174=r642;r1175=r643}else if(r12==393){r1188=HEAP32[r6>>2];r1189=r1188|4;HEAP32[r6>>2]=r1189;r1173=0;r1174=r642;r1175=r643}else if(r12==395){r1190=(r338|0)==0;L472:do{if(!r1190){r1191=r338;r1192=r338+4|0;r1193=r338+8|0;r1194=1;r1195=r339;L474:while(1){r1196=HEAP8[r1191];r1197=r1196&1;r1198=r1197<<24>>24==0;if(r1198){r1199=r1196&255;r1200=r1199>>>1;r1201=r1200}else{r1202=HEAP32[r1192>>2];r1201=r1202}r1203=r1194>>>0<r1201>>>0;if(!r1203){break L472}r1204=HEAP32[r278>>2];r1205=(r1204|0)==0;do{if(r1205){r1206=1}else{r1207=r1204+12|0;r1208=HEAP32[r1207>>2];r1209=r1204+16|0;r1210=HEAP32[r1209>>2];r1211=(r1208|0)==(r1210|0);if(r1211){r1212=r1204;r1213=HEAP32[r1212>>2];r1214=r1213+36|0;r1215=HEAP32[r1214>>2];r1216=FUNCTION_TABLE[r1215](r1204);r1217=r1216}else{r1218=HEAP32[r1208>>2];r1217=r1218}r1219=(r1217|0)==-1;if(r1219){HEAP32[r278>>2]=0;r1206=1;break}else{r1220=HEAP32[r278>>2];r1221=(r1220|0)==0;r1206=r1221;break}}}while(0);r1222=(r1195|0)==0;do{if(r1222){r12=413}else{r1223=r1195+12|0;r1224=HEAP32[r1223>>2];r1225=r1195+16|0;r1226=HEAP32[r1225>>2];r1227=(r1224|0)==(r1226|0);if(r1227){r1228=r1195;r1229=HEAP32[r1228>>2];r1230=r1229+36|0;r1231=HEAP32[r1230>>2];r1232=FUNCTION_TABLE[r1231](r1195);r1233=r1232}else{r1234=HEAP32[r1224>>2];r1233=r1234}r1235=(r1233|0)==-1;if(r1235){r12=413;break}if(r1206){r1236=r1195}else{break L474}}}while(0);if(r12==413){r12=0;if(r1206){break}else{r1236=0}}r1237=HEAP32[r278>>2];r1238=r1237+12|0;r1239=HEAP32[r1238>>2];r1240=r1237+16|0;r1241=HEAP32[r1240>>2];r1242=(r1239|0)==(r1241|0);if(r1242){r1243=r1237;r1244=HEAP32[r1243>>2];r1245=r1244+36|0;r1246=HEAP32[r1245>>2];r1247=FUNCTION_TABLE[r1246](r1237);r1248=r1247}else{r1249=HEAP32[r1239>>2];r1248=r1249}r1250=HEAP8[r1191];r1251=r1250&1;r1252=r1251<<24>>24==0;if(r1252){r1253=r1192}else{r1254=HEAP32[r1193>>2];r1253=r1254}r1255=r1253+(r1194<<2)|0;r1256=HEAP32[r1255>>2];r1257=(r1248|0)==(r1256|0);if(!r1257){break}r1258=r1194+1|0;r1259=HEAP32[r278>>2];r1260=r1259+12|0;r1261=HEAP32[r1260>>2];r1262=r1259+16|0;r1263=HEAP32[r1262>>2];r1264=(r1261|0)==(r1263|0);if(r1264){r1265=r1259;r1266=HEAP32[r1265>>2];r1267=r1266+40|0;r1268=HEAP32[r1267>>2];r1269=FUNCTION_TABLE[r1268](r1259);r1194=r1258;r1195=r1236;continue}else{r1270=r1261+4|0;HEAP32[r1260>>2]=r1270;r1194=r1258;r1195=r1236;continue}}r1271=HEAP32[r6>>2];r1272=r1271|4;HEAP32[r6>>2]=r1272;r1173=0;r1174=r336;r1175=r335;break L464}}while(0);r1273=(r336|0)==(r337|0);if(r1273){r1173=1;r1174=r337;r1175=r335;break}HEAP32[r34>>2]=0;__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(r29,r336,r337,r34);r1274=HEAP32[r34>>2];r1275=(r1274|0)==0;if(r1275){r1173=1;r1174=r336;r1175=r335;break}r1276=HEAP32[r6>>2];r1277=r1276|4;HEAP32[r6>>2]=r1277;r1173=0;r1174=r336;r1175=r335}}while(0);r1278=HEAP8[r43];r1279=r1278&1;r1280=r1279<<24>>24==0;do{if(!r1280){r1281=HEAP32[r290>>2];r1282=(r1281|0)==0;if(r1282){break}r1283=r1281;_free(r1283)}}while(0);r1284=HEAP8[r42];r1285=r1284&1;r1286=r1285<<24>>24==0;do{if(!r1286){r1287=HEAP32[r282>>2];r1288=(r1287|0)==0;if(r1288){break}r1289=r1287;_free(r1289)}}while(0);r1290=HEAP8[r41];r1291=r1290&1;r1292=r1291<<24>>24==0;do{if(!r1292){r1293=HEAP32[r284>>2];r1294=(r1293|0)==0;if(r1294){break}r1295=r1293;_free(r1295)}}while(0);r1296=HEAP8[r40];r1297=r1296&1;r1298=r1297<<24>>24==0;do{if(!r1298){r1299=HEAP32[r288>>2];r1300=(r1299|0)==0;if(r1300){break}r1301=r1299;_free(r1301)}}while(0);r1302=HEAP8[r39];r1303=r1302&1;r1304=r1303<<24>>24==0;do{if(!r1304){r1305=r29+8|0;r1306=HEAP32[r1305>>2];r1307=(r1306|0)==0;if(r1307){break}_free(r1306)}}while(0);r1308=(r1174|0)==0;if(r1308){r1309=400;r1310=0;STACKTOP=r13;return r1173}r1311=r1174;FUNCTION_TABLE[r1175](r1311);r1309=400;r1310=0;STACKTOP=r13;return r1173}function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48;r2=0;r9=STACKTOP;STACKTOP=STACKTOP+440|0;r10=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r10>>2];r10=r4;r4=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r4>>2]=HEAP32[r10>>2];r10=r9;r11=r9+16;r12=r9+416;r13=r9+424;r14=r9+432;r15=r12|0;HEAP32[r15>>2]=r11;r16=r12+4|0;HEAP32[r16>>2]=706;r17=r11+400|0;r11=HEAP32[r6+28>>2];r18=r11;r19=r11+4|0;tempValue=HEAP32[r19>>2],HEAP32[r19>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r10>>2]=71448;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r10)}r10=HEAP32[71452>>2]-1|0;r19=HEAP32[r11+8>>2];do{if(HEAP32[r11+12>>2]-r19>>2>>>0>r10>>>0){r20=HEAP32[r19+(r10<<2)>>2];if((r20|0)==0){break}r21=r20;HEAP8[r14]=0;r22=r4|0;r23=HEAP32[r22>>2];do{if(__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(r3,r23,r5,r18,HEAP32[r6+4>>2],r7,r14,r21,r12,r13,r17)){r24=r8;if((HEAP8[r24]&1)==0){HEAP32[r8+4>>2]=0;HEAP8[r24]=0}else{HEAP32[HEAP32[r8+8>>2]>>2]=0;HEAP32[r8+4>>2]=0}r25=r20;if((HEAP8[r14]|0)!=0){r26=FUNCTION_TABLE[HEAP32[HEAP32[r25>>2]+44>>2]](r21,45);r27=HEAP8[r24];r28=(r27&1)!=0;if(r28){r29=HEAP32[r8+4>>2];r30=(HEAP32[r8>>2]&-2)-1|0}else{r29=(r27&255)>>>1;r30=1}if((r29|0)==(r30|0)){__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(r8,r30,1,r30,r30,0,0);if((HEAP8[r24]&1)==0){r2=21}else{r2=22}}else{if(r28){r2=22}else{r2=21}}if(r2==21){HEAP8[r24]=(r29<<1)+2;r31=r8+4|0;r32=r29+1|0}else if(r2==22){r28=HEAP32[r8+8>>2];r27=r29+1|0;HEAP32[r8+4>>2]=r27;r31=r28;r32=r27}HEAP32[r31+(r29<<2)>>2]=r26;HEAP32[r31+(r32<<2)>>2]=0}r26=FUNCTION_TABLE[HEAP32[HEAP32[r25>>2]+44>>2]](r21,48);r25=HEAP32[r15>>2];r27=HEAP32[r13>>2];r28=r27-4|0;L31:do{if(r25>>>0<r28>>>0){r33=r25;while(1){r34=r33+4|0;if((HEAP32[r33>>2]|0)!=(r26|0)){r35=r33;break L31}if(r34>>>0<r28>>>0){r33=r34}else{r35=r34;break}}}else{r35=r25}}while(0);r25=r35;r26=HEAP8[r24];if((r26&1)==0){r36=1;r37=r26;r38=(r26&255)>>>1}else{r26=HEAP32[r8>>2];r36=(r26&-2)-1|0;r37=r26&255;r38=HEAP32[r8+4>>2]}r26=r27-r25>>2;if((r26|0)==0){break}if((r36-r38|0)>>>0<r26>>>0){__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(r8,r36,r38+r26-r36|0,r38,r38,0,0);r39=HEAP8[r24]}else{r39=r37}if((r39&1)==0){r40=r8+4|0}else{r40=HEAP32[r8+8>>2]}r33=r40+(r38<<2)|0;if((r35|0)==(r27|0)){r41=r33}else{r34=r38+((r28+ -r25|0)>>>2)+1|0;r25=r35;r42=r33;while(1){HEAP32[r42>>2]=HEAP32[r25>>2];r33=r25+4|0;if((r33|0)==(r27|0)){break}r25=r33;r42=r42+4|0}r41=r40+(r34<<2)|0}HEAP32[r41>>2]=0;r42=r38+r26|0;if((HEAP8[r24]&1)==0){HEAP8[r24]=r42<<1;break}else{HEAP32[r8+4>>2]=r42;break}}}while(0);r21=r3|0;r20=HEAP32[r21>>2];do{if((r20|0)==0){r43=1;r44=0}else{r42=HEAP32[r20+12>>2];if((r42|0)==(HEAP32[r20+16>>2]|0)){r45=FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+36>>2]](r20)}else{r45=HEAP32[r42>>2]}if((r45|0)!=-1){r43=0;r44=r20;break}HEAP32[r21>>2]=0;r43=1;r44=0}}while(0);do{if((r23|0)==0){r2=58}else{r21=HEAP32[r23+12>>2];if((r21|0)==(HEAP32[r23+16>>2]|0)){r46=FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+36>>2]](r23)}else{r46=HEAP32[r21>>2]}if((r46|0)==-1){HEAP32[r22>>2]=0;r2=58;break}else{if(r43){break}else{r2=60;break}}}}while(0);if(r2==58){if(r43){r2=60}}if(r2==60){HEAP32[r7>>2]=HEAP32[r7>>2]|2}HEAP32[r1>>2]=r44;r22=r11+4|0;if(((tempValue=HEAP32[r22>>2],HEAP32[r22>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+8>>2]](r11)}r22=HEAP32[r15>>2];HEAP32[r15>>2]=0;if((r22|0)==0){r47=400;r48=0;STACKTOP=r9;return}FUNCTION_TABLE[HEAP32[r16>>2]](r22);r47=400;r48=0;STACKTOP=r9;return}}while(0);r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53856;___cxa_throw(r9,62200,872)}function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=r1+4|0;r5=(HEAP32[r4>>2]|0)!=706;r6=r1|0;r1=HEAP32[r6>>2];r7=r1;r8=HEAP32[r3>>2]-r7|0;r9=r8>>>0<2147483647?r8<<1:-1;r8=HEAP32[r2>>2]-r7>>2;if(r5){r10=r1}else{r10=0}r1=_realloc(r10,r9);r10=r1;if((r1|0)==0){r1=___cxa_allocate_exception(4);HEAP32[r1>>2]=53824;___cxa_throw(r1,62184,110)}do{if(r5){HEAP32[r6>>2]=r10;r11=r10}else{r1=HEAP32[r6>>2];HEAP32[r6>>2]=r10;if((r1|0)==0){r11=r10;break}FUNCTION_TABLE[HEAP32[r4>>2]](r1);r11=HEAP32[r6>>2]}}while(0);HEAP32[r4>>2]=356;HEAP32[r2>>2]=r11+(r8<<2);HEAP32[r3>>2]=HEAP32[r6>>2]+(r9>>>2<<2);return}function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev(r1){return}function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+240|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+120;r11=r8+232;r12=r11;r13=STACKTOP;STACKTOP=STACKTOP+1|0;STACKTOP=STACKTOP+7&-8;r14=STACKTOP;STACKTOP=STACKTOP+1|0;STACKTOP=STACKTOP+7&-8;r15=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r16=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r17=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r18=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r19=STACKTOP;STACKTOP=STACKTOP+100|0;STACKTOP=STACKTOP+7&-8;r20=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r21=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r22=r8+16|0;HEAP32[r10>>2]=r22;r23=r8+128|0;r24=_snprintf(r22,100,41688,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r2>>3]=r7,r2));STACKTOP=r2;do{if(r24>>>0>99){do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r22=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r22}}while(0);r22=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r10,HEAP32[69912>>2],41688,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r2>>3]=r7,r2));STACKTOP=r2;r25=HEAP32[r10>>2];if((r25|0)==0){r26=___cxa_allocate_exception(4);HEAP32[r26>>2]=53824;___cxa_throw(r26,62184,110)}r26=_malloc(r22);if((r26|0)!=0){r27=r26;r28=r22;r29=r26;r30=r25;break}r25=___cxa_allocate_exception(4);HEAP32[r25>>2]=53824;___cxa_throw(r25,62184,110)}else{r27=r23;r28=r24;r29=0;r30=0}}while(0);r24=HEAP32[r5+28>>2];r23=r24;r2=r24+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r9>>2]=71456;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r9)}r9=HEAP32[71460>>2]-1|0;r2=HEAP32[r24+8>>2];do{if(HEAP32[r24+12>>2]-r2>>2>>>0>r9>>>0){r7=HEAP32[r2+(r9<<2)>>2];if((r7|0)==0){break}r25=r7;r26=HEAP32[r10>>2];FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+32>>2]](r25,r26,r26+r28|0,r27);if((r28|0)==0){r31=0}else{r31=(HEAP8[HEAP32[r10>>2]]|0)==45}HEAP32[r11>>2]=0;r26=r15;HEAP32[r26>>2]=0;HEAP32[r26+4>>2]=0;HEAP32[r26+8>>2]=0;r7=r16;HEAP32[r7>>2]=0;HEAP32[r7+4>>2]=0;HEAP32[r7+8>>2]=0;r22=r17;HEAP32[r22>>2]=0;HEAP32[r22+4>>2]=0;HEAP32[r22+8>>2]=0;__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(r4,r31,r23,r12,r13,r14,r15,r16,r17,r18);r32=r19|0;r33=HEAP32[r18>>2];if((r28|0)>(r33|0)){r34=HEAP8[r22];if((r34&1)==0){r35=(r34&255)>>>1}else{r35=HEAP32[r17+4>>2]}r34=HEAP8[r7];if((r34&1)==0){r36=(r34&255)>>>1}else{r36=HEAP32[r16+4>>2]}r37=r35+(r28-r33<<1|1)+r36|0}else{r34=HEAP8[r22];if((r34&1)==0){r38=(r34&255)>>>1}else{r38=HEAP32[r17+4>>2]}r34=HEAP8[r7];if((r34&1)==0){r39=(r34&255)>>>1}else{r39=HEAP32[r16+4>>2]}r37=r38+2+r39|0}r34=r37+r33|0;do{if(r34>>>0>100){r40=_malloc(r34);if((r40|0)!=0){r41=r40;r42=r40;break}r40=___cxa_allocate_exception(4);HEAP32[r40>>2]=53824;___cxa_throw(r40,62184,110)}else{r41=r32;r42=0}}while(0);__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(r41,r20,r21,HEAP32[r5+4>>2],r27,r27+r28|0,r25,r31,r12,HEAP8[r13],HEAP8[r14],r15,r16,r17,r33);__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,HEAP32[r3>>2],r41,HEAP32[r20>>2],HEAP32[r21>>2],r5,r6);if((r42|0)!=0){_free(r42)}do{if((HEAP8[r22]&1)!=0){r32=HEAP32[r17+8>>2];if((r32|0)==0){break}_free(r32)}}while(0);do{if((HEAP8[r7]&1)!=0){r22=HEAP32[r16+8>>2];if((r22|0)==0){break}_free(r22)}}while(0);do{if((HEAP8[r26]&1)!=0){r7=HEAP32[r15+8>>2];if((r7|0)==0){break}_free(r7)}}while(0);r26=r24+4|0;if(((tempValue=HEAP32[r26>>2],HEAP32[r26>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+8>>2]](r24)}if((r29|0)!=0){_free(r29)}if((r30|0)==0){r43=100;r44=0;r45=100;r46=0;STACKTOP=r8;return}_free(r30);r43=100;r44=0;r45=100;r46=0;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10){var r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35;r11=STACKTOP;STACKTOP=STACKTOP+40|0;r12=r11;r13=r11+16;r14=r11+32;r15=r14;r16=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r17=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r18=r17;r19=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r20=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r21=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r22=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r23=r22;r24=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r25=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r26=r25;r27=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r28=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r29=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;if(r1){if((HEAP32[71928>>2]|0)!=-1){HEAP32[r13>>2]=71928;HEAP32[r13+4>>2]=46;HEAP32[r13+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71928,r13)}r13=HEAP32[71932>>2]-1|0;r1=HEAP32[r3+8>>2];if(HEAP32[r3+12>>2]-r1>>2>>>0<=r13>>>0){r30=___cxa_allocate_exception(4);r31=r30;HEAP32[r31>>2]=53856;___cxa_throw(r30,62200,872)}r32=HEAP32[r1+(r13<<2)>>2];if((r32|0)==0){r30=___cxa_allocate_exception(4);r31=r30;HEAP32[r31>>2]=53856;___cxa_throw(r30,62200,872)}r30=r32;r31=HEAP32[r32>>2];if(r2){FUNCTION_TABLE[HEAP32[r31+44>>2]](r15,r30);r15=r4;tempBigInt=HEAP32[r14>>2];HEAP8[r15]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r15+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r15+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r15+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+32>>2]](r16,r30);r15=r9;if((HEAP8[r15]&1)==0){HEAP8[r9+1|0]=0;HEAP8[r15]=0}else{HEAP8[HEAP32[r9+8>>2]]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r9);r14=r16;HEAP32[r15>>2]=HEAP32[r14>>2];HEAP32[r15+4>>2]=HEAP32[r14+4>>2];HEAP32[r15+8>>2]=HEAP32[r14+8>>2];HEAP32[r14>>2]=0;HEAP32[r14+4>>2]=0;HEAP32[r14+8>>2]=0}else{FUNCTION_TABLE[HEAP32[r31+40>>2]](r18,r30);r18=r4;tempBigInt=HEAP32[r17>>2];HEAP8[r18]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r18+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r18+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r18+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+28>>2]](r19,r30);r18=r9;if((HEAP8[r18]&1)==0){HEAP8[r9+1|0]=0;HEAP8[r18]=0}else{HEAP8[HEAP32[r9+8>>2]]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r9);r17=r19;HEAP32[r18>>2]=HEAP32[r17>>2];HEAP32[r18+4>>2]=HEAP32[r17+4>>2];HEAP32[r18+8>>2]=HEAP32[r17+8>>2];HEAP32[r17>>2]=0;HEAP32[r17+4>>2]=0;HEAP32[r17+8>>2]=0}r17=r32;r18=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+12>>2]](r30);HEAP8[r5]=r18;r18=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+16>>2]](r30);HEAP8[r6]=r18;r18=r32;FUNCTION_TABLE[HEAP32[HEAP32[r18>>2]+20>>2]](r20,r30);r17=r7;if((HEAP8[r17]&1)==0){HEAP8[r7+1|0]=0;HEAP8[r17]=0}else{HEAP8[HEAP32[r7+8>>2]]=0;HEAP32[r7+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r7);r19=r20;HEAP32[r17>>2]=HEAP32[r19>>2];HEAP32[r17+4>>2]=HEAP32[r19+4>>2];HEAP32[r17+8>>2]=HEAP32[r19+8>>2];HEAP32[r19>>2]=0;HEAP32[r19+4>>2]=0;HEAP32[r19+8>>2]=0;FUNCTION_TABLE[HEAP32[HEAP32[r18>>2]+24>>2]](r21,r30);r18=r8;if((HEAP8[r18]&1)==0){HEAP8[r8+1|0]=0;HEAP8[r18]=0}else{HEAP8[HEAP32[r8+8>>2]]=0;HEAP32[r8+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r8);r19=r21;HEAP32[r18>>2]=HEAP32[r19>>2];HEAP32[r18+4>>2]=HEAP32[r19+4>>2];HEAP32[r18+8>>2]=HEAP32[r19+8>>2];HEAP32[r19>>2]=0;HEAP32[r19+4>>2]=0;HEAP32[r19+8>>2]=0;r33=FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+36>>2]](r30);HEAP32[r10>>2]=r33;STACKTOP=r11;return}else{if((HEAP32[71936>>2]|0)!=-1){HEAP32[r12>>2]=71936;HEAP32[r12+4>>2]=46;HEAP32[r12+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71936,r12)}r12=HEAP32[71940>>2]-1|0;r30=HEAP32[r3+8>>2];if(HEAP32[r3+12>>2]-r30>>2>>>0<=r12>>>0){r34=___cxa_allocate_exception(4);r35=r34;HEAP32[r35>>2]=53856;___cxa_throw(r34,62200,872)}r3=HEAP32[r30+(r12<<2)>>2];if((r3|0)==0){r34=___cxa_allocate_exception(4);r35=r34;HEAP32[r35>>2]=53856;___cxa_throw(r34,62200,872)}r34=r3;r35=HEAP32[r3>>2];if(r2){FUNCTION_TABLE[HEAP32[r35+44>>2]](r23,r34);r23=r4;tempBigInt=HEAP32[r22>>2];HEAP8[r23]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r23+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r23+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r23+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+32>>2]](r24,r34);r23=r9;if((HEAP8[r23]&1)==0){HEAP8[r9+1|0]=0;HEAP8[r23]=0}else{HEAP8[HEAP32[r9+8>>2]]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r9);r22=r24;HEAP32[r23>>2]=HEAP32[r22>>2];HEAP32[r23+4>>2]=HEAP32[r22+4>>2];HEAP32[r23+8>>2]=HEAP32[r22+8>>2];HEAP32[r22>>2]=0;HEAP32[r22+4>>2]=0;HEAP32[r22+8>>2]=0}else{FUNCTION_TABLE[HEAP32[r35+40>>2]](r26,r34);r26=r4;tempBigInt=HEAP32[r25>>2];HEAP8[r26]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r26+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r26+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r26+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+28>>2]](r27,r34);r26=r9;if((HEAP8[r26]&1)==0){HEAP8[r9+1|0]=0;HEAP8[r26]=0}else{HEAP8[HEAP32[r9+8>>2]]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r9);r9=r27;HEAP32[r26>>2]=HEAP32[r9>>2];HEAP32[r26+4>>2]=HEAP32[r9+4>>2];HEAP32[r26+8>>2]=HEAP32[r9+8>>2];HEAP32[r9>>2]=0;HEAP32[r9+4>>2]=0;HEAP32[r9+8>>2]=0}r9=r3;r26=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+12>>2]](r34);HEAP8[r5]=r26;r26=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+16>>2]](r34);HEAP8[r6]=r26;r26=r3;FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+20>>2]](r28,r34);r6=r7;if((HEAP8[r6]&1)==0){HEAP8[r7+1|0]=0;HEAP8[r6]=0}else{HEAP8[HEAP32[r7+8>>2]]=0;HEAP32[r7+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r7);r7=r28;HEAP32[r6>>2]=HEAP32[r7>>2];HEAP32[r6+4>>2]=HEAP32[r7+4>>2];HEAP32[r6+8>>2]=HEAP32[r7+8>>2];HEAP32[r7>>2]=0;HEAP32[r7+4>>2]=0;HEAP32[r7+8>>2]=0;FUNCTION_TABLE[HEAP32[HEAP32[r26>>2]+24>>2]](r29,r34);r26=r8;if((HEAP8[r26]&1)==0){HEAP8[r8+1|0]=0;HEAP8[r26]=0}else{HEAP8[HEAP32[r8+8>>2]]=0;HEAP32[r8+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r8);r8=r29;HEAP32[r26>>2]=HEAP32[r8>>2];HEAP32[r26+4>>2]=HEAP32[r8+4>>2];HEAP32[r26+8>>2]=HEAP32[r8+8>>2];HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;HEAP32[r8+8>>2]=0;r33=FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+36>>2]](r34);HEAP32[r10>>2]=r33;STACKTOP=r11;return}}function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15){var r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241;r16=0;HEAP32[r3>>2]=r1;r17=r7;r18=r14;r19=r14;r20=r19+1|0;r21=r14+8|0;r22=r14+4|0;r23=r13;r24=r4&512;r25=(r24|0)==0;r26=r13;r27=r26+1|0;r28=r13+8|0;r29=r13+4|0;r30=(r15|0)>0;r31=r12;r32=r12;r33=r32+1|0;r34=r12+8|0;r35=r12+4|0;r36=r7+8|0;r37=-r15|0;r38=0;r39=r5;while(1){r40=r9+r38|0;r41=HEAP8[r40];r42=r41<<24>>24;L3:do{switch(r42|0){case 0:{r43=HEAP32[r3>>2];HEAP32[r2>>2]=r43;r44=r39;break};case 4:{r45=HEAP32[r3>>2];r46=r39+1|0;r47=r8?r46:r39;r48=r47>>>0<r6>>>0;L6:do{if(r48){r49=r47;while(1){r50=HEAP8[r49];r51=r50<<24>>24>-1;if(!r51){r52=r49;break L6}r53=r50<<24>>24;r54=HEAP32[r36>>2];r55=r54+(r53<<1)|0;r56=HEAP16[r55>>1];r57=r56&2048;r58=r57<<16>>16==0;r59=r49+1|0;if(r58){r52=r49;break L6}r60=r59>>>0<r6>>>0;if(r60){r49=r59}else{r52=r59;break}}}else{r52=r47}}while(0);r61=r52;if(r30){r62=r52>>>0>r47>>>0;if(r62){r63=-r61|0;r64=r47+r63|0;r65=r64;r66=r65>>>0<r37>>>0;r67=r66?r37:r65;r68=r67;r69=r68+r15|0;r70=r69;r71=r52;r72=r15;r73=r45;while(1){r74=r71-1|0;r75=HEAP8[r74];r76=r73+1|0;HEAP32[r3>>2]=r76;HEAP8[r73]=r75;r77=r72-1|0;r78=r74>>>0>r47>>>0;r79=(r77|0)>0;r80=r78&r79;if(!r80){break}r81=HEAP32[r3>>2];r71=r74;r72=r77;r73=r81}r82=r52+r67|0;if(r79){r83=r70;r84=r82;r16=32}else{r85=0;r86=r70;r87=r82}}else{r83=r15;r84=r52;r16=32}if(r16==32){r16=0;r88=HEAP32[r17>>2];r89=r88+28|0;r90=HEAP32[r89>>2];r91=FUNCTION_TABLE[r90](r7,48);r85=r91;r86=r83;r87=r84}r92=(r86|0)>0;r93=HEAP32[r3>>2];r94=r93+1|0;HEAP32[r3>>2]=r94;if(r92){r95=r86;r96=r93;while(1){HEAP8[r96]=r85;r97=r95-1|0;r98=(r97|0)>0;r99=HEAP32[r3>>2];r100=r99+1|0;HEAP32[r3>>2]=r100;if(r98){r95=r97;r96=r99}else{r101=r99;break}}}else{r101=r93}HEAP8[r101]=r10;r102=r87}else{r102=r52}r103=(r102|0)==(r47|0);if(r103){r104=HEAP32[r17>>2];r105=r104+28|0;r106=HEAP32[r105>>2];r107=FUNCTION_TABLE[r106](r7,48);r108=HEAP32[r3>>2];r109=r108+1|0;HEAP32[r3>>2]=r109;HEAP8[r108]=r107}else{r110=HEAP8[r31];r111=r110&1;r112=r111<<24>>24==0;if(r112){r113=r110&255;r114=r113>>>1;r115=r114}else{r116=HEAP32[r35>>2];r115=r116}r117=(r115|0)==0;if(r117){r118=r102;r119=0;r120=0;r121=-1}else{if(r112){r122=r33}else{r123=HEAP32[r34>>2];r122=r123}r124=HEAP8[r122];r125=r124<<24>>24;r118=r102;r119=0;r120=0;r121=r125}while(1){r126=(r119|0)==(r121|0);do{if(r126){r127=HEAP32[r3>>2];r128=r127+1|0;HEAP32[r3>>2]=r128;HEAP8[r127]=r11;r129=r120+1|0;r130=HEAP8[r31];r131=r130&1;r132=r131<<24>>24==0;if(r132){r133=r130&255;r134=r133>>>1;r135=r134}else{r136=HEAP32[r35>>2];r135=r136}r137=r129>>>0<r135>>>0;if(!r137){r138=r121;r139=r129;r140=0;break}if(r132){r141=r33}else{r142=HEAP32[r34>>2];r141=r142}r143=r141+r129|0;r144=HEAP8[r143];r145=r144<<24>>24==127;if(r145){r138=-1;r139=r129;r140=0;break}if(r132){r146=r33}else{r147=HEAP32[r34>>2];r146=r147}r148=r146+r129|0;r149=HEAP8[r148];r150=r149<<24>>24;r138=r150;r139=r129;r140=0}else{r138=r121;r139=r120;r140=r119}}while(0);r151=r118-1|0;r152=HEAP8[r151];r153=HEAP32[r3>>2];r154=r153+1|0;HEAP32[r3>>2]=r154;HEAP8[r153]=r152;r155=r140+1|0;r156=(r151|0)==(r47|0);if(r156){break}else{r118=r151;r119=r155;r120=r139;r121=r138}}}r157=HEAP32[r3>>2];r158=(r45|0)==(r157|0);if(r158){r44=r47;break L3}r159=r157-1|0;r160=r159>>>0>r45>>>0;if(r160){r161=r45;r162=r159}else{r44=r47;break L3}while(1){r163=HEAP8[r161];r164=HEAP8[r162];HEAP8[r161]=r164;HEAP8[r162]=r163;r165=r161+1|0;r166=r162-1|0;r167=r165>>>0<r166>>>0;if(r167){r161=r165;r162=r166}else{r44=r47;break}}break};case 1:{r168=HEAP32[r3>>2];HEAP32[r2>>2]=r168;r169=HEAP32[r17>>2];r170=r169+28|0;r171=HEAP32[r170>>2];r172=FUNCTION_TABLE[r171](r7,32);r173=HEAP32[r3>>2];r174=r173+1|0;HEAP32[r3>>2]=r174;HEAP8[r173]=r172;r44=r39;break};case 3:{r175=HEAP8[r18];r176=r175&1;r177=r176<<24>>24==0;if(r177){r178=r175&255;r179=r178>>>1;r180=r179}else{r181=HEAP32[r22>>2];r180=r181}r182=(r180|0)==0;if(r182){r44=r39;break L3}if(r177){r183=r20}else{r184=HEAP32[r21>>2];r183=r184}r185=HEAP8[r183];r186=HEAP32[r3>>2];r187=r186+1|0;HEAP32[r3>>2]=r187;HEAP8[r186]=r185;r44=r39;break};case 2:{r188=HEAP8[r23];r189=r188&1;r190=r189<<24>>24==0;if(r190){r191=r188&255;r192=r191>>>1;r193=r192}else{r194=HEAP32[r29>>2];r193=r194}r195=(r193|0)==0;r196=r195|r25;if(r196){r44=r39;break L3}if(r190){r197=r188&255;r198=r197>>>1;r199=r198;r200=r27}else{r201=HEAP32[r28>>2];r202=HEAP32[r29>>2];r199=r202;r200=r201}r203=r200+r199|0;r204=HEAP32[r3>>2];r205=(r200|0)==(r203|0);if(r205){r206=r204}else{r207=r204;r208=r200;while(1){r209=HEAP8[r208];HEAP8[r207]=r209;r210=r208+1|0;r211=r207+1|0;r212=(r210|0)==(r203|0);if(r212){r206=r211;break}else{r207=r211;r208=r210}}}HEAP32[r3>>2]=r206;r44=r39;break};default:{r44=r39}}}while(0);r213=r38+1|0;r214=r213>>>0<4;if(r214){r38=r213;r39=r44}else{break}}r215=HEAP8[r18];r216=r215&1;r217=r216<<24>>24==0;if(r217){r218=r215&255;r219=r218>>>1;r220=r219}else{r221=HEAP32[r22>>2];r220=r221}r222=r220>>>0>1;if(r222){if(r217){r223=r215&255;r224=r223>>>1;r225=r224;r226=r20}else{r227=HEAP32[r21>>2];r228=HEAP32[r22>>2];r225=r228;r226=r227}r229=r226+1|0;r230=r226+r225|0;r231=HEAP32[r3>>2];r232=(r229|0)==(r230|0);if(r232){r233=r231}else{r234=r231;r235=r229;while(1){r236=HEAP8[r235];HEAP8[r234]=r236;r237=r235+1|0;r238=r234+1|0;r239=(r237|0)==(r230|0);if(r239){r233=r238;break}else{r234=r238;r235=r237}}}HEAP32[r3>>2]=r233}r240=r4&176;if((r240|0)==32){r241=HEAP32[r3>>2];HEAP32[r2>>2]=r241;return}else if((r240|0)==16){return}else{HEAP32[r2>>2]=r1;return}}function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46;r2=STACKTOP;STACKTOP=STACKTOP+24|0;r8=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r8>>2];r8=r2;r9=r2+16;r10=r9;r11=STACKTOP;STACKTOP=STACKTOP+1|0;STACKTOP=STACKTOP+7&-8;r12=STACKTOP;STACKTOP=STACKTOP+1|0;STACKTOP=STACKTOP+7&-8;r13=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r14=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r15=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r16=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r17=STACKTOP;STACKTOP=STACKTOP+100|0;STACKTOP=STACKTOP+7&-8;r18=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r19=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r20=HEAP32[r5+28>>2];r21=r20;r22=r20+4|0;tempValue=HEAP32[r22>>2],HEAP32[r22>>2]=tempValue+1,tempValue;if((HEAP32[71456>>2]|0)!=-1){HEAP32[r8>>2]=71456;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r8)}r8=HEAP32[71460>>2]-1|0;r22=HEAP32[r20+8>>2];do{if(HEAP32[r20+12>>2]-r22>>2>>>0>r8>>>0){r23=HEAP32[r22+(r8<<2)>>2];if((r23|0)==0){break}r24=r23;r25=r7;r26=HEAP8[r25];r27=(r26&1)==0;if(r27){r28=(r26&255)>>>1}else{r28=HEAP32[r7+4>>2]}if((r28|0)==0){r29=0}else{if(r27){r30=r7+1|0}else{r30=HEAP32[r7+8>>2]}r27=HEAP8[r30];r29=r27<<24>>24==FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+28>>2]](r24,45)<<24>>24}HEAP32[r9>>2]=0;r23=r13;HEAP32[r23>>2]=0;HEAP32[r23+4>>2]=0;HEAP32[r23+8>>2]=0;r27=r14;HEAP32[r27>>2]=0;HEAP32[r27+4>>2]=0;HEAP32[r27+8>>2]=0;r26=r15;HEAP32[r26>>2]=0;HEAP32[r26+4>>2]=0;HEAP32[r26+8>>2]=0;__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(r4,r29,r21,r10,r11,r12,r13,r14,r15,r16);r31=r17|0;r32=HEAP8[r25];r25=(r32&1)==0;if(r25){r33=(r32&255)>>>1}else{r33=HEAP32[r7+4>>2]}r34=HEAP32[r16>>2];if((r33|0)>(r34|0)){if(r25){r35=(r32&255)>>>1}else{r35=HEAP32[r7+4>>2]}r36=HEAP8[r26];if((r36&1)==0){r37=(r36&255)>>>1}else{r37=HEAP32[r15+4>>2]}r36=HEAP8[r27];if((r36&1)==0){r38=(r36&255)>>>1}else{r38=HEAP32[r14+4>>2]}r39=r37+(r35-r34<<1|1)+r38|0}else{r36=HEAP8[r26];if((r36&1)==0){r40=(r36&255)>>>1}else{r40=HEAP32[r15+4>>2]}r36=HEAP8[r27];if((r36&1)==0){r41=(r36&255)>>>1}else{r41=HEAP32[r14+4>>2]}r39=r40+2+r41|0}r36=r39+r34|0;do{if(r36>>>0>100){r42=_malloc(r36);if((r42|0)!=0){r43=r42;r44=r42;break}r42=___cxa_allocate_exception(4);HEAP32[r42>>2]=53824;___cxa_throw(r42,62184,110)}else{r43=r31;r44=0}}while(0);if(r25){r45=(r32&255)>>>1;r46=r7+1|0}else{r45=HEAP32[r7+4>>2];r46=HEAP32[r7+8>>2]}__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(r43,r18,r19,HEAP32[r5+4>>2],r46,r46+r45|0,r24,r29,r10,HEAP8[r11],HEAP8[r12],r13,r14,r15,r34);__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,HEAP32[r3>>2],r43,HEAP32[r18>>2],HEAP32[r19>>2],r5,r6);if((r44|0)!=0){_free(r44)}do{if((HEAP8[r26]&1)!=0){r31=HEAP32[r15+8>>2];if((r31|0)==0){break}_free(r31)}}while(0);do{if((HEAP8[r27]&1)!=0){r26=HEAP32[r14+8>>2];if((r26|0)==0){break}_free(r26)}}while(0);do{if((HEAP8[r23]&1)!=0){r27=HEAP32[r13+8>>2];if((r27|0)==0){break}_free(r27)}}while(0);r23=r20+4|0;if(((tempValue=HEAP32[r23>>2],HEAP32[r23>>2]=tempValue+ -1,tempValue)|0)!=0){STACKTOP=r2;return}FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+8>>2]](r20);STACKTOP=r2;return}}while(0);r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53856;___cxa_throw(r2,62200,872)}function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev(r1){return}function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47;r2=0;r8=STACKTOP;STACKTOP=STACKTOP+536|0;r9=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r9>>2];r9=r8;r10=r8+120;r11=r8+528;r12=r11;r13=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r14=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r15=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r16=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r17=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r18=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r19=STACKTOP;STACKTOP=STACKTOP+400|0;r20=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r21=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r22=r8+16|0;HEAP32[r10>>2]=r22;r23=r8+128|0;r24=_snprintf(r22,100,41688,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r2>>3]=r7,r2));STACKTOP=r2;do{if(r24>>>0>99){do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r22=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r22}}while(0);r22=__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(r10,HEAP32[69912>>2],41688,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r2>>3]=r7,r2));STACKTOP=r2;r25=HEAP32[r10>>2];if((r25|0)==0){r26=___cxa_allocate_exception(4);HEAP32[r26>>2]=53824;___cxa_throw(r26,62184,110)}r26=_malloc(r22<<2);r27=r26;if((r26|0)!=0){r28=r27;r29=r22;r30=r27;r31=r25;break}r25=___cxa_allocate_exception(4);HEAP32[r25>>2]=53824;___cxa_throw(r25,62184,110)}else{r28=r23;r29=r24;r30=0;r31=0}}while(0);r24=HEAP32[r5+28>>2];r23=r24;r2=r24+4|0;tempValue=HEAP32[r2>>2],HEAP32[r2>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r9>>2]=71448;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r9)}r9=HEAP32[71452>>2]-1|0;r2=HEAP32[r24+8>>2];do{if(HEAP32[r24+12>>2]-r2>>2>>>0>r9>>>0){r7=HEAP32[r2+(r9<<2)>>2];if((r7|0)==0){break}r25=r7;r27=HEAP32[r10>>2];FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+48>>2]](r25,r27,r27+r29|0,r28);if((r29|0)==0){r32=0}else{r32=(HEAP8[HEAP32[r10>>2]]|0)==45}HEAP32[r11>>2]=0;r27=r15;HEAP32[r27>>2]=0;HEAP32[r27+4>>2]=0;HEAP32[r27+8>>2]=0;r7=r16;HEAP32[r7>>2]=0;HEAP32[r7+4>>2]=0;HEAP32[r7+8>>2]=0;r22=r17;HEAP32[r22>>2]=0;HEAP32[r22+4>>2]=0;HEAP32[r22+8>>2]=0;__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(r4,r32,r23,r12,r13,r14,r15,r16,r17,r18);r26=r19|0;r33=HEAP32[r18>>2];if((r29|0)>(r33|0)){r34=HEAP8[r22];if((r34&1)==0){r35=(r34&255)>>>1}else{r35=HEAP32[r17+4>>2]}r34=HEAP8[r7];if((r34&1)==0){r36=(r34&255)>>>1}else{r36=HEAP32[r16+4>>2]}r37=r35+(r29-r33<<1|1)+r36|0}else{r34=HEAP8[r22];if((r34&1)==0){r38=(r34&255)>>>1}else{r38=HEAP32[r17+4>>2]}r34=HEAP8[r7];if((r34&1)==0){r39=(r34&255)>>>1}else{r39=HEAP32[r16+4>>2]}r37=r38+2+r39|0}r34=r37+r33|0;do{if(r34>>>0>100){r40=_malloc(r34<<2);r41=r40;if((r40|0)!=0){r42=r41;r43=r41;break}r41=___cxa_allocate_exception(4);HEAP32[r41>>2]=53824;___cxa_throw(r41,62184,110)}else{r42=r26;r43=0}}while(0);__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(r42,r20,r21,HEAP32[r5+4>>2],r28,r28+(r29<<2)|0,r25,r32,r12,HEAP32[r13>>2],HEAP32[r14>>2],r15,r16,r17,r33);__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,HEAP32[r3>>2],r42,HEAP32[r20>>2],HEAP32[r21>>2],r5,r6);if((r43|0)!=0){_free(r43)}do{if((HEAP8[r22]&1)!=0){r26=HEAP32[r17+8>>2];if((r26|0)==0){break}_free(r26)}}while(0);do{if((HEAP8[r7]&1)!=0){r22=HEAP32[r16+8>>2];if((r22|0)==0){break}_free(r22)}}while(0);do{if((HEAP8[r27]&1)!=0){r7=HEAP32[r15+8>>2];if((r7|0)==0){break}_free(r7)}}while(0);r27=r24+4|0;if(((tempValue=HEAP32[r27>>2],HEAP32[r27>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+8>>2]](r24)}if((r30|0)!=0){_free(r30)}if((r31|0)==0){r44=400;r45=0;r46=100;r47=0;STACKTOP=r8;return}_free(r31);r44=400;r45=0;r46=100;r47=0;STACKTOP=r8;return}}while(0);r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53856;___cxa_throw(r8,62200,872)}function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10){var r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35;r11=STACKTOP;STACKTOP=STACKTOP+40|0;r12=r11;r13=r11+16;r14=r11+32;r15=r14;r16=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r17=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r18=r17;r19=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r20=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r21=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r22=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r23=r22;r24=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r25=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r26=r25;r27=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r28=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r29=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;if(r1){if((HEAP32[71912>>2]|0)!=-1){HEAP32[r13>>2]=71912;HEAP32[r13+4>>2]=46;HEAP32[r13+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71912,r13)}r13=HEAP32[71916>>2]-1|0;r1=HEAP32[r3+8>>2];if(HEAP32[r3+12>>2]-r1>>2>>>0<=r13>>>0){r30=___cxa_allocate_exception(4);r31=r30;HEAP32[r31>>2]=53856;___cxa_throw(r30,62200,872)}r32=HEAP32[r1+(r13<<2)>>2];if((r32|0)==0){r30=___cxa_allocate_exception(4);r31=r30;HEAP32[r31>>2]=53856;___cxa_throw(r30,62200,872)}r30=r32;r31=HEAP32[r32>>2];if(r2){FUNCTION_TABLE[HEAP32[r31+44>>2]](r15,r30);r15=r4;tempBigInt=HEAP32[r14>>2];HEAP8[r15]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r15+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r15+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r15+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+32>>2]](r16,r30);r15=r9;if((HEAP8[r15]&1)==0){HEAP32[r9+4>>2]=0;HEAP8[r15]=0}else{HEAP32[HEAP32[r9+8>>2]>>2]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r9);r14=r16;HEAP32[r15>>2]=HEAP32[r14>>2];HEAP32[r15+4>>2]=HEAP32[r14+4>>2];HEAP32[r15+8>>2]=HEAP32[r14+8>>2];HEAP32[r14>>2]=0;HEAP32[r14+4>>2]=0;HEAP32[r14+8>>2]=0}else{FUNCTION_TABLE[HEAP32[r31+40>>2]](r18,r30);r18=r4;tempBigInt=HEAP32[r17>>2];HEAP8[r18]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r18+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r18+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r18+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+28>>2]](r19,r30);r18=r9;if((HEAP8[r18]&1)==0){HEAP32[r9+4>>2]=0;HEAP8[r18]=0}else{HEAP32[HEAP32[r9+8>>2]>>2]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r9);r17=r19;HEAP32[r18>>2]=HEAP32[r17>>2];HEAP32[r18+4>>2]=HEAP32[r17+4>>2];HEAP32[r18+8>>2]=HEAP32[r17+8>>2];HEAP32[r17>>2]=0;HEAP32[r17+4>>2]=0;HEAP32[r17+8>>2]=0}r17=r32;r18=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+12>>2]](r30);HEAP32[r5>>2]=r18;r18=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+16>>2]](r30);HEAP32[r6>>2]=r18;FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+20>>2]](r20,r30);r18=r7;if((HEAP8[r18]&1)==0){HEAP8[r7+1|0]=0;HEAP8[r18]=0}else{HEAP8[HEAP32[r7+8>>2]]=0;HEAP32[r7+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r7);r19=r20;HEAP32[r18>>2]=HEAP32[r19>>2];HEAP32[r18+4>>2]=HEAP32[r19+4>>2];HEAP32[r18+8>>2]=HEAP32[r19+8>>2];HEAP32[r19>>2]=0;HEAP32[r19+4>>2]=0;HEAP32[r19+8>>2]=0;FUNCTION_TABLE[HEAP32[HEAP32[r32>>2]+24>>2]](r21,r30);r32=r8;if((HEAP8[r32]&1)==0){HEAP32[r8+4>>2]=0;HEAP8[r32]=0}else{HEAP32[HEAP32[r8+8>>2]>>2]=0;HEAP32[r8+4>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r8);r19=r21;HEAP32[r32>>2]=HEAP32[r19>>2];HEAP32[r32+4>>2]=HEAP32[r19+4>>2];HEAP32[r32+8>>2]=HEAP32[r19+8>>2];HEAP32[r19>>2]=0;HEAP32[r19+4>>2]=0;HEAP32[r19+8>>2]=0;r33=FUNCTION_TABLE[HEAP32[HEAP32[r17>>2]+36>>2]](r30);HEAP32[r10>>2]=r33;STACKTOP=r11;return}else{if((HEAP32[71920>>2]|0)!=-1){HEAP32[r12>>2]=71920;HEAP32[r12+4>>2]=46;HEAP32[r12+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71920,r12)}r12=HEAP32[71924>>2]-1|0;r30=HEAP32[r3+8>>2];if(HEAP32[r3+12>>2]-r30>>2>>>0<=r12>>>0){r34=___cxa_allocate_exception(4);r35=r34;HEAP32[r35>>2]=53856;___cxa_throw(r34,62200,872)}r3=HEAP32[r30+(r12<<2)>>2];if((r3|0)==0){r34=___cxa_allocate_exception(4);r35=r34;HEAP32[r35>>2]=53856;___cxa_throw(r34,62200,872)}r34=r3;r35=HEAP32[r3>>2];if(r2){FUNCTION_TABLE[HEAP32[r35+44>>2]](r23,r34);r23=r4;tempBigInt=HEAP32[r22>>2];HEAP8[r23]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r23+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r23+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r23+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+32>>2]](r24,r34);r23=r9;if((HEAP8[r23]&1)==0){HEAP32[r9+4>>2]=0;HEAP8[r23]=0}else{HEAP32[HEAP32[r9+8>>2]>>2]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r9);r22=r24;HEAP32[r23>>2]=HEAP32[r22>>2];HEAP32[r23+4>>2]=HEAP32[r22+4>>2];HEAP32[r23+8>>2]=HEAP32[r22+8>>2];HEAP32[r22>>2]=0;HEAP32[r22+4>>2]=0;HEAP32[r22+8>>2]=0}else{FUNCTION_TABLE[HEAP32[r35+40>>2]](r26,r34);r26=r4;tempBigInt=HEAP32[r25>>2];HEAP8[r26]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r26+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r26+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r26+3|0]=tempBigInt;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+28>>2]](r27,r34);r26=r9;if((HEAP8[r26]&1)==0){HEAP32[r9+4>>2]=0;HEAP8[r26]=0}else{HEAP32[HEAP32[r9+8>>2]>>2]=0;HEAP32[r9+4>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r9);r9=r27;HEAP32[r26>>2]=HEAP32[r9>>2];HEAP32[r26+4>>2]=HEAP32[r9+4>>2];HEAP32[r26+8>>2]=HEAP32[r9+8>>2];HEAP32[r9>>2]=0;HEAP32[r9+4>>2]=0;HEAP32[r9+8>>2]=0}r9=r3;r26=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+12>>2]](r34);HEAP32[r5>>2]=r26;r26=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+16>>2]](r34);HEAP32[r6>>2]=r26;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+20>>2]](r28,r34);r26=r7;if((HEAP8[r26]&1)==0){HEAP8[r7+1|0]=0;HEAP8[r26]=0}else{HEAP8[HEAP32[r7+8>>2]]=0;HEAP32[r7+4>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r7);r7=r28;HEAP32[r26>>2]=HEAP32[r7>>2];HEAP32[r26+4>>2]=HEAP32[r7+4>>2];HEAP32[r26+8>>2]=HEAP32[r7+8>>2];HEAP32[r7>>2]=0;HEAP32[r7+4>>2]=0;HEAP32[r7+8>>2]=0;FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+24>>2]](r29,r34);r3=r8;if((HEAP8[r3]&1)==0){HEAP32[r8+4>>2]=0;HEAP8[r3]=0}else{HEAP32[HEAP32[r8+8>>2]>>2]=0;HEAP32[r8+4>>2]=0}__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(r8);r8=r29;HEAP32[r3>>2]=HEAP32[r8>>2];HEAP32[r3+4>>2]=HEAP32[r8+4>>2];HEAP32[r3+8>>2]=HEAP32[r8+8>>2];HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;HEAP32[r8+8>>2]=0;r33=FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+36>>2]](r34);HEAP32[r10>>2]=r33;STACKTOP=r11;return}}function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15){var r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247;r16=0;HEAP32[r3>>2]=r1;r17=r7;r18=r14;r19=r14+4|0;r20=r14+8|0;r21=r13;r22=r4&512;r23=(r22|0)==0;r24=r13+4|0;r25=r13+8|0;r26=(r15|0)>0;r27=r12;r28=r12;r29=r28+1|0;r30=r12+8|0;r31=r12+4|0;r32=r7;r33=0;r34=r5;while(1){r35=r9+r33|0;r36=HEAP8[r35];r37=r36<<24>>24;L3:do{switch(r37|0){case 4:{r38=HEAP32[r3>>2];r39=r34+4|0;r40=r8?r39:r34;r41=r40>>>0<r6>>>0;L5:do{if(r41){r42=r40;while(1){r43=HEAP32[r42>>2];r44=HEAP32[r32>>2];r45=r44+12|0;r46=HEAP32[r45>>2];r47=FUNCTION_TABLE[r46](r7,2048,r43);r48=r42+4|0;if(!r47){r49=r42;break L5}r50=r48>>>0<r6>>>0;if(r50){r42=r48}else{r49=r48;break}}}else{r49=r40}}while(0);if(r26){r51=r49>>>0>r40>>>0;do{if(r51){r52=HEAP32[r3>>2];r53=r49;r54=r15;r55=r52;while(1){r56=r53-4|0;r57=HEAP32[r56>>2];r58=r55+4|0;HEAP32[r55>>2]=r57;r59=r54-1|0;r60=r56>>>0>r40>>>0;r61=(r59|0)>0;r62=r60&r61;if(r62){r53=r56;r54=r59;r55=r58}else{break}}HEAP32[r3>>2]=r58;if(r61){r63=r59;r64=r56;r16=34;break}r65=r55+8|0;HEAP32[r3>>2]=r65;r66=r58;r67=r56}else{r63=r15;r64=r49;r16=34}}while(0);do{if(r16==34){r16=0;r68=HEAP32[r17>>2];r69=r68+44|0;r70=HEAP32[r69>>2];r71=FUNCTION_TABLE[r70](r7,48);r72=(r63|0)>0;r73=HEAP32[r3>>2];r74=r73+4|0;HEAP32[r3>>2]=r74;if(r72){r75=r63;r76=r73;r77=r74}else{r66=r73;r67=r64;break}while(1){HEAP32[r76>>2]=r71;r78=r75-1|0;r79=(r78|0)>0;r80=r77+4|0;if(r79){r75=r78;r76=r77;r77=r80}else{break}}r81=r63+1|0;r82=r73+(r81<<2)|0;r83=r73+(r63<<2)|0;HEAP32[r3>>2]=r82;r66=r83;r67=r64}}while(0);HEAP32[r66>>2]=r10;r84=r67}else{r84=r49}r85=(r84|0)==(r40|0);if(r85){r86=HEAP32[r17>>2];r87=r86+44|0;r88=HEAP32[r87>>2];r89=FUNCTION_TABLE[r88](r7,48);r90=HEAP32[r3>>2];r91=r90+4|0;HEAP32[r3>>2]=r91;HEAP32[r90>>2]=r89;r92=r91}else{r93=HEAP8[r27];r94=r93&1;r95=r94<<24>>24==0;if(r95){r96=r93&255;r97=r96>>>1;r98=r97}else{r99=HEAP32[r31>>2];r98=r99}r100=(r98|0)==0;if(r100){r101=-1}else{if(r95){r102=r29}else{r103=HEAP32[r30>>2];r102=r103}r104=HEAP8[r102];r105=r104<<24>>24;r101=r105}r106=HEAP32[r3>>2];r107=r84;r108=0;r109=0;r110=r101;r111=r106;while(1){r112=(r108|0)==(r110|0);do{if(r112){r113=r111+4|0;HEAP32[r3>>2]=r113;HEAP32[r111>>2]=r11;r114=r109+1|0;r115=HEAP8[r27];r116=r115&1;r117=r116<<24>>24==0;if(r117){r118=r115&255;r119=r118>>>1;r120=r119}else{r121=HEAP32[r31>>2];r120=r121}r122=r114>>>0<r120>>>0;if(!r122){r123=r110;r124=r114;r125=0;r126=r113;break}if(r117){r127=r29}else{r128=HEAP32[r30>>2];r127=r128}r129=r127+r114|0;r130=HEAP8[r129];r131=r130<<24>>24==127;if(r131){r123=-1;r124=r114;r125=0;r126=r113;break}if(r117){r132=r29}else{r133=HEAP32[r30>>2];r132=r133}r134=r132+r114|0;r135=HEAP8[r134];r136=r135<<24>>24;r123=r136;r124=r114;r125=0;r126=r113}else{r123=r110;r124=r109;r125=r108;r126=r111}}while(0);r137=r107-4|0;r138=HEAP32[r137>>2];r139=r126+4|0;HEAP32[r3>>2]=r139;HEAP32[r126>>2]=r138;r140=r125+1|0;r141=(r137|0)==(r40|0);if(r141){r92=r139;break}else{r107=r137;r108=r140;r109=r124;r110=r123;r111=r139}}}r142=(r38|0)==(r92|0);if(r142){r143=r40;break L3}r144=r92-4|0;r145=r144>>>0>r38>>>0;if(r145){r146=r38;r147=r144}else{r143=r40;break L3}while(1){r148=HEAP32[r146>>2];r149=HEAP32[r147>>2];HEAP32[r146>>2]=r149;HEAP32[r147>>2]=r148;r150=r146+4|0;r151=r147-4|0;r152=r150>>>0<r151>>>0;if(r152){r146=r150;r147=r151}else{r143=r40;break}}break};case 1:{r153=HEAP32[r3>>2];HEAP32[r2>>2]=r153;r154=HEAP32[r17>>2];r155=r154+44|0;r156=HEAP32[r155>>2];r157=FUNCTION_TABLE[r156](r7,32);r158=HEAP32[r3>>2];r159=r158+4|0;HEAP32[r3>>2]=r159;HEAP32[r158>>2]=r157;r143=r34;break};case 2:{r160=HEAP8[r21];r161=r160&1;r162=r161<<24>>24==0;if(r162){r163=r160&255;r164=r163>>>1;r165=r164}else{r166=HEAP32[r24>>2];r165=r166}r167=(r165|0)==0;r168=r167|r23;if(r168){r143=r34;break L3}if(r162){r169=r160&255;r170=r169>>>1;r171=r170;r172=r24}else{r173=HEAP32[r25>>2];r174=HEAP32[r24>>2];r171=r174;r172=r173}r175=r172+(r171<<2)|0;r176=HEAP32[r3>>2];r177=(r172|0)==(r175|0);if(r177){r178=r176}else{r179=r172;r180=r171-1|0;r181=r172+(r180<<2)|0;r182=r181;r183=-r179|0;r184=r182+r183|0;r185=r184;r186=r185>>>2;r187=r176;r188=r172;while(1){r189=HEAP32[r188>>2];HEAP32[r187>>2]=r189;r190=r188+4|0;r191=(r190|0)==(r175|0);if(r191){break}r192=r187+4|0;r187=r192;r188=r190}r193=r186+1|0;r194=r176+(r193<<2)|0;r178=r194}HEAP32[r3>>2]=r178;r143=r34;break};case 3:{r195=HEAP8[r18];r196=r195&1;r197=r196<<24>>24==0;if(r197){r198=r195&255;r199=r198>>>1;r200=r199}else{r201=HEAP32[r19>>2];r200=r201}r202=(r200|0)==0;if(r202){r143=r34;break L3}if(r197){r203=r19}else{r204=HEAP32[r20>>2];r203=r204}r205=HEAP32[r203>>2];r206=HEAP32[r3>>2];r207=r206+4|0;HEAP32[r3>>2]=r207;HEAP32[r206>>2]=r205;r143=r34;break};case 0:{r208=HEAP32[r3>>2];HEAP32[r2>>2]=r208;r143=r34;break};default:{r143=r34}}}while(0);r209=r33+1|0;r210=r209>>>0<4;if(r210){r33=r209;r34=r143}else{break}}r211=HEAP8[r18];r212=r211&1;r213=r212<<24>>24==0;if(r213){r214=r211&255;r215=r214>>>1;r216=r215}else{r217=HEAP32[r19>>2];r216=r217}r218=r216>>>0>1;if(r218){if(r213){r219=r211&255;r220=r219>>>1;r221=r220;r222=r19}else{r223=HEAP32[r20>>2];r224=HEAP32[r19>>2];r221=r224;r222=r223}r225=r222+4|0;r226=r222+(r221<<2)|0;r227=HEAP32[r3>>2];r228=(r225|0)==(r226|0);if(r228){r229=r227}else{r230=r225;r231=r221-1|0;r232=r222+(r231<<2)|0;r233=r232;r234=-r230|0;r235=r233+r234|0;r236=r235;r237=r236>>>2;r238=r227;r239=r225;while(1){r240=HEAP32[r239>>2];HEAP32[r238>>2]=r240;r241=r239+4|0;r242=r238+4|0;r243=(r241|0)==(r226|0);if(r243){break}else{r238=r242;r239=r241}}r244=r237+1|0;r245=r227+(r244<<2)|0;r229=r245}HEAP32[r3>>2]=r229}r246=r4&176;if((r246|0)==32){r247=HEAP32[r3>>2];HEAP32[r2>>2]=r247;return}else if((r246|0)==16){return}else{HEAP32[r2>>2]=r1;return}}function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47;r2=STACKTOP;STACKTOP=STACKTOP+24|0;r8=r3;r3=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;HEAP32[r3>>2]=HEAP32[r8>>2];r8=r2;r9=r2+16;r10=r9;r11=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r12=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r13=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r14=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r15=STACKTOP;STACKTOP=STACKTOP+12|0;STACKTOP=STACKTOP+7&-8;r16=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r17=STACKTOP;STACKTOP=STACKTOP+400|0;r18=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r19=STACKTOP;STACKTOP=STACKTOP+4|0;STACKTOP=STACKTOP+7&-8;r20=HEAP32[r5+28>>2];r21=r20;r22=r20+4|0;tempValue=HEAP32[r22>>2],HEAP32[r22>>2]=tempValue+1,tempValue;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r8>>2]=71448;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r8)}r8=HEAP32[71452>>2]-1|0;r22=HEAP32[r20+8>>2];do{if(HEAP32[r20+12>>2]-r22>>2>>>0>r8>>>0){r23=HEAP32[r22+(r8<<2)>>2];if((r23|0)==0){break}r24=r23;r25=r7;r26=HEAP8[r25];r27=(r26&1)==0;if(r27){r28=(r26&255)>>>1}else{r28=HEAP32[r7+4>>2]}if((r28|0)==0){r29=0}else{if(r27){r30=r7+4|0}else{r30=HEAP32[r7+8>>2]}r27=HEAP32[r30>>2];r29=(r27|0)==(FUNCTION_TABLE[HEAP32[HEAP32[r23>>2]+44>>2]](r24,45)|0)}HEAP32[r9>>2]=0;r23=r13;HEAP32[r23>>2]=0;HEAP32[r23+4>>2]=0;HEAP32[r23+8>>2]=0;r27=r14;HEAP32[r27>>2]=0;HEAP32[r27+4>>2]=0;HEAP32[r27+8>>2]=0;r26=r15;HEAP32[r26>>2]=0;HEAP32[r26+4>>2]=0;HEAP32[r26+8>>2]=0;__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(r4,r29,r21,r10,r11,r12,r13,r14,r15,r16);r31=r17|0;r32=HEAP8[r25];r25=(r32&1)==0;if(r25){r33=(r32&255)>>>1}else{r33=HEAP32[r7+4>>2]}r34=HEAP32[r16>>2];if((r33|0)>(r34|0)){if(r25){r35=(r32&255)>>>1}else{r35=HEAP32[r7+4>>2]}r36=HEAP8[r26];if((r36&1)==0){r37=(r36&255)>>>1}else{r37=HEAP32[r15+4>>2]}r36=HEAP8[r27];if((r36&1)==0){r38=(r36&255)>>>1}else{r38=HEAP32[r14+4>>2]}r39=r37+(r35-r34<<1|1)+r38|0}else{r36=HEAP8[r26];if((r36&1)==0){r40=(r36&255)>>>1}else{r40=HEAP32[r15+4>>2]}r36=HEAP8[r27];if((r36&1)==0){r41=(r36&255)>>>1}else{r41=HEAP32[r14+4>>2]}r39=r40+2+r41|0}r36=r39+r34|0;do{if(r36>>>0>100){r42=_malloc(r36<<2);r43=r42;if((r42|0)!=0){r44=r43;r45=r43;break}r43=___cxa_allocate_exception(4);HEAP32[r43>>2]=53824;___cxa_throw(r43,62184,110)}else{r44=r31;r45=0}}while(0);if(r25){r46=(r32&255)>>>1;r47=r7+4|0}else{r46=HEAP32[r7+4>>2];r47=HEAP32[r7+8>>2]}__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(r44,r18,r19,HEAP32[r5+4>>2],r47,r47+(r46<<2)|0,r24,r29,r10,HEAP32[r11>>2],HEAP32[r12>>2],r13,r14,r15,r34);__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(r1,HEAP32[r3>>2],r44,HEAP32[r18>>2],HEAP32[r19>>2],r5,r6);if((r45|0)!=0){_free(r45)}do{if((HEAP8[r26]&1)!=0){r31=HEAP32[r15+8>>2];if((r31|0)==0){break}_free(r31)}}while(0);do{if((HEAP8[r27]&1)!=0){r26=HEAP32[r14+8>>2];if((r26|0)==0){break}_free(r26)}}while(0);do{if((HEAP8[r23]&1)!=0){r27=HEAP32[r13+8>>2];if((r27|0)==0){break}_free(r27)}}while(0);r23=r20+4|0;if(((tempValue=HEAP32[r23>>2],HEAP32[r23>>2]=tempValue+ -1,tempValue)|0)!=0){STACKTOP=r2;return}FUNCTION_TABLE[HEAP32[HEAP32[r20>>2]+8>>2]](r20);STACKTOP=r2;return}}while(0);r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53856;___cxa_throw(r2,62200,872)}function __ZNSt3__18messagesIcED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18messagesIcED1Ev(r1){return}function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(r1,r2,r3){var r4;if((HEAP8[r2]&1)==0){r4=r2+1|0}else{r4=HEAP32[r2+8>>2]}r2=_catopen(r4,1);return r2>>>(((r2|0)!=-1|0)>>>0)}function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29;r2=0;r7=STACKTOP;STACKTOP=STACKTOP+16|0;r8=r7;r9=r8;HEAP32[r9>>2]=0;HEAP32[r9+4>>2]=0;HEAP32[r9+8>>2]=0;r10=HEAP8[r6];if((r10&1)==0){r11=(r10&255)>>>1;r12=r6+1|0}else{r11=HEAP32[r6+4>>2];r12=HEAP32[r6+8>>2]}r6=r12+r11|0;if(r12>>>0<r6>>>0){r11=r8|0;r10=r8+4|0;r13=r8+1|0;r14=r8+8|0;r15=r12;r12=0;while(1){r16=HEAP8[r15];r17=(r12&1)!=0;if(r17){r18=HEAP32[r10>>2];r19=(HEAP32[r11>>2]&-2)-1|0}else{r18=(r12&255)>>>1;r19=10}if((r18|0)==(r19|0)){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r8,r19,1,r19,r19,0);if((HEAP8[r9]&1)==0){r2=14}else{r2=15}}else{if(r17){r2=15}else{r2=14}}if(r2==14){r2=0;HEAP8[r9]=(r18<<1)+2;r20=r13;r21=r18+1|0}else if(r2==15){r2=0;r17=HEAP32[r14>>2];r22=r18+1|0;HEAP32[r10>>2]=r22;r20=r17;r21=r22}HEAP8[r20+r18|0]=r16;HEAP8[r20+r21|0]=0;r16=r15+1|0;r23=HEAP8[r9];if(r16>>>0<r6>>>0){r15=r16;r12=r23}else{break}}r24=(r23&1)==0?r13:HEAP32[r14>>2];r25=(r3|0)==-1?-1:r3<<1}else{r24=r8+1|0;r25=(r3|0)==-1?-1:r3<<1}r3=_catgets(r25,r4,r5,r24);r24=r1;HEAP32[r24>>2]=0;HEAP32[r24+4>>2]=0;HEAP32[r24+8>>2]=0;r5=_strlen(r3);r4=r3+r5|0;L25:do{if((r5|0)>0){r25=r1|0;r14=r1+4|0;r13=r1+1|0;r23=r1+8|0;r12=r3;r15=0;while(1){r6=HEAP8[r12];r21=(r15&1)!=0;if(r21){r26=HEAP32[r14>>2];r27=(HEAP32[r25>>2]&-2)-1|0}else{r26=(r15&255)>>>1;r27=10}if((r26|0)==(r27|0)){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r1,r27,1,r27,r27,0);if((HEAP8[r24]&1)==0){r2=31}else{r2=32}}else{if(r21){r2=32}else{r2=31}}if(r2==31){r2=0;HEAP8[r24]=(r26<<1)+2;r28=r13;r29=r26+1|0}else if(r2==32){r2=0;r21=HEAP32[r23>>2];r20=r26+1|0;HEAP32[r14>>2]=r20;r28=r21;r29=r20}HEAP8[r28+r26|0]=r6;HEAP8[r28+r29|0]=0;r6=r12+1|0;if(r6>>>0>=r4>>>0){break L25}r12=r6;r15=HEAP8[r24]}}}while(0);if((HEAP8[r9]&1)==0){STACKTOP=r7;return}r9=HEAP32[r8+8>>2];if((r9|0)==0){STACKTOP=r7;return}_free(r9);STACKTOP=r7;return}function __ZNKSt3__18messagesIcE8do_closeEi(r1,r2){_catclose((r2|0)==-1?-1:r2<<1);return}function __ZNSt3__18messagesIwED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18messagesIwED1Ev(r1){return}function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(r1,r2,r3){var r4;if((HEAP8[r2]&1)==0){r4=r2+1|0}else{r4=HEAP32[r2+8>>2]}r2=_catopen(r4,1);return r2>>>(((r2|0)!=-1|0)>>>0)}function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47;r2=0;r7=STACKTOP;STACKTOP=STACKTOP+240|0;r8=r7;r9=r7+8;r10=r7+40;r11=r7+48;r12=r7+56;r13=r7+64;r14=r7+192;r15=r7+200;r16=r7+208;r17=r7+224;r18=r7+232;r19=r16;HEAP32[r19>>2]=0;HEAP32[r19+4>>2]=0;HEAP32[r19+8>>2]=0;HEAP32[r17+4>>2]=0;HEAP32[r17>>2]=55600;r20=HEAP8[r6];if((r20&1)==0){r21=(r20&255)>>>1;r22=r6+4|0}else{r21=HEAP32[r6+4>>2];r22=HEAP32[r6+8>>2]}r6=r22+(r21<<2)|0;r21=r9|0;r20=r8;HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;do{if(r22>>>0<r6>>>0){r8=r17|0;r23=r17;r24=r9+32|0;r25=r16|0;r26=r16+4|0;r27=r16+1|0;r28=r16+8|0;r29=r22;r30=55600;while(1){HEAP32[r11>>2]=r29;r31=(FUNCTION_TABLE[HEAP32[r30+12>>2]](r8,r20,r29,r6,r11,r21,r24,r10)|0)==2;r32=HEAP32[r11>>2];if(r31|(r32|0)==(r29|0)){break}if(r21>>>0<HEAP32[r10>>2]>>>0){r31=r21;while(1){r33=HEAP8[r31];r34=HEAP8[r19];r35=(r34&1)!=0;if(r35){r36=HEAP32[r26>>2];r37=(HEAP32[r25>>2]&-2)-1|0}else{r36=(r34&255)>>>1;r37=10}if((r36|0)==(r37|0)){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r16,r37,1,r37,r37,0);if((HEAP8[r19]&1)==0){r2=18}else{r2=19}}else{if(r35){r2=19}else{r2=18}}if(r2==18){r2=0;HEAP8[r19]=(r36<<1)+2;r38=r27;r39=r36+1|0}else if(r2==19){r2=0;r35=HEAP32[r28>>2];r34=r36+1|0;HEAP32[r26>>2]=r34;r38=r35;r39=r34}HEAP8[r38+r36|0]=r33;HEAP8[r38+r39|0]=0;r33=r31+1|0;if(r33>>>0<HEAP32[r10>>2]>>>0){r31=r33}else{break}}r40=HEAP32[r11>>2]}else{r40=r32}if(r40>>>0>=r6>>>0){r2=24;break}r29=r40;r30=HEAP32[r23>>2]}if(r2==24){r41=(HEAP8[r19]&1)==0;break}__ZNSt3__121__throw_runtime_errorEPKc(19328)}else{r41=1}}while(0);if(r41){r42=r16+1|0}else{r42=HEAP32[r16+8>>2]}r41=_catgets((r3|0)==-1?-1:r3<<1,r4,r5,r42);r42=r1;HEAP32[r42>>2]=0;HEAP32[r42+4>>2]=0;HEAP32[r42+8>>2]=0;HEAP32[r18+4>>2]=0;HEAP32[r18>>2]=55544;r5=_strlen(r41);r4=r41+r5|0;r3=r12;HEAP32[r12>>2]=0;HEAP32[r12+4>>2]=0;L39:do{if((r5|0)>0){r12=r18|0;r40=r18;r6=r4;r11=r13|0;r10=r13+128|0;r39=r1|0;r38=r1+4|0;r36=r1+8|0;r37=r41;r21=55544;while(1){HEAP32[r15>>2]=r37;r20=(FUNCTION_TABLE[HEAP32[r21+16>>2]](r12,r3,r37,(r6-r37|0)>32?r37+32|0:r4,r15,r11,r10,r14)|0)==2;r22=HEAP32[r15>>2];if(r20|(r22|0)==(r37|0)){break}if(r11>>>0<HEAP32[r14>>2]>>>0){r20=r11;while(1){r9=HEAP32[r20>>2];r17=HEAP8[r42];r23=(r17&1)!=0;if(r23){r43=HEAP32[r38>>2];r44=(HEAP32[r39>>2]&-2)-1|0}else{r43=(r17&255)>>>1;r44=1}if((r43|0)==(r44|0)){__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(r1,r44,1,r44,r44,0,0);if((HEAP8[r42]&1)==0){r2=48}else{r2=49}}else{if(r23){r2=49}else{r2=48}}if(r2==48){r2=0;HEAP8[r42]=(r43<<1)+2;r45=r38;r46=r43+1|0}else if(r2==49){r2=0;r23=HEAP32[r36>>2];r17=r43+1|0;HEAP32[r38>>2]=r17;r45=r23;r46=r17}HEAP32[r45+(r43<<2)>>2]=r9;HEAP32[r45+(r46<<2)>>2]=0;r9=r20+4|0;if(r9>>>0<HEAP32[r14>>2]>>>0){r20=r9}else{break}}r47=HEAP32[r15>>2]}else{r47=r22}if(r47>>>0>=r4>>>0){break L39}r37=r47;r21=HEAP32[r40>>2]}__ZNSt3__121__throw_runtime_errorEPKc(19328)}}while(0);if((HEAP8[r19]&1)==0){STACKTOP=r7;return}r19=HEAP32[r16+8>>2];if((r19|0)==0){STACKTOP=r7;return}_free(r19);STACKTOP=r7;return}function __ZNKSt3__18messagesIwE8do_closeEi(r1,r2){_catclose((r2|0)==-1?-1:r2<<1);return}function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(r1){var r2,r3;HEAP32[r1>>2]=55016;r2=r1+8|0;r1=HEAP32[r2>>2];do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r3=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r3}}while(0);if((r1|0)==(HEAP32[69912>>2]|0)){return}_freelocale(HEAP32[r2>>2]);return}function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(){var r1,r2,r3,r4,r5,r6,r7;r1=0;r2=___cxa_allocate_exception(8);r3=r2;HEAP32[r3>>2]=53984;r4=_strlen(40376);r5=r4+13|0;r6=(r5|0)==0?1:r5;while(1){r7=_malloc(r6);if((r7|0)!=0){r1=18;break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){break}FUNCTION_TABLE[r5]()}if(r1==18){HEAP32[r7+4>>2]=r4;HEAP32[r7>>2]=r4;r1=r7+12|0;HEAP32[r2+4>>2]=r1;HEAP32[r7+8>>2]=0;_memcpy(r1,40376,r4+1|0)|0;HEAP32[r3>>2]=53952;___cxa_throw(r2,62248,416)}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZNSt3__16locale5__imp7installEPNS0_5facetEl(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30;r4=0;r5=r2+4|0;tempValue=HEAP32[r5>>2],HEAP32[r5>>2]=tempValue+1,tempValue;r5=r1+12|0;r6=HEAP32[r5>>2];r7=r1+8|0;r8=HEAP32[r7>>2];r9=r6;r10=r8;r11=r9-r10>>2;do{if(r11>>>0>r3>>>0){r12=r8}else{r13=r3+1|0;if(r11>>>0>=r13>>>0){if(r11>>>0<=r13>>>0){r12=r8;break}r14=r8+(r13<<2)|0;if((r6|0)==(r14|0)){r12=r8;break}HEAP32[r5>>2]=r6+(~((r6-4+ -r14|0)>>>2)<<2);r12=r8;break}r14=r13-r11|0;r15=r1+16|0;r16=HEAP32[r15>>2];do{if(r16-r9>>2>>>0<r14>>>0){r17=r1+24|0;if(r13>>>0>1073741823){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}r18=r16-r10|0;do{if(r18>>2>>>0<536870911){r19=r18>>1;r20=r19>>>0<r13>>>0?r13:r19;if((r20|0)==0){r21=0;r22=0;break}r19=r1+136|0;if(!((HEAP8[r19]|0)==0&r20>>>0<29)){r23=r20;r4=14;break}HEAP8[r19]=1;r21=r17;r22=r20}else{r23=1073741823;r4=14}}while(0);do{if(r4==14){r18=r23<<2;r20=(r18|0)==0?1:r18;while(1){r24=_malloc(r20);if((r24|0)!=0){r4=25;break}r18=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r18|0)==0){break}FUNCTION_TABLE[r18]()}if(r4==25){r21=r24;r22=r23;break}r20=___cxa_allocate_exception(4);HEAP32[r20>>2]=53824;___cxa_throw(r20,62184,110)}}while(0);r20=r14;r18=r21+(r11<<2)|0;while(1){if((r18|0)==0){r25=0}else{HEAP32[r18>>2]=0;r25=r18}r26=r25+4|0;r19=r20-1|0;if((r19|0)==0){break}else{r20=r19;r18=r26}}r18=HEAP32[r7>>2];r20=HEAP32[r5>>2]-r18|0;r19=r21+(r11-(r20>>2)<<2)|0;r27=r18;_memcpy(r19,r27,r20)|0;HEAP32[r7>>2]=r19;HEAP32[r5>>2]=r26;HEAP32[r15>>2]=r21+(r22<<2);if((r18|0)==0){break}if((r17|0)==(r18|0)){HEAP8[r1+136|0]=0;break}else{_free(r27);break}}else{r27=r14;r18=r6;while(1){if((r18|0)==0){r28=0}else{HEAP32[r18>>2]=0;r28=HEAP32[r5>>2]}r19=r28+4|0;HEAP32[r5>>2]=r19;r20=r27-1|0;if((r20|0)==0){break}else{r27=r20;r18=r19}}}}while(0);r12=HEAP32[r7>>2]}}while(0);r5=HEAP32[r12+(r3<<2)>>2];if((r5|0)==0){r29=r12;r30=r29+(r3<<2)|0;HEAP32[r30>>2]=r2;return}r12=r5+4|0;if(((tempValue=HEAP32[r12>>2],HEAP32[r12>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5|0)}r29=HEAP32[r7>>2];r30=r29+(r3<<2)|0;HEAP32[r30>>2]=r2;return}function __ZNSt3__16locale5__impD0Ev(r1){__ZNSt3__16locale5__impD2Ev(r1);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__16locale5__impD2Ev(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;HEAP32[r1>>2]=55272;r2=r1+12|0;r3=HEAP32[r2>>2];r4=r1+8|0;r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){r6=r3}else{r7=0;r8=r5;r5=r3;while(1){r3=HEAP32[r8+(r7<<2)>>2];if((r3|0)==0){r9=r5;r10=r8}else{r11=r3+4|0;if(((tempValue=HEAP32[r11>>2],HEAP32[r11>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+8>>2]](r3|0)}r9=HEAP32[r2>>2];r10=HEAP32[r4>>2]}r3=r7+1|0;if(r3>>>0<r9-r10>>2>>>0){r7=r3;r8=r10;r5=r9}else{r6=r10;break}}}do{if((HEAP8[r1+144|0]&1)==0){r12=r6}else{r10=HEAP32[r1+152>>2];if((r10|0)==0){r12=r6;break}_free(r10);r12=HEAP32[r4>>2]}}while(0);if((r12|0)==0){return}r4=HEAP32[r2>>2];if((r4|0)!=(r12|0)){HEAP32[r2>>2]=r4+(~((r4-4+ -r12|0)>>>2)<<2)}if((r1+24|0)==(r12|0)){HEAP8[r1+136|0]=0;return}else{_free(r12);return}}function __ZNSt3__16localeC2Ev(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39;r2=STACKTOP;STACKTOP=STACKTOP+448|0;r3=r2;r4=r2+16;r5=r2+32;r6=r2+48;r7=r2+64;r8=r2+80;r9=r2+96;r10=r2+112;r11=r2+128;r12=r2+144;r13=r2+160;r14=r2+176;r15=r2+192;r16=r2+208;r17=r2+224;r18=r2+240;r19=r2+256;r20=r2+272;r21=r2+288;r22=r2+304;r23=r2+320;r24=r2+336;r25=r2+352;r26=r2+368;r27=r2+384;r28=r2+400;r29=r2+416;r30=r2+432;if((HEAP8[72e3]|0)!=0){r31=r1|0;r32=HEAP32[69904>>2];HEAP32[r31>>2]=r32;r33=r32+4|0;r34=(tempValue=HEAP32[r33>>2],HEAP32[r33>>2]=tempValue+1,tempValue);STACKTOP=r2;return}if((___cxa_guard_acquire(72e3)|0)==0){r31=r1|0;r32=HEAP32[69904>>2];HEAP32[r31>>2]=r32;r33=r32+4|0;r34=(tempValue=HEAP32[r33>>2],HEAP32[r33>>2]=tempValue+1,tempValue);STACKTOP=r2;return}do{if((HEAP8[72008]|0)==0){if((___cxa_guard_acquire(72008)|0)==0){break}HEAP32[70188>>2]=0;HEAP32[70184>>2]=55272;HEAP8[70320]=1;HEAP32[70196>>2]=70208;HEAP32[70192>>2]=70208;HEAP32[70200>>2]=70320;r35=28;r36=70208;while(1){HEAP32[r36>>2]=0;r37=HEAP32[70196>>2];r38=r37+4|0;HEAP32[70196>>2]=r38;r39=r35-1|0;if((r39|0)==0){break}else{r35=r39;r36=r38}}HEAP8[70328]=2;HEAP8[70329]=67;HEAP8[70330]=0;r36=HEAP32[70192>>2];if((r38|0)!=(r36|0)){HEAP32[70196>>2]=r37+(-((r37+ -r36|0)>>>2)<<2)}HEAP32[70140>>2]=0;HEAP32[70136>>2]=54976;if((HEAP32[71136>>2]|0)!=-1){HEAP32[r29>>2]=71136;HEAP32[r29+4>>2]=46;HEAP32[r29+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71136,r29)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70136,HEAP32[71140>>2]-1|0);HEAP32[70132>>2]=0;HEAP32[70128>>2]=54936;if((HEAP32[71128>>2]|0)!=-1){HEAP32[r28>>2]=71128;HEAP32[r28+4>>2]=46;HEAP32[r28+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71128,r28)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70128,HEAP32[71132>>2]-1|0);HEAP32[70356>>2]=0;HEAP32[70352>>2]=55384;HEAP32[70360>>2]=0;HEAP8[70364]=0;r36=___ctype_b_loc();HEAP32[70360>>2]=HEAP32[r36>>2];if((HEAP32[71456>>2]|0)!=-1){HEAP32[r27>>2]=71456;HEAP32[r27+4>>2]=46;HEAP32[r27+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71456,r27)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70352,HEAP32[71460>>2]-1|0);HEAP32[70348>>2]=0;HEAP32[70344>>2]=55304;if((HEAP32[71448>>2]|0)!=-1){HEAP32[r26>>2]=71448;HEAP32[r26+4>>2]=46;HEAP32[r26+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71448,r26)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70344,HEAP32[71452>>2]-1|0);HEAP32[70164>>2]=0;HEAP32[70160>>2]=55072;if((HEAP32[71152>>2]|0)!=-1){HEAP32[r25>>2]=71152;HEAP32[r25+4>>2]=46;HEAP32[r25+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71152,r25)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70160,HEAP32[71156>>2]-1|0);HEAP32[70148>>2]=0;HEAP32[70144>>2]=55016;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r36=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r36}}while(0);HEAP32[70152>>2]=HEAP32[69912>>2];if((HEAP32[71144>>2]|0)!=-1){HEAP32[r24>>2]=71144;HEAP32[r24+4>>2]=46;HEAP32[r24+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71144,r24)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70144,HEAP32[71148>>2]-1|0);HEAP32[70172>>2]=0;HEAP32[70168>>2]=55128;if((HEAP32[71160>>2]|0)!=-1){HEAP32[r23>>2]=71160;HEAP32[r23+4>>2]=46;HEAP32[r23+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71160,r23)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70168,HEAP32[71164>>2]-1|0);HEAP32[70180>>2]=0;HEAP32[70176>>2]=55184;if((HEAP32[71168>>2]|0)!=-1){HEAP32[r22>>2]=71168;HEAP32[r22+4>>2]=46;HEAP32[r22+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71168,r22)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70176,HEAP32[71172>>2]-1|0);HEAP32[70060>>2]=0;HEAP32[70056>>2]=54480;HEAP8[70064]=46;HEAP8[70065]=44;HEAP32[70068>>2]=0;HEAP32[70072>>2]=0;HEAP32[70076>>2]=0;if((HEAP32[71072>>2]|0)!=-1){HEAP32[r21>>2]=71072;HEAP32[r21+4>>2]=46;HEAP32[r21+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71072,r21)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70056,HEAP32[71076>>2]-1|0);HEAP32[70028>>2]=0;HEAP32[70024>>2]=54432;HEAP32[70032>>2]=46;HEAP32[70036>>2]=44;HEAP32[70040>>2]=0;HEAP32[70044>>2]=0;HEAP32[70048>>2]=0;if((HEAP32[71064>>2]|0)!=-1){HEAP32[r20>>2]=71064;HEAP32[r20+4>>2]=46;HEAP32[r20+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71064,r20)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70024,HEAP32[71068>>2]-1|0);HEAP32[70124>>2]=0;HEAP32[70120>>2]=54864;if((HEAP32[71120>>2]|0)!=-1){HEAP32[r19>>2]=71120;HEAP32[r19+4>>2]=46;HEAP32[r19+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71120,r19)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70120,HEAP32[71124>>2]-1|0);HEAP32[70116>>2]=0;HEAP32[70112>>2]=54792;if((HEAP32[71112>>2]|0)!=-1){HEAP32[r18>>2]=71112;HEAP32[r18+4>>2]=46;HEAP32[r18+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71112,r18)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70112,HEAP32[71116>>2]-1|0);HEAP32[70108>>2]=0;HEAP32[70104>>2]=54728;if((HEAP32[71104>>2]|0)!=-1){HEAP32[r17>>2]=71104;HEAP32[r17+4>>2]=46;HEAP32[r17+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71104,r17)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70104,HEAP32[71108>>2]-1|0);HEAP32[70100>>2]=0;HEAP32[70096>>2]=54664;if((HEAP32[71096>>2]|0)!=-1){HEAP32[r16>>2]=71096;HEAP32[r16+4>>2]=46;HEAP32[r16+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71096,r16)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70096,HEAP32[71100>>2]-1|0);HEAP32[70396>>2]=0;HEAP32[70392>>2]=56432;if((HEAP32[71936>>2]|0)!=-1){HEAP32[r15>>2]=71936;HEAP32[r15+4>>2]=46;HEAP32[r15+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71936,r15)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70392,HEAP32[71940>>2]-1|0);HEAP32[70388>>2]=0;HEAP32[70384>>2]=56368;if((HEAP32[71928>>2]|0)!=-1){HEAP32[r14>>2]=71928;HEAP32[r14+4>>2]=46;HEAP32[r14+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71928,r14)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70384,HEAP32[71932>>2]-1|0);HEAP32[70380>>2]=0;HEAP32[70376>>2]=56304;if((HEAP32[71920>>2]|0)!=-1){HEAP32[r13>>2]=71920;HEAP32[r13+4>>2]=46;HEAP32[r13+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71920,r13)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70376,HEAP32[71924>>2]-1|0);HEAP32[70372>>2]=0;HEAP32[70368>>2]=56240;if((HEAP32[71912>>2]|0)!=-1){HEAP32[r12>>2]=71912;HEAP32[r12+4>>2]=46;HEAP32[r12+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71912,r12)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70368,HEAP32[71916>>2]-1|0);HEAP32[69956>>2]=0;HEAP32[69952>>2]=54136;if((HEAP32[71024>>2]|0)!=-1){HEAP32[r11>>2]=71024;HEAP32[r11+4>>2]=46;HEAP32[r11+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71024,r11)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69952,HEAP32[71028>>2]-1|0);HEAP32[69948>>2]=0;HEAP32[69944>>2]=54096;if((HEAP32[71016>>2]|0)!=-1){HEAP32[r10>>2]=71016;HEAP32[r10+4>>2]=46;HEAP32[r10+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71016,r10)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69944,HEAP32[71020>>2]-1|0);HEAP32[69940>>2]=0;HEAP32[69936>>2]=54056;if((HEAP32[71008>>2]|0)!=-1){HEAP32[r9>>2]=71008;HEAP32[r9+4>>2]=46;HEAP32[r9+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71008,r9)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69936,HEAP32[71012>>2]-1|0);HEAP32[69932>>2]=0;HEAP32[69928>>2]=54016;if((HEAP32[71e3>>2]|0)!=-1){HEAP32[r8>>2]=71e3;HEAP32[r8+4>>2]=46;HEAP32[r8+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71e3,r8)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69928,HEAP32[71004>>2]-1|0);HEAP32[70012>>2]=0;HEAP32[70008>>2]=54336;HEAP32[70016>>2]=54384;if((HEAP32[71056>>2]|0)!=-1){HEAP32[r7>>2]=71056;HEAP32[r7+4>>2]=46;HEAP32[r7+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71056,r7)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70008,HEAP32[71060>>2]-1|0);HEAP32[69996>>2]=0;HEAP32[69992>>2]=54240;HEAP32[7e4>>2]=54288;if((HEAP32[71048>>2]|0)!=-1){HEAP32[r6>>2]=71048;HEAP32[r6+4>>2]=46;HEAP32[r6+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71048,r6)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69992,HEAP32[71052>>2]-1|0);HEAP32[69980>>2]=0;HEAP32[69976>>2]=55240;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r36=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r36}}while(0);HEAP32[69984>>2]=HEAP32[69912>>2];HEAP32[69976>>2]=54208;if((HEAP32[71040>>2]|0)!=-1){HEAP32[r5>>2]=71040;HEAP32[r5+4>>2]=46;HEAP32[r5+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71040,r5)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69976,HEAP32[71044>>2]-1|0);HEAP32[69964>>2]=0;HEAP32[69960>>2]=55240;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r36=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r36}}while(0);HEAP32[69968>>2]=HEAP32[69912>>2];HEAP32[69960>>2]=54176;if((HEAP32[71032>>2]|0)!=-1){HEAP32[r4>>2]=71032;HEAP32[r4+4>>2]=46;HEAP32[r4+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71032,r4)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,69960,HEAP32[71036>>2]-1|0);HEAP32[70092>>2]=0;HEAP32[70088>>2]=54568;if((HEAP32[71088>>2]|0)!=-1){HEAP32[r3>>2]=71088;HEAP32[r3+4>>2]=46;HEAP32[r3+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71088,r3)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70088,HEAP32[71092>>2]-1|0);HEAP32[70084>>2]=0;HEAP32[70080>>2]=54528;if((HEAP32[71080>>2]|0)!=-1){HEAP32[r30>>2]=71080;HEAP32[r30+4>>2]=46;HEAP32[r30+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(71080,r30)}__ZNSt3__16locale5__imp7installEPNS0_5facetEl(70184,70080,HEAP32[71084>>2]-1|0);HEAP32[69896>>2]=70184}}while(0);r30=HEAP32[69896>>2];HEAP32[69904>>2]=r30;r3=r30+4|0;tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+1,tempValue;r31=r1|0;r32=HEAP32[69904>>2];HEAP32[r31>>2]=r32;r33=r32+4|0;r34=(tempValue=HEAP32[r33>>2],HEAP32[r33>>2]=tempValue+1,tempValue);STACKTOP=r2;return}function __ZNKSt3__16locale9use_facetERNS0_2idE(r1,r2){var r3,r4,r5,r6,r7;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r5=r2|0;if((HEAP32[r5>>2]|0)!=-1){HEAP32[r4>>2]=r2;HEAP32[r4+4>>2]=46;HEAP32[r4+8>>2]=0;__ZNSt3__111__call_onceERVmPvPFvS2_E(r5,r4)}r4=HEAP32[r2+4>>2]-1|0;r2=HEAP32[r1+8>>2];if(HEAP32[r1+12>>2]-r2>>2>>>0<=r4>>>0){r6=___cxa_allocate_exception(4);r7=r6;HEAP32[r7>>2]=53856;___cxa_throw(r6,62200,872)}r1=HEAP32[r2+(r4<<2)>>2];if((r1|0)==0){r6=___cxa_allocate_exception(4);r7=r6;HEAP32[r7>>2]=53856;___cxa_throw(r6,62200,872)}else{STACKTOP=r3;return r1}}function __ZNSt3__16locale5facetD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__16locale5facet16__on_zero_sharedEv(r1){if((r1|0)==0){return}FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+4>>2]](r1);return}function __ZNSt3__16locale2id6__initEv(r1){HEAP32[r1+4>>2]=(tempValue=HEAP32[71176>>2],HEAP32[71176>>2]=tempValue+1,tempValue)+1;return}function __ZNSt3__15ctypeIwED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNKSt3__15ctypeIwE5do_isEtw(r1,r2,r3){var r4;if(r3>>>0>=128){r4=0;return r4}r1=___ctype_b_loc();r4=(HEAP16[HEAP32[r1>>2]+(r3<<1)>>1]&r2)<<16>>16!=0;return r4}function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt(r1,r2,r3,r4){var r5,r6,r7,r8;if((r2|0)==(r3|0)){r5=r2;return r5}else{r6=r2;r7=r4}while(1){r4=HEAP32[r6>>2];if(r4>>>0<128){r2=___ctype_b_loc();r8=HEAP16[HEAP32[r2>>2]+(r4<<1)>>1]}else{r8=0}HEAP16[r7>>1]=r8;r4=r6+4|0;if((r4|0)==(r3|0)){r5=r3;break}else{r6=r4;r7=r7+2|0}}return r5}function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_(r1,r2,r3,r4){var r5,r6,r7;r1=0;if((r3|0)==(r4|0)){r5=r3;return r5}else{r6=r3}while(1){r3=HEAP32[r6>>2];if(r3>>>0<128){r7=___ctype_b_loc();if((HEAP16[HEAP32[r7>>2]+(r3<<1)>>1]&r2)<<16>>16!=0){r5=r6;r1=7;break}}r3=r6+4|0;if((r3|0)==(r4|0)){r5=r4;r1=7;break}else{r6=r3}}if(r1==7){return r5}}function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_(r1,r2,r3,r4){var r5,r6,r7,r8;L1:do{if((r3|0)==(r4|0)){r5=r3}else{r1=r3;while(1){r6=HEAP32[r1>>2];if(r6>>>0>=128){r5=r1;break L1}r7=___ctype_b_loc();r8=r1+4|0;if((HEAP16[HEAP32[r7>>2]+(r6<<1)>>1]&r2)<<16>>16==0){r5=r1;break L1}if((r8|0)==(r4|0)){r5=r4;break}else{r1=r8}}}}while(0);return r5}function __ZNKSt3__15ctypeIwE10do_toupperEw(r1,r2){var r3;if(r2>>>0>=128){r3=r2;return r3}r1=___ctype_toupper_loc();r3=HEAP32[HEAP32[r1>>2]+(r2<<2)>>2];return r3}function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw(r1,r2,r3){var r4,r5,r6;if((r2|0)==(r3|0)){r4=r2;return r4}else{r5=r2}while(1){r2=HEAP32[r5>>2];if(r2>>>0<128){r1=___ctype_toupper_loc();r6=HEAP32[HEAP32[r1>>2]+(r2<<2)>>2]}else{r6=r2}HEAP32[r5>>2]=r6;r2=r5+4|0;if((r2|0)==(r3|0)){r4=r3;break}else{r5=r2}}return r4}function __ZNKSt3__15ctypeIwE10do_tolowerEw(r1,r2){var r3;if(r2>>>0>=128){r3=r2;return r3}r1=___ctype_tolower_loc();r3=HEAP32[HEAP32[r1>>2]+(r2<<2)>>2];return r3}function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw(r1,r2,r3){var r4,r5,r6;if((r2|0)==(r3|0)){r4=r2;return r4}else{r5=r2}while(1){r2=HEAP32[r5>>2];if(r2>>>0<128){r1=___ctype_tolower_loc();r6=HEAP32[HEAP32[r1>>2]+(r2<<2)>>2]}else{r6=r2}HEAP32[r5>>2]=r6;r2=r5+4|0;if((r2|0)==(r3|0)){r4=r3;break}else{r5=r2}}return r4}function __ZNKSt3__15ctypeIwE8do_widenEc(r1,r2){return r2<<24>>24}function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw(r1,r2,r3,r4){var r5,r6,r7;if((r2|0)==(r3|0)){r5=r2;return r5}else{r6=r2;r7=r4}while(1){HEAP32[r7>>2]=HEAP8[r6]|0;r4=r6+1|0;if((r4|0)==(r3|0)){r5=r3;break}else{r6=r4;r7=r7+4|0}}return r5}function __ZNKSt3__15ctypeIwE9do_narrowEwc(r1,r2,r3){return r2>>>0<128?r2&255:r3}function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc(r1,r2,r3,r4,r5){var r6,r7,r8;if((r2|0)==(r3|0)){r6=r2;return r6}r1=((r3-4+ -r2|0)>>>2)+1|0;r7=r2;r8=r5;while(1){r5=HEAP32[r7>>2];HEAP8[r8]=r5>>>0<128?r5&255:r4;r5=r7+4|0;if((r5|0)==(r3|0)){break}else{r7=r5;r8=r8+1|0}}r6=r2+(r1<<2)|0;return r6}function __ZNSt3__15ctypeIcED0Ev(r1){var r2;HEAP32[r1>>2]=55384;r2=HEAP32[r1+8>>2];do{if((r2|0)!=0){if((HEAP8[r1+12|0]|0)!=0){_free(r2)}if((r1|0)!=0){break}return}}while(0);_free(r1);return}function __ZNSt3__15ctypeIcED2Ev(r1){var r2;HEAP32[r1>>2]=55384;r2=HEAP32[r1+8>>2];if((r2|0)==0){return}if((HEAP8[r1+12|0]|0)==0){return}_free(r2);return}function __ZNKSt3__15ctypeIcE10do_toupperEc(r1,r2){var r3;if(r2<<24>>24<=-1){r3=r2;return r3}r1=___ctype_toupper_loc();r3=HEAP32[HEAP32[r1>>2]+((r2&255)<<2)>>2]&255;return r3}function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc(r1,r2,r3){var r4,r5,r6;if((r2|0)==(r3|0)){r4=r2;return r4}else{r5=r2}while(1){r2=HEAP8[r5];if(r2<<24>>24>-1){r1=___ctype_toupper_loc();r6=HEAP32[HEAP32[r1>>2]+(r2<<24>>24<<2)>>2]&255}else{r6=r2}HEAP8[r5]=r6;r2=r5+1|0;if((r2|0)==(r3|0)){r4=r3;break}else{r5=r2}}return r4}function __ZNKSt3__15ctypeIcE10do_tolowerEc(r1,r2){var r3;if(r2<<24>>24<=-1){r3=r2;return r3}r1=___ctype_tolower_loc();r3=HEAP32[HEAP32[r1>>2]+(r2<<24>>24<<2)>>2]&255;return r3}function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc(r1,r2,r3){var r4,r5,r6;if((r2|0)==(r3|0)){r4=r2;return r4}else{r5=r2}while(1){r2=HEAP8[r5];if(r2<<24>>24>-1){r1=___ctype_tolower_loc();r6=HEAP32[HEAP32[r1>>2]+(r2<<24>>24<<2)>>2]&255}else{r6=r2}HEAP8[r5]=r6;r2=r5+1|0;if((r2|0)==(r3|0)){r4=r3;break}else{r5=r2}}return r4}function __ZNKSt3__15ctypeIcE8do_widenEc(r1,r2){return r2}function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc(r1,r2,r3,r4){var r5,r6,r7;if((r2|0)==(r3|0)){r5=r2;return r5}else{r6=r2;r7=r4}while(1){HEAP8[r7]=HEAP8[r6];r4=r6+1|0;if((r4|0)==(r3|0)){r5=r3;break}else{r6=r4;r7=r7+1|0}}return r5}function __ZNKSt3__15ctypeIcE9do_narrowEcc(r1,r2,r3){return r2<<24>>24>-1?r2:r3}function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc(r1,r2,r3,r4,r5){var r6,r7,r8;if((r2|0)==(r3|0)){r6=r2;return r6}else{r7=r2;r8=r5}while(1){r5=HEAP8[r7];HEAP8[r8]=r5<<24>>24>-1?r5:r4;r5=r7+1|0;if((r5|0)==(r3|0)){r6=r3;break}else{r7=r5;r8=r8+1|0}}return r6}function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){HEAP32[r5>>2]=r3;HEAP32[r8>>2]=r6;return 3}function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){HEAP32[r5>>2]=r3;HEAP32[r8>>2]=r6;return 3}function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(r1,r2,r3,r4,r5){HEAP32[r5>>2]=r3;return 3}function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv(r1){return 1}function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv(r1){return 1}function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(r1,r2,r3,r4,r5){r2=r4-r3|0;return r2>>>0<r5>>>0?r2:r5}function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv(r1){return 1}function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev(r1){__ZNSt3__17codecvtIwc11__mbstate_tED2Ev(r1);if((r1|0)==0){return}_free(r1);return}function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86;r2=0;r9=STACKTOP;STACKTOP=STACKTOP+272|0;r10=r9;r11=r9+8;r12=r9+264;L1:do{if((r3|0)==(r4|0)){HEAP32[r8>>2]=r6;HEAP32[r5>>2]=r3;r13=r3}else{r14=r3;while(1){r15=r14+4|0;if((HEAP32[r14>>2]|0)==0){r16=r14;break}if((r15|0)==(r4|0)){r16=r4;break}else{r14=r15}}HEAP32[r8>>2]=r6;HEAP32[r5>>2]=r3;if((r6|0)==(r7|0)){r13=r3;break}r14=r7;r15=r1+8|0;r17=r12|0;r18=r11|0;r19=r10|0;r20=r6;r21=r3;r22=r16;while(1){r23=r22-r21>>2;r24=_uselocale(HEAP32[r15>>2]);r25=HEAP32[r5>>2];r26=(r20|0)!=0;r27=r26?r14-r20|0:256;r28=r26?r20:r18;L9:do{if((r25|0)==0|(r27|0)==0){r29=r23;r30=0;r31=r27;r32=r28;r33=r25}else{r34=r27;r35=0;r36=r28;r37=r23;r38=r25;while(1){r39=r37>>>0>=r34>>>0;if(!(r39|r37>>>0>32)){r29=r37;r30=r35;r31=r34;r32=r36;r33=r38;break L9}r40=r39?r34:r37;r39=r37-r40|0;L13:do{if((r36|0)==0){r41=HEAP32[r38>>2];if((r41|0)==0){r42=0;r43=r38;break}else{r44=0;r45=r38;r46=r41}while(1){if(r46>>>0>127){r41=_wcrtomb(r19,r46);if((r41|0)==-1){r29=r39;r30=-1;r31=0;r32=r36;r33=r38;break L9}else{r47=r41}}else{r47=1}r41=r47+r44|0;r48=r45+4|0;r49=HEAP32[r48>>2];if((r49|0)==0){r50=r41;r51=r38;r2=32;break}else{r44=r41;r45=r48;r46=r49}}}else{L21:do{if(r40>>>0>3){r49=r40;r48=r36;r41=r38;while(1){r52=HEAP32[r41>>2];if((r52|0)==0){r53=r49;r54=r48;r55=r41;r2=22;break L21}if(r52>>>0>127){r56=_wcrtomb(r48,r52);if((r56|0)==-1){r29=r39;r30=-1;r31=0;r32=r36;r33=r41;break L9}r57=r48+r56|0;r58=r49-r56|0;r59=r41}else{HEAP8[r48]=r52;r57=r48+1|0;r58=r49-1|0;r59=r41}r52=r59+4|0;if(r58>>>0>3){r49=r58;r48=r57;r41=r52}else{r60=r58;r61=r57;r62=r52;r2=16;break}}}else{r60=r40;r61=r36;r62=r38;r2=16}}while(0);if(r2==16){r2=0;if((r60|0)==0){r63=0}else{r53=r60;r54=r61;r55=r62;r2=22}}L32:do{if(r2==22){while(1){r2=0;r41=HEAP32[r55>>2];if((r41|0)==0){r2=30;break}if(r41>>>0>127){r48=_wcrtomb(r19,r41);if((r48|0)==-1){r29=r39;r30=-1;r31=0;r32=r36;r33=r55;break L9}if(r48>>>0>r53>>>0){r2=26;break}_wcrtomb(r54,HEAP32[r55>>2]);r64=r54+r48|0;r65=r53-r48|0;r66=r55}else{HEAP8[r54]=r41;r64=r54+1|0;r65=r53-1|0;r66=r55}if((r65|0)==0){r63=0;break L32}else{r53=r65;r54=r64;r55=r66+4|0;r2=22}}if(r2==26){r2=0;r50=r40-r53|0;r51=r55;r2=32;break L13}else if(r2==30){r2=0;HEAP8[r54]=0;r63=r53;break}}}while(0);r50=r40-r63|0;r51=0;r2=32}}while(0);if(r2==32){r2=0;if((r50|0)==-1){r29=r39;r30=-1;r31=0;r32=r36;r33=r51;break L9}else{r42=r50;r43=r51}}if((r36|0)==(r18|0)){r67=r18;r68=r34}else{r67=r36+r42|0;r68=r34-r42|0}r40=r42+r35|0;if((r43|0)==0|(r68|0)==0){r29=r39;r30=r40;r31=r68;r32=r67;r33=r43;break}else{r34=r68;r35=r40;r36=r67;r37=r39;r38=r43}}}}while(0);L53:do{if((r33|0)==0){r69=r30;r70=r33}else{if((r31|0)==0|(r29|0)==0){r69=r30;r70=r33;break}else{r71=r31;r72=r30;r73=r32;r74=r29;r75=r33}while(1){r76=_wcrtomb(r73,HEAP32[r75>>2]);if((r76+1|0)>>>0<2){break}r25=r75+4|0;r23=r74-1|0;r28=r72+1|0;if((r71|0)==(r76|0)|(r23|0)==0){r69=r28;r70=r25;break L53}else{r71=r71-r76|0;r72=r28;r73=r73+r76|0;r74=r23;r75=r25}}r25=(r76|0)==0;r69=r25?r72:-1;r70=r25?0:r75}}while(0);if(r26){HEAP32[r5>>2]=r70}if((r24|0)!=0){_uselocale(r24)}if((r69|0)==-1){r2=47;break}else if((r69|0)==0){r77=1;r2=70;break}r25=HEAP32[r8>>2]+r69|0;HEAP32[r8>>2]=r25;if((r25|0)==(r7|0)){r2=68;break}if((r22|0)==(r4|0)){r78=r4;r79=r25;r80=HEAP32[r5>>2]}else{r25=_uselocale(HEAP32[r15>>2]);HEAP8[r17]=0;if((r25|0)!=0){_uselocale(r25)}r25=HEAP32[r8>>2];if((r25|0)==(r7|0)){r77=1;r2=70;break}else{r81=0;r82=r17;r83=r25;r84=0}while(1){HEAP32[r8>>2]=r83+1;HEAP8[r83]=r84;if((r81|0)==0){break}r25=r82+1|0;r81=r81-1|0;r82=r25;r83=HEAP32[r8>>2];r84=HEAP8[r25]}r24=HEAP32[r5>>2]+4|0;HEAP32[r5>>2]=r24;L78:do{if((r24|0)==(r4|0)){r85=r4}else{r26=r24;while(1){r25=r26+4|0;if((HEAP32[r26>>2]|0)==0){r85=r26;break L78}if((r25|0)==(r4|0)){r85=r4;break}else{r26=r25}}}}while(0);r78=r85;r79=HEAP32[r8>>2];r80=r24}if((r80|0)==(r4|0)|(r79|0)==(r7|0)){r13=r80;break L1}else{r20=r79;r21=r80;r22=r78}}if(r2==47){HEAP32[r8>>2]=r20;L86:do{if((r21|0)==(HEAP32[r5>>2]|0)){r86=r21}else{r22=r21;r17=r20;while(1){r18=HEAP32[r22>>2];r19=_uselocale(HEAP32[r15>>2]);r14=_wcrtomb(r17,r18);if((r19|0)!=0){_uselocale(r19)}if((r14|0)==-1){r86=r22;break L86}r19=HEAP32[r8>>2]+r14|0;HEAP32[r8>>2]=r19;r14=r22+4|0;if((r14|0)==(HEAP32[r5>>2]|0)){r86=r14;break}else{r22=r14;r17=r19}}}}while(0);HEAP32[r5>>2]=r86;r77=2;STACKTOP=r9;return r77}else if(r2==68){r13=HEAP32[r5>>2];break}else if(r2==70){STACKTOP=r9;return r77}}}while(0);r77=(r13|0)!=(r4|0)|0;STACKTOP=r9;return r77}function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62;r9=0;r10=STACKTOP;STACKTOP=STACKTOP+1040|0;r11=r10;r12=r10+1024;r13=r10+1032;r14=r13;L1:do{if((r3|0)==(r4|0)){HEAP32[r8>>2]=r6;HEAP32[r5>>2]=r3;r15=r3}else{r16=r3;while(1){r17=r16+1|0;if((HEAP8[r16]|0)==0){r18=r16;break}if((r17|0)==(r4|0)){r18=r4;break}else{r16=r17}}HEAP32[r8>>2]=r6;HEAP32[r5>>2]=r3;if((r6|0)==(r7|0)){r15=r3;break}r16=r2;r17=r7;r19=r1+8|0;r20=r11|0;r21=r2|0;r22=r6;r23=r3;r24=r18;while(1){r25=HEAP32[r16+4>>2];HEAP32[r13>>2]=HEAP32[r16>>2];HEAP32[r13+4>>2]=r25;r26=r24;r25=r26-r23|0;r27=_uselocale(HEAP32[r19>>2]);r28=HEAP32[r5>>2];HEAP32[r12>>2]=r28;r29=(r22|0)!=0;r30=r29?r17-r22>>2:256;r31=r29?r22:r20;L10:do{if((r28|0)==0|(r30|0)==0){r32=r25;r33=0;r34=r30;r35=r31;r36=r28}else{r37=r30;r38=0;r39=r31;r40=r25;r41=r28;while(1){r42=r40>>>2;r43=r42>>>0>=r37>>>0;if(!(r43|r40>>>0>131)){r32=r40;r33=r38;r34=r37;r35=r39;r36=r41;break L10}r44=r43?r37:r42;r45=r40-r44|0;r42=_mbsrtowcs(r39,r12,r44,r2);if((r42|0)==-1){break}if((r39|0)==(r20|0)){r46=r20;r47=r37}else{r46=r39+(r42<<2)|0;r47=r37-r42|0}r44=r42+r38|0;r42=HEAP32[r12>>2];if((r42|0)==0|(r47|0)==0){r32=r45;r33=r44;r34=r47;r35=r46;r36=r42;break L10}else{r37=r47;r38=r44;r39=r46;r40=r45;r41=r42}}r32=r45;r33=-1;r34=0;r35=r39;r36=HEAP32[r12>>2]}}while(0);L20:do{if((r36|0)==0){r48=r33;r49=0}else{if((r34|0)==0|(r32|0)==0){r48=r33;r49=r36;break}else{r50=r34;r51=r33;r52=r35;r53=r32;r54=r36}while(1){r55=_mbrtowc(r52,r54,r53,r2);if((r55+2|0)>>>0<3){break}r28=r54+r55|0;HEAP32[r12>>2]=r28;r25=r50-1|0;r31=r51+1|0;if((r25|0)==0|(r53|0)==(r55|0)){r48=r31;r49=r28;break L20}else{r50=r25;r51=r31;r52=r52+4|0;r53=r53-r55|0;r54=r28}}if((r55|0)==-1){r48=-1;r49=r54;break}else if((r55|0)==0){HEAP32[r12>>2]=0;r48=r51;r49=0;break}else{HEAP32[r21>>2]=0;r48=r51;r49=r54;break}}}while(0);if(r29){HEAP32[r5>>2]=r49}if((r27|0)!=0){_uselocale(r27)}if((r48|0)==0){r56=2;r9=51;break}else if((r48|0)==-1){r9=27;break}r39=HEAP32[r8>>2]+(r48<<2)|0;HEAP32[r8>>2]=r39;if((r39|0)==(r7|0)){r9=49;break}r28=HEAP32[r5>>2];if((r24|0)==(r4|0)){r57=r4;r58=r39;r59=r28}else{r31=_uselocale(HEAP32[r19>>2]);r25=_mbrtowc(r39,r28,1,r2);if((r31|0)!=0){_uselocale(r31)}if((r25|0)!=0){r56=2;r9=51;break}HEAP32[r8>>2]=HEAP32[r8>>2]+4;r25=HEAP32[r5>>2]+1|0;HEAP32[r5>>2]=r25;L44:do{if((r25|0)==(r4|0)){r60=r4}else{r31=r25;while(1){r28=r31+1|0;if((HEAP8[r31]|0)==0){r60=r31;break L44}if((r28|0)==(r4|0)){r60=r4;break}else{r31=r28}}}}while(0);r57=r60;r58=HEAP32[r8>>2];r59=r25}if((r59|0)==(r4|0)|(r58|0)==(r7|0)){r15=r59;break L1}else{r22=r58;r23=r59;r24=r57}}if(r9==27){HEAP32[r8>>2]=r22;L55:do{if((r23|0)==(HEAP32[r5>>2]|0)){r61=r23}else{r24=r22;r21=r23;while(1){r20=_uselocale(HEAP32[r19>>2]);r17=_mbrtowc(r24,r21,r26-r21|0,r14);if((r20|0)!=0){_uselocale(r20)}if((r17|0)==0){r62=r21+1|0}else if((r17|0)==-1){r9=33;break}else if((r17|0)==-2){r9=34;break}else{r62=r21+r17|0}r17=HEAP32[r8>>2]+4|0;HEAP32[r8>>2]=r17;if((r62|0)==(HEAP32[r5>>2]|0)){r61=r62;break L55}else{r24=r17;r21=r62}}if(r9==33){HEAP32[r5>>2]=r21;r56=2;STACKTOP=r10;return r56}else if(r9==34){HEAP32[r5>>2]=r21;r56=1;STACKTOP=r10;return r56}}}while(0);HEAP32[r5>>2]=r61;r56=(r61|0)!=(r4|0)|0;STACKTOP=r10;return r56}else if(r9==49){r15=HEAP32[r5>>2];break}else if(r9==51){STACKTOP=r10;return r56}}}while(0);r56=(r15|0)!=(r4|0)|0;STACKTOP=r10;return r56}function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(r1,r2,r3,r4,r5){HEAP32[r5>>2]=r3;r3=_uselocale(HEAP32[r1+8>>2]);if((r3|0)==0){return 0}_uselocale(r3);return 0}function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv(r1){var r2,r3;r2=r1+8|0;r1=_uselocale(HEAP32[r2>>2]);if((r1|0)!=0){_uselocale(r1)}r1=HEAP32[r2>>2];if((r1|0)==0){r3=1;return r3}r2=_uselocale(r1);if((r2|0)==0){r3=0;return r3}_uselocale(r2);r3=0;return r3}function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv(r1){return 0}function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14;r6=0;if((r5|0)==0|(r3|0)==(r4|0)){r7=0;return r7}r8=r4;r9=r1+8|0;r1=(r2|0)!=0?r2:67888;r2=r3;r3=0;r10=0;while(1){r11=_uselocale(HEAP32[r9>>2]);r12=_mbrtowc(0,r2,r8-r2|0,r1);if((r11|0)!=0){_uselocale(r11)}if((r12|0)==0){r13=1;r14=r2+1|0}else if((r12|0)==-1|(r12|0)==-2){r7=r3;r6=10;break}else{r13=r12;r14=r2+r12|0}r12=r13+r3|0;r11=r10+1|0;if(r11>>>0>=r5>>>0|(r14|0)==(r4|0)){r7=r12;r6=10;break}else{r2=r14;r3=r12;r10=r11}}if(r6==10){return r7}}function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv(r1){var r2,r3;r2=HEAP32[r1+8>>2];do{if((r2|0)==0){r3=1}else{r1=_uselocale(r2);if((r1|0)==0){r3=4;break}_uselocale(r1);r3=4}}while(0);return r3}function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r2=r4;L1:do{if(r3>>>0<r4>>>0){r1=r7;r9=r6;r10=r3;while(1){r11=HEAP16[r10>>1];r12=r11&65535;do{if((r11&65535)<128){if((r1-r9|0)<1){r13=1;r14=r9;r15=r10;break L1}HEAP8[r9]=r11;r16=r9+1|0;r17=r10}else{if((r11&65535)<2048){if((r1-r9|0)<2){r13=1;r14=r9;r15=r10;break L1}HEAP8[r9]=r12>>>6|192;HEAP8[r9+1|0]=r12&63|128;r16=r9+2|0;r17=r10;break}if((r11&65535)<55296){if((r1-r9|0)<3){r13=1;r14=r9;r15=r10;break L1}HEAP8[r9]=r12>>>12|224;HEAP8[r9+1|0]=r12>>>6&63|128;HEAP8[r9+2|0]=r12&63|128;r16=r9+3|0;r17=r10;break}if((r11&65535)>=56320){if((r11&65535)<57344){r13=2;r14=r9;r15=r10;break L1}if((r1-r9|0)<3){r13=1;r14=r9;r15=r10;break L1}HEAP8[r9]=r12>>>12|224;HEAP8[r9+1|0]=r12>>>6&63|128;HEAP8[r9+2|0]=r12&63|128;r16=r9+3|0;r17=r10;break}if((r2-r10|0)<4){r13=1;r14=r9;r15=r10;break L1}r18=r10+2|0;r19=HEAPU16[r18>>1];if((r19&64512|0)!=56320){r13=2;r14=r9;r15=r10;break L1}if((r1-r9|0)<4){r13=1;r14=r9;r15=r10;break L1}r20=r12&960;if(((r20<<10)+65536|0)>>>0>1114111){r13=2;r14=r9;r15=r10;break L1}r21=(r20>>>6)+1|0;HEAP8[r9]=r21>>>2|240;HEAP8[r9+1|0]=r12>>>2&15|r21<<4&48|128;HEAP8[r9+2|0]=r12<<4&48|r19>>>6&15|128;HEAP8[r9+3|0]=r19&63|128;r16=r9+4|0;r17=r18}}while(0);r12=r17+2|0;if(r12>>>0<r4>>>0){r9=r16;r10=r12}else{r13=0;r14=r16;r15=r12;break}}}else{r13=0;r14=r6;r15=r3}}while(0);HEAP32[r5>>2]=r3+(r15-r3>>1<<1);HEAP32[r8>>2]=r6+(r14-r6);return r13}function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25;r2=0;L1:do{if(r3>>>0<r4>>>0){r1=r4;r9=r7;r10=r6;r11=r3;while(1){if(r10>>>0>=r7>>>0){r12=r10;r13=r11;r2=31;break L1}r14=HEAP8[r11];r15=r14&255;do{if(r14<<24>>24>-1){HEAP16[r10>>1]=r14&255;r16=r10;r17=r11+1|0}else{if((r14&255)<194){r18=2;r19=r10;r20=r11;break L1}if((r14&255)<224){if((r1-r11|0)<2){r18=1;r19=r10;r20=r11;break L1}r21=HEAPU8[r11+1|0];if((r21&192|0)!=128){r18=2;r19=r10;r20=r11;break L1}HEAP16[r10>>1]=r21&63|r15<<6&1984;r16=r10;r17=r11+2|0;break}if((r14&255)<240){if((r1-r11|0)<3){r18=1;r19=r10;r20=r11;break L1}r21=HEAP8[r11+1|0];r22=HEAP8[r11+2|0];if((r15|0)==237){if((r21&-32)<<24>>24!=-128){r18=2;r19=r10;r20=r11;break L1}}else if((r15|0)==224){if((r21&-32)<<24>>24!=-96){r18=2;r19=r10;r20=r11;break L1}}else{if((r21&-64)<<24>>24!=-128){r18=2;r19=r10;r20=r11;break L1}}r23=r22&255;if((r23&192|0)!=128){r18=2;r19=r10;r20=r11;break L1}HEAP16[r10>>1]=(r21&255)<<6&4032|r15<<12|r23&63;r16=r10;r17=r11+3|0;break}if((r14&255)>=245){r18=2;r19=r10;r20=r11;break L1}if((r1-r11|0)<4){r18=1;r19=r10;r20=r11;break L1}r23=HEAP8[r11+1|0];r21=HEAP8[r11+2|0];r22=HEAP8[r11+3|0];if((r15|0)==244){if((r23&-16)<<24>>24!=-128){r18=2;r19=r10;r20=r11;break L1}}else if((r15|0)==240){if((r23+112&255)>=48){r18=2;r19=r10;r20=r11;break L1}}else{if((r23&-64)<<24>>24!=-128){r18=2;r19=r10;r20=r11;break L1}}r24=r21&255;if((r24&192|0)!=128){r18=2;r19=r10;r20=r11;break L1}r21=r22&255;if((r21&192|0)!=128){r18=2;r19=r10;r20=r11;break L1}if((r9-r10|0)<4){r18=1;r19=r10;r20=r11;break L1}r22=r15&7;r25=r23&255;if((r25<<12&196608|r22<<18)>>>0>1114111){r18=2;r19=r10;r20=r11;break L1}HEAP16[r10>>1]=r25<<2&60|r24>>>4&3|((r25>>>4&3|r22<<2)<<6)+16320|55296;r22=r10+2|0;HEAP16[r22>>1]=r21&63|r24<<6&960|56320;r16=r22;r17=r11+4|0}}while(0);r15=r16+2|0;if(r17>>>0<r4>>>0){r10=r15;r11=r17}else{r12=r15;r13=r17;r2=31;break}}}else{r12=r6;r13=r3;r2=31}}while(0);if(r2==31){r18=r13>>>0<r4>>>0|0;r19=r12;r20=r13}HEAP32[r5>>2]=r3+(r20-r3);HEAP32[r8>>2]=r6+(r19-r6>>1<<1);return r18}function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(r1,r2,r3,r4,r5){HEAP32[r5>>2]=r3;return 3}function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv(r1){return 0}function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv(r1){return 0}function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r2=0;L1:do{if(r3>>>0<r4>>>0&(r5|0)!=0){r1=r4;r6=0;r7=r3;L3:while(1){r8=HEAP8[r7];r9=r8&255;do{if(r8<<24>>24>-1){r10=r7+1|0;r11=r6}else{if((r8&255)<194){r12=r7;break L1}if((r8&255)<224){if((r1-r7|0)<2){r12=r7;break L1}if((HEAP8[r7+1|0]&-64)<<24>>24!=-128){r12=r7;break L1}r10=r7+2|0;r11=r6;break}if((r8&255)<240){r13=r7;if((r1-r13|0)<3){r12=r7;break L1}r14=HEAP8[r7+1|0];r15=HEAP8[r7+2|0];if((r9|0)==237){if((r14&-32)<<24>>24!=-128){r2=16;break L3}}else if((r9|0)==224){if((r14&-32)<<24>>24!=-96){r2=14;break L3}}else{if((r14&-64)<<24>>24!=-128){r2=18;break L3}}if((r15&-64)<<24>>24!=-128){r12=r7;break L1}r10=r7+3|0;r11=r6;break}if((r8&255)>=245){r12=r7;break L1}r16=r7;if((r1-r16|0)<4){r12=r7;break L1}if((r5-r6|0)>>>0<2){r12=r7;break L1}r15=HEAP8[r7+1|0];r14=HEAP8[r7+2|0];r17=HEAP8[r7+3|0];if((r9|0)==240){if((r15+112&255)>=48){r2=26;break L3}}else if((r9|0)==244){if((r15&-16)<<24>>24!=-128){r2=28;break L3}}else{if((r15&-64)<<24>>24!=-128){r2=30;break L3}}if((r14&-64)<<24>>24!=-128){r12=r7;break L1}if((r17&-64)<<24>>24!=-128){r12=r7;break L1}if(((r15&255)<<12&196608|r9<<18&1835008)>>>0>1114111){r12=r7;break L1}r10=r7+4|0;r11=r6+1|0}}while(0);r9=r11+1|0;if(r10>>>0<r4>>>0&r9>>>0<r5>>>0){r6=r9;r7=r10}else{r12=r10;break L1}}if(r2==14){r18=r13-r3|0;return r18}else if(r2==16){r18=r13-r3|0;return r18}else if(r2==18){r18=r13-r3|0;return r18}else if(r2==26){r18=r16-r3|0;return r18}else if(r2==28){r18=r16-r3|0;return r18}else if(r2==30){r18=r16-r3|0;return r18}}else{r12=r3}}while(0);r18=r12-r3|0;return r18}function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv(r1){return 4}function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15;L1:do{if(r3>>>0<r4>>>0){r2=r7;r1=r6;r9=r3;while(1){r10=HEAP32[r9>>2];if((r10&-2048|0)==55296|r10>>>0>1114111){r11=2;r12=r1;r13=r9;break L1}do{if(r10>>>0<128){if((r2-r1|0)<1){r11=1;r12=r1;r13=r9;break L1}HEAP8[r1]=r10;r14=r1+1|0}else{if(r10>>>0<2048){if((r2-r1|0)<2){r11=1;r12=r1;r13=r9;break L1}HEAP8[r1]=r10>>>6|192;HEAP8[r1+1|0]=r10&63|128;r14=r1+2|0;break}r15=r2-r1|0;if(r10>>>0<65536){if((r15|0)<3){r11=1;r12=r1;r13=r9;break L1}HEAP8[r1]=r10>>>12|224;HEAP8[r1+1|0]=r10>>>6&63|128;HEAP8[r1+2|0]=r10&63|128;r14=r1+3|0;break}else{if((r15|0)<4){r11=1;r12=r1;r13=r9;break L1}HEAP8[r1]=r10>>>18|240;HEAP8[r1+1|0]=r10>>>12&63|128;HEAP8[r1+2|0]=r10>>>6&63|128;HEAP8[r1+3|0]=r10&63|128;r14=r1+4|0;break}}}while(0);r10=r9+4|0;if(r10>>>0<r4>>>0){r1=r14;r9=r10}else{r11=0;r12=r14;r13=r10;break}}}else{r11=0;r12=r6;r13=r3}}while(0);HEAP32[r5>>2]=r3+(r13-r3>>2<<2);HEAP32[r8>>2]=r6+(r12-r6);return r11}function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(r1,r2,r3,r4,r5,r6,r7,r8){var r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r2=0;L1:do{if(r3>>>0<r4>>>0){r1=r4;r9=r6;r10=r3;while(1){if(r9>>>0>=r7>>>0){r11=r9;r12=r10;r2=30;break L1}r13=HEAP8[r10];r14=r13&255;do{if(r13<<24>>24>-1){HEAP32[r9>>2]=r14;r15=r10+1|0}else{if((r13&255)<194){r16=2;r17=r9;r18=r10;break L1}if((r13&255)<224){if((r1-r10|0)<2){r16=1;r17=r9;r18=r10;break L1}r19=HEAPU8[r10+1|0];if((r19&192|0)!=128){r16=2;r17=r9;r18=r10;break L1}HEAP32[r9>>2]=r19&63|r14<<6&1984;r15=r10+2|0;break}if((r13&255)<240){if((r1-r10|0)<3){r16=1;r17=r9;r18=r10;break L1}r19=HEAP8[r10+1|0];r20=HEAP8[r10+2|0];if((r14|0)==237){if((r19&-32)<<24>>24!=-128){r16=2;r17=r9;r18=r10;break L1}}else if((r14|0)==224){if((r19&-32)<<24>>24!=-96){r16=2;r17=r9;r18=r10;break L1}}else{if((r19&-64)<<24>>24!=-128){r16=2;r17=r9;r18=r10;break L1}}r21=r20&255;if((r21&192|0)!=128){r16=2;r17=r9;r18=r10;break L1}HEAP32[r9>>2]=(r19&255)<<6&4032|r14<<12&61440|r21&63;r15=r10+3|0;break}if((r13&255)>=245){r16=2;r17=r9;r18=r10;break L1}if((r1-r10|0)<4){r16=1;r17=r9;r18=r10;break L1}r21=HEAP8[r10+1|0];r19=HEAP8[r10+2|0];r20=HEAP8[r10+3|0];if((r14|0)==244){if((r21&-16)<<24>>24!=-128){r16=2;r17=r9;r18=r10;break L1}}else if((r14|0)==240){if((r21+112&255)>=48){r16=2;r17=r9;r18=r10;break L1}}else{if((r21&-64)<<24>>24!=-128){r16=2;r17=r9;r18=r10;break L1}}r22=r19&255;if((r22&192|0)!=128){r16=2;r17=r9;r18=r10;break L1}r19=r20&255;if((r19&192|0)!=128){r16=2;r17=r9;r18=r10;break L1}r20=(r21&255)<<12&258048|r14<<18&1835008|r22<<6&4032|r19&63;if(r20>>>0>1114111){r16=2;r17=r9;r18=r10;break L1}HEAP32[r9>>2]=r20;r15=r10+4|0}}while(0);r14=r9+4|0;if(r15>>>0<r4>>>0){r9=r14;r10=r15}else{r11=r14;r12=r15;r2=30;break}}}else{r11=r6;r12=r3;r2=30}}while(0);if(r2==30){r16=r12>>>0<r4>>>0|0;r17=r11;r18=r12}HEAP32[r5>>2]=r3+(r18-r3);HEAP32[r8>>2]=r6+(r17-r6>>2<<2);return r16}function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(r1,r2,r3,r4,r5){HEAP32[r5>>2]=r3;return 3}function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv(r1){return 0}function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv(r1){return 0}function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r2=0;L1:do{if(r3>>>0<r4>>>0&(r5|0)!=0){r1=r4;r6=1;r7=r3;L3:while(1){r8=HEAP8[r7];r9=r8&255;do{if(r8<<24>>24>-1){r10=r7+1|0}else{if((r8&255)<194){r11=r7;break L1}if((r8&255)<224){if((r1-r7|0)<2){r11=r7;break L1}if((HEAP8[r7+1|0]&-64)<<24>>24!=-128){r11=r7;break L1}r10=r7+2|0;break}if((r8&255)<240){r12=r7;if((r1-r12|0)<3){r11=r7;break L1}r13=HEAP8[r7+1|0];r14=HEAP8[r7+2|0];if((r9|0)==237){if((r13&-32)<<24>>24!=-128){r2=16;break L3}}else if((r9|0)==224){if((r13&-32)<<24>>24!=-96){r2=14;break L3}}else{if((r13&-64)<<24>>24!=-128){r2=18;break L3}}if((r14&-64)<<24>>24!=-128){r11=r7;break L1}r10=r7+3|0;break}if((r8&255)>=245){r11=r7;break L1}r15=r7;if((r1-r15|0)<4){r11=r7;break L1}r14=HEAP8[r7+1|0];r13=HEAP8[r7+2|0];r16=HEAP8[r7+3|0];if((r9|0)==244){if((r14&-16)<<24>>24!=-128){r2=27;break L3}}else if((r9|0)==240){if((r14+112&255)>=48){r2=25;break L3}}else{if((r14&-64)<<24>>24!=-128){r2=29;break L3}}if((r13&-64)<<24>>24!=-128){r11=r7;break L1}if((r16&-64)<<24>>24!=-128){r11=r7;break L1}if(((r14&255)<<12&196608|r9<<18&1835008)>>>0>1114111){r11=r7;break L1}r10=r7+4|0}}while(0);if(!(r10>>>0<r4>>>0&r6>>>0<r5>>>0)){r11=r10;break L1}r6=r6+1|0;r7=r10}if(r2==14){r17=r12-r3|0;return r17}else if(r2==16){r17=r12-r3|0;return r17}else if(r2==18){r17=r12-r3|0;return r17}else if(r2==25){r17=r15-r3|0;return r17}else if(r2==27){r17=r15-r3|0;return r17}else if(r2==29){r17=r15-r3|0;return r17}}else{r11=r3}}while(0);r17=r11-r3|0;return r17}function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv(r1){return 4}function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__117__widen_from_utf8ILj32EED0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt3__18numpunctIcED0Ev(r1){var r2;HEAP32[r1>>2]=54480;do{if((HEAP8[r1+12|0]&1)!=0){r2=HEAP32[r1+20>>2];if((r2|0)!=0){_free(r2)}if((r1|0)!=0){break}return}}while(0);_free(r1);return}function __ZNSt3__18numpunctIcED2Ev(r1){var r2;HEAP32[r1>>2]=54480;if((HEAP8[r1+12|0]&1)==0){return}r2=HEAP32[r1+20>>2];if((r2|0)==0){return}_free(r2);return}function __ZNSt3__18numpunctIwED0Ev(r1){var r2;HEAP32[r1>>2]=54432;do{if((HEAP8[r1+16|0]&1)!=0){r2=HEAP32[r1+24>>2];if((r2|0)!=0){_free(r2)}if((r1|0)!=0){break}return}}while(0);_free(r1);return}function __ZNSt3__18numpunctIwED2Ev(r1){var r2;HEAP32[r1>>2]=54432;if((HEAP8[r1+16|0]&1)==0){return}r2=HEAP32[r1+24>>2];if((r2|0)==0){return}_free(r2);return}function __ZNKSt3__18numpunctIcE16do_decimal_pointEv(r1){return HEAP8[r1+8|0]}function __ZNKSt3__18numpunctIwE16do_decimal_pointEv(r1){return HEAP32[r1+8>>2]}function __ZNKSt3__18numpunctIcE16do_thousands_sepEv(r1){return HEAP8[r1+9|0]}function __ZNKSt3__18numpunctIwE16do_thousands_sepEv(r1){return HEAP32[r1+12>>2]}function __ZNKSt3__18numpunctIcE11do_groupingEv(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=0;r4=r2+12|0;if((HEAP8[r4]&1)==0){r5=r1;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2];return}r4=HEAP32[r2+20>>2];r5=HEAP32[r2+16>>2];if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r6=r1+1|0}else{r2=r5+16&-16;r7=(r2|0)==0?1:r2;while(1){r8=_malloc(r7);if((r8|0)!=0){r3=18;break}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}if(r3==18){HEAP32[r1+8>>2]=r8;HEAP32[r1>>2]=r2|1;HEAP32[r1+4>>2]=r5;r6=r8;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);_memcpy(r6,r4,r5)|0;HEAP8[r6+r5|0]=0;return}function __ZNKSt3__18numpunctIwE11do_groupingEv(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=0;r4=r2+16|0;if((HEAP8[r4]&1)==0){r5=r1;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2];return}r4=HEAP32[r2+24>>2];r5=HEAP32[r2+20>>2];if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r6=r1+1|0}else{r2=r5+16&-16;r7=(r2|0)==0?1:r2;while(1){r8=_malloc(r7);if((r8|0)!=0){r3=18;break}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}if(r3==18){HEAP32[r1+8>>2]=r8;HEAP32[r1>>2]=r2|1;HEAP32[r1+4>>2]=r5;r6=r8;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);_memcpy(r6,r4,r5)|0;HEAP8[r6+r5|0]=0;return}function __ZNKSt3__18numpunctIcE11do_truenameEv(r1,r2){HEAP8[r1]=8;r2=r1;r1=r2+1|0;tempBigInt=1702195828;HEAP8[r1]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r1+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r1+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r1+3|0]=tempBigInt;HEAP8[r2+5|0]=0;return}function __ZNKSt3__18numpunctIwE11do_truenameEv(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r2=0;r3=29288;while(1){if((HEAP32[r3>>2]|0)==0){break}else{r3=r3+4|0}}r4=r3-29288|0;r3=r4>>2;if(r3>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r3>>>0<2){HEAP8[r1]=r4>>>1;r5=r1+4|0}else{r6=r3+4&-4;r7=r6<<2;r8=(r7|0)==0?1:r7;while(1){r9=_malloc(r8);if((r9|0)!=0){r2=18;break}r7=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r7|0)==0){break}FUNCTION_TABLE[r7]()}if(r2==18){r8=r9;HEAP32[r1+8>>2]=r8;HEAP32[r1>>2]=r6|1;HEAP32[r1+4>>2]=r3;r5=r8;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);if((r3|0)==0){r10=r5+(r3<<2)|0;HEAP32[r10>>2]=0;return}else{r11=29288;r12=r3;r13=r5}while(1){r1=r12-1|0;HEAP32[r13>>2]=HEAP32[r11>>2];if((r1|0)==0){break}else{r11=r11+4|0;r12=r1;r13=r13+4|0}}r10=r5+(r3<<2)|0;HEAP32[r10>>2]=0;return}function __ZNKSt3__18numpunctIcE12do_falsenameEv(r1,r2){HEAP8[r1]=10;r2=r1;r1=r2+1|0;HEAP8[r1]=HEAP8[28480];HEAP8[r1+1|0]=HEAP8[28481];HEAP8[r1+2|0]=HEAP8[28482];HEAP8[r1+3|0]=HEAP8[28483];HEAP8[r1+4|0]=HEAP8[28484];HEAP8[r2+6|0]=0;return}function __ZNKSt3__18numpunctIwE12do_falsenameEv(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r2=0;r3=27392;while(1){if((HEAP32[r3>>2]|0)==0){break}else{r3=r3+4|0}}r4=r3-27392|0;r3=r4>>2;if(r3>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r3>>>0<2){HEAP8[r1]=r4>>>1;r5=r1+4|0}else{r6=r3+4&-4;r7=r6<<2;r8=(r7|0)==0?1:r7;while(1){r9=_malloc(r8);if((r9|0)!=0){r2=18;break}r7=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r7|0)==0){break}FUNCTION_TABLE[r7]()}if(r2==18){r8=r9;HEAP32[r1+8>>2]=r8;HEAP32[r1>>2]=r6|1;HEAP32[r1+4>>2]=r3;r5=r8;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);if((r3|0)==0){r10=r5+(r3<<2)|0;HEAP32[r10>>2]=0;return}else{r11=27392;r12=r3;r13=r5}while(1){r1=r12-1|0;HEAP32[r13>>2]=HEAP32[r11>>2];if((r1|0)==0){break}else{r11=r11+4|0;r12=r1;r13=r13+4|0}}r10=r5+(r3<<2)|0;HEAP32[r10>>2]=0;return}function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv(r1){var r2;if((HEAP8[72096]|0)!=0){r2=HEAP32[70496>>2];return r2}if((___cxa_guard_acquire(72096)|0)==0){r2=HEAP32[70496>>2];return r2}do{if((HEAP8[71984]|0)==0){if((___cxa_guard_acquire(71984)|0)==0){break}_memset(69440,0,168)|0;_atexit(1236,0,___dso_handle)}}while(0);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69440,46328);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69452,46016);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69464,45696);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69476,45672);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69488,45512);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69500,45504);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69512,45312);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69524,45160);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69536,44912);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69548,44768);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69560,44712);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69572,44360);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69584,44080);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69596,44e3);HEAP32[70496>>2]=69440;r2=HEAP32[70496>>2];return r2}function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv(r1){var r2;if((HEAP8[72040]|0)!=0){r2=HEAP32[70408>>2];return r2}if((___cxa_guard_acquire(72040)|0)==0){r2=HEAP32[70408>>2];return r2}do{if((HEAP8[71960]|0)==0){if((___cxa_guard_acquire(71960)|0)==0){break}_memset(68696,0,168)|0;_atexit(634,0,___dso_handle)}}while(0);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68696,48600);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68708,48480);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68720,48432);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68732,48296);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68744,48152);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68756,48072);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68768,47640);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68780,47472);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68792,47376);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68804,47328);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68816,47232);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68828,47088);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68840,46960);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68852,46768);HEAP32[70408>>2]=68696;r2=HEAP32[70408>>2];return r2}function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv(r1){var r2;if((HEAP8[72088]|0)!=0){r2=HEAP32[70488>>2];return r2}if((___cxa_guard_acquire(72088)|0)==0){r2=HEAP32[70488>>2];return r2}do{if((HEAP8[71976]|0)==0){if((___cxa_guard_acquire(71976)|0)==0){break}_memset(69152,0,288)|0;_atexit(712,0,___dso_handle)}}while(0);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69152,7776);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69164,7552);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69176,7360);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69188,7256);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69200,7136);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69212,7072);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69224,7040);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69236,6960);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69248,6888);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69260,6784);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69272,6488);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69284,6368);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69296,6272);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69308,6264);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69320,6208);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69332,6088);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69344,7136);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69356,6056);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69368,5928);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69380,49688);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69392,49560);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69404,49024);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69416,48832);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69428,48760);HEAP32[70488>>2]=69152;r2=HEAP32[70488>>2];return r2}function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv(r1){var r2;if((HEAP8[72032]|0)!=0){r2=HEAP32[70400>>2];return r2}if((___cxa_guard_acquire(72032)|0)==0){r2=HEAP32[70400>>2];return r2}do{if((HEAP8[71952]|0)==0){if((___cxa_guard_acquire(71952)|0)==0){break}_memset(68408,0,288)|0;_atexit(552,0,___dso_handle)}}while(0);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68408,13304);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68420,13176);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68432,12832);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68444,12736);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68456,9256);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68468,11616);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68480,11320);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68492,11056);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68504,10896);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68516,10712);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68528,10528);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68540,10448);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68552,10264);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68564,10128);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68576,9928);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68588,9456);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68600,9256);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68612,9136);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68624,9040);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68636,8928);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68648,8832);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68660,8744);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68672,8576);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68684,8376);HEAP32[70400>>2]=68408;r2=HEAP32[70400>>2];return r2}function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv(r1){var r2;if((HEAP8[72104]|0)!=0){r2=HEAP32[70504>>2];return r2}if((___cxa_guard_acquire(72104)|0)==0){r2=HEAP32[70504>>2];return r2}do{if((HEAP8[71992]|0)==0){if((___cxa_guard_acquire(71992)|0)==0){break}_memset(69608,0,288)|0;_atexit(546,0,___dso_handle)}}while(0);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69608,13944);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(69620,13760);HEAP32[70504>>2]=69608;r2=HEAP32[70504>>2];return r2}function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv(r1){var r2;if((HEAP8[72048]|0)!=0){r2=HEAP32[70416>>2];return r2}if((___cxa_guard_acquire(72048)|0)==0){r2=HEAP32[70416>>2];return r2}do{if((HEAP8[71968]|0)==0){if((___cxa_guard_acquire(71968)|0)==0){break}_memset(68864,0,288)|0;_atexit(1166,0,___dso_handle)}}while(0);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68864,15192);__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68876,14520);HEAP32[70416>>2]=68864;r2=HEAP32[70416>>2];return r2}function __ZNKSt3__120__time_get_c_storageIcE3__xEv(r1){var r2;if((HEAP8[72112]|0)!=0){return 70512}if((___cxa_guard_acquire(72112)|0)==0){return 70512}HEAP8[70512]=16;r1=70513;r2=r1|0;tempBigInt=623865125;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;r2=r1+4|0;tempBigInt=2032480100;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;HEAP8[70521]=0;_atexit(1226,70512,___dso_handle);return 70512}function __ZNKSt3__120__time_get_c_storageIwE3__xEv(r1){var r2,r3,r4,r5,r6,r7,r8;r1=0;if((HEAP8[72056]|0)!=0){return 70424}if((___cxa_guard_acquire(72056)|0)==0){return 70424}else{r2=24336}while(1){if((HEAP32[r2>>2]|0)==0){break}else{r2=r2+4|0}}r3=r2-24336|0;r2=r3>>2;if(r2>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r2>>>0<2){HEAP8[70424]=r3>>>1;r4=70428}else{r5=r2+4&-4;r6=r5<<2;r7=(r6|0)==0?1:r6;while(1){r8=_malloc(r7);if((r8|0)!=0){r1=20;break}r6=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r6|0)==0){break}FUNCTION_TABLE[r6]()}if(r1==20){r7=r8;HEAP32[70432>>2]=r7;HEAP32[70424>>2]=r5|1;HEAP32[70428>>2]=r2;r4=r7;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);if((r2|0)!=0){r8=24336;r1=r2;r3=r4;while(1){r7=r1-1|0;HEAP32[r3>>2]=HEAP32[r8>>2];if((r7|0)==0){break}else{r8=r8+4|0;r1=r7;r3=r3+4|0}}}HEAP32[r4+(r2<<2)>>2]=0;_atexit(832,70424,___dso_handle);return 70424}function __ZNKSt3__120__time_get_c_storageIcE3__XEv(r1){var r2;if((HEAP8[72136]|0)!=0){return 70560}if((___cxa_guard_acquire(72136)|0)==0){return 70560}HEAP8[70560]=16;r1=70561;r2=r1|0;tempBigInt=624576549;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;r2=r1+4|0;tempBigInt=1394948685;HEAP8[r2]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r2+3|0]=tempBigInt;HEAP8[70569]=0;_atexit(1226,70560,___dso_handle);return 70560}function __ZNKSt3__120__time_get_c_storageIwE3__XEv(r1){var r2,r3,r4,r5,r6,r7,r8;r1=0;if((HEAP8[72080]|0)!=0){return 70472}if((___cxa_guard_acquire(72080)|0)==0){return 70472}else{r2=22208}while(1){if((HEAP32[r2>>2]|0)==0){break}else{r2=r2+4|0}}r3=r2-22208|0;r2=r3>>2;if(r2>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r2>>>0<2){HEAP8[70472]=r3>>>1;r4=70476}else{r5=r2+4&-4;r6=r5<<2;r7=(r6|0)==0?1:r6;while(1){r8=_malloc(r7);if((r8|0)!=0){r1=20;break}r6=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r6|0)==0){break}FUNCTION_TABLE[r6]()}if(r1==20){r7=r8;HEAP32[70480>>2]=r7;HEAP32[70472>>2]=r5|1;HEAP32[70476>>2]=r2;r4=r7;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);if((r2|0)!=0){r8=22208;r1=r2;r3=r4;while(1){r7=r1-1|0;HEAP32[r3>>2]=HEAP32[r8>>2];if((r7|0)==0){break}else{r8=r8+4|0;r1=r7;r3=r3+4|0}}}HEAP32[r4+(r2<<2)>>2]=0;_atexit(832,70472,___dso_handle);return 70472}function __ZNKSt3__120__time_get_c_storageIcE3__cEv(r1){var r2,r3;r1=0;if((HEAP8[72128]|0)!=0){return 70544}if((___cxa_guard_acquire(72128)|0)==0){return 70544}while(1){r2=_malloc(32);if((r2|0)!=0){r1=13;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r1=11;break}FUNCTION_TABLE[r3]()}if(r1==11){r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}else if(r1==13){HEAP32[70552>>2]=r2;HEAP32[70544>>2]=33;HEAP32[70548>>2]=20;_memcpy(r2,21776,20)|0;HEAP8[r2+20|0]=0;_atexit(1226,70544,___dso_handle);return 70544}}function __ZNKSt3__120__time_get_c_storageIwE3__cEv(r1){var r2,r3,r4,r5,r6,r7,r8;r1=0;if((HEAP8[72072]|0)!=0){return 70456}if((___cxa_guard_acquire(72072)|0)==0){return 70456}else{r2=21296}while(1){if((HEAP32[r2>>2]|0)==0){break}else{r2=r2+4|0}}r3=r2-21296|0;r2=r3>>2;if(r2>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r2>>>0<2){HEAP8[70456]=r3>>>1;r4=70460}else{r5=r2+4&-4;r6=r5<<2;r7=(r6|0)==0?1:r6;while(1){r8=_malloc(r7);if((r8|0)!=0){r1=20;break}r6=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r6|0)==0){break}FUNCTION_TABLE[r6]()}if(r1==20){r7=r8;HEAP32[70464>>2]=r7;HEAP32[70456>>2]=r5|1;HEAP32[70460>>2]=r2;r4=r7;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);if((r2|0)!=0){r8=21296;r1=r2;r3=r4;while(1){r7=r1-1|0;HEAP32[r3>>2]=HEAP32[r8>>2];if((r7|0)==0){break}else{r8=r8+4|0;r1=r7;r3=r3+4|0}}}HEAP32[r4+(r2<<2)>>2]=0;_atexit(832,70456,___dso_handle);return 70456}function __ZNKSt3__120__time_get_c_storageIcE3__rEv(r1){var r2,r3;r1=0;if((HEAP8[72120]|0)!=0){return 70528}if((___cxa_guard_acquire(72120)|0)==0){return 70528}while(1){r2=_malloc(16);if((r2|0)!=0){r1=13;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r1=11;break}FUNCTION_TABLE[r3]()}if(r1==11){r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}else if(r1==13){HEAP32[70536>>2]=r2;HEAP32[70528>>2]=17;HEAP32[70532>>2]=11;_memcpy(r2,20856,11)|0;HEAP8[r2+11|0]=0;_atexit(1226,70528,___dso_handle);return 70528}}function __ZNKSt3__120__time_get_c_storageIwE3__rEv(r1){var r2,r3,r4,r5,r6,r7,r8;r1=0;if((HEAP8[72064]|0)!=0){return 70440}if((___cxa_guard_acquire(72064)|0)==0){return 70440}else{r2=20400}while(1){if((HEAP32[r2>>2]|0)==0){break}else{r2=r2+4|0}}r3=r2-20400|0;r2=r3>>2;if(r2>>>0>1073741807){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r2>>>0<2){HEAP8[70440]=r3>>>1;r4=70444}else{r5=r2+4&-4;r6=r5<<2;r7=(r6|0)==0?1:r6;while(1){r8=_malloc(r7);if((r8|0)!=0){r1=20;break}r6=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r6|0)==0){break}FUNCTION_TABLE[r6]()}if(r1==20){r7=r8;HEAP32[70448>>2]=r7;HEAP32[70440>>2]=r5|1;HEAP32[70444>>2]=r2;r4=r7;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);if((r2|0)!=0){r8=20400;r1=r2;r3=r4;while(1){r7=r1-1|0;HEAP32[r3>>2]=HEAP32[r8>>2];if((r7|0)==0){break}else{r8=r8+4|0;r1=r7;r3=r3+4|0}}}HEAP32[r4+(r2<<2)>>2]=0;_atexit(832,70440,___dso_handle);return 70440}function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=STACKTOP;STACKTOP=STACKTOP+112|0;r5=r4;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r6=0;STACKTOP=r4;return r6}r7=___errno_location();r8=HEAP32[r7>>2];HEAP32[r7>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r9=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r9}}while(0);_memset(r5,0,108)|0;r9=r5+4|0;HEAP32[r9>>2]=r1;r10=r5+8|0;HEAP32[r10>>2]=-1;HEAP32[r5+44>>2]=r1;HEAP32[r5+76>>2]=-1;HEAP32[r5+104>>2]=0;r11=r5+108|0;HEAP32[r11>>2]=~r1;HEAP32[r5+100>>2]=-1;r12=___floatscan(r5,2);r5=HEAP32[r9>>2]-HEAP32[r10>>2]+HEAP32[r11>>2]|0;if((r5|0)==0){r13=r1}else{r13=r1+r5|0}r5=HEAP32[r7>>2];if((r5|0)==0){HEAP32[r7>>2]=r8}if((r13|0)!=(r2|0)){HEAP32[r3>>2]=4;r6=0;STACKTOP=r4;return r6}if((r5|0)!=34){r6=r12;STACKTOP=r4;return r6}HEAP32[r3>>2]=4;r6=r12;STACKTOP=r4;return r6}function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=STACKTOP;STACKTOP=STACKTOP+112|0;r5=r4;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r6=0;STACKTOP=r4;return r6}r7=___errno_location();r8=HEAP32[r7>>2];HEAP32[r7>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r9=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r9}}while(0);_memset(r5,0,108)|0;r9=r5+4|0;HEAP32[r9>>2]=r1;r10=r5+8|0;HEAP32[r10>>2]=-1;HEAP32[r5+44>>2]=r1;HEAP32[r5+76>>2]=-1;HEAP32[r5+104>>2]=0;r11=r5+108|0;HEAP32[r11>>2]=~r1;HEAP32[r5+100>>2]=-1;r12=___floatscan(r5,2);r5=HEAP32[r9>>2]-HEAP32[r10>>2]+HEAP32[r11>>2]|0;if((r5|0)==0){r13=r1}else{r13=r1+r5|0}r5=HEAP32[r7>>2];if((r5|0)==0){HEAP32[r7>>2]=r8}if((r13|0)!=(r2|0)){HEAP32[r3>>2]=4;r6=0;STACKTOP=r4;return r6}if((r5|0)!=34){r6=r12;STACKTOP=r4;return r6}HEAP32[r3>>2]=4;r6=r12;STACKTOP=r4;return r6}function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=STACKTOP;STACKTOP=STACKTOP+112|0;r5=r4;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r6=0;STACKTOP=r4;return r6}r7=___errno_location();r8=HEAP32[r7>>2];HEAP32[r7>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r9=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r9}}while(0);_memset(r5,0,108)|0;r9=r5+4|0;HEAP32[r9>>2]=r1;r10=r5+8|0;HEAP32[r10>>2]=-1;HEAP32[r5+44>>2]=r1;HEAP32[r5+76>>2]=-1;HEAP32[r5+104>>2]=0;r11=r5+108|0;HEAP32[r11>>2]=~r1;HEAP32[r5+100>>2]=-1;r12=___floatscan(r5,2);r5=HEAP32[r9>>2]-HEAP32[r10>>2]+HEAP32[r11>>2]|0;if((r5|0)==0){r13=r1}else{r13=r1+r5|0}r5=HEAP32[r7>>2];if((r5|0)==0){HEAP32[r7>>2]=r8}if((r13|0)!=(r2|0)){HEAP32[r3>>2]=4;r6=0;STACKTOP=r4;return r6}if((r5|0)==34){HEAP32[r3>>2]=4}r6=r12;STACKTOP=r4;return r6}function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;do{if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r7=0;r8=0}else{if((HEAP8[r1]|0)==45){HEAP32[r3>>2]=4;r7=0;r8=0;break}r9=___errno_location();r10=HEAP32[r9>>2];HEAP32[r9>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r11=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r11}}while(0);r11=_strtoull_l(r1,r6,r4,HEAP32[69912>>2]);r12=HEAP32[r9>>2];if((r12|0)==0){HEAP32[r9>>2]=r10}if((HEAP32[r6>>2]|0)!=(r2|0)){HEAP32[r3>>2]=4;r7=0;r8=0;break}if((r12|0)!=34){r7=tempRet0;r8=r11;break}HEAP32[r3>>2]=4;r7=-1;r8=-1}}while(0);STACKTOP=r5;return tempRet0=r7,r8}function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}if((HEAP8[r1]|0)==45){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r8=___errno_location();r9=HEAP32[r8>>2];HEAP32[r8>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=_strtoull_l(r1,r6,r4,HEAP32[69912>>2]);r4=tempRet0;r1=HEAP32[r8>>2];if((r1|0)==0){HEAP32[r8>>2]=r9}if((HEAP32[r6>>2]|0)!=(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r2=0;if((r1|0)==34|(r4>>>0>r2>>>0|r4>>>0==r2>>>0&r10>>>0>-1>>>0)){HEAP32[r3>>2]=4;r7=-1;STACKTOP=r5;return r7}else{r7=r10;STACKTOP=r5;return r7}}function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}if((HEAP8[r1]|0)==45){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r8=___errno_location();r9=HEAP32[r8>>2];HEAP32[r8>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=_strtoull_l(r1,r6,r4,HEAP32[69912>>2]);r4=tempRet0;r1=HEAP32[r8>>2];if((r1|0)==0){HEAP32[r8>>2]=r9}if((HEAP32[r6>>2]|0)!=(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r2=0;if((r1|0)==34|(r4>>>0>r2>>>0|r4>>>0==r2>>>0&r10>>>0>-1>>>0)){HEAP32[r3>>2]=4;r7=-1;STACKTOP=r5;return r7}else{r7=r10;STACKTOP=r5;return r7}}function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}if((HEAP8[r1]|0)==45){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r8=___errno_location();r9=HEAP32[r8>>2];HEAP32[r8>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=_strtoull_l(r1,r6,r4,HEAP32[69912>>2]);r4=tempRet0;r1=HEAP32[r8>>2];if((r1|0)==0){HEAP32[r8>>2]=r9}if((HEAP32[r6>>2]|0)!=(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r2=0;if((r1|0)==34|(r4>>>0>r2>>>0|r4>>>0==r2>>>0&r10>>>0>65535>>>0)){HEAP32[r3>>2]=4;r7=-1;STACKTOP=r5;return r7}else{r7=r10&65535;STACKTOP=r5;return r7}}function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r7=0;r8=0;STACKTOP=r5;return tempRet0=r7,r8}r9=___errno_location();r10=HEAP32[r9>>2];HEAP32[r9>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r11=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r11}}while(0);r11=_strtoll_l(r1,r6,r4,HEAP32[69912>>2]);r4=tempRet0;r1=HEAP32[r9>>2];if((r1|0)==0){HEAP32[r9>>2]=r10}if((HEAP32[r6>>2]|0)!=(r2|0)){HEAP32[r3>>2]=4;r7=0;r8=0;STACKTOP=r5;return tempRet0=r7,r8}if((r1|0)==34){HEAP32[r3>>2]=4;r3=0;r1=(r4|0)>(r3|0)|(r4|0)==(r3|0)&r11>>>0>0>>>0;STACKTOP=r5;return tempRet0=r1?2147483647:-2147483648,r1?-1:0}else{r7=r4;r8=r11;STACKTOP=r5;return tempRet0=r7,r8}}function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;if((r1|0)==(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}r8=___errno_location();r9=HEAP32[r8>>2];HEAP32[r8>>2]=0;do{if((HEAP8[72016]|0)==0){if((___cxa_guard_acquire(72016)|0)==0){break}r10=_newlocale(2147483647,38944,0);HEAP32[69912>>2]=r10}}while(0);r10=_strtoll_l(r1,r6,r4,HEAP32[69912>>2]);r4=tempRet0;r1=HEAP32[r8>>2];if((r1|0)==0){HEAP32[r8>>2]=r9}if((HEAP32[r6>>2]|0)!=(r2|0)){HEAP32[r3>>2]=4;r7=0;STACKTOP=r5;return r7}do{if((r1|0)==34){HEAP32[r3>>2]=4;r2=0;if((r4|0)>(r2|0)|(r4|0)==(r2|0)&r10>>>0>0>>>0){r7=2147483647}else{break}STACKTOP=r5;return r7}else{r2=-1;if((r4|0)<(r2|0)|(r4|0)==(r2|0)&r10>>>0<-2147483648>>>0){HEAP32[r3>>2]=4;break}r2=0;if((r4|0)>(r2|0)|(r4|0)==(r2|0)&r10>>>0>2147483647>>>0){HEAP32[r3>>2]=4;r7=2147483647;STACKTOP=r5;return r7}else{r7=r10;STACKTOP=r5;return r7}}}while(0);r7=-2147483648;STACKTOP=r5;return r7}function ___cxx_global_array_dtor(r1){do{if((HEAP8[69140]&1)!=0){r1=HEAP32[69148>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69128]&1)!=0){r1=HEAP32[69136>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69116]&1)!=0){r1=HEAP32[69124>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69104]&1)!=0){r1=HEAP32[69112>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69092]&1)!=0){r1=HEAP32[69100>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69080]&1)!=0){r1=HEAP32[69088>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69068]&1)!=0){r1=HEAP32[69076>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69056]&1)!=0){r1=HEAP32[69064>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69044]&1)!=0){r1=HEAP32[69052>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69032]&1)!=0){r1=HEAP32[69040>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69020]&1)!=0){r1=HEAP32[69028>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69008]&1)!=0){r1=HEAP32[69016>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68996]&1)!=0){r1=HEAP32[69004>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68984]&1)!=0){r1=HEAP32[68992>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68972]&1)!=0){r1=HEAP32[68980>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68960]&1)!=0){r1=HEAP32[68968>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68948]&1)!=0){r1=HEAP32[68956>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68936]&1)!=0){r1=HEAP32[68944>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68924]&1)!=0){r1=HEAP32[68932>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68912]&1)!=0){r1=HEAP32[68920>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68900]&1)!=0){r1=HEAP32[68908>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68888]&1)!=0){r1=HEAP32[68896>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68876]&1)!=0){r1=HEAP32[68884>>2];if((r1|0)==0){break}_free(r1)}}while(0);if((HEAP8[68864]&1)==0){return}r1=HEAP32[68872>>2];if((r1|0)==0){return}_free(r1);return}function ___cxx_global_array_dtor53(r1){do{if((HEAP8[69884]&1)!=0){r1=HEAP32[69892>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69872]&1)!=0){r1=HEAP32[69880>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69860]&1)!=0){r1=HEAP32[69868>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69848]&1)!=0){r1=HEAP32[69856>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69836]&1)!=0){r1=HEAP32[69844>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69824]&1)!=0){r1=HEAP32[69832>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69812]&1)!=0){r1=HEAP32[69820>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69800]&1)!=0){r1=HEAP32[69808>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69788]&1)!=0){r1=HEAP32[69796>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69776]&1)!=0){r1=HEAP32[69784>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69764]&1)!=0){r1=HEAP32[69772>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69752]&1)!=0){r1=HEAP32[69760>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69740]&1)!=0){r1=HEAP32[69748>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69728]&1)!=0){r1=HEAP32[69736>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69716]&1)!=0){r1=HEAP32[69724>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69704]&1)!=0){r1=HEAP32[69712>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69692]&1)!=0){r1=HEAP32[69700>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69680]&1)!=0){r1=HEAP32[69688>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69668]&1)!=0){r1=HEAP32[69676>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69656]&1)!=0){r1=HEAP32[69664>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69644]&1)!=0){r1=HEAP32[69652>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69632]&1)!=0){r1=HEAP32[69640>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69620]&1)!=0){r1=HEAP32[69628>>2];if((r1|0)==0){break}_free(r1)}}while(0);if((HEAP8[69608]&1)==0){return}r1=HEAP32[69616>>2];if((r1|0)==0){return}_free(r1);return}function ___cxx_global_array_dtor56(r1){do{if((HEAP8[68684]&1)!=0){r1=HEAP32[68692>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68672]&1)!=0){r1=HEAP32[68680>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68660]&1)!=0){r1=HEAP32[68668>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68648]&1)!=0){r1=HEAP32[68656>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68636]&1)!=0){r1=HEAP32[68644>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68624]&1)!=0){r1=HEAP32[68632>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68612]&1)!=0){r1=HEAP32[68620>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68600]&1)!=0){r1=HEAP32[68608>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68588]&1)!=0){r1=HEAP32[68596>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68576]&1)!=0){r1=HEAP32[68584>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68564]&1)!=0){r1=HEAP32[68572>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68552]&1)!=0){r1=HEAP32[68560>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68540]&1)!=0){r1=HEAP32[68548>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68528]&1)!=0){r1=HEAP32[68536>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68516]&1)!=0){r1=HEAP32[68524>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68504]&1)!=0){r1=HEAP32[68512>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68492]&1)!=0){r1=HEAP32[68500>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68480]&1)!=0){r1=HEAP32[68488>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68468]&1)!=0){r1=HEAP32[68476>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68456]&1)!=0){r1=HEAP32[68464>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68444]&1)!=0){r1=HEAP32[68452>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68432]&1)!=0){r1=HEAP32[68440>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68420]&1)!=0){r1=HEAP32[68428>>2];if((r1|0)==0){break}_free(r1)}}while(0);if((HEAP8[68408]&1)==0){return}r1=HEAP32[68416>>2];if((r1|0)==0){return}_free(r1);return}function ___cxx_global_array_dtor81(r1){do{if((HEAP8[69428]&1)!=0){r1=HEAP32[69436>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69416]&1)!=0){r1=HEAP32[69424>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69404]&1)!=0){r1=HEAP32[69412>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69392]&1)!=0){r1=HEAP32[69400>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69380]&1)!=0){r1=HEAP32[69388>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69368]&1)!=0){r1=HEAP32[69376>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69356]&1)!=0){r1=HEAP32[69364>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69344]&1)!=0){r1=HEAP32[69352>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69332]&1)!=0){r1=HEAP32[69340>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69320]&1)!=0){r1=HEAP32[69328>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69308]&1)!=0){r1=HEAP32[69316>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69296]&1)!=0){r1=HEAP32[69304>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69284]&1)!=0){r1=HEAP32[69292>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69272]&1)!=0){r1=HEAP32[69280>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69260]&1)!=0){r1=HEAP32[69268>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69248]&1)!=0){r1=HEAP32[69256>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69236]&1)!=0){r1=HEAP32[69244>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69224]&1)!=0){r1=HEAP32[69232>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69212]&1)!=0){r1=HEAP32[69220>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69200]&1)!=0){r1=HEAP32[69208>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69188]&1)!=0){r1=HEAP32[69196>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69176]&1)!=0){r1=HEAP32[69184>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69164]&1)!=0){r1=HEAP32[69172>>2];if((r1|0)==0){break}_free(r1)}}while(0);if((HEAP8[69152]&1)==0){return}r1=HEAP32[69160>>2];if((r1|0)==0){return}_free(r1);return}function ___cxx_global_array_dtor105(r1){do{if((HEAP8[68852]&1)!=0){r1=HEAP32[68860>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68840]&1)!=0){r1=HEAP32[68848>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68828]&1)!=0){r1=HEAP32[68836>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68816]&1)!=0){r1=HEAP32[68824>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68804]&1)!=0){r1=HEAP32[68812>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68792]&1)!=0){r1=HEAP32[68800>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68780]&1)!=0){r1=HEAP32[68788>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68768]&1)!=0){r1=HEAP32[68776>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68756]&1)!=0){r1=HEAP32[68764>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68744]&1)!=0){r1=HEAP32[68752>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68732]&1)!=0){r1=HEAP32[68740>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68720]&1)!=0){r1=HEAP32[68728>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[68708]&1)!=0){r1=HEAP32[68716>>2];if((r1|0)==0){break}_free(r1)}}while(0);if((HEAP8[68696]&1)==0){return}r1=HEAP32[68704>>2];if((r1|0)==0){return}_free(r1);return}function ___cxx_global_array_dtor120(r1){do{if((HEAP8[69596]&1)!=0){r1=HEAP32[69604>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69584]&1)!=0){r1=HEAP32[69592>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69572]&1)!=0){r1=HEAP32[69580>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69560]&1)!=0){r1=HEAP32[69568>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69548]&1)!=0){r1=HEAP32[69556>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69536]&1)!=0){r1=HEAP32[69544>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69524]&1)!=0){r1=HEAP32[69532>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69512]&1)!=0){r1=HEAP32[69520>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69500]&1)!=0){r1=HEAP32[69508>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69488]&1)!=0){r1=HEAP32[69496>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69476]&1)!=0){r1=HEAP32[69484>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69464]&1)!=0){r1=HEAP32[69472>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[69452]&1)!=0){r1=HEAP32[69460>>2];if((r1|0)==0){break}_free(r1)}}while(0);if((HEAP8[69440]&1)==0){return}r1=HEAP32[69448>>2];if((r1|0)==0){return}_free(r1);return}function _mbrtowc(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;HEAP32[r6>>2]=r1;r7=((r4|0)==0?67880:r4)|0;r4=HEAP32[r7>>2];L1:do{if((r2|0)==0){if((r4|0)==0){r8=0}else{break}STACKTOP=r5;return r8}else{if((r1|0)==0){r9=r6;HEAP32[r6>>2]=r9;r10=r9}else{r10=r1}if((r3|0)==0){r8=-2;STACKTOP=r5;return r8}do{if((r4|0)==0){r9=HEAP8[r2];r11=r9&255;if(r9<<24>>24>-1){HEAP32[r10>>2]=r11;r8=r9<<24>>24!=0|0;STACKTOP=r5;return r8}else{r9=r11-194|0;if(r9>>>0>50){break L1}r12=r2+1|0;r13=HEAP32[51416+(r9<<2)>>2];r14=r3-1|0;break}}else{r12=r2;r13=r4;r14=r3}}while(0);L17:do{if((r14|0)==0){r15=r13}else{r9=HEAP8[r12];r11=(r9&255)>>>3;if((r11-16|r11+(r13>>26))>>>0>7){break L1}else{r16=r12;r17=r13;r18=r14;r19=r9}while(1){r9=r16+1|0;r20=(r19&255)-128|r17<<6;r21=r18-1|0;if((r20|0)>=0){break}if((r21|0)==0){r15=r20;break L17}r11=HEAP8[r9];if(((r11&255)-128|0)>>>0>63){break L1}else{r16=r9;r17=r20;r18=r21;r19=r11}}HEAP32[r7>>2]=0;HEAP32[r10>>2]=r20;r8=r3-r21|0;STACKTOP=r5;return r8}}while(0);HEAP32[r7>>2]=r15;r8=-2;STACKTOP=r5;return r8}}while(0);HEAP32[r7>>2]=0;r7=___errno_location();HEAP32[r7>>2]=84;r8=-1;STACKTOP=r5;return r8}function _mbsrtowcs(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55;r5=0;r6=HEAP32[r2>>2];do{if((r4|0)==0){r5=5}else{r7=r4|0;r8=HEAP32[r7>>2];if((r8|0)==0){r5=5;break}if((r1|0)==0){r9=r8;r10=r6;r11=r3;r5=15;break}HEAP32[r7>>2]=0;r12=r8;r13=r6;r14=r1;r15=r3;r5=34}}while(0);if(r5==5){if((r1|0)==0){r16=r6;r17=r3;r5=7}else{r18=r6;r19=r1;r20=r3;r5=6}}L7:while(1){if(r5==6){r5=0;if((r20|0)==0){r21=r3;r5=52;break}else{r22=r20;r23=r19;r24=r18}while(1){r6=HEAP8[r24];L39:do{if(((r6&255)-1|0)>>>0<127){if((r24&3|0)==0&r22>>>0>3){r25=r22;r26=r23;r27=r24}else{r28=r24;r29=r23;r30=r22;r31=r6;break}while(1){r4=HEAP32[r27>>2];if(((r4-16843009|r4)&-2139062144|0)!=0){r28=r27;r29=r26;r30=r25;r31=r4&255;break L39}HEAP32[r26>>2]=r4&255;HEAP32[r26+4>>2]=HEAPU8[r27+1|0];HEAP32[r26+8>>2]=HEAPU8[r27+2|0];r32=r27+4|0;r33=r26+16|0;HEAP32[r26+12>>2]=HEAPU8[r27+3|0];r34=r25-4|0;if(r34>>>0>3){r25=r34;r26=r33;r27=r32}else{break}}r28=r32;r29=r33;r30=r34;r31=HEAP8[r32]}else{r28=r24;r29=r23;r30=r22;r31=r6}}while(0);r35=r31&255;if((r35-1|0)>>>0>=127){break}HEAP32[r29>>2]=r35;r6=r30-1|0;if((r6|0)==0){r21=r3;r5=52;break L7}else{r22=r6;r23=r29+4|0;r24=r28+1|0}}r6=r35-194|0;if(r6>>>0>50){r36=r30;r37=r29;r38=r28;r39=r31;r5=46;break}r12=HEAP32[51416+(r6<<2)>>2];r13=r28+1|0;r14=r29;r15=r30;r5=34;continue}else if(r5==7){r5=0;r6=HEAP8[r16];do{if(((r6&255)-1|0)>>>0<127){if((r16&3|0)!=0){r40=r16;r41=r17;r42=r6;break}r4=HEAP32[r16>>2];if(((r4-16843009|r4)&-2139062144|0)==0){r43=r17;r44=r16}else{r40=r16;r41=r17;r42=r4&255;break}while(1){r4=r44+4|0;r8=r43-4|0;r7=HEAP32[r4>>2];if(((r7-16843009|r7)&-2139062144|0)==0){r43=r8;r44=r4}else{r40=r4;r41=r8;r42=r7&255;break}}}else{r40=r16;r41=r17;r42=r6}}while(0);r6=r42&255;if((r6-1|0)>>>0<127){r16=r40+1|0;r17=r41-1|0;r5=7;continue}r7=r6-194|0;if(r7>>>0>50){r36=r41;r37=r1;r38=r40;r39=r42;r5=46;break}r9=HEAP32[51416+(r7<<2)>>2];r10=r40+1|0;r11=r41;r5=15;continue}else if(r5==15){r5=0;r7=HEAPU8[r10]>>>3;if((r7-16|r7+(r9>>26))>>>0>7){r5=16;break}r7=r10+1|0;do{if((r9&33554432|0)==0){r45=r7}else{if((HEAPU8[r7]-128|0)>>>0>63){r5=19;break L7}r6=r10+2|0;if((r9&524288|0)==0){r45=r6;break}if((HEAPU8[r6]-128|0)>>>0>63){r5=22;break L7}r45=r10+3|0}}while(0);r16=r45;r17=r11-1|0;r5=7;continue}else if(r5==34){r5=0;r7=HEAPU8[r13];r6=r7>>>3;if((r6-16|r6+(r12>>26))>>>0>7){r5=35;break}r6=r13+1|0;r46=r7-128|r12<<6;do{if((r46|0)<0){r7=HEAPU8[r6]-128|0;if(r7>>>0>63){r5=38;break L7}r8=r13+2|0;r47=r7|r46<<6;if((r47|0)>=0){r48=r47;r49=r8;break}r7=HEAPU8[r8]-128|0;if(r7>>>0>63){r5=41;break L7}r48=r7|r47<<6;r49=r13+3|0}else{r48=r46;r49=r6}}while(0);HEAP32[r14>>2]=r48;r18=r49;r19=r14+4|0;r20=r15-1|0;r5=6;continue}}if(r5==16){r50=r9;r51=r10-1|0;r52=r1;r53=r11;r5=44}else if(r5==19){r50=r9;r51=r10-1|0;r52=r1;r53=r11;r5=44}else if(r5==22){r50=r9;r51=r10-1|0;r52=r1;r53=r11;r5=44}else if(r5==35){r50=r12;r51=r13-1|0;r52=r14;r53=r15;r5=44}else if(r5==38){r50=r46;r51=r13-1|0;r52=r14;r53=r15;r5=44}else if(r5==41){r50=r47;r51=r13-1|0;r52=r14;r53=r15;r5=44}else if(r5==52){return r21}do{if(r5==44){if((r50|0)!=0){r54=r52;r55=r51;break}r36=r53;r37=r52;r38=r51;r39=HEAP8[r51];r5=46}}while(0);do{if(r5==46){if(r39<<24>>24!=0){r54=r37;r55=r38;break}if((r37|0)!=0){HEAP32[r37>>2]=0;HEAP32[r2>>2]=0}r21=r3-r36|0;return r21}}while(0);r36=___errno_location();HEAP32[r36>>2]=84;if((r54|0)==0){r21=-1;return r21}HEAP32[r2>>2]=r55;r21=-1;return r21}function _wcrtomb(r1,r2){var r3;if((r1|0)==0){r3=1;return r3}if(r2>>>0<128){HEAP8[r1]=r2;r3=1;return r3}if(r2>>>0<2048){HEAP8[r1]=r2>>>6|192;HEAP8[r1+1|0]=r2&63|128;r3=2;return r3}if(r2>>>0<55296|(r2-57344|0)>>>0<8192){HEAP8[r1]=r2>>>12|224;HEAP8[r1+1|0]=r2>>>6&63|128;HEAP8[r1+2|0]=r2&63|128;r3=3;return r3}if((r2-65536|0)>>>0<1048576){HEAP8[r1]=r2>>>18|240;HEAP8[r1+1|0]=r2>>>12&63|128;HEAP8[r1+2|0]=r2>>>6&63|128;HEAP8[r1+3|0]=r2&63|128;r3=4;return r3}else{r2=___errno_location();HEAP32[r2>>2]=84;r3=-1;return r3}}function __ZNSt8bad_castD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt8bad_castD2Ev(r1){return}function __ZNKSt8bad_cast4whatEv(r1){return 8360}function __ZN10__cxxabiv116__shim_type_infoD2Ev(r1){return}function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(r1){return}function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(r1){return}function __ZN10__cxxabiv123__fundamental_type_infoD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZN10__cxxabiv116__enum_type_infoD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZN10__cxxabiv117__class_type_infoD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZN10__cxxabiv120__si_class_type_infoD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZN10__cxxabiv119__pointer_type_infoD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv(r1,r2,r3){return(r1|0)==(r2|0)}function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv(r1,r2,r3){return(r1|0)==(r2|0)}function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(r1,r2,r3){var r4,r5,r6,r7;r4=STACKTOP;STACKTOP=STACKTOP+56|0;r5=r4;if((r1|0)==(r2|0)){r6=1;STACKTOP=r4;return r6}if((r2|0)==0){r6=0;STACKTOP=r4;return r6}r7=___dynamic_cast(r2,64456);r2=r7;if((r7|0)==0){r6=0;STACKTOP=r4;return r6}_memset(r5,0,56)|0;HEAP32[r5>>2]=r2;HEAP32[r5+8>>2]=r1;HEAP32[r5+12>>2]=-1;HEAP32[r5+48>>2]=1;FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+28>>2]](r2,r5,HEAP32[r3>>2],1);if((HEAP32[r5+24>>2]|0)!=1){r6=0;STACKTOP=r4;return r6}HEAP32[r3>>2]=HEAP32[r5+16>>2];r6=1;STACKTOP=r4;return r6}function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(r1,r2,r3,r4){var r5;if((HEAP32[r2+8>>2]|0)!=(r1|0)){return}r1=r2+16|0;r5=HEAP32[r1>>2];if((r5|0)==0){HEAP32[r1>>2]=r3;HEAP32[r2+24>>2]=r4;HEAP32[r2+36>>2]=1;return}if((r5|0)!=(r3|0)){r3=r2+36|0;HEAP32[r3>>2]=HEAP32[r3>>2]+1;HEAP32[r2+24>>2]=2;HEAP8[r2+54|0]=1;return}r3=r2+24|0;if((HEAP32[r3>>2]|0)!=2){return}HEAP32[r3>>2]=r4;return}function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(r1,r2,r3,r4){var r5;if((r1|0)!=(HEAP32[r2+8>>2]|0)){r5=HEAP32[r1+8>>2];FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+28>>2]](r5,r2,r3,r4);return}r5=r2+16|0;r1=HEAP32[r5>>2];if((r1|0)==0){HEAP32[r5>>2]=r3;HEAP32[r2+24>>2]=r4;HEAP32[r2+36>>2]=1;return}if((r1|0)!=(r3|0)){r3=r2+36|0;HEAP32[r3>>2]=HEAP32[r3>>2]+1;HEAP32[r2+24>>2]=2;HEAP8[r2+54|0]=1;return}r3=r2+24|0;if((HEAP32[r3>>2]|0)!=2){return}HEAP32[r3>>2]=r4;return}function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11;r5=0;if((r1|0)==(HEAP32[r2+8>>2]|0)){r6=r2+16|0;r7=HEAP32[r6>>2];if((r7|0)==0){HEAP32[r6>>2]=r3;HEAP32[r2+24>>2]=r4;HEAP32[r2+36>>2]=1;return}if((r7|0)!=(r3|0)){r7=r2+36|0;HEAP32[r7>>2]=HEAP32[r7>>2]+1;HEAP32[r2+24>>2]=2;HEAP8[r2+54|0]=1;return}r7=r2+24|0;if((HEAP32[r7>>2]|0)!=2){return}HEAP32[r7>>2]=r4;return}r7=HEAP32[r1+12>>2];r6=r1+16+(r7<<3)|0;r8=HEAP32[r1+20>>2];r9=r8>>8;if((r8&1|0)==0){r10=r9}else{r10=HEAP32[HEAP32[r3>>2]+r9>>2]}r9=HEAP32[r1+16>>2];FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+28>>2]](r9,r2,r3+r10|0,(r8&2|0)!=0?r4:2);if((r7|0)<=1){return}r7=r2+54|0;r8=r3;r10=r1+24|0;while(1){r1=HEAP32[r10+4>>2];r9=r1>>8;if((r1&1|0)==0){r11=r9}else{r11=HEAP32[HEAP32[r8>>2]+r9>>2]}r9=HEAP32[r10>>2];FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+28>>2]](r9,r2,r3+r11|0,(r1&2|0)!=0?r4:2);if((HEAP8[r7]|0)!=0){r5=16;break}r1=r10+8|0;if(r1>>>0<r6>>>0){r10=r1}else{r5=16;break}}if(r5==16){return}}function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=STACKTOP;STACKTOP=STACKTOP+56|0;r5=r4;HEAP32[r3>>2]=HEAP32[HEAP32[r3>>2]>>2];r6=r2|0;do{if((r1|0)==(r6|0)|(r6|0)==64504){r7=1}else{if((r2|0)==0){r7=0;break}r8=___dynamic_cast(r2,64424);if((r8|0)==0){r7=0;break}if((HEAP32[r8+8>>2]&~HEAP32[r1+8>>2]|0)!=0){r7=0;break}r9=HEAP32[r1+12>>2];r10=r8+12|0;if((r9|0)==(HEAP32[r10>>2]|0)|(r9|0)==62160){r7=1;break}if((r9|0)==0){r7=0;break}r8=___dynamic_cast(r9,64456);if((r8|0)==0){r7=0;break}r9=HEAP32[r10>>2];if((r9|0)==0){r7=0;break}r10=___dynamic_cast(r9,64456);r9=r10;if((r10|0)==0){r7=0;break}_memset(r5,0,56)|0;HEAP32[r5>>2]=r9;HEAP32[r5+8>>2]=r8;HEAP32[r5+12>>2]=-1;HEAP32[r5+48>>2]=1;FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+28>>2]](r9,r5,HEAP32[r3>>2],1);if((HEAP32[r5+24>>2]|0)!=1){r7=0;break}HEAP32[r3>>2]=HEAP32[r5+16>>2];r7=1}}while(0);STACKTOP=r4;return r7}function ___dynamic_cast(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=STACKTOP;STACKTOP=STACKTOP+56|0;r4=r3;r5=HEAP32[r1>>2];r6=r1+HEAP32[r5-8>>2]|0;r7=HEAP32[r5-4>>2];r5=r7;HEAP32[r4>>2]=r2;HEAP32[r4+4>>2]=r1;HEAP32[r4+8>>2]=64472;r1=r4+16|0;r8=r4+20|0;r9=r4+24|0;r10=r4+28|0;r11=r4+32|0;r12=r4+40|0;_memset(r4+12|0,0,43)|0;do{if((r7|0)==(r2|0)){HEAP32[r4+48>>2]=1;FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+20>>2]](r5,r4,r6,r6,1,0);r13=(HEAP32[r9>>2]|0)==1?r6:0}else{FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+24>>2]](r5,r4,r6,1,0);r14=HEAP32[r4+36>>2];if((r14|0)==0){if((HEAP32[r12>>2]|0)!=1){r13=0;break}if((HEAP32[r10>>2]|0)!=1){r13=0;break}r13=(HEAP32[r11>>2]|0)==1?HEAP32[r8>>2]:0;break}else if((r14|0)!=1){r13=0;break}if((HEAP32[r9>>2]|0)!=1){if((HEAP32[r12>>2]|0)!=0){r13=0;break}if((HEAP32[r10>>2]|0)!=1){r13=0;break}if((HEAP32[r11>>2]|0)!=1){r13=0;break}}r13=HEAP32[r1>>2]}}while(0);STACKTOP=r3;return r13}function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32;r6=0;r7=r1|0;if((r7|0)==(HEAP32[r2+8>>2]|0)){if((HEAP32[r2+4>>2]|0)!=(r3|0)){return}r8=r2+28|0;if((HEAP32[r8>>2]|0)==1){return}HEAP32[r8>>2]=r4;return}if((r7|0)==(HEAP32[r2>>2]|0)){do{if((HEAP32[r2+16>>2]|0)!=(r3|0)){r7=r2+20|0;if((HEAP32[r7>>2]|0)==(r3|0)){break}HEAP32[r2+32>>2]=r4;r8=r2+44|0;if((HEAP32[r8>>2]|0)==4){return}r9=HEAP32[r1+12>>2];r10=r1+16+(r9<<3)|0;L19:do{if((r9|0)>0){r11=r2+52|0;r12=r2+53|0;r13=r2+54|0;r14=r1+8|0;r15=r2+24|0;r16=r3;r17=0;r18=r1+16|0;r19=0;L21:while(1){HEAP8[r11]=0;HEAP8[r12]=0;r20=HEAP32[r18+4>>2];r21=r20>>8;if((r20&1|0)==0){r22=r21}else{r22=HEAP32[HEAP32[r16>>2]+r21>>2]}r21=HEAP32[r18>>2];FUNCTION_TABLE[HEAP32[HEAP32[r21>>2]+20>>2]](r21,r2,r3,r3+r22|0,2-(r20>>>1&1)|0,r5);if((HEAP8[r13]|0)!=0){r23=r19;r24=r17;break}do{if((HEAP8[r12]|0)==0){r25=r19;r26=r17}else{if((HEAP8[r11]|0)==0){if((HEAP32[r14>>2]&1|0)==0){r23=1;r24=r17;break L21}else{r25=1;r26=r17;break}}if((HEAP32[r15>>2]|0)==1){r6=27;break L19}if((HEAP32[r14>>2]&2|0)==0){r6=27;break L19}else{r25=1;r26=1}}}while(0);r20=r18+8|0;if(r20>>>0<r10>>>0){r17=r26;r18=r20;r19=r25}else{r23=r25;r24=r26;break}}if(r24){r27=r23;r6=26}else{r28=r23;r6=23}}else{r28=0;r6=23}}while(0);do{if(r6==23){HEAP32[r7>>2]=r3;r10=r2+40|0;HEAP32[r10>>2]=HEAP32[r10>>2]+1;if((HEAP32[r2+36>>2]|0)!=1){r27=r28;r6=26;break}if((HEAP32[r2+24>>2]|0)!=2){r27=r28;r6=26;break}HEAP8[r2+54|0]=1;if(r28){r6=27}else{r6=28}}}while(0);if(r6==26){if(r27){r6=27}else{r6=28}}if(r6==27){HEAP32[r8>>2]=3;return}else if(r6==28){HEAP32[r8>>2]=4;return}}}while(0);if((r4|0)!=1){return}HEAP32[r2+32>>2]=1;return}r27=HEAP32[r1+12>>2];r28=r1+16+(r27<<3)|0;r23=HEAP32[r1+20>>2];r24=r23>>8;if((r23&1|0)==0){r29=r24}else{r29=HEAP32[HEAP32[r3>>2]+r24>>2]}r24=HEAP32[r1+16>>2];FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+24>>2]](r24,r2,r3+r29|0,(r23&2|0)!=0?r4:2,r5);r23=r1+24|0;if((r27|0)<=1){return}r27=HEAP32[r1+8>>2];do{if((r27&2|0)==0){r1=r2+36|0;if((HEAP32[r1>>2]|0)==1){break}if((r27&1|0)==0){r29=r2+54|0;r24=r3;r26=r23;while(1){if((HEAP8[r29]|0)!=0){r6=53;break}if((HEAP32[r1>>2]|0)==1){r6=53;break}r25=HEAP32[r26+4>>2];r22=r25>>8;if((r25&1|0)==0){r30=r22}else{r30=HEAP32[HEAP32[r24>>2]+r22>>2]}r22=HEAP32[r26>>2];FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+24>>2]](r22,r2,r3+r30|0,(r25&2|0)!=0?r4:2,r5);r25=r26+8|0;if(r25>>>0<r28>>>0){r26=r25}else{r6=53;break}}if(r6==53){return}}r26=r2+24|0;r24=r2+54|0;r29=r3;r8=r23;while(1){if((HEAP8[r24]|0)!=0){r6=53;break}if((HEAP32[r1>>2]|0)==1){if((HEAP32[r26>>2]|0)==1){r6=53;break}}r25=HEAP32[r8+4>>2];r22=r25>>8;if((r25&1|0)==0){r31=r22}else{r31=HEAP32[HEAP32[r29>>2]+r22>>2]}r22=HEAP32[r8>>2];FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+24>>2]](r22,r2,r3+r31|0,(r25&2|0)!=0?r4:2,r5);r25=r8+8|0;if(r25>>>0<r28>>>0){r8=r25}else{r6=53;break}}if(r6==53){return}}}while(0);r31=r2+54|0;r30=r3;r27=r23;while(1){if((HEAP8[r31]|0)!=0){r6=53;break}r23=HEAP32[r27+4>>2];r8=r23>>8;if((r23&1|0)==0){r32=r8}else{r32=HEAP32[HEAP32[r30>>2]+r8>>2]}r8=HEAP32[r27>>2];FUNCTION_TABLE[HEAP32[HEAP32[r8>>2]+24>>2]](r8,r2,r3+r32|0,(r23&2|0)!=0?r4:2,r5);r23=r27+8|0;if(r23>>>0<r28>>>0){r27=r23}else{r6=53;break}}if(r6==53){return}}function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;r6=0;r7=r1|0;if((r7|0)==(HEAP32[r2+8>>2]|0)){if((HEAP32[r2+4>>2]|0)!=(r3|0)){return}r8=r2+28|0;if((HEAP32[r8>>2]|0)==1){return}HEAP32[r8>>2]=r4;return}if((r7|0)!=(HEAP32[r2>>2]|0)){r7=HEAP32[r1+8>>2];FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+24>>2]](r7,r2,r3,r4,r5);return}do{if((HEAP32[r2+16>>2]|0)!=(r3|0)){r7=r2+20|0;if((HEAP32[r7>>2]|0)==(r3|0)){break}HEAP32[r2+32>>2]=r4;r8=r2+44|0;if((HEAP32[r8>>2]|0)==4){return}r9=r2+52|0;HEAP8[r9]=0;r10=r2+53|0;HEAP8[r10]=0;r11=HEAP32[r1+8>>2];FUNCTION_TABLE[HEAP32[HEAP32[r11>>2]+20>>2]](r11,r2,r3,r3,1,r5);if((HEAP8[r10]|0)==0){r12=0;r6=13}else{if((HEAP8[r9]|0)==0){r12=1;r6=13}}L23:do{if(r6==13){HEAP32[r7>>2]=r3;r9=r2+40|0;HEAP32[r9>>2]=HEAP32[r9>>2]+1;do{if((HEAP32[r2+36>>2]|0)==1){if((HEAP32[r2+24>>2]|0)!=2){r6=16;break}HEAP8[r2+54|0]=1;if(r12){break L23}}else{r6=16}}while(0);if(r6==16){if(r12){break}}HEAP32[r8>>2]=4;return}}while(0);HEAP32[r8>>2]=3;return}}while(0);if((r4|0)!=1){return}HEAP32[r2+32>>2]=1;return}function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(r1,r2,r3,r4,r5){if((HEAP32[r2+8>>2]|0)==(r1|0)){if((HEAP32[r2+4>>2]|0)!=(r3|0)){return}r5=r2+28|0;if((HEAP32[r5>>2]|0)==1){return}HEAP32[r5>>2]=r4;return}if((HEAP32[r2>>2]|0)!=(r1|0)){return}do{if((HEAP32[r2+16>>2]|0)!=(r3|0)){r1=r2+20|0;if((HEAP32[r1>>2]|0)==(r3|0)){break}HEAP32[r2+32>>2]=r4;HEAP32[r1>>2]=r3;r1=r2+40|0;HEAP32[r1>>2]=HEAP32[r1>>2]+1;do{if((HEAP32[r2+36>>2]|0)==1){if((HEAP32[r2+24>>2]|0)!=2){break}HEAP8[r2+54|0]=1}}while(0);HEAP32[r2+44>>2]=4;return}}while(0);if((r4|0)!=1){return}HEAP32[r2+32>>2]=1;return}function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;if((r1|0)!=(HEAP32[r2+8>>2]|0)){r7=r2+52|0;r8=HEAP8[r7];r9=r2+53|0;r10=HEAP8[r9];r11=HEAP32[r1+12>>2];r12=r1+16+(r11<<3)|0;HEAP8[r7]=0;HEAP8[r9]=0;r13=HEAP32[r1+20>>2];r14=r13>>8;if((r13&1|0)==0){r15=r14}else{r15=HEAP32[HEAP32[r4>>2]+r14>>2]}r14=HEAP32[r1+16>>2];FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]+20>>2]](r14,r2,r3,r4+r15|0,(r13&2|0)!=0?r5:2,r6);L6:do{if((r11|0)>1){r13=r2+24|0;r15=r1+8|0;r14=r2+54|0;r16=r4;r17=r1+24|0;while(1){if((HEAP8[r14]|0)!=0){break L6}do{if((HEAP8[r7]|0)==0){if((HEAP8[r9]|0)==0){break}if((HEAP32[r15>>2]&1|0)==0){break L6}}else{if((HEAP32[r13>>2]|0)==1){break L6}if((HEAP32[r15>>2]&2|0)==0){break L6}}}while(0);HEAP8[r7]=0;HEAP8[r9]=0;r18=HEAP32[r17+4>>2];r19=r18>>8;if((r18&1|0)==0){r20=r19}else{r20=HEAP32[HEAP32[r16>>2]+r19>>2]}r19=HEAP32[r17>>2];FUNCTION_TABLE[HEAP32[HEAP32[r19>>2]+20>>2]](r19,r2,r3,r4+r20|0,(r18&2|0)!=0?r5:2,r6);r18=r17+8|0;if(r18>>>0<r12>>>0){r17=r18}else{break}}}}while(0);HEAP8[r7]=r8;HEAP8[r9]=r10;return}HEAP8[r2+53|0]=1;if((HEAP32[r2+4>>2]|0)!=(r4|0)){return}HEAP8[r2+52|0]=1;r4=r2+16|0;r10=HEAP32[r4>>2];if((r10|0)==0){HEAP32[r4>>2]=r3;HEAP32[r2+24>>2]=r5;HEAP32[r2+36>>2]=1;if(!((HEAP32[r2+48>>2]|0)==1&(r5|0)==1)){return}HEAP8[r2+54|0]=1;return}if((r10|0)!=(r3|0)){r3=r2+36|0;HEAP32[r3>>2]=HEAP32[r3>>2]+1;HEAP8[r2+54|0]=1;return}r3=r2+24|0;r10=HEAP32[r3>>2];if((r10|0)==2){HEAP32[r3>>2]=r5;r21=r5}else{r21=r10}if(!((HEAP32[r2+48>>2]|0)==1&(r21|0)==1)){return}HEAP8[r2+54|0]=1;return}function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(r1,r2,r3,r4,r5,r6){var r7,r8;if((r1|0)!=(HEAP32[r2+8>>2]|0)){r7=HEAP32[r1+8>>2];FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+20>>2]](r7,r2,r3,r4,r5,r6);return}HEAP8[r2+53|0]=1;if((HEAP32[r2+4>>2]|0)!=(r4|0)){return}HEAP8[r2+52|0]=1;r4=r2+16|0;r6=HEAP32[r4>>2];if((r6|0)==0){HEAP32[r4>>2]=r3;HEAP32[r2+24>>2]=r5;HEAP32[r2+36>>2]=1;if(!((HEAP32[r2+48>>2]|0)==1&(r5|0)==1)){return}HEAP8[r2+54|0]=1;return}if((r6|0)!=(r3|0)){r3=r2+36|0;HEAP32[r3>>2]=HEAP32[r3>>2]+1;HEAP8[r2+54|0]=1;return}r3=r2+24|0;r6=HEAP32[r3>>2];if((r6|0)==2){HEAP32[r3>>2]=r5;r8=r5}else{r8=r6}if(!((HEAP32[r2+48>>2]|0)==1&(r8|0)==1)){return}HEAP8[r2+54|0]=1;return}function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(r1,r2,r3,r4,r5,r6){var r7;if((HEAP32[r2+8>>2]|0)!=(r1|0)){return}HEAP8[r2+53|0]=1;if((HEAP32[r2+4>>2]|0)!=(r4|0)){return}HEAP8[r2+52|0]=1;r4=r2+16|0;r1=HEAP32[r4>>2];if((r1|0)==0){HEAP32[r4>>2]=r3;HEAP32[r2+24>>2]=r5;HEAP32[r2+36>>2]=1;if(!((HEAP32[r2+48>>2]|0)==1&(r5|0)==1)){return}HEAP8[r2+54|0]=1;return}if((r1|0)!=(r3|0)){r3=r2+36|0;HEAP32[r3>>2]=HEAP32[r3>>2]+1;HEAP8[r2+54|0]=1;return}r3=r2+24|0;r1=HEAP32[r3>>2];if((r1|0)==2){HEAP32[r3>>2]=r5;r7=r5}else{r7=r1}if(!((HEAP32[r2+48>>2]|0)==1&(r7|0)==1)){return}HEAP8[r2+54|0]=1;return}function _malloc(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89;r2=0;do{if(r1>>>0<245){if(r1>>>0<11){r3=16}else{r3=r1+11&-8}r4=r3>>>3;r5=HEAP32[67936>>2];r6=r5>>>(r4>>>0);if((r6&3|0)!=0){r7=(r6&1^1)+r4|0;r8=r7<<1;r9=67976+(r8<<2)|0;r10=67976+(r8+2<<2)|0;r8=HEAP32[r10>>2];r11=r8+8|0;r12=HEAP32[r11>>2];do{if((r9|0)==(r12|0)){HEAP32[67936>>2]=r5&~(1<<r7)}else{if(r12>>>0<HEAP32[67952>>2]>>>0){_abort()}r13=r12+12|0;if((HEAP32[r13>>2]|0)==(r8|0)){HEAP32[r13>>2]=r9;HEAP32[r10>>2]=r12;break}else{_abort()}}}while(0);r12=r7<<3;HEAP32[r8+4>>2]=r12|3;r10=r8+(r12|4)|0;HEAP32[r10>>2]=HEAP32[r10>>2]|1;r14=r11;return r14}if(r3>>>0<=HEAP32[67944>>2]>>>0){r15=r3;break}if((r6|0)!=0){r10=2<<r4;r12=r6<<r4&(r10|-r10);r10=(r12&-r12)-1|0;r12=r10>>>12&16;r9=r10>>>(r12>>>0);r10=r9>>>5&8;r13=r9>>>(r10>>>0);r9=r13>>>2&4;r16=r13>>>(r9>>>0);r13=r16>>>1&2;r17=r16>>>(r13>>>0);r16=r17>>>1&1;r18=(r10|r12|r9|r13|r16)+(r17>>>(r16>>>0))|0;r16=r18<<1;r17=67976+(r16<<2)|0;r13=67976+(r16+2<<2)|0;r16=HEAP32[r13>>2];r9=r16+8|0;r12=HEAP32[r9>>2];do{if((r17|0)==(r12|0)){HEAP32[67936>>2]=r5&~(1<<r18)}else{if(r12>>>0<HEAP32[67952>>2]>>>0){_abort()}r10=r12+12|0;if((HEAP32[r10>>2]|0)==(r16|0)){HEAP32[r10>>2]=r17;HEAP32[r13>>2]=r12;break}else{_abort()}}}while(0);r12=r18<<3;r13=r12-r3|0;HEAP32[r16+4>>2]=r3|3;r17=r16;r5=r17+r3|0;HEAP32[r17+(r3|4)>>2]=r13|1;HEAP32[r17+r12>>2]=r13;r12=HEAP32[67944>>2];if((r12|0)!=0){r17=HEAP32[67956>>2];r4=r12>>>3;r12=r4<<1;r6=67976+(r12<<2)|0;r11=HEAP32[67936>>2];r8=1<<r4;do{if((r11&r8|0)==0){HEAP32[67936>>2]=r11|r8;r19=r6;r20=67976+(r12+2<<2)|0}else{r4=67976+(r12+2<<2)|0;r7=HEAP32[r4>>2];if(r7>>>0>=HEAP32[67952>>2]>>>0){r19=r7;r20=r4;break}_abort()}}while(0);HEAP32[r20>>2]=r17;HEAP32[r19+12>>2]=r17;HEAP32[r17+8>>2]=r19;HEAP32[r17+12>>2]=r6}HEAP32[67944>>2]=r13;HEAP32[67956>>2]=r5;r14=r9;return r14}r12=HEAP32[67940>>2];if((r12|0)==0){r15=r3;break}r8=(r12&-r12)-1|0;r12=r8>>>12&16;r11=r8>>>(r12>>>0);r8=r11>>>5&8;r16=r11>>>(r8>>>0);r11=r16>>>2&4;r18=r16>>>(r11>>>0);r16=r18>>>1&2;r4=r18>>>(r16>>>0);r18=r4>>>1&1;r7=HEAP32[68240+((r8|r12|r11|r16|r18)+(r4>>>(r18>>>0))<<2)>>2];r18=r7;r4=r7;r16=(HEAP32[r7+4>>2]&-8)-r3|0;while(1){r7=HEAP32[r18+16>>2];if((r7|0)==0){r11=HEAP32[r18+20>>2];if((r11|0)==0){break}else{r21=r11}}else{r21=r7}r7=(HEAP32[r21+4>>2]&-8)-r3|0;r11=r7>>>0<r16>>>0;r18=r21;r4=r11?r21:r4;r16=r11?r7:r16}r18=r4;r9=HEAP32[67952>>2];if(r18>>>0<r9>>>0){_abort()}r5=r18+r3|0;r13=r5;if(r18>>>0>=r5>>>0){_abort()}r5=HEAP32[r4+24>>2];r6=HEAP32[r4+12>>2];do{if((r6|0)==(r4|0)){r17=r4+20|0;r7=HEAP32[r17>>2];if((r7|0)==0){r11=r4+16|0;r12=HEAP32[r11>>2];if((r12|0)==0){r22=0;break}else{r23=r12;r24=r11}}else{r23=r7;r24=r17}while(1){r17=r23+20|0;r7=HEAP32[r17>>2];if((r7|0)!=0){r23=r7;r24=r17;continue}r17=r23+16|0;r7=HEAP32[r17>>2];if((r7|0)==0){break}else{r23=r7;r24=r17}}if(r24>>>0<r9>>>0){_abort()}else{HEAP32[r24>>2]=0;r22=r23;break}}else{r17=HEAP32[r4+8>>2];if(r17>>>0<r9>>>0){_abort()}r7=r17+12|0;if((HEAP32[r7>>2]|0)!=(r4|0)){_abort()}r11=r6+8|0;if((HEAP32[r11>>2]|0)==(r4|0)){HEAP32[r7>>2]=r6;HEAP32[r11>>2]=r17;r22=r6;break}else{_abort()}}}while(0);L78:do{if((r5|0)!=0){r6=HEAP32[r4+28>>2];r9=68240+(r6<<2)|0;do{if((r4|0)==(HEAP32[r9>>2]|0)){HEAP32[r9>>2]=r22;if((r22|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r6);break L78}else{if(r5>>>0<HEAP32[67952>>2]>>>0){_abort()}r17=r5+16|0;if((HEAP32[r17>>2]|0)==(r4|0)){HEAP32[r17>>2]=r22}else{HEAP32[r5+20>>2]=r22}if((r22|0)==0){break L78}}}while(0);if(r22>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r22+24>>2]=r5;r6=HEAP32[r4+16>>2];do{if((r6|0)!=0){if(r6>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r22+16>>2]=r6;HEAP32[r6+24>>2]=r22;break}}}while(0);r6=HEAP32[r4+20>>2];if((r6|0)==0){break}if(r6>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r22+20>>2]=r6;HEAP32[r6+24>>2]=r22;break}}}while(0);if(r16>>>0<16){r5=r16+r3|0;HEAP32[r4+4>>2]=r5|3;r6=r18+(r5+4)|0;HEAP32[r6>>2]=HEAP32[r6>>2]|1}else{HEAP32[r4+4>>2]=r3|3;HEAP32[r18+(r3|4)>>2]=r16|1;HEAP32[r18+(r16+r3)>>2]=r16;r6=HEAP32[67944>>2];if((r6|0)!=0){r5=HEAP32[67956>>2];r9=r6>>>3;r6=r9<<1;r17=67976+(r6<<2)|0;r11=HEAP32[67936>>2];r7=1<<r9;do{if((r11&r7|0)==0){HEAP32[67936>>2]=r11|r7;r25=r17;r26=67976+(r6+2<<2)|0}else{r9=67976+(r6+2<<2)|0;r12=HEAP32[r9>>2];if(r12>>>0>=HEAP32[67952>>2]>>>0){r25=r12;r26=r9;break}_abort()}}while(0);HEAP32[r26>>2]=r5;HEAP32[r25+12>>2]=r5;HEAP32[r5+8>>2]=r25;HEAP32[r5+12>>2]=r17}HEAP32[67944>>2]=r16;HEAP32[67956>>2]=r13}r14=r4+8|0;return r14}else{if(r1>>>0>4294967231){r15=-1;break}r6=r1+11|0;r7=r6&-8;r11=HEAP32[67940>>2];if((r11|0)==0){r15=r7;break}r18=-r7|0;r9=r6>>>8;do{if((r9|0)==0){r27=0}else{if(r7>>>0>16777215){r27=31;break}r6=(r9+1048320|0)>>>16&8;r12=r9<<r6;r8=(r12+520192|0)>>>16&4;r10=r12<<r8;r12=(r10+245760|0)>>>16&2;r28=14-(r8|r6|r12)+(r10<<r12>>>15)|0;r27=r7>>>((r28+7|0)>>>0)&1|r28<<1}}while(0);r9=HEAP32[68240+(r27<<2)>>2];L126:do{if((r9|0)==0){r29=0;r30=r18;r31=0}else{if((r27|0)==31){r32=0}else{r32=25-(r27>>>1)|0}r4=0;r13=r18;r16=r9;r17=r7<<r32;r5=0;while(1){r28=HEAP32[r16+4>>2]&-8;r12=r28-r7|0;if(r12>>>0<r13>>>0){if((r28|0)==(r7|0)){r29=r16;r30=r12;r31=r16;break L126}else{r33=r16;r34=r12}}else{r33=r4;r34=r13}r12=HEAP32[r16+20>>2];r28=HEAP32[r16+16+(r17>>>31<<2)>>2];r10=(r12|0)==0|(r12|0)==(r28|0)?r5:r12;if((r28|0)==0){r29=r33;r30=r34;r31=r10;break}else{r4=r33;r13=r34;r16=r28;r17=r17<<1;r5=r10}}}}while(0);if((r31|0)==0&(r29|0)==0){r9=2<<r27;r18=r11&(r9|-r9);if((r18|0)==0){r15=r7;break}r9=(r18&-r18)-1|0;r18=r9>>>12&16;r5=r9>>>(r18>>>0);r9=r5>>>5&8;r17=r5>>>(r9>>>0);r5=r17>>>2&4;r16=r17>>>(r5>>>0);r17=r16>>>1&2;r13=r16>>>(r17>>>0);r16=r13>>>1&1;r35=HEAP32[68240+((r9|r18|r5|r17|r16)+(r13>>>(r16>>>0))<<2)>>2]}else{r35=r31}if((r35|0)==0){r36=r30;r37=r29}else{r16=r35;r13=r30;r17=r29;while(1){r5=(HEAP32[r16+4>>2]&-8)-r7|0;r18=r5>>>0<r13>>>0;r9=r18?r5:r13;r5=r18?r16:r17;r18=HEAP32[r16+16>>2];if((r18|0)!=0){r16=r18;r13=r9;r17=r5;continue}r18=HEAP32[r16+20>>2];if((r18|0)==0){r36=r9;r37=r5;break}else{r16=r18;r13=r9;r17=r5}}}if((r37|0)==0){r15=r7;break}if(r36>>>0>=(HEAP32[67944>>2]-r7|0)>>>0){r15=r7;break}r17=r37;r13=HEAP32[67952>>2];if(r17>>>0<r13>>>0){_abort()}r16=r17+r7|0;r11=r16;if(r17>>>0>=r16>>>0){_abort()}r5=HEAP32[r37+24>>2];r9=HEAP32[r37+12>>2];do{if((r9|0)==(r37|0)){r18=r37+20|0;r4=HEAP32[r18>>2];if((r4|0)==0){r10=r37+16|0;r28=HEAP32[r10>>2];if((r28|0)==0){r38=0;break}else{r39=r28;r40=r10}}else{r39=r4;r40=r18}while(1){r18=r39+20|0;r4=HEAP32[r18>>2];if((r4|0)!=0){r39=r4;r40=r18;continue}r18=r39+16|0;r4=HEAP32[r18>>2];if((r4|0)==0){break}else{r39=r4;r40=r18}}if(r40>>>0<r13>>>0){_abort()}else{HEAP32[r40>>2]=0;r38=r39;break}}else{r18=HEAP32[r37+8>>2];if(r18>>>0<r13>>>0){_abort()}r4=r18+12|0;if((HEAP32[r4>>2]|0)!=(r37|0)){_abort()}r10=r9+8|0;if((HEAP32[r10>>2]|0)==(r37|0)){HEAP32[r4>>2]=r9;HEAP32[r10>>2]=r18;r38=r9;break}else{_abort()}}}while(0);L176:do{if((r5|0)!=0){r9=HEAP32[r37+28>>2];r13=68240+(r9<<2)|0;do{if((r37|0)==(HEAP32[r13>>2]|0)){HEAP32[r13>>2]=r38;if((r38|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r9);break L176}else{if(r5>>>0<HEAP32[67952>>2]>>>0){_abort()}r18=r5+16|0;if((HEAP32[r18>>2]|0)==(r37|0)){HEAP32[r18>>2]=r38}else{HEAP32[r5+20>>2]=r38}if((r38|0)==0){break L176}}}while(0);if(r38>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r38+24>>2]=r5;r9=HEAP32[r37+16>>2];do{if((r9|0)!=0){if(r9>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r38+16>>2]=r9;HEAP32[r9+24>>2]=r38;break}}}while(0);r9=HEAP32[r37+20>>2];if((r9|0)==0){break}if(r9>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r38+20>>2]=r9;HEAP32[r9+24>>2]=r38;break}}}while(0);L204:do{if(r36>>>0<16){r5=r36+r7|0;HEAP32[r37+4>>2]=r5|3;r9=r17+(r5+4)|0;HEAP32[r9>>2]=HEAP32[r9>>2]|1}else{HEAP32[r37+4>>2]=r7|3;HEAP32[r17+(r7|4)>>2]=r36|1;HEAP32[r17+(r36+r7)>>2]=r36;r9=r36>>>3;if(r36>>>0<256){r5=r9<<1;r13=67976+(r5<<2)|0;r18=HEAP32[67936>>2];r10=1<<r9;do{if((r18&r10|0)==0){HEAP32[67936>>2]=r18|r10;r41=r13;r42=67976+(r5+2<<2)|0}else{r9=67976+(r5+2<<2)|0;r4=HEAP32[r9>>2];if(r4>>>0>=HEAP32[67952>>2]>>>0){r41=r4;r42=r9;break}_abort()}}while(0);HEAP32[r42>>2]=r11;HEAP32[r41+12>>2]=r11;HEAP32[r17+(r7+8)>>2]=r41;HEAP32[r17+(r7+12)>>2]=r13;break}r5=r16;r10=r36>>>8;do{if((r10|0)==0){r43=0}else{if(r36>>>0>16777215){r43=31;break}r18=(r10+1048320|0)>>>16&8;r9=r10<<r18;r4=(r9+520192|0)>>>16&4;r28=r9<<r4;r9=(r28+245760|0)>>>16&2;r12=14-(r4|r18|r9)+(r28<<r9>>>15)|0;r43=r36>>>((r12+7|0)>>>0)&1|r12<<1}}while(0);r10=68240+(r43<<2)|0;HEAP32[r17+(r7+28)>>2]=r43;HEAP32[r17+(r7+20)>>2]=0;HEAP32[r17+(r7+16)>>2]=0;r13=HEAP32[67940>>2];r12=1<<r43;if((r13&r12|0)==0){HEAP32[67940>>2]=r13|r12;HEAP32[r10>>2]=r5;HEAP32[r17+(r7+24)>>2]=r10;HEAP32[r17+(r7+12)>>2]=r5;HEAP32[r17+(r7+8)>>2]=r5;break}r12=HEAP32[r10>>2];if((r43|0)==31){r44=0}else{r44=25-(r43>>>1)|0}L225:do{if((HEAP32[r12+4>>2]&-8|0)==(r36|0)){r45=r12}else{r10=r12;r13=r36<<r44;while(1){r46=r10+16+(r13>>>31<<2)|0;r9=HEAP32[r46>>2];if((r9|0)==0){break}if((HEAP32[r9+4>>2]&-8|0)==(r36|0)){r45=r9;break L225}else{r10=r9;r13=r13<<1}}if(r46>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r46>>2]=r5;HEAP32[r17+(r7+24)>>2]=r10;HEAP32[r17+(r7+12)>>2]=r5;HEAP32[r17+(r7+8)>>2]=r5;break L204}}}while(0);r12=r45+8|0;r13=HEAP32[r12>>2];r9=HEAP32[67952>>2];if(r45>>>0<r9>>>0){_abort()}if(r13>>>0<r9>>>0){_abort()}else{HEAP32[r13+12>>2]=r5;HEAP32[r12>>2]=r5;HEAP32[r17+(r7+8)>>2]=r13;HEAP32[r17+(r7+12)>>2]=r45;HEAP32[r17+(r7+24)>>2]=0;break}}}while(0);r14=r37+8|0;return r14}}while(0);r37=HEAP32[67944>>2];if(r15>>>0<=r37>>>0){r45=r37-r15|0;r46=HEAP32[67956>>2];if(r45>>>0>15){r36=r46;HEAP32[67956>>2]=r36+r15;HEAP32[67944>>2]=r45;HEAP32[r36+(r15+4)>>2]=r45|1;HEAP32[r36+r37>>2]=r45;HEAP32[r46+4>>2]=r15|3}else{HEAP32[67944>>2]=0;HEAP32[67956>>2]=0;HEAP32[r46+4>>2]=r37|3;r45=r46+(r37+4)|0;HEAP32[r45>>2]=HEAP32[r45>>2]|1}r14=r46+8|0;return r14}r46=HEAP32[67948>>2];if(r15>>>0<r46>>>0){r45=r46-r15|0;HEAP32[67948>>2]=r45;r46=HEAP32[67960>>2];r37=r46;HEAP32[67960>>2]=r37+r15;HEAP32[r37+(r15+4)>>2]=r45|1;HEAP32[r46+4>>2]=r15|3;r14=r46+8|0;return r14}do{if((HEAP32[67856>>2]|0)==0){r46=_sysconf(30);if((r46-1&r46|0)==0){HEAP32[67864>>2]=r46;HEAP32[67860>>2]=r46;HEAP32[67868>>2]=-1;HEAP32[67872>>2]=-1;HEAP32[67876>>2]=0;HEAP32[68380>>2]=0;r46=_time(0)&-16^1431655768;HEAP32[67856>>2]=r46;break}else{_abort()}}}while(0);r46=r15+48|0;r45=HEAP32[67864>>2];r37=r15+47|0;r36=r45+r37|0;r44=-r45|0;r45=r36&r44;if(r45>>>0<=r15>>>0){r14=0;return r14}r43=HEAP32[68376>>2];do{if((r43|0)!=0){r41=HEAP32[68368>>2];r42=r41+r45|0;if(r42>>>0<=r41>>>0|r42>>>0>r43>>>0){r14=0}else{break}return r14}}while(0);L269:do{if((HEAP32[68380>>2]&4|0)==0){r43=HEAP32[67960>>2];L271:do{if((r43|0)==0){r2=182}else{r42=r43;r41=68384;while(1){r47=r41|0;r38=HEAP32[r47>>2];if(r38>>>0<=r42>>>0){r48=r41+4|0;if((r38+HEAP32[r48>>2]|0)>>>0>r42>>>0){break}}r38=HEAP32[r41+8>>2];if((r38|0)==0){r2=182;break L271}else{r41=r38}}if((r41|0)==0){r2=182;break}r42=r36-HEAP32[67948>>2]&r44;if(r42>>>0>=2147483647){r49=0;break}r5=_sbrk(r42);r38=(r5|0)==(HEAP32[r47>>2]+HEAP32[r48>>2]|0);r50=r38?r5:-1;r51=r38?r42:0;r52=r5;r53=r42;r2=191}}while(0);do{if(r2==182){r43=_sbrk(0);if((r43|0)==-1){r49=0;break}r42=r43;r5=HEAP32[67860>>2];r38=r5-1|0;if((r38&r42|0)==0){r54=r45}else{r54=r45-r42+(r38+r42&-r5)|0}r5=HEAP32[68368>>2];r42=r5+r54|0;if(!(r54>>>0>r15>>>0&r54>>>0<2147483647)){r49=0;break}r38=HEAP32[68376>>2];if((r38|0)!=0){if(r42>>>0<=r5>>>0|r42>>>0>r38>>>0){r49=0;break}}r38=_sbrk(r54);r42=(r38|0)==(r43|0);r50=r42?r43:-1;r51=r42?r54:0;r52=r38;r53=r54;r2=191}}while(0);L291:do{if(r2==191){r38=-r53|0;if((r50|0)!=-1){r55=r51;r56=r50;r2=202;break L269}do{if((r52|0)!=-1&r53>>>0<2147483647&r53>>>0<r46>>>0){r42=HEAP32[67864>>2];r43=r37-r53+r42&-r42;if(r43>>>0>=2147483647){r57=r53;break}if((_sbrk(r43)|0)==-1){_sbrk(r38);r49=r51;break L291}else{r57=r43+r53|0;break}}else{r57=r53}}while(0);if((r52|0)==-1){r49=r51}else{r55=r57;r56=r52;r2=202;break L269}}}while(0);HEAP32[68380>>2]=HEAP32[68380>>2]|4;r58=r49;r2=199}else{r58=0;r2=199}}while(0);do{if(r2==199){if(r45>>>0>=2147483647){break}r49=_sbrk(r45);r52=_sbrk(0);if(!((r52|0)!=-1&(r49|0)!=-1&r49>>>0<r52>>>0)){break}r57=r52-r49|0;r52=r57>>>0>(r15+40|0)>>>0;if(r52){r55=r52?r57:r58;r56=r49;r2=202}}}while(0);do{if(r2==202){r58=HEAP32[68368>>2]+r55|0;HEAP32[68368>>2]=r58;if(r58>>>0>HEAP32[68372>>2]>>>0){HEAP32[68372>>2]=r58}r58=HEAP32[67960>>2];L311:do{if((r58|0)==0){r45=HEAP32[67952>>2];if((r45|0)==0|r56>>>0<r45>>>0){HEAP32[67952>>2]=r56}HEAP32[68384>>2]=r56;HEAP32[68388>>2]=r55;HEAP32[68396>>2]=0;HEAP32[67972>>2]=HEAP32[67856>>2];HEAP32[67968>>2]=-1;r45=0;while(1){r49=r45<<1;r57=67976+(r49<<2)|0;HEAP32[67976+(r49+3<<2)>>2]=r57;HEAP32[67976+(r49+2<<2)>>2]=r57;r57=r45+1|0;if(r57>>>0<32){r45=r57}else{break}}r45=r56+8|0;if((r45&7|0)==0){r59=0}else{r59=-r45&7}r45=r55-40-r59|0;HEAP32[67960>>2]=r56+r59;HEAP32[67948>>2]=r45;HEAP32[r56+(r59+4)>>2]=r45|1;HEAP32[r56+(r55-36)>>2]=40;HEAP32[67964>>2]=HEAP32[67872>>2]}else{r45=68384;while(1){r60=HEAP32[r45>>2];r61=r45+4|0;r62=HEAP32[r61>>2];if((r56|0)==(r60+r62|0)){r2=214;break}r57=HEAP32[r45+8>>2];if((r57|0)==0){break}else{r45=r57}}do{if(r2==214){if((HEAP32[r45+12>>2]&8|0)!=0){break}r57=r58;if(!(r57>>>0>=r60>>>0&r57>>>0<r56>>>0)){break}HEAP32[r61>>2]=r62+r55;r49=HEAP32[67948>>2]+r55|0;r52=r58+8|0;if((r52&7|0)==0){r63=0}else{r63=-r52&7}r52=r49-r63|0;HEAP32[67960>>2]=r57+r63;HEAP32[67948>>2]=r52;HEAP32[r57+(r63+4)>>2]=r52|1;HEAP32[r57+(r49+4)>>2]=40;HEAP32[67964>>2]=HEAP32[67872>>2];break L311}}while(0);if(r56>>>0<HEAP32[67952>>2]>>>0){HEAP32[67952>>2]=r56}r45=r56+r55|0;r49=68384;while(1){r64=r49|0;if((HEAP32[r64>>2]|0)==(r45|0)){r2=224;break}r57=HEAP32[r49+8>>2];if((r57|0)==0){break}else{r49=r57}}do{if(r2==224){if((HEAP32[r49+12>>2]&8|0)!=0){break}HEAP32[r64>>2]=r56;r45=r49+4|0;HEAP32[r45>>2]=HEAP32[r45>>2]+r55;r45=r56+8|0;if((r45&7|0)==0){r65=0}else{r65=-r45&7}r45=r56+(r55+8)|0;if((r45&7|0)==0){r66=0}else{r66=-r45&7}r45=r56+(r66+r55)|0;r57=r45;r52=r65+r15|0;r51=r56+r52|0;r53=r51;r37=r45-(r56+r65)-r15|0;HEAP32[r56+(r65+4)>>2]=r15|3;L348:do{if((r57|0)==(HEAP32[67960>>2]|0)){r46=HEAP32[67948>>2]+r37|0;HEAP32[67948>>2]=r46;HEAP32[67960>>2]=r53;HEAP32[r56+(r52+4)>>2]=r46|1}else{if((r57|0)==(HEAP32[67956>>2]|0)){r46=HEAP32[67944>>2]+r37|0;HEAP32[67944>>2]=r46;HEAP32[67956>>2]=r53;HEAP32[r56+(r52+4)>>2]=r46|1;HEAP32[r56+(r46+r52)>>2]=r46;break}r46=r55+4|0;r50=HEAP32[r56+(r46+r66)>>2];if((r50&3|0)==1){r54=r50&-8;r48=r50>>>3;L356:do{if(r50>>>0<256){r47=HEAP32[r56+((r66|8)+r55)>>2];r44=HEAP32[r56+(r55+12+r66)>>2];r36=67976+(r48<<1<<2)|0;do{if((r47|0)!=(r36|0)){if(r47>>>0<HEAP32[67952>>2]>>>0){_abort()}if((HEAP32[r47+12>>2]|0)==(r57|0)){break}_abort()}}while(0);if((r44|0)==(r47|0)){HEAP32[67936>>2]=HEAP32[67936>>2]&~(1<<r48);break}do{if((r44|0)==(r36|0)){r67=r44+8|0}else{if(r44>>>0<HEAP32[67952>>2]>>>0){_abort()}r38=r44+8|0;if((HEAP32[r38>>2]|0)==(r57|0)){r67=r38;break}_abort()}}while(0);HEAP32[r47+12>>2]=r44;HEAP32[r67>>2]=r47}else{r36=r45;r38=HEAP32[r56+((r66|24)+r55)>>2];r41=HEAP32[r56+(r55+12+r66)>>2];do{if((r41|0)==(r36|0)){r43=r66|16;r42=r56+(r46+r43)|0;r5=HEAP32[r42>>2];if((r5|0)==0){r39=r56+(r43+r55)|0;r43=HEAP32[r39>>2];if((r43|0)==0){r68=0;break}else{r69=r43;r70=r39}}else{r69=r5;r70=r42}while(1){r42=r69+20|0;r5=HEAP32[r42>>2];if((r5|0)!=0){r69=r5;r70=r42;continue}r42=r69+16|0;r5=HEAP32[r42>>2];if((r5|0)==0){break}else{r69=r5;r70=r42}}if(r70>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r70>>2]=0;r68=r69;break}}else{r42=HEAP32[r56+((r66|8)+r55)>>2];if(r42>>>0<HEAP32[67952>>2]>>>0){_abort()}r5=r42+12|0;if((HEAP32[r5>>2]|0)!=(r36|0)){_abort()}r39=r41+8|0;if((HEAP32[r39>>2]|0)==(r36|0)){HEAP32[r5>>2]=r41;HEAP32[r39>>2]=r42;r68=r41;break}else{_abort()}}}while(0);if((r38|0)==0){break}r41=HEAP32[r56+(r55+28+r66)>>2];r47=68240+(r41<<2)|0;do{if((r36|0)==(HEAP32[r47>>2]|0)){HEAP32[r47>>2]=r68;if((r68|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r41);break L356}else{if(r38>>>0<HEAP32[67952>>2]>>>0){_abort()}r44=r38+16|0;if((HEAP32[r44>>2]|0)==(r36|0)){HEAP32[r44>>2]=r68}else{HEAP32[r38+20>>2]=r68}if((r68|0)==0){break L356}}}while(0);if(r68>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r68+24>>2]=r38;r36=r66|16;r41=HEAP32[r56+(r36+r55)>>2];do{if((r41|0)!=0){if(r41>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r68+16>>2]=r41;HEAP32[r41+24>>2]=r68;break}}}while(0);r41=HEAP32[r56+(r46+r36)>>2];if((r41|0)==0){break}if(r41>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r68+20>>2]=r41;HEAP32[r41+24>>2]=r68;break}}}while(0);r71=r56+((r54|r66)+r55)|0;r72=r54+r37|0}else{r71=r57;r72=r37}r46=r71+4|0;HEAP32[r46>>2]=HEAP32[r46>>2]&-2;HEAP32[r56+(r52+4)>>2]=r72|1;HEAP32[r56+(r72+r52)>>2]=r72;r46=r72>>>3;if(r72>>>0<256){r48=r46<<1;r50=67976+(r48<<2)|0;r41=HEAP32[67936>>2];r38=1<<r46;do{if((r41&r38|0)==0){HEAP32[67936>>2]=r41|r38;r73=r50;r74=67976+(r48+2<<2)|0}else{r46=67976+(r48+2<<2)|0;r47=HEAP32[r46>>2];if(r47>>>0>=HEAP32[67952>>2]>>>0){r73=r47;r74=r46;break}_abort()}}while(0);HEAP32[r74>>2]=r53;HEAP32[r73+12>>2]=r53;HEAP32[r56+(r52+8)>>2]=r73;HEAP32[r56+(r52+12)>>2]=r50;break}r48=r51;r38=r72>>>8;do{if((r38|0)==0){r75=0}else{if(r72>>>0>16777215){r75=31;break}r41=(r38+1048320|0)>>>16&8;r54=r38<<r41;r46=(r54+520192|0)>>>16&4;r47=r54<<r46;r54=(r47+245760|0)>>>16&2;r44=14-(r46|r41|r54)+(r47<<r54>>>15)|0;r75=r72>>>((r44+7|0)>>>0)&1|r44<<1}}while(0);r38=68240+(r75<<2)|0;HEAP32[r56+(r52+28)>>2]=r75;HEAP32[r56+(r52+20)>>2]=0;HEAP32[r56+(r52+16)>>2]=0;r50=HEAP32[67940>>2];r44=1<<r75;if((r50&r44|0)==0){HEAP32[67940>>2]=r50|r44;HEAP32[r38>>2]=r48;HEAP32[r56+(r52+24)>>2]=r38;HEAP32[r56+(r52+12)>>2]=r48;HEAP32[r56+(r52+8)>>2]=r48;break}r44=HEAP32[r38>>2];if((r75|0)==31){r76=0}else{r76=25-(r75>>>1)|0}L445:do{if((HEAP32[r44+4>>2]&-8|0)==(r72|0)){r77=r44}else{r38=r44;r50=r72<<r76;while(1){r78=r38+16+(r50>>>31<<2)|0;r54=HEAP32[r78>>2];if((r54|0)==0){break}if((HEAP32[r54+4>>2]&-8|0)==(r72|0)){r77=r54;break L445}else{r38=r54;r50=r50<<1}}if(r78>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r78>>2]=r48;HEAP32[r56+(r52+24)>>2]=r38;HEAP32[r56+(r52+12)>>2]=r48;HEAP32[r56+(r52+8)>>2]=r48;break L348}}}while(0);r44=r77+8|0;r50=HEAP32[r44>>2];r36=HEAP32[67952>>2];if(r77>>>0<r36>>>0){_abort()}if(r50>>>0<r36>>>0){_abort()}else{HEAP32[r50+12>>2]=r48;HEAP32[r44>>2]=r48;HEAP32[r56+(r52+8)>>2]=r50;HEAP32[r56+(r52+12)>>2]=r77;HEAP32[r56+(r52+24)>>2]=0;break}}}while(0);r14=r56+(r65|8)|0;return r14}}while(0);r49=r58;r52=68384;while(1){r79=HEAP32[r52>>2];if(r79>>>0<=r49>>>0){r80=HEAP32[r52+4>>2];r81=r79+r80|0;if(r81>>>0>r49>>>0){break}}r52=HEAP32[r52+8>>2]}r52=r79+(r80-39)|0;if((r52&7|0)==0){r82=0}else{r82=-r52&7}r52=r79+(r80-47+r82)|0;r51=r52>>>0<(r58+16|0)>>>0?r49:r52;r52=r51+8|0;r53=r56+8|0;if((r53&7|0)==0){r83=0}else{r83=-r53&7}r53=r55-40-r83|0;HEAP32[67960>>2]=r56+r83;HEAP32[67948>>2]=r53;HEAP32[r56+(r83+4)>>2]=r53|1;HEAP32[r56+(r55-36)>>2]=40;HEAP32[67964>>2]=HEAP32[67872>>2];HEAP32[r51+4>>2]=27;HEAP32[r52>>2]=HEAP32[68384>>2];HEAP32[r52+4>>2]=HEAP32[68388>>2];HEAP32[r52+8>>2]=HEAP32[68392>>2];HEAP32[r52+12>>2]=HEAP32[68396>>2];HEAP32[68384>>2]=r56;HEAP32[68388>>2]=r55;HEAP32[68396>>2]=0;HEAP32[68392>>2]=r52;r52=r51+28|0;HEAP32[r52>>2]=7;if((r51+32|0)>>>0<r81>>>0){r53=r52;while(1){r52=r53+4|0;HEAP32[r52>>2]=7;if((r53+8|0)>>>0<r81>>>0){r53=r52}else{break}}}if((r51|0)==(r49|0)){break}r53=r51-r58|0;r52=r49+(r53+4)|0;HEAP32[r52>>2]=HEAP32[r52>>2]&-2;HEAP32[r58+4>>2]=r53|1;HEAP32[r49+r53>>2]=r53;r52=r53>>>3;if(r53>>>0<256){r37=r52<<1;r57=67976+(r37<<2)|0;r45=HEAP32[67936>>2];r10=1<<r52;do{if((r45&r10|0)==0){HEAP32[67936>>2]=r45|r10;r84=r57;r85=67976+(r37+2<<2)|0}else{r52=67976+(r37+2<<2)|0;r50=HEAP32[r52>>2];if(r50>>>0>=HEAP32[67952>>2]>>>0){r84=r50;r85=r52;break}_abort()}}while(0);HEAP32[r85>>2]=r58;HEAP32[r84+12>>2]=r58;HEAP32[r58+8>>2]=r84;HEAP32[r58+12>>2]=r57;break}r37=r58;r10=r53>>>8;do{if((r10|0)==0){r86=0}else{if(r53>>>0>16777215){r86=31;break}r45=(r10+1048320|0)>>>16&8;r49=r10<<r45;r51=(r49+520192|0)>>>16&4;r52=r49<<r51;r49=(r52+245760|0)>>>16&2;r50=14-(r51|r45|r49)+(r52<<r49>>>15)|0;r86=r53>>>((r50+7|0)>>>0)&1|r50<<1}}while(0);r10=68240+(r86<<2)|0;HEAP32[r58+28>>2]=r86;HEAP32[r58+20>>2]=0;HEAP32[r58+16>>2]=0;r57=HEAP32[67940>>2];r50=1<<r86;if((r57&r50|0)==0){HEAP32[67940>>2]=r57|r50;HEAP32[r10>>2]=r37;HEAP32[r58+24>>2]=r10;HEAP32[r58+12>>2]=r58;HEAP32[r58+8>>2]=r58;break}r50=HEAP32[r10>>2];if((r86|0)==31){r87=0}else{r87=25-(r86>>>1)|0}L499:do{if((HEAP32[r50+4>>2]&-8|0)==(r53|0)){r88=r50}else{r10=r50;r57=r53<<r87;while(1){r89=r10+16+(r57>>>31<<2)|0;r49=HEAP32[r89>>2];if((r49|0)==0){break}if((HEAP32[r49+4>>2]&-8|0)==(r53|0)){r88=r49;break L499}else{r10=r49;r57=r57<<1}}if(r89>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r89>>2]=r37;HEAP32[r58+24>>2]=r10;HEAP32[r58+12>>2]=r58;HEAP32[r58+8>>2]=r58;break L311}}}while(0);r53=r88+8|0;r50=HEAP32[r53>>2];r57=HEAP32[67952>>2];if(r88>>>0<r57>>>0){_abort()}if(r50>>>0<r57>>>0){_abort()}else{HEAP32[r50+12>>2]=r37;HEAP32[r53>>2]=r37;HEAP32[r58+8>>2]=r50;HEAP32[r58+12>>2]=r88;HEAP32[r58+24>>2]=0;break}}}while(0);r58=HEAP32[67948>>2];if(r58>>>0<=r15>>>0){break}r50=r58-r15|0;HEAP32[67948>>2]=r50;r58=HEAP32[67960>>2];r53=r58;HEAP32[67960>>2]=r53+r15;HEAP32[r53+(r15+4)>>2]=r50|1;HEAP32[r58+4>>2]=r15|3;r14=r58+8|0;return r14}}while(0);r15=___errno_location();HEAP32[r15>>2]=12;r14=0;return r14}function _free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40;if((r1|0)==0){return}r2=r1-8|0;r3=r2;r4=HEAP32[67952>>2];if(r2>>>0<r4>>>0){_abort()}r5=HEAP32[r1-4>>2];r6=r5&3;if((r6|0)==1){_abort()}r7=r5&-8;r8=r1+(r7-8)|0;r9=r8;L10:do{if((r5&1|0)==0){r10=HEAP32[r2>>2];if((r6|0)==0){return}r11=-8-r10|0;r12=r1+r11|0;r13=r12;r14=r10+r7|0;if(r12>>>0<r4>>>0){_abort()}if((r13|0)==(HEAP32[67956>>2]|0)){r15=r1+(r7-4)|0;if((HEAP32[r15>>2]&3|0)!=3){r16=r13;r17=r14;break}HEAP32[67944>>2]=r14;HEAP32[r15>>2]=HEAP32[r15>>2]&-2;HEAP32[r1+(r11+4)>>2]=r14|1;HEAP32[r8>>2]=r14;return}r15=r10>>>3;if(r10>>>0<256){r10=HEAP32[r1+(r11+8)>>2];r18=HEAP32[r1+(r11+12)>>2];r19=67976+(r15<<1<<2)|0;do{if((r10|0)!=(r19|0)){if(r10>>>0<r4>>>0){_abort()}if((HEAP32[r10+12>>2]|0)==(r13|0)){break}_abort()}}while(0);if((r18|0)==(r10|0)){HEAP32[67936>>2]=HEAP32[67936>>2]&~(1<<r15);r16=r13;r17=r14;break}do{if((r18|0)==(r19|0)){r20=r18+8|0}else{if(r18>>>0<r4>>>0){_abort()}r21=r18+8|0;if((HEAP32[r21>>2]|0)==(r13|0)){r20=r21;break}_abort()}}while(0);HEAP32[r10+12>>2]=r18;HEAP32[r20>>2]=r10;r16=r13;r17=r14;break}r19=r12;r15=HEAP32[r1+(r11+24)>>2];r21=HEAP32[r1+(r11+12)>>2];do{if((r21|0)==(r19|0)){r22=r1+(r11+20)|0;r23=HEAP32[r22>>2];if((r23|0)==0){r24=r1+(r11+16)|0;r25=HEAP32[r24>>2];if((r25|0)==0){r26=0;break}else{r27=r25;r28=r24}}else{r27=r23;r28=r22}while(1){r22=r27+20|0;r23=HEAP32[r22>>2];if((r23|0)!=0){r27=r23;r28=r22;continue}r22=r27+16|0;r23=HEAP32[r22>>2];if((r23|0)==0){break}else{r27=r23;r28=r22}}if(r28>>>0<r4>>>0){_abort()}else{HEAP32[r28>>2]=0;r26=r27;break}}else{r22=HEAP32[r1+(r11+8)>>2];if(r22>>>0<r4>>>0){_abort()}r23=r22+12|0;if((HEAP32[r23>>2]|0)!=(r19|0)){_abort()}r24=r21+8|0;if((HEAP32[r24>>2]|0)==(r19|0)){HEAP32[r23>>2]=r21;HEAP32[r24>>2]=r22;r26=r21;break}else{_abort()}}}while(0);if((r15|0)==0){r16=r13;r17=r14;break}r21=HEAP32[r1+(r11+28)>>2];r12=68240+(r21<<2)|0;do{if((r19|0)==(HEAP32[r12>>2]|0)){HEAP32[r12>>2]=r26;if((r26|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r21);r16=r13;r17=r14;break L10}else{if(r15>>>0<HEAP32[67952>>2]>>>0){_abort()}r10=r15+16|0;if((HEAP32[r10>>2]|0)==(r19|0)){HEAP32[r10>>2]=r26}else{HEAP32[r15+20>>2]=r26}if((r26|0)==0){r16=r13;r17=r14;break L10}}}while(0);if(r26>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r26+24>>2]=r15;r19=HEAP32[r1+(r11+16)>>2];do{if((r19|0)!=0){if(r19>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r26+16>>2]=r19;HEAP32[r19+24>>2]=r26;break}}}while(0);r19=HEAP32[r1+(r11+20)>>2];if((r19|0)==0){r16=r13;r17=r14;break}if(r19>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r26+20>>2]=r19;HEAP32[r19+24>>2]=r26;r16=r13;r17=r14;break}}else{r16=r3;r17=r7}}while(0);r3=r16;if(r3>>>0>=r8>>>0){_abort()}r26=r1+(r7-4)|0;r4=HEAP32[r26>>2];if((r4&1|0)==0){_abort()}do{if((r4&2|0)==0){if((r9|0)==(HEAP32[67960>>2]|0)){r27=HEAP32[67948>>2]+r17|0;HEAP32[67948>>2]=r27;HEAP32[67960>>2]=r16;HEAP32[r16+4>>2]=r27|1;if((r16|0)!=(HEAP32[67956>>2]|0)){return}HEAP32[67956>>2]=0;HEAP32[67944>>2]=0;return}if((r9|0)==(HEAP32[67956>>2]|0)){r27=HEAP32[67944>>2]+r17|0;HEAP32[67944>>2]=r27;HEAP32[67956>>2]=r16;HEAP32[r16+4>>2]=r27|1;HEAP32[r3+r27>>2]=r27;return}r27=(r4&-8)+r17|0;r28=r4>>>3;L113:do{if(r4>>>0<256){r20=HEAP32[r1+r7>>2];r6=HEAP32[r1+(r7|4)>>2];r2=67976+(r28<<1<<2)|0;do{if((r20|0)!=(r2|0)){if(r20>>>0<HEAP32[67952>>2]>>>0){_abort()}if((HEAP32[r20+12>>2]|0)==(r9|0)){break}_abort()}}while(0);if((r6|0)==(r20|0)){HEAP32[67936>>2]=HEAP32[67936>>2]&~(1<<r28);break}do{if((r6|0)==(r2|0)){r29=r6+8|0}else{if(r6>>>0<HEAP32[67952>>2]>>>0){_abort()}r5=r6+8|0;if((HEAP32[r5>>2]|0)==(r9|0)){r29=r5;break}_abort()}}while(0);HEAP32[r20+12>>2]=r6;HEAP32[r29>>2]=r20}else{r2=r8;r5=HEAP32[r1+(r7+16)>>2];r19=HEAP32[r1+(r7|4)>>2];do{if((r19|0)==(r2|0)){r15=r1+(r7+12)|0;r21=HEAP32[r15>>2];if((r21|0)==0){r12=r1+(r7+8)|0;r10=HEAP32[r12>>2];if((r10|0)==0){r30=0;break}else{r31=r10;r32=r12}}else{r31=r21;r32=r15}while(1){r15=r31+20|0;r21=HEAP32[r15>>2];if((r21|0)!=0){r31=r21;r32=r15;continue}r15=r31+16|0;r21=HEAP32[r15>>2];if((r21|0)==0){break}else{r31=r21;r32=r15}}if(r32>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r32>>2]=0;r30=r31;break}}else{r15=HEAP32[r1+r7>>2];if(r15>>>0<HEAP32[67952>>2]>>>0){_abort()}r21=r15+12|0;if((HEAP32[r21>>2]|0)!=(r2|0)){_abort()}r12=r19+8|0;if((HEAP32[r12>>2]|0)==(r2|0)){HEAP32[r21>>2]=r19;HEAP32[r12>>2]=r15;r30=r19;break}else{_abort()}}}while(0);if((r5|0)==0){break}r19=HEAP32[r1+(r7+20)>>2];r20=68240+(r19<<2)|0;do{if((r2|0)==(HEAP32[r20>>2]|0)){HEAP32[r20>>2]=r30;if((r30|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r19);break L113}else{if(r5>>>0<HEAP32[67952>>2]>>>0){_abort()}r6=r5+16|0;if((HEAP32[r6>>2]|0)==(r2|0)){HEAP32[r6>>2]=r30}else{HEAP32[r5+20>>2]=r30}if((r30|0)==0){break L113}}}while(0);if(r30>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r30+24>>2]=r5;r2=HEAP32[r1+(r7+8)>>2];do{if((r2|0)!=0){if(r2>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r30+16>>2]=r2;HEAP32[r2+24>>2]=r30;break}}}while(0);r2=HEAP32[r1+(r7+12)>>2];if((r2|0)==0){break}if(r2>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r30+20>>2]=r2;HEAP32[r2+24>>2]=r30;break}}}while(0);HEAP32[r16+4>>2]=r27|1;HEAP32[r3+r27>>2]=r27;if((r16|0)!=(HEAP32[67956>>2]|0)){r33=r27;break}HEAP32[67944>>2]=r27;return}else{HEAP32[r26>>2]=r4&-2;HEAP32[r16+4>>2]=r17|1;HEAP32[r3+r17>>2]=r17;r33=r17}}while(0);r17=r33>>>3;if(r33>>>0<256){r3=r17<<1;r4=67976+(r3<<2)|0;r26=HEAP32[67936>>2];r30=1<<r17;do{if((r26&r30|0)==0){HEAP32[67936>>2]=r26|r30;r34=r4;r35=67976+(r3+2<<2)|0}else{r17=67976+(r3+2<<2)|0;r7=HEAP32[r17>>2];if(r7>>>0>=HEAP32[67952>>2]>>>0){r34=r7;r35=r17;break}_abort()}}while(0);HEAP32[r35>>2]=r16;HEAP32[r34+12>>2]=r16;HEAP32[r16+8>>2]=r34;HEAP32[r16+12>>2]=r4;return}r4=r16;r34=r33>>>8;do{if((r34|0)==0){r36=0}else{if(r33>>>0>16777215){r36=31;break}r35=(r34+1048320|0)>>>16&8;r3=r34<<r35;r30=(r3+520192|0)>>>16&4;r26=r3<<r30;r3=(r26+245760|0)>>>16&2;r17=14-(r30|r35|r3)+(r26<<r3>>>15)|0;r36=r33>>>((r17+7|0)>>>0)&1|r17<<1}}while(0);r34=68240+(r36<<2)|0;HEAP32[r16+28>>2]=r36;HEAP32[r16+20>>2]=0;HEAP32[r16+16>>2]=0;r17=HEAP32[67940>>2];r3=1<<r36;L199:do{if((r17&r3|0)==0){HEAP32[67940>>2]=r17|r3;HEAP32[r34>>2]=r4;HEAP32[r16+24>>2]=r34;HEAP32[r16+12>>2]=r16;HEAP32[r16+8>>2]=r16}else{r26=HEAP32[r34>>2];if((r36|0)==31){r37=0}else{r37=25-(r36>>>1)|0}L204:do{if((HEAP32[r26+4>>2]&-8|0)==(r33|0)){r38=r26}else{r35=r26;r30=r33<<r37;while(1){r39=r35+16+(r30>>>31<<2)|0;r7=HEAP32[r39>>2];if((r7|0)==0){break}if((HEAP32[r7+4>>2]&-8|0)==(r33|0)){r38=r7;break L204}else{r35=r7;r30=r30<<1}}if(r39>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r39>>2]=r4;HEAP32[r16+24>>2]=r35;HEAP32[r16+12>>2]=r16;HEAP32[r16+8>>2]=r16;break L199}}}while(0);r26=r38+8|0;r27=HEAP32[r26>>2];r30=HEAP32[67952>>2];if(r38>>>0<r30>>>0){_abort()}if(r27>>>0<r30>>>0){_abort()}else{HEAP32[r27+12>>2]=r4;HEAP32[r26>>2]=r4;HEAP32[r16+8>>2]=r27;HEAP32[r16+12>>2]=r38;HEAP32[r16+24>>2]=0;break}}}while(0);r16=HEAP32[67968>>2]-1|0;HEAP32[67968>>2]=r16;if((r16|0)==0){r40=68392}else{return}while(1){r16=HEAP32[r40>>2];if((r16|0)==0){break}else{r40=r16+8|0}}HEAP32[67968>>2]=-1;return}function _realloc(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32;if((r1|0)==0){r3=_malloc(r2);return r3}if(r2>>>0>4294967231){r4=___errno_location();HEAP32[r4>>2]=12;r3=0;return r3}if(r2>>>0<11){r5=16}else{r5=r2+11&-8}r4=r1-4|0;r6=HEAP32[r4>>2];r7=r6&-8;r8=r7-8|0;r9=r1+r8|0;r10=r9;r11=HEAP32[67952>>2];if((r1-8|0)>>>0<r11>>>0){_abort()}r12=r6&3;if(!((r12|0)!=1&(r8|0)>-8)){_abort()}r8=r7|4;r13=r1+(r8-8)|0;r14=HEAP32[r13>>2];if((r14&1|0)==0){_abort()}do{if((r12|0)==0){if(r5>>>0<256|r7>>>0<(r5|4)>>>0){break}if((r7-r5|0)>>>0>HEAP32[67864>>2]<<1>>>0){break}else{r3=r1}return r3}else{if(r7>>>0>=r5>>>0){r15=r7-r5|0;if(r15>>>0<=15){r3=r1;return r3}HEAP32[r4>>2]=r6&1|r5|2;HEAP32[r1+((r5|4)-8)>>2]=r15|3;HEAP32[r13>>2]=HEAP32[r13>>2]|1;_dispose_chunk(r1+(r5-8)|0,r15);r3=r1;return r3}if((r10|0)==(HEAP32[67960>>2]|0)){r15=HEAP32[67948>>2]+r7|0;if(r15>>>0<=r5>>>0){break}r16=r15-r5|0;HEAP32[r4>>2]=r6&1|r5|2;HEAP32[r1+((r5|4)-8)>>2]=r16|1;HEAP32[67960>>2]=r1+(r5-8);HEAP32[67948>>2]=r16;r3=r1;return r3}if((r10|0)==(HEAP32[67956>>2]|0)){r16=HEAP32[67944>>2]+r7|0;if(r16>>>0<r5>>>0){break}r15=r16-r5|0;if(r15>>>0>15){HEAP32[r4>>2]=r6&1|r5|2;HEAP32[r1+((r5|4)-8)>>2]=r15|1;HEAP32[r1+(r16-8)>>2]=r15;r17=r1+(r16-4)|0;HEAP32[r17>>2]=HEAP32[r17>>2]&-2;r18=r1+(r5-8)|0;r19=r15}else{HEAP32[r4>>2]=r6&1|r16|2;r15=r1+(r16-4)|0;HEAP32[r15>>2]=HEAP32[r15>>2]|1;r18=0;r19=0}HEAP32[67944>>2]=r19;HEAP32[67956>>2]=r18;r3=r1;return r3}if((r14&2|0)!=0){break}r15=(r14&-8)+r7|0;if(r15>>>0<r5>>>0){break}r16=r15-r5|0;r17=r14>>>3;L46:do{if(r14>>>0<256){r20=HEAP32[r1+r7>>2];r21=HEAP32[r1+r8>>2];r22=67976+(r17<<1<<2)|0;do{if((r20|0)!=(r22|0)){if(r20>>>0<r11>>>0){_abort()}if((HEAP32[r20+12>>2]|0)==(r10|0)){break}_abort()}}while(0);if((r21|0)==(r20|0)){HEAP32[67936>>2]=HEAP32[67936>>2]&~(1<<r17);break}do{if((r21|0)==(r22|0)){r23=r21+8|0}else{if(r21>>>0<r11>>>0){_abort()}r24=r21+8|0;if((HEAP32[r24>>2]|0)==(r10|0)){r23=r24;break}_abort()}}while(0);HEAP32[r20+12>>2]=r21;HEAP32[r23>>2]=r20}else{r22=r9;r24=HEAP32[r1+(r7+16)>>2];r25=HEAP32[r1+r8>>2];do{if((r25|0)==(r22|0)){r26=r1+(r7+12)|0;r27=HEAP32[r26>>2];if((r27|0)==0){r28=r1+(r7+8)|0;r29=HEAP32[r28>>2];if((r29|0)==0){r30=0;break}else{r31=r29;r32=r28}}else{r31=r27;r32=r26}while(1){r26=r31+20|0;r27=HEAP32[r26>>2];if((r27|0)!=0){r31=r27;r32=r26;continue}r26=r31+16|0;r27=HEAP32[r26>>2];if((r27|0)==0){break}else{r31=r27;r32=r26}}if(r32>>>0<r11>>>0){_abort()}else{HEAP32[r32>>2]=0;r30=r31;break}}else{r26=HEAP32[r1+r7>>2];if(r26>>>0<r11>>>0){_abort()}r27=r26+12|0;if((HEAP32[r27>>2]|0)!=(r22|0)){_abort()}r28=r25+8|0;if((HEAP32[r28>>2]|0)==(r22|0)){HEAP32[r27>>2]=r25;HEAP32[r28>>2]=r26;r30=r25;break}else{_abort()}}}while(0);if((r24|0)==0){break}r25=HEAP32[r1+(r7+20)>>2];r20=68240+(r25<<2)|0;do{if((r22|0)==(HEAP32[r20>>2]|0)){HEAP32[r20>>2]=r30;if((r30|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r25);break L46}else{if(r24>>>0<HEAP32[67952>>2]>>>0){_abort()}r21=r24+16|0;if((HEAP32[r21>>2]|0)==(r22|0)){HEAP32[r21>>2]=r30}else{HEAP32[r24+20>>2]=r30}if((r30|0)==0){break L46}}}while(0);if(r30>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r30+24>>2]=r24;r22=HEAP32[r1+(r7+8)>>2];do{if((r22|0)!=0){if(r22>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r30+16>>2]=r22;HEAP32[r22+24>>2]=r30;break}}}while(0);r22=HEAP32[r1+(r7+12)>>2];if((r22|0)==0){break}if(r22>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r30+20>>2]=r22;HEAP32[r22+24>>2]=r30;break}}}while(0);if(r16>>>0<16){HEAP32[r4>>2]=r15|HEAP32[r4>>2]&1|2;r17=r1+((r15|4)-8)|0;HEAP32[r17>>2]=HEAP32[r17>>2]|1;r3=r1;return r3}else{HEAP32[r4>>2]=HEAP32[r4>>2]&1|r5|2;HEAP32[r1+((r5|4)-8)>>2]=r16|3;r17=r1+((r15|4)-8)|0;HEAP32[r17>>2]=HEAP32[r17>>2]|1;_dispose_chunk(r1+(r5-8)|0,r16);r3=r1;return r3}}}while(0);r5=_malloc(r2);if((r5|0)==0){r3=0;return r3}r30=HEAP32[r4>>2];r4=(r30&-8)-((r30&3|0)==0?8:4)|0;_memcpy(r5,r1,r4>>>0<r2>>>0?r4:r2)|0;_free(r1);r3=r5;return r3}function _dispose_chunk(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37;r3=r1;r4=r3+r2|0;r5=r4;r6=HEAP32[r1+4>>2];L1:do{if((r6&1|0)==0){r7=HEAP32[r1>>2];if((r6&3|0)==0){return}r8=r3+ -r7|0;r9=r8;r10=r7+r2|0;r11=HEAP32[67952>>2];if(r8>>>0<r11>>>0){_abort()}if((r9|0)==(HEAP32[67956>>2]|0)){r12=r3+(r2+4)|0;if((HEAP32[r12>>2]&3|0)!=3){r13=r9;r14=r10;break}HEAP32[67944>>2]=r10;HEAP32[r12>>2]=HEAP32[r12>>2]&-2;HEAP32[r3+(4-r7)>>2]=r10|1;HEAP32[r4>>2]=r10;return}r12=r7>>>3;if(r7>>>0<256){r15=HEAP32[r3+(8-r7)>>2];r16=HEAP32[r3+(12-r7)>>2];r17=67976+(r12<<1<<2)|0;do{if((r15|0)!=(r17|0)){if(r15>>>0<r11>>>0){_abort()}if((HEAP32[r15+12>>2]|0)==(r9|0)){break}_abort()}}while(0);if((r16|0)==(r15|0)){HEAP32[67936>>2]=HEAP32[67936>>2]&~(1<<r12);r13=r9;r14=r10;break}do{if((r16|0)==(r17|0)){r18=r16+8|0}else{if(r16>>>0<r11>>>0){_abort()}r19=r16+8|0;if((HEAP32[r19>>2]|0)==(r9|0)){r18=r19;break}_abort()}}while(0);HEAP32[r15+12>>2]=r16;HEAP32[r18>>2]=r15;r13=r9;r14=r10;break}r17=r8;r12=HEAP32[r3+(24-r7)>>2];r19=HEAP32[r3+(12-r7)>>2];do{if((r19|0)==(r17|0)){r20=16-r7|0;r21=r3+(r20+4)|0;r22=HEAP32[r21>>2];if((r22|0)==0){r23=r3+r20|0;r20=HEAP32[r23>>2];if((r20|0)==0){r24=0;break}else{r25=r20;r26=r23}}else{r25=r22;r26=r21}while(1){r21=r25+20|0;r22=HEAP32[r21>>2];if((r22|0)!=0){r25=r22;r26=r21;continue}r21=r25+16|0;r22=HEAP32[r21>>2];if((r22|0)==0){break}else{r25=r22;r26=r21}}if(r26>>>0<r11>>>0){_abort()}else{HEAP32[r26>>2]=0;r24=r25;break}}else{r21=HEAP32[r3+(8-r7)>>2];if(r21>>>0<r11>>>0){_abort()}r22=r21+12|0;if((HEAP32[r22>>2]|0)!=(r17|0)){_abort()}r23=r19+8|0;if((HEAP32[r23>>2]|0)==(r17|0)){HEAP32[r22>>2]=r19;HEAP32[r23>>2]=r21;r24=r19;break}else{_abort()}}}while(0);if((r12|0)==0){r13=r9;r14=r10;break}r19=HEAP32[r3+(28-r7)>>2];r11=68240+(r19<<2)|0;do{if((r17|0)==(HEAP32[r11>>2]|0)){HEAP32[r11>>2]=r24;if((r24|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r19);r13=r9;r14=r10;break L1}else{if(r12>>>0<HEAP32[67952>>2]>>>0){_abort()}r8=r12+16|0;if((HEAP32[r8>>2]|0)==(r17|0)){HEAP32[r8>>2]=r24}else{HEAP32[r12+20>>2]=r24}if((r24|0)==0){r13=r9;r14=r10;break L1}}}while(0);if(r24>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r24+24>>2]=r12;r17=16-r7|0;r19=HEAP32[r3+r17>>2];do{if((r19|0)!=0){if(r19>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r24+16>>2]=r19;HEAP32[r19+24>>2]=r24;break}}}while(0);r19=HEAP32[r3+(r17+4)>>2];if((r19|0)==0){r13=r9;r14=r10;break}if(r19>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r24+20>>2]=r19;HEAP32[r19+24>>2]=r24;r13=r9;r14=r10;break}}else{r13=r1;r14=r2}}while(0);r1=HEAP32[67952>>2];if(r4>>>0<r1>>>0){_abort()}r24=r3+(r2+4)|0;r25=HEAP32[r24>>2];do{if((r25&2|0)==0){if((r5|0)==(HEAP32[67960>>2]|0)){r26=HEAP32[67948>>2]+r14|0;HEAP32[67948>>2]=r26;HEAP32[67960>>2]=r13;HEAP32[r13+4>>2]=r26|1;if((r13|0)!=(HEAP32[67956>>2]|0)){return}HEAP32[67956>>2]=0;HEAP32[67944>>2]=0;return}if((r5|0)==(HEAP32[67956>>2]|0)){r26=HEAP32[67944>>2]+r14|0;HEAP32[67944>>2]=r26;HEAP32[67956>>2]=r13;HEAP32[r13+4>>2]=r26|1;HEAP32[r13+r26>>2]=r26;return}r26=(r25&-8)+r14|0;r18=r25>>>3;L100:do{if(r25>>>0<256){r6=HEAP32[r3+(r2+8)>>2];r19=HEAP32[r3+(r2+12)>>2];r7=67976+(r18<<1<<2)|0;do{if((r6|0)!=(r7|0)){if(r6>>>0<r1>>>0){_abort()}if((HEAP32[r6+12>>2]|0)==(r5|0)){break}_abort()}}while(0);if((r19|0)==(r6|0)){HEAP32[67936>>2]=HEAP32[67936>>2]&~(1<<r18);break}do{if((r19|0)==(r7|0)){r27=r19+8|0}else{if(r19>>>0<r1>>>0){_abort()}r12=r19+8|0;if((HEAP32[r12>>2]|0)==(r5|0)){r27=r12;break}_abort()}}while(0);HEAP32[r6+12>>2]=r19;HEAP32[r27>>2]=r6}else{r7=r4;r12=HEAP32[r3+(r2+24)>>2];r11=HEAP32[r3+(r2+12)>>2];do{if((r11|0)==(r7|0)){r8=r3+(r2+20)|0;r15=HEAP32[r8>>2];if((r15|0)==0){r16=r3+(r2+16)|0;r21=HEAP32[r16>>2];if((r21|0)==0){r28=0;break}else{r29=r21;r30=r16}}else{r29=r15;r30=r8}while(1){r8=r29+20|0;r15=HEAP32[r8>>2];if((r15|0)!=0){r29=r15;r30=r8;continue}r8=r29+16|0;r15=HEAP32[r8>>2];if((r15|0)==0){break}else{r29=r15;r30=r8}}if(r30>>>0<r1>>>0){_abort()}else{HEAP32[r30>>2]=0;r28=r29;break}}else{r8=HEAP32[r3+(r2+8)>>2];if(r8>>>0<r1>>>0){_abort()}r15=r8+12|0;if((HEAP32[r15>>2]|0)!=(r7|0)){_abort()}r16=r11+8|0;if((HEAP32[r16>>2]|0)==(r7|0)){HEAP32[r15>>2]=r11;HEAP32[r16>>2]=r8;r28=r11;break}else{_abort()}}}while(0);if((r12|0)==0){break}r11=HEAP32[r3+(r2+28)>>2];r6=68240+(r11<<2)|0;do{if((r7|0)==(HEAP32[r6>>2]|0)){HEAP32[r6>>2]=r28;if((r28|0)!=0){break}HEAP32[67940>>2]=HEAP32[67940>>2]&~(1<<r11);break L100}else{if(r12>>>0<HEAP32[67952>>2]>>>0){_abort()}r19=r12+16|0;if((HEAP32[r19>>2]|0)==(r7|0)){HEAP32[r19>>2]=r28}else{HEAP32[r12+20>>2]=r28}if((r28|0)==0){break L100}}}while(0);if(r28>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r28+24>>2]=r12;r7=HEAP32[r3+(r2+16)>>2];do{if((r7|0)!=0){if(r7>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r28+16>>2]=r7;HEAP32[r7+24>>2]=r28;break}}}while(0);r7=HEAP32[r3+(r2+20)>>2];if((r7|0)==0){break}if(r7>>>0<HEAP32[67952>>2]>>>0){_abort()}else{HEAP32[r28+20>>2]=r7;HEAP32[r7+24>>2]=r28;break}}}while(0);HEAP32[r13+4>>2]=r26|1;HEAP32[r13+r26>>2]=r26;if((r13|0)!=(HEAP32[67956>>2]|0)){r31=r26;break}HEAP32[67944>>2]=r26;return}else{HEAP32[r24>>2]=r25&-2;HEAP32[r13+4>>2]=r14|1;HEAP32[r13+r14>>2]=r14;r31=r14}}while(0);r14=r31>>>3;if(r31>>>0<256){r25=r14<<1;r24=67976+(r25<<2)|0;r28=HEAP32[67936>>2];r2=1<<r14;do{if((r28&r2|0)==0){HEAP32[67936>>2]=r28|r2;r32=r24;r33=67976+(r25+2<<2)|0}else{r14=67976+(r25+2<<2)|0;r3=HEAP32[r14>>2];if(r3>>>0>=HEAP32[67952>>2]>>>0){r32=r3;r33=r14;break}_abort()}}while(0);HEAP32[r33>>2]=r13;HEAP32[r32+12>>2]=r13;HEAP32[r13+8>>2]=r32;HEAP32[r13+12>>2]=r24;return}r24=r13;r32=r31>>>8;do{if((r32|0)==0){r34=0}else{if(r31>>>0>16777215){r34=31;break}r33=(r32+1048320|0)>>>16&8;r25=r32<<r33;r2=(r25+520192|0)>>>16&4;r28=r25<<r2;r25=(r28+245760|0)>>>16&2;r14=14-(r2|r33|r25)+(r28<<r25>>>15)|0;r34=r31>>>((r14+7|0)>>>0)&1|r14<<1}}while(0);r32=68240+(r34<<2)|0;HEAP32[r13+28>>2]=r34;HEAP32[r13+20>>2]=0;HEAP32[r13+16>>2]=0;r14=HEAP32[67940>>2];r25=1<<r34;if((r14&r25|0)==0){HEAP32[67940>>2]=r14|r25;HEAP32[r32>>2]=r24;HEAP32[r13+24>>2]=r32;HEAP32[r13+12>>2]=r13;HEAP32[r13+8>>2]=r13;return}r25=HEAP32[r32>>2];if((r34|0)==31){r35=0}else{r35=25-(r34>>>1)|0}L194:do{if((HEAP32[r25+4>>2]&-8|0)==(r31|0)){r36=r25}else{r34=r25;r32=r31<<r35;while(1){r37=r34+16+(r32>>>31<<2)|0;r14=HEAP32[r37>>2];if((r14|0)==0){break}if((HEAP32[r14+4>>2]&-8|0)==(r31|0)){r36=r14;break L194}else{r34=r14;r32=r32<<1}}if(r37>>>0<HEAP32[67952>>2]>>>0){_abort()}HEAP32[r37>>2]=r24;HEAP32[r13+24>>2]=r34;HEAP32[r13+12>>2]=r13;HEAP32[r13+8>>2]=r13;return}}while(0);r37=r36+8|0;r31=HEAP32[r37>>2];r35=HEAP32[67952>>2];if(r36>>>0<r35>>>0){_abort()}if(r31>>>0<r35>>>0){_abort()}HEAP32[r31+12>>2]=r24;HEAP32[r37>>2]=r24;HEAP32[r13+8>>2]=r31;HEAP32[r13+12>>2]=r36;HEAP32[r13+24>>2]=0;return}function __ZNSt9bad_allocD0Ev(r1){if((r1|0)==0){return}_free(r1);return}function __ZNSt9bad_allocD2Ev(r1){return}function __ZNKSt9bad_alloc4whatEv(r1){return 24808}



function _ps_reinit(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+1912|0;r6=r5;r7=r5+8;r8=r5+16;r9=r5+24;r10=r5+32;r11=r5+40;r12=r5+48;r13=r5+560;r14=r5+568;r15=r5+1592;r16=r5+1600;r17=r5+1608;r18=r5+1616;r19=r5+1624;r20=r5+1632;r21=r5+1640;r22=r5+1648;r23=r5+1656;r24=r5+1664;r25=r5+1672;r26=r5+1680;r27=r5+1688;r28=r5+1696;r29=r5+1704;r30=r5+1712;r31=r5+1720;r32=r5+1728;r33=r5+1736;r34=r5+1744;r35=r5+1752;r36=r5+1760;r37=r5+1768;r38=r5+1776;r39=r5+1784;r40=r5+1792;r41=r5+1800;r42=r5+1808;r43=r5+1816;r44=r5+1824;r45=r5+1832;r46=r5+1840;r47=r5+1848;r48=r5+1856;r49=r5+1864;r50=r5+1872;r51=r5+1880;r52=r5+1888;r53=r5+1896;r54=r5+1904;r55=r1|0;r56=HEAP32[r55>>2];do{if((r2|0)==0){r57=r56}else{if((r56|0)==(r2|0)){r57=r2;break}_cmd_ln_free_r(r56);r58=r2|0;HEAP32[r58>>2]=HEAP32[r58>>2]+1;HEAP32[r55>>2]=r2;r57=r2}}while(0);r55=r1|0;if((_hash_table_lookup(HEAP32[r57+4>>2],44728,r54)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=44728,r4));STACKTOP=r4}do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],43216,r53)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=43216,r4));STACKTOP=r4;r59=0}else{r54=HEAP32[r53>>2];if((r54|0)==0){r59=0;break}r59=HEAP32[r54>>2]}}while(0);HEAP32[r1+108>>2]=r59;do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],42128,r52)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=42128,r4));STACKTOP=r4;r60=0}else{r59=HEAP32[r52>>2];if((r59|0)==0){r60=0;break}r60=HEAP32[r59>>2]}}while(0);HEAP32[r1+112>>2]=r60;do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],40800,r51)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=40800,r4));STACKTOP=r4;r61=0}else{r60=HEAP32[r51>>2];if((r60|0)==0){r61=0;break}r61=HEAP32[r60>>2]}}while(0);HEAP32[r1+116>>2]=r61;do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],48632,r50)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=48632,r4));STACKTOP=r4}else{r61=HEAP32[r50>>2];if((r61|0)==0){break}r51=HEAP32[r61>>2];if((r51|0)==0){break}_ps_add_file(r1,40168,r51,24056);_ps_add_file(r1,34360,r51,23936);_ps_add_file(r1,24208,r51,23576);_ps_add_file(r1,39752,r51,23344);_ps_add_file(r1,8184,r51,23280);_ps_add_file(r1,9864,r51,23096);_ps_add_file(r1,20616,r51,22912);_ps_add_file(r1,41328,r51,22856);_ps_add_file(r1,40272,r51,22832);_ps_add_file(r1,40016,r51,22736)}}while(0);_ps_free_searches(r1);r50=_hash_table_new(3,0);r51=r1+24|0;HEAP32[r51>>2]=r50;r50=r1+8|0;_acmod_free(HEAP32[r50>>2]);HEAP32[r50>>2]=0;r61=r1+12|0;_dict_free(HEAP32[r61>>2]);HEAP32[r61>>2]=0;r60=r1+16|0;_dict2pid_free(HEAP32[r60>>2]);HEAP32[r60>>2]=0;r52=r1+20|0;r59=HEAP32[r52>>2];do{if((r59|0)==0){r3=35}else{r53=HEAPF64[r59+24>>3];do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],39488,r49)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=39488,r4));STACKTOP=r4;r62=0}else{r54=HEAP32[r49>>2];if((r54|0)==0){r62=0;break}r62=HEAPF64[r54>>3]}}while(0);r54=HEAP32[r52>>2];if(r53==r62){r63=r54;break}if((r54|0)==0){r3=35;break}r57=r54+12|0;r56=HEAP32[r57>>2]-1|0;HEAP32[r57>>2]=r56;if((r56|0)>0){r3=35;break}r56=HEAP32[r54+16>>2];if((r56|0)==0){_free(HEAP32[r54>>2])}else{_mmio_file_unmap(r56)}_free(r54);r3=35}}while(0);if(r3==35){do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],39488,r48)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=39488,r4));STACKTOP=r4;r64=0}else{r62=HEAP32[r48>>2];if((r62|0)==0){r64=0;break}r64=HEAPF64[r62>>3]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],38264,r47)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=38264,r4));STACKTOP=r4;r65=0}else{r48=HEAP32[r47>>2];if((r48|0)==0){r65=0;break}r65=(HEAP32[r48>>2]|0)!=0|0}}while(0);r47=_logmath_init(r64,0,r65);HEAP32[r52>>2]=r47;r63=r47}r47=HEAP32[r55>>2];r65=_malloc(120);if((r65|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=120,HEAP32[r4+16>>2]=44200,HEAP32[r4+24>>2]=241,r4));STACKTOP=r4}if((HEAP32[r65-4>>2]&3|0)!=0){_memset(r65,0,120)|0}r64=r65;r48=r47|0;HEAP32[r48>>2]=HEAP32[r48>>2]+1;r48=r65;HEAP32[r48>>2]=r47;r62=r65+4|0;HEAP32[r62>>2]=r63;HEAP8[r65+88|0]=0;r63=r47+4|0;L62:do{if((_hash_table_lookup(HEAP32[r63>>2],40272,r46)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=40272,r4));STACKTOP=r4}else{r49=HEAP32[r46>>2];if((r49|0)==0){break}r59=HEAP32[r49>>2];if((r59|0)==0){break}r49=HEAP32[r48>>2];r54=_fopen(r59,26184);if((r54|0)==0){_err_msg(4,45384,792,27576,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r59,r4));STACKTOP=r4;break}r56=_fgetc(r54);while(1){if((r56|0)==-1){break}if((_memchr(5808,r56,5)|0)==0){r66=r56;r3=58;break}r56=_fgetc(r54)}do{if(r3==58){if((r66|0)==-1){break}r53=_malloc(40);if((r53|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=10,HEAP32[r4+8>>2]=4,HEAP32[r4+16>>2]=45384,HEAP32[r4+24>>2]=810,r4));STACKTOP=r4}if((HEAP32[r53-4>>2]&3|0)!=0){_memset(r53,0,40)|0}r57=r53;r53=r56;r58=0;r67=512;r68=___ckd_calloc__(513,1,45384,812);r69=10;r70=0;L83:while(1){r71=(r70&1|0)==0;r72=r53;r73=r58;r74=0;r75=r67;r76=r68;L85:while(1){L87:do{if((r74|0)==0^1|r71^1){r77=r72}else{r78=r72;L88:while(1){if((r78|0)==-1){r79=1;r80=r57;r81=r70;break L83}else if((r78|0)!=35){r77=r78;break L87}r82=_fgetc(r54);while(1){if((r82|0)==-1|(r82|0)==10){break}r82=_fgetc(r54)}r82=_fgetc(r54);while(1){if((r82|0)==-1){r78=-1;continue L88}if((_memchr(5808,r82,5)|0)==0){r78=r82;continue L88}r82=_fgetc(r54)}}}}while(0);do{if((r77|0)==34|(r77|0)==39){if((r73|0)==(r77|0)){r83=0;r84=r74;r85=r75;r86=r76;break}if((r73|0)==0){r83=r77;r84=r74;r85=r75;r86=r76}else{r3=78;break L83}}else if((r77|0)==-1){break L85}else{if((r73|0)==0){if((_memchr(5808,r77,5)|0)!=0){break L85}}if((r74|0)<(r75|0)){r87=r75;r88=r76}else{r78=r75<<1;r89=r78|1;r82=_realloc(r76,r89);if((r82|0)==0){r3=93;break L83}else{r87=r78;r88=r82}}r82=r74+1|0;HEAP8[r88+r74|0]=r77;HEAP8[r88+r82|0]=0;r83=r73;r84=r82;r85=r87;r86=r88}}while(0);r72=_fgetc(r54);r73=r83;r74=r84;r75=r85;r76=r86}if((r70|0)<(r69|0)){r90=r57;r91=r69}else{r92=r69<<3;r74=_realloc(r57,r92);if((r74|0)==0){r3=83;break}r90=r74;r91=r69<<1}r74=___ckd_salloc__(r76,45384,855);HEAP32[r90+(r70<<2)>>2]=r74;HEAP8[r76]=0;r74=r70+1|0;if((r73|0)==0){r93=r77}else{_err_msg(3,45384,861,25440,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;r93=r77}while(1){if((r93|0)==-1){r79=1;r80=r90;r81=r74;break L83}if((_memchr(5808,r93,5)|0)==0){break}r93=_fgetc(r54)}if((r93|0)==-1){r79=1;r80=r90;r81=r74;break}else{r57=r90;r53=r93;r58=r73;r67=r75;r68=r76;r69=r91;r70=r74}}if(r3==78){_err_msg(4,45384,835,26432,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;r79=0;r80=r57;r81=r70}else if(r3==83){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r92,HEAP32[r4+8>>2]=45384,HEAP32[r4+16>>2]=847,r4));STACKTOP=r4}else if(r3==93){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r89,HEAP32[r4+8>>2]=45384,HEAP32[r4+16>>2]=876,r4));STACKTOP=r4}_fclose(r54);_free(r76);if(!r79){r69=0;while(1){if((r69|0)>=(r81|0)){break}_free(HEAP32[r80+(r69<<2)>>2]);r69=r69+1|0}_free(r80);break L62}r69=_cmd_ln_parse_r(r49,5008,r81,r80,0);if((r69|0)==0){r70=0;while(1){if((r70|0)>=(r81|0)){break}_free(HEAP32[r80+(r70<<2)>>2]);r70=r70+1|0}_free(r80);break L62}do{if((r69|0)==(r49|0)){r70=r49+8|0;r57=r49+12|0;r68=HEAP32[r57>>2]+r81<<2;r67=_realloc(HEAP32[r70>>2],r68);if((r67|0)==0){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r68,HEAP32[r4+8>>2]=45384,HEAP32[r4+16>>2]=455,r4));STACKTOP=r4}else{r68=r67;HEAP32[r70>>2]=r68;r70=r80;_memcpy(r68+(HEAP32[r57>>2]<<2)|0,r70,r81<<2)|0;_free(r70);HEAP32[r57>>2]=HEAP32[r57>>2]+r81;r94=r69;break}}else{HEAP32[r69+12>>2]=r81;HEAP32[r69+8>>2]=r80;r94=r69}}while(0);if((r94|0)==0){break L62}_err_msg(1,44200,251,14216,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r59,r4));STACKTOP=r4;break L62}}while(0);_fclose(r54)}}while(0);r94=_fe_init_auto_r(r47);HEAP32[r65+12>>2]=r94;do{if((r94|0)!=0){if((_acmod_fe_mismatch(r64,r94)|0)!=0){break}if((_acmod_init_feat(r64)|0)<0){break}if((_acmod_init_am(r64)|0)<0){break}r47=r65+16|0;r80=HEAP32[r47>>2];r81=HEAP32[r80+20>>2]<<1|1;r79=r65+96|0;HEAP32[r79>>2]=r81;r76=___ckd_calloc_2d__(r81,HEAP32[r80+8>>2],4,44200,291);HEAP32[r65+60>>2]=r76;r76=HEAP32[r79>>2];do{if((_hash_table_lookup(HEAP32[r63>>2],39472,r45)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=39472,r4));STACKTOP=r4;r95=0}else{r79=HEAP32[r45>>2];if((r79|0)==0){r95=0;break}r95=HEAP32[r79>>2]}}while(0);r54=r76+r95|0;r79=r65+108|0;HEAP32[r79>>2]=r54;r80=_feat_array_alloc(HEAP32[r47>>2],r54);HEAP32[r65+64>>2]=r80;r80=___ckd_calloc__(HEAP32[r79>>2],4,44200,296);HEAP32[r65+84>>2]=r80;r80=r65+20|0;r79=___ckd_calloc__(HEAP32[HEAP32[r80>>2]+20>>2],2,44200,300);HEAP32[r65+36>>2]=r79;r79=___ckd_calloc__((HEAP32[HEAP32[r80>>2]+20>>2]+31|0)/32&-1,4,44200,301);HEAP32[r65+40>>2]=r79;r79=___ckd_calloc__(HEAP32[HEAP32[r80>>2]+20>>2],1,44200,303);HEAP32[r65+44>>2]=r79;HEAP32[r65+56>>2]=HEAP32[HEAP32[r62>>2]+64>>2];do{if((_hash_table_lookup(HEAP32[r63>>2],9296,r44)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=9296,r4));STACKTOP=r4;r96=0}else{r79=HEAP32[r44>>2];if((r79|0)==0){r96=0;break}r96=(HEAP32[r79>>2]|0)!=0|0}}while(0);HEAP8[r65+89|0]=r96;HEAP32[r50>>2]=r64;if((r64|0)==0){r97=-1;STACKTOP=r5;return r97}do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],39472,r43)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=39472,r4));STACKTOP=r4;r3=128}else{r47=HEAP32[r43>>2];if((r47|0)==0){r3=128;break}r76=HEAP32[r47>>2];HEAP32[r1+36>>2]=r76;if((r76|0)==0){break}r76=HEAP32[r55>>2];r47=HEAP32[r50>>2];r79=HEAP32[r61>>2];r80=_malloc(88);if((r80|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=88,HEAP32[r4+16>>2]=48640,HEAP32[r4+24>>2]=119,r4));STACKTOP=r4}if((HEAP32[r80-4>>2]&3|0)!=0){_memset(r80,0,88)|0}_ps_search_init(r80,4552,r76,r47,r79,0);r79=r80;_phone_loop_search_reinit(r79,HEAP32[r80+16>>2],HEAP32[r80+20>>2]);r47=r1+32|0;HEAP32[r47>>2]=r79;r79=HEAP32[r51>>2];r76=___ckd_salloc__(HEAP32[HEAP32[r80>>2]>>2],49568,270);r80=HEAP32[r47>>2];r47=_key2hash(r79,r76);_enter(r79,r47,r76,_strlen(r76),r80,0)}}while(0);if(r3==128){HEAP32[r1+36>>2]=0}r80=HEAP32[r55>>2];r76=HEAP32[HEAP32[r50>>2]+20>>2];r47=(r80|0)==0;do{if(r47){r98=0;r99=0;r100=0;r101=0;r102=0;r3=174}else{r79=r80+4|0;do{if((_hash_table_lookup(HEAP32[r79>>2],47320,r41)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=47320,r4));STACKTOP=r4;r103=0}else{r54=HEAP32[r41>>2];if((r54|0)==0){r103=0;break}r103=HEAP32[r54>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[r79>>2],20616,r40)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=20616,r4));STACKTOP=r4;r104=0}else{r54=HEAP32[r40>>2];if((r54|0)==0){r104=0;break}r104=HEAP32[r54>>2]}}while(0);if((r103|0)==0){r105=r104;r106=0;r107=0;r108=0}else{r79=_fopen(r103,26184);if((r79|0)==0){r54=___errno_location();r81=HEAP32[r54>>2];r54=_malloc(53);_memcpy(r54,42560,48)|0;r89=r54+_strlen(r54)|0;HEAP8[r89]=HEAP8[6400];HEAP8[r89+1|0]=HEAP8[6401];HEAP8[r89+2|0]=HEAP8[6402];HEAP8[r89+3|0]=HEAP8[6403];HEAP8[r89+4|0]=HEAP8[6404];HEAP8[r89+5|0]=HEAP8[6405];r89=_strerror(r81);_err_msg(4,41416,275,r54,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r103,HEAP32[r4+8>>2]=r89,r4));STACKTOP=r4;_free(r54);break}r54=_lineiter_start(r79);r89=0;while(1){if((r54|0)==0){break}r81=HEAP32[r54>>2];r92=HEAP8[r81];r91=r92<<24>>24==0;L202:do{if(r91){r109=41336;r110=0}else{r93=r81;r90=41336;r77=2;r86=r92;while(1){r85=r77-1|0;r84=HEAP8[r90];if(!((r85|0)!=0&r84<<24>>24!=0&r86<<24>>24==r84<<24>>24)){r109=r90;r110=r86;break L202}r84=r93+1|0;r83=r90+1|0;r88=HEAP8[r84];if(r88<<24>>24==0){r109=r83;r110=0;break}else{r93=r84;r90=r83;r77=r85;r86=r88}}}}while(0);if(r110<<24>>24==(HEAP8[r109]|0)){r111=r89}else{L209:do{if(r91){r112=40160;r113=0}else{r74=r81;r75=40160;r73=2;r86=r92;while(1){r77=r73-1|0;r90=HEAP8[r75];if(!((r77|0)!=0&r90<<24>>24!=0&r86<<24>>24==r90<<24>>24)){r112=r75;r113=r86;break L209}r90=r74+1|0;r93=r75+1|0;r88=HEAP8[r90];if(r88<<24>>24==0){r112=r93;r113=0;break}else{r74=r90;r75=r93;r73=r77;r86=r88}}}}while(0);r111=r113<<24>>24==(HEAP8[r112]|0)?r89:r89+1|0}r54=_lineiter_next(r54);r89=r111}_rewind(r79);r105=r104;r106=r103;r107=r89;r108=r79}if((r105|0)==0){r98=r107;r99=0;r100=r108;r101=r106;r102=r105;r3=174;break}r54=_fopen(r105,26184);if((r54|0)==0){r92=___errno_location();r81=HEAP32[r92>>2];r92=_malloc(60);_memcpy(r92,38728,55)|0;r91=r92+_strlen(r92)|0;HEAP8[r91]=HEAP8[6400];HEAP8[r91+1|0]=HEAP8[6401];HEAP8[r91+2|0]=HEAP8[6402];HEAP8[r91+3|0]=HEAP8[6403];HEAP8[r91+4|0]=HEAP8[6404];HEAP8[r91+5|0]=HEAP8[6405];r91=_strerror(r81);_err_msg(4,41416,289,r92,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r105,HEAP32[r4+8>>2]=r91,r4));STACKTOP=r4;_free(r92);_fclose(r108);break}r92=_lineiter_start(r54);r91=r107;while(1){if((r92|0)==0){break}r81=HEAP32[r92>>2];r86=HEAP8[r81];r73=r86<<24>>24==0;L224:do{if(r73){r114=41336;r115=0}else{r75=r81;r74=41336;r88=2;r77=r86;while(1){r93=r88-1|0;r90=HEAP8[r74];if(!((r93|0)!=0&r90<<24>>24!=0&r77<<24>>24==r90<<24>>24)){r114=r74;r115=r77;break L224}r90=r75+1|0;r85=r74+1|0;r83=HEAP8[r90];if(r83<<24>>24==0){r114=r85;r115=0;break}else{r75=r90;r74=r85;r88=r93;r77=r83}}}}while(0);if(r115<<24>>24==(HEAP8[r114]|0)){r116=r91}else{L231:do{if(r73){r117=40160;r118=0}else{r77=r81;r88=40160;r74=2;r75=r86;while(1){r83=r74-1|0;r93=HEAP8[r88];if(!((r83|0)!=0&r93<<24>>24!=0&r75<<24>>24==r93<<24>>24)){r117=r88;r118=r75;break L231}r93=r77+1|0;r85=r88+1|0;r90=HEAP8[r93];if(r90<<24>>24==0){r117=r85;r118=0;break}else{r77=r93;r88=r85;r74=r83;r75=r90}}}}while(0);r116=r118<<24>>24==(HEAP8[r117]|0)?r91:r91+1|0}r92=_lineiter_next(r92);r91=r116}_rewind(r54);r98=r91;r99=r54;r100=r108;r101=r106;r102=r105;r3=174}}while(0);do{if(r3==174){r92=_malloc(48);if((r92|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=48,HEAP32[r4+16>>2]=41416,HEAP32[r4+24>>2]=305,r4));STACKTOP=r4}if((HEAP32[r92-4>>2]&3|0)!=0){_memset(r92,0,48)|0}r79=r92;HEAP32[r92>>2]=1;r89=r98+4096|0;r86=(r89|0)<2147483646?r89:2147483646;r89=r92+16|0;HEAP32[r89>>2]=r86;if((r98|0)>2147483645){_err_msg(4,41416,311,37632,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r98,HEAP32[r4+8>>2]=2147483646,r4));STACKTOP=r4;_fclose(r100);_fclose(r99);_free(r92);break}_err_msg(1,41416,320,36352,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r86,HEAP32[r4+8>>2]=20,HEAP32[r4+16>>2]=(r86*20&-1)>>>10,r4));STACKTOP=r4;r86=___ckd_calloc__(HEAP32[r89>>2],20,41416,321);HEAP32[r92+8>>2]=r86;r86=r92+20|0;HEAP32[r86>>2]=0;r81=(r76|0)==0;if(!r81){r73=r76|0;HEAP32[r73>>2]=HEAP32[r73>>2]+1;HEAP32[r92+4>>2]=r76}do{if(!r47){r73=r80+4|0;if((_hash_table_lookup(HEAP32[r73>>2],35272,r39)|0)!=0){break}do{if((_hash_table_lookup(HEAP32[r73>>2],35272,r38)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=35272,r4));STACKTOP=r4;r119=0}else{r75=HEAP32[r38>>2];if((r75|0)==0){r119=0;break}r119=(HEAP32[r75>>2]|0)!=0|0}}while(0);HEAP32[r92+44>>2]=r119}}while(0);r54=_hash_table_new(HEAP32[r89>>2],HEAP32[r92+44>>2]);HEAP32[r92+12>>2]=r54;if((r100|0)!=0){_err_msg(1,41416,333,34368,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_dict_read(r100,r79);_fclose(r100);_err_msg(1,41416,336,32672,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r86>>2],r4));STACKTOP=r4}r54=r92+24|0;HEAP32[r54>>2]=HEAP32[r86>>2];if((r102|0)!=0){_err_msg(1,41416,342,31464,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r102,r4));STACKTOP=r4;_dict_read(r99,r79);_fclose(r99);_err_msg(1,41416,345,32672,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r86>>2]-HEAP32[r54>>2],r4));STACKTOP=r4}if(r81){r120=0}else{r120=HEAP16[r76+40>>1]}HEAP16[r42>>1]=r120;if((_dict_wordid(r79,15496)|0)==-1){_dict_add_word(r79,15496,r42,1)}if((_dict_wordid(r79,12968)|0)==-1){_dict_add_word(r79,12968,r42,1)}if((_dict_wordid(r79,17448)|0)==-1){_dict_add_word(r79,17448,r42,1)}r91=r92+28|0;HEAP32[r91>>2]=HEAP32[r86>>2]-1;r73=_dict_wordid(r79,15496);HEAP32[r92+32>>2]=r73;r73=_dict_wordid(r79,12968);HEAP32[r92+36>>2]=r73;r73=_dict_wordid(r79,17448);HEAP32[r92+40>>2]=r73;do{if((HEAP32[r54>>2]|0)<=(HEAP32[r91>>2]|0)){if((_dict_filler_word(r79,r73)|0)==0){break}else{r121=r79}HEAP32[r61>>2]=r121;if((r121|0)==0){r97=-1;STACKTOP=r5;return r97}r75=HEAP32[HEAP32[r50>>2]+20>>2];_err_msg(1,13088,396,29896,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;if((r75|0)==0){___assert_fail(24056,13088,397,51136)}r74=_malloc(28);if((r74|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=28,HEAP32[r4+16>>2]=13088,HEAP32[r4+24>>2]=400,r4));STACKTOP=r4}if((HEAP32[r74-4>>2]&3|0)!=0){_memset(r74,0,28)|0}r88=r74;HEAP32[r74>>2]=1;r77=r75|0;HEAP32[r77>>2]=HEAP32[r77>>2]+1;r77=r74+4|0;HEAP32[r77>>2]=r75;r90=r121|0;HEAP32[r90>>2]=HEAP32[r90>>2]+1;r90=r74+8|0;HEAP32[r90>>2]=r121;r83=r75+4|0;r85=HEAP32[r83>>2];r93=(Math_imul(Math_imul(r85,r85)|0,r85)|0)>>>9&4194303;_err_msg(1,13088,406,13632,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r85,HEAP32[r4+8>>2]=2,HEAP32[r4+16>>2]=r93,r4));STACKTOP=r4;r93=HEAP32[r83>>2];r85=___ckd_calloc_3d__(r93,r93,r93,2,13088,409);r93=r74+12|0;HEAP32[r93>>2]=r85;r85=HEAP32[r83>>2];r84=___ckd_calloc_3d__(r85,r85,r85,2,13088,413);r85=r84;r87=HEAP32[r83>>2];r66=___ckd_calloc_3d__(r87,r87,r87,2,13088,419);r87=r74+20|0;HEAP32[r87>>2]=r66;r66=0;r48=HEAP32[r83>>2];while(1){if((r66|0)>=(r48|0)){break}r46=r85+(r66<<2)|0;r59=0;r49=r48;while(1){if((r59|0)<(r49|0)){r122=0;r123=r49}else{break}while(1){if((r122|0)>=(r123|0)){break}HEAP16[HEAP32[HEAP32[HEAP32[r93>>2]+(r66<<2)>>2]+(r59<<2)>>2]+(r122<<1)>>1]=-1;HEAP16[HEAP32[HEAP32[HEAP32[r87>>2]+(r66<<2)>>2]+(r122<<2)>>2]+(r59<<1)>>1]=-1;HEAP16[HEAP32[HEAP32[r46>>2]+(r122<<2)>>2]+(r59<<1)>>1]=-1;r122=r122+1|0;r123=HEAP32[r83>>2]}r59=r59+1|0;r49=r123}r66=r66+1|0;r48=r49}r66=___ckd_calloc__((Math_imul(r48,r48)+31|0)>>>5,4,13088,433);r59=r66;r46=HEAP32[r83>>2];r56=___ckd_calloc__((Math_imul(r46,r46)+31|0)>>>5,4,13088,434);r46=r56;r69=___ckd_calloc__((HEAP32[r83>>2]+31|0)/32&-1,4,13088,435);r57=r69;r70=r121+8|0;r68=r75+56|0;r67=0;while(1){if((r67|0)>=(HEAP32[HEAP32[r90>>2]+20>>2]|0)){break}r58=HEAP32[r70>>2];r53=HEAP32[r58+(r67*20&-1)+8>>2];L308:do{if((r53|0)>1){r72=HEAP32[r58+(r67*20&-1)+4>>2];r71=HEAP16[r72>>1]|0;r82=HEAP16[r72+2>>1]|0;r78=HEAP32[r83>>2];r124=Math_imul(r71,r78)+r82|0;r125=r59+(((r124|0)/32&-1)<<2)|0;r126=HEAP32[r125>>2];r127=1<<(r124&31);if((r126&r127|0)==0){HEAP32[r125>>2]=r126|r127;r127=0;while(1){r128=HEAP32[r83>>2];if((r127|0)>=(r128|0)){break}r126=_bin_mdef_phone_id_nearest(r75,r71,r127<<16>>16,r82,1);r125=HEAP32[r68>>2]+(r126*12&-1)|0;HEAP16[HEAP32[HEAP32[HEAP32[r93>>2]+(r71<<2)>>2]+(r82<<2)>>2]+(r127<<1)>>1]=HEAPU8[r125]|HEAPU8[r125+1|0]<<8|HEAPU8[r125+2|0]<<16|HEAPU8[r125+3|0]<<24;r127=r127+1|0}r127=HEAP32[r70>>2];r129=HEAP32[r127+(r67*20&-1)+8>>2];r130=HEAP32[r127+(r67*20&-1)+4>>2];r131=r128}else{r129=r53;r130=r72;r131=r78}r127=HEAP16[r130+(r129-2<<1)>>1]|0;r82=HEAP16[r130+(r129-1<<1)>>1]|0;r71=Math_imul(r82,r131)+r127|0;r125=r46+(((r71|0)/32&-1)<<2)|0;r126=HEAP32[r125>>2];r124=1<<(r71&31);if((r126&r124|0)!=0){break}HEAP32[r125>>2]=r126|r124;r124=r85+(r82<<2)|0;r126=0;while(1){if((r126|0)>=(HEAP32[r83>>2]|0)){break L308}r125=_bin_mdef_phone_id_nearest(r75,r82,r127,r126<<16>>16,2);r71=HEAP32[r68>>2]+(r125*12&-1)|0;HEAP16[HEAP32[HEAP32[r124>>2]+(r127<<2)>>2]+(r126<<1)>>1]=HEAPU8[r71]|HEAPU8[r71+1|0]<<8|HEAPU8[r71+2|0]<<16|HEAPU8[r71+3|0]<<24;r126=r126+1|0}}else{if((r53|0)!=1){break}r126=HEAP16[HEAP32[r58+(r67*20&-1)+4>>2]>>1];r127=r126<<16>>16;r124=r57+(((r127|0)/32&-1)<<2)|0;r82=1<<(r127&31);if((HEAP32[r124>>2]&r82|0)!=0){break}_populate_lrdiph(r88,r85,r126);HEAP32[r124>>2]=HEAP32[r124>>2]|r82}}while(0);r67=r67+1|0}_free(r66);_free(r56);_free(r69);r67=HEAP32[r77>>2]+4|0;r57=HEAP32[r67>>2];r68=___ckd_calloc__(r57,2,13088,94);r75=r68;r83=___ckd_calloc__(r57,2,13088,95);r46=r83;r70=___ckd_calloc__(HEAP32[r67>>2],4,13088,98);r93=r74+16|0;HEAP32[r93>>2]=r70;r70=0;r59=HEAP32[r67>>2]<<2;while(1){if((r70|0)>=(r57|0)){break}r90=___ckd_calloc__(HEAP32[r67>>2],12,13088,103);HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]=r90;r90=r59+(HEAP32[r67>>2]*12&-1)|0;r48=r85+(r70<<2)|0;r58=0;while(1){if((r58|0)>=(r57|0)){break}_compress_table(HEAP32[HEAP32[r48>>2]+(r58<<2)>>2],r75,r46,HEAP32[r67>>2]);r53=HEAP32[r67>>2];r49=0;while(1){if((r49|0)>=(r53|0)){break}if((HEAP16[r75+(r49<<1)>>1]|0)==-1){break}r49=r49+1|0}if((HEAP16[r75>>1]|0)==-1){HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)>>2]=0;HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)+4>>2]=0;HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)+8>>2]=0}else{r53=___ckd_calloc__(r49,2,13088,114);HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)>>2]=r53;_memcpy(HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)>>2],r68,r49<<1)|0;r53=___ckd_calloc__(HEAP32[r67>>2],2,13088,118);HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)+4>>2]=r53;_memcpy(HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)+4>>2],r83,HEAP32[r67>>2]<<1)|0;HEAP32[HEAP32[HEAP32[r93>>2]+(r70<<2)>>2]+(r58*12&-1)+8>>2]=r49}r58=r58+1|0}r70=r70+1|0;r59=r90}_err_msg(1,13088,132,37488,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r59,HEAP32[r4+8>>2]=(r59|0)/1024&-1,r4));STACKTOP=r4;_free(r68);_free(r83);r70=HEAP32[r77>>2]+4|0;r93=HEAP32[r70>>2];r67=___ckd_calloc__(r93,2,13088,150);r75=r67;r46=___ckd_calloc__(r93,2,13088,151);r57=r46;if((HEAP32[r87>>2]|0)==0){___assert_fail(40144,13088,153,51216)}r85=___ckd_calloc__(HEAP32[r70>>2],4,13088,156);r69=r74+24|0;HEAP32[r69>>2]=r85;r85=0;r56=HEAP32[r70>>2]<<2;while(1){if((r85|0)>=(r93|0)){break}r66=___ckd_calloc__(HEAP32[r70>>2],12,13088,162);HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]=r66;r66=r56+(HEAP32[r70>>2]*12&-1)|0;r58=0;while(1){if((r58|0)>=(r93|0)){break}_compress_table(HEAP32[HEAP32[HEAP32[r87>>2]+(r85<<2)>>2]+(r58<<2)>>2],r75,r57,HEAP32[r70>>2]);r48=HEAP32[r70>>2];r53=0;while(1){if((r53|0)>=(r48|0)){break}if((HEAP16[r75+(r53<<1)>>1]|0)==-1){break}r53=r53+1|0}if((HEAP16[r75>>1]|0)==-1){HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)>>2]=0;HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)+4>>2]=0;HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)+8>>2]=0}else{r48=___ckd_calloc__(r53,2,13088,174);HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)>>2]=r48;_memcpy(HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)>>2],r67,r53<<1)|0;r48=___ckd_calloc__(HEAP32[r70>>2],2,13088,178);HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)+4>>2]=r48;_memcpy(HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)+4>>2],r46,HEAP32[r70>>2]<<1)|0;HEAP32[HEAP32[HEAP32[r69>>2]+(r85<<2)>>2]+(r58*12&-1)+8>>2]=r53}r58=r58+1|0}r85=r85+1|0;r56=r66}_free(r67);_free(r46);_err_msg(1,13088,196,38624,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r56,HEAP32[r4+8>>2]=(r56|0)/1024&-1,r4));STACKTOP=r4;r85=r84;if((r84|0)!=0){r69=HEAP32[r85>>2];if((r69|0)!=0){_free(HEAP32[r69>>2])}_free(HEAP32[r85>>2])}_free(r84);HEAP32[r60>>2]=r88;if((r74|0)==0){r97=-1;STACKTOP=r5;return r97}r85=r2+4|0;do{if((_hash_table_lookup(HEAP32[r85>>2],7760,r37)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=7760,r4));STACKTOP=r4;r132=0}else{r69=HEAP32[r37>>2];if((r69|0)==0){r132=0;break}r132=HEAPF64[r69>>3]&-1|0}}while(0);do{if((_hash_table_lookup(HEAP32[r85>>2],15392,r36)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=15392,r4));STACKTOP=r4}else{r74=HEAP32[r36>>2];if((r74|0)==0){break}r88=HEAP32[r74>>2];if((r88|0)==0){break}if((_ps_set_kws(r1,34888,r88)|0)!=0){r97=-1;STACKTOP=r5;return r97}HEAP32[r35>>2]=0;_hash_table_lookup(HEAP32[r51>>2],34888,r35);r88=HEAP32[r35>>2];if((r88|0)==0){break}HEAP32[r1+28>>2]=r88}}while(0);do{if((_hash_table_lookup(HEAP32[r85>>2],24792,r34)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=24792,r4));STACKTOP=r4}else{r88=HEAP32[r34>>2];if((r88|0)==0){break}r74=HEAP32[r88>>2];if((r74|0)==0){break}r88=HEAP32[r52>>2];r84=_fopen(r74,26184);if((r84|0)==0){r56=___errno_location();r46=HEAP32[r56>>2];r56=_malloc(46);_memcpy(r56,23040,41)|0;r67=r56+_strlen(r56)|0;HEAP8[r67]=HEAP8[6400];HEAP8[r67+1|0]=HEAP8[6401];HEAP8[r67+2|0]=HEAP8[6402];HEAP8[r67+3|0]=HEAP8[6403];HEAP8[r67+4|0]=HEAP8[6404];HEAP8[r67+5|0]=HEAP8[6405];r67=_strerror(r46);_err_msg(4,34544,750,r56,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r74,HEAP32[r4+8>>2]=r67,r4));STACKTOP=r4;_free(r56);r97=-1;STACKTOP=r5;return r97}HEAP32[r30>>2]=0;r56=_hash_table_new(32,0);HEAP32[r28>>2]=0;HEAP32[r29>>2]=0;while(1){r133=_nextline_str2words(r84,r30,r29,r28);if((r133|0)<0){r3=288;break}r134=HEAP32[r28>>2];r67=HEAP32[r134>>2];if((HEAP8[r67]|0)==70){r135=r67;r136=49256}else{continue}while(1){r67=r135+1|0;r74=r136+1|0;r137=HEAP8[r67];r138=HEAP8[r74];if(r137<<24>>24!=r138<<24>>24|r137<<24>>24==0|r138<<24>>24==0){break}else{r135=r67;r136=r74}}if(r137<<24>>24==r138<<24>>24){r3=292;break}}L402:do{if(r3==288){_err_msg(4,34544,566,6632,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=49256,r4));STACKTOP=r4;r139=0;r140=0;r141=0;r3=370}else if(r3==292){if((r133|0)>2){_err_msg(4,34544,573,47768,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=0;r140=0;r141=0;r3=370;break}if((r133|0)==2){r142=___ckd_salloc__(HEAP32[r134+4>>2],34544,583)}else{_err_msg(3,34544,586,46144,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;r142=___ckd_salloc__(44528,34544,587)}do{if((_nextline_str2words(r84,r30,r29,r28)|0)==2){r66=HEAP32[r28>>2];r53=HEAP32[r66>>2];r74=(HEAP8[r53]|0)==78;if(r74){r143=r53;r144=42912}else{break}while(1){r67=r143+1|0;r46=r144+1|0;r145=HEAP8[r67];r146=HEAP8[r46];if(r145<<24>>24!=r146<<24>>24|r145<<24>>24==0|r146<<24>>24==0){break}else{r143=r67;r144=r46}}if(r145<<24>>24!=r146<<24>>24){if(r74){r147=r53;r148=41864}else{break}while(1){r46=r147+1|0;r67=r148+1|0;r149=HEAP8[r46];r150=HEAP8[r67];if(r149<<24>>24!=r150<<24>>24|r149<<24>>24==0|r150<<24>>24==0){break}else{r147=r46;r148=r67}}if(r149<<24>>24!=r150<<24>>24){break}}r53=_sscanf(HEAP32[r66+4>>2],40592,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r33,r4));STACKTOP=r4;if((r53|0)!=1){break}r53=HEAP32[r33>>2];if((r53|0)<1){break}r74=_fsg_model_init(r142,r88,r132,r53);_free(r142);do{if((_nextline_str2words(r84,r30,r29,r28)|0)==2){r53=HEAP32[r28>>2];r67=HEAP32[r53>>2];r46=(HEAP8[r67]|0)==83;if(r46){r151=r67;r152=38072}else{break}while(1){r69=r151+1|0;r70=r152+1|0;r153=HEAP8[r69];r154=HEAP8[r70];if(r153<<24>>24!=r154<<24>>24|r153<<24>>24==0|r154<<24>>24==0){break}else{r151=r69;r152=r70}}if(r153<<24>>24!=r154<<24>>24){if(r46){r155=r67;r156=36832}else{break}while(1){r70=r155+1|0;r69=r156+1|0;r157=HEAP8[r70];r158=HEAP8[r69];if(r157<<24>>24!=r158<<24>>24|r157<<24>>24==0|r158<<24>>24==0){break}else{r155=r70;r156=r69}}if(r157<<24>>24!=r158<<24>>24){break}}r67=r74+36|0;r46=_sscanf(HEAP32[r53+4>>2],40592,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r67,r4));STACKTOP=r4;if((r46|0)!=1){break}r46=HEAP32[r67>>2];if((r46|0)<0){break}r67=r74+32|0;if((r46|0)>=(HEAP32[r67>>2]|0)){break}do{if((_nextline_str2words(r84,r30,r29,r28)|0)==2){r46=HEAP32[r28>>2];r69=HEAP32[r46>>2];r70=(HEAP8[r69]|0)==70;if(r70){r159=r69;r160=34760}else{break}while(1){r75=r159+1|0;r57=r160+1|0;r161=HEAP8[r75];r162=HEAP8[r57];if(r161<<24>>24!=r162<<24>>24|r161<<24>>24==0|r162<<24>>24==0){break}else{r159=r75;r160=r57}}if(r161<<24>>24!=r162<<24>>24){if(r70){r163=r69;r164=33176}else{break}while(1){r57=r163+1|0;r75=r164+1|0;r165=HEAP8[r57];r166=HEAP8[r75];if(r165<<24>>24!=r166<<24>>24|r165<<24>>24==0|r166<<24>>24==0){break}else{r163=r57;r164=r75}}if(r165<<24>>24!=r166<<24>>24){break}}r69=r74+40|0;r70=_sscanf(HEAP32[r46+4>>2],40592,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r69,r4));STACKTOP=r4;if((r70|0)!=1){break}r70=HEAP32[r69>>2];if((r70|0)<0){break}if((r70|0)>=(HEAP32[r67>>2]|0)){break}r70=r88+48|0;r69=r88+9|0;r75=r74+44|0;r57=r25;r87=r74+48|0;r93=0;r77=0;r83=0;r68=0;r59=0;L453:while(1){r58=r93;r167=r77;r90=r59;L455:while(1){while(1){r48=_nextline_str2words(r84,r30,r29,r28);if((r48|0)<1){r3=333;break L453}r49=HEAP32[r28>>2];r82=HEAP32[r49>>2];r124=HEAP8[r82];if(r124<<24>>24==70){r126=r82;r127=30232;while(1){r78=r126+1|0;r72=r127+1|0;r168=HEAP8[r78];r169=HEAP8[r72];if(r168<<24>>24!=r169<<24>>24|r168<<24>>24==0|r169<<24>>24==0){break}else{r126=r78;r127=r72}}if(r168<<24>>24==r169<<24>>24){r3=337;break L453}}r127=r124<<24>>24==84;if(r127){r170=r82;r171=29448}else{r3=353;break L453}while(1){r126=r170+1|0;r72=r171+1|0;r172=HEAP8[r126];r173=HEAP8[r72];if(r172<<24>>24!=r173<<24>>24|r172<<24>>24==0|r173<<24>>24==0){break}else{r170=r126;r171=r72}}if(r172<<24>>24!=r173<<24>>24){if(r127){r174=r82;r175=28624}else{r3=353;break L453}while(1){r124=r174+1|0;r72=r175+1|0;r176=HEAP8[r124];r177=HEAP8[r72];if(r176<<24>>24!=r177<<24>>24|r176<<24>>24==0|r177<<24>>24==0){break}else{r174=r124;r175=r72}}if(r176<<24>>24!=r177<<24>>24){r3=353;break L453}}if((r48-4|0)>>>0>=2){r3=350;break L453}r82=_sscanf(HEAP32[r49+4>>2],40592,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r31,r4));STACKTOP=r4;if((r82|0)!=1){r3=350;break L453}r82=_sscanf(HEAP32[HEAP32[r28>>2]+8>>2],40592,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r32,r4));STACKTOP=r4;if((r82|0)!=1){r3=350;break L453}r82=HEAP32[r31>>2];if((r82|0)<0){r3=350;break L453}r127=HEAP32[r67>>2];if((r82|0)>=(r127|0)){r3=350;break L453}r82=HEAP32[r32>>2];if(!((r82|0)>=0&(r82|0)<(r127|0))){r3=350;break L453}r127=_atof_c(HEAP32[HEAP32[r28>>2]+12>>2]);if(r127<=0|r127>1){r3=352;break L453}r82=Math_log(r127);r178=((r82*HEAPF64[r70>>3]&-1)>>HEAP8[r69])*HEAPF32[r75>>2]&-1;if((r48|0)>4){break}if((_fsg_model_null_trans_add(r74,HEAP32[r31>>2],HEAP32[r32>>2],r178)|0)==1){break L455}}r82=_hash_table_lookup(r56,HEAP32[HEAP32[r28>>2]+16>>2],r27);do{if((r82|0)==0){r179=r58;r180=HEAP32[r27>>2]}else{if((r82|0)>=0){r179=r58;r180=r90;break}r127=___ckd_salloc__(HEAP32[HEAP32[r28>>2]+16>>2],34544,687);r72=_key2hash(r56,r127);_enter(r56,r72,r127,_strlen(r127),r58,0);r179=r58+1|0;r180=r58}}while(0);_fsg_model_trans_add(r74,HEAP32[r31>>2],HEAP32[r32>>2],r178,r180);r58=r179;r167=r167+1|0;r90=r180}r82=HEAP32[r31>>2];HEAP32[r25>>2]=HEAP32[r32>>2];r127=HEAP32[HEAP32[r87>>2]+(r82<<3)>>2];if((r127|0)==0){r181=0}else{r82=(_hash_table_lookup_bkey(r127,r57,r26)|0)<0;r181=r82?0:HEAP32[r26>>2]}r93=r58;r77=r167;r83=r83+1|0;r68=_glist_add_ptr(r68,r181);r59=r90}if(r3==333){_err_msg(4,34544,645,30936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=r74;r140=0;r141=r68;r3=370;break L402}else if(r3==337){r59=r56+8|0;r77=HEAP32[r59>>2];_err_msg(1,34544,705,25640,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=HEAP32[r67>>2],HEAP32[r4+8>>2]=r77,HEAP32[r4+16>>2]=r167,HEAP32[r4+24>>2]=r83,r4));STACKTOP=r4;r77=HEAP32[r59>>2];HEAP32[r74+8>>2]=r77;r59=r77+10|0;HEAP32[r74+12>>2]=r59;r77=___ckd_calloc__(r59,4,34544,711);r59=r74+16|0;HEAP32[r59>>2]=r77;r77=_hash_table_iter(r56);while(1){if((r77|0)==0){break}r93=HEAP32[r77+4>>2];HEAP32[HEAP32[r59>>2]+(HEAP32[r93+8>>2]<<2)>>2]=HEAP32[r93>>2];r77=_hash_table_iter_next(r77)}_hash_table_free(r56);r77=_fsg_model_null_trans_closure(r74,r68);while(1){if((r77|0)==0){break}r59=HEAP32[r77+8>>2];_free(r77);r77=r59}_free(HEAP32[r29>>2]);_free(HEAP32[r28>>2]);r182=r74;break L402}else if(r3==350){_err_msg(4,34544,664,27712,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=r74;r140=0;r141=r68;r3=370;break L402}else if(r3==352){_err_msg(4,34544,672,26584,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=r74;r140=0;r141=r68;r3=370;break L402}else if(r3==353){_err_msg(4,34544,678,30936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=r74;r140=0;r141=r68;r3=370;break L402}}}while(0);_err_msg(4,34544,632,31856,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=r74;r140=0;r141=0;r3=370;break L402}}while(0);_err_msg(4,34544,618,35544,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=r74;r140=0;r141=0;r3=370;break L402}}while(0);_err_msg(4,34544,599,39184,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r30>>2],r4));STACKTOP=r4;r139=0;r140=r142;r141=0;r3=370}}while(0);if(r3==370){r88=_hash_table_iter(r56);while(1){if((r88|0)==0){r183=r141;break}_free(HEAP32[HEAP32[r88+4>>2]>>2]);r88=_hash_table_iter_next(r88)}while(1){if((r183|0)==0){break}r88=HEAP32[r183+8>>2];_free(r183);r183=r88}_hash_table_free(r56);_free(r140);_free(HEAP32[r29>>2]);_free(HEAP32[r28>>2]);_fsg_model_free(r139);r182=0}_fclose(r84);if((r182|0)==0){r97=-1;STACKTOP=r5;return r97}if((_ps_set_fsg(r1,34888,r182)|0)!=0){r97=-1;STACKTOP=r5;return r97}HEAP32[r24>>2]=0;_hash_table_lookup(HEAP32[r51>>2],34888,r24);r88=HEAP32[r24>>2];if((r88|0)==0){break}HEAP32[r1+28>>2]=r88}}while(0);do{if((_hash_table_lookup(HEAP32[r85>>2],18696,r23)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=18696,r4));STACKTOP=r4}else{r88=HEAP32[r23>>2];if((r88|0)==0){break}r66=HEAP32[r88>>2];if((r66|0)==0){break}r88=_jsgf_parse_file(r66,0);if((r88|0)==0){r97=-1;STACKTOP=r5;return r97}do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],24704,r22)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=24704,r4));STACKTOP=r4;r3=393}else{r67=HEAP32[r22>>2];if((r67|0)==0){r3=393;break}r53=HEAP32[r67>>2];if((r53|0)==0){r3=393;break}r67=_string_join(23296,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r53,HEAP32[r4+8>>2]=22416,HEAP32[r4+16>>2]=0,r4));STACKTOP=r4;if((_hash_table_lookup(HEAP32[r88+16>>2],r67,r21)|0)<0){r184=0}else{r184=HEAP32[r21>>2]}_free(r67);if((r184|0)!=0){r185=r184;break}_err_msg(4,49568,597,22032,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;r97=-1;STACKTOP=r5;return r97}}while(0);do{if(r3==393){r84=_hash_table_iter(HEAP32[r88+16>>2]);r56=0;while(1){if((r84|0)==0){r186=r56;break}r53=HEAP32[HEAP32[r84+4>>2]+8>>2];r187=r53;if((HEAP32[r53+8>>2]|0)!=0){r3=396;break}r84=_hash_table_iter_next(r84);r56=r187}if(r3==396){_free(r84);r186=r187}if((r186|0)!=0){r185=r186;break}_err_msg(4,49568,613,21568,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r66,r4));STACKTOP=r4;r97=-1;STACKTOP=r5;return r97}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],7760,r20)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=7760,r4));STACKTOP=r4;r188=0}else{r66=HEAP32[r20>>2];if((r66|0)==0){r188=0;break}r188=HEAPF64[r66>>3]}}while(0);r66=HEAP32[r52>>2];r56=r88+36|0;r53=r56;while(1){r67=HEAP32[r53>>2];if((r67|0)==0){break}_free(HEAP32[r67>>2]);r53=r67+8|0}r53=HEAP32[r56>>2];while(1){if((r53|0)==0){break}r67=HEAP32[r53+8>>2];_free(r53);r53=r67}HEAP32[r56>>2]=0;r53=r88+32|0;HEAP32[r53>>2]=1;r67=_expand_rule(r88,r185,0,-1);if((r67|0)==-1){r77=HEAP32[r53>>2];HEAP32[r53>>2]=r77+1;r59=_malloc(12);if((r59|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=216,r4));STACKTOP=r4}if((HEAP32[r59-4>>2]&3|0)!=0){_memset(r59,0,12)|0}HEAP32[r59+4>>2]=0;HEAP32[r59+8>>2]=r77;HEAP32[r59>>2]=0;r83=_glist_add_ptr(HEAP32[r56>>2],r59);HEAP32[r56>>2]=r83;r189=r77}else{r189=r67}r67=_fsg_model_init(HEAP32[r185+4>>2],r66,r188,HEAP32[r53>>2]);HEAP32[r67+36>>2]=0;HEAP32[r67+40>>2]=r189;r53=HEAP32[r56>>2];r77=0;while(1){if((r53|0)==0){break}r83=r53+8|0;r59=HEAP32[r83>>2];HEAP32[r83>>2]=r77;r77=r53;r53=r59}HEAP32[r56>>2]=r77;r53=r66+48|0;r88=r66+9|0;r59=r66+64|0;r83=r77;while(1){if((r83|0)==0){break}r93=HEAP32[r83>>2];r57=HEAP32[r93>>2];do{if((r57|0)==0){_fsg_model_null_trans_add(r67,HEAP32[r93+4>>2],HEAP32[r93+8>>2],0)}else{r87=HEAP32[r57>>2];if((HEAP8[r87]|0)==60){r75=HEAPF32[r57+8>>2];if(r75>0){r69=Math_log(r75);r190=(r69*HEAPF64[r53>>3]&-1)>>HEAP8[r88]}else{r190=HEAP32[r59>>2]}_fsg_model_null_trans_add(r67,HEAP32[r93+4>>2],HEAP32[r93+8>>2],r190);break}else{r69=_fsg_model_word_add(r67,r87);r87=HEAPF32[HEAP32[r93>>2]+8>>2];if(r87>0){r75=Math_log(r87);r191=(r75*HEAPF64[r53>>3]&-1)>>HEAP8[r88]}else{r191=HEAP32[r59>>2]}_fsg_model_trans_add(r67,HEAP32[r93+4>>2],HEAP32[r93+8>>2],r191,r69);break}}}while(0);r83=HEAP32[r83+8>>2]}r83=_fsg_model_null_trans_closure(r67,0);while(1){if((r83|0)==0){break}r59=HEAP32[r83+8>>2];_free(r83);r83=r59}r83=_ps_set_fsg(r1,34888,r67);_fsg_model_free(r67);if((r83|0)!=0){r97=-1;STACKTOP=r5;return r97}HEAP32[r19>>2]=0;_hash_table_lookup(HEAP32[r51>>2],34888,r19);r83=HEAP32[r19>>2];if((r83|0)==0){r97=-1;STACKTOP=r5;return r97}else{HEAP32[r1+28>>2]=r83;break}}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],34984,r18)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=34984,r4));STACKTOP=r4}else{r83=HEAP32[r18>>2];if((r83|0)==0){break}r59=HEAP32[r83>>2];if((r59|0)==0){break}r83=_ngram_model_read(HEAP32[r55>>2],r59,HEAP32[r52>>2]);if((r83|0)==0){r97=-1;STACKTOP=r5;return r97}r59=_ps_set_lm(r1,34888,r83);_ngram_model_free(r83);if((r59|0)!=0){r97=-1;STACKTOP=r5;return r97}HEAP32[r17>>2]=0;_hash_table_lookup(HEAP32[r51>>2],34888,r17);r59=HEAP32[r17>>2];if((r59|0)==0){r97=-1;STACKTOP=r5;return r97}else{HEAP32[r1+28>>2]=r59;break}}}while(0);L628:do{if((_hash_table_lookup(HEAP32[HEAP32[r55>>2]+4>>2],33432,r16)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=33432,r4));STACKTOP=r4}else{r59=HEAP32[r16>>2];if((r59|0)==0){break}r83=HEAP32[r59>>2];if((r83|0)==0){break}r59=HEAP32[r55>>2];r88=HEAP32[r52>>2];r53=r14|0;r77=_hash_table_new(0,0);r66=_fopen(r83,26184);do{if((r66|0)==0){r56=___errno_location();r93=HEAP32[r56>>2];r56=_malloc(23);_memcpy(r56,26208,18)|0;r57=r56+_strlen(r56)|0;HEAP8[r57]=HEAP8[6400];HEAP8[r57+1|0]=HEAP8[6401];HEAP8[r57+2|0]=HEAP8[6402];HEAP8[r57+3|0]=HEAP8[6403];HEAP8[r57+4|0]=HEAP8[6404];HEAP8[r57+5|0]=HEAP8[6405];r57=_strerror(r93);_err_msg(4,30416,198,r56,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r83,HEAP32[r4+8>>2]=r57,r4));STACKTOP=r4;_free(r56)}else{r56=_strrchr(r83,47);do{if((r56|0)==0){r57=_strrchr(r83,92);if((r57|0)!=0){r192=r57;r3=456;break}_err_msg(1,30416,212,14488,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r83,r4));STACKTOP=r4;r193=0;r194=1}else{r192=r56;r3=456}}while(0);do{if(r3==456){r56=r192-r83|0;r57=___ckd_calloc__(r56+2|0,1,30416,206);_memcpy(r57,r83,r56+1|0)|0;_err_msg(1,30416,212,14488,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r83,r4));STACKTOP=r4;r56=(r57|0)==0;if(r56){r193=r57;r194=r56;break}_err_msg(1,30416,214,11576,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r57,r4));STACKTOP=r4;r193=r57;r194=r56}}while(0);r56=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;L643:do{if((r56|0)==1){if((HEAP8[r53]|0)==123){r195=r53;r196=7768}else{r197=r194;r3=533;break}while(1){r57=r195+1|0;r93=r196+1|0;r198=HEAP8[r57];r199=HEAP8[r93];if(r198<<24>>24!=r199<<24>>24|r198<<24>>24==0|r199<<24>>24==0){break}else{r195=r57;r196=r93}}if(r198<<24>>24!=r199<<24>>24){r197=r194;r3=533;break}r74=r12|0;r93=r13|0;r57=r13+4|0;L649:while(1){r84=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;r69=HEAP8[r53];r200=r69<<24>>24==125;if((r84|0)!=1){r3=525;break}if(r200){r84=r53;r75=6480;while(1){r87=r84+1|0;r70=r75+1|0;r46=HEAP8[r87];r82=HEAP8[r70];r201=r46<<24>>24!=r82<<24>>24;if(r201|r46<<24>>24==0|r82<<24>>24==0){break}else{r84=r87;r75=r70}}if(!r201){r202=r194;r3=526;break}}if(r194|r69<<24>>24==47){r203=___ckd_salloc__(r53,30416,225)}else{r75=_string_join(r193,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r53,HEAP32[r4+8>>2]=0,r4));STACKTOP=r4;r203=r75}_err_msg(1,30416,226,49032,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r203,r4));STACKTOP=r4;r75=_fopen_comp(r203,26184,r11);if((r75|0)==0){r3=471;break}else{r204=0;r205=0;r206=0;r207=0}L661:while(1){r84=(r204|0)==0;r70=r205;r87=r206;L663:while(1){while(1){if((_feof(r75)|0)!=0){r208=0;r209=r70;r210=r87;break L661}if((_fgets(r74,512,r75)|0)==0){r208=0;r209=r70;r210=r87;break L661}r82=_str2words(r74,r93,2);if((r82|0)<1){continue}r211=(r82|0)==2;if(!r84){break}if(!r211){continue}r82=HEAP32[r93>>2];if((HEAP8[r82]|0)==76){r212=r82;r213=26472}else{continue}while(1){r82=r212+1|0;r46=r213+1|0;r214=HEAP8[r82];r215=HEAP8[r46];if(r214<<24>>24!=r215<<24>>24|r214<<24>>24==0|r215<<24>>24==0){break}else{r212=r82;r213=r46}}if(r214<<24>>24==r215<<24>>24){r3=512;break L663}}if(r211){r90=HEAP32[r93>>2];if((HEAP8[r90]|0)==69){r58=r90;r90=27624;while(1){r46=r58+1|0;r82=r90+1|0;r216=HEAP8[r46];r217=HEAP8[r82];if(r216<<24>>24!=r217<<24>>24|r216<<24>>24==0|r217<<24>>24==0){break}else{r58=r46;r90=r82}}if(r216<<24>>24==r217<<24>>24){break}}r218=_atof_c(HEAP32[r57>>2])}else{r218=1}r90=_glist_add_ptr(r70,___ckd_salloc__(HEAP32[r93>>2],11488,1178));r70=r90;r87=_glist_add_float32(r87,r218)}if(r3==512){r3=0;r204=1;r205=r70;r206=r87;r207=___ckd_salloc__(HEAP32[r57>>2],11488,1188);continue}if((r207|0)==0){r208=-1;r209=r70;r210=r87;break}r84=HEAP32[r57>>2];r68=HEAP8[r84];r90=HEAP8[r207];if(r68<<24>>24!=r90<<24>>24|r68<<24>>24==0|r90<<24>>24==0){r219=r68;r220=r90}else{r90=r84;r84=r207;while(1){r68=r90+1|0;r58=r84+1|0;r82=HEAP8[r68];r46=HEAP8[r58];if(r82<<24>>24!=r46<<24>>24|r82<<24>>24==0|r46<<24>>24==0){r219=r82;r220=r46;break}else{r90=r68;r84=r58}}}if(r219<<24>>24!=r220<<24>>24){r208=-1;r209=r70;r210=r87;break}r84=_malloc(12);if((r84|0)==0){r3=489;break L649}if((HEAP32[r84-4>>2]&3|0)!=0){_memset(r84,0,12)|0}r221=r84;r90=r70;r222=0;while(1){if((r90|0)==0){r223=r87;r224=0;break}r58=r90+8|0;r68=HEAP32[r58>>2];HEAP32[r58>>2]=r222;r222=r90;r90=r68}while(1){if((r223|0)==0){r225=0;r226=r222;break}r90=r223+8|0;r87=HEAP32[r90>>2];HEAP32[r90>>2]=r224;r224=r223;r223=r87}while(1){if((r226|0)==0){break}r225=r225+1|0;r226=HEAP32[r226+8>>2]}r87=r84+8|0;HEAP32[r87>>2]=r225;r90=___ckd_calloc__(r225,4,11488,1145);r70=r84;HEAP32[r70>>2]=r90;r90=___ckd_calloc__(HEAP32[r87>>2],4,11488,1147);r68=r84+4|0;HEAP32[r68>>2]=r90;r90=0;r58=r222;r46=r224;while(1){if((r90|0)>=(HEAP32[r87>>2]|0)){break}HEAP32[HEAP32[r70>>2]+(r90<<2)>>2]=HEAP32[r58>>2];HEAPF32[HEAP32[r68>>2]+(r90<<2)>>2]=HEAPF64[r46>>3];r90=r90+1|0;r58=HEAP32[r58+8>>2];r46=HEAP32[r46+8>>2]}r46=_key2hash(r77,r207);if((_enter(r77,r46,r207,_strlen(r207),r84,0)|0)==(r84|0)){r227=r222}else{r3=501;break}while(1){if((r227|0)==0){r228=r224;break}r46=HEAP32[r227+8>>2];_free(r227);r227=r46}while(1){if((r228|0)==0){r204=0;r205=0;r206=0;r207=0;continue L661}r84=HEAP32[r228+8>>2];_free(r228);r228=r84}}if(r3==501){r3=0;_classdef_free(r221);r208=-1;r209=r222;r210=r224}if((HEAP32[r11>>2]|0)==0){_fclose(r75);r229=r209}else{_pclose(r75);r229=r209}while(1){if((r229|0)==0){r230=r209;break}_free(HEAP32[r229>>2]);r229=HEAP32[r229+8>>2]}while(1){if((r230|0)==0){r231=r210;break}r75=HEAP32[r230+8>>2];_free(r230);r230=r75}while(1){if((r231|0)==0){break}r75=HEAP32[r231+8>>2];_free(r231);r231=r75}_free(r207);if((r208|0)<0){r3=523;break}_free(r203)}if(r3==471){_err_msg(4,11488,1111,28512,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r203,r4));STACKTOP=r4;r3=523}else if(r3==489){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=11488,HEAP32[r4+24>>2]=1140,r4));STACKTOP=r4}else if(r3==525){if(r200){r202=r194;r3=526}}if(r3==523){_free(r203);r232=0;r233=0;r234=0;r3=624;break}do{if(r3==526){r57=r53;r93=6480;while(1){r74=r57+1|0;r75=r93+1|0;r235=HEAP8[r74];r236=HEAP8[r75];if(r235<<24>>24!=r236<<24>>24|r235<<24>>24==0|r236<<24>>24==0){break}else{r57=r74;r93=r75}}if(r235<<24>>24!=r236<<24>>24){break}r93=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;if((r93|0)==1){r197=r202;r3=533;break L643}HEAP8[r53]=0;r197=r202;r3=533;break L643}}while(0);_err_msg(4,30416,235,47544,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r83,r4));STACKTOP=r4;r232=0;r233=0;r234=0;r3=624}else{HEAP8[r53]=0;r197=r194;r3=533}}while(0);L749:do{if(r3==533){r56=0;r93=0;L751:while(1){r237=r56;r238=r93;r57=HEAP8[r53];while(1){if(r57<<24>>24==0){r3=613;break L751}do{if(r197){r3=539}else{if(r57<<24>>24==92|r57<<24>>24==47){r3=539;break}r75=_string_join(r193,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r53,HEAP32[r4+8>>2]=0,r4));STACKTOP=r4;r239=r75}}while(0);if(r3==539){r3=0;r239=___ckd_salloc__(r53,30416,255)}_err_msg(1,30416,256,46024,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r239,r4));STACKTOP=r4;r75=_ngram_model_read(r59,r239,r88);if((r75|0)==0){r3=541;break L751}r74=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;if((r74|0)!=1){r3=543;break L751}_free(r239);r240=_glist_add_ptr(r237,r75);r241=_glist_add_ptr(r238,___ckd_salloc__(r53,30416,269));r74=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;if((r74|0)!=1){HEAP8[r53]=0;r237=r240;r238=r241;r57=0;continue}r74=HEAP8[r53];if(r74<<24>>24==123){r242=r53;r243=7768}else{r237=r240;r238=r241;r57=r74;continue}while(1){r74=r242+1|0;r69=r243+1|0;r244=HEAP8[r74];r245=HEAP8[r69];if(r244<<24>>24!=r245<<24>>24|r244<<24>>24==0|r245<<24>>24==0){break}else{r242=r74;r243=r69}}if(r244<<24>>24!=r245<<24>>24){r56=r240;r93=r241;continue L751}r69=r75+52|0;r74=r75+17|0;r84=r75+20|0;r46=r75+60|0;while(1){r58=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;r246=(HEAP8[r53]|0)==125;if((r58|0)!=1){r3=606;break}if(r246){r58=r53;r90=6480;while(1){r68=r58+1|0;r70=r90+1|0;r87=HEAP8[r68];r82=HEAP8[r70];r247=r87<<24>>24!=r82<<24>>24;if(r247|r87<<24>>24==0|r82<<24>>24==0){break}else{r58=r68;r90=r70}}if(!r247){r248=r53;r249=6480;break}}if((_hash_table_lookup(r77,r53,r15)|0)==-1){r3=554;break L751}r90=HEAP32[r15>>2];r58=HEAP32[r90>>2];r70=HEAP32[r90+4>>2];r68=r90+8|0;r90=HEAP32[r68>>2];r82=_hash_table_lookup(HEAP32[r69>>2],r53,r10);do{if((r82|0)==0){r250=HEAP32[r10>>2]}else{if((r82|0)!=-1){r250=0;break}r87=_hash_table_lookup(HEAP32[r69>>2],40464,r9);if((r87|0)==0){r251=HEAP32[r9>>2]}else{if((r87|0)==-1){r250=-1;break}else{r251=0}}r250=r251}}while(0);r82=_hash_table_lookup(HEAP32[r69>>2],40464,r8);if((r82|0)==0){r252=HEAP32[r8>>2];r3=565}else{if((r82|0)==-1){r253=-1}else{r252=0;r3=565}}if(r3==565){r3=0;r253=r252}if((r250|0)==(r253|0)){r82=_ngram_model_add_word(r75,r53,1);if((r82|0)==-1){r232=0;r233=r241;r234=r240;r3=624;break L749}else{r254=r82}}else{r254=r250}r82=HEAP8[r74];if(r82<<24>>24==-128){r3=569;break L751}r87=r82&255;r82=0;r127=0;r72=-1;while(1){if((r82|0)>=(r90|0)){r255=r127;r256=0;break}r124=_ngram_add_word_internal(r75,HEAP32[r58+(r82<<2)>>2],r87);if((r124|0)==-1){r232=0;r233=r241;r234=r240;r3=624;break L749}r126=_glist_add_float32(r127,HEAPF32[r70+(r82<<2)>>2]);r82=r82+1|0;r127=r126;r72=(r72|0)==-1?r124&16777215:r72}while(1){if((r255|0)==0){break}r127=r255+8|0;r82=HEAP32[r127>>2];HEAP32[r127>>2]=r256;r256=r255;r255=r82}r82=_malloc(28);if((r82|0)==0){r3=579;break L751}if((HEAP32[r82-4>>2]&3|0)!=0){_memset(r82,0,28)|0}r127=r82;HEAP32[r82>>2]=r254;HEAP32[r82+4>>2]=r72;r70=0;r58=r256;while(1){if((r58|0)==0){break}r70=r70+1|0;r58=HEAP32[r58+8>>2]}HEAP32[r82+8>>2]=r70;r58=___ckd_calloc__(r70,4,11488,891);r72=r82+12|0;HEAP32[r72>>2]=r58;HEAP32[r82+16>>2]=0;HEAP32[r82+20>>2]=0;r58=r256;r90=0;while(1){if((r58|0)==0){break}r124=r90+HEAPF64[r58>>3];r58=HEAP32[r58+8>>2];r90=r124}r58=r90;L819:do{if(r58>1.1|r58<.9){_err_msg(3,11488,899,35432,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r4>>3]=r58,r4));STACKTOP=r4;r70=r256;while(1){if((r70|0)==0){r257=r256;r258=0;break L819}r124=r70|0;HEAPF64[r124>>3]=HEAPF64[r124>>3]/r58;r70=HEAP32[r70+8>>2]}}else{r257=r256;r258=0}}while(0);while(1){if((r257|0)==0){r259=r256;break}r58=HEAP32[r84>>2];r90=HEAPF64[r257>>3];if(r90>0){r70=Math_log(r90);r260=(r70*HEAPF64[r58+48>>3]&-1)>>HEAP8[r58+9|0]}else{r260=HEAP32[r58+64>>2]}HEAP32[HEAP32[r72>>2]+(r258<<2)>>2]=r260;r257=HEAP32[r257+8>>2];r258=r258+1|0}while(1){if((r259|0)==0){break}r72=HEAP32[r259+8>>2];_free(r259);r259=r72}if((r82|0)==0){r232=0;r233=r241;r234=r240;r3=624;break L749}r72=HEAP8[r74]+1&255;HEAP8[r74]=r72;r58=HEAP32[r46>>2];do{if((r58|0)==0){r70=_malloc(4);if((r70|0)==0){r3=602;break L751}if((HEAP32[r70-4>>2]&3|0)==0){r261=r70;break}r90=r70;tempBigInt=0;HEAP8[r90]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r90+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r90+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r90+3|0]=tempBigInt;r261=r70}else{r262=(r72&255)<<2;r70=_realloc(r58,r262);if((r70|0)==0){r3=604;break L751}else{r261=r70}}}while(0);r58=r261;HEAP32[r46>>2]=r58;HEAP32[r58+(r87<<2)>>2]=r127;r58=HEAP32[r68>>2];_err_msg(1,30416,290,41752,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r53,HEAP32[r4+8>>2]=r58,r4));STACKTOP=r4}if(r3==606){r3=0;if(r246){r248=r53;r249=6480}else{r3=609;break L751}}while(1){r46=r248+1|0;r74=r249+1|0;r263=HEAP8[r46];r264=HEAP8[r74];if(r263<<24>>24!=r264<<24>>24|r263<<24>>24==0|r264<<24>>24==0){break}else{r248=r46;r249=r74}}if(r263<<24>>24!=r264<<24>>24){r3=609;break L751}r74=_fscanf(r66,9448,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;if((r74|0)==1){r56=r240;r93=r241;continue L751}HEAP8[r53]=0;r237=r240;r238=r241;r57=0}}if(r3==541){_free(r239);r232=0;r233=r238;r234=r237;r3=624;break}else if(r3==543){_err_msg(4,30416,263,44368,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r239,r4));STACKTOP=r4;_free(r239);r232=0;r233=r238;r234=r237;r3=624;break}else if(r3==554){_err_msg(4,30416,280,42800,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r53,r4));STACKTOP=r4;r232=0;r233=r241;r234=r240;r3=624;break}else if(r3==569){_err_msg(4,11488,1046,30128,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;r232=0;r233=r241;r234=r240;r3=624;break}else if(r3==579){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=28,HEAP32[r4+16>>2]=11488,HEAP32[r4+24>>2]=886,r4));STACKTOP=r4}else if(r3==602){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=4,HEAP32[r4+16>>2]=11488,HEAP32[r4+24>>2]=1068,r4));STACKTOP=r4}else if(r3==604){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r262,HEAP32[r4+8>>2]=11488,HEAP32[r4+16>>2]=1071,r4));STACKTOP=r4}else if(r3==609){_err_msg(4,30416,293,47544,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r83,r4));STACKTOP=r4;r232=0;r233=r241;r234=r240;r3=624;break}else if(r3==613){_fclose(r66);r93=r237;r56=0;while(1){if((r93|0)==0){r265=r238;r266=0;break}r57=r93+8|0;r74=HEAP32[r57>>2];HEAP32[r57>>2]=r56;r56=r93;r93=r74}while(1){if((r265|0)==0){r267=0;r268=r56;break}r93=r265+8|0;r74=HEAP32[r93>>2];HEAP32[r93>>2]=r266;r266=r265;r265=r74}while(1){if((r268|0)==0){break}r267=r267+1|0;r268=HEAP32[r268+8>>2]}r74=___ckd_calloc__(r267,4,30416,317);r93=r74;r57=___ckd_calloc__(r267,4,30416,318);r46=r57;r84=0;r75=r56;r69=r266;while(1){if((r84|0)>=(r267|0)){break}HEAP32[r93+(r84<<2)>>2]=HEAP32[r75>>2];HEAP32[r46+(r84<<2)>>2]=HEAP32[r69>>2];r84=r84+1|0;r75=HEAP32[r75+8>>2];r69=HEAP32[r69+8>>2]}r69=_ngram_model_set_init(r93,r46,r267);_free(r74);_free(r57);if((r69|0)==0){r232=r69;r233=r266;r234=r56;r3=624;break}else{r269=r69;r270=r266;r271=r56;break}}}}while(0);L873:do{if(r3==624){r69=r234;while(1){if((r69|0)==0){r269=r232;r270=r233;r271=r234;break L873}_ngram_model_free(HEAP32[r69>>2]);r69=HEAP32[r69+8>>2]}}}while(0);r69=r271;while(1){if((r69|0)==0){r272=r270;break}r56=HEAP32[r69+8>>2];_free(r69);r69=r56}while(1){if((r272|0)==0){r273=r270;break}_free(HEAP32[r272>>2]);r272=HEAP32[r272+8>>2]}while(1){if((r273|0)==0){break}r69=HEAP32[r273+8>>2];_free(r273);r273=r69}r69=_hash_table_tolist(r77,0);r56=r69;while(1){if((r56|0)==0){r274=r69;break}r57=HEAP32[r56>>2];_free(HEAP32[r57>>2]);_classdef_free(HEAP32[r57+8>>2]);r56=HEAP32[r56+8>>2]}while(1){if((r274|0)==0){break}r56=HEAP32[r274+8>>2];_free(r274);r274=r56}_hash_table_free(r77);_free(r193);if((r269|0)==0){break}r56=r269;if((HEAP32[r269+68>>2]|0)==0){r275=0}else{r69=_malloc(8);if((r69|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=30416,HEAP32[r4+24>>2]=375,r4));STACKTOP=r4}if((HEAP32[r69-4>>2]&3|0)!=0){r57=r69;r74=r57|0;tempBigInt=0;HEAP8[r74]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r74+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r74+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r74+3|0]=tempBigInt;r74=r57+4|0;tempBigInt=0;HEAP8[r74]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r74+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r74+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r74+3|0]=tempBigInt}HEAP32[r69>>2]=r56;r275=r69}while(1){if((r275|0)==0){break}r69=r275+4|0;r56=HEAP32[r69>>2];r74=r275|0;r57=HEAP32[r74>>2];r46=HEAP32[HEAP32[r57+80>>2]+(r56<<2)>>2];r93=HEAP32[HEAP32[r57+76>>2]+(r56<<2)>>2];_err_msg(1,49568,330,31104,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r46,r4));STACKTOP=r4;r56=(_ps_set_lm(r1,r46,r93)|0)==0;_ngram_model_free(r93);if(!r56){r3=649;break}r56=HEAP32[r69>>2]+1|0;HEAP32[r69>>2]=r56;if((r56|0)!=(HEAP32[HEAP32[r74>>2]+68>>2]|0)){r275=r275;continue}_free(r275);r275=0}if(r3==649){_free(r275);r97=-1;STACKTOP=r5;return r97}do{if((_hash_table_lookup(HEAP32[r85>>2],30272,r7)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=30272,r4));STACKTOP=r4}else{r74=HEAP32[r7>>2];if((r74|0)==0){break}r56=HEAP32[r74>>2];if((r56|0)==0){break}HEAP32[r6>>2]=0;_hash_table_lookup(HEAP32[r51>>2],r56,r6);r56=HEAP32[r6>>2];if((r56|0)==0){break L628}HEAP32[r1+28>>2]=r56;break L628}}while(0);_err_msg(3,49568,343,29560,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;break L628}}while(0);_err_msg(4,49568,322,31992,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r83,r4));STACKTOP=r4;r97=-1;STACKTOP=r5;return r97}}while(0);HEAP32[r1+48>>2]=28688;HEAPF64[r1+56>>3]=0;r85=r1+64|0;HEAP32[r85>>2]=0;HEAP32[r85+4>>2]=0;HEAP32[r85+8>>2]=0;HEAP32[r85+12>>2]=0;HEAP32[r85+16>>2]=0;HEAP32[r85+20>>2]=0;r97=0;STACKTOP=r5;return r97}}while(0);_err_msg(4,41416,371,28368,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=17448,r4));STACKTOP=r4;_dict_free(r79)}}while(0);HEAP32[r61>>2]=0;r97=-1;STACKTOP=r5;return r97}}while(0);_acmod_free(r64);HEAP32[r50>>2]=0;r97=-1;STACKTOP=r5;return r97}function _ps_free_searches(r1){var r2,r3,r4,r5,r6,r7,r8,r9;r2=r1+24|0;r3=HEAP32[r2>>2];if((r3|0)==0){HEAP32[r2>>2]=0;r4=r1+28|0;HEAP32[r4>>2]=0;return}r5=_hash_table_iter(r3);while(1){if((r5|0)==0){break}r3=r5+4|0;_free(HEAP32[HEAP32[r3>>2]>>2]);r6=HEAP32[HEAP32[r3>>2]+8>>2];FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+20>>2]](r6);r5=_hash_table_iter_next(r5)}r5=HEAP32[r2>>2];r6=r5+4|0;r3=r5|0;r7=0;while(1){if((r7|0)>=(HEAP32[r6>>2]|0)){break}r8=HEAP32[HEAP32[r3>>2]+(r7<<4)+12>>2];while(1){if((r8|0)==0){break}r9=HEAP32[r8+12>>2];_free(r8);r8=r9}r8=HEAP32[r3>>2]+(r7<<4)|0;HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;HEAP32[r8+8>>2]=0;HEAP32[r8+12>>2]=0;r7=r7+1|0}HEAP32[r5+8>>2]=0;_hash_table_free(HEAP32[r2>>2]);HEAP32[r2>>2]=0;r4=r1+28|0;HEAP32[r4>>2]=0;return}function _ps_set_kws(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+152|0;r7=r6;r8=r6+112;r9=r6+128;r10=r6+136;r11=r6+144;r12=HEAP32[r1>>2];r13=HEAP32[r1+8>>2];r14=HEAP32[r1+12>>2];r15=HEAP32[r1+16>>2];r16=_malloc(100);if((r16|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=100,HEAP32[r5+16>>2]=39568,HEAP32[r5+24>>2]=396,r5));STACKTOP=r5}if((HEAP32[r16-4>>2]&3|0)!=0){_memset(r16,0,100)|0}_ps_search_init(r16,4888,r12,r13,r14,r15);r15=_malloc(8);if((r15|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=8,HEAP32[r5+16>>2]=39568,HEAP32[r5+24>>2]=400,r5));STACKTOP=r5}if((HEAP32[r15-4>>2]&3|0)!=0){r14=r15;r17=r14|0;tempBigInt=0;HEAP8[r17]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r17+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r17+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r17+3|0]=tempBigInt;r17=r14+4|0;tempBigInt=0;HEAP8[r17]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r17+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r17+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r17+3|0]=tempBigInt}HEAP32[r16+60>>2]=r15;r15=r13+4|0;r13=HEAP32[r15>>2];r17=r12+4|0;do{if((_hash_table_lookup(HEAP32[r17>>2],47184,r11)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=47184,r5));STACKTOP=r5;r4=13}else{r12=HEAP32[r11>>2];if((r12|0)==0){r4=13;break}r14=HEAPF64[r12>>3];if(r14<=0){r4=13;break}r12=Math_log(r14);r18=(r12*HEAPF64[r13+48>>3]&-1)>>HEAP8[r13+9|0]}}while(0);if(r4==13){r18=HEAP32[r13+64>>2]}r13=r16+76|0;HEAP32[r13>>2]=r18>>10;r18=HEAP32[r15>>2];do{if((_hash_table_lookup(HEAP32[r17>>2],34264,r10)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=34264,r5));STACKTOP=r5;r4=19}else{r11=HEAP32[r10>>2];if((r11|0)==0){r4=19;break}r12=HEAPF64[r11>>3];if(r12<=0){r4=19;break}r11=Math_log(r12);r19=(r11*HEAPF64[r18+48>>3]&-1)>>HEAP8[r18+9|0]}}while(0);if(r4==19){r19=HEAP32[r18+64>>2]}r18=r16+80|0;HEAP32[r18>>2]=r19>>10;r19=HEAP32[r15>>2];do{if((_hash_table_lookup(HEAP32[r17>>2],24064,r9)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=24064,r5));STACKTOP=r5;r4=25}else{r15=HEAP32[r9>>2];if((r15|0)==0){r4=25;break}r10=HEAPF64[r15>>3];if(r10<=0){r4=25;break}r15=Math_log(r10);r20=(r15*HEAPF64[r19+48>>3]&-1)>>HEAP8[r19+9|0]}}while(0);if(r4==25){r20=HEAP32[r19+64>>2]}r19=r20>>10;r20=r16+88|0;HEAP32[r20>>2]=r19;r9=HEAP32[r18>>2];_err_msg(1,39568,419,18328,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=HEAP32[r13>>2],HEAP32[r5+8>>2]=r9,HEAP32[r5+16>>2]=r19,r5));STACKTOP=r5;r19=r8|0;r9=_fopen(r3,26184);r13=r16+68|0;if((r9|0)==0){HEAP32[r13>>2]=1;r18=___ckd_calloc__(1,16,39568,351);r17=r16+64|0;HEAP32[r17>>2]=r18;HEAP32[r18+4>>2]=HEAP32[r20>>2];r18=___ckd_salloc__(r3,39568,353);HEAP32[HEAP32[r17>>2]>>2]=r18}else{HEAP32[r13>>2]=0;r18=_lineiter_start(r9);while(1){if((r18|0)==0){break}if((HEAP32[r18+8>>2]|0)!=0){HEAP32[r13>>2]=HEAP32[r13>>2]+1}r18=_lineiter_next(r18)}r18=___ckd_calloc__(HEAP32[r13>>2],16,39568,362);r13=r16+64|0;HEAP32[r13>>2]=r18;_rewind(r9);r18=r16+12|0;r17=r7;r3=r7+4|0;r15=r7+8|0;r10=r7+44|0;r11=r7+76|0;r12=r7+104|0;r14=r7+108|0;r21=r7+100|0;r22=0;r23=_lineiter_start(r9);while(1){if((r23|0)==0){break}r24=HEAP32[r23+8>>2];HEAP32[HEAP32[r13>>2]+(r22<<4)+4>>2]=HEAP32[r20>>2];r25=r23|0;r26=HEAP32[r25>>2];r27=r24;while(1){r28=r27-1|0;r24=HEAP8[r26+r28|0];if(r24<<24>>24==10){r27=r28}else if(r24<<24>>24==47){r29=r28;r4=38;break}else{r30=r26;break}}if(r4==38){while(1){r4=0;r31=r29-1|0;if((HEAP8[r26+r31|0]|0)!=47&(r31|0)>0){r29=r31;r4=38}else{break}}_memcpy(r19,r26+r29|0,r28-r31|0)|0;r24=HEAP32[HEAP32[r18>>2]+4>>2];_memset(r17,0,108)|0;HEAP32[r3>>2]=r19;HEAP32[r15>>2]=-1;HEAP32[r10>>2]=r19;HEAP32[r11>>2]=-1;HEAP32[r12>>2]=0;HEAP32[r14>>2]=~r8;HEAP32[r21>>2]=-1;r32=___floatscan(r7,1);if(r32>0){r33=Math_log(r32);r34=(r33*HEAPF64[r24+48>>3]&-1)>>HEAP8[r24+9|0]}else{r34=HEAP32[r24+64>>2]}HEAP32[HEAP32[r13>>2]+(r22<<4)+4>>2]=r34>>10;HEAP8[HEAP32[r25>>2]+(r29-2)|0]=0;r30=HEAP32[r25>>2]}HEAP8[r30+r27|0]=0;r24=___ckd_salloc__(HEAP32[r25>>2],39568,385);HEAP32[HEAP32[r13>>2]+(r22<<4)>>2]=r24;r22=r22+1|0;r23=_lineiter_next(r23)}_fclose(r9)}r9=r16+16|0;r23=HEAP32[r9>>2];r22=r16+68|0;r13=r16+64|0;r30=0;r29=1;while(1){if((r30|0)>=(HEAP32[r22>>2]|0)){break}r34=___ckd_salloc__(HEAP32[HEAP32[r13>>2]+(r30<<4)>>2],39568,150);r7=_str2words(r34,0,0);r21=___ckd_calloc__(r7,4,39568,152);r8=r21;_str2words(r34,r8,r7);r14=0;while(1){if((r14|0)>=(r7|0)){r35=r29;break}r36=r8+(r14<<2)|0;if((_dict_wordid(r23,HEAP32[r36>>2])|0)==-1){r4=50;break}r14=r14+1|0}if(r4==50){r4=0;_err_msg(4,39568,158,15056,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[r36>>2],r5));STACKTOP=r5;r35=0}_free(r21);_free(r34);r30=r30+1|0;r29=r35}r35=r16;if(r29<<24>>24==0){_kws_search_free(r35);r37=0;r38=_set_search_internal(r1,r2,r37);STACKTOP=r6;return r38}if((_kws_search_reinit(r35,HEAP32[r9>>2],HEAP32[r16+20>>2])|0)>=0){r37=r35;r38=_set_search_internal(r1,r2,r37);STACKTOP=r6;return r38}FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+20>>2]](r35);r37=0;r38=_set_search_internal(r1,r2,r37);STACKTOP=r6;return r38}function _ps_set_fsg(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+88|0;r7=r6;r8=r6+8;r9=r6+16;r10=r6+24;r11=r6+32;r12=r6+40;r13=r6+48;r14=r6+56;r15=r6+64;r16=r6+72;r17=r6+80;r18=HEAP32[r1>>2];r19=HEAP32[r1+8>>2];r20=HEAP32[r1+12>>2];r21=HEAP32[r1+16>>2];r22=_malloc(156);if((r22|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=156,HEAP32[r5+16>>2]=11088,HEAP32[r5+24>>2]=185,r5));STACKTOP=r5}if((HEAP32[r22-4>>2]&3|0)!=0){_memset(r22,0,156)|0}_ps_search_init(r22,4968,r18,r19,r20,r21);r21=r3|0;HEAP32[r21>>2]=HEAP32[r21>>2]+1;HEAP32[r22+60>>2]=r3;r21=HEAP32[r19+20>>2];r20=_hmm_context_init(HEAP32[r21+12>>2],HEAP32[HEAP32[r19+24>>2]>>2],HEAP32[r21+60>>2]);HEAP32[r22+56>>2]=r20;if((r20|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r22>>2]+20>>2]](r22);r23=0;r24=_set_search_internal(r1,r2,r23);STACKTOP=r6;return r24}r20=_malloc(16);if((r20|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=16,HEAP32[r5+16>>2]=12632,HEAP32[r5+24>>2]=72,r5));STACKTOP=r5}if((HEAP32[r20-4>>2]&3|0)!=0){_memset(r20,0,16)|0}HEAP32[r20>>2]=0;r21=_malloc(24);if((r21|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=24,HEAP32[r5+16>>2]=14064,HEAP32[r5+24>>2]=70,r5));STACKTOP=r5}if((HEAP32[r21-4>>2]&3|0)!=0){_memset(r21,0,24)|0}r25=___ckd_calloc__(16380,4,14064,71);HEAP32[r21>>2]=r25;HEAP32[r21+4>>2]=16380;HEAP32[r21+8>>2]=16380;HEAP32[r21+12>>2]=0;HEAP32[r21+16>>2]=-1;HEAP32[r21+20>>2]=16380;HEAP32[r20+4>>2]=r21;HEAP32[r20+8>>2]=0;HEAP32[r22+68>>2]=r20;HEAP32[r22+120>>2]=-1;HEAPF32[r22+92>>2]=1;r20=r19+4|0;r19=HEAP32[r20>>2];r21=r18+4|0;do{if((_hash_table_lookup(HEAP32[r21>>2],47184,r17)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=47184,r5));STACKTOP=r5;r4=19}else{r18=HEAP32[r17>>2];if((r18|0)==0){r4=19;break}r25=HEAPF64[r18>>3];if(r25<=0){r4=19;break}r18=Math_log(r25);r26=(r18*HEAPF64[r19+48>>3]&-1)>>HEAP8[r19+9|0]}}while(0);if(r4==19){r26=HEAP32[r19+64>>2]}r19=r26>>10;r26=r22+80|0;HEAP32[r26>>2]=r19;HEAP32[r22+96>>2]=r19;r19=HEAP32[r20>>2];do{if((_hash_table_lookup(HEAP32[r21>>2],17144,r16)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=17144,r5));STACKTOP=r5;r4=25}else{r17=HEAP32[r16>>2];if((r17|0)==0){r4=25;break}r18=HEAPF64[r17>>3];if(r18<=0){r4=25;break}r17=Math_log(r18);r27=(r17*HEAPF64[r19+48>>3]&-1)>>HEAP8[r19+9|0]}}while(0);if(r4==25){r27=HEAP32[r19+64>>2]}r19=r27>>10;r27=r22+84|0;HEAP32[r27>>2]=r19;HEAP32[r22+100>>2]=r19;r19=HEAP32[r20>>2];do{if((_hash_table_lookup(HEAP32[r21>>2],17400,r15)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=17400,r5));STACKTOP=r5;r4=31}else{r16=HEAP32[r15>>2];if((r16|0)==0){r4=31;break}r17=HEAPF64[r16>>3];if(r17<=0){r4=31;break}r16=Math_log(r17);r28=(r16*HEAPF64[r19+48>>3]&-1)>>HEAP8[r19+9|0]}}while(0);if(r4==31){r28=HEAP32[r19+64>>2]}r19=r28>>10;r28=r22+88|0;HEAP32[r28>>2]=r19;HEAP32[r22+104>>2]=r19;do{if((_hash_table_lookup(HEAP32[r21>>2],7760,r14)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=7760,r5));STACKTOP=r5;r29=0}else{r19=HEAP32[r14>>2];if((r19|0)==0){r29=0;break}r29=HEAPF64[r19>>3]&-1}}while(0);r14=r22+108|0;HEAP32[r14>>2]=r29;r29=HEAP32[r20>>2];do{if((_hash_table_lookup(HEAP32[r21>>2],24800,r13)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=24800,r5));STACKTOP=r5;r4=41}else{r19=HEAP32[r13>>2];if((r19|0)==0){r4=41;break}r15=HEAPF64[r19>>3];if(r15<=0){r4=41;break}r19=Math_log(r15);r30=(r19*HEAPF64[r29+48>>3]&-1)>>HEAP8[r29+9|0]}}while(0);if(r4==41){r30=HEAP32[r29+64>>2]}r29=Math_imul(r30,HEAP32[r14>>2])>>10;r30=r22+112|0;HEAP32[r30>>2]=r29;r29=HEAP32[r20>>2];do{if((_hash_table_lookup(HEAP32[r21>>2],6472,r12)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=6472,r5));STACKTOP=r5;r4=47}else{r20=HEAP32[r12>>2];if((r20|0)==0){r4=47;break}r13=HEAPF64[r20>>3];if(r13<=0){r4=47;break}r20=Math_log(r13);r31=(r20*HEAPF64[r29+48>>3]&-1)>>HEAP8[r29+9|0]}}while(0);if(r4==47){r31=HEAP32[r29+64>>2]}r29=Math_imul(r31,HEAP32[r14>>2])>>10;r14=r22+116|0;HEAP32[r14>>2]=r29;do{if((_hash_table_lookup(HEAP32[r21>>2],12984,r11)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=12984,r5));STACKTOP=r5;r32=0}else{r29=HEAP32[r11>>2];if((r29|0)==0){r32=0;break}r32=HEAPF64[r29>>3]}}while(0);HEAPF32[r22+128>>2]=1/r32;r32=HEAP32[r27>>2];r27=HEAP32[r28>>2];r28=HEAP32[r14>>2];r14=HEAP32[r30>>2];_err_msg(1,11088,227,7080,(r5=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r5>>2]=HEAP32[r26>>2],HEAP32[r5+8>>2]=r32,HEAP32[r5+16>>2]=r27,HEAP32[r5+24>>2]=r28,HEAP32[r5+32>>2]=r14,r5));STACKTOP=r5;r14=r22+16|0;r28=HEAP32[r14>>2];r27=r3+8|0;r32=r3+16|0;r26=0;while(1){if((r26|0)>=(HEAP32[r27>>2]|0)){break}if((r26|0)==-1){r33=37448}else{r33=HEAP32[HEAP32[r32>>2]+(r26<<2)>>2]}if((_dict_wordid(r28,r33)|0)==-1){r4=59;break}r26=r26+1|0}if(r4==59){_err_msg(4,11088,142,15056,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r33,r5));STACKTOP=r5;_fsg_search_free(r22);r23=0;r24=_set_search_internal(r1,r2,r23);STACKTOP=r6;return r24}L84:do{if((_hash_table_lookup(HEAP32[r21>>2],6192,r10)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=6192,r5));STACKTOP=r5}else{r33=HEAP32[r10>>2];if((r33|0)==0){break}if((HEAP32[r33>>2]|0)==0){break}if((HEAP32[r3+20>>2]|0)!=0){break}r33=HEAP32[r14>>2];r4=r22+8|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r4>>2]+4>>2],14160,r9)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=14160,r5));STACKTOP=r5;r34=0}else{r26=HEAP32[r9>>2];if((r26|0)==0){r34=0;break}r34=HEAPF64[r26>>3]}}while(0);_fsg_model_add_silence(r3,17448,r34);r26=r33+28|0;r28=r33+32|0;r30=r33+36|0;r11=r33+8|0;r29=HEAP32[r33+24>>2];r31=0;while(1){if((r29|0)>=(HEAP32[r26>>2]|0)){break L84}if((r29|0)<0){r35=0}else{r35=HEAP32[HEAP32[r11>>2]+(r29*20&-1)>>2]}do{if((r29|0)==(HEAP32[r28>>2]|0)){r36=r31}else{if((r29|0)==(HEAP32[r30>>2]|0)){r36=r31;break}do{if((_hash_table_lookup(HEAP32[HEAP32[r4>>2]+4>>2],13848,r8)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=13848,r5));STACKTOP=r5;r37=0}else{r12=HEAP32[r8>>2];if((r12|0)==0){r37=0;break}r37=HEAPF64[r12>>3]}}while(0);_fsg_model_add_silence(r3,r35,r37);r36=r31+1|0}}while(0);r29=r29+1|0;r31=r36}}}while(0);do{if((_hash_table_lookup(HEAP32[r21>>2],48584,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=48584,r5));STACKTOP=r5}else{r36=HEAP32[r7>>2];if((r36|0)==0){break}if((HEAP32[r36>>2]|0)==0){break}r36=r3+24|0;if((HEAP32[r36>>2]|0)!=0){break}r37=HEAP32[r14>>2];r35=HEAP32[r27>>2];r8=r37+8|0;r34=r3+12|0;r9=r3+20|0;r10=r3+32|0;r31=r3+48|0;r29=r3+52|0;r4=0;r30=0;while(1){if((r4|0)>=(r35|0)){break}if((r4|0)==-1){r38=37448}else{r38=HEAP32[HEAP32[r32>>2]+(r4<<2)>>2]}r28=_dict_wordid(r37,r38);L122:do{if((r28|0)==-1){r39=r30}else{r11=r30;r26=r28;while(1){r33=HEAP32[r8>>2];r12=HEAP32[r33+(r26*20&-1)+12>>2];if((r12|0)==-1){r39=r11;break L122}if((r12|0)<0){r40=0}else{r40=HEAP32[r33+(r12*20&-1)>>2]}r33=HEAP32[r27>>2];r20=0;while(1){if((r20|0)>=(r33|0)){break}r13=HEAP32[HEAP32[r32>>2]+(r20<<2)>>2];r19=HEAP8[r13];r15=HEAP8[r38];if(r19<<24>>24!=r15<<24>>24|r19<<24>>24==0|r15<<24>>24==0){r41=r19;r42=r15}else{r15=r13;r13=r38;while(1){r19=r15+1|0;r16=r13+1|0;r17=HEAP8[r19];r18=HEAP8[r16];if(r17<<24>>24!=r18<<24>>24|r17<<24>>24==0|r18<<24>>24==0){r41=r17;r42=r18;break}else{r15=r19;r13=r16}}}if(r41<<24>>24==r42<<24>>24){break}r20=r20+1|0}L138:do{if((r20|0)==(r33|0)){_err_msg(4,34544,464,8016,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r38,r5));STACKTOP=r5;r43=-1}else{r13=_fsg_model_word_add(r3,r40);r15=HEAP32[r36>>2];if((r15|0)==0){r16=___ckd_calloc__((HEAP32[r34>>2]+31|0)/32&-1,4,34544,469);HEAP32[r36>>2]=r16;r44=r16}else{r44=r15}r15=1<<(r13&31);r16=(r13|0)/32&-1;r19=r44+(r16<<2)|0;HEAP32[r19>>2]=HEAP32[r19>>2]|r15;r19=HEAP32[r9>>2];do{if((r19|0)==0){r45=0;r46=0}else{if((HEAP32[r19+(((r20|0)/32&-1)<<2)>>2]&1<<(r20&31)|0)==0){r45=0;r46=0;break}r18=r19+(r16<<2)|0;HEAP32[r18>>2]=HEAP32[r18>>2]|r15;r45=0;r46=0}}while(0);while(1){if((r45|0)>=(HEAP32[r10>>2]|0)){r43=r46;break L138}r15=HEAP32[HEAP32[r31>>2]+(r45<<3)+4>>2];L150:do{if((r15|0)==0){r47=r46}else{r16=_hash_table_iter(r15);r19=r46;while(1){if((r16|0)==0){r47=r19;break L150}r18=r16+4|0;r17=HEAP32[HEAP32[r18>>2]+8>>2];r25=r17;r48=r19;r49=r17;while(1){if((r25|0)==0){break}r17=HEAP32[r25>>2];if((HEAP32[r17+12>>2]|0)==(r20|0)){r50=HEAP32[r29>>2];r51=r50|0;r52=HEAP32[r51>>2];if((r52|0)==0){_listelem_add_block(r50,34544,499);r53=HEAP32[r51>>2]}else{r53=r52}HEAP32[r51>>2]=HEAP32[r53>>2];r51=r50+24|0;HEAP32[r51>>2]=HEAP32[r51>>2]+1;HEAP32[r53>>2]=HEAP32[r17>>2];HEAP32[r53+4>>2]=HEAP32[r17+4>>2];HEAP32[r53+8>>2]=HEAP32[r17+8>>2];HEAP32[r53+12>>2]=r13;r54=r48+1|0;r55=_glist_add_ptr(r49,r53)}else{r54=r48;r55=r49}r25=HEAP32[r25+8>>2];r48=r54;r49=r55}HEAP32[HEAP32[r18>>2]+8>>2]=r49;r16=_hash_table_iter_next(r16);r19=r48}}}while(0);r45=r45+1|0;r46=r47}}}while(0);r11=r11+r43|0;r26=r12}}}while(0);r4=r4+1|0;r30=r39}_err_msg(1,11088,174,18376,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r30,r5));STACKTOP=r5}}while(0);r5=r22;_fsg_search_reinit(r5,HEAP32[r14>>2],HEAP32[r22+20>>2]);r23=r5;r24=_set_search_internal(r1,r2,r23);STACKTOP=r6;return r24}function _ps_set_lm(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+96|0;r7=r6;r8=r6+8;r9=r6+16;r10=r6+24;r11=r6+32;r12=r6+40;r13=r6+48;r14=r6+56;r15=r6+64;r16=r6+72;r17=r6+80;r18=r6+88;r19=HEAP32[r1>>2];r20=HEAP32[r1+8>>2];r21=HEAP32[r1+12>>2];r22=HEAP32[r1+16>>2];HEAP32[r18>>2]=r3;r3=r19+4|0;do{if((_hash_table_lookup(HEAP32[r3>>2],36992,r17)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=36992,r5));STACKTOP=r5;r4=8}else{r23=HEAP32[r17>>2];if((r23|0)==0){r4=8;break}if((HEAP32[r23>>2]|0)==0){r4=8;break}if((_hash_table_lookup(HEAP32[r3>>2],26736,r16)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=26736,r5));STACKTOP=r5;r4=8;break}r23=HEAP32[r16>>2];if((r23|0)==0){r4=8;break}r24=(HEAP32[r23>>2]|0)!=0|0;HEAP8[r20+90|0]=r24;if((r24|0)==0){break}if((HEAP32[r20+108>>2]|0)>=128){break}_acmod_grow_feat_buf(r20,128)}}while(0);if(r4==8){HEAP8[r20+90|0]=0}r16=_malloc(544);if((r16|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=544,HEAP32[r5+16>>2]=19544,HEAP32[r5+24>>2]=155,r5));STACKTOP=r5}if((HEAP32[r16-4>>2]&3|0)!=0){_memset(r16,0,544)|0}r17=r16;_ps_search_init(r16,4792,r19,r20,r21,r22);r22=HEAP32[r20+20>>2];r19=_hmm_context_init(HEAP32[r22+12>>2],HEAP32[HEAP32[r20+24>>2]>>2],HEAP32[r22+60>>2]);HEAP32[r16+60>>2]=r19;if((r19|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r16>>2]+20>>2]](r16);r25=0;r26=4;r27=0;r28=_set_search_internal(r1,r2,r25);STACKTOP=r6;return r28}r19=_listelem_alloc_init(96);HEAP32[r16+68>>2]=r19;r19=_listelem_alloc_init(96);HEAP32[r16+72>>2]=r19;r19=_listelem_alloc_init(52);HEAP32[r16+76>>2]=r19;_ngram_search_calc_beams(r17);r19=r21+20|0;r21=___ckd_calloc__(HEAP32[r19>>2],4,19544,172);HEAP32[r16+104>>2]=r21;r21=___ckd_calloc__(HEAP32[r19>>2],4,19544,174);HEAP32[r16+212>>2]=r21;r21=___ckd_calloc__((HEAP32[r19>>2]+31|0)/32&-1,4,19544,175);HEAP32[r16+108>>2]=r21;r21=___ckd_calloc__(HEAP32[r19>>2],12,19544,177);HEAP32[r16+160>>2]=r21;do{if((_hash_table_lookup(HEAP32[r3>>2],15736,r15)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=15736,r5));STACKTOP=r5;r29=0}else{r21=HEAP32[r15>>2];if((r21|0)==0){r29=0;break}r29=HEAP32[r21>>2]}}while(0);r15=r16+184|0;HEAP32[r15>>2]=r29;r21=___ckd_calloc__(r29,36,19544,183);HEAP32[r16+176>>2]=r21;r21=HEAP32[r15>>2]*20&-1;HEAP32[r16+196>>2]=r21;r15=___ckd_calloc__(r21,4,19544,187);HEAP32[r16+188>>2]=r15;r15=r16+200|0;HEAP32[r15>>2]=256;r21=___ckd_calloc__(257,4,19544,190)+4|0;HEAP32[r16+208>>2]=r21;r21=___ckd_calloc_2d__(2,HEAP32[r19>>2],4,19544,195);HEAP32[r16+140>>2]=r21;r21=_ngram_model_set_init(r18,4640,1);r18=r16+56|0;HEAP32[r18>>2]=r21;do{if((r21|0)!=0){r19=r21+52|0;r29=_hash_table_lookup(HEAP32[r19>>2],12968,r14);do{if((r29|0)==0){r30=HEAP32[r14>>2]}else{if((r29|0)!=-1){r30=0;break}r22=_hash_table_lookup(HEAP32[r19>>2],40464,r13);if((r22|0)==0){r31=HEAP32[r13>>2]}else{if((r22|0)==-1){r30=-1;break}else{r31=0}}r30=r31}}while(0);r19=_hash_table_lookup(HEAP32[HEAP32[r18>>2]+52>>2],40464,r12);if((r19|0)==0){r32=HEAP32[r12>>2];r4=33}else{if((r19|0)==-1){r33=-1}else{r32=0;r4=33}}if(r4==33){r33=r32}if((r30|0)==(r33|0)){_err_msg(4,19544,205,10312,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;break}_ngram_search_update_widmap(r17);do{if((_hash_table_lookup(HEAP32[r3>>2],26736,r11)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=26736,r5));STACKTOP=r5}else{r19=HEAP32[r11>>2];if((r19|0)==0){break}if((HEAP32[r19>>2]|0)==0){break}r19=___ckd_calloc__(HEAP32[HEAP32[HEAP32[r16+12>>2]+20>>2]+4>>2],12,6096,388);HEAP32[r16+172>>2]=r19;r19=___ckd_calloc__(HEAP32[r16+40>>2],16,6096,390);HEAP32[r16+152>>2]=r19;_init_search_tree(r17);_create_search_tree(r17);HEAP8[r16+64|0]=1;HEAP32[r16+312>>2]=8632;HEAPF64[r16+320>>3]=0;r19=r16+328|0;HEAP32[r19>>2]=0;HEAP32[r19+4>>2]=0;HEAP32[r19+8>>2]=0;HEAP32[r19+12>>2]=0;HEAP32[r19+16>>2]=0;HEAP32[r19+20>>2]=0}}while(0);do{if((_hash_table_lookup(HEAP32[r3>>2],36992,r10)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=36992,r5));STACKTOP=r5}else{r19=HEAP32[r10>>2];if((r19|0)==0){break}if((HEAP32[r19>>2]|0)==0){break}r19=HEAP32[r16+40>>2];r29=r19+1|0;r22=___ckd_calloc__(r29,4,49384,150);HEAP32[r16+220>>2]=r22;r22=___ckd_calloc__((r19+31|0)/32&-1,4,49384,151);HEAP32[r16+224>>2]=r22;r22=___ckd_calloc__(r29,4,49384,152);HEAP32[r16+228>>2]=r22;r22=___ckd_calloc__(HEAP32[r15>>2],4,49384,153);HEAP32[r16+216>>2]=r22;r22=r16+8|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r22>>2]+4>>2],48232,r9)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=48232,r5));STACKTOP=r5;r34=0}else{r29=HEAP32[r9>>2];if((r29|0)==0){r34=0;break}r34=HEAP32[r29>>2]}}while(0);r29=r16+236|0;HEAP32[r29>>2]=r34;do{if((_hash_table_lookup(HEAP32[HEAP32[r22>>2]+4>>2],35008,r8)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=35008,r5));STACKTOP=r5;r35=0}else{r19=HEAP32[r8>>2];if((r19|0)==0){r35=0;break}r35=HEAP32[r19>>2]}}while(0);HEAP32[r16+240>>2]=r35;_err_msg(1,49384,157,24824,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=HEAP32[r29>>2],HEAP32[r5+8>>2]=r35,r5));STACKTOP=r5;if((HEAP8[r16+64|0]|0)==0){_ngram_fwdflat_expand_all(r17);_ngram_fwdflat_allocate_1ph(r17)}HEAP8[r16+65|0]=1;HEAP32[r16+368>>2]=7008;HEAPF64[r16+376>>3]=0;r22=r16+384|0;HEAP32[r22>>2]=0;HEAP32[r22+4>>2]=0;HEAP32[r22+8>>2]=0;HEAP32[r22+12>>2]=0;HEAP32[r22+16>>2]=0;HEAP32[r22+20>>2]=0}}while(0);do{if((_hash_table_lookup(HEAP32[r3>>2],38264,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=38264,r5));STACKTOP=r5}else{r22=HEAP32[r7>>2];if((r22|0)==0){break}if((HEAP32[r22>>2]|0)==0){break}HEAP8[r16+66|0]=1;HEAP32[r16+424>>2]=48336;HEAPF64[r16+432>>3]=0;r22=r16+440|0;HEAP32[r22>>2]=0;HEAP32[r22+4>>2]=0;HEAP32[r22+8>>2]=0;HEAP32[r22+12>>2]=0;HEAP32[r22+16>>2]=0;HEAP32[r22+20>>2]=0}}while(0);r25=r16;r26=4;r27=0;r28=_set_search_internal(r1,r2,r25);STACKTOP=r6;return r28}}while(0);_ngram_search_free(r16);r25=0;r26=4;r27=0;r28=_set_search_internal(r1,r2,r25);STACKTOP=r6;return r28}function _ps_free(r1){var r2,r3,r4;if((r1|0)==0){return}r2=r1+4|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}_ps_free_searches(r1);_dict_free(HEAP32[r1+12>>2]);_dict2pid_free(HEAP32[r1+16>>2]);_acmod_free(HEAP32[r1+8>>2]);r3=HEAP32[r1+20>>2];do{if((r3|0)!=0){r2=r3+12|0;r4=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r4;if((r4|0)>0){break}r4=HEAP32[r3+16>>2];if((r4|0)==0){_free(HEAP32[r3>>2])}else{_mmio_file_unmap(r4)}_free(r3)}}while(0);_cmd_ln_free_r(HEAP32[r1>>2]);_free(HEAP32[r1+44>>2]);_free(r1);return}function _set_search_internal(r1,r2,r3){var r4,r5,r6,r7;HEAP32[r3+4>>2]=HEAP32[r1+32>>2];r4=(r3|0)==0;if(r4){r5=r4&1;return r5}r6=HEAP32[r1+24>>2];r1=___ckd_salloc__(r2,49568,530);r2=_key2hash(r6,r1);r7=_enter(r6,r2,r1,_strlen(r1),r3,1);r1=r7;if((r1|0)==(r3|0)){r5=r4&1;return r5}FUNCTION_TABLE[HEAP32[HEAP32[r7>>2]+20>>2]](r1);r5=r4&1;return r5}function _ps_search_forward(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r2=0;r3=r1+8|0;r4=r1+32|0;r5=r1+36|0;r6=r1+104|0;r7=r1+28|0;r1=0;while(1){r8=HEAP32[r3>>2];if((HEAP32[r8+112>>2]|0)<=0){r9=r1;r2=10;break}r10=HEAP32[r4>>2];if((r10|0)==0){r11=r8}else{r12=FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10,HEAP32[r8+92>>2]);if((r12|0)<0){r9=r12;r2=10;break}r11=HEAP32[r3>>2]}r12=HEAP32[r11+92>>2];r8=HEAP32[r5>>2];if((r12|0)<(r8|0)){r13=r11}else{r10=HEAP32[r7>>2];r14=FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10,r12-r8|0);if((r14|0)<0){r9=r14;r2=10;break}r13=HEAP32[r3>>2]}r14=r13+116|0;r8=HEAP32[r14>>2]+1|0;HEAP32[r14>>2]=r8;HEAP32[r14>>2]=(r8|0)==(HEAP32[r13+108>>2]|0)?0:r8;r8=r13+112|0;HEAP32[r8>>2]=HEAP32[r8>>2]-1;r8=HEAP32[r13+28>>2]+4|0;HEAP32[r8>>2]=HEAP32[r8>>2]+1;r8=r13+92|0;HEAP32[r8>>2]=HEAP32[r8>>2]+1;HEAP32[r6>>2]=HEAP32[r6>>2]+1;r1=r1+1|0}if(r2==10){return r9}}function _ps_search_init(r1,r2,r3,r4,r5,r6){HEAP32[r1>>2]=r2;HEAP32[r1+8>>2]=r3;HEAP32[r1+12>>2]=r4;if((r6|0)==0){HEAP32[r1+20>>2]=0}else{r4=r6|0;HEAP32[r4>>2]=HEAP32[r4>>2]+1;HEAP32[r1+20>>2]=r6}if((r5|0)==0){HEAP32[r1+16>>2]=0;HEAP32[r1+48>>2]=-1;HEAP32[r1+52>>2]=-1;HEAP32[r1+44>>2]=-1;HEAP32[r1+40>>2]=0;return}else{r6=r5|0;HEAP32[r6>>2]=HEAP32[r6>>2]+1;HEAP32[r1+16>>2]=r5;HEAP32[r1+44>>2]=HEAP32[r5+32>>2];HEAP32[r1+52>>2]=HEAP32[r5+36>>2];HEAP32[r1+48>>2]=HEAP32[r5+40>>2];HEAP32[r1+40>>2]=HEAP32[r5+20>>2];return}}function _ps_search_base_reinit(r1,r2,r3){var r4,r5,r6,r7;r4=r1+16|0;_dict_free(HEAP32[r4>>2]);r5=r1+20|0;_dict2pid_free(HEAP32[r5>>2]);if((r2|0)==0){HEAP32[r4>>2]=0;HEAP32[r1+48>>2]=-1;HEAP32[r1+52>>2]=-1;HEAP32[r1+44>>2]=-1;HEAP32[r1+40>>2]=0}else{r6=r2|0;HEAP32[r6>>2]=HEAP32[r6>>2]+1;HEAP32[r4>>2]=r2;HEAP32[r1+44>>2]=HEAP32[r2+32>>2];HEAP32[r1+52>>2]=HEAP32[r2+36>>2];HEAP32[r1+48>>2]=HEAP32[r2+40>>2];HEAP32[r1+40>>2]=HEAP32[r2+20>>2]}if((r3|0)==0){r7=0;HEAP32[r5>>2]=r7;return}r2=r3|0;HEAP32[r2>>2]=HEAP32[r2>>2]+1;r7=r3;HEAP32[r5>>2]=r7;return}function _ps_add_file(r1,r2,r3,r4){var r5,r6,r7,r8,r9;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+16|0;r7=r6;r8=r6+8;r9=_string_join(r3,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=30928,HEAP32[r5+8>>2]=r4,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r4=r1|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r4>>2]+4>>2],r2,r8)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r2,r5));STACKTOP=r5}else{r1=HEAP32[r8>>2];if((r1|0)==0){break}if((HEAP32[r1>>2]|0)==0){break}_free(r9);STACKTOP=r6;return}}while(0);r8=_fopen(r9,45688);if((r8|0)==0){_free(r9);STACKTOP=r6;return}_fclose(r8);do{if((_hash_table_lookup(HEAP32[HEAP32[r4>>2]+4>>2],r2,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r2,r5));STACKTOP=r5}else{r8=HEAP32[r7>>2];if((r8|0)==0){break}r1=r8;_free(HEAP32[r1>>2]);if((r9|0)==0){HEAP32[r1>>2]=0;_free(r9);STACKTOP=r6;return}else{r8=___ckd_salloc__(r9,45384,1004);HEAP32[r1>>2]=r8;_free(r9);STACKTOP=r6;return}}}while(0);_err_msg(4,45384,997,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r2,r5));STACKTOP=r5;_free(r9);STACKTOP=r6;return}function _ps_lattice_link(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14;r6=0;r7=r2+36|0;r8=r7;while(1){r9=HEAP32[r8>>2];if((r9|0)==0){break}r10=r9|0;r11=HEAP32[r10>>2];if((HEAP32[r11+4>>2]|0)==(r3|0)){r6=12;break}r8=r9+4|0}if(r6==12){r6=r11+12|0;if((HEAP32[r6>>2]|0)>=(r4|0)){return}HEAP32[r6>>2]=r4;HEAP32[HEAP32[r10>>2]+20>>2]=r5;return}r10=HEAP32[r1+60>>2];r6=r10|0;r11=HEAP32[r6>>2];if((r11|0)==0){_listelem_add_block(r10,42920,80);r12=HEAP32[r6>>2]}else{r12=r11}HEAP32[r6>>2]=HEAP32[r12>>2];r6=r10+24|0;HEAP32[r6>>2]=HEAP32[r6>>2]+1;r6=r1+64|0;r1=HEAP32[r6>>2];r10=r1|0;r11=HEAP32[r10>>2];if((r11|0)==0){_listelem_add_block(r1,42920,81);r13=HEAP32[r10>>2]}else{r13=r11}HEAP32[r10>>2]=HEAP32[r13>>2];r10=r1+24|0;HEAP32[r10>>2]=HEAP32[r10>>2]+1;r10=HEAP32[r6>>2];r6=r10|0;r1=HEAP32[r6>>2];if((r1|0)==0){_listelem_add_block(r10,42920,82);r14=HEAP32[r6>>2]}else{r14=r1}HEAP32[r6>>2]=HEAP32[r14>>2];r6=r10+24|0;HEAP32[r6>>2]=HEAP32[r6>>2]+1;HEAP32[r12>>2]=r2;HEAP32[r12+4>>2]=r3;HEAP32[r12+12>>2]=r4;HEAP32[r12+20>>2]=r5;HEAP32[r12+8>>2]=0;HEAP32[r14>>2]=r12;HEAP32[r13>>2]=r12;HEAP32[r13+4>>2]=HEAP32[r7>>2];HEAP32[r7>>2]=r13;r13=r3+40|0;HEAP32[r14+4>>2]=HEAP32[r13>>2];HEAP32[r13>>2]=r14;return}function _ps_lattice_bypass_fillers(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r4=r1+32|0;r5=r1+12|0;r6=r1+16|0;r7=r1+24|0;while(1){r8=HEAP32[r7>>2];if((r8|0)==0){break}do{if((r8|0)!=(HEAP32[r4>>2]|0)){r9=r8+8|0;if((_dict_filler_word(HEAP32[r5>>2],HEAP32[r9>>2])|0)==0){break}r10=r8+36|0;r11=r8+40|0;while(1){r12=HEAP32[r11>>2];if((r12|0)==0){break}r13=HEAP32[r12>>2];r14=((HEAP32[r9>>2]|0)==(HEAP32[r6>>2]|0)?r2:r3)+HEAP32[r13+12>>2]|0;r15=r13|0;r13=r10;while(1){r16=HEAP32[r13>>2];if((r16|0)==0){break}r17=HEAP32[r16>>2];r18=r17+4|0;r19=HEAP32[r18>>2];do{if((r19|0)!=0){if((HEAP32[r15>>2]|0)==0){break}if((_dict_filler_word(HEAP32[r5>>2],HEAP32[r19+8>>2])|0)!=0){break}_ps_lattice_link(r1,HEAP32[r15>>2],HEAP32[r18>>2],r14+HEAP32[r17+12>>2]|0,HEAP32[r17+20>>2])}}while(0);r13=r16+4|0}r11=r12+4|0}HEAP16[r8+24>>1]=0}}while(0);r7=r8+48|0}return}function _ps_lattice_delete_unreachable(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r2=0;r3=r1+24|0;r4=r1+64|0;r5=r1+56|0;r6=HEAP32[r3>>2];r7=0;while(1){if((r6|0)==0){break}r8=HEAP32[r6+48>>2];if((HEAP16[r6+24>>1]|0)!=0){r7=r6;r6=r8;continue}if((r7|0)==0){HEAP32[r3>>2]=r8}else{HEAP32[r7+48>>2]=r8}r9=HEAP32[r6+36>>2];while(1){if((r9|0)==0){break}r10=HEAP32[r9+4>>2];r11=r9|0;HEAP32[HEAP32[r11>>2]>>2]=0;r12=HEAP32[r4>>2];r13=r12|0;HEAP32[r11>>2]=HEAP32[r13>>2];HEAP32[r13>>2]=r9;r13=r12+28|0;HEAP32[r13>>2]=HEAP32[r13>>2]+1;r9=r10}r9=HEAP32[r6+40>>2];while(1){if((r9|0)==0){break}r10=HEAP32[r9+4>>2];r13=r9|0;HEAP32[HEAP32[r13>>2]+4>>2]=0;r12=HEAP32[r4>>2];r11=r12|0;HEAP32[r13>>2]=HEAP32[r11>>2];HEAP32[r11>>2]=r9;r11=r12+28|0;HEAP32[r11>>2]=HEAP32[r11>>2]+1;r9=r10}r9=HEAP32[r5>>2];r10=r9|0;HEAP32[r6>>2]=HEAP32[r10>>2];HEAP32[r10>>2]=r6;r10=r9+28|0;HEAP32[r10>>2]=HEAP32[r10>>2]+1;r6=r8;r7=r7}r7=r1+60|0;r1=r3;r3=0;while(1){r6=HEAP32[r1>>2];if((r6|0)==0){r2=35;break}r5=r3+1|0;HEAP32[r6>>2]=r3;if((HEAP16[r6+24>>1]|0)==0){r2=17;break}r10=r6+36|0;r9=HEAP32[r10>>2];r11=0;L22:while(1){r12=(r11|0)==0;r13=r11+4|0;r14=r9;while(1){if((r14|0)==0){break L22}r15=HEAP32[r14+4>>2];r16=r14|0;if((HEAP32[HEAP32[r16>>2]+4>>2]|0)!=0){r9=r15;r11=r14;continue L22}if(r12){HEAP32[r10>>2]=r15}else{HEAP32[r13>>2]=r15}r17=HEAP32[r7>>2];r18=HEAP32[r16>>2];r19=r17|0;HEAP32[r18>>2]=HEAP32[r19>>2];HEAP32[r19>>2]=r18;r18=r17+28|0;HEAP32[r18>>2]=HEAP32[r18>>2]+1;r18=HEAP32[r4>>2];r17=r18|0;HEAP32[r16>>2]=HEAP32[r17>>2];HEAP32[r17>>2]=r14;r17=r18+28|0;HEAP32[r17>>2]=HEAP32[r17>>2]+1;r14=r15}}r10=r6+40|0;r11=HEAP32[r10>>2];r9=0;L33:while(1){r8=(r9|0)==0;r14=r9+4|0;r13=r11;while(1){if((r13|0)==0){break L33}r12=HEAP32[r13+4>>2];r15=r13|0;if((HEAP32[HEAP32[r15>>2]>>2]|0)!=0){r11=r12;r9=r13;continue L33}if(r8){HEAP32[r10>>2]=r12}else{HEAP32[r14>>2]=r12}r17=HEAP32[r7>>2];r18=HEAP32[r15>>2];r16=r17|0;HEAP32[r18>>2]=HEAP32[r16>>2];HEAP32[r16>>2]=r18;r18=r17+28|0;HEAP32[r18>>2]=HEAP32[r18>>2]+1;r18=HEAP32[r4>>2];r17=r18|0;HEAP32[r15>>2]=HEAP32[r17>>2];HEAP32[r17>>2]=r13;r17=r18+28|0;HEAP32[r17>>2]=HEAP32[r17>>2]+1;r13=r12}}r1=r6+48|0;r3=r5}if(r2==17){___assert_fail(47416,42920,225,49864)}else if(r2==35){return}}function _ps_lattice_init_search(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;r6=_malloc(76);if((r6|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=76,HEAP32[r3+16>>2]=42920,HEAP32[r3+24>>2]=666,r3));STACKTOP=r3}if((HEAP32[r6-4>>2]&3|0)!=0){_memset(r6,0,76)|0}r7=r6;HEAP32[r6+8>>2]=r1;r8=HEAP32[r1+16>>2];r9=r8|0;HEAP32[r9>>2]=HEAP32[r9>>2]+1;r9=r6+12|0;HEAP32[r9>>2]=r8;r8=HEAP32[HEAP32[r1+12>>2]+4>>2];r1=r8+12|0;HEAP32[r1>>2]=HEAP32[r1>>2]+1;HEAP32[r6+4>>2]=r8;do{if((_hash_table_lookup(HEAP32[HEAP32[HEAP32[r6+8>>2]+8>>2]+4>>2],47176,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47176,r3));STACKTOP=r3;r10=0}else{r8=HEAP32[r5>>2];if((r8|0)==0){r10=0;break}r10=HEAP32[r8>>2]}}while(0);HEAP32[r6+20>>2]=r10;HEAP32[r6+16>>2]=HEAP32[HEAP32[r9>>2]+40>>2];HEAP32[r6+36>>2]=r2;r2=_listelem_alloc_init(52);HEAP32[r6+56>>2]=r2;r2=_listelem_alloc_init(32);HEAP32[r6+60>>2]=r2;r2=_listelem_alloc_init(8);HEAP32[r6+64>>2]=r2;HEAP32[r6>>2]=1;STACKTOP=r4;return r7}function _ps_lattice_free(r1){var r2,r3,r4;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=HEAP32[r1+4>>2];do{if((r3|0)!=0){r2=r3+12|0;r4=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r4;if((r4|0)>0){break}r4=HEAP32[r3+16>>2];if((r4|0)==0){_free(HEAP32[r3>>2])}else{_mmio_file_unmap(r4)}_free(r3)}}while(0);_dict_free(HEAP32[r1+12>>2]);_listelem_alloc_free(HEAP32[r1+56>>2]);_listelem_alloc_free(HEAP32[r1+60>>2]);_listelem_alloc_free(HEAP32[r1+64>>2]);_free(HEAP32[r1+52>>2]);_free(r1);return}function _ps_lattice_hyp(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=r1+12|0;r4=r2+4|0;do{if((_dict_real_word(HEAP32[r3>>2],HEAP32[HEAP32[r4>>2]+8>>2])|0)==0){r5=r2;r6=0}else{r7=HEAP32[HEAP32[r4>>2]+8>>2];if((r7|0)<0){r5=r2;r6=0;break}r8=HEAP32[HEAP32[HEAP32[r3>>2]+8>>2]+(r7*20&-1)>>2];if((r8|0)==0){r5=r2;r6=0;break}r5=r2;r6=_strlen(r8)+1|0}}while(0);while(1){if((r5|0)==0){break}r8=r5|0;do{if((_dict_real_word(HEAP32[r3>>2],HEAP32[HEAP32[r8>>2]+8>>2])|0)==0){r9=r6}else{r7=HEAP32[HEAP32[r8>>2]+8>>2];if((r7|0)<0){r9=r6;break}r10=HEAP32[HEAP32[HEAP32[r3>>2]+8>>2]+(r7*20&-1)>>2];if((r10|0)==0){r9=r6;break}r9=r6+(_strlen(r10)+1)|0}}while(0);r5=HEAP32[r5+8>>2];r6=r9}r9=r1+52|0;_free(HEAP32[r9>>2]);r1=___ckd_calloc__(1,r6+1|0,42920,877);HEAP32[r9>>2]=r1;r5=r6-1|0;r6=r1+r5|0;do{if((_dict_real_word(HEAP32[r3>>2],HEAP32[HEAP32[r4>>2]+8>>2])|0)==0){r11=r2;r12=r6}else{r8=HEAP32[HEAP32[r4>>2]+8>>2];if((r8|0)<0){r11=r2;r12=r6;break}r10=HEAP32[HEAP32[HEAP32[r3>>2]+8>>2]+(r8*20&-1)>>2];if((r10|0)==0){r11=r2;r12=r6;break}r8=_strlen(r10);r7=r5-r8|0;r13=r1+r7|0;_memcpy(r13,r10,r8)|0;if(r13>>>0<=HEAP32[r9>>2]>>>0){r11=r2;r12=r13;break}r13=r1+(r7-1)|0;HEAP8[r13]=32;r11=r2;r12=r13}}while(0);while(1){if((r11|0)==0){break}r2=r11|0;do{if((_dict_real_word(HEAP32[r3>>2],HEAP32[HEAP32[r2>>2]+8>>2])|0)==0){r14=r12}else{r1=HEAP32[HEAP32[r2>>2]+8>>2];if((r1|0)<0){r14=r12;break}r5=HEAP32[HEAP32[HEAP32[r3>>2]+8>>2]+(r1*20&-1)>>2];if((r5|0)==0){r14=r12;break}r1=_strlen(r5);r6=r12+ -r1|0;_memcpy(r6,r5,r1)|0;if(r6>>>0<=HEAP32[r9>>2]>>>0){r14=r6;break}r6=r12+~r1|0;HEAP8[r6]=32;r14=r6}}while(0);r11=HEAP32[r11+8>>2];r12=r14}return HEAP32[r9>>2]}function _ps_lattice_seg_iter(r1,r2,r3){var r4,r5,r6,r7,r8;r4=0;r5=STACKTOP;r6=_malloc(52);if((r6|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=52,HEAP32[r4+16>>2]=42920,HEAP32[r4+24>>2]=1038,r4));STACKTOP=r4}if((HEAP32[r6-4>>2]&3|0)!=0){_memset(r6,0,52)|0}HEAP32[r6>>2]=4344;HEAP32[r6+4>>2]=HEAP32[r1+8>>2];HEAPF32[r6+36>>2]=r3;r3=r6+48|0;HEAP16[r3>>1]=0;HEAP32[r6+44>>2]=HEAP32[r1+48>>2];r1=r2;r4=0;while(1){if((r1|0)==0){break}r7=r4+1&65535;HEAP16[r3>>1]=r7;r1=HEAP32[r1+8>>2];r4=r7}if(r4<<16>>16==0){_free(r6);r8=0;STACKTOP=r5;return r8}r1=___ckd_calloc__(r4<<16>>16,4,42920,1053);r4=r6+40|0;HEAP32[r4>>2]=r1;r1=r2;r2=HEAP16[r3>>1]|0;while(1){r3=r2-1|0;if((r1|0)==0){break}HEAP32[HEAP32[r4>>2]+(r3<<2)>>2]=r1;r1=HEAP32[r1+8>>2];r2=r3}r2=r6;_ps_lattice_link2itor(r2,HEAP32[HEAP32[r4>>2]>>2],0);r8=r2;STACKTOP=r5;return r8}function _ps_lattice_link2itor(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r4=STACKTOP;STACKTOP=STACKTOP+24|0;r5=r4;r6=r4+8;r7=r4+16;r8=(r3|0)==0;L1:do{if(r8){r3=HEAP32[HEAP32[HEAP32[r1+4>>2]+12>>2]+4>>2];r9=HEAP32[r2>>2];HEAP32[r1+16>>2]=HEAP32[r2+20>>2];r10=HEAP32[r1+44>>2];r11=HEAP32[r2+24>>2]+HEAP32[r2+28>>2]-r10|0;r12=r1+28|0;HEAP32[r12>>2]=r11;r13=r9;r14=r11;while(1){if((r13|0)==0){r15=r9;break L1}r11=r13+36|0;r16=r14;while(1){r17=HEAP32[r11>>2];if((r17|0)==0){break}r18=HEAP32[r17>>2];if((r18|0)==(r2|0)){r19=r16}else{r20=_logmath_add(r3,r16,HEAP32[r18+24>>2]+HEAP32[r18+28>>2]-r10|0);HEAP32[r12>>2]=r20;r19=r20}r11=r17+4|0;r16=r19}r13=HEAP32[r13+44>>2];r14=r16}}else{r14=HEAP32[r2+4>>2];HEAP32[r1+16>>2]=HEAP32[r14+16>>2];HEAP32[r1+28>>2]=0;r15=r14}}while(0);r19=HEAP32[r15+4>>2];r14=HEAP32[r1+4>>2];if((r19|0)<0){r21=0}else{r21=HEAP32[HEAP32[HEAP32[r14+16>>2]+8>>2]+(r19*20&-1)>>2]}HEAP32[r1+8>>2]=r21;HEAP32[r1+12>>2]=HEAP32[r15+20>>2];HEAP32[r1+20>>2]=HEAP32[r2+12>>2]<<10;r15=HEAP32[HEAP32[r14>>2]>>2];do{if((HEAP8[r15]|0)==110){r21=r15;r19=10384;while(1){r13=r21+1|0;r12=r19+1|0;r22=HEAP8[r13];r23=HEAP8[r12];if(r22<<24>>24!=r23<<24>>24|r22<<24>>24==0|r23<<24>>24==0){break}else{r21=r13;r19=r12}}if(r22<<24>>24!=r23<<24>>24){break}r19=HEAP32[r14+56>>2];r21=HEAP32[r2+8>>2];if((r21|0)==0){if(r8){HEAP32[r1+24>>2]=0;HEAP32[r1+32>>2]=1;STACKTOP=r4;return}else{r12=HEAP32[HEAP32[r2+4>>2]+8>>2];HEAP32[r6>>2]=HEAP32[HEAP32[r2>>2]+8>>2];r13=_ngram_ng_score(r19,r12,r6,1,r1+32|0)>>10;HEAP32[r1+24>>2]=r13;STACKTOP=r4;return}}if(!r8){r13=HEAP32[HEAP32[r2+4>>2]+8>>2];r12=HEAP32[HEAP32[r21>>2]+8>>2];r10=r5|0;HEAP32[r10>>2]=HEAP32[HEAP32[r2>>2]+8>>2];HEAP32[r5+4>>2]=r12;r12=_ngram_ng_score(r19,r13,r10,2,r1+32|0)>>10;HEAP32[r1+24>>2]=r12;STACKTOP=r4;return}r12=HEAP32[r21+8>>2];r10=HEAP32[HEAP32[r2>>2]+8>>2];r13=HEAP32[HEAP32[r21>>2]+8>>2];if((r12|0)==0){HEAP32[r7>>2]=r13;r21=_ngram_ng_score(r19,r10,r7,1,r1+32|0)>>10;HEAP32[r1+24>>2]=r21;STACKTOP=r4;return}else{r21=HEAP32[HEAP32[r12>>2]+8>>2];r12=r5|0;HEAP32[r12>>2]=r13;HEAP32[r5+4>>2]=r21;r21=_ngram_ng_score(r19,r10,r12,2,r1+32|0)>>10;HEAP32[r1+24>>2]=r21;STACKTOP=r4;return}}}while(0);HEAP32[r1+32>>2]=1;HEAP32[r1+24>>2]=0;STACKTOP=r4;return}function _latlink_list_new(r1,r2){var r3,r4,r5;r3=r1|0;r4=HEAP32[r3>>2];if((r4|0)==0){_listelem_add_block(r1,42920,1069);r5=HEAP32[r3>>2]}else{r5=r4}HEAP32[r3>>2]=HEAP32[r5>>2];r3=r1+24|0;HEAP32[r3>>2]=HEAP32[r3>>2]+1;HEAP32[r5>>2]=r2;HEAP32[r5+4>>2]=0;return r5}function _ps_lattice_traverse_next(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=0;r4=r1+68|0;r5=HEAP32[r4>>2];if((r5|0)==0){r6=0;return r6}r7=r5|0;r8=HEAP32[r7>>2];r9=HEAP32[r5+4>>2];r10=HEAP32[r1+64>>2];r11=r10|0;HEAP32[r7>>2]=HEAP32[r11>>2];HEAP32[r11>>2]=r5;r5=r10+28|0;HEAP32[r5>>2]=HEAP32[r5>>2]+1;HEAP32[r4>>2]=r9;if((r9|0)==0){HEAP32[r1+72>>2]=0}if((r8|0)==0){r6=0;return r6}r9=r8+4|0;r5=HEAP32[r9>>2]+32|0;HEAP32[r5>>2]=HEAP32[r5>>2]-1;r5=HEAP32[r9>>2];if((HEAP32[r5+32>>2]|0)!=0){r6=r8;return r6}if((r2|0)==0){r12=HEAP32[r1+32>>2]}else{r12=r2}if((r5|0)==(r12|0)){r12=r1+64|0;r2=r1+72|0;r9=HEAP32[r4>>2];while(1){if((r9|0)==0){r6=r8;r3=20;break}r10=r9|0;r11=HEAP32[r10>>2];r7=HEAP32[r9+4>>2];r13=HEAP32[r12>>2];r14=r13|0;HEAP32[r10>>2]=HEAP32[r14>>2];HEAP32[r14>>2]=r9;r14=r13+28|0;HEAP32[r14>>2]=HEAP32[r14>>2]+1;HEAP32[r4>>2]=r7;if((r7|0)==0){HEAP32[r2>>2]=0}if((r11|0)==0){r6=r8;r3=20;break}else{r9=r7}}if(r3==20){return r6}}else{r3=r1+64|0;r9=r1+72|0;r1=r5+36|0;while(1){r5=HEAP32[r1>>2];if((r5|0)==0){r6=r8;break}r2=(HEAP32[r4>>2]|0)==0;r12=_latlink_list_new(HEAP32[r3>>2],HEAP32[r5>>2]);if(r2){HEAP32[r9>>2]=r12;HEAP32[r4>>2]=r12}else{HEAP32[HEAP32[r9>>2]+4>>2]=r12;HEAP32[r9>>2]=HEAP32[HEAP32[r9>>2]+4>>2]}r1=r5+4|0}return r6}}function _ps_lattice_reverse_next(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=0;r4=r1+68|0;r5=HEAP32[r4>>2];if((r5|0)==0){r6=0;return r6}r7=r5|0;r8=HEAP32[r7>>2];r9=HEAP32[r5+4>>2];r10=HEAP32[r1+64>>2];r11=r10|0;HEAP32[r7>>2]=HEAP32[r11>>2];HEAP32[r11>>2]=r5;r5=r10+28|0;HEAP32[r5>>2]=HEAP32[r5>>2]+1;HEAP32[r4>>2]=r9;if((r9|0)==0){HEAP32[r1+72>>2]=0}if((r8|0)==0){r6=0;return r6}r9=r8|0;r5=HEAP32[r9>>2]+32|0;HEAP32[r5>>2]=HEAP32[r5>>2]-1;r5=HEAP32[r9>>2];if((HEAP32[r5+32>>2]|0)!=0){r6=r8;return r6}if((r2|0)==0){r12=HEAP32[r1+28>>2]}else{r12=r2}if((r5|0)==(r12|0)){r12=r1+64|0;r2=r1+72|0;r9=HEAP32[r4>>2];while(1){if((r9|0)==0){r6=r8;r3=20;break}r10=r9|0;r11=HEAP32[r10>>2];r7=HEAP32[r9+4>>2];r13=HEAP32[r12>>2];r14=r13|0;HEAP32[r10>>2]=HEAP32[r14>>2];HEAP32[r14>>2]=r9;r14=r13+28|0;HEAP32[r14>>2]=HEAP32[r14>>2]+1;HEAP32[r4>>2]=r7;if((r7|0)==0){HEAP32[r2>>2]=0}if((r11|0)==0){r6=r8;r3=20;break}else{r9=r7}}if(r3==20){return r6}}else{r3=r1+64|0;r9=r1+72|0;r1=r5+40|0;while(1){r5=HEAP32[r1>>2];if((r5|0)==0){r6=r8;break}r2=(HEAP32[r4>>2]|0)==0;r12=_latlink_list_new(HEAP32[r3>>2],HEAP32[r5>>2]);if(r2){HEAP32[r9>>2]=r12;HEAP32[r4>>2]=r12}else{HEAP32[HEAP32[r9>>2]+4>>2]=r12;HEAP32[r9>>2]=HEAP32[HEAP32[r9>>2]+4>>2]}r1=r5+4|0}return r6}}function _ps_lattice_bestpath(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+40|0;r8=r7;r9=r7+8;r10=r7+16;r11=r7+24;r12=r7+32;r13=r1+8|0;r14=HEAP32[r13>>2];r15=HEAP32[r1+4>>2];r16=r1+24|0;r17=r15+64|0;r18=r16;while(1){r19=HEAP32[r18>>2];if((r19|0)==0){break}r20=r19+36|0;while(1){r21=HEAP32[r20>>2];if((r21|0)==0){break}r22=r21|0;HEAP32[HEAP32[r22>>2]+16>>2]=-2147483648;HEAP32[HEAP32[r22>>2]+24>>2]=HEAP32[r17>>2];r20=r21+4|0}r18=r19+48|0}r18=r1+28|0;r20=r14+16|0;r21=(r2|0)==0;r22=r14+44|0;r14=r1+32|0;r23=HEAP32[r18>>2]+36|0;while(1){r24=HEAP32[r23>>2];if((r24|0)==0){break}r25=r24|0;if((_dict_filler_word(HEAP32[r20>>2],HEAP32[HEAP32[HEAP32[r25>>2]+4>>2]+8>>2])|0)==0){r5=11}else{if((HEAP32[HEAP32[r25>>2]+4>>2]|0)==(HEAP32[r14>>2]|0)){r5=11}}if(r5==11){r5=0;r26=HEAP32[r25>>2];r27=HEAP32[r26+12>>2];if(r21){HEAP32[r26+16>>2]=r27}else{r28=HEAP32[HEAP32[r26+4>>2]+8>>2];HEAP32[r9>>2]=HEAP32[r22>>2];r26=r27+(_ngram_ng_score(r2,r28,r9,1,r10)>>10)*r3&-1;HEAP32[HEAP32[r25>>2]+16>>2]=r26}HEAP32[HEAP32[r25>>2]+8>>2]=0;HEAP32[HEAP32[r25>>2]+24>>2]=0}r23=r24+4|0}r23=r1+68|0;r10=r1+64|0;r9=r1+72|0;r22=HEAP32[r23>>2];while(1){if((r22|0)==0){r29=r16;break}r24=r22|0;r25=HEAP32[r24>>2];r26=HEAP32[r22+4>>2];r28=HEAP32[r10>>2];r27=r28|0;HEAP32[r24>>2]=HEAP32[r27>>2];HEAP32[r27>>2]=r22;r27=r28+28|0;HEAP32[r27>>2]=HEAP32[r27>>2]+1;HEAP32[r23>>2]=r26;if((r26|0)==0){HEAP32[r9>>2]=0}if((r25|0)==0){r29=r16;break}else{r22=r26}}while(1){r22=HEAP32[r29>>2];if((r22|0)==0){r30=r16;break}HEAP32[r22+32>>2]=0;r29=r22+48|0}while(1){r29=HEAP32[r30>>2];if((r29|0)==0){break}r16=r29+36|0;while(1){r22=HEAP32[r16>>2];if((r22|0)==0){break}r26=HEAP32[HEAP32[r22>>2]+4>>2]+32|0;HEAP32[r26>>2]=HEAP32[r26>>2]+1;r16=r22+4|0}r30=r29+48|0}r30=HEAP32[r18>>2]+36|0;while(1){r16=HEAP32[r30>>2];if((r16|0)==0){break}r19=(HEAP32[r23>>2]|0)==0;r22=_latlink_list_new(HEAP32[r10>>2],HEAP32[r16>>2]);if(r19){HEAP32[r9>>2]=r22;HEAP32[r23>>2]=r22}else{HEAP32[HEAP32[r9>>2]+4>>2]=r22;HEAP32[r9>>2]=HEAP32[HEAP32[r9>>2]+4>>2]}r30=r16+4|0}r30=_ps_lattice_traverse_next(r1,0);r9=r8|0;r23=r8+4|0;r8=r30;L47:while(1){if((r8|0)==0){break}r30=r8|0;if((_dict_filler_word(HEAP32[r20>>2],HEAP32[HEAP32[r30>>2]+8>>2])|0)==0){r5=38}else{if((HEAP32[r30>>2]|0)==(HEAP32[r18>>2]|0)){r5=38}}L52:do{if(r5==38){r5=0;r10=r8+4|0;if((_dict_filler_word(HEAP32[r20>>2],HEAP32[HEAP32[r10>>2]+8>>2])|0)!=0){if((HEAP32[r10>>2]|0)!=(HEAP32[r14>>2]|0)){break}}r16=r8+16|0;if((HEAP32[r16>>2]|0)==-2147483648){r5=41;break L47}if(r21){r31=0}else{r31=_ngram_ng_prob(r2,HEAP32[HEAP32[r10>>2]+8>>2],HEAP32[r30>>2]+8|0,1,r11)}r22=r8+24|0;HEAP32[r22>>2]=HEAP32[r22>>2]+(HEAP32[r8+12>>2]<<10)*r4&-1;r19=HEAP32[r10>>2]+36|0;while(1){r26=HEAP32[r19>>2];if((r26|0)==0){break L52}r25=r26|0;r27=(_dict_filler_word(HEAP32[r20>>2],HEAP32[HEAP32[HEAP32[r25>>2]+4>>2]+8>>2])|0)==0;r28=HEAP32[r25>>2];if(r27){r32=r28;r5=48}else{if((HEAP32[r28+4>>2]|0)==(HEAP32[r14>>2]|0)){r32=r28;r5=48}}do{if(r5==48){r5=0;r28=r32+24|0;r27=_logmath_add(r15,HEAP32[r28>>2],HEAP32[r22>>2]+r31|0);HEAP32[r28>>2]=r27;if(r21){r33=0}else{r27=HEAP32[HEAP32[HEAP32[r25>>2]+4>>2]+8>>2];r28=HEAP32[HEAP32[r30>>2]+8>>2];HEAP32[r9>>2]=HEAP32[HEAP32[r10>>2]+8>>2];HEAP32[r23>>2]=r28;r33=(_ngram_ng_score(r2,r27,r9,2,r11)>>10)*r3&-1}r27=HEAP32[r25>>2];r28=HEAP32[r16>>2]+r33+HEAP32[r27+12>>2]|0;r24=r27+16|0;if((r28|0)<=(HEAP32[r24>>2]|0)){break}HEAP32[r24>>2]=r28;HEAP32[HEAP32[r25>>2]+8>>2]=r8}}while(0);r19=r26+4|0}}}while(0);r8=_ps_lattice_traverse_next(r1,0)}if(r5==41){___assert_fail(10752,42920,1296,49896)}r5=r1+48|0;HEAP32[r5>>2]=HEAP32[r17>>2];r17=HEAP32[r14>>2]+40|0;r8=-2147483648;r33=0;while(1){r3=HEAP32[r17>>2];if((r3|0)==0){break}r11=r3|0;if((_dict_filler_word(HEAP32[r20>>2],HEAP32[HEAP32[HEAP32[r11>>2]>>2]+8>>2])|0)==0){if(r21){r34=0}else{r9=HEAP32[r11>>2];r34=_ngram_ng_prob(r2,HEAP32[HEAP32[r9+4>>2]+8>>2],HEAP32[r9>>2]+8|0,1,r12)}r9=_logmath_add(r15,HEAP32[r5>>2],HEAP32[HEAP32[r11>>2]+24>>2]+r34|0);HEAP32[r5>>2]=r9;r9=HEAP32[r11>>2];r11=HEAP32[r9+16>>2];r23=(r11|0)>(r8|0);r35=r23?r11:r8;r36=r23?r9:r33}else{r35=r8;r36=r33}r17=r3+4|0;r8=r35;r33=r36}r36=HEAP32[r5>>2]+(HEAP32[r1+44>>2]<<10)*r4&-1;HEAP32[r5>>2]=r36;r5=HEAP32[r14>>2];r14=HEAP32[r5+4>>2];if((r14|0)<0){r37=0;r38=r5+20|0;r39=HEAP32[r38>>2];r40=r5+16|0;r41=HEAP32[r40>>2];_err_msg(1,42920,1368,10592,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=r37,HEAP32[r6+8>>2]=r39,HEAP32[r6+16>>2]=r41,HEAP32[r6+24>>2]=r36,r6));STACKTOP=r6;STACKTOP=r7;return r33}r37=HEAP32[HEAP32[HEAP32[HEAP32[r13>>2]+16>>2]+8>>2]+(r14*20&-1)>>2];r38=r5+20|0;r39=HEAP32[r38>>2];r40=r5+16|0;r41=HEAP32[r40>>2];_err_msg(1,42920,1368,10592,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=r37,HEAP32[r6+8>>2]=r39,HEAP32[r6+16>>2]=r41,HEAP32[r6+24>>2]=r36,r6));STACKTOP=r6;STACKTOP=r7;return r33}function _ps_lattice_posterior(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+16|0;r7=r6;r8=r6+8;r9=r1+8|0;r10=HEAP32[r9>>2];r11=HEAP32[r1+4>>2];r12=r1+24|0;r13=r11+64|0;r14=r12;while(1){r15=HEAP32[r14>>2];if((r15|0)==0){break}r16=r15+36|0;while(1){r17=HEAP32[r16>>2];if((r17|0)==0){break}HEAP32[HEAP32[r17>>2]+28>>2]=HEAP32[r13>>2];r16=r17+4|0}r14=r15+48|0}r14=r1+68|0;r13=r1+64|0;r16=r1+72|0;r17=HEAP32[r14>>2];while(1){if((r17|0)==0){r18=r12;break}r19=r17|0;r20=HEAP32[r19>>2];r21=HEAP32[r17+4>>2];r22=HEAP32[r13>>2];r23=r22|0;HEAP32[r19>>2]=HEAP32[r23>>2];HEAP32[r23>>2]=r17;r23=r22+28|0;HEAP32[r23>>2]=HEAP32[r23>>2]+1;HEAP32[r14>>2]=r21;if((r21|0)==0){HEAP32[r16>>2]=0}if((r20|0)==0){r18=r12;break}else{r17=r21}}while(1){r17=HEAP32[r18>>2];if((r17|0)==0){break}HEAP32[r17+32>>2]=0;r12=r17+32|0;r21=r17+36|0;r20=0;while(1){r23=HEAP32[r21>>2];if((r23|0)==0){break}r22=r20+1|0;HEAP32[r12>>2]=r22;r21=r23+4|0;r20=r22}r18=r17+48|0}r18=HEAP32[r1+32>>2]+40|0;while(1){r20=HEAP32[r18>>2];if((r20|0)==0){break}r21=(HEAP32[r14>>2]|0)==0;r12=_latlink_list_new(HEAP32[r13>>2],HEAP32[r20>>2]);if(r21){HEAP32[r16>>2]=r12;HEAP32[r14>>2]=r12}else{HEAP32[HEAP32[r16>>2]+4>>2]=r12;HEAP32[r16>>2]=HEAP32[HEAP32[r16>>2]+4>>2]}r18=r20+4|0}r18=r10+16|0;r10=(r2|0)==0;r16=r1+32|0;r14=r1+44|0;r13=r1+28|0;r20=_ps_lattice_reverse_next(r1,0);r12=-2147483648;r21=0;while(1){if((r20|0)==0){break}r15=r20|0;if((_dict_filler_word(HEAP32[r18>>2],HEAP32[HEAP32[r15>>2]+8>>2])|0)==0){r4=27}else{if((HEAP32[r15>>2]|0)==(HEAP32[r13>>2]|0)){r4=27}else{r24=r12;r25=r21}}L36:do{if(r4==27){r4=0;r22=r20+4|0;if((_dict_filler_word(HEAP32[r18>>2],HEAP32[HEAP32[r22>>2]+8>>2])|0)!=0){if((HEAP32[r22>>2]|0)!=(HEAP32[r16>>2]|0)){r24=r12;r25=r21;break}}if(r10){r26=0}else{r26=_ngram_ng_prob(r2,HEAP32[HEAP32[r22>>2]+8>>2],HEAP32[r15>>2]+8|0,1,r8)}r23=HEAP32[r22>>2];if((r23|0)==(HEAP32[r16>>2]|0)){r22=HEAP32[r20+16>>2];r19=(r22|0)>(r12|0);HEAP32[r20+28>>2]=r26+(HEAP32[r14>>2]<<10)*r3&-1;r24=r19?r22:r12;r25=r19?r20:r21;break}r19=r20+28|0;r22=r23+36|0;while(1){r23=HEAP32[r22>>2];if((r23|0)==0){r24=r12;r25=r21;break L36}r27=r23|0;r28=(_dict_filler_word(HEAP32[r18>>2],HEAP32[HEAP32[HEAP32[r27>>2]+4>>2]+8>>2])|0)==0;r29=HEAP32[r27>>2];if(r28){r30=r29;r4=37}else{if((HEAP32[r29+4>>2]|0)==(HEAP32[r16>>2]|0)){r30=r29;r4=37}}if(r4==37){r4=0;r29=_logmath_add(r11,HEAP32[r19>>2],HEAP32[r30+28>>2]+r26+(HEAP32[r30+12>>2]<<10)*r3&-1);HEAP32[r19>>2]=r29}r22=r23+4|0}}}while(0);r20=_ps_lattice_reverse_next(r1,0);r12=r24;r21=r25}r25=HEAP32[r9>>2];do{if((r25|0)==0){r31=0}else{r9=HEAP32[HEAP32[r25>>2]>>2];if((HEAP8[r9]|0)==110){r32=r9;r33=10384}else{r31=0;break}while(1){r9=r32+1|0;r24=r33+1|0;r34=HEAP8[r9];r35=HEAP8[r24];if(r34<<24>>24!=r35<<24>>24|r34<<24>>24==0|r35<<24>>24==0){break}else{r32=r9;r33=r24}}if(r34<<24>>24!=r35<<24>>24){r31=0;break}r31=HEAP32[r25+56>>2]}}while(0);r25=(r31|0)==0;r35=r21;r21=(HEAP32[r14>>2]<<10|0)*r3;while(1){r36=r21&-1;if((r35|0)==0){break}if(r25){r37=r36}else{r37=r36+_ngram_ng_prob(r31,HEAP32[HEAP32[r35+4>>2]+8>>2],HEAP32[r35>>2]+8|0,1,r7)|0}r14=(r37|0)+(HEAP32[r35+12>>2]<<10|0)*r3;r35=HEAP32[r35+8>>2];r21=r14}r21=r1+48|0;r1=r36-HEAP32[r21>>2]|0;_err_msg(1,42920,1403,10184,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r36,HEAP32[r5+8>>2]=r1,r5));STACKTOP=r5;STACKTOP=r6;return r36-HEAP32[r21>>2]|0}function _ps_lattice_seg_next(r1){var r2,r3,r4,r5;r2=r1+50|0;r3=HEAP16[r2>>1]+1&65535;HEAP16[r2>>1]=r3;r2=r3<<16>>16;r4=HEAP16[r1+48>>1];if((r2|0)==((r4<<16>>16)+1|0)){_free(HEAP32[r1+40>>2]);_free(r1);r5=0;return r5}if(r3<<16>>16==r4<<16>>16){_ps_lattice_link2itor(r1,HEAP32[HEAP32[r1+40>>2]+(r2-1<<2)>>2],1);r5=r1;return r5}else{_ps_lattice_link2itor(r1,HEAP32[HEAP32[r1+40>>2]+(r2<<2)>>2],0);r5=r1;return r5}}function _ps_lattice_seg_free(r1){_free(HEAP32[r1+40>>2]);_free(r1);return}function _ps_mllr_free(r1){var r2,r3,r4,r5,r6,r7,r8;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=r1+8|0;r2=r1+16|0;r4=r1+20|0;r5=r1+24|0;r6=0;while(1){if((r6|0)>=(HEAP32[r3>>2]|0)){break}r7=HEAP32[r2>>2];if((r7|0)!=0){r8=HEAP32[r7+(r6<<2)>>2];if((r8|0)!=0){r7=HEAP32[r8>>2];if((r7|0)!=0){_free(HEAP32[r7>>2])}_free(HEAP32[r8>>2])}_free(r8)}r8=HEAP32[r4>>2];if((r8|0)!=0){r7=HEAP32[r8+(r6<<2)>>2];if((r7|0)!=0){_free(HEAP32[r7>>2])}_free(r7)}r7=HEAP32[r5>>2];if((r7|0)!=0){r8=HEAP32[r7+(r6<<2)>>2];if((r8|0)!=0){_free(HEAP32[r8>>2])}_free(r8)}r6=r6+1|0}_free(HEAP32[r1+12>>2]);_free(HEAP32[r2>>2]);_free(HEAP32[r4>>2]);_free(HEAP32[r5>>2]);_free(r1);return}function _ptm_mgau_frame_eval(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81;r8=r1;r9=HEAP32[r1+48>>2];r10=(r6|0)%(r9|0)&-1;r11=HEAP32[r1+40>>2];r12=r11+(r10<<3)|0;r13=r1+44|0;r14=r13;HEAP32[r13>>2]=r12;L1:do{if((HEAP32[r1+4>>2]|0)<=(r6|0)){r13=r1+12|0;r15=HEAP32[r13>>2];r16=Math_imul(HEAP32[r15+16>>2],HEAP32[r15+20>>2])|0;r15=r1+36|0;_memcpy(HEAP32[HEAP32[HEAP32[r12>>2]>>2]>>2],HEAP32[HEAP32[HEAP32[r11+(((r10|0)==0?r9:r10)-1<<3)>>2]>>2]>>2],Math_imul(r16,HEAP16[r15>>1]|0)<<3)|0;r16=HEAP32[HEAP32[r14>>2]+4>>2];r17=((HEAP32[HEAP32[r13>>2]+16>>2]+31|0)/32&-1)<<2;L3:do{if((r7|0)==0){_memset(r16,0,r17)|0;r18=r1+20|0;r19=0;r20=0;while(1){if((r20|0)>=(r4|0)){break}r21=HEAPU8[r3+r20|0]+r19|0;r22=HEAPU8[HEAP32[r18>>2]+r21|0];r23=HEAP32[HEAP32[r14>>2]+4>>2]+(r22>>>5<<2)|0;HEAP32[r23>>2]=HEAP32[r23>>2]|1<<(r22&31);r19=r21;r20=r20+1|0}r20=HEAP32[r13>>2];r19=HEAP32[r20+16>>2];r18=0;while(1){if((r18|0)>=(r19|0)){r24=0;r25=r20;break L3}r18=r18+1|0}}else{_memset(r16,-1,r17)|0;r24=0;r25=HEAP32[r13>>2]}}while(0);while(1){r26=HEAP32[r25+16>>2];if((r24|0)<(r26|0)){r27=0;r28=r25}else{break}while(1){if((r27|0)>=(HEAP32[r28+20>>2]|0)){break}r17=HEAP32[r5+(r27<<2)>>2];r16=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r24<<2)>>2]+(r27<<2)>>2];r18=HEAP32[HEAP32[r28+28>>2]+(r27<<2)>>2];r20=(r18|0)%4&-1;r19=0;while(1){if((r19|0)>=(HEAP16[r15>>1]|0)){break}r21=HEAP32[r16+(r19<<3)>>2];r22=HEAP32[r13>>2];r23=Math_imul(r21,r18)|0;r29=0;r30=HEAP32[HEAP32[HEAP32[HEAP32[r22>>2]+(r24<<2)>>2]+(r27<<2)>>2]>>2]+(r23<<2)|0;r31=HEAP32[HEAP32[HEAP32[HEAP32[r22+4>>2]+(r24<<2)>>2]+(r27<<2)>>2]>>2]+(r23<<2)|0;r23=HEAPF32[HEAP32[HEAP32[HEAP32[r22+8>>2]+(r24<<2)>>2]+(r27<<2)>>2]+(r21<<2)>>2];r21=r17;while(1){if((r29|0)>=(r20|0)){r32=r30;r33=r31;r34=r23;r35=r21;r36=r29;break}r22=HEAPF32[r21>>2]-HEAPF32[r30>>2];r37=r23-r22*r22*HEAPF32[r31>>2];r29=r29+1|0;r30=r30+4|0;r31=r31+4|0;r23=r37;r21=r21+4|0}while(1){if((r36|0)>=(r18|0)){break}r21=HEAPF32[r35>>2]-HEAPF32[r32>>2];r23=HEAPF32[r35+4>>2]-HEAPF32[r32+4>>2];r31=HEAPF32[r35+8>>2]-HEAPF32[r32+8>>2];r30=HEAPF32[r35+12>>2]-HEAPF32[r32+12>>2];r29=r34-r21*r21*HEAPF32[r33>>2]-r23*r23*HEAPF32[r33+4>>2]-r31*r31*HEAPF32[r33+8>>2]-r30*r30*HEAPF32[r33+12>>2];r32=r32+16|0;r33=r33+16|0;r34=r29;r35=r35+16|0;r36=r36+4|0}r29=r34&-1;HEAP32[r16+(r19<<3)+4>>2]=r29;if((r19|0)!=0){r30=r16+(r19<<3)|0;r31=HEAP32[r30>>2];r23=HEAP32[r30+4>>2];r30=r19;while(1){r21=r30-1|0;if((r30|0)<=0){break}if((r29|0)<=(HEAP32[r16+(r21<<3)+4>>2]|0)){break}r37=r16+(r21<<3)|0;r22=r16+(r30<<3)|0;r38=HEAP32[r37+4>>2];HEAP32[r22>>2]=HEAP32[r37>>2];HEAP32[r22+4>>2]=r38;r30=r21}r29=r16+(r30<<3)|0;HEAP32[r29>>2]=r31;HEAP32[r29+4>>2]=r23}r19=r19+1|0}r27=r27+1|0;r28=HEAP32[r13>>2]}r24=r24+1|0;r25=r28}if(((r6|0)%(HEAP16[r8+38>>1]|0)&-1|0)==0){r39=0;r40=r25;r41=r26}else{break}while(1){if((r39|0)>=(r41|0)){r42=0;r43=r40;r44=r41;break}if((HEAP32[HEAP32[HEAP32[r14>>2]+4>>2]+(((r39|0)/32&-1)<<2)>>2]&1<<(r39&31)|0)==0){r45=r40;r46=r41}else{r19=0;r16=r40;while(1){if((r19|0)>=(HEAP32[r16+20>>2]|0)){break}r18=HEAP32[r5+(r19<<2)>>2];r20=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r39<<2)>>2]+(r19<<2)>>2];r17=HEAP16[r15>>1]|0;r29=HEAP32[HEAP32[HEAP32[r16+8>>2]+(r39<<2)>>2]+(r19<<2)>>2];r21=r29+(HEAP32[r16+24>>2]<<2)|0;r38=HEAP32[HEAP32[r16+28>>2]+(r19<<2)>>2];r22=r20+(r17-1<<3)+4|0;r37=r29;r47=(r38|0)%4&-1;r48=r20+(r17-2<<3)|0;r17=r29;r29=HEAP32[HEAP32[HEAP32[HEAP32[r16>>2]+(r39<<2)>>2]+(r19<<2)>>2]>>2];r49=HEAP32[HEAP32[HEAP32[HEAP32[r16+4>>2]+(r39<<2)>>2]+(r19<<2)>>2]>>2];while(1){if(r17>>>0>=r21>>>0){break}r50=HEAP32[r22>>2]|0;r51=r17-r37>>2;r52=0;r53=r29;r54=r49;r55=HEAPF32[r17>>2];r56=r18;while(1){if(!((r52|0)<(r47|0)&r55>=r50)){r57=r53;r58=r54;r59=r55;r60=r56;r61=r52;break}r62=HEAPF32[r56>>2]-HEAPF32[r53>>2];r63=r55-r62*r62*HEAPF32[r54>>2];r52=r52+1|0;r53=r53+4|0;r54=r54+4|0;r55=r63;r56=r56+4|0}while(1){r64=(r61|0)<(r38|0);if(!(r64&r59>=r50)){break}r56=HEAPF32[r60>>2]-HEAPF32[r57>>2];r55=HEAPF32[r60+4>>2]-HEAPF32[r57+4>>2];r54=HEAPF32[r60+8>>2]-HEAPF32[r57+8>>2];r53=HEAPF32[r60+12>>2]-HEAPF32[r57+12>>2];r52=r59-r56*r56*HEAPF32[r58>>2]-r55*r55*HEAPF32[r58+4>>2]-r54*r54*HEAPF32[r58+8>>2]-r53*r53*HEAPF32[r58+12>>2];r57=r57+16|0;r58=r58+16|0;r59=r52;r60=r60+16|0;r61=r61+4|0}L56:do{if(r64){r52=r38-r61|0;r65=r57+(r52<<2)|0;r66=r58+(r52<<2)|0}else{if(r59<r50){r65=r57;r66=r58;break}r52=HEAP16[r15>>1]|0;r53=0;while(1){if((r53|0)>=(r52|0)){break}if((HEAP32[r20+(r53<<3)>>2]|0)==(r51|0)){r65=r57;r66=r58;break L56}r53=r53+1|0}r53=r59&-1;r52=r48;while(1){if(r52>>>0<r20>>>0){break}if((r53|0)<(HEAP32[r52+4>>2]|0)){break}r54=r52;r55=r52+8|0;r56=HEAP32[r54+4>>2];HEAP32[r55>>2]=HEAP32[r54>>2];HEAP32[r55+4>>2]=r56;r52=r52-8|0}HEAP32[r52+8>>2]=r51;HEAP32[r52+12>>2]=r53;r65=r57;r66=r58}}while(0);r17=r17+4|0;r29=r65;r49=r66}r19=r19+1|0;r16=HEAP32[r13>>2]}r45=r16;r46=HEAP32[r16+16>>2]}r39=r39+1|0;r40=r45;r41=r46}while(1){if((r42|0)<(HEAP32[r43+20>>2]|0)){r67=0;r68=2147483647}else{break L1}while(1){if((r67|0)>=(r44|0)){break}r19=HEAP32[r14>>2];if((HEAP32[HEAP32[r19+4>>2]+(((r67|0)/32&-1)<<2)>>2]&1<<(r67&31)|0)==0){r69=r68}else{r49=HEAP32[HEAP32[HEAP32[HEAP32[r19>>2]+(r67<<2)>>2]+(r42<<2)>>2]+4>>2]>>10;r69=(r68|0)>(r49|0)?r49:r68}r67=r67+1|0;r68=r69}if((r68|0)==2147483647){break}else{r70=0;r71=r43;r72=r44}while(1){if((r70|0)>=(r72|0)){break}if((HEAP32[HEAP32[HEAP32[r14>>2]+4>>2]+(((r70|0)/32&-1)<<2)>>2]&1<<(r70&31)|0)==0){r73=r71;r74=r72}else{r16=0;while(1){if((r16|0)>=(HEAP16[r15>>1]|0)){break}r49=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r70<<2)>>2]+(r42<<2)>>2]+(r16<<3)+4|0;HEAP32[r49>>2]=HEAP32[r49>>2]>>10;r49=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r70<<2)>>2]+(r42<<2)>>2]+(r16<<3)+4|0;HEAP32[r49>>2]=HEAP32[r49>>2]-r68;r49=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r70<<2)>>2]+(r42<<2)>>2]+(r16<<3)+4|0;HEAP32[r49>>2]=-HEAP32[r49>>2];r49=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r70<<2)>>2]+(r42<<2)>>2]+(r16<<3)+4|0;if((HEAP32[r49>>2]|0)>96){HEAP32[r49>>2]=96}r16=r16+1|0}r16=HEAP32[r13>>2];r73=r16;r74=HEAP32[r16+16>>2]}r70=r70+1|0;r71=r73;r72=r74}r42=r42+1|0;r43=r71;r44=r72}___assert_fail(12944,41496,270,49816)}}while(0);r72=r1+16|0;_memset(r2,0,HEAP32[r72>>2]<<1)|0;r44=(r7|0)==0;if(r44){r75=r4}else{r75=HEAP32[r72>>2]}r4=r1+20|0;r7=r1+12|0;r71=r1+36|0;r43=r1+32|0;r42=r1+24|0;r74=r1+52|0;r1=0;r73=0;r70=2147483647;while(1){if((r1|0)>=(r75|0)){r76=0;break}if(r44){r77=HEAPU8[r3+r1|0]+r73|0}else{r77=r1}r68=HEAPU8[HEAP32[r4>>2]+r77|0];L107:do{if((HEAP32[HEAP32[HEAP32[r14>>2]+4>>2]+(r68>>>5<<2)>>2]&1<<(r68&31)|0)==0){r69=0;while(1){r67=HEAP32[HEAP32[r7>>2]+20>>2];if((r69|0)<(r67|0)){r78=0}else{r79=r67;break L107}while(1){if((r78|0)>=(HEAP16[r71>>1]|0)){break}HEAP32[HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r68<<2)>>2]+(r69<<2)>>2]+(r78<<3)+4>>2]=96;r78=r78+1|0}r69=r69+1|0}}else{r79=HEAP32[HEAP32[r7>>2]+20>>2]}}while(0);r69=(r77|0)/2&-1;r67=0;r46=0;while(1){if((r67|0)>=(r79|0)){break}r41=HEAP32[HEAP32[HEAP32[HEAP32[r14>>2]>>2]+(r68<<2)>>2]+(r67<<2)>>2];r45=HEAP16[r71>>1]|0;r40=0;r39=0;while(1){if((r40|0)>=(r45|0)){break}r66=HEAP32[r43>>2];r65=HEAP32[HEAP32[HEAP32[r42>>2]+(r67<<2)>>2]+(HEAP32[r41+(r40<<3)>>2]<<2)>>2];if((r66|0)==0){r80=r65+r77|0}else{r58=HEAPU8[r65+r69|0];r80=r66+((r58&1|0)==0?r58&15:r58>>>4)|0}r58=HEAPU8[r80];if((r40|0)==0){r81=r58+HEAP32[r41+4>>2]|0}else{r66=r58+HEAP32[r41+(r40<<3)+4>>2]|0;r58=(r39|0)>(r66|0);r81=(r58?r66:r39)-HEAPU8[HEAP32[HEAP32[r74>>2]>>2]+(r58?r39-r66|0:r66-r39|0)|0]|0}r40=r40+1|0;r39=r81}r67=r67+1|0;r46=r46+r39|0}HEAP16[r2+(r77<<1)>>1]=r46;r1=r1+1|0;r73=r77;r70=(r46|0)<(r70|0)?r46:r70}while(1){if((r76|0)>=(HEAP32[r72>>2]|0)){break}r77=r2+(r76<<1)|0;HEAP16[r77>>1]=HEAPU16[r77>>1]-r70;r76=r76+1|0}return 0}function _ptm_mgau_init(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+1176|0;r6=r5;r7=r5+8;r8=r5+16;r9=r5+24;r10=r5+32;r11=r5+40;r12=r5+48;r13=r5+56;r14=r5+64;r15=r5+72;r16=r5+80;r17=r5+88;r18=r5+96;r19=r5+104;r20=r5+112;r21=r5+120;r22=r5+1120;r23=r5+1128;r24=r5+1136;r25=r5+1144;r26=r5+1152;r27=r5+1160;r28=r5+1168;r29=_malloc(60);if((r29|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=60,HEAP32[r4+16>>2]=41496,HEAP32[r4+24>>2]=768,r4));STACKTOP=r4}if((HEAP32[r29-4>>2]&3|0)!=0){_memset(r29,0,60)|0}HEAP32[r29+8>>2]=HEAP32[r1>>2];r30=r1+4|0;r31=HEAP32[r30>>2];r32=r31+12|0;HEAP32[r32>>2]=HEAP32[r32>>2]+1;r32=r29+56|0;HEAP32[r32>>2]=r31;r31=_logmath_init(HEAPF64[HEAP32[r30>>2]+24>>3],10,1);r30=r29+52|0;HEAP32[r30>>2]=r31;L7:do{if((r31|0)!=0){if((HEAP8[r31+8|0]|0)!=1){_err_msg(4,41496,779,47256,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r4>>3]=HEAPF64[r31+24>>3],r4));STACKTOP=r4;break}r33=r29+8|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],34360,r28)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=34360,r4));STACKTOP=r4;r34=0}else{r35=HEAP32[r28>>2];if((r35|0)==0){r34=0;break}r34=HEAP32[r35>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],24208,r27)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=24208,r4));STACKTOP=r4;r36=0}else{r35=HEAP32[r27>>2];if((r35|0)==0){r36=0;break}r36=HEAP32[r35>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],18472,r26)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=18472,r4));STACKTOP=r4;r37=0}else{r35=HEAP32[r26>>2];if((r35|0)==0){r37=0;break}r37=HEAPF64[r35>>3]}}while(0);r35=_gauden_init(r34,r36,r37,HEAP32[r32>>2]);r38=r29+12|0;HEAP32[r38>>2]=r35;if((r35|0)==0){break}r39=HEAP32[r35+16>>2];if((r39|0)>256){_err_msg(1,41496,792,15152,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r39,r4));STACKTOP=r4;break}r40=HEAP32[r2+4>>2];if((r39|0)!=(r40|0)){_err_msg(1,41496,796,12232,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r39,HEAP32[r4+8>>2]=r40,r4));STACKTOP=r4;break}r40=HEAP32[r35+20>>2];r39=HEAP32[r1+16>>2];r41=r39+24|0;r42=(HEAP32[r41>>2]|0)==0;if((r40|0)==(HEAP32[(r42?r39+12|0:r41)>>2]|0)){r43=0}else{r44=HEAP32[(r42?r39+12|0:r41)>>2];_err_msg(4,41496,802,15104,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r40,HEAP32[r4+8>>2]=r44,r4));STACKTOP=r4;break}while(1){if((r43|0)>=(r40|0)){break}r45=HEAP32[HEAP32[r35+28>>2]+(r43<<2)>>2];r46=(HEAP32[r39+84>>2]|0)==0;do{if(r46){r44=HEAP32[r39+28>>2];if((r44|0)==0){r47=HEAP32[r39+16>>2]+(r43<<2)|0;break}else{r47=r44+(r43<<2)|0;break}}else{r47=r39+92|0}}while(0);if((r45|0)!=(HEAP32[r47>>2]|0)){r3=34;break}r43=r43+1|0}if(r3==34){do{if(r46){r35=HEAP32[r39+28>>2];if((r35|0)==0){r48=HEAP32[r39+16>>2]+(r43<<2)|0;break}else{r48=r35+(r43<<2)|0;break}}else{r48=r39+92|0}}while(0);r39=HEAP32[r48>>2];_err_msg(4,41496,808,12176,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r45,HEAP32[r4+8>>2]=r39,r4));STACKTOP=r4;break}L57:do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],9864,r25)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=9864,r4));STACKTOP=r4;r3=145}else{r39=HEAP32[r25>>2];if((r39|0)==0){r3=145;break}r35=HEAP32[r39>>2];if((r35|0)==0){r3=145;break}r39=r21|0;r40=r22;r44=r23;r41=r24;r42=HEAP32[r38>>2];r49=HEAP32[r42+20>>2];r50=HEAP32[r42+24>>2];r42=HEAP32[HEAP32[r1+20>>2]+20>>2];r51=r29+16|0;HEAP32[r51>>2]=r42;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],31344,r20)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=31344,r4));STACKTOP=r4;r52=0}else{r53=HEAP32[r20>>2];if((r53|0)==0){r52=0;break}r52=(HEAP32[r53>>2]|0)!=0|0}}while(0);r53=_fopen(r35,45688);if((r53|0)==0){break L7}_err_msg(1,41496,467,21056,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r35,r4));STACKTOP=r4;L68:do{if((_fread(r40,4,1,r53)|0)==1){r54=HEAP32[r22>>2];do{if((r54|0)<1|(r54|0)>999){r55=_llvm_bswap_i32(r54);HEAP32[r22>>2]=r55;if(!((r55|0)<1|(r55|0)>999)){r56=1;r57=r55;break}_err_msg(4,41496,478,20032,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r55,HEAP32[r4+8>>2]=r35,r4));STACKTOP=r4;break L68}else{r56=0;r57=r54}}while(0);r54=_fread(r39,1,r57,r53);if((r54|0)!=(HEAP32[r22>>2]|0)){r55=___errno_location();r58=HEAP32[r55>>2];r55=_malloc(23);_memcpy(r55,19520,18)|0;r59=r55+_strlen(r55)|0;HEAP8[r59]=HEAP8[6400];HEAP8[r59+1|0]=HEAP8[6401];HEAP8[r59+2|0]=HEAP8[6402];HEAP8[r59+3|0]=HEAP8[6403];HEAP8[r59+4|0]=HEAP8[6404];HEAP8[r59+5|0]=HEAP8[6405];r59=_strerror(r58);_err_msg(4,41496,484,r55,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r59,r4));STACKTOP=r4;_free(r55);break}if((HEAP8[r21+(r54-1)|0]|0)!=0){_err_msg(4,41496,488,19064,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;break}_err_msg(1,41496,491,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r39,r4));STACKTOP=r4;if((_fread(r40,4,1,r53)|0)!=1){r54=___errno_location();r55=HEAP32[r54>>2];r54=_malloc(40);_memcpy(r54,17752,35)|0;r59=r54+_strlen(r54)|0;HEAP8[r59]=HEAP8[6400];HEAP8[r59+1|0]=HEAP8[6401];HEAP8[r59+2|0]=HEAP8[6402];HEAP8[r59+3|0]=HEAP8[6403];HEAP8[r59+4|0]=HEAP8[6404];HEAP8[r59+5|0]=HEAP8[6405];r59=_strerror(r55);_err_msg(4,41496,495,r54,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r35,HEAP32[r4+8>>2]=r59,r4));STACKTOP=r4;_free(r54);break}r54=(r56|0)==0;r59=HEAP32[r22>>2];if(r54){r60=r59}else{r55=_llvm_bswap_i32(r59);HEAP32[r22>>2]=r55;r60=r55}r55=_fread(r39,1,r60,r53);if((r55|0)!=(HEAP32[r22>>2]|0)){r59=___errno_location();r58=HEAP32[r59>>2];r59=_malloc(24);_memcpy(r59,17304,19)|0;r61=r59+_strlen(r59)|0;HEAP8[r61]=HEAP8[6400];HEAP8[r61+1|0]=HEAP8[6401];HEAP8[r61+2|0]=HEAP8[6402];HEAP8[r61+3|0]=HEAP8[6403];HEAP8[r61+4|0]=HEAP8[6404];HEAP8[r61+5|0]=HEAP8[6405];r61=_strerror(r58);_err_msg(4,41496,500,r59,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r61,r4));STACKTOP=r4;_free(r59);break}if((HEAP8[r21+(r55-1)|0]|0)!=0){_err_msg(4,41496,504,17104,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;break}r55=r21+14|0;r59=r21+12|0;r61=r21+13|0;r58=0;r62=r49;r63=r50;r64=r42;r65=8;L93:while(1){r66=r58;r67=r62;r68=r63;r69=r64;while(1){if((_fread(r40,4,1,r53)|0)!=1){r3=69;break L93}r70=HEAP32[r22>>2];if(r54){r71=r70}else{r72=_llvm_bswap_i32(r70);HEAP32[r22>>2]=r72;r71=r72}if((r71|0)==0){r3=73;break L93}if((_fread(r39,1,r71,r53)|0)!=(r71|0)){r3=75;break L93}r72=HEAP8[r39];r70=r72<<24>>24==0;L103:do{if(r70){r73=16440;r74=0}else{r75=r39;r76=16440;r77=14;r78=r72;while(1){r79=r77-1|0;r80=HEAP8[r76];if(!((r79|0)!=0&r80<<24>>24!=0&r78<<24>>24==r80<<24>>24)){r73=r76;r74=r78;break L103}r80=r75+1|0;r81=r76+1|0;r82=HEAP8[r80];if(r82<<24>>24==0){r73=r81;r74=0;break}else{r75=r80;r76=r81;r77=r79;r78=r82}}}}while(0);if(r74<<24>>24==(HEAP8[r73]|0)){r83=_atoi(r55)}else{r83=r67}L111:do{if(r70){r84=16168;r85=0}else{r78=r39;r77=16168;r76=14;r75=r72;while(1){r82=r76-1|0;r79=HEAP8[r77];if(!((r82|0)!=0&r79<<24>>24!=0&r75<<24>>24==r79<<24>>24)){r84=r77;r85=r75;break L111}r79=r78+1|0;r81=r77+1|0;r80=HEAP8[r79];if(r80<<24>>24==0){r84=r81;r85=0;break}else{r78=r79;r77=r81;r76=r82;r75=r80}}}}while(0);if(r85<<24>>24==(HEAP8[r84]|0)){r86=_atoi(r55)}else{r86=r68}L119:do{if(r70){r87=15960;r88=0}else{r75=r39;r76=15960;r77=12;r78=r72;while(1){r80=r77-1|0;r82=HEAP8[r76];if(!((r80|0)!=0&r82<<24>>24!=0&r78<<24>>24==r82<<24>>24)){r87=r76;r88=r78;break L119}r82=r75+1|0;r81=r76+1|0;r79=HEAP8[r82];if(r79<<24>>24==0){r87=r81;r88=0;break}else{r75=r82;r76=r81;r77=r80;r78=r79}}}}while(0);if(r88<<24>>24==(HEAP8[r87]|0)){r89=_atoi(r59)}else{r89=r69}L127:do{if(r70){r90=15720;r91=0}else{r78=r39;r77=15720;r76=14;r75=r72;while(1){r79=r76-1|0;r80=HEAP8[r77];if(!((r79|0)!=0&r80<<24>>24!=0&r75<<24>>24==r80<<24>>24)){r90=r77;r91=r75;break L127}r80=r78+1|0;r81=r77+1|0;r82=HEAP8[r80];if(r82<<24>>24==0){r90=r81;r91=0;break}else{r78=r80;r77=r81;r76=r79;r75=r82}}}}while(0);if(r91<<24>>24==(HEAP8[r90]|0)){r92=_atoi(r55)}else{r92=r66}L135:do{if(r70){r93=15544;r94=0}else{r75=r39;r76=15544;r77=13;r78=r72;while(1){r82=r77-1|0;r79=HEAP8[r76];if(!((r82|0)!=0&r79<<24>>24!=0&r78<<24>>24==r79<<24>>24)){r93=r76;r94=r78;break L135}r79=r75+1|0;r81=r76+1|0;r80=HEAP8[r79];if(r80<<24>>24==0){r93=r81;r94=0;break}else{r75=r79;r76=r81;r77=r82;r78=r80}}}}while(0);if(r94<<24>>24==(HEAP8[r93]|0)){break}else{r66=r92;r67=r83;r68=r86;r69=r89}}r58=r92;r62=r83;r63=r86;r64=r89;r65=_atoi(r61)}if(r3==69){r61=___errno_location();r64=HEAP32[r61>>2];r61=_malloc(47);_memcpy(r61,16768,42)|0;r63=r61+_strlen(r61)|0;HEAP8[r63]=HEAP8[6400];HEAP8[r63+1|0]=HEAP8[6401];HEAP8[r63+2|0]=HEAP8[6402];HEAP8[r63+3|0]=HEAP8[6403];HEAP8[r63+4|0]=HEAP8[6404];HEAP8[r63+5|0]=HEAP8[6405];r63=_strerror(r64);_err_msg(4,41496,511,r61,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r35,HEAP32[r4+8>>2]=r63,r4));STACKTOP=r4;_free(r61);break}else if(r3==73){HEAP32[r24>>2]=r69;HEAP32[r23>>2]=r68;r61=(r66|0)==0;if(r61){if((_fread(r44,4,1,r53)|0)!=1){r63=___errno_location();r64=HEAP32[r63>>2];r63=_malloc(23);_memcpy(r63,15328,18)|0;r62=r63+_strlen(r63)|0;HEAP8[r62]=HEAP8[6400];HEAP8[r62+1|0]=HEAP8[6401];HEAP8[r62+2|0]=HEAP8[6402];HEAP8[r62+3|0]=HEAP8[6403];HEAP8[r62+4|0]=HEAP8[6404];HEAP8[r62+5|0]=HEAP8[6405];r62=_strerror(r64);_err_msg(4,41496,545,r63,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r62,r4));STACKTOP=r4;_free(r63);break}if(!r54){r63=_llvm_bswap_i32(HEAP32[r23>>2]);HEAP32[r23>>2]=r63}if((_fread(r41,4,1,r53)|0)!=1){r63=___errno_location();r62=HEAP32[r63>>2];r63=_malloc(26);_memcpy(r63,14656,21)|0;r64=r63+_strlen(r63)|0;HEAP8[r64]=HEAP8[6400];HEAP8[r64+1|0]=HEAP8[6401];HEAP8[r64+2|0]=HEAP8[6402];HEAP8[r64+3|0]=HEAP8[6403];HEAP8[r64+4|0]=HEAP8[6404];HEAP8[r64+5|0]=HEAP8[6405];r64=_strerror(r62);_err_msg(4,41496,550,r63,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r64,r4));STACKTOP=r4;_free(r63);break}r63=HEAP32[r24>>2];if(r54){r95=r63}else{r64=_llvm_bswap_i32(r63);HEAP32[r24>>2]=r64;r95=r64}r64=HEAP32[r23>>2];_err_msg(1,41496,554,14296,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r64,HEAP32[r4+8>>2]=r95,r4));STACKTOP=r4;r96=r95;r97=r64}else{r96=r69;r97=r68}r64=HEAP32[r38>>2];r63=HEAP32[r64+20>>2];if((r67|0)!=(r63|0)){_err_msg(4,41496,559,14e3,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r67,HEAP32[r4+8>>2]=r63,r4));STACKTOP=r4;break}r63=HEAP32[r64+24>>2];if((r68|0)!=(r63|0)){_err_msg(4,41496,564,13792,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r68,HEAP32[r4+8>>2]=r63,r4));STACKTOP=r4;break}r63=HEAP32[r51>>2];if((r69|0)!=(r63|0)){_err_msg(4,41496,569,13536,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r69,HEAP32[r4+8>>2]=r63,r4));STACKTOP=r4;break}do{if(r61){r98=0}else{if((r66-15|0)>>>0<2){r98=16;break}_err_msg(4,41496,574,13416,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;break L68}}while(0);if(!((r65|0)==8|(r65|0)==4)){_err_msg(4,41496,581,13216,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;break}do{if((r52|0)==0){r61=_ftell(r53);if((r98|0)==0){r99=r61;break}r54=___ckd_calloc__(1,r98,41496,602);HEAP32[r29+32>>2]=r54;if((_fread(r54,1,r98,r53)|0)==(r98|0)){r99=r61;break}_err_msg(4,41496,604,12760,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r98,r4));STACKTOP=r4;break L68}else{_err_msg(1,41496,586,12904,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;r61=_ftell(r53);r54=_mmio_file_read(r35);HEAP32[r29+28>>2]=r54;if((r98|0)==0){r99=r61;break}HEAP32[r29+32>>2]=HEAP32[r54>>2]+r61;r99=r61+r98|0}}while(0);r61=r29+28|0;L181:do{if((HEAP32[r61>>2]|0)==0){r54=___ckd_calloc_3d__(r67,r68,r69,1,41496,624);r63=r29+24|0;HEAP32[r63>>2]=r54;r54=(r65|0)==4;r64=(r96+1|0)/2&-1;r62=0;L191:while(1){HEAP32[r22>>2]=r62;if((r62|0)>=(r67|0)){break L181}r100=r54?r64:r96;r58=0;while(1){if((r58|0)>=(r97|0)){break}if((_fread(HEAP32[HEAP32[HEAP32[r63>>2]+(r62<<2)>>2]+(r58<<2)>>2],1,r100,r53)|0)!=(r100|0)){break L191}r58=r58+1|0}r62=r62+1|0}_err_msg(4,41496,633,12760,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r100,r4));STACKTOP=r4;break L68}else{r62=___ckd_calloc_2d__(r67,r68,4,41496,612);r63=r29+24|0;HEAP32[r63>>2]=r62;r62=(r65|0)==4;r64=(r96+1|0)/2&-1;r54=0;r58=r99;while(1){HEAP32[r22>>2]=r54;if((r54|0)>=(r67|0)){break L181}r55=r62?r64:r96;r59=0;r72=r58;while(1){if((r59|0)>=(r97|0)){break}HEAP32[HEAP32[HEAP32[r63>>2]+(r54<<2)>>2]+(r59<<2)>>2]=HEAP32[HEAP32[r61>>2]>>2]+r72;r59=r59+1|0;r72=r72+r55|0}r54=r54+1|0;r58=r72}}}while(0);_fclose(r53);break L57}else if(r3==75){r61=___errno_location();r65=HEAP32[r61>>2];r61=_malloc(24);_memcpy(r61,17304,19)|0;r58=r61+_strlen(r61)|0;HEAP8[r58]=HEAP8[6400];HEAP8[r58+1|0]=HEAP8[6401];HEAP8[r58+2|0]=HEAP8[6402];HEAP8[r58+3|0]=HEAP8[6403];HEAP8[r58+4|0]=HEAP8[6404];HEAP8[r58+5|0]=HEAP8[6405];r58=_strerror(r65);_err_msg(4,41496,518,r61,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r58,r4));STACKTOP=r4;_free(r61);break}}else{r61=___errno_location();r58=HEAP32[r61>>2];r61=_malloc(39);_memcpy(r61,20576,34)|0;r65=r61+_strlen(r61)|0;HEAP8[r65]=HEAP8[6400];HEAP8[r65+1|0]=HEAP8[6401];HEAP8[r65+2|0]=HEAP8[6402];HEAP8[r65+3|0]=HEAP8[6403];HEAP8[r65+4|0]=HEAP8[6404];HEAP8[r65+5|0]=HEAP8[6405];r65=_strerror(r58);_err_msg(4,41496,470,r61,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r35,HEAP32[r4+8>>2]=r65,r4));STACKTOP=r4;_free(r61)}}while(0);_fclose(r53);break L7}}while(0);do{if(r3==145){do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],8184,r19)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=8184,r4));STACKTOP=r4;r101=0}else{r35=HEAP32[r19>>2];if((r35|0)==0){r101=0;break}r101=HEAP32[r35>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],6760,r18)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=6760,r4));STACKTOP=r4;r102=0}else{r53=HEAP32[r18>>2];if((r53|0)==0){r102=0;break}r102=HEAPF64[r53>>3]}}while(0);r53=r14;r35=r15;r51=r16;r41=r17;_err_msg(1,41496,662,36904,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;r44=_fopen(r101,45688);if((r44|0)==0){r39=___errno_location();r40=HEAP32[r39>>2];r39=_malloc(50);_memcpy(r39,36944,45)|0;r42=r39+_strlen(r39)|0;HEAP8[r42]=HEAP8[6400];HEAP8[r42+1|0]=HEAP8[6401];HEAP8[r42+2|0]=HEAP8[6402];HEAP8[r42+3|0]=HEAP8[6403];HEAP8[r42+4|0]=HEAP8[6404];HEAP8[r42+5|0]=HEAP8[6405];r42=_strerror(r40);_err_msg(5,41496,665,r39,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r101,HEAP32[r4+8>>2]=r42,r4));STACKTOP=r4;_free(r39);_exit(r40)}if((_bio_readhdr(r44,r9,r10,r12)|0)<0){_err_msg(5,41496,669,44648,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}r40=HEAP32[r9>>2];r39=0;r42=0;while(1){r50=HEAP32[r40+(r39<<2)>>2];if((r50|0)==0){break}r49=HEAP8[r50];do{if(r49<<24>>24==99){r103=r50;r104=46256;r3=167}else if(r49<<24>>24==118){r61=r50;r65=45992;while(1){r58=r61+1|0;r54=r65+1|0;r105=HEAP8[r58];r106=HEAP8[r54];if(r105<<24>>24!=r106<<24>>24|r105<<24>>24==0|r106<<24>>24==0){break}else{r61=r58;r65=r54}}if(r105<<24>>24!=r106<<24>>24){if(r49<<24>>24==99){r103=r50;r104=46256;r3=167;break}else{r107=r42;break}}r65=HEAP32[HEAP32[r10>>2]+(r39<<2)>>2];if((HEAP8[r65]|0)==49){r61=r65;r54=49488;while(1){r58=r61+1|0;r63=r54+1|0;r108=HEAP8[r58];r109=HEAP8[r63];if(r108<<24>>24!=r109<<24>>24|r108<<24>>24==0|r109<<24>>24==0){break}else{r61=r58;r54=r63}}if(r108<<24>>24==r109<<24>>24){r107=r42;break}}_err_msg(3,41496,677,47984,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r101,HEAP32[r4+8>>2]=r65,HEAP32[r4+16>>2]=49488,r4));STACKTOP=r4;r107=r42}else{r107=r42}}while(0);if(r3==167){while(1){r3=0;r50=r103+1|0;r49=r104+1|0;r110=HEAP8[r50];r111=HEAP8[r49];if(r110<<24>>24!=r111<<24>>24|r110<<24>>24==0|r111<<24>>24==0){break}else{r103=r50;r104=r49;r3=167}}r107=r110<<24>>24==r111<<24>>24?1:r42}r39=r39+1|0;r42=r107}_bio_hdrarg_free(r40,HEAP32[r10>>2]);HEAP32[r10>>2]=0;HEAP32[r9>>2]=0;HEAP32[r13>>2]=0;r49=HEAP32[r12>>2];if((_bio_fread(r35,4,1,r44,r49,r13)|0)!=1){_err_msg(5,41496,695,27856,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}if((_bio_fread(r51,4,1,r44,r49,r13)|0)!=1){_err_msg(5,41496,695,27856,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}if((_bio_fread(r41,4,1,r44,r49,r13)|0)!=1){_err_msg(5,41496,695,27856,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}if((_bio_fread(r53,4,1,r44,r49,r13)|0)!=1){_err_msg(5,41496,695,27856,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}r50=HEAP32[r16>>2];r54=HEAP32[r38>>2];r61=r54+20|0;r63=HEAP32[r61>>2];if((r50|0)!=(r63|0)){_err_msg(5,41496,698,26704,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r50,HEAP32[r4+8>>2]=r63,r4));STACKTOP=r4;_exit(1)}r63=HEAP32[r15>>2];r58=Math_imul(r63,r50)|0;r64=HEAP32[r17>>2];if((HEAP32[r14>>2]|0)!=(Math_imul(r58,r64)|0)){_err_msg(5,41496,702,25776,(r4=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r4>>2]=r101,HEAP32[r4+8>>2]=r39,HEAP32[r4+16>>2]=r63,HEAP32[r4+24>>2]=r50,HEAP32[r4+32>>2]=r64,r4));STACKTOP=r4;_exit(1)}HEAP32[r29+16>>2]=r63;r58=___ckd_calloc_3d__(HEAP32[r61>>2],HEAP32[r54+24>>2],r63,1,41496,712);r54=r29+24|0;HEAP32[r54>>2]=r58;r58=___ckd_calloc__(r64,4,41496,715);r61=r58;r62=r102;r55=0;r59=0;L261:while(1){if((r55|0)<(r63|0)){r112=0;r113=r59}else{break}while(1){if((r112|0)>=(r50|0)){break}if((_bio_fread(r58,4,r64,r44,r49,r13)|0)!=(r64|0)){r3=183;break L261}r70=_vector_sum_norm(r61,r64)>0;r78=r70?r113:r113+1|0;r70=0;while(1){if((r70|0)>=(r64|0)){break}r77=r61+(r70<<2)|0;if(HEAPF32[r77>>2]<r102){HEAPF32[r77>>2]=r62}r70=r70+1|0}_vector_sum_norm(r61,r64);r70=0;while(1){if((r70|0)>=(r64|0)){break}r65=HEAP32[r30>>2];r77=HEAPF32[r61+(r70<<2)>>2];if(r77>0){r76=Math_log(r77);r114=(r76*HEAPF64[r65+48>>3]&-1)>>HEAP8[r65+9|0]}else{r114=HEAP32[r65+64>>2]}r65=-r114|0;if((r65|0)>159){r3=196}else{if((r114|0)>0){r3=196}else{r115=r65&255}}if(r3==196){r3=0;r115=-97}HEAP8[HEAP32[HEAP32[HEAP32[r54>>2]+(r112<<2)>>2]+(r70<<2)>>2]+r55|0]=r115;r70=r70+1|0}r112=r112+1|0;r113=r78}r55=r55+1|0;r59=r113}if(r3==183){_err_msg(5,41496,723,24664,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}if((r59|0)>0){_err_msg(3,41496,744,23160,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r59,r4));STACKTOP=r4}_free(r58);if((r42|0)!=0){_bio_verify_chksum(r44,r49,HEAP32[r13>>2])}if((_fread(r11,1,1,r44)|0)==1){_err_msg(5,41496,752,22384,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r101,r4));STACKTOP=r4;_exit(1)}else{_fclose(r44);_err_msg(1,41496,756,21992,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r63,HEAP32[r4+8>>2]=r50,HEAP32[r4+16>>2]=r64,r4));STACKTOP=r4;if((r63|0)<0){break L7}else{break}}}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],49496,r8)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=49496,r4));STACKTOP=r4;r116=0}else{r55=HEAP32[r8>>2];if((r55|0)==0){r116=0;break}r116=HEAP32[r55>>2]&65535}}while(0);HEAP16[r29+38>>1]=r116;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],48024,r7)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=48024,r4));STACKTOP=r4;r117=0}else{r55=HEAP32[r7>>2];if((r55|0)==0){r117=0;break}r117=HEAP32[r55>>2]&65535}}while(0);r55=r29+36|0;HEAP16[r55>>1]=r117;_err_msg(1,41496,826,43192,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r117<<16>>16,r4));STACKTOP=r4;r54=r29+16|0;r61=___ckd_calloc__(HEAP32[r54>>2],1,41496,830);r62=r29+20|0;HEAP32[r62>>2]=r61;r61=r1+20|0;r39=0;while(1){if((r39|0)>=(HEAP32[r54>>2]|0)){break}HEAP8[HEAP32[r62>>2]+r39|0]=HEAP16[HEAP32[HEAP32[r61>>2]+72>>2]+(r39<<1)>>1];r39=r39+1|0}do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],39472,r6)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=39472,r4));STACKTOP=r4;r118=2}else{r39=HEAP32[r6>>2];if((r39|0)==0){r118=2;break}r118=HEAP32[r39>>2]+2|0}}while(0);r33=r29+48|0;HEAP32[r33>>2]=r118;r39=___ckd_calloc__(r118,8,41496,838);r61=r29+40|0;HEAP32[r61>>2]=r39;HEAP32[r29+44>>2]=r39;r39=0;while(1){if((r39|0)>=(HEAP32[r33>>2]|0)){break}r62=HEAP32[r38>>2];r54=___ckd_calloc_3d__(HEAP32[r62+16>>2],HEAP32[r62+20>>2],HEAP16[r55>>1]|0,8,41496,845);HEAP32[HEAP32[r61>>2]+(r39<<3)>>2]=r54;r54=0;r62=HEAP32[r38>>2];while(1){r119=HEAP32[r62+16>>2];if((r54|0)<(r119|0)){r120=0;r121=r62}else{break}while(1){if((r120|0)<(HEAP32[r121+20>>2]|0)){r122=0}else{break}while(1){if((r122|0)>=(HEAP16[r55>>1]|0)){break}HEAP32[HEAP32[HEAP32[HEAP32[HEAP32[r61>>2]+(r39<<3)>>2]+(r54<<2)>>2]+(r120<<2)>>2]+(r122<<3)>>2]=r122;HEAP32[HEAP32[HEAP32[HEAP32[HEAP32[r61>>2]+(r39<<3)>>2]+(r54<<2)>>2]+(r120<<2)>>2]+(r122<<3)+4>>2]=-2147483648;r122=r122+1|0}r120=r120+1|0;r121=HEAP32[r38>>2]}r54=r54+1|0;r62=r121}r62=___ckd_calloc__((r119+31|0)/32&-1,4,41496,857);HEAP32[HEAP32[r61>>2]+(r39<<3)+4>>2]=r62;_memset(HEAP32[HEAP32[r61>>2]+(r39<<3)+4>>2],-1,((HEAP32[HEAP32[r38>>2]+16>>2]+31|0)/32&-1)<<2)|0;r39=r39+1|0}HEAP32[r29>>2]=4328;r123=r29;STACKTOP=r5;return r123}}while(0);_ptm_mgau_free(r29);r123=0;STACKTOP=r5;return r123}function _ptm_mgau_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;r2=HEAP32[r1+56>>2];do{if((r2|0)!=0){r3=r2+12|0;r4=HEAP32[r3>>2]-1|0;HEAP32[r3>>2]=r4;if((r4|0)>0){break}r4=HEAP32[r2+16>>2];if((r4|0)==0){_free(HEAP32[r2>>2])}else{_mmio_file_unmap(r4)}_free(r2)}}while(0);r2=HEAP32[r1+52>>2];do{if((r2|0)!=0){r4=r2+12|0;r3=HEAP32[r4>>2]-1|0;HEAP32[r4>>2]=r3;if((r3|0)>0){break}r3=HEAP32[r2+16>>2];if((r3|0)==0){_free(HEAP32[r2>>2])}else{_mmio_file_unmap(r3)}_free(r2)}}while(0);r2=r1+28|0;r3=HEAP32[r1+24>>2];r4=(r3|0)==0;if((HEAP32[r2>>2]|0)!=0){if(!r4){_free(HEAP32[r3>>2])}_free(r3);_mmio_file_unmap(HEAP32[r2>>2]);r5=r1+20|0;r6=r5;r7=HEAP32[r6>>2];_free(r7);r8=r1+12|0;r9=r8;r10=HEAP32[r9>>2];_gauden_free(r10);r11=r1;_free(r11);return}if(!r4){r4=HEAP32[r3>>2];if((r4|0)!=0){_free(HEAP32[r4>>2])}_free(HEAP32[r3>>2])}_free(r3);r5=r1+20|0;r6=r5;r7=HEAP32[r6>>2];_free(r7);r8=r1+12|0;r9=r8;r10=HEAP32[r9>>2];_gauden_free(r10);r11=r1;_free(r11);return}function _ptm_mgau_mllr_transform(r1,r2){_gauden_mllr_transform(HEAP32[r1+12>>2],r2,HEAP32[r1+8>>2]);return 0}function _s2_semi_mgau_frame_eval(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543,r544,r545,r546,r547,r548,r549,r550,r551,r552,r553,r554,r555,r556,r557,r558,r559,r560,r561,r562,r563,r564,r565,r566,r567,r568,r569,r570,r571,r572,r573,r574,r575,r576,r577,r578,r579,r580,r581,r582,r583,r584,r585,r586,r587,r588,r589,r590,r591,r592,r593,r594,r595,r596,r597,r598,r599,r600,r601,r602,r603,r604,r605,r606,r607,r608,r609,r610,r611,r612,r613,r614,r615,r616,r617,r618,r619,r620,r621,r622,r623,r624,r625,r626,r627,r628,r629,r630,r631,r632,r633,r634,r635,r636,r637,r638,r639,r640,r641,r642,r643,r644,r645,r646,r647,r648,r649,r650,r651,r652,r653,r654,r655,r656,r657,r658,r659,r660,r661,r662,r663,r664,r665,r666,r667,r668,r669,r670,r671,r672,r673,r674,r675,r676,r677,r678,r679,r680,r681,r682,r683,r684,r685,r686,r687,r688,r689,r690,r691,r692,r693,r694,r695,r696,r697,r698,r699,r700,r701,r702,r703,r704,r705,r706,r707,r708,r709,r710,r711,r712,r713,r714,r715,r716,r717,r718,r719,r720,r721,r722,r723,r724,r725,r726,r727,r728,r729,r730,r731,r732,r733,r734,r735,r736,r737,r738,r739,r740,r741,r742,r743,r744,r745,r746,r747,r748,r749,r750,r751,r752,r753,r754,r755,r756,r757,r758,r759,r760,r761,r762,r763,r764,r765,r766,r767,r768,r769,r770,r771,r772,r773,r774,r775,r776,r777,r778,r779,r780,r781,r782,r783,r784,r785,r786,r787,r788,r789,r790,r791,r792,r793,r794,r795,r796,r797,r798,r799,r800,r801,r802,r803,r804,r805,r806,r807,r808,r809,r810,r811,r812,r813,r814,r815,r816,r817,r818,r819,r820,r821,r822,r823,r824,r825,r826,r827,r828,r829,r830,r831,r832,r833,r834,r835,r836,r837,r838,r839,r840,r841,r842,r843,r844,r845,r846,r847,r848,r849,r850,r851,r852,r853,r854,r855,r856,r857,r858,r859,r860,r861,r862,r863,r864,r865,r866,r867,r868,r869,r870,r871,r872,r873,r874,r875,r876,r877,r878,r879,r880,r881,r882,r883,r884,r885,r886,r887,r888,r889,r890,r891,r892,r893,r894,r895,r896,r897,r898,r899,r900,r901,r902,r903,r904,r905,r906,r907,r908,r909,r910,r911,r912,r913,r914,r915,r916,r917,r918,r919,r920,r921,r922,r923,r924,r925,r926,r927,r928,r929,r930,r931,r932,r933,r934,r935,r936,r937,r938,r939,r940,r941,r942,r943,r944,r945,r946,r947,r948,r949,r950,r951,r952,r953,r954,r955,r956,r957,r958,r959,r960,r961,r962,r963,r964,r965,r966,r967,r968,r969,r970,r971,r972,r973,r974,r975,r976,r977,r978,r979,r980,r981,r982,r983,r984,r985,r986,r987,r988,r989,r990,r991,r992,r993,r994,r995,r996,r997,r998,r999,r1000,r1001,r1002,r1003,r1004,r1005,r1006,r1007,r1008,r1009,r1010,r1011,r1012,r1013,r1014,r1015,r1016,r1017,r1018,r1019,r1020,r1021,r1022,r1023,r1024,r1025,r1026,r1027,r1028,r1029,r1030,r1031,r1032,r1033,r1034,r1035,r1036,r1037,r1038,r1039,r1040,r1041,r1042,r1043,r1044,r1045,r1046,r1047,r1048,r1049,r1050,r1051,r1052,r1053,r1054,r1055,r1056,r1057,r1058,r1059,r1060,r1061,r1062,r1063,r1064,r1065,r1066,r1067,r1068,r1069,r1070,r1071,r1072,r1073,r1074,r1075,r1076,r1077,r1078,r1079,r1080,r1081,r1082,r1083,r1084,r1085,r1086,r1087,r1088,r1089,r1090,r1091,r1092,r1093,r1094,r1095,r1096,r1097,r1098,r1099,r1100,r1101,r1102,r1103,r1104,r1105,r1106,r1107,r1108,r1109,r1110,r1111,r1112,r1113,r1114,r1115,r1116,r1117,r1118,r1119,r1120,r1121,r1122,r1123,r1124,r1125,r1126,r1127,r1128,r1129,r1130,r1131,r1132,r1133,r1134,r1135,r1136,r1137,r1138,r1139,r1140,r1141,r1142,r1143,r1144,r1145,r1146,r1147,r1148,r1149,r1150,r1151,r1152,r1153,r1154,r1155,r1156,r1157,r1158,r1159,r1160,r1161,r1162,r1163,r1164,r1165,r1166,r1167,r1168,r1169,r1170,r1171,r1172,r1173,r1174,r1175,r1176,r1177,r1178,r1179,r1180,r1181,r1182,r1183,r1184,r1185,r1186,r1187,r1188,r1189,r1190,r1191,r1192,r1193,r1194,r1195,r1196,r1197,r1198,r1199,r1200,r1201,r1202,r1203,r1204,r1205,r1206,r1207,r1208,r1209,r1210,r1211,r1212,r1213,r1214,r1215,r1216,r1217,r1218,r1219,r1220,r1221,r1222,r1223,r1224,r1225,r1226,r1227,r1228,r1229,r1230,r1231,r1232,r1233,r1234,r1235,r1236,r1237,r1238,r1239,r1240,r1241,r1242,r1243,r1244,r1245,r1246,r1247,r1248,r1249,r1250,r1251,r1252,r1253,r1254,r1255,r1256,r1257,r1258,r1259,r1260,r1261,r1262,r1263,r1264,r1265,r1266,r1267,r1268,r1269,r1270,r1271,r1272,r1273,r1274,r1275,r1276,r1277,r1278,r1279,r1280,r1281,r1282,r1283,r1284,r1285,r1286,r1287,r1288,r1289,r1290,r1291,r1292,r1293,r1294,r1295,r1296,r1297,r1298,r1299,r1300,r1301,r1302,r1303,r1304,r1305,r1306,r1307,r1308,r1309,r1310,r1311,r1312,r1313,r1314,r1315,r1316,r1317,r1318,r1319,r1320,r1321,r1322,r1323,r1324,r1325,r1326,r1327,r1328,r1329,r1330,r1331,r1332,r1333,r1334,r1335,r1336,r1337,r1338,r1339,r1340,r1341,r1342,r1343,r1344,r1345,r1346,r1347,r1348,r1349,r1350,r1351,r1352,r1353,r1354,r1355,r1356,r1357,r1358,r1359,r1360,r1361,r1362,r1363,r1364,r1365,r1366,r1367,r1368,r1369,r1370,r1371,r1372,r1373,r1374,r1375,r1376,r1377,r1378,r1379,r1380,r1381,r1382,r1383,r1384,r1385,r1386,r1387,r1388,r1389,r1390,r1391,r1392,r1393,r1394,r1395,r1396,r1397,r1398,r1399,r1400,r1401,r1402,r1403,r1404,r1405,r1406,r1407,r1408,r1409,r1410,r1411,r1412,r1413,r1414,r1415,r1416,r1417,r1418,r1419,r1420,r1421,r1422,r1423,r1424,r1425,r1426,r1427,r1428,r1429,r1430,r1431,r1432,r1433,r1434,r1435,r1436,r1437,r1438,r1439,r1440,r1441,r1442,r1443,r1444,r1445,r1446,r1447,r1448,r1449,r1450,r1451,r1452,r1453,r1454,r1455,r1456,r1457,r1458,r1459,r1460,r1461,r1462,r1463,r1464,r1465,r1466,r1467,r1468,r1469,r1470,r1471,r1472,r1473,r1474,r1475,r1476,r1477,r1478,r1479,r1480,r1481,r1482,r1483,r1484,r1485,r1486,r1487,r1488,r1489,r1490,r1491,r1492,r1493,r1494,r1495,r1496,r1497,r1498,r1499,r1500,r1501,r1502,r1503,r1504,r1505,r1506,r1507,r1508,r1509,r1510,r1511,r1512,r1513,r1514,r1515,r1516,r1517,r1518,r1519,r1520,r1521,r1522,r1523,r1524,r1525,r1526,r1527,r1528,r1529,r1530,r1531,r1532,r1533,r1534,r1535,r1536,r1537,r1538,r1539,r1540,r1541,r1542,r1543,r1544,r1545,r1546,r1547,r1548,r1549,r1550,r1551,r1552,r1553,r1554,r1555,r1556,r1557,r1558,r1559,r1560,r1561,r1562,r1563,r1564,r1565,r1566,r1567,r1568,r1569,r1570,r1571,r1572,r1573,r1574,r1575,r1576,r1577,r1578,r1579,r1580,r1581,r1582,r1583,r1584,r1585,r1586,r1587,r1588,r1589,r1590,r1591,r1592,r1593,r1594,r1595,r1596,r1597,r1598,r1599,r1600,r1601,r1602,r1603,r1604,r1605,r1606,r1607,r1608,r1609,r1610,r1611,r1612,r1613,r1614,r1615,r1616,r1617,r1618,r1619,r1620,r1621,r1622,r1623,r1624,r1625,r1626,r1627,r1628,r1629,r1630,r1631,r1632,r1633,r1634,r1635,r1636,r1637,r1638,r1639,r1640,r1641,r1642,r1643,r1644,r1645,r1646,r1647,r1648,r1649,r1650,r1651,r1652,r1653,r1654,r1655,r1656,r1657,r1658,r1659,r1660,r1661,r1662,r1663,r1664,r1665,r1666,r1667,r1668,r1669,r1670,r1671,r1672,r1673,r1674,r1675,r1676,r1677,r1678,r1679,r1680,r1681,r1682,r1683,r1684,r1685,r1686,r1687,r1688,r1689,r1690,r1691,r1692,r1693,r1694,r1695,r1696,r1697,r1698,r1699,r1700,r1701,r1702,r1703,r1704,r1705,r1706,r1707,r1708,r1709,r1710,r1711,r1712,r1713,r1714,r1715,r1716,r1717,r1718,r1719,r1720,r1721,r1722,r1723,r1724,r1725,r1726,r1727,r1728,r1729,r1730,r1731,r1732,r1733,r1734,r1735,r1736,r1737,r1738,r1739,r1740,r1741,r1742,r1743,r1744,r1745,r1746,r1747,r1748,r1749,r1750,r1751,r1752,r1753,r1754,r1755,r1756,r1757,r1758,r1759,r1760,r1761,r1762,r1763,r1764,r1765,r1766,r1767,r1768,r1769,r1770,r1771,r1772,r1773,r1774,r1775,r1776,r1777,r1778,r1779,r1780,r1781,r1782,r1783,r1784,r1785,r1786,r1787,r1788,r1789,r1790,r1791,r1792,r1793,r1794,r1795,r1796,r1797,r1798,r1799,r1800,r1801,r1802,r1803,r1804,r1805,r1806,r1807,r1808,r1809,r1810,r1811,r1812,r1813,r1814,r1815,r1816,r1817,r1818,r1819,r1820,r1821,r1822,r1823,r1824,r1825,r1826,r1827,r1828,r1829,r1830,r1831,r1832,r1833,r1834,r1835,r1836,r1837,r1838,r1839,r1840,r1841,r1842,r1843,r1844,r1845,r1846,r1847,r1848,r1849,r1850,r1851,r1852,r1853,r1854,r1855,r1856,r1857,r1858,r1859,r1860,r1861,r1862,r1863,r1864,r1865,r1866,r1867,r1868,r1869,r1870,r1871,r1872,r1873,r1874,r1875,r1876,r1877,r1878,r1879,r1880,r1881,r1882,r1883,r1884,r1885,r1886,r1887,r1888,r1889,r1890,r1891,r1892,r1893,r1894,r1895,r1896,r1897,r1898,r1899,r1900,r1901,r1902,r1903,r1904,r1905,r1906,r1907,r1908,r1909,r1910,r1911,r1912,r1913,r1914,r1915,r1916,r1917,r1918,r1919,r1920,r1921,r1922,r1923,r1924,r1925,r1926,r1927,r1928,r1929,r1930,r1931,r1932,r1933,r1934,r1935,r1936,r1937,r1938,r1939,r1940,r1941,r1942,r1943,r1944,r1945,r1946,r1947,r1948,r1949,r1950,r1951,r1952,r1953,r1954,r1955,r1956,r1957,r1958,r1959,r1960,r1961,r1962,r1963,r1964,r1965,r1966,r1967,r1968,r1969,r1970,r1971,r1972,r1973,r1974,r1975,r1976,r1977,r1978,r1979,r1980,r1981,r1982,r1983,r1984,r1985,r1986,r1987,r1988,r1989,r1990,r1991,r1992,r1993,r1994,r1995,r1996,r1997,r1998,r1999,r2000,r2001,r2002,r2003,r2004,r2005,r2006,r2007,r2008,r2009,r2010,r2011,r2012,r2013,r2014,r2015,r2016,r2017,r2018;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+336|0;r10=r9;r11=r9+80;r12=r9+144;r13=r9+192;r14=r9+224;r15=r9+240;r16=r1;r17=r2;r18=r1+48|0;r19=r18;r20=HEAP32[r19>>2];r21=r20<<1;_memset(r17,0,r21)|0;r22=r1+72|0;r23=r22;r24=HEAP32[r23>>2];r25=(r6|0)%(r24|0)&-1;r26=r1+60|0;r27=r26;r28=HEAP32[r27>>2];r29=r28+(r25<<2)|0;r30=HEAP32[r29>>2];r31=r1+68|0;r32=r31;r33=r30;HEAP32[r31>>2]=r33;r34=r1+44|0;r35=r34;r36=r1+4|0;r37=r1+36|0;r38=r37;r39=(r7|0)==0;r40=r1+64|0;r41=r40;r42=r1+28|0;r43=r42;r44=r1+76|0;r45=r44;r46=r1+48|0;r47=r46;r48=r15|0;r49=r10|0;r50=r11|0;r51=r12|0;r52=r13|0;r53=r14|0;r54=(r25|0)==0;r55=r1+56|0;r56=r55;r57=r1+40|0;r58=r57;r59=r1+16|0;r60=r59;r61=r1+20|0;r62=r61;r63=r1+24|0;r64=r63;r65=r16+58|0;r66=r16+46|0;r67=r1+52|0;r68=r67;r69=r25-1|0;r70=0;while(1){r71=HEAP16[r35>>1];r72=r71<<16>>16;r73=(r70|0)<(r72|0);if(!r73){break}r74=HEAP32[r36>>2];r75=(r74|0)>(r6|0);if(!r75){if(r54){r76=HEAP32[r23>>2];r77=r76-1|0;r78=HEAP32[r27>>2];r79=r78+(r77<<2)|0;r80=r79}else{r81=HEAP32[r27>>2];r82=r81+(r69<<2)|0;r80=r82}r83=HEAP32[r80>>2];r84=HEAP32[r32>>2];r85=r84+(r70<<2)|0;r86=HEAP32[r85>>2];r87=r86;r88=r83+(r70<<2)|0;r89=HEAP32[r88>>2];r90=r89;r91=HEAP16[r56>>1];r92=r91<<16>>16;r93=r92<<3;_memcpy(r87,r90,r93)|0;r94=r5+(r70<<2)|0;r95=HEAP32[r94>>2];r96=HEAP32[r32>>2];r97=r96+(r70<<2)|0;r98=HEAP32[r97>>2];r99=HEAP32[r58>>2];r100=r99+(r70<<2)|0;r101=HEAP32[r100>>2];r102=0;while(1){r103=HEAP16[r56>>1];r104=r103<<16>>16;r105=(r102|0)<(r104|0);if(!r105){break}r106=r98+(r102<<3)+4|0;r107=HEAP32[r106>>2];r108=HEAP32[r60>>2];r109=r108+(r70<<2)|0;r110=HEAP32[r109>>2];r111=HEAP32[r110>>2];r112=Math_imul(r107,r101)|0;r113=r111+(r112<<2)|0;r114=HEAP32[r62>>2];r115=r114+(r70<<2)|0;r116=HEAP32[r115>>2];r117=HEAP32[r116>>2];r118=r117+(r112<<2)|0;r119=HEAP32[r64>>2];r120=r119+(r70<<2)|0;r121=HEAP32[r120>>2];r122=r121+(r107<<2)|0;r123=HEAPF32[r122>>2];r124=0;r125=r95;r126=r123;r127=r118;r128=r113;while(1){r129=(r124|0)<(r101|0);if(!r129){break}r130=r125+4|0;r131=HEAPF32[r125>>2];r132=r128+4|0;r133=HEAPF32[r128>>2];r134=r131-r133;r135=r134*r134;r136=HEAPF32[r127>>2];r137=r135*r136;r138=r126-r137;r139=r127+4|0;r140=r124+1|0;r124=r140;r125=r130;r126=r138;r127=r139;r128=r132}r141=r126&-1;r142=r98+(r102<<3)|0;HEAP32[r142>>2]=r141;r143=(r102|0)==0;if(!r143){r144=r98+(r102<<3)|0;r145=r144;r146=r145|0;r147=HEAP32[r146>>2];r148=r145+4|0;r149=HEAP32[r148>>2];r150=r102;while(1){r151=r150-1|0;r152=(r150|0)>0;if(!r152){break}r153=r98+(r151<<3)|0;r154=HEAP32[r153>>2];r155=(r141|0)>(r154|0);if(!r155){break}r156=r98+(r150<<3)|0;r157=r98+(r151<<3)|0;r158=r157;r159=r156;r160=r158|0;r161=HEAP32[r160>>2];r162=r158+4|0;r163=HEAP32[r162>>2];r164=r159|0;HEAP32[r164>>2]=r161;r165=r159+4|0;HEAP32[r165>>2]=r163;r150=r151}r166=r98+(r150<<3)|0;r167=r166;r168=r167|0;HEAP32[r168>>2]=r147;r169=r167+4|0;HEAP32[r169>>2]=r149}r170=r102+1|0;r102=r170}r171=HEAP16[r65>>1];r172=r171<<16>>16;r173=(r6|0)%(r172|0)&-1;r174=(r173|0)==0;L26:do{if(r174){r175=HEAP32[r32>>2];r176=r175+(r70<<2)|0;r177=HEAP32[r176>>2];r178=r104-1|0;r179=r177+(r178<<3)|0;r180=HEAP32[r60>>2];r181=r180+(r70<<2)|0;r182=HEAP32[r181>>2];r183=HEAP32[r182>>2];r184=HEAP32[r62>>2];r185=r184+(r70<<2)|0;r186=HEAP32[r185>>2];r187=HEAP32[r186>>2];r188=HEAP32[r64>>2];r189=r188+(r70<<2)|0;r190=HEAP32[r189>>2];r191=HEAP16[r66>>1];r192=r191<<16>>16;r193=r190+(r192<<2)|0;r194=HEAP32[r58>>2];r195=r194+(r70<<2)|0;r196=HEAP32[r195>>2];r197=r190;r198=r179|0;r199=r190;r200=r187;r201=r183;while(1){r202=r199>>>0<r193>>>0;if(!r202){break L26}r203=HEAPF32[r199>>2];r204=r199;r205=r204-r197|0;r206=r205>>2;r207=0;r208=r95;r209=r203;r210=r200;r211=r201;while(1){r212=(r207|0)<(r196|0);if(!r212){r8=27;break}r213=HEAP32[r198>>2];r214=r213|0;r215=r209<r214;if(r215){r8=26;break}r216=r208+4|0;r217=HEAPF32[r208>>2];r218=r211+4|0;r219=HEAPF32[r211>>2];r220=r217-r219;r221=r220*r220;r222=HEAPF32[r210>>2];r223=r221*r222;r224=r209-r223;r225=r210+4|0;r226=r207+1|0;r207=r226;r208=r216;r209=r224;r210=r225;r211=r218}L35:do{if(r8==26){r8=0;r227=r196-r207|0;r228=r211+(r227<<2)|0;r229=r210+(r227<<2)|0;r230=r229;r231=r228}else if(r8==27){r8=0;r232=r209&-1;r233=HEAP32[r198>>2];r234=(r232|0)<(r233|0);if(r234){r230=r210;r231=r211;break}r235=HEAP16[r56>>1];r236=r235<<16>>16;r237=0;while(1){r238=(r237|0)<(r236|0);if(!r238){r239=r179;break}r240=r177+(r237<<3)+4|0;r241=HEAP32[r240>>2];r242=(r241|0)==(r206|0);if(r242){r230=r210;r231=r211;break L35}r243=r237+1|0;r237=r243}while(1){r244=r239-8|0;r245=r244>>>0<r177>>>0;if(r245){break}r246=r244|0;r247=HEAP32[r246>>2];r248=(r232|0)<(r247|0);if(r248){break}r249=r244;r250=r239;r251=r249|0;r252=HEAP32[r251>>2];r253=r249+4|0;r254=HEAP32[r253>>2];r255=r250|0;HEAP32[r255>>2]=r252;r256=r250+4|0;HEAP32[r256>>2]=r254;r239=r244}r257=r239+4|0;HEAP32[r257>>2]=r206;r258=r239|0;HEAP32[r258>>2]=r232;r230=r210;r231=r211}}while(0);r259=r199+4|0;r199=r259;r200=r230;r201=r231}}}while(0);r260=HEAP32[r32>>2];r261=r260+(r70<<2)|0;r262=HEAP32[r261>>2];r263=r262|0;r264=HEAP32[r263>>2];r265=r264>>10;r266=0;while(1){r267=HEAP16[r56>>1];r268=r267<<16>>16;r269=(r266|0)<(r268|0);if(!r269){break}r270=HEAP32[r32>>2];r271=r270+(r70<<2)|0;r272=HEAP32[r271>>2];r273=r272+(r266<<3)|0;r274=HEAP32[r273>>2];r275=r274>>10;r276=r265-r275|0;HEAP32[r273>>2]=r276;r277=HEAP32[r32>>2];r278=r277+(r70<<2)|0;r279=HEAP32[r278>>2];r280=r279+(r266<<3)|0;r281=HEAP32[r280>>2];r282=(r281|0)>96;if(r282){HEAP32[r280>>2]=96}r283=HEAP32[r68>>2];r284=r283+r70|0;r285=HEAP8[r284];r286=r285<<24>>24==0;if(!r286){r287=HEAP32[r32>>2];r288=r287+(r70<<2)|0;r289=HEAP32[r288>>2];r290=r289+(r266<<3)|0;r291=HEAP32[r290>>2];r292=r285&255;r293=(r291|0)>(r292|0);if(r293){break}}r294=r266+1|0;r266=r294}r295=r266&255;r296=HEAP32[r41>>2];r297=r296+(r25<<2)|0;r298=HEAP32[r297>>2];r299=r298+r70|0;HEAP8[r299]=r295}r300=HEAP32[r38>>2];r301=(r300|0)==0;r302=HEAP32[r41>>2];r303=r302+(r25<<2)|0;r304=HEAP32[r303>>2];r305=r304+r70|0;r306=HEAP8[r305];r307=r306&255;L61:do{if(r301){if(!r39){r308=0;while(1){r309=HEAP32[r47>>2];r310=(r308|0)<(r309|0);if(!r310){break L61}r311=HEAP32[r32>>2];r312=r311+(r70<<2)|0;r313=HEAP32[r312>>2];r314=r313+4|0;r315=HEAP32[r314>>2];r316=HEAP32[r43>>2];r317=r316+(r70<<2)|0;r318=HEAP32[r317>>2];r319=r318+(r315<<2)|0;r320=HEAP32[r319>>2];r321=r320+r308|0;r322=HEAP8[r321];r323=r322&255;r324=r313|0;r325=HEAP32[r324>>2];r326=r323+r325|0;r327=1;r328=r326;while(1){r329=(r327|0)<(r307|0);if(!r329){break}r330=r313+(r327<<3)+4|0;r331=HEAP32[r330>>2];r332=r318+(r331<<2)|0;r333=HEAP32[r332>>2];r334=HEAP32[r45>>2];r335=r333+r308|0;r336=HEAP8[r335];r337=r336&255;r338=r313+(r327<<3)|0;r339=HEAP32[r338>>2];r340=r337+r339|0;r341=(r328|0)>(r340|0);r342=r340-r328|0;r343=r328-r340|0;r344=r341?r343:r342;r345=r341?r340:r328;r346=r334|0;r347=HEAP32[r346>>2];r348=r347+r344|0;r349=HEAP8[r348];r350=r349&255;r351=r345-r350|0;r352=r327+1|0;r327=r352;r328=r351}r353=r2+(r308<<1)|0;r354=HEAP16[r353>>1];r355=r354&65535;r356=r355+r328|0;r357=r356&65535;HEAP16[r353>>1]=r357;r358=r308+1|0;r308=r358}}switch(r307|0){case 6:{r359=HEAP32[r32>>2];r360=r359+(r70<<2)|0;r361=HEAP32[r360>>2];r362=r361+4|0;r363=HEAP32[r362>>2];r364=HEAP32[r43>>2];r365=r364+(r70<<2)|0;r366=HEAP32[r365>>2];r367=r366+(r363<<2)|0;r368=HEAP32[r367>>2];r369=r361+12|0;r370=HEAP32[r369>>2];r371=r366+(r370<<2)|0;r372=HEAP32[r371>>2];r373=r361+20|0;r374=HEAP32[r373>>2];r375=r366+(r374<<2)|0;r376=HEAP32[r375>>2];r377=r361+28|0;r378=HEAP32[r377>>2];r379=r366+(r378<<2)|0;r380=HEAP32[r379>>2];r381=r361+36|0;r382=HEAP32[r381>>2];r383=r366+(r382<<2)|0;r384=HEAP32[r383>>2];r385=r361+44|0;r386=HEAP32[r385>>2];r387=r366+(r386<<2)|0;r388=HEAP32[r387>>2];r389=0;r390=0;while(1){r391=(r389|0)<(r4|0);if(!r391){break L61}r392=r3+r389|0;r393=HEAP8[r392];r394=r393&255;r395=r394+r390|0;r396=r368+r395|0;r397=HEAP8[r396];r398=r397&255;r399=HEAP32[r32>>2];r400=r399+(r70<<2)|0;r401=HEAP32[r400>>2];r402=r401|0;r403=HEAP32[r402>>2];r404=r398+r403|0;r405=HEAP32[r45>>2];r406=r372+r395|0;r407=HEAP8[r406];r408=r407&255;r409=r401+8|0;r410=HEAP32[r409>>2];r411=r408+r410|0;r412=(r404|0)>(r411|0);r413=r411-r404|0;r414=r404-r411|0;r415=r412?r414:r413;r416=r412?r411:r404;r417=r405|0;r418=HEAP32[r417>>2];r419=r418+r415|0;r420=HEAP8[r419];r421=r420&255;r422=r416-r421|0;r423=r376+r395|0;r424=HEAP8[r423];r425=r424&255;r426=r401+16|0;r427=HEAP32[r426>>2];r428=r425+r427|0;r429=(r422|0)>(r428|0);r430=r428-r422|0;r431=r422-r428|0;r432=r429?r431:r430;r433=r429?r428:r422;r434=r418+r432|0;r435=HEAP8[r434];r436=r435&255;r437=r433-r436|0;r438=r380+r395|0;r439=HEAP8[r438];r440=r439&255;r441=r401+24|0;r442=HEAP32[r441>>2];r443=r440+r442|0;r444=(r437|0)>(r443|0);r445=r443-r437|0;r446=r437-r443|0;r447=r444?r446:r445;r448=r444?r443:r437;r449=r418+r447|0;r450=HEAP8[r449];r451=r450&255;r452=r448-r451|0;r453=r384+r395|0;r454=HEAP8[r453];r455=r454&255;r456=r401+32|0;r457=HEAP32[r456>>2];r458=r455+r457|0;r459=(r452|0)>(r458|0);r460=r458-r452|0;r461=r452-r458|0;r462=r459?r461:r460;r463=r459?r458:r452;r464=r418+r462|0;r465=HEAP8[r464];r466=r465&255;r467=r463-r466|0;r468=r388+r395|0;r469=HEAP8[r468];r470=r469&255;r471=r401+40|0;r472=HEAP32[r471>>2];r473=r470+r472|0;r474=(r467|0)>(r473|0);r475=r473-r467|0;r476=r467-r473|0;r477=r474?r476:r475;r478=r474?r473:r467;r479=r418+r477|0;r480=HEAP8[r479];r481=r480&255;r482=r478-r481|0;r483=r2+(r395<<1)|0;r484=HEAP16[r483>>1];r485=r484&65535;r486=r485+r482|0;r487=r486&65535;HEAP16[r483>>1]=r487;r488=r389+1|0;r389=r488;r390=r395}break};case 5:{r489=HEAP32[r32>>2];r490=r489+(r70<<2)|0;r491=HEAP32[r490>>2];r492=r491+4|0;r493=HEAP32[r492>>2];r494=HEAP32[r43>>2];r495=r494+(r70<<2)|0;r496=HEAP32[r495>>2];r497=r496+(r493<<2)|0;r498=HEAP32[r497>>2];r499=r491+12|0;r500=HEAP32[r499>>2];r501=r496+(r500<<2)|0;r502=HEAP32[r501>>2];r503=r491+20|0;r504=HEAP32[r503>>2];r505=r496+(r504<<2)|0;r506=HEAP32[r505>>2];r507=r491+28|0;r508=HEAP32[r507>>2];r509=r496+(r508<<2)|0;r510=HEAP32[r509>>2];r511=r491+36|0;r512=HEAP32[r511>>2];r513=r496+(r512<<2)|0;r514=HEAP32[r513>>2];r515=0;r516=0;while(1){r517=(r515|0)<(r4|0);if(!r517){break L61}r518=r3+r515|0;r519=HEAP8[r518];r520=r519&255;r521=r520+r516|0;r522=r498+r521|0;r523=HEAP8[r522];r524=r523&255;r525=HEAP32[r32>>2];r526=r525+(r70<<2)|0;r527=HEAP32[r526>>2];r528=r527|0;r529=HEAP32[r528>>2];r530=r524+r529|0;r531=HEAP32[r45>>2];r532=r502+r521|0;r533=HEAP8[r532];r534=r533&255;r535=r527+8|0;r536=HEAP32[r535>>2];r537=r534+r536|0;r538=(r530|0)>(r537|0);r539=r537-r530|0;r540=r530-r537|0;r541=r538?r540:r539;r542=r538?r537:r530;r543=r531|0;r544=HEAP32[r543>>2];r545=r544+r541|0;r546=HEAP8[r545];r547=r546&255;r548=r542-r547|0;r549=r506+r521|0;r550=HEAP8[r549];r551=r550&255;r552=r527+16|0;r553=HEAP32[r552>>2];r554=r551+r553|0;r555=(r548|0)>(r554|0);r556=r554-r548|0;r557=r548-r554|0;r558=r555?r557:r556;r559=r555?r554:r548;r560=r544+r558|0;r561=HEAP8[r560];r562=r561&255;r563=r559-r562|0;r564=r510+r521|0;r565=HEAP8[r564];r566=r565&255;r567=r527+24|0;r568=HEAP32[r567>>2];r569=r566+r568|0;r570=(r563|0)>(r569|0);r571=r569-r563|0;r572=r563-r569|0;r573=r570?r572:r571;r574=r570?r569:r563;r575=r544+r573|0;r576=HEAP8[r575];r577=r576&255;r578=r574-r577|0;r579=r514+r521|0;r580=HEAP8[r579];r581=r580&255;r582=r527+32|0;r583=HEAP32[r582>>2];r584=r581+r583|0;r585=(r578|0)>(r584|0);r586=r584-r578|0;r587=r578-r584|0;r588=r585?r587:r586;r589=r585?r584:r578;r590=r544+r588|0;r591=HEAP8[r590];r592=r591&255;r593=r589-r592|0;r594=r2+(r521<<1)|0;r595=HEAP16[r594>>1];r596=r595&65535;r597=r596+r593|0;r598=r597&65535;HEAP16[r594>>1]=r598;r599=r515+1|0;r515=r599;r516=r521}break};case 2:{r600=HEAP32[r32>>2];r601=r600+(r70<<2)|0;r602=HEAP32[r601>>2];r603=r602+4|0;r604=HEAP32[r603>>2];r605=HEAP32[r43>>2];r606=r605+(r70<<2)|0;r607=HEAP32[r606>>2];r608=r607+(r604<<2)|0;r609=HEAP32[r608>>2];r610=r602+12|0;r611=HEAP32[r610>>2];r612=r607+(r611<<2)|0;r613=HEAP32[r612>>2];r614=0;r615=0;while(1){r616=(r614|0)<(r4|0);if(!r616){break L61}r617=r3+r614|0;r618=HEAP8[r617];r619=r618&255;r620=r619+r615|0;r621=r609+r620|0;r622=HEAP8[r621];r623=r622&255;r624=HEAP32[r32>>2];r625=r624+(r70<<2)|0;r626=HEAP32[r625>>2];r627=r626|0;r628=HEAP32[r627>>2];r629=r623+r628|0;r630=HEAP32[r45>>2];r631=r613+r620|0;r632=HEAP8[r631];r633=r632&255;r634=r626+8|0;r635=HEAP32[r634>>2];r636=r633+r635|0;r637=(r629|0)>(r636|0);r638=r636-r629|0;r639=r629-r636|0;r640=r637?r639:r638;r641=r637?r636:r629;r642=r630|0;r643=HEAP32[r642>>2];r644=r643+r640|0;r645=HEAP8[r644];r646=r645&255;r647=r641-r646|0;r648=r2+(r620<<1)|0;r649=HEAP16[r648>>1];r650=r649&65535;r651=r650+r647|0;r652=r651&65535;HEAP16[r648>>1]=r652;r653=r614+1|0;r614=r653;r615=r620}break};case 1:{r654=HEAP32[r32>>2];r655=r654+(r70<<2)|0;r656=HEAP32[r655>>2];r657=r656+4|0;r658=HEAP32[r657>>2];r659=HEAP32[r43>>2];r660=r659+(r70<<2)|0;r661=HEAP32[r660>>2];r662=r661+(r658<<2)|0;r663=HEAP32[r662>>2];r664=0;r665=0;while(1){r666=(r664|0)<(r4|0);if(!r666){break L61}r667=r3+r664|0;r668=HEAP8[r667];r669=r668&255;r670=r669+r665|0;r671=r663+r670|0;r672=HEAP8[r671];r673=r672&255;r674=HEAP32[r32>>2];r675=r674+(r70<<2)|0;r676=HEAP32[r675>>2];r677=r676|0;r678=HEAP32[r677>>2];r679=r673+r678|0;r680=r2+(r670<<1)|0;r681=HEAP16[r680>>1];r682=r681&65535;r683=r682+r679|0;r684=r683&65535;HEAP16[r680>>1]=r684;r685=r664+1|0;r664=r685;r665=r670}break};case 4:{r686=HEAP32[r32>>2];r687=r686+(r70<<2)|0;r688=HEAP32[r687>>2];r689=r688+4|0;r690=HEAP32[r689>>2];r691=HEAP32[r43>>2];r692=r691+(r70<<2)|0;r693=HEAP32[r692>>2];r694=r693+(r690<<2)|0;r695=HEAP32[r694>>2];r696=r688+12|0;r697=HEAP32[r696>>2];r698=r693+(r697<<2)|0;r699=HEAP32[r698>>2];r700=r688+20|0;r701=HEAP32[r700>>2];r702=r693+(r701<<2)|0;r703=HEAP32[r702>>2];r704=r688+28|0;r705=HEAP32[r704>>2];r706=r693+(r705<<2)|0;r707=HEAP32[r706>>2];r708=0;r709=0;while(1){r710=(r708|0)<(r4|0);if(!r710){break L61}r711=r3+r708|0;r712=HEAP8[r711];r713=r712&255;r714=r713+r709|0;r715=r695+r714|0;r716=HEAP8[r715];r717=r716&255;r718=HEAP32[r32>>2];r719=r718+(r70<<2)|0;r720=HEAP32[r719>>2];r721=r720|0;r722=HEAP32[r721>>2];r723=r717+r722|0;r724=HEAP32[r45>>2];r725=r699+r714|0;r726=HEAP8[r725];r727=r726&255;r728=r720+8|0;r729=HEAP32[r728>>2];r730=r727+r729|0;r731=(r723|0)>(r730|0);r732=r730-r723|0;r733=r723-r730|0;r734=r731?r733:r732;r735=r731?r730:r723;r736=r724|0;r737=HEAP32[r736>>2];r738=r737+r734|0;r739=HEAP8[r738];r740=r739&255;r741=r735-r740|0;r742=r703+r714|0;r743=HEAP8[r742];r744=r743&255;r745=r720+16|0;r746=HEAP32[r745>>2];r747=r744+r746|0;r748=(r741|0)>(r747|0);r749=r747-r741|0;r750=r741-r747|0;r751=r748?r750:r749;r752=r748?r747:r741;r753=r737+r751|0;r754=HEAP8[r753];r755=r754&255;r756=r752-r755|0;r757=r707+r714|0;r758=HEAP8[r757];r759=r758&255;r760=r720+24|0;r761=HEAP32[r760>>2];r762=r759+r761|0;r763=(r756|0)>(r762|0);r764=r762-r756|0;r765=r756-r762|0;r766=r763?r765:r764;r767=r763?r762:r756;r768=r737+r766|0;r769=HEAP8[r768];r770=r769&255;r771=r767-r770|0;r772=r2+(r714<<1)|0;r773=HEAP16[r772>>1];r774=r773&65535;r775=r774+r771|0;r776=r775&65535;HEAP16[r772>>1]=r776;r777=r708+1|0;r708=r777;r709=r714}break};case 3:{r778=HEAP32[r32>>2];r779=r778+(r70<<2)|0;r780=HEAP32[r779>>2];r781=r780+4|0;r782=HEAP32[r781>>2];r783=HEAP32[r43>>2];r784=r783+(r70<<2)|0;r785=HEAP32[r784>>2];r786=r785+(r782<<2)|0;r787=HEAP32[r786>>2];r788=r780+12|0;r789=HEAP32[r788>>2];r790=r785+(r789<<2)|0;r791=HEAP32[r790>>2];r792=r780+20|0;r793=HEAP32[r792>>2];r794=r785+(r793<<2)|0;r795=HEAP32[r794>>2];r796=0;r797=0;while(1){r798=(r796|0)<(r4|0);if(!r798){break L61}r799=r3+r796|0;r800=HEAP8[r799];r801=r800&255;r802=r801+r797|0;r803=r787+r802|0;r804=HEAP8[r803];r805=r804&255;r806=HEAP32[r32>>2];r807=r806+(r70<<2)|0;r808=HEAP32[r807>>2];r809=r808|0;r810=HEAP32[r809>>2];r811=r805+r810|0;r812=HEAP32[r45>>2];r813=r791+r802|0;r814=HEAP8[r813];r815=r814&255;r816=r808+8|0;r817=HEAP32[r816>>2];r818=r815+r817|0;r819=(r811|0)>(r818|0);r820=r818-r811|0;r821=r811-r818|0;r822=r819?r821:r820;r823=r819?r818:r811;r824=r812|0;r825=HEAP32[r824>>2];r826=r825+r822|0;r827=HEAP8[r826];r828=r827&255;r829=r823-r828|0;r830=r795+r802|0;r831=HEAP8[r830];r832=r831&255;r833=r808+16|0;r834=HEAP32[r833>>2];r835=r832+r834|0;r836=(r829|0)>(r835|0);r837=r835-r829|0;r838=r829-r835|0;r839=r836?r838:r837;r840=r836?r835:r829;r841=r825+r839|0;r842=HEAP8[r841];r843=r842&255;r844=r840-r843|0;r845=r2+(r802<<1)|0;r846=HEAP16[r845>>1];r847=r846&65535;r848=r847+r844|0;r849=r848&65535;HEAP16[r845>>1]=r849;r850=r796+1|0;r796=r850;r797=r802}break};default:{r851=0;r852=0;while(1){r853=(r851|0)<(r4|0);if(!r853){break L61}r854=r3+r851|0;r855=HEAP8[r854];r856=r855&255;r857=r856+r852|0;r858=HEAP32[r32>>2];r859=r858+(r70<<2)|0;r860=HEAP32[r859>>2];r861=r860+4|0;r862=HEAP32[r861>>2];r863=HEAP32[r43>>2];r864=r863+(r70<<2)|0;r865=HEAP32[r864>>2];r866=r865+(r862<<2)|0;r867=HEAP32[r866>>2];r868=r867+r857|0;r869=HEAP8[r868];r870=r869&255;r871=r860|0;r872=HEAP32[r871>>2];r873=r870+r872|0;r874=1;r875=r873;while(1){r876=(r874|0)<(r307|0);if(!r876){break}r877=r860+(r874<<3)+4|0;r878=HEAP32[r877>>2];r879=r865+(r878<<2)|0;r880=HEAP32[r879>>2];r881=HEAP32[r45>>2];r882=r880+r857|0;r883=HEAP8[r882];r884=r883&255;r885=r860+(r874<<3)|0;r886=HEAP32[r885>>2];r887=r884+r886|0;r888=(r875|0)>(r887|0);r889=r887-r875|0;r890=r875-r887|0;r891=r888?r890:r889;r892=r888?r887:r875;r893=r881|0;r894=HEAP32[r893>>2];r895=r894+r891|0;r896=HEAP8[r895];r897=r896&255;r898=r892-r897|0;r899=r874+1|0;r874=r899;r875=r898}r900=r2+(r857<<1)|0;r901=HEAP16[r900>>1];r902=r901&65535;r903=r902+r875|0;r904=r903&65535;HEAP16[r900>>1]=r904;r905=r851+1|0;r851=r905;r852=r857}}}}else{if(!r39){r906=HEAP32[r47>>2];r907=r906&-2;r908=0;while(1){r909=(r908|0)<(r907|0);if(!r909){break L61}r910=HEAP32[r32>>2];r911=r910+(r70<<2)|0;r912=HEAP32[r911>>2];r913=r912+4|0;r914=HEAP32[r913>>2];r915=HEAP32[r43>>2];r916=r915+(r70<<2)|0;r917=HEAP32[r916>>2];r918=r917+(r914<<2)|0;r919=HEAP32[r918>>2];r920=(r908|0)/2&-1;r921=r919+r920|0;r922=HEAP8[r921];r923=r922&255;r924=r923&15;r925=HEAP32[r38>>2];r926=r925+r924|0;r927=HEAP8[r926];r928=r927&255;r929=r912|0;r930=HEAP32[r929>>2];r931=r928+r930|0;r932=r923>>>4;r933=r925+r932|0;r934=HEAP8[r933];r935=r934&255;r936=r935+r930|0;r937=1;r938=r931;r939=r936;while(1){r940=(r937|0)<(r307|0);if(!r940){break}r941=r912+(r937<<3)+4|0;r942=HEAP32[r941>>2];r943=r917+(r942<<2)|0;r944=HEAP32[r943>>2];r945=r944+r920|0;r946=HEAP8[r945];r947=r946&255;r948=r947&15;r949=r925+r948|0;r950=HEAP8[r949];r951=r950&255;r952=r912+(r937<<3)|0;r953=HEAP32[r952>>2];r954=r951+r953|0;r955=r947>>>4;r956=r925+r955|0;r957=HEAP8[r956];r958=r957&255;r959=r958+r953|0;r960=HEAP32[r45>>2];r961=(r938|0)>(r954|0);r962=r954-r938|0;r963=r938-r954|0;r964=r961?r963:r962;r965=r961?r954:r938;r966=r960|0;r967=HEAP32[r966>>2];r968=r967+r964|0;r969=HEAP8[r968];r970=r969&255;r971=r965-r970|0;r972=(r939|0)>(r959|0);r973=r959-r939|0;r974=r939-r959|0;r975=r972?r974:r973;r976=r972?r959:r939;r977=r967+r975|0;r978=HEAP8[r977];r979=r978&255;r980=r976-r979|0;r981=r937+1|0;r937=r981;r938=r971;r939=r980}r982=r908|1;r983=r2+(r908<<1)|0;r984=HEAP16[r983>>1];r985=r984&65535;r986=r985+r938|0;r987=r986&65535;HEAP16[r983>>1]=r987;r988=r908+2|0;r989=r2+(r982<<1)|0;r990=HEAP16[r989>>1];r991=r990&65535;r992=r991+r939|0;r993=r992&65535;HEAP16[r989>>1]=r993;r908=r988}}switch(r307|0){case 4:{r994=0;while(1){r995=(r994|0)<16;if(!r995){break}r996=r300+r994|0;r997=HEAP8[r996];r998=r997&255;r999=HEAP32[r32>>2];r1000=r999+(r70<<2)|0;r1001=HEAP32[r1000>>2];r1002=r1001|0;r1003=HEAP32[r1002>>2];r1004=r998+r1003|0;r1005=r1004&255;r1006=r11+r994|0;HEAP8[r1006]=r1005;r1007=r1001+8|0;r1008=HEAP32[r1007>>2];r1009=r998+r1008|0;r1010=r1009&255;r1011=r994+(r11+16)|0;HEAP8[r1011]=r1010;r1012=r1001+16|0;r1013=HEAP32[r1012>>2];r1014=r998+r1013|0;r1015=r1014&255;r1016=r994+(r11+32)|0;HEAP8[r1016]=r1015;r1017=r1001+24|0;r1018=HEAP32[r1017>>2];r1019=r998+r1018|0;r1020=r1019&255;r1021=r994+(r11+48)|0;HEAP8[r1021]=r1020;r1022=r994+1|0;r994=r1022}r1023=HEAP32[r32>>2];r1024=r1023+(r70<<2)|0;r1025=HEAP32[r1024>>2];r1026=r1025+4|0;r1027=HEAP32[r1026>>2];r1028=HEAP32[r43>>2];r1029=r1028+(r70<<2)|0;r1030=HEAP32[r1029>>2];r1031=r1030+(r1027<<2)|0;r1032=HEAP32[r1031>>2];r1033=r1025+12|0;r1034=HEAP32[r1033>>2];r1035=r1030+(r1034<<2)|0;r1036=HEAP32[r1035>>2];r1037=r1025+20|0;r1038=HEAP32[r1037>>2];r1039=r1030+(r1038<<2)|0;r1040=HEAP32[r1039>>2];r1041=r1025+28|0;r1042=HEAP32[r1041>>2];r1043=r1030+(r1042<<2)|0;r1044=HEAP32[r1043>>2];r1045=0;r1046=0;while(1){r1047=(r1045|0)<(r4|0);if(!r1047){break L61}r1048=r3+r1045|0;r1049=HEAP8[r1048];r1050=r1049&255;r1051=r1050+r1046|0;r1052=r1051&1;r1053=(r1052|0)==0;r1054=(r1051|0)/2&-1;r1055=r1032+r1054|0;r1056=HEAP8[r1055];r1057=r1056&255;if(r1053){r1058=r1057&15;r1059=r11+r1058|0;r1060=HEAP8[r1059];r1061=r1060&255;r1062=r1036+r1054|0;r1063=HEAP8[r1062];r1064=r1063&255;r1065=r1064&15;r1066=HEAP32[r45>>2];r1067=r1065+(r11+16)|0;r1068=HEAP8[r1067];r1069=r1068&255;r1070=(r1060&255)>(r1068&255);r1071=r1069-r1061|0;r1072=r1061-r1069|0;r1073=r1070?r1072:r1071;r1074=r1070?r1069:r1061;r1075=r1066|0;r1076=HEAP32[r1075>>2];r1077=r1076+r1073|0;r1078=HEAP8[r1077];r1079=r1078&255;r1080=r1074-r1079|0;r1081=r1040+r1054|0;r1082=HEAP8[r1081];r1083=r1082&255;r1084=r1083&15;r1085=r1084+(r11+32)|0;r1086=HEAP8[r1085];r1087=r1086&255;r1088=(r1080|0)>(r1087|0);r1089=r1087-r1080|0;r1090=r1080-r1087|0;r1091=r1088?r1090:r1089;r1092=r1088?r1087:r1080;r1093=r1076+r1091|0;r1094=HEAP8[r1093];r1095=r1094&255;r1096=r1092-r1095|0;r1097=r1044+r1054|0;r1098=HEAP8[r1097];r1099=r1098&255;r1100=r1099&15;r1101=r1100+(r11+48)|0;r1102=HEAP8[r1101];r1103=r1102&255;r1104=(r1096|0)>(r1103|0);r1105=r1103-r1096|0;r1106=r1096-r1103|0;r1107=r1104?r1106:r1105;r1108=r1104?r1103:r1096;r1109=r1076+r1107|0;r1110=HEAP8[r1109];r1111=r1110&255;r1112=r1108-r1111|0;r1113=r1112}else{r1114=r1057>>>4;r1115=r11+r1114|0;r1116=HEAP8[r1115];r1117=r1116&255;r1118=r1036+r1054|0;r1119=HEAP8[r1118];r1120=r1119&255;r1121=r1120>>>4;r1122=HEAP32[r45>>2];r1123=r1121+(r11+16)|0;r1124=HEAP8[r1123];r1125=r1124&255;r1126=(r1116&255)>(r1124&255);r1127=r1125-r1117|0;r1128=r1117-r1125|0;r1129=r1126?r1128:r1127;r1130=r1126?r1125:r1117;r1131=r1122|0;r1132=HEAP32[r1131>>2];r1133=r1132+r1129|0;r1134=HEAP8[r1133];r1135=r1134&255;r1136=r1130-r1135|0;r1137=r1040+r1054|0;r1138=HEAP8[r1137];r1139=r1138&255;r1140=r1139>>>4;r1141=r1140+(r11+32)|0;r1142=HEAP8[r1141];r1143=r1142&255;r1144=(r1136|0)>(r1143|0);r1145=r1143-r1136|0;r1146=r1136-r1143|0;r1147=r1144?r1146:r1145;r1148=r1144?r1143:r1136;r1149=r1132+r1147|0;r1150=HEAP8[r1149];r1151=r1150&255;r1152=r1148-r1151|0;r1153=r1044+r1054|0;r1154=HEAP8[r1153];r1155=r1154&255;r1156=r1155>>>4;r1157=r1156+(r11+48)|0;r1158=HEAP8[r1157];r1159=r1158&255;r1160=(r1152|0)>(r1159|0);r1161=r1159-r1152|0;r1162=r1152-r1159|0;r1163=r1160?r1162:r1161;r1164=r1160?r1159:r1152;r1165=r1132+r1163|0;r1166=HEAP8[r1165];r1167=r1166&255;r1168=r1164-r1167|0;r1113=r1168}r1169=r2+(r1051<<1)|0;r1170=HEAP16[r1169>>1];r1171=r1170&65535;r1172=r1171+r1113|0;r1173=r1172&65535;HEAP16[r1169>>1]=r1173;r1174=r1045+1|0;r1045=r1174;r1046=r1051}break};case 1:{r1175=0;while(1){r1176=(r1175|0)<16;if(!r1176){break}r1177=r300+r1175|0;r1178=HEAP8[r1177];r1179=r1178&255;r1180=HEAP32[r32>>2];r1181=r1180+(r70<<2)|0;r1182=HEAP32[r1181>>2];r1183=r1182|0;r1184=HEAP32[r1183>>2];r1185=r1179+r1184|0;r1186=r1185&255;r1187=r14+r1175|0;HEAP8[r1187]=r1186;r1188=r1175+1|0;r1175=r1188}r1189=HEAP32[r32>>2];r1190=r1189+(r70<<2)|0;r1191=HEAP32[r1190>>2];r1192=r1191+4|0;r1193=HEAP32[r1192>>2];r1194=HEAP32[r43>>2];r1195=r1194+(r70<<2)|0;r1196=HEAP32[r1195>>2];r1197=r1196+(r1193<<2)|0;r1198=HEAP32[r1197>>2];r1199=0;r1200=0;while(1){r1201=(r1199|0)<(r4|0);if(!r1201){break L61}r1202=r3+r1199|0;r1203=HEAP8[r1202];r1204=r1203&255;r1205=r1204+r1200|0;r1206=r1205&1;r1207=(r1206|0)==0;r1208=(r1205|0)/2&-1;r1209=r1198+r1208|0;r1210=HEAP8[r1209];r1211=r1210&255;r1212=r1211&15;r1213=r1211>>>4;r1214=r1207?r1212:r1213;r1215=r14+r1214|0;r1216=HEAP8[r1215];r1217=r1216&255;r1218=r2+(r1205<<1)|0;r1219=HEAP16[r1218>>1];r1220=r1219+r1217&65535;HEAP16[r1218>>1]=r1220;r1221=r1199+1|0;r1199=r1221;r1200=r1205}break};case 3:{r1222=0;while(1){r1223=(r1222|0)<16;if(!r1223){break}r1224=r300+r1222|0;r1225=HEAP8[r1224];r1226=r1225&255;r1227=HEAP32[r32>>2];r1228=r1227+(r70<<2)|0;r1229=HEAP32[r1228>>2];r1230=r1229|0;r1231=HEAP32[r1230>>2];r1232=r1226+r1231|0;r1233=r1232&255;r1234=r12+r1222|0;HEAP8[r1234]=r1233;r1235=r1229+8|0;r1236=HEAP32[r1235>>2];r1237=r1226+r1236|0;r1238=r1237&255;r1239=r1222+(r12+16)|0;HEAP8[r1239]=r1238;r1240=r1229+16|0;r1241=HEAP32[r1240>>2];r1242=r1226+r1241|0;r1243=r1242&255;r1244=r1222+(r12+32)|0;HEAP8[r1244]=r1243;r1245=r1222+1|0;r1222=r1245}r1246=HEAP32[r32>>2];r1247=r1246+(r70<<2)|0;r1248=HEAP32[r1247>>2];r1249=r1248+4|0;r1250=HEAP32[r1249>>2];r1251=HEAP32[r43>>2];r1252=r1251+(r70<<2)|0;r1253=HEAP32[r1252>>2];r1254=r1253+(r1250<<2)|0;r1255=HEAP32[r1254>>2];r1256=r1248+12|0;r1257=HEAP32[r1256>>2];r1258=r1253+(r1257<<2)|0;r1259=HEAP32[r1258>>2];r1260=r1248+20|0;r1261=HEAP32[r1260>>2];r1262=r1253+(r1261<<2)|0;r1263=HEAP32[r1262>>2];r1264=0;r1265=0;while(1){r1266=(r1264|0)<(r4|0);if(!r1266){break L61}r1267=r3+r1264|0;r1268=HEAP8[r1267];r1269=r1268&255;r1270=r1269+r1265|0;r1271=r1270&1;r1272=(r1271|0)==0;r1273=(r1270|0)/2&-1;r1274=r1255+r1273|0;r1275=HEAP8[r1274];r1276=r1275&255;if(r1272){r1277=r1276&15;r1278=r12+r1277|0;r1279=HEAP8[r1278];r1280=r1279&255;r1281=r1259+r1273|0;r1282=HEAP8[r1281];r1283=r1282&255;r1284=r1283&15;r1285=HEAP32[r45>>2];r1286=r1284+(r12+16)|0;r1287=HEAP8[r1286];r1288=r1287&255;r1289=(r1279&255)>(r1287&255);r1290=r1288-r1280|0;r1291=r1280-r1288|0;r1292=r1289?r1291:r1290;r1293=r1289?r1288:r1280;r1294=r1285|0;r1295=HEAP32[r1294>>2];r1296=r1295+r1292|0;r1297=HEAP8[r1296];r1298=r1297&255;r1299=r1293-r1298|0;r1300=r1263+r1273|0;r1301=HEAP8[r1300];r1302=r1301&255;r1303=r1302&15;r1304=r1303+(r12+32)|0;r1305=HEAP8[r1304];r1306=r1305&255;r1307=(r1299|0)>(r1306|0);r1308=r1306-r1299|0;r1309=r1299-r1306|0;r1310=r1307?r1309:r1308;r1311=r1307?r1306:r1299;r1312=r1295+r1310|0;r1313=HEAP8[r1312];r1314=r1313&255;r1315=r1311-r1314|0;r1316=r1315}else{r1317=r1276>>>4;r1318=r12+r1317|0;r1319=HEAP8[r1318];r1320=r1319&255;r1321=r1259+r1273|0;r1322=HEAP8[r1321];r1323=r1322&255;r1324=r1323>>>4;r1325=HEAP32[r45>>2];r1326=r1324+(r12+16)|0;r1327=HEAP8[r1326];r1328=r1327&255;r1329=(r1319&255)>(r1327&255);r1330=r1328-r1320|0;r1331=r1320-r1328|0;r1332=r1329?r1331:r1330;r1333=r1329?r1328:r1320;r1334=r1325|0;r1335=HEAP32[r1334>>2];r1336=r1335+r1332|0;r1337=HEAP8[r1336];r1338=r1337&255;r1339=r1333-r1338|0;r1340=r1263+r1273|0;r1341=HEAP8[r1340];r1342=r1341&255;r1343=r1342>>>4;r1344=r1343+(r12+32)|0;r1345=HEAP8[r1344];r1346=r1345&255;r1347=(r1339|0)>(r1346|0);r1348=r1346-r1339|0;r1349=r1339-r1346|0;r1350=r1347?r1349:r1348;r1351=r1347?r1346:r1339;r1352=r1335+r1350|0;r1353=HEAP8[r1352];r1354=r1353&255;r1355=r1351-r1354|0;r1316=r1355}r1356=r2+(r1270<<1)|0;r1357=HEAP16[r1356>>1];r1358=r1357&65535;r1359=r1358+r1316|0;r1360=r1359&65535;HEAP16[r1356>>1]=r1360;r1361=r1264+1|0;r1264=r1361;r1265=r1270}break};case 6:{r1362=0;while(1){r1363=(r1362|0)<16;if(!r1363){break}r1364=r300+r1362|0;r1365=HEAP8[r1364];r1366=r1365&255;r1367=HEAP32[r32>>2];r1368=r1367+(r70<<2)|0;r1369=HEAP32[r1368>>2];r1370=r1369|0;r1371=HEAP32[r1370>>2];r1372=r1366+r1371|0;r1373=r1372&255;r1374=r15+r1362|0;HEAP8[r1374]=r1373;r1375=r1369+8|0;r1376=HEAP32[r1375>>2];r1377=r1366+r1376|0;r1378=r1377&255;r1379=r1362+(r15+16)|0;HEAP8[r1379]=r1378;r1380=r1369+16|0;r1381=HEAP32[r1380>>2];r1382=r1366+r1381|0;r1383=r1382&255;r1384=r1362+(r15+32)|0;HEAP8[r1384]=r1383;r1385=r1369+24|0;r1386=HEAP32[r1385>>2];r1387=r1366+r1386|0;r1388=r1387&255;r1389=r1362+(r15+48)|0;HEAP8[r1389]=r1388;r1390=r1369+32|0;r1391=HEAP32[r1390>>2];r1392=r1366+r1391|0;r1393=r1392&255;r1394=r1362+(r15+64)|0;HEAP8[r1394]=r1393;r1395=r1369+40|0;r1396=HEAP32[r1395>>2];r1397=r1366+r1396|0;r1398=r1397&255;r1399=r1362+(r15+80)|0;HEAP8[r1399]=r1398;r1400=r1362+1|0;r1362=r1400}r1401=HEAP32[r32>>2];r1402=r1401+(r70<<2)|0;r1403=HEAP32[r1402>>2];r1404=r1403+4|0;r1405=HEAP32[r1404>>2];r1406=HEAP32[r43>>2];r1407=r1406+(r70<<2)|0;r1408=HEAP32[r1407>>2];r1409=r1408+(r1405<<2)|0;r1410=HEAP32[r1409>>2];r1411=r1403+12|0;r1412=HEAP32[r1411>>2];r1413=r1408+(r1412<<2)|0;r1414=HEAP32[r1413>>2];r1415=r1403+20|0;r1416=HEAP32[r1415>>2];r1417=r1408+(r1416<<2)|0;r1418=HEAP32[r1417>>2];r1419=r1403+28|0;r1420=HEAP32[r1419>>2];r1421=r1408+(r1420<<2)|0;r1422=HEAP32[r1421>>2];r1423=r1403+36|0;r1424=HEAP32[r1423>>2];r1425=r1408+(r1424<<2)|0;r1426=HEAP32[r1425>>2];r1427=r1403+44|0;r1428=HEAP32[r1427>>2];r1429=r1408+(r1428<<2)|0;r1430=HEAP32[r1429>>2];r1431=0;r1432=0;while(1){r1433=(r1431|0)<(r4|0);if(!r1433){break L61}r1434=r3+r1431|0;r1435=HEAP8[r1434];r1436=r1435&255;r1437=r1436+r1432|0;r1438=r1437&1;r1439=(r1438|0)==0;r1440=(r1437|0)/2&-1;r1441=r1410+r1440|0;r1442=HEAP8[r1441];r1443=r1442&255;if(r1439){r1444=r1443&15;r1445=r15+r1444|0;r1446=HEAP8[r1445];r1447=r1446&255;r1448=r1414+r1440|0;r1449=HEAP8[r1448];r1450=r1449&255;r1451=r1450&15;r1452=HEAP32[r45>>2];r1453=r1451+(r15+16)|0;r1454=HEAP8[r1453];r1455=r1454&255;r1456=(r1446&255)>(r1454&255);r1457=r1455-r1447|0;r1458=r1447-r1455|0;r1459=r1456?r1458:r1457;r1460=r1456?r1455:r1447;r1461=r1452|0;r1462=HEAP32[r1461>>2];r1463=r1462+r1459|0;r1464=HEAP8[r1463];r1465=r1464&255;r1466=r1460-r1465|0;r1467=r1418+r1440|0;r1468=HEAP8[r1467];r1469=r1468&255;r1470=r1469&15;r1471=r1470+(r15+32)|0;r1472=HEAP8[r1471];r1473=r1472&255;r1474=(r1466|0)>(r1473|0);r1475=r1473-r1466|0;r1476=r1466-r1473|0;r1477=r1474?r1476:r1475;r1478=r1474?r1473:r1466;r1479=r1462+r1477|0;r1480=HEAP8[r1479];r1481=r1480&255;r1482=r1478-r1481|0;r1483=r1422+r1440|0;r1484=HEAP8[r1483];r1485=r1484&255;r1486=r1485&15;r1487=r1486+(r15+48)|0;r1488=HEAP8[r1487];r1489=r1488&255;r1490=(r1482|0)>(r1489|0);r1491=r1489-r1482|0;r1492=r1482-r1489|0;r1493=r1490?r1492:r1491;r1494=r1490?r1489:r1482;r1495=r1462+r1493|0;r1496=HEAP8[r1495];r1497=r1496&255;r1498=r1494-r1497|0;r1499=r1426+r1440|0;r1500=HEAP8[r1499];r1501=r1500&255;r1502=r1501&15;r1503=r1502+(r15+64)|0;r1504=HEAP8[r1503];r1505=r1504&255;r1506=(r1498|0)>(r1505|0);r1507=r1505-r1498|0;r1508=r1498-r1505|0;r1509=r1506?r1508:r1507;r1510=r1506?r1505:r1498;r1511=r1462+r1509|0;r1512=HEAP8[r1511];r1513=r1512&255;r1514=r1510-r1513|0;r1515=r1430+r1440|0;r1516=HEAP8[r1515];r1517=r1516&255;r1518=r1517&15;r1519=r1518+(r15+80)|0;r1520=HEAP8[r1519];r1521=r1520&255;r1522=(r1514|0)>(r1521|0);r1523=r1521-r1514|0;r1524=r1514-r1521|0;r1525=r1522?r1524:r1523;r1526=r1522?r1521:r1514;r1527=r1462+r1525|0;r1528=HEAP8[r1527];r1529=r1528&255;r1530=r1526-r1529|0;r1531=r1530}else{r1532=r1443>>>4;r1533=r15+r1532|0;r1534=HEAP8[r1533];r1535=r1534&255;r1536=r1414+r1440|0;r1537=HEAP8[r1536];r1538=r1537&255;r1539=r1538>>>4;r1540=HEAP32[r45>>2];r1541=r1539+(r15+16)|0;r1542=HEAP8[r1541];r1543=r1542&255;r1544=(r1534&255)>(r1542&255);r1545=r1543-r1535|0;r1546=r1535-r1543|0;r1547=r1544?r1546:r1545;r1548=r1544?r1543:r1535;r1549=r1540|0;r1550=HEAP32[r1549>>2];r1551=r1550+r1547|0;r1552=HEAP8[r1551];r1553=r1552&255;r1554=r1548-r1553|0;r1555=r1418+r1440|0;r1556=HEAP8[r1555];r1557=r1556&255;r1558=r1557>>>4;r1559=r1558+(r15+32)|0;r1560=HEAP8[r1559];r1561=r1560&255;r1562=(r1554|0)>(r1561|0);r1563=r1561-r1554|0;r1564=r1554-r1561|0;r1565=r1562?r1564:r1563;r1566=r1562?r1561:r1554;r1567=r1550+r1565|0;r1568=HEAP8[r1567];r1569=r1568&255;r1570=r1566-r1569|0;r1571=r1422+r1440|0;r1572=HEAP8[r1571];r1573=r1572&255;r1574=r1573>>>4;r1575=r1574+(r15+48)|0;r1576=HEAP8[r1575];r1577=r1576&255;r1578=(r1570|0)>(r1577|0);r1579=r1577-r1570|0;r1580=r1570-r1577|0;r1581=r1578?r1580:r1579;r1582=r1578?r1577:r1570;r1583=r1550+r1581|0;r1584=HEAP8[r1583];r1585=r1584&255;r1586=r1582-r1585|0;r1587=r1426+r1440|0;r1588=HEAP8[r1587];r1589=r1588&255;r1590=r1589>>>4;r1591=r1590+(r15+64)|0;r1592=HEAP8[r1591];r1593=r1592&255;r1594=(r1586|0)>(r1593|0);r1595=r1593-r1586|0;r1596=r1586-r1593|0;r1597=r1594?r1596:r1595;r1598=r1594?r1593:r1586;r1599=r1550+r1597|0;r1600=HEAP8[r1599];r1601=r1600&255;r1602=r1598-r1601|0;r1603=r1430+r1440|0;r1604=HEAP8[r1603];r1605=r1604&255;r1606=r1605>>>4;r1607=r1606+(r15+80)|0;r1608=HEAP8[r1607];r1609=r1608&255;r1610=(r1602|0)>(r1609|0);r1611=r1609-r1602|0;r1612=r1602-r1609|0;r1613=r1610?r1612:r1611;r1614=r1610?r1609:r1602;r1615=r1550+r1613|0;r1616=HEAP8[r1615];r1617=r1616&255;r1618=r1614-r1617|0;r1531=r1618}r1619=r2+(r1437<<1)|0;r1620=HEAP16[r1619>>1];r1621=r1620&65535;r1622=r1621+r1531|0;r1623=r1622&65535;HEAP16[r1619>>1]=r1623;r1624=r1431+1|0;r1431=r1624;r1432=r1437}break};case 2:{r1625=0;while(1){r1626=(r1625|0)<16;if(!r1626){break}r1627=r300+r1625|0;r1628=HEAP8[r1627];r1629=r1628&255;r1630=HEAP32[r32>>2];r1631=r1630+(r70<<2)|0;r1632=HEAP32[r1631>>2];r1633=r1632|0;r1634=HEAP32[r1633>>2];r1635=r1629+r1634|0;r1636=r1635&255;r1637=r13+r1625|0;HEAP8[r1637]=r1636;r1638=r1632+8|0;r1639=HEAP32[r1638>>2];r1640=r1629+r1639|0;r1641=r1640&255;r1642=r1625+(r13+16)|0;HEAP8[r1642]=r1641;r1643=r1625+1|0;r1625=r1643}r1644=HEAP32[r32>>2];r1645=r1644+(r70<<2)|0;r1646=HEAP32[r1645>>2];r1647=r1646+4|0;r1648=HEAP32[r1647>>2];r1649=HEAP32[r43>>2];r1650=r1649+(r70<<2)|0;r1651=HEAP32[r1650>>2];r1652=r1651+(r1648<<2)|0;r1653=HEAP32[r1652>>2];r1654=r1646+12|0;r1655=HEAP32[r1654>>2];r1656=r1651+(r1655<<2)|0;r1657=HEAP32[r1656>>2];r1658=0;r1659=0;while(1){r1660=(r1658|0)<(r4|0);if(!r1660){break L61}r1661=r3+r1658|0;r1662=HEAP8[r1661];r1663=r1662&255;r1664=r1663+r1659|0;r1665=r1664&1;r1666=(r1665|0)==0;r1667=(r1664|0)/2&-1;r1668=r1653+r1667|0;r1669=HEAP8[r1668];r1670=r1669&255;if(r1666){r1671=r1670&15;r1672=r13+r1671|0;r1673=HEAP8[r1672];r1674=r1673&255;r1675=r1657+r1667|0;r1676=HEAP8[r1675];r1677=r1676&255;r1678=r1677&15;r1679=HEAP32[r45>>2];r1680=r1678+(r13+16)|0;r1681=HEAP8[r1680];r1682=r1681&255;r1683=(r1673&255)>(r1681&255);r1684=r1682-r1674|0;r1685=r1674-r1682|0;r1686=r1683?r1685:r1684;r1687=r1683?r1682:r1674;r1688=r1679|0;r1689=HEAP32[r1688>>2];r1690=r1689+r1686|0;r1691=HEAP8[r1690];r1692=r1691&255;r1693=r1687-r1692|0;r1694=r1693}else{r1695=r1670>>>4;r1696=r13+r1695|0;r1697=HEAP8[r1696];r1698=r1697&255;r1699=r1657+r1667|0;r1700=HEAP8[r1699];r1701=r1700&255;r1702=r1701>>>4;r1703=HEAP32[r45>>2];r1704=r1702+(r13+16)|0;r1705=HEAP8[r1704];r1706=r1705&255;r1707=(r1697&255)>(r1705&255);r1708=r1706-r1698|0;r1709=r1698-r1706|0;r1710=r1707?r1709:r1708;r1711=r1707?r1706:r1698;r1712=r1703|0;r1713=HEAP32[r1712>>2];r1714=r1713+r1710|0;r1715=HEAP8[r1714];r1716=r1715&255;r1717=r1711-r1716|0;r1694=r1717}r1718=r2+(r1664<<1)|0;r1719=HEAP16[r1718>>1];r1720=r1719&65535;r1721=r1720+r1694|0;r1722=r1721&65535;HEAP16[r1718>>1]=r1722;r1723=r1658+1|0;r1658=r1723;r1659=r1664}break};case 5:{r1724=0;while(1){r1725=(r1724|0)<16;if(!r1725){break}r1726=r300+r1724|0;r1727=HEAP8[r1726];r1728=r1727&255;r1729=HEAP32[r32>>2];r1730=r1729+(r70<<2)|0;r1731=HEAP32[r1730>>2];r1732=r1731|0;r1733=HEAP32[r1732>>2];r1734=r1728+r1733|0;r1735=r1734&255;r1736=r10+r1724|0;HEAP8[r1736]=r1735;r1737=r1731+8|0;r1738=HEAP32[r1737>>2];r1739=r1728+r1738|0;r1740=r1739&255;r1741=r1724+(r10+16)|0;HEAP8[r1741]=r1740;r1742=r1731+16|0;r1743=HEAP32[r1742>>2];r1744=r1728+r1743|0;r1745=r1744&255;r1746=r1724+(r10+32)|0;HEAP8[r1746]=r1745;r1747=r1731+24|0;r1748=HEAP32[r1747>>2];r1749=r1728+r1748|0;r1750=r1749&255;r1751=r1724+(r10+48)|0;HEAP8[r1751]=r1750;r1752=r1731+32|0;r1753=HEAP32[r1752>>2];r1754=r1728+r1753|0;r1755=r1754&255;r1756=r1724+(r10+64)|0;HEAP8[r1756]=r1755;r1757=r1724+1|0;r1724=r1757}r1758=HEAP32[r32>>2];r1759=r1758+(r70<<2)|0;r1760=HEAP32[r1759>>2];r1761=r1760+4|0;r1762=HEAP32[r1761>>2];r1763=HEAP32[r43>>2];r1764=r1763+(r70<<2)|0;r1765=HEAP32[r1764>>2];r1766=r1765+(r1762<<2)|0;r1767=HEAP32[r1766>>2];r1768=r1760+12|0;r1769=HEAP32[r1768>>2];r1770=r1765+(r1769<<2)|0;r1771=HEAP32[r1770>>2];r1772=r1760+20|0;r1773=HEAP32[r1772>>2];r1774=r1765+(r1773<<2)|0;r1775=HEAP32[r1774>>2];r1776=r1760+28|0;r1777=HEAP32[r1776>>2];r1778=r1765+(r1777<<2)|0;r1779=HEAP32[r1778>>2];r1780=r1760+36|0;r1781=HEAP32[r1780>>2];r1782=r1765+(r1781<<2)|0;r1783=HEAP32[r1782>>2];r1784=0;r1785=0;while(1){r1786=(r1784|0)<(r4|0);if(!r1786){break L61}r1787=r3+r1784|0;r1788=HEAP8[r1787];r1789=r1788&255;r1790=r1789+r1785|0;r1791=r1790&1;r1792=(r1791|0)==0;r1793=(r1790|0)/2&-1;r1794=r1767+r1793|0;r1795=HEAP8[r1794];r1796=r1795&255;if(r1792){r1797=r1796&15;r1798=r10+r1797|0;r1799=HEAP8[r1798];r1800=r1799&255;r1801=r1771+r1793|0;r1802=HEAP8[r1801];r1803=r1802&255;r1804=r1803&15;r1805=HEAP32[r45>>2];r1806=r1804+(r10+16)|0;r1807=HEAP8[r1806];r1808=r1807&255;r1809=(r1799&255)>(r1807&255);r1810=r1808-r1800|0;r1811=r1800-r1808|0;r1812=r1809?r1811:r1810;r1813=r1809?r1808:r1800;r1814=r1805|0;r1815=HEAP32[r1814>>2];r1816=r1815+r1812|0;r1817=HEAP8[r1816];r1818=r1817&255;r1819=r1813-r1818|0;r1820=r1775+r1793|0;r1821=HEAP8[r1820];r1822=r1821&255;r1823=r1822&15;r1824=r1823+(r10+32)|0;r1825=HEAP8[r1824];r1826=r1825&255;r1827=(r1819|0)>(r1826|0);r1828=r1826-r1819|0;r1829=r1819-r1826|0;r1830=r1827?r1829:r1828;r1831=r1827?r1826:r1819;r1832=r1815+r1830|0;r1833=HEAP8[r1832];r1834=r1833&255;r1835=r1831-r1834|0;r1836=r1779+r1793|0;r1837=HEAP8[r1836];r1838=r1837&255;r1839=r1838&15;r1840=r1839+(r10+48)|0;r1841=HEAP8[r1840];r1842=r1841&255;r1843=(r1835|0)>(r1842|0);r1844=r1842-r1835|0;r1845=r1835-r1842|0;r1846=r1843?r1845:r1844;r1847=r1843?r1842:r1835;r1848=r1815+r1846|0;r1849=HEAP8[r1848];r1850=r1849&255;r1851=r1847-r1850|0;r1852=r1783+r1793|0;r1853=HEAP8[r1852];r1854=r1853&255;r1855=r1854&15;r1856=r1855+(r10+64)|0;r1857=HEAP8[r1856];r1858=r1857&255;r1859=(r1851|0)>(r1858|0);r1860=r1858-r1851|0;r1861=r1851-r1858|0;r1862=r1859?r1861:r1860;r1863=r1859?r1858:r1851;r1864=r1815+r1862|0;r1865=HEAP8[r1864];r1866=r1865&255;r1867=r1863-r1866|0;r1868=r1867}else{r1869=r1796>>>4;r1870=r10+r1869|0;r1871=HEAP8[r1870];r1872=r1871&255;r1873=r1771+r1793|0;r1874=HEAP8[r1873];r1875=r1874&255;r1876=r1875>>>4;r1877=HEAP32[r45>>2];r1878=r1876+(r10+16)|0;r1879=HEAP8[r1878];r1880=r1879&255;r1881=(r1871&255)>(r1879&255);r1882=r1880-r1872|0;r1883=r1872-r1880|0;r1884=r1881?r1883:r1882;r1885=r1881?r1880:r1872;r1886=r1877|0;r1887=HEAP32[r1886>>2];r1888=r1887+r1884|0;r1889=HEAP8[r1888];r1890=r1889&255;r1891=r1885-r1890|0;r1892=r1775+r1793|0;r1893=HEAP8[r1892];r1894=r1893&255;r1895=r1894>>>4;r1896=r1895+(r10+32)|0;r1897=HEAP8[r1896];r1898=r1897&255;r1899=(r1891|0)>(r1898|0);r1900=r1898-r1891|0;r1901=r1891-r1898|0;r1902=r1899?r1901:r1900;r1903=r1899?r1898:r1891;r1904=r1887+r1902|0;r1905=HEAP8[r1904];r1906=r1905&255;r1907=r1903-r1906|0;r1908=r1779+r1793|0;r1909=HEAP8[r1908];r1910=r1909&255;r1911=r1910>>>4;r1912=r1911+(r10+48)|0;r1913=HEAP8[r1912];r1914=r1913&255;r1915=(r1907|0)>(r1914|0);r1916=r1914-r1907|0;r1917=r1907-r1914|0;r1918=r1915?r1917:r1916;r1919=r1915?r1914:r1907;r1920=r1887+r1918|0;r1921=HEAP8[r1920];r1922=r1921&255;r1923=r1919-r1922|0;r1924=r1783+r1793|0;r1925=HEAP8[r1924];r1926=r1925&255;r1927=r1926>>>4;r1928=r1927+(r10+64)|0;r1929=HEAP8[r1928];r1930=r1929&255;r1931=(r1923|0)>(r1930|0);r1932=r1930-r1923|0;r1933=r1923-r1930|0;r1934=r1931?r1933:r1932;r1935=r1931?r1930:r1923;r1936=r1887+r1934|0;r1937=HEAP8[r1936];r1938=r1937&255;r1939=r1935-r1938|0;r1868=r1939}r1940=r2+(r1790<<1)|0;r1941=HEAP16[r1940>>1];r1942=r1941&65535;r1943=r1942+r1868|0;r1944=r1943&65535;HEAP16[r1940>>1]=r1944;r1945=r1784+1|0;r1784=r1945;r1785=r1790}break};default:{r1946=0;r1947=0;while(1){r1948=(r1946|0)<(r4|0);if(!r1948){break L61}r1949=r3+r1946|0;r1950=HEAP8[r1949];r1951=r1950&255;r1952=r1951+r1947|0;r1953=HEAP32[r32>>2];r1954=r1953+(r70<<2)|0;r1955=HEAP32[r1954>>2];r1956=r1955+4|0;r1957=HEAP32[r1956>>2];r1958=HEAP32[r43>>2];r1959=r1958+(r70<<2)|0;r1960=HEAP32[r1959>>2];r1961=r1960+(r1957<<2)|0;r1962=HEAP32[r1961>>2];r1963=r1952&1;r1964=(r1963|0)==0;r1965=(r1952|0)/2&-1;r1966=r1962+r1965|0;r1967=HEAP8[r1966];r1968=r1967&255;r1969=r1968&15;r1970=r1968>>>4;r1971=r1964?r1969:r1970;r1972=HEAP32[r38>>2];r1973=r1972+r1971|0;r1974=HEAP8[r1973];r1975=r1974&255;r1976=r1955|0;r1977=HEAP32[r1976>>2];r1978=r1975+r1977|0;r1979=(r1952|0)/2&-1;r1980=1;r1981=r1978;while(1){r1982=(r1980|0)<(r307|0);if(!r1982){break}r1983=r1955+(r1980<<3)+4|0;r1984=HEAP32[r1983>>2];r1985=r1960+(r1984<<2)|0;r1986=HEAP32[r1985>>2];r1987=r1986+r1979|0;r1988=HEAP8[r1987];r1989=r1988&255;r1990=r1989&15;r1991=r1989>>>4;r1992=r1964?r1990:r1991;r1993=HEAP32[r45>>2];r1994=r1972+r1992|0;r1995=HEAP8[r1994];r1996=r1995&255;r1997=r1955+(r1980<<3)|0;r1998=HEAP32[r1997>>2];r1999=r1996+r1998|0;r2000=(r1981|0)>(r1999|0);r2001=r1999-r1981|0;r2002=r1981-r1999|0;r2003=r2000?r2002:r2001;r2004=r2000?r1999:r1981;r2005=r1993|0;r2006=HEAP32[r2005>>2];r2007=r2006+r2003|0;r2008=HEAP8[r2007];r2009=r2008&255;r2010=r2004-r2009|0;r2011=r1980+1|0;r1980=r2011;r1981=r2010}r2012=r2+(r1952<<1)|0;r2013=HEAP16[r2012>>1];r2014=r2013&65535;r2015=r2014+r1981|0;r2016=r2015&65535;HEAP16[r2012>>1]=r2016;r2017=r1946+1|0;r1946=r2017;r1947=r1952}}}}}while(0);r2018=r70+1|0;r70=r2018}STACKTOP=r9;return 0}function _s2_semi_mgau_init(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+1184|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r4+32;r10=r4+40;r11=r4+48;r12=r4+56;r13=r4+64;r14=r4+72;r15=r4+80;r16=r4+88;r17=r4+96;r18=r4+104;r19=r4+112;r20=r4+120;r21=r4+128;r22=r4+1128;r23=r4+1136;r24=r4+1144;r25=r4+1152;r26=r4+1160;r27=r4+1168;r28=r4+1176;r29=_malloc(84);if((r29|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=84,HEAP32[r3+16>>2]=40960,HEAP32[r3+24>>2]=1234,r3));STACKTOP=r3}if((HEAP32[r29-4>>2]&3|0)!=0){_memset(r29,0,84)|0}HEAP32[r29+8>>2]=HEAP32[r1>>2];r30=r1+4|0;r31=HEAP32[r30>>2];r32=r31+12|0;HEAP32[r32>>2]=HEAP32[r32>>2]+1;r32=r29+80|0;HEAP32[r32>>2]=r31;r31=_logmath_init(HEAPF64[HEAP32[r30>>2]+24>>3],10,1);r30=r29+76|0;HEAP32[r30>>2]=r31;L7:do{if((r31|0)!=0){if((HEAP8[r31+8|0]|0)!=1){_err_msg(4,40960,1245,47256,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r3>>3]=HEAPF64[r31+24>>3],r3));STACKTOP=r3;break}r33=r29+8|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],34360,r28)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=34360,r3));STACKTOP=r3;r34=0}else{r35=HEAP32[r28>>2];if((r35|0)==0){r34=0;break}r34=HEAP32[r35>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],24208,r27)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=24208,r3));STACKTOP=r3;r36=0}else{r35=HEAP32[r27>>2];if((r35|0)==0){r36=0;break}r36=HEAP32[r35>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],18472,r26)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=18472,r3));STACKTOP=r3;r37=0}else{r35=HEAP32[r26>>2];if((r35|0)==0){r37=0;break}r37=HEAPF64[r35>>3]}}while(0);r35=_gauden_init(r34,r36,r37,HEAP32[r32>>2]);HEAP32[r29+12>>2]=r35;if((r35|0)==0){break}if((HEAP32[r35+16>>2]|0)!=1){break}HEAP32[r29+16>>2]=HEAP32[HEAP32[r35>>2]>>2];HEAP32[r29+20>>2]=HEAP32[HEAP32[r35+4>>2]>>2];HEAP32[r29+24>>2]=HEAP32[HEAP32[r35+8>>2]>>2];r38=HEAP32[r35+28>>2];HEAP32[r29+40>>2]=r38;r39=HEAP32[r35+20>>2]&65535;r40=r29+44|0;HEAP16[r40>>1]=r39;r41=r39<<16>>16;r39=HEAP32[r1+16>>2];r42=r39+24|0;r43=(HEAP32[r42>>2]|0)==0;if((r41|0)==(HEAP32[(r43?r39+12|0:r42)>>2]|0)){r44=0}else{r45=HEAP32[(r43?r39+12|0:r42)>>2];_err_msg(4,40960,1267,15104,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r41,HEAP32[r3+8>>2]=r45,r3));STACKTOP=r3;break}while(1){if((r44|0)>=(r41|0)){break}r46=HEAP32[r38+(r44<<2)>>2];r47=(HEAP32[r39+84>>2]|0)==0;do{if(r47){r45=HEAP32[r39+28>>2];if((r45|0)==0){r48=HEAP32[r39+16>>2]+(r44<<2)|0;break}else{r48=r45+(r44<<2)|0;break}}else{r48=r39+92|0}}while(0);if((r46|0)!=(HEAP32[r48>>2]|0)){r2=31;break}r44=r44+1|0}if(r2==31){do{if(r47){r38=HEAP32[r39+28>>2];if((r38|0)==0){r49=HEAP32[r39+16>>2]+(r44<<2)|0;break}else{r49=r38+(r44<<2)|0;break}}else{r49=r39+92|0}}while(0);r39=HEAP32[r49>>2];_err_msg(4,40960,1273,12176,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r44,HEAP32[r3+8>>2]=r46,HEAP32[r3+16>>2]=r39,r3));STACKTOP=r3;break}r39=r29+46|0;HEAP16[r39>>1]=HEAP32[r35+24>>2];L52:do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],9864,r25)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=9864,r3));STACKTOP=r3;r2=142}else{r38=HEAP32[r25>>2];if((r38|0)==0){r2=142;break}r41=HEAP32[r38>>2];if((r41|0)==0){r2=142;break}r38=r21|0;r45=r22;r42=r23;r43=r24;r50=HEAP16[r40>>1]|0;r51=HEAP16[r39>>1]|0;r52=HEAP32[HEAP32[r1+20>>2]+20>>2];r53=r29+48|0;HEAP32[r53>>2]=r52;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],31344,r20)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=31344,r3));STACKTOP=r3;r54=0}else{r55=HEAP32[r20>>2];if((r55|0)==0){r54=0;break}r54=(HEAP32[r55>>2]|0)!=0|0}}while(0);r55=_fopen(r41,45688);if((r55|0)==0){break L7}_err_msg(1,40960,903,21056,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r41,r3));STACKTOP=r3;L63:do{if((_fread(r45,4,1,r55)|0)==1){r56=HEAP32[r22>>2];do{if((r56|0)<1|(r56|0)>999){r57=_llvm_bswap_i32(r56);HEAP32[r22>>2]=r57;if(!((r57|0)<1|(r57|0)>999)){r58=1;r59=r57;break}_err_msg(4,40960,914,20032,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r57,HEAP32[r3+8>>2]=r41,r3));STACKTOP=r3;break L63}else{r58=0;r59=r56}}while(0);r56=_fread(r38,1,r59,r55);if((r56|0)!=(HEAP32[r22>>2]|0)){r57=___errno_location();r60=HEAP32[r57>>2];r57=_malloc(23);_memcpy(r57,19520,18)|0;r61=r57+_strlen(r57)|0;HEAP8[r61]=HEAP8[6400];HEAP8[r61+1|0]=HEAP8[6401];HEAP8[r61+2|0]=HEAP8[6402];HEAP8[r61+3|0]=HEAP8[6403];HEAP8[r61+4|0]=HEAP8[6404];HEAP8[r61+5|0]=HEAP8[6405];r61=_strerror(r60);_err_msg(4,40960,920,r57,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r61,r3));STACKTOP=r3;_free(r57);break}if((HEAP8[r21+(r56-1)|0]|0)!=0){_err_msg(4,40960,924,19064,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break}_err_msg(1,40960,927,9536,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r38,r3));STACKTOP=r3;if((_fread(r45,4,1,r55)|0)!=1){r56=___errno_location();r57=HEAP32[r56>>2];r56=_malloc(40);_memcpy(r56,17752,35)|0;r61=r56+_strlen(r56)|0;HEAP8[r61]=HEAP8[6400];HEAP8[r61+1|0]=HEAP8[6401];HEAP8[r61+2|0]=HEAP8[6402];HEAP8[r61+3|0]=HEAP8[6403];HEAP8[r61+4|0]=HEAP8[6404];HEAP8[r61+5|0]=HEAP8[6405];r61=_strerror(r57);_err_msg(4,40960,931,r56,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r41,HEAP32[r3+8>>2]=r61,r3));STACKTOP=r3;_free(r56);break}r56=(r58|0)==0;r61=HEAP32[r22>>2];if(r56){r62=r61}else{r57=_llvm_bswap_i32(r61);HEAP32[r22>>2]=r57;r62=r57}r57=_fread(r38,1,r62,r55);if((r57|0)!=(HEAP32[r22>>2]|0)){r61=___errno_location();r60=HEAP32[r61>>2];r61=_malloc(24);_memcpy(r61,17304,19)|0;r63=r61+_strlen(r61)|0;HEAP8[r63]=HEAP8[6400];HEAP8[r63+1|0]=HEAP8[6401];HEAP8[r63+2|0]=HEAP8[6402];HEAP8[r63+3|0]=HEAP8[6403];HEAP8[r63+4|0]=HEAP8[6404];HEAP8[r63+5|0]=HEAP8[6405];r63=_strerror(r60);_err_msg(4,40960,936,r61,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r63,r3));STACKTOP=r3;_free(r61);break}if((HEAP8[r21+(r57-1)|0]|0)!=0){_err_msg(4,40960,940,17104,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break}r57=r21+14|0;r61=r21+12|0;r63=r21+13|0;r60=0;r64=r50;r65=r51;r66=r52;r67=8;L88:while(1){r68=r60;r69=r64;r70=r65;r71=r66;while(1){if((_fread(r45,4,1,r55)|0)!=1){r2=66;break L88}r72=HEAP32[r22>>2];if(r56){r73=r72}else{r74=_llvm_bswap_i32(r72);HEAP32[r22>>2]=r74;r73=r74}if((r73|0)==0){r2=70;break L88}if((_fread(r38,1,r73,r55)|0)!=(r73|0)){r2=72;break L88}r74=HEAP8[r38];r72=r74<<24>>24==0;L98:do{if(r72){r75=16440;r76=0}else{r77=r38;r78=16440;r79=14;r80=r74;while(1){r81=r79-1|0;r82=HEAP8[r78];if(!((r81|0)!=0&r82<<24>>24!=0&r80<<24>>24==r82<<24>>24)){r75=r78;r76=r80;break L98}r82=r77+1|0;r83=r78+1|0;r84=HEAP8[r82];if(r84<<24>>24==0){r75=r83;r76=0;break}else{r77=r82;r78=r83;r79=r81;r80=r84}}}}while(0);if(r76<<24>>24==(HEAP8[r75]|0)){r85=_atoi(r57)}else{r85=r69}L106:do{if(r72){r86=16168;r87=0}else{r80=r38;r79=16168;r78=14;r77=r74;while(1){r84=r78-1|0;r81=HEAP8[r79];if(!((r84|0)!=0&r81<<24>>24!=0&r77<<24>>24==r81<<24>>24)){r86=r79;r87=r77;break L106}r81=r80+1|0;r83=r79+1|0;r82=HEAP8[r81];if(r82<<24>>24==0){r86=r83;r87=0;break}else{r80=r81;r79=r83;r78=r84;r77=r82}}}}while(0);if(r87<<24>>24==(HEAP8[r86]|0)){r88=_atoi(r57)}else{r88=r70}L114:do{if(r72){r89=15960;r90=0}else{r77=r38;r78=15960;r79=12;r80=r74;while(1){r82=r79-1|0;r84=HEAP8[r78];if(!((r82|0)!=0&r84<<24>>24!=0&r80<<24>>24==r84<<24>>24)){r89=r78;r90=r80;break L114}r84=r77+1|0;r83=r78+1|0;r81=HEAP8[r84];if(r81<<24>>24==0){r89=r83;r90=0;break}else{r77=r84;r78=r83;r79=r82;r80=r81}}}}while(0);if(r90<<24>>24==(HEAP8[r89]|0)){r91=_atoi(r61)}else{r91=r71}L122:do{if(r72){r92=15720;r93=0}else{r80=r38;r79=15720;r78=14;r77=r74;while(1){r81=r78-1|0;r82=HEAP8[r79];if(!((r81|0)!=0&r82<<24>>24!=0&r77<<24>>24==r82<<24>>24)){r92=r79;r93=r77;break L122}r82=r80+1|0;r83=r79+1|0;r84=HEAP8[r82];if(r84<<24>>24==0){r92=r83;r93=0;break}else{r80=r82;r79=r83;r78=r81;r77=r84}}}}while(0);if(r93<<24>>24==(HEAP8[r92]|0)){r94=_atoi(r57)}else{r94=r68}L130:do{if(r72){r95=15544;r96=0}else{r77=r38;r78=15544;r79=13;r80=r74;while(1){r84=r79-1|0;r81=HEAP8[r78];if(!((r84|0)!=0&r81<<24>>24!=0&r80<<24>>24==r81<<24>>24)){r95=r78;r96=r80;break L130}r81=r77+1|0;r83=r78+1|0;r82=HEAP8[r81];if(r82<<24>>24==0){r95=r83;r96=0;break}else{r77=r81;r78=r83;r79=r84;r80=r82}}}}while(0);if(r96<<24>>24==(HEAP8[r95]|0)){break}else{r68=r94;r69=r85;r70=r88;r71=r91}}r60=r94;r64=r85;r65=r88;r66=r91;r67=_atoi(r63)}if(r2==66){r63=___errno_location();r66=HEAP32[r63>>2];r63=_malloc(47);_memcpy(r63,16768,42)|0;r65=r63+_strlen(r63)|0;HEAP8[r65]=HEAP8[6400];HEAP8[r65+1|0]=HEAP8[6401];HEAP8[r65+2|0]=HEAP8[6402];HEAP8[r65+3|0]=HEAP8[6403];HEAP8[r65+4|0]=HEAP8[6404];HEAP8[r65+5|0]=HEAP8[6405];r65=_strerror(r66);_err_msg(4,40960,947,r63,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r41,HEAP32[r3+8>>2]=r65,r3));STACKTOP=r3;_free(r63);break}else if(r2==70){HEAP32[r24>>2]=r71;HEAP32[r23>>2]=r70;r63=(r68|0)==0;if(r63){if((_fread(r42,4,1,r55)|0)!=1){r65=___errno_location();r66=HEAP32[r65>>2];r65=_malloc(23);_memcpy(r65,15328,18)|0;r64=r65+_strlen(r65)|0;HEAP8[r64]=HEAP8[6400];HEAP8[r64+1|0]=HEAP8[6401];HEAP8[r64+2|0]=HEAP8[6402];HEAP8[r64+3|0]=HEAP8[6403];HEAP8[r64+4|0]=HEAP8[6404];HEAP8[r64+5|0]=HEAP8[6405];r64=_strerror(r66);_err_msg(4,40960,981,r65,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r64,r3));STACKTOP=r3;_free(r65);break}if(!r56){r65=_llvm_bswap_i32(HEAP32[r23>>2]);HEAP32[r23>>2]=r65}if((_fread(r43,4,1,r55)|0)!=1){r65=___errno_location();r64=HEAP32[r65>>2];r65=_malloc(26);_memcpy(r65,14656,21)|0;r66=r65+_strlen(r65)|0;HEAP8[r66]=HEAP8[6400];HEAP8[r66+1|0]=HEAP8[6401];HEAP8[r66+2|0]=HEAP8[6402];HEAP8[r66+3|0]=HEAP8[6403];HEAP8[r66+4|0]=HEAP8[6404];HEAP8[r66+5|0]=HEAP8[6405];r66=_strerror(r64);_err_msg(4,40960,986,r65,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r66,r3));STACKTOP=r3;_free(r65);break}r65=HEAP32[r24>>2];if(r56){r97=r65}else{r66=_llvm_bswap_i32(r65);HEAP32[r24>>2]=r66;r97=r66}r66=HEAP32[r23>>2];_err_msg(1,40960,990,14296,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r66,HEAP32[r3+8>>2]=r97,r3));STACKTOP=r3;r98=r97;r99=r66}else{r98=r71;r99=r70}r66=HEAP16[r40>>1]|0;if((r69|0)!=(r66|0)){_err_msg(4,40960,995,14e3,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r69,HEAP32[r3+8>>2]=r66,r3));STACKTOP=r3;break}r66=HEAP16[r39>>1]|0;if((r70|0)!=(r66|0)){_err_msg(4,40960,1e3,13792,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r70,HEAP32[r3+8>>2]=r66,r3));STACKTOP=r3;break}r66=HEAP32[r53>>2];if((r71|0)!=(r66|0)){_err_msg(4,40960,1005,13536,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r71,HEAP32[r3+8>>2]=r66,r3));STACKTOP=r3;break}do{if(r63){r100=0}else{if((r68-15|0)>>>0<2){r100=16;break}_err_msg(4,40960,1010,13416,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break L63}}while(0);if(!((r67|0)==8|(r67|0)==4)){_err_msg(4,40960,1017,13216,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break}do{if((r54|0)==0){r63=_ftell(r55);if((r100|0)==0){r101=r63;break}r56=___ckd_calloc__(1,r100,40960,1038);HEAP32[r29+36>>2]=r56;if((_fread(r56,1,r100,r55)|0)==(r100|0)){r101=r63;break}_err_msg(4,40960,1040,12760,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r100,r3));STACKTOP=r3;break L63}else{_err_msg(1,40960,1022,12904,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r63=_ftell(r55);r56=_mmio_file_read(r41);HEAP32[r29+32>>2]=r56;if((r100|0)==0){r101=r63;break}HEAP32[r29+36>>2]=HEAP32[r56>>2]+r63;r101=r63+r100|0}}while(0);r63=r29+32|0;L177:do{if((HEAP32[r63>>2]|0)==0){r56=___ckd_calloc_3d__(r69,r70,r71,1,40960,1060);r66=r29+28|0;HEAP32[r66>>2]=r56;r56=(r67|0)==4;r65=(r98+1|0)/2&-1;r64=0;L179:while(1){HEAP32[r22>>2]=r64;if((r64|0)>=(r69|0)){break L177}r102=r56?r65:r98;r60=0;while(1){if((r60|0)>=(r99|0)){break}if((_fread(HEAP32[HEAP32[HEAP32[r66>>2]+(r64<<2)>>2]+(r60<<2)>>2],1,r102,r55)|0)!=(r102|0)){break L179}r60=r60+1|0}r64=r64+1|0}_err_msg(4,40960,1069,12760,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r102,r3));STACKTOP=r3;break L63}else{r64=___ckd_calloc_2d__(HEAP16[r40>>1]|0,r70,4,40960,1048);r66=r29+28|0;HEAP32[r66>>2]=r64;r64=(r67|0)==4;r65=(r98+1|0)/2&-1;r56=0;r60=r101;while(1){HEAP32[r22>>2]=r56;if((r56|0)>=(r69|0)){break L177}r57=r64?r65:r98;r61=0;r74=r60;while(1){if((r61|0)>=(r99|0)){break}HEAP32[HEAP32[HEAP32[r66>>2]+(r56<<2)>>2]+(r61<<2)>>2]=HEAP32[HEAP32[r63>>2]>>2]+r74;r61=r61+1|0;r74=r74+r57|0}r56=r56+1|0;r60=r74}}}while(0);_fclose(r55);break L52}else if(r2==72){r63=___errno_location();r67=HEAP32[r63>>2];r63=_malloc(24);_memcpy(r63,17304,19)|0;r60=r63+_strlen(r63)|0;HEAP8[r60]=HEAP8[6400];HEAP8[r60+1|0]=HEAP8[6401];HEAP8[r60+2|0]=HEAP8[6402];HEAP8[r60+3|0]=HEAP8[6403];HEAP8[r60+4|0]=HEAP8[6404];HEAP8[r60+5|0]=HEAP8[6405];r60=_strerror(r67);_err_msg(4,40960,954,r63,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r60,r3));STACKTOP=r3;_free(r63);break}}else{r63=___errno_location();r60=HEAP32[r63>>2];r63=_malloc(39);_memcpy(r63,20576,34)|0;r67=r63+_strlen(r63)|0;HEAP8[r67]=HEAP8[6400];HEAP8[r67+1|0]=HEAP8[6401];HEAP8[r67+2|0]=HEAP8[6402];HEAP8[r67+3|0]=HEAP8[6403];HEAP8[r67+4|0]=HEAP8[6404];HEAP8[r67+5|0]=HEAP8[6405];r67=_strerror(r60);_err_msg(4,40960,906,r63,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r41,HEAP32[r3+8>>2]=r67,r3));STACKTOP=r3;_free(r63)}}while(0);_fclose(r55);break L7}}while(0);do{if(r2==142){do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],8184,r19)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=8184,r3));STACKTOP=r3;r103=0}else{r35=HEAP32[r19>>2];if((r35|0)==0){r103=0;break}r103=HEAP32[r35>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],6760,r18)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=6760,r3));STACKTOP=r3;r104=0}else{r55=HEAP32[r18>>2];if((r55|0)==0){r104=0;break}r104=HEAPF64[r55>>3]}}while(0);r55=r14;r35=r15;r41=r16;r53=r17;_err_msg(1,40960,1098,36904,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;r43=_fopen(r103,45688);if((r43|0)==0){r42=___errno_location();r38=HEAP32[r42>>2];r42=_malloc(58);_memcpy(r42,34832,53)|0;r45=r42+_strlen(r42)|0;HEAP8[r45]=HEAP8[6400];HEAP8[r45+1|0]=HEAP8[6401];HEAP8[r45+2|0]=HEAP8[6402];HEAP8[r45+3|0]=HEAP8[6403];HEAP8[r45+4|0]=HEAP8[6404];HEAP8[r45+5|0]=HEAP8[6405];r45=_strerror(r38);_err_msg(5,40960,1101,r42,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r103,HEAP32[r3+8>>2]=r45,r3));STACKTOP=r3;_free(r42);_exit(r38)}if((_bio_readhdr(r43,r9,r10,r12)|0)<0){_err_msg(5,40960,1105,8144,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}r38=HEAP32[r9>>2];r42=0;r45=0;while(1){r52=HEAP32[r38+(r42<<2)>>2];if((r52|0)==0){break}r51=HEAP8[r52];do{if(r51<<24>>24==99){r105=r52;r106=46256;r2=164}else if(r51<<24>>24==118){r50=r52;r63=45992;while(1){r67=r50+1|0;r60=r63+1|0;r107=HEAP8[r67];r108=HEAP8[r60];if(r107<<24>>24!=r108<<24>>24|r107<<24>>24==0|r108<<24>>24==0){break}else{r50=r67;r63=r60}}if(r107<<24>>24!=r108<<24>>24){if(r51<<24>>24==99){r105=r52;r106=46256;r2=164;break}else{r109=r45;break}}r63=HEAP32[HEAP32[r10>>2]+(r42<<2)>>2];if((HEAP8[r63]|0)==49){r50=r63;r60=49488;while(1){r67=r50+1|0;r56=r60+1|0;r110=HEAP8[r67];r111=HEAP8[r56];if(r110<<24>>24!=r111<<24>>24|r110<<24>>24==0|r111<<24>>24==0){break}else{r50=r67;r60=r56}}if(r110<<24>>24==r111<<24>>24){r109=r45;break}}_err_msg(3,40960,1113,47984,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r103,HEAP32[r3+8>>2]=r63,HEAP32[r3+16>>2]=49488,r3));STACKTOP=r3;r109=r45}else{r109=r45}}while(0);if(r2==164){while(1){r2=0;r52=r105+1|0;r51=r106+1|0;r112=HEAP8[r52];r113=HEAP8[r51];if(r112<<24>>24!=r113<<24>>24|r112<<24>>24==0|r113<<24>>24==0){break}else{r105=r52;r106=r51;r2=164}}r109=r112<<24>>24==r113<<24>>24?1:r45}r42=r42+1|0;r45=r109}_bio_hdrarg_free(r38,HEAP32[r10>>2]);HEAP32[r10>>2]=0;HEAP32[r9>>2]=0;HEAP32[r13>>2]=0;r51=HEAP32[r12>>2];if((_bio_fread(r35,4,1,r43,r51,r13)|0)!=1){_err_msg(5,40960,1131,27856,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}if((_bio_fread(r41,4,1,r43,r51,r13)|0)!=1){_err_msg(5,40960,1131,27856,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}if((_bio_fread(r53,4,1,r43,r51,r13)|0)!=1){_err_msg(5,40960,1131,27856,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}if((_bio_fread(r55,4,1,r43,r51,r13)|0)!=1){_err_msg(5,40960,1131,27856,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}r52=HEAP32[r16>>2];r60=HEAP16[r40>>1]|0;if((r52|0)!=(r60|0)){_err_msg(5,40960,1134,26704,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r52,HEAP32[r3+8>>2]=r60,r3));STACKTOP=r3;_exit(1)}r60=HEAP32[r15>>2];r50=Math_imul(r60,r52)|0;r56=HEAP32[r17>>2];if((HEAP32[r14>>2]|0)!=(Math_imul(r50,r56)|0)){_err_msg(5,40960,1138,25776,(r3=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r3>>2]=r103,HEAP32[r3+8>>2]=r42,HEAP32[r3+16>>2]=r60,HEAP32[r3+24>>2]=r52,HEAP32[r3+32>>2]=r56,r3));STACKTOP=r3;_exit(1)}HEAP32[r29+48>>2]=r60;r50=___ckd_calloc_3d__(r52,HEAP16[r39>>1]|0,r60,1,40960,1147);r67=r29+28|0;HEAP32[r67>>2]=r50;r50=___ckd_calloc__(r56,4,40960,1150);r66=r50;r65=r104;r64=0;r57=0;L256:while(1){if((r64|0)<(r60|0)){r114=0;r115=r57}else{break}while(1){if((r114|0)>=(r52|0)){break}if((_bio_fread(r50,4,r56,r43,r51,r13)|0)!=(r56|0)){r2=180;break L256}r61=_vector_sum_norm(r66,r56)>0;r72=r61?r115:r115+1|0;r61=0;while(1){if((r61|0)>=(r56|0)){break}r80=r66+(r61<<2)|0;if(HEAPF32[r80>>2]<r104){HEAPF32[r80>>2]=r65}r61=r61+1|0}_vector_sum_norm(r66,r56);r61=0;while(1){if((r61|0)>=(r56|0)){break}r63=HEAP32[r30>>2];r80=HEAPF32[r66+(r61<<2)>>2];if(r80>0){r79=Math_log(r80);r116=(r79*HEAPF64[r63+48>>3]&-1)>>HEAP8[r63+9|0]}else{r116=HEAP32[r63+64>>2]}r63=-r116|0;if((r63|0)>159){r2=193}else{if((r116|0)>0){r2=193}else{r117=r63&255}}if(r2==193){r2=0;r117=-97}HEAP8[HEAP32[HEAP32[HEAP32[r67>>2]+(r114<<2)>>2]+(r61<<2)>>2]+r64|0]=r117;r61=r61+1|0}r114=r114+1|0;r115=r72}r64=r64+1|0;r57=r115}if(r2==180){_err_msg(5,40960,1158,24664,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}if((r57|0)>0){_err_msg(3,40960,1179,23160,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r57,r3));STACKTOP=r3}_free(r50);if((r45|0)!=0){_bio_verify_chksum(r43,r51,HEAP32[r13>>2])}if((_fread(r11,1,1,r43)|0)==1){_err_msg(5,40960,1187,22384,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r103,r3));STACKTOP=r3;_exit(1)}else{_fclose(r43);_err_msg(1,40960,1191,21992,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r60,HEAP32[r3+8>>2]=r52,HEAP32[r3+16>>2]=r56,r3));STACKTOP=r3;if((r60|0)<0){break L7}else{break}}}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],49496,r8)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=49496,r3));STACKTOP=r3;r118=0}else{r39=HEAP32[r8>>2];if((r39|0)==0){r118=0;break}r118=HEAP32[r39>>2]&65535}}while(0);HEAP16[r29+58>>1]=r118;r39=___ckd_calloc__(HEAP16[r40>>1]|0,1,40960,1293);r64=r29+52|0;HEAP32[r64>>2]=r39;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],48024,r7)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=48024,r3));STACKTOP=r3;r119=0}else{r39=HEAP32[r7>>2];if((r39|0)==0){r119=0;break}r119=HEAP32[r39>>2]&65535}}while(0);r39=r29+56|0;HEAP16[r39>>1]=r119;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],46264,r6)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=46264,r3));STACKTOP=r3;r120=0}else{r67=HEAP32[r6>>2];if((r67|0)==0){r120=0;break}r120=HEAP32[r67>>2]}}while(0);r67=HEAP32[r64>>2];r66=HEAP16[r40>>1]|0;r65=___ckd_salloc__(r120,40960,1199);r42=r65;r55=0;r53=0;while(1){if((r55|0)>=(r66|0)){r2=218;break}r41=_strchr(r42,44);if((r41|0)==0){r2=221;break}HEAP8[r41]=0;r35=_atoi(r42);HEAP8[r67+r55|0]=r35;r38=r35&255;r42=r41+1|0;r55=r55+1|0;r53=(r38|0)>(r53|0)?r38:r53}do{if(r2==218){r121=r55;r122=r53&255}else if(r2==221){if((HEAP8[r42]|0)==0){r121=r55;r122=r53&255;break}r38=_atoi(r42);HEAP8[r67+r55|0]=r38;r121=r55+1|0;r122=(r38&255|0)>(r53|0)?r38&255:r53&255}}while(0);r53=r121;while(1){if((r53|0)>=(r66|0)){break}HEAP8[r67+r53|0]=r122;r53=r53+1|0}_free(r65);_err_msg(1,40960,1296,44688,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP16[r39>>1]|0,r3));STACKTOP=r3;_err_msg(2,0,0,43176,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r53=0;while(1){if((r53|0)>=(HEAP16[r40>>1]|0)){break}_err_msg(2,0,0,42120,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAPU8[HEAP32[r64>>2]+r53|0],r3));STACKTOP=r3;r53=r53+1|0}_err_msg(2,0,0,16600,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;do{if((_hash_table_lookup(HEAP32[HEAP32[r33>>2]+4>>2],39472,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=39472,r3));STACKTOP=r3;r123=2}else{r53=HEAP32[r5>>2];if((r53|0)==0){r123=2;break}r123=HEAP32[r53>>2]+2|0}}while(0);r33=r29+72|0;HEAP32[r33>>2]=r123;r53=___ckd_calloc_3d__(r123,HEAP16[r40>>1]|0,HEAP16[r39>>1]|0,8,40960,1307);r64=r29+60|0;HEAP32[r64>>2]=r53;r53=___ckd_calloc_2d__(HEAP32[r33>>2],HEAP16[r40>>1]|0,1,40960,1309);HEAP32[r29+64>>2]=r53;r53=0;while(1){if((r53|0)<(HEAP32[r33>>2]|0)){r124=0}else{break}while(1){if((r124|0)<(HEAP16[r40>>1]|0)){r125=0}else{break}while(1){if((r125|0)>=(HEAP16[r39>>1]|0)){break}HEAP32[HEAP32[HEAP32[HEAP32[r64>>2]+(r53<<2)>>2]+(r124<<2)>>2]+(r125<<3)>>2]=-2147483648;HEAP32[HEAP32[HEAP32[HEAP32[r64>>2]+(r53<<2)>>2]+(r124<<2)>>2]+(r125<<3)+4>>2]=r125;r125=r125+1|0}r124=r124+1|0}r53=r53+1|0}HEAP32[r29>>2]=4312;r126=r29;STACKTOP=r4;return r126}}while(0);_s2_semi_mgau_free(r29);r126=0;STACKTOP=r4;return r126}function _s2_semi_mgau_free(r1){var r2,r3,r4,r5,r6,r7;r2=HEAP32[r1+80>>2];do{if((r2|0)!=0){r3=r2+12|0;r4=HEAP32[r3>>2]-1|0;HEAP32[r3>>2]=r4;if((r4|0)>0){break}r4=HEAP32[r2+16>>2];if((r4|0)==0){_free(HEAP32[r2>>2])}else{_mmio_file_unmap(r4)}_free(r2)}}while(0);r2=HEAP32[r1+76>>2];do{if((r2|0)!=0){r4=r2+12|0;r3=HEAP32[r4>>2]-1|0;HEAP32[r4>>2]=r3;if((r3|0)>0){break}r3=HEAP32[r2+16>>2];if((r3|0)==0){_free(HEAP32[r2>>2])}else{_mmio_file_unmap(r3)}_free(r2)}}while(0);r2=r1+32|0;r3=HEAP32[r1+28>>2];r4=(r3|0)==0;do{if((HEAP32[r2>>2]|0)==0){if(!r4){r5=HEAP32[r3>>2];if((r5|0)!=0){_free(HEAP32[r5>>2])}_free(HEAP32[r3>>2])}_free(r3);r5=HEAP32[r1+36>>2];if((r5|0)==0){break}_free(r5)}else{if(!r4){_free(HEAP32[r3>>2])}_free(r3);_mmio_file_unmap(HEAP32[r2>>2])}}while(0);_gauden_free(HEAP32[r1+12>>2]);_free(HEAP32[r1+52>>2]);r2=HEAP32[r1+64>>2];if((r2|0)!=0){_free(HEAP32[r2>>2])}_free(r2);r2=HEAP32[r1+60>>2];if((r2|0)==0){r6=r2;_free(r6);r7=r1;_free(r7);return}r3=HEAP32[r2>>2];if((r3|0)!=0){_free(HEAP32[r3>>2])}_free(HEAP32[r2>>2]);r6=r2;_free(r6);r7=r1;_free(r7);return}function _s2_semi_mgau_mllr_transform(r1,r2){_gauden_mllr_transform(HEAP32[r1+12>>2],r2,HEAP32[r1+8>>2]);return 0}function _vector_sum_norm(r1,r2){var r3,r4,r5,r6;r3=0;r4=0;while(1){if((r3|0)>=(r2|0)){break}r5=r4+HEAPF32[r1+(r3<<2)>>2];r3=r3+1|0;r4=r5}if(r4==0){return r4}r3=1/r4;r5=0;while(1){if((r5|0)>=(r2|0)){break}r6=r1+(r5<<2)|0;HEAPF32[r6>>2]=HEAPF32[r6>>2]*r3;r5=r5+1|0}return r4}function _kws_search_free(r1){var r2,r3,r4,r5;_dict_free(HEAP32[r1+16>>2]);_dict2pid_free(HEAP32[r1+20>>2]);_free(HEAP32[r1+24>>2]);_ps_lattice_free(HEAP32[r1+28>>2]);r2=HEAP32[r1+56>>2];if((r2|0)!=0){_free(HEAP32[r2+16>>2]);_free(r2)}r2=HEAP32[r1+60>>2];r3=HEAP32[r2>>2];if((r3|0)!=0){r4=r3;while(1){if((r4|0)==0){break}_free(HEAP32[r4>>2]);r4=HEAP32[r4+8>>2]}HEAP32[r2>>2]=0}_free(HEAP32[r1+96>>2]);r2=r1+68|0;r4=r1+64|0;r3=0;while(1){r5=HEAP32[r4>>2];if((r3|0)>=(HEAP32[r2>>2]|0)){break}_free(HEAP32[r5+(r3<<4)+8>>2]);_free(HEAP32[HEAP32[r4>>2]+(r3<<4)>>2]);r3=r3+1|0}_free(r5);_free(r1);return}function _kws_search_reinit(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34;r4=r1+12|0;r5=HEAP32[HEAP32[r4>>2]+20>>2];r6=HEAP16[r5+40>>1]|0;_ps_search_base_reinit(r1,r2,r3);r7=r1+56|0;r8=r7;r9=HEAP32[r8>>2];if((r9|0)!=0){_free(HEAP32[r9+16>>2]);_free(r9)}r9=HEAP32[r4>>2];r10=HEAP32[r9+20>>2];r11=_hmm_context_init(HEAP32[r10+12>>2],HEAP32[HEAP32[r9+24>>2]>>2],HEAP32[r10+60>>2]);HEAP32[r7>>2]=r11;if((r11|0)==0){r12=-1;return r12}r11=r1+96|0;r7=r11;r10=HEAP32[r7>>2];r9=r1+92|0;if((r10|0)==0){r13=r9}else{r14=HEAP32[r9>>2];r15=0;while(1){if((r15|0)>=(r14|0)){break}r15=r15+1|0}_free(r10);r13=r9}r9=HEAP32[HEAP32[HEAP32[r4>>2]+20>>2]+4>>2];HEAP32[r13>>2]=r9;r10=___ckd_calloc__(r9,80,39568,493);HEAP32[r11>>2]=r10;r10=0;while(1){if((r10|0)>=(HEAP32[r13>>2]|0)){break}r11=HEAP32[HEAP32[HEAP32[r4>>2]+20>>2]+56>>2];r9=r11+(r10*12&-1)|0;r15=r11+(r10*12&-1)+4|0;_hmm_init(HEAP32[r8>>2],HEAP32[r7>>2]+(r10*80&-1)|0,0,HEAPU8[r9]|HEAPU8[r9+1|0]<<8|HEAPU8[r9+2|0]<<16|HEAPU8[r9+3|0]<<24|0,HEAPU8[r15]|HEAPU8[r15+1|0]<<8|HEAPU8[r15+2|0]<<16|HEAPU8[r15+3|0]<<24|0);r10=r10+1|0}r10=r1+68|0;r7=r1+64|0;r1=r2+8|0;r4=r3+12|0;r13=r5+56|0;r5=r3+16|0;r15=r3+4|0;r9=r3+8|0;r3=0;while(1){if((r3|0)>=(HEAP32[r10>>2]|0)){r12=0;break}r11=HEAP32[r7>>2];r14=___ckd_salloc__(HEAP32[r11+(r3<<4)>>2],39568,505);r16=_str2words(r14,0,0);r17=___ckd_calloc__(r16,4,39568,507);r18=r17;_str2words(r14,r18,r16);r19=0;r20=0;while(1){if((r19|0)>=(r16|0)){break}r21=_dict_wordid(r2,HEAP32[r18+(r19<<2)>>2]);r19=r19+1|0;r20=r20+HEAP32[HEAP32[r1>>2]+(r21*20&-1)+8>>2]|0}r19=r11+(r3<<4)+8|0;r21=HEAP32[r19>>2];if((r21|0)!=0){_free(r21)}r21=___ckd_calloc__(r20,80,39568,521);HEAP32[r19>>2]=r21;HEAP32[r11+(r3<<4)+12>>2]=r20;r21=0;r22=0;while(1){if((r21|0)>=(r16|0)){break}r23=_dict_wordid(r2,HEAP32[r18+(r21<<2)>>2]);r24=HEAP32[HEAP32[r1>>2]+(r23*20&-1)+8>>2];r25=(r24|0)>1;r26=r24-1|0;r27=0;r28=r22;while(1){if((r27|0)>=(r24|0)){break}r29=HEAP32[HEAP32[r1>>2]+(r23*20&-1)+4>>2];r30=HEAP16[r29+(r27<<1)>>1]|0;do{if((r27|0)==0){if(r25){r31=HEAP16[r29+2>>1]|0}else{r31=r6}r32=HEAP16[HEAP32[HEAP32[HEAP32[r4>>2]+(r30<<2)>>2]+(r31<<2)>>2]+(r6<<1)>>1]}else{if((r27|0)==(r26|0)){r33=HEAP16[r29+(r24-2<<1)>>1]|0;r34=HEAP32[HEAP32[r5>>2]+(r30<<2)>>2];r32=HEAP16[HEAP32[r34+(r33*12&-1)>>2]+(HEAP16[HEAP32[r34+(r33*12&-1)+4>>2]+(r6<<1)>>1]<<1)>>1];break}else{r32=_dict2pid_internal(HEAP32[r15>>2],HEAP32[r9>>2],r23,r27);break}}}while(0);r29=HEAP32[r13>>2]+(r30*12&-1)+4|0;_hmm_init(HEAP32[r8>>2],HEAP32[r19>>2]+(r28*80&-1)|0,0,r32&65535,HEAPU8[r29]|HEAPU8[r29+1|0]<<8|HEAPU8[r29+2|0]<<16|HEAPU8[r29+3|0]<<24|0);r27=r27+1|0;r28=r28+1|0}r21=r21+1|0;r22=r28}_free(r17);_free(r14);r3=r3+1|0}return r12}function _kws_search_start(r1){var r2,r3,r4,r5,r6,r7;HEAP32[r1+72>>2]=0;HEAP32[r1+84>>2]=0;r2=HEAP32[r1+60>>2];r3=HEAP32[r2>>2];if((r3|0)!=0){r4=r3;while(1){if((r4|0)==0){break}_free(HEAP32[r4>>2]);r4=HEAP32[r4+8>>2]}HEAP32[r2>>2]=0}r2=r1+92|0;r4=r1+96|0;r1=0;while(1){if((r1|0)>=(HEAP32[r2>>2]|0)){break}r3=HEAP32[r4>>2];HEAP32[r3+(r1*80&-1)+4>>2]=-536870912;r5=r3+(r1*80&-1)+24|0;HEAP32[r5>>2]=-1;r6=r3+(r1*80&-1)+77|0;r7=1;while(1){if((r7|0)>=(HEAPU8[r6]|0)){break}HEAP32[r3+(r1*80&-1)+4+(r7<<2)>>2]=-536870912;HEAP32[r3+(r1*80&-1)+24+(r7<<2)>>2]=-1;r7=r7+1|0}HEAP32[r3+(r1*80&-1)+44>>2]=-536870912;HEAP32[r3+(r1*80&-1)+48>>2]=-1;HEAP32[r3+(r1*80&-1)+64>>2]=-536870912;HEAP32[r3+(r1*80&-1)+4>>2]=0;HEAP32[r5>>2]=-1;HEAP32[r3+(r1*80&-1)+72>>2]=0;r1=r1+1|0}return 0}function _kws_search_step(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;HEAP32[r6>>2]=r2;r2=HEAP32[r1+12>>2];L1:do{if((HEAP8[r2+89|0]|0)==0){r7=r1+12|0;_memset(HEAP32[r2+40>>2],0,((HEAP32[HEAP32[r2+20>>2]+20>>2]+31|0)/32&-1)<<2)|0;HEAP32[r2+52>>2]=0;r8=r1+92|0;r9=r1+96|0;r10=0;while(1){if((r10|0)>=(HEAP32[r8>>2]|0)){break}_acmod_activate_hmm(HEAP32[r7>>2],HEAP32[r9>>2]+(r10*80&-1)|0);r10=r10+1|0}r10=r1+68|0;r11=r1+64|0;r12=0;while(1){if((r12|0)>=(HEAP32[r10>>2]|0)){r13=r8;r14=r9;break L1}r15=HEAP32[r11>>2];r16=r15+(r12<<4)+12|0;r17=r15+(r12<<4)+8|0;r15=0;while(1){if((r15|0)>=(HEAP32[r16>>2]|0)){break}r18=HEAP32[r17>>2];if((HEAP32[r18+(r15*80&-1)+72>>2]|0)>0){_acmod_activate_hmm(HEAP32[r7>>2],r18+(r15*80&-1)|0)}r15=r15+1|0}r12=r12+1|0}}else{r13=r1+92|0;r14=r1+96|0}}while(0);r12=_acmod_score(r2,r6);HEAP32[HEAP32[r1+56>>2]+8>>2]=r12;r12=0;r6=-536870912;while(1){if((r12|0)>=(HEAP32[r13>>2]|0)){break}r2=_hmm_vit_eval(HEAP32[r14>>2]+(r12*80&-1)|0);r12=r12+1|0;r6=(r2|0)>(r6|0)?r2:r6}r12=r1+68|0;r2=r1+64|0;r7=0;r11=r6;while(1){r19=HEAP32[r12>>2];if((r7|0)>=(r19|0)){break}r6=HEAP32[r2>>2];r9=r6+(r7<<4)+12|0;r8=r6+(r7<<4)+8|0;r6=0;r10=r11;while(1){if((r6|0)>=(HEAP32[r9>>2]|0)){break}r15=HEAP32[r8>>2];if((HEAP32[r15+(r6*80&-1)+72>>2]|0)>0){r17=_hmm_vit_eval(r15+(r6*80&-1)|0);r20=(r17|0)>(r10|0)?r17:r10}else{r20=r10}r6=r6+1|0;r10=r20}r7=r7+1|0;r11=r10}HEAP32[r1+84>>2]=r11;r7=r11+HEAP32[r1+76>>2]|0;r11=0;r20=r19;while(1){if((r11|0)>=(r20|0)){break}r19=HEAP32[r2>>2];r6=r19+(r11<<4)+12|0;r8=r19+(r11<<4)+8|0;r19=0;while(1){if((r19|0)>=(HEAP32[r6>>2]|0)){break}r9=HEAP32[r8>>2];do{if((HEAP32[r9+(r19*80&-1)+72>>2]|0)>0){if((HEAP32[r9+(r19*80&-1)+64>>2]|0)>=(r7|0)){break}HEAP32[r9+(r19*80&-1)+4>>2]=-536870912;HEAP32[r9+(r19*80&-1)+24>>2]=-1;r17=r9+(r19*80&-1)+77|0;r15=1;while(1){if((r15|0)>=(HEAPU8[r17]|0)){break}HEAP32[r9+(r19*80&-1)+4+(r15<<2)>>2]=-536870912;HEAP32[r9+(r19*80&-1)+24+(r15<<2)>>2]=-1;r15=r15+1|0}HEAP32[r9+(r19*80&-1)+44>>2]=-536870912;HEAP32[r9+(r19*80&-1)+48>>2]=-1;HEAP32[r9+(r19*80&-1)+64>>2]=-536870912;HEAP32[r9+(r19*80&-1)+72>>2]=-1}}while(0);r19=r19+1|0}r11=r11+1|0;r20=HEAP32[r12>>2]}r11=HEAP32[r13>>2];r7=0;r19=0;r8=-536870912;while(1){if((r7|0)>=(r11|0)){break}r6=HEAP32[r14>>2];r10=HEAP32[r6+(r7*80&-1)+44>>2];if((r10|0)>(r8|0)){r21=r6+(r7*80&-1)|0;r22=r10}else{r21=r19;r22=r8}r7=r7+1|0;r19=r21;r8=r22}if((r19|0)==0){r23=r1+72|0;r24=HEAP32[r23>>2];r25=r24+1|0;HEAP32[r23>>2]=r25;STACKTOP=r5;return 0}r22=r1+60|0;r8=r1+72|0;r21=0;r7=r19;r19=0;r11=r20;L61:while(1){if((r21|0)>=(r11|0)){break}r20=HEAP32[r2>>2];r10=r20;r6=r20+(r21<<4)|0;r9=HEAP32[r10+(r21<<4)+12>>2]-1|0;r15=HEAP32[r10+(r21<<4)+8>>2];r10=r15+(r9*80&-1)|0;do{if((HEAP32[r15+(r9*80&-1)+72>>2]|0)>0){r17=HEAP32[r7+44>>2];if((r17|0)<=-536870912){r26=r7;r27=r19;r28=r11;break}r16=HEAP32[r15+(r9*80&-1)+44>>2];r18=r16-r17|0;r17=HEAP32[r20+(r21<<4)+4>>2];if((r18|0)<(r17|0)){r26=r7;r27=r19;r28=r11;break}r29=HEAP32[r22>>2];r30=HEAP32[r6>>2];r31=HEAP32[r15+(r9*80&-1)+48>>2];r32=HEAP32[r8>>2];r33=_malloc(20);if((r33|0)==0){r3=52;break L61}if((HEAP32[r33-4>>2]&3|0)!=0){_memset(r33,0,20)|0}HEAP32[r33+4>>2]=r31;HEAP32[r33+8>>2]=r32;HEAP32[r33>>2]=r30;HEAP32[r33+12>>2]=r18-r17;HEAP32[r33+16>>2]=r16;if((HEAP32[r29>>2]|0)==0){r16=_glist_add_ptr(0,r33);HEAP32[r29>>2]=r16;HEAP32[r29+4>>2]=r16}else{r16=r29+4|0;r29=_glist_insert_ptr(HEAP32[r16>>2],r33);HEAP32[r16>>2]=r29}r26=r10;r27=1;r28=HEAP32[r12>>2]}else{r26=r7;r27=r19;r28=r11}}while(0);r21=r21+1|0;r7=r26;r19=r27;r11=r28}if(r3==52){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=20,HEAP32[r4+16>>2]=39312,HEAP32[r4+24>>2]=59,r4));STACKTOP=r4}L80:do{if(r19<<24>>24!=0){r4=0;r3=r11;while(1){if((r4|0)>=(r3|0)){break L80}r28=HEAP32[r2>>2];r27=r28+(r4<<4)+12|0;r26=r28+(r4<<4)+8|0;r28=0;while(1){if((r28|0)>=(HEAP32[r27>>2]|0)){break}r21=HEAP32[r26>>2];HEAP32[r21+(r28*80&-1)+4>>2]=-536870912;HEAP32[r21+(r28*80&-1)+24>>2]=-1;r22=r21+(r28*80&-1)+77|0;r10=1;while(1){if((r10|0)>=(HEAPU8[r22]|0)){break}HEAP32[r21+(r28*80&-1)+4+(r10<<2)>>2]=-536870912;HEAP32[r21+(r28*80&-1)+24+(r10<<2)>>2]=-1;r10=r10+1|0}HEAP32[r21+(r28*80&-1)+44>>2]=-536870912;HEAP32[r21+(r28*80&-1)+48>>2]=-1;HEAP32[r21+(r28*80&-1)+64>>2]=-536870912;HEAP32[r21+(r28*80&-1)+72>>2]=-1;r28=r28+1|0}r4=r4+1|0;r3=HEAP32[r12>>2]}}}while(0);r11=r7+44|0;r19=r1+80|0;r1=r7+48|0;r7=0;while(1){if((r7|0)>=(HEAP32[r13>>2]|0)){r34=0;break}r3=HEAP32[r11>>2]+HEAP32[r19>>2]|0;r4=HEAP32[r14>>2];r28=r4+(r7*80&-1)+4|0;if((r3|0)>(HEAP32[r28>>2]|0)){r26=HEAP32[r1>>2];r27=HEAP32[r8>>2]+1|0;HEAP32[r28>>2]=r3;HEAP32[r4+(r7*80&-1)+24>>2]=r26;HEAP32[r4+(r7*80&-1)+72>>2]=r27}r7=r7+1|0}while(1){if((r34|0)>=(HEAP32[r12>>2]|0)){r23=r8;break}r7=HEAP32[r2>>2];r1=r7+(r34<<4)+8|0;r14=HEAP32[r7+(r34<<4)+12>>2];while(1){r7=r14-1|0;if((r7|0)<=0){break}r19=r14-2|0;r13=HEAP32[r1>>2];r27=HEAP32[r13+(r19*80&-1)+44>>2];r4=r13+(r7*80&-1)+4|0;if((r27|0)<=(HEAP32[r4>>2]|0)){r14=r7;continue}r26=HEAP32[r13+(r19*80&-1)+48>>2];r19=HEAP32[r8>>2]+1|0;HEAP32[r4>>2]=r27;HEAP32[r13+(r7*80&-1)+24>>2]=r26;HEAP32[r13+(r7*80&-1)+72>>2]=r19;r14=r7}r14=HEAP32[r11>>2];r7=HEAP32[r1>>2];r19=r7+4|0;if((r14|0)>(HEAP32[r19>>2]|0)){r13=HEAP32[r8>>2];HEAP32[r19>>2]=r14;HEAP32[r7+24>>2]=r13;HEAP32[r7+72>>2]=r13+1}r34=r34+1|0}r24=HEAP32[r23>>2];r25=r24+1|0;HEAP32[r23>>2]=r25;STACKTOP=r5;return 0}function _kws_search_finish(r1){return 0}function _kws_search_hyp(r1,r2,r3){var r4,r5,r6,r7;if((r2|0)!=0){HEAP32[r2>>2]=0}r2=r1+24|0;r3=HEAP32[r2>>2];if((r3|0)!=0){_free(r3)}r3=HEAP32[r1+60>>2];r1=r3;r4=0;while(1){r5=HEAP32[r1>>2];if((r5|0)==0){break}r1=r5+8|0;r4=r4+(_strlen(HEAP32[HEAP32[r5>>2]>>2])+2)|0}if((r4|0)==0){r6=HEAP32[r2>>2];return r6}r1=___ckd_calloc__(r4,1,39312,89);HEAP32[r2>>2]=r1;r4=r3;r3=r1;while(1){r1=HEAP32[r4>>2];if((r1|0)==0){break}r5=HEAP32[HEAP32[r1>>2]>>2];_memcpy(r3,r5,_strlen(r5))|0;r7=_strlen(r5);HEAP8[r3+r7|0]=32;r4=r1+8|0;r3=r3+(r7+1)|0}HEAP8[r3-1|0]=0;r6=HEAP32[r2>>2];return r6}function _kws_search_lattice(r1){return 0}function _kws_search_prob(r1){return 0}function _kws_search_seg_iter(r1,r2){var r3,r4,r5,r6;r3=0;r4=STACKTOP;HEAP32[r2>>2]=0;r2=r1+60|0;if((HEAP32[HEAP32[r2>>2]>>2]|0)==0){r5=0;STACKTOP=r4;return r5}r6=_malloc(44);if((r6|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=44,HEAP32[r3+16>>2]=39568,HEAP32[r3+24>>2]=113,r3));STACKTOP=r3}if((HEAP32[r6-4>>2]&3|0)!=0){_memset(r6,0,44)|0}HEAP32[r6>>2]=4880;HEAP32[r6+4>>2]=r1;HEAPF32[r6+36>>2]=1;r1=HEAP32[HEAP32[r2>>2]>>2];HEAP32[r6+40>>2]=r1;r2=HEAP32[r1>>2];HEAP32[r6+8>>2]=HEAP32[r2>>2];HEAP32[r6+12>>2]=HEAP32[r2+4>>2];HEAP32[r6+16>>2]=HEAP32[r2+8>>2];HEAP32[r6+28>>2]=HEAP32[r2+12>>2];HEAP32[r6+20>>2]=HEAP32[r2+16>>2];HEAP32[r6+24>>2]=0;r5=r6;STACKTOP=r4;return r5}function _kws_seg_next(r1){var r2,r3,r4;r2=HEAP32[HEAP32[r1+40>>2]+8>>2];HEAP32[r1+40>>2]=r2;if((r2|0)==0){_free(r1);r3=0;return r3}else{r4=HEAP32[r2>>2];HEAP32[r1+8>>2]=HEAP32[r4>>2];HEAP32[r1+12>>2]=HEAP32[r4+4>>2];HEAP32[r1+16>>2]=HEAP32[r4+8>>2];HEAP32[r1+28>>2]=HEAP32[r4+12>>2];HEAP32[r1+20>>2]=HEAP32[r4+16>>2];HEAP32[r1+24>>2]=0;r3=r1;return r3}}function _kws_seg_free(r1){_free(r1);return}function _fe_init_auto_r(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+264|0;r5=r4;r6=r4+8;r7=r4+24;r8=r4+40;r9=r4+48;r10=r4+56;r11=r4+64;r12=r4+72;r13=r4+80;r14=r4+88;r15=r4+96;r16=r4+104;r17=r4+112;r18=r4+120;r19=r4+128;r20=r4+136;r21=r4+144;r22=r4+152;r23=r4+160;r24=r4+168;r25=r4+176;r26=r4+184;r27=r4+192;r28=r4+200;r29=r4+208;r30=r4+216;r31=r4+224;r32=r4+232;r33=r4+240;r34=r4+248;r35=r4+256;r36=_malloc(100);if((r36|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=100,HEAP32[r3+16>>2]=34176,HEAP32[r3+24>>2]=221,r3));STACKTOP=r3}if((HEAP32[r36-4>>2]&3|0)!=0){_memset(r36,0,100)|0}r37=r36;HEAP32[r36+4>>2]=1;r38=r1|0;HEAP32[r38>>2]=HEAP32[r38>>2]+1;HEAP32[r36>>2]=r1;r38=r1+4|0;do{if((_hash_table_lookup(HEAP32[r38>>2],39024,r35)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=39024,r3));STACKTOP=r3;r39=0}else{r1=HEAP32[r35>>2];if((r1|0)==0){r39=0;break}r39=HEAPF64[r1>>3]}}while(0);r35=r36+12|0;HEAPF32[r35>>2]=r39;do{if((_hash_table_lookup(HEAP32[r38>>2],47176,r34)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47176,r3));STACKTOP=r3;r40=0;r2=14}else{r39=HEAP32[r34>>2];if((r39|0)==0){r40=0;r2=14;break}r1=HEAP32[r39>>2];if((r1|0)<=32767){r40=r1;r2=14;break}r41=r1;r42=HEAPF32[r35>>2];r2=15}}while(0);L17:do{if(r2==14){r34=HEAPF32[r35>>2];if((r40|0)>r34|(r40|0)<1){r41=r40;r42=r34;r2=15;break}HEAP16[r36+16>>1]=r40;do{if((_hash_table_lookup(HEAP32[r38>>2],18320,r33)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=18320,r3));STACKTOP=r3}else{r34=HEAP32[r33>>2];if((r34|0)==0){break}if((HEAP32[r34>>2]|0)==0){break}HEAP8[r36+34|0]=1;do{if((_hash_table_lookup(HEAP32[r38>>2],15048,r32)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15048,r3));STACKTOP=r3;r43=0}else{r34=HEAP32[r32>>2];if((r34|0)==0){r43=0;break}r43=HEAP32[r34>>2]}}while(0);HEAP32[r36+44>>2]=r43}}while(0);do{if((_hash_table_lookup(HEAP32[r38>>2],9840,r31)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=9840,r3));STACKTOP=r3;r44=0}else{r34=HEAP32[r31>>2];if((r34|0)==0){r44=0;break}r44=HEAP32[r34>>2]}}while(0);r34=HEAP8[r44];if(r34<<24>>24==108){r1=12120;r39=r44;while(1){r45=r1+1|0;r46=r39+1|0;r47=HEAP8[r45];r48=HEAP8[r46];if(r47<<24>>24!=r48<<24>>24|r47<<24>>24==0|r48<<24>>24==0){r49=r47;r50=r48;break}else{r1=r45;r39=r46}}}else{r49=108;r50=r34}HEAP8[r36+33|0]=r49<<24>>24!=r50<<24>>24|0;do{if((_hash_table_lookup(HEAP32[r38>>2],8136,r30)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=8136,r3));STACKTOP=r3;r51=0}else{r39=HEAP32[r30>>2];if((r39|0)==0){r51=0;break}r51=HEAPF64[r39>>3]}}while(0);r34=r36+20|0;HEAPF32[r34>>2]=r51;do{if((_hash_table_lookup(HEAP32[r38>>2],6752,r29)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=6752,r3));STACKTOP=r3;r52=0}else{r39=HEAP32[r29>>2];if((r39|0)==0){r52=0;break}r52=HEAPF64[r39>>3]}}while(0);HEAPF32[r36+40>>2]=r52;do{if((_hash_table_lookup(HEAP32[r38>>2],49480,r28)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=49480,r3));STACKTOP=r3;r53=0}else{r39=HEAP32[r28>>2];if((r39|0)==0){r53=0;break}r53=HEAP32[r39>>2]&255}}while(0);HEAP8[r36+30|0]=r53;do{if((_hash_table_lookup(HEAP32[r38>>2],47976,r27)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47976,r3));STACKTOP=r3;r54=0}else{r39=HEAP32[r27>>2];if((r39|0)==0){r54=0;break}r54=HEAP32[r39>>2]&65535}}while(0);HEAP16[r36+26>>1]=r54;r39=r54<<16>>16;r1=r36+28|0;r46=r39;r45=0;while(1){HEAP8[r1]=r45;if((r46|0)<=1){break}if((r46&1|0)!=0|r54<<16>>16<1){r2=50;break}r46=r46>>1;r45=r45+1&255}if(r2==50){_err_msg(4,34176,103,46200,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r39,r3));STACKTOP=r3;break}r45=HEAPF32[r34>>2]*HEAPF32[r35>>2]&-1;if((r39|0)<(r45|0)){_err_msg(4,34176,110,44568,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r45,r3));STACKTOP=r3;break}do{if((_hash_table_lookup(HEAP32[r38>>2],43096,r26)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=43096,r3));STACKTOP=r3;r55=0}else{r45=HEAP32[r26>>2];if((r45|0)==0){r55=0;break}r55=HEAP32[r45>>2]&65535}}while(0);HEAP16[r36+8>>1]=r55;do{if((_hash_table_lookup(HEAP32[r38>>2],42e3,r25)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=42e3,r3));STACKTOP=r3;r56=0}else{r39=HEAP32[r25>>2];if((r39|0)==0){r56=0;break}r56=HEAP32[r39>>2]&65535}}while(0);HEAP16[r36+10>>1]=r56;do{if((_hash_table_lookup(HEAP32[r38>>2],40624,r24)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=40624,r3));STACKTOP=r3;r57=0}else{r39=HEAP32[r24>>2];if((r39|0)==0){r57=0;break}r57=(HEAP32[r39>>2]|0)!=0|0}}while(0);HEAP8[r36+31|0]=r57;do{if((_hash_table_lookup(HEAP32[r38>>2],39408,r23)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=39408,r3));STACKTOP=r3;r58=0}else{r39=HEAP32[r23>>2];if((r39|0)==0){r58=0;break}r58=(HEAP32[r39>>2]|0)!=0|0}}while(0);HEAP8[r36+36|0]=r58;do{if((_hash_table_lookup(HEAP32[r38>>2],38176,r22)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=38176,r3));STACKTOP=r3;r59=0}else{r39=HEAP32[r22>>2];if((r39|0)==0){r59=0;break}r59=(HEAP32[r39>>2]|0)!=0|0}}while(0);HEAP8[r36+37|0]=r59;do{if((_hash_table_lookup(HEAP32[r38>>2],36848,r21)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=36848,r3));STACKTOP=r3;r60=0}else{r39=HEAP32[r21>>2];if((r39|0)==0){r60=0;break}r60=HEAP32[r39>>2]}}while(0);do{if((HEAP8[r60]|0)==100){r39=r60;r34=35608;while(1){r45=r39+1|0;r46=r34+1|0;r61=HEAP8[r45];r62=HEAP8[r46];if(r61<<24>>24!=r62<<24>>24|r61<<24>>24==0|r62<<24>>24==0){break}else{r39=r45;r34=r46}}if(r61<<24>>24!=r62<<24>>24){r2=82;break}HEAP8[r36+35|0]=1}else{r2=82}}while(0);L105:do{if(r2==82){do{if((_hash_table_lookup(HEAP32[r38>>2],36848,r20)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=36848,r3));STACKTOP=r3;r63=0}else{r34=HEAP32[r20>>2];if((r34|0)==0){r63=0;break}r63=HEAP32[r34>>2]}}while(0);do{if((HEAP8[r63]|0)==108){r34=r63;r39=34784;while(1){r46=r34+1|0;r45=r39+1|0;r64=HEAP8[r46];r65=HEAP8[r45];if(r64<<24>>24!=r65<<24>>24|r64<<24>>24==0|r65<<24>>24==0){break}else{r34=r46;r39=r45}}if(r64<<24>>24!=r65<<24>>24){break}HEAP8[r36+35|0]=0;break L105}}while(0);do{if((_hash_table_lookup(HEAP32[r38>>2],36848,r19)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=36848,r3));STACKTOP=r3;r66=0}else{r39=HEAP32[r19>>2];if((r39|0)==0){r66=0;break}r66=HEAP32[r39>>2]}}while(0);do{if((HEAP8[r66]|0)==104){r39=r66;r34=33264;while(1){r45=r39+1|0;r46=r34+1|0;r67=HEAP8[r45];r68=HEAP8[r46];if(r67<<24>>24!=r68<<24>>24|r67<<24>>24==0|r68<<24>>24==0){break}else{r39=r45;r34=r46}}if(r67<<24>>24!=r68<<24>>24){break}HEAP8[r36+35|0]=2;break L105}}while(0);_err_msg(4,34176,128,31928,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break L17}}while(0);do{if((_hash_table_lookup(HEAP32[r38>>2],31064,r18)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=31064,r3));STACKTOP=r3}else{r34=HEAP32[r18>>2];if((r34|0)==0){break}if((HEAP32[r34>>2]|0)==0){break}HEAP8[r36+32|0]=1}}while(0);do{if((_hash_table_lookup(HEAP32[r38>>2],30256,r17)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=30256,r3));STACKTOP=r3}else{r34=HEAP32[r17>>2];if((r34|0)==0){break}if((HEAP32[r34>>2]|0)==0){break}HEAP8[r36+32|0]=2}}while(0);r34=HEAPF32[r35>>2];r39=r34/(HEAP16[r36+16>>1]|0)+.5&-1&65535;r46=r36+18|0;HEAP16[r46>>1]=r39;r45=HEAPF32[r36+20>>2]*r34+.5&-1&65535;r34=r36+24|0;HEAP16[r34>>1]=r45;r1=r36+98|0;HEAP16[r1>>1]=0;HEAP16[r36+48>>1]=0;if(r39<<16>>16<=1){___assert_fail(16416,34176,239,50992)}r39=r36+26|0;if(r45<<16>>16>(HEAP16[r39>>1]|0)){_err_msg(3,34176,244,16104,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r45<<16>>16,r3));STACKTOP=r3;_fe_free(r37);r69=0;STACKTOP=r4;return r69}r48=r36+34|0;if((HEAP8[r48]|0)==0){r70=r45}else{r45=HEAP32[r36+44>>2];L151:do{if((r45|0)<0){_err_msg(1,34176,312,15656,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r47=_time(0);HEAP32[65360>>2]=r47;r71=1;r72=r47;while(1){if((r71|0)>=624){r73=r71;break L151}r47=Math_imul(r72^r72>>>30,1812433253)+r71|0;HEAP32[65360+(r71<<2)>>2]=r47;r71=r71+1|0;r72=r47}}else{_err_msg(1,34176,320,15512,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r45,r3));STACKTOP=r3;HEAP32[65360>>2]=r45;r72=1;r71=r45;while(1){if((r72|0)>=624){r73=r72;break L151}r47=Math_imul(r71^r71>>>30,1812433253)+r72|0;HEAP32[65360+(r72<<2)>>2]=r47;r72=r72+1|0;r71=r47}}}while(0);HEAP32[4856>>2]=r73;r70=HEAP16[r34>>1]}r45=___ckd_calloc__(r70<<16>>16,2,34176,253);r71=r36+92|0;HEAP32[r71>>2]=r45;r45=___ckd_calloc__((HEAP16[r34>>1]|0)/2&-1,8,34176,254);HEAP32[r36+64>>2]=r45;r72=HEAP16[r34>>1];r47=(r72<<16>>16|0)/2&-1;r74=(r72<<16>>16)-1;r72=0;while(1){if((r72|0)>=(r47|0)){break}r75=.54-Math_cos((r72|0)*6.283185307179586/r74)*.46;HEAPF64[r45+(r72<<3)>>3]=r75;r72=r72+1|0}r72=_malloc(84);if((r72|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=84,HEAP32[r3+16>>2]=34176,HEAP32[r3+24>>2]=260,r3));STACKTOP=r3}if((HEAP32[r72-4>>2]&3|0)!=0){_memset(r72,0,84)|0}r45=r36+60|0;HEAP32[r45>>2]=r72;r74=r72;HEAPF32[r74>>2]=HEAPF32[r35>>2];HEAP32[r72+12>>2]=HEAP16[r39>>1]|0;r47=r36+30|0;HEAP32[r72+4>>2]=HEAPU8[r47];do{if((_hash_table_lookup(HEAP32[r38>>2],10744,r16)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=10744,r3));STACKTOP=r3;r76=0}else{r75=HEAP32[r16>>2];if((r75|0)==0){r76=0;break}r76=HEAP32[r75>>2]}}while(0);HEAP32[r72+8>>2]=r76;r75=r36+32|0;if((HEAP8[r75]|0)==0){HEAP8[r36+29|0]=HEAP8[r47]}else{HEAP8[r36+29|0]=r76}do{if((_hash_table_lookup(HEAP32[r38>>2],9640,r15)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=9640,r3));STACKTOP=r3;r77=0}else{r78=HEAP32[r15>>2];if((r78|0)==0){r77=0;break}r77=HEAPF64[r78>>3]}}while(0);HEAPF32[r72+20>>2]=r77;do{if((_hash_table_lookup(HEAP32[r38>>2],10304,r14)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=10304,r3));STACKTOP=r3;r79=0}else{r78=HEAP32[r14>>2];if((r78|0)==0){r79=0;break}r79=HEAPF64[r78>>3]}}while(0);HEAPF32[r72+16>>2]=r79;do{if((_hash_table_lookup(HEAP32[r38>>2],8e3,r13)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=8e3,r3));STACKTOP=r3;r80=0}else{r78=HEAP32[r13>>2];if((r78|0)==0){r80=0;break}r80=(HEAP32[r78>>2]|0)!=0|0}}while(0);HEAP32[r72+44>>2]=r80;do{if((_hash_table_lookup(HEAP32[r38>>2],6840,r12)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=6840,r3));STACKTOP=r3;r81=0}else{r78=HEAP32[r12>>2];if((r78|0)==0){r81=0;break}r81=HEAP32[r78>>2]}}while(0);r78=r72+48|0;HEAP32[r78>>2]=r81;do{if((_hash_table_lookup(HEAP32[r38>>2],6312,r11)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=6312,r3));STACKTOP=r3;r82=0}else{r83=HEAP32[r11>>2];if((r83|0)==0){r82=0;break}r82=HEAP32[r83>>2]}}while(0);r83=r72+52|0;HEAP32[r83>>2]=r82;do{if((_hash_table_lookup(HEAP32[r38>>2],7488,r10)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=7488,r3));STACKTOP=r3;r84=0}else{r85=HEAP32[r10>>2];if((r85|0)==0){r84=0;break}r84=HEAP32[r85>>2]}}while(0);HEAP32[r72+68>>2]=r84;do{if((_hash_table_lookup(HEAP32[r38>>2],9112,r9)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=9112,r3));STACKTOP=r3;r86=0}else{r85=HEAP32[r9>>2];if((r85|0)==0){r86=0;break}r86=(HEAP32[r85>>2]|0)!=0|0}}while(0);HEAP32[r72+76>>2]=r86;do{if((_hash_table_lookup(HEAP32[r38>>2],8792,r8)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=8792,r3));STACKTOP=r3;r87=0}else{r85=HEAP32[r8>>2];if((r85|0)==0){r87=0;break}r87=(HEAP32[r85>>2]|0)!=0|0}}while(0);HEAP32[r72+80>>2]=r87;r85=HEAP32[r78>>2];r88=0;while(1){if((r88|0)==3){r89=0;r2=176;break}r90=HEAP32[4840+(r88<<2)>>2];r91=HEAP8[r85];r92=HEAP8[r90];if(r91<<24>>24!=r92<<24>>24|r91<<24>>24==0|r92<<24>>24==0){r93=r91;r94=r92}else{r92=r85;r91=r90;while(1){r90=r92+1|0;r95=r91+1|0;r96=HEAP8[r90];r97=HEAP8[r95];if(r96<<24>>24!=r97<<24>>24|r96<<24>>24==0|r97<<24>>24==0){r93=r96;r94=r97;break}else{r92=r90;r91=r95}}}if(r93<<24>>24==r94<<24>>24){r2=175;break}r88=r88+1|0}do{if(r2==175){HEAP32[r72+56>>2]=r88;r98=r88;r2=186}else if(r2==176){while(1){r2=0;if((r89|0)==3){break}r78=HEAP32[49720+(r89<<2)>>2];r91=HEAP8[r85];r92=HEAP8[r78];if(r91<<24>>24!=r92<<24>>24|r91<<24>>24==0|r92<<24>>24==0){r99=r91;r100=r92}else{r92=r85;r91=r78;while(1){r78=r92+1|0;r95=r91+1|0;r90=HEAP8[r78];r97=HEAP8[r95];if(r90<<24>>24!=r97<<24>>24|r90<<24>>24==0|r97<<24>>24==0){r99=r90;r100=r97;break}else{r92=r78;r91=r95}}}if(r99<<24>>24==r100<<24>>24){r2=181;break}r89=r89+1|0;r2=176}if(r2==181){HEAP32[r72+56>>2]=r89;r98=r89;r2=186;break}_err_msg(4,37312,120,46832,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r85,r3));STACKTOP=r3;_err_msg(4,37312,121,33888,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r91=HEAP32[_stderr>>2];r92=0;while(1){if((r92|0)==3){break}_fprintf(r91,23704,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[4840+(r92<<2)>>2],r3));STACKTOP=r3;r92=r92+1|0}HEAP32[r72+56>>2]=-1;_err_msg(4,34176,166,48856,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3}}while(0);do{if(r2==186){if(r98>>>0<3){FUNCTION_TABLE[HEAP32[5616+(r98*28&-1)>>2]](HEAP32[r83>>2],HEAPF32[r74>>2]);break}if((r98|0)==-1){_err_msg(5,37312,141,18200,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}else{_err_msg(5,37312,146,14960,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r98,r3));STACKTOP=r3;_exit(1)}}}while(0);r74=HEAP32[r45>>2];r83=r74+8|0;r72=HEAP32[r83>>2]<<1;r85=_malloc(r72);if((r85|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r72,HEAP32[r3+8>>2]=37720,HEAP32[r3+16>>2]=561,r3));STACKTOP=r3}r72=r74+32|0;HEAP32[r72>>2]=r85;r85=HEAP32[r83>>2]<<1;r88=_malloc(r85);if((r88|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r85,HEAP32[r3+8>>2]=37720,HEAP32[r3+16>>2]=563,r3));STACKTOP=r3}r85=r74+36|0;HEAP32[r85>>2]=r88;r88=HEAP32[r83>>2]<<1;r92=_malloc(r88);if((r92|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r88,HEAP32[r3+8>>2]=37720,HEAP32[r3+16>>2]=565,r3));STACKTOP=r3}r88=r74+40|0;HEAP32[r88>>2]=r92;r92=_fe_mel(r74,HEAPF32[r74+16>>2]);r91=_fe_mel(r74,HEAPF32[r74+20>>2]);r95=(r91-r92)/(HEAP32[r83>>2]+1|0);r78=r74+44|0;do{if((HEAP32[r78>>2]|0)==0){r101=r92;r102=HEAPF32[r74>>2];r2=203}else{r97=r92-r95;r90=r91+r95;if(_fe_melinv(r74,r97)<0){r103=r74|0}else{r96=_fe_melinv(r74,r90);r104=r74|0;r105=HEAPF32[r104>>2];if(r96>r105*.5){r103=r104}else{r101=r97;r102=r105;r2=203;break}}r105=_fe_melinv(r74,r97);_err_msg(3,37720,581,46976,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r105,HEAPF64[r3+8>>3]=0,r3));STACKTOP=r3;r105=_fe_melinv(r74,r90);r90=HEAPF32[r103>>2]*.5;_err_msg(3,37720,584,34016,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r105,HEAPF64[r3+8>>3]=r90,r3));STACKTOP=r3}}while(0);L271:do{if(r2==203){r91=r74|0;r92=r74+12|0;r90=r102/(HEAP32[r92>>2]|0);r105=r74+80|0;r97=r6|0;r104=r6+8|0;r96=0;r106=0;while(1){if((r96|0)<(HEAP32[r83>>2]|0)){r107=0}else{break}while(1){if((r107|0)>=3){break}if((HEAP32[r78>>2]|0)==0){r108=_fe_melinv(r74,(r96+r107|0)*r95+r101);HEAPF32[r6+(r107<<2)>>2]=r108;r109=r108}else{r108=_fe_melinv(r74,(r96+(r107<<1)|0)*r95+r101);HEAPF32[r6+(r107<<2)>>2]=r108;r109=r108}if((HEAP32[r105>>2]|0)!=0){HEAPF32[r6+(r107<<2)>>2]=(r109/r90+.5&-1|0)*r90}r107=r107+1|0}HEAP16[HEAP32[r72>>2]+(r96<<1)>>1]=-1;r108=HEAPF32[r97>>2];r110=HEAPF32[r104>>2];r111=0;L286:while(1){r112=(HEAP32[r92>>2]|0)/2&-1;if((r111|0)>=(r112+1|0)){r113=r106;break}r114=(r111|0)*r90;do{if(r114>=r108){r115=HEAP32[r72>>2]+(r96<<1)|0;r116=HEAP16[r115>>1];if(r114>r110|(r111|0)==(r112|0)){r2=216;break L286}if(r116<<16>>16!=-1){break}HEAP16[r115>>1]=r111}}while(0);r111=r111+1|0}if(r2==216){r2=0;HEAP16[HEAP32[r88>>2]+(r96<<1)>>1]=r111-(r116&65535);HEAP16[HEAP32[r85>>2]+(r96<<1)>>1]=r106;r113=r106+HEAP16[HEAP32[r88>>2]+(r96<<1)>>1]|0}r96=r96+1|0;r106=r113}r96=r106<<2;r104=_malloc(r96);if((r104|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r96,HEAP32[r3+8>>2]=37720,HEAP32[r3+16>>2]=630,r3));STACKTOP=r3}r96=r74+28|0;HEAP32[r96>>2]=r104;r104=r7|0;r97=r7+8|0;r110=r7+4|0;r108=r74+76|0;r112=0;r114=0;L301:while(1){if((r112|0)<(HEAP32[r83>>2]|0)){r117=0}else{break L271}while(1){if((r117|0)>=3){break}if((HEAP32[r78>>2]|0)==0){r115=_fe_melinv(r74,(r112+r117|0)*r95+r101);HEAPF32[r7+(r117<<2)>>2]=r115;r118=r115}else{r115=_fe_melinv(r74,(r112+(r117<<1)|0)*r95+r101);HEAPF32[r7+(r117<<2)>>2]=r115;r118=r115}if((HEAP32[r105>>2]|0)!=0){HEAPF32[r7+(r117<<2)>>2]=(r118/r90+.5&-1|0)*r90}r117=r117+1|0}r119=HEAPF32[r104>>2];r120=HEAPF32[r97>>2];r111=HEAPF32[r110>>2];r115=r111-r119;r121=r120-r111;r111=2/(r120-r119);r122=0;r123=r114;while(1){if((r122|0)>=(HEAP16[HEAP32[r88>>2]+(r112<<1)>>1]|0)){break}r124=(HEAP16[HEAP32[r72>>2]+(r112<<1)>>1]+r122|0)*r90;if(r124<r119|r124>r120){break L301}r125=(r124-r119)/r115;r126=(r120-r124)/r121;if((HEAP32[r108>>2]|0)==0){r127=r125;r128=r126}else{r127=r125*r111;r128=r126*r111}r126=HEAP32[r96>>2]+(r123<<2)|0;if(r127<r128){HEAPF32[r126>>2]=r127}else{HEAPF32[r126>>2]=r128}r122=r122+1|0;r123=r123+1|0}r112=r112+1|0;r114=r123}r114=HEAP32[r92>>2];_err_msg(5,37720,657,23768,(r3=STACKTOP,STACKTOP=STACKTOP+40|0,HEAPF64[r3>>3]=HEAPF32[r91>>2],HEAP32[r3+8>>2]=r114,HEAPF64[r3+16>>3]=r120,HEAPF64[r3+24>>3]=r124,HEAPF64[r3+32>>3]=r119,r3));STACKTOP=r3;_exit(1)}}while(0);r72=HEAP32[r45>>2];r88=r72+4|0;r95=r72+8|0;r74=___ckd_calloc_2d__(HEAP32[r88>>2],HEAP32[r95>>2],4,37720,695);r78=r72+24|0;HEAP32[r78>>2]=r74;r74=HEAP32[r95>>2];r83=3.141592653589793/(r74|0);r85=0;r114=r74;while(1){r129=HEAP32[r88>>2];if((r85|0)>=(r129|0)){break}r74=r83*(r85|0);r112=0;r96=r114;while(1){if((r112|0)>=(r96|0)){break}r108=Math_cos(r74*((r112|0)+.5));HEAPF32[HEAP32[HEAP32[r78>>2]+(r85<<2)>>2]+(r112<<2)>>2]=r108;r112=r112+1|0;r96=HEAP32[r95>>2]}r85=r85+1|0;r114=r96}r85=r114|0;r95=Math_sqrt(1/r85);HEAPF32[r72+60>>2]=r95;r95=Math_sqrt(2/r85);HEAPF32[r72+64>>2]=r95;r95=r72+68|0;L336:do{if((HEAP32[r95>>2]|0)!=0){do{if((r129|0)==0){r130=0}else{r85=r129<<2;if(r129>>>0<=65535){r130=r85;break}r130=((r85>>>0)/(r129>>>0)&-1|0)==4?r85:-1}}while(0);r96=_malloc(r130);do{if((r96|0)!=0){if((HEAP32[r96-4>>2]&3|0)==0){break}_memset(r96,0,r130)|0}}while(0);r85=r72+72|0;HEAP32[r85>>2]=r96;r78=0;while(1){if((r78|0)>=(HEAP32[r88>>2]|0)){break L336}r83=HEAP32[r95>>2];r112=((r83|0)/2&-1|0)*Math_sin((r78|0)*3.141592653589793/(r83|0))+1;HEAPF32[HEAP32[r85>>2]+(r78<<2)>>2]=r112;r78=r78+1|0}}}while(0);if((HEAP8[r36+36|0]|0)==0){if((HEAP8[r36+37|0]|0)!=0){r2=261}}else{r2=261}if(r2==261){r95=HEAP32[HEAP32[r45>>2]+8>>2];r88=_malloc(192);if((r88|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=192,HEAP32[r3+16>>2]=36408,HEAP32[r3+24>>2]=195,r3));STACKTOP=r3}if((HEAP32[r88-4>>2]&3|0)!=0){_memset(r88,0,192)|0}r72=r88;r114=___ckd_calloc__(r95,8,36408,198);HEAP32[r88>>2]=r114;r114=___ckd_calloc__(r95,8,36408,200);HEAP32[r88+4>>2]=r114;r114=___ckd_calloc__(r95,8,36408,202);HEAP32[r88+8>>2]=r114;r114=___ckd_calloc__(r95,8,36408,204);HEAP32[r88+12>>2]=r114;HEAP8[r88+16|0]=1;HEAP32[r88+20>>2]=r95;HEAPF64[r88+24>>3]=.7;HEAPF64[r88+32>>3]=.30000000000000004;HEAPF64[r88+40>>3]=.999;HEAPF64[r88+48>>3]=.0010000000000000009;HEAPF64[r88+56>>3]=.5;HEAPF64[r88+64>>3]=.5;HEAPF64[r88+72>>3]=.85;HEAPF64[r88+80>>3]=.2;HEAPF64[r88+88>>3]=20;HEAPF64[r88+96>>3]=.05;r88=0;while(1){if((r88|0)>=9){break}HEAPF64[r72+104+(r88<<3)>>3]=1/(r88|0);r88=r88+1|0}HEAP32[r36+68>>2]=r72}r88=_malloc(16);if((r88|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=16,HEAP32[r3+16>>2]=34176,HEAP32[r3+24>>2]=270,r3));STACKTOP=r3}if((HEAP32[r88-4>>2]&3|0)!=0){_memset(r88,0,16)|0}r95=r36+72|0;HEAP32[r95>>2]=r88;if((HEAP8[r75]|0)==1){r131=HEAP32[HEAP32[r45>>2]+8>>2]}else{r131=HEAPU8[r47]}r88=HEAP16[r36+8>>1]+1|0;r114=HEAP16[r46>>1];r78=_malloc(24);if((r78|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=24,HEAP32[r3+16>>2]=36160,HEAP32[r3+24>>2]=79,r3));STACKTOP=r3}if((HEAP32[r78-4>>2]&3|0)!=0){_memset(r78,0,24)|0}HEAP16[r78+20>>1]=r131;HEAP16[r78+16>>1]=r88;HEAP16[r78+22>>1]=r114;HEAP16[r78+18>>1]=0;HEAP16[r78+10>>1]=0;HEAP16[r78+12>>1]=0;HEAP16[r78+14>>1]=0;HEAP8[r78+8|0]=0;r114=___ckd_calloc_2d__(r88,r131,4,36160,92);HEAP32[r78>>2]=r114;HEAP32[HEAP32[r95>>2]+12>>2]=r78;r78=___ckd_calloc__(HEAP16[r34>>1]|0,2,34176,276);HEAP32[r36+76>>2]=r78;r78=___ckd_calloc__(HEAP16[r39>>1]|0,8,34176,277);HEAP32[r36+80>>2]=r78;r78=___ckd_calloc__(HEAP16[r39>>1]|0,8,34176,278);HEAP32[r36+84>>2]=r78;r78=___ckd_calloc__(HEAP32[HEAP32[r45>>2]+8>>2],8,34176,279);HEAP32[r36+88>>2]=r78;r78=___ckd_calloc__((HEAP16[r39>>1]|0)/4&-1,8,34176,282);r114=r36+52|0;HEAP32[r114>>2]=r78;r78=___ckd_calloc__((HEAP16[r39>>1]|0)/4&-1,8,34176,283);r88=r36+56|0;HEAP32[r88>>2]=r78;r78=0;while(1){r85=HEAP16[r39>>1];if((r78|0)>=((r85<<16>>16|0)/4&-1|0)){break}r96=(r78|0)*6.283185307179586/(r85<<16>>16);r85=Math_cos(r96);HEAPF64[HEAP32[r114>>2]+(r78<<3)>>3]=r85;r85=Math_sin(r96);HEAPF64[HEAP32[r88>>2]+(r78<<3)>>3]=r85;r78=r78+1|0}do{if((_hash_table_lookup(HEAP32[r38>>2],15944,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15944,r3));STACKTOP=r3}else{r78=HEAP32[r5>>2];if((r78|0)==0){break}if((HEAP32[r78>>2]|0)==0){break}_err_msg(1,34176,176,29480,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_err_msg(1,34176,177,28656,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r3>>3]=HEAPF32[r35>>2],r3));STACKTOP=r3;_err_msg(1,34176,178,27824,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP16[r34>>1]|0,r3));STACKTOP=r3;_err_msg(1,34176,179,26672,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP16[r46>>1]|0,r3));STACKTOP=r3;_err_msg(1,34176,180,25744,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP16[r39>>1]|0,r3));STACKTOP=r3;_err_msg(1,34176,182,24632,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r3>>3]=HEAPF32[HEAP32[r45>>2]+16>>2],r3));STACKTOP=r3;_err_msg(1,34176,184,23128,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r3>>3]=HEAPF32[HEAP32[r45>>2]+20>>2],r3));STACKTOP=r3;_err_msg(1,34176,185,22352,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[HEAP32[r45>>2]+8>>2],r3));STACKTOP=r3;_err_msg(1,34176,186,21960,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP16[r36+96>>1]|0,r3));STACKTOP=r3;_err_msg(1,34176,187,21536,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAPU8[r36+50|0],r3));STACKTOP=r3;_err_msg(1,34176,189,21016,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=(HEAP8[r36+31|0]|0)!=0?67928:20024,r3));STACKTOP=r3;if((HEAP8[r48]|0)==0){_err_msg(1,34176,195,18664,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3}else{_err_msg(1,34176,191,19488,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_err_msg(1,34176,192,19040,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[r36+44>>2],r3));STACKTOP=r3}r78=HEAP32[r45>>2];r88=HEAP32[r78+68>>2];if((r88|0)==0){r132=r78}else{_err_msg(1,34176,199,17704,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r88,r3));STACKTOP=r3;r132=HEAP32[r45>>2]}_err_msg(1,34176,202,17264,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=(HEAP32[r132+76>>2]|0)!=0?67928:20024,r3));STACKTOP=r3;_err_msg(1,34176,204,17056,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=(HEAP32[HEAP32[r45>>2]+80>>2]|0)!=0?67928:20024,r3));STACKTOP=r3;_err_msg(1,34176,206,16720,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=(HEAP32[HEAP32[r45>>2]+44>>2]|0)!=0?67928:20024,r3));STACKTOP=r3}}while(0);HEAP16[r36+96>>1]=0;_memset(HEAP32[r71>>2],0,HEAP16[r34>>1]<<1)|0;HEAP8[r36+50|0]=1;HEAP16[r1>>1]=0;r45=HEAP32[r36+68>>2];if((r45|0)!=0){HEAP8[r45+16|0]=1}r45=HEAP32[r95>>2];HEAP8[r45|0]=1;HEAP8[r45+1|0]=0;HEAP8[r45+2|0]=0;r48=r45+4|0;r39=r48|0;tempBigInt=0;HEAP16[r39>>1]=tempBigInt;HEAP16[r39+2>>1]=tempBigInt>>16;r39=r48+4|0;tempBigInt=0;HEAP16[r39>>1]=tempBigInt;HEAP16[r39+2>>1]=tempBigInt>>16;r39=HEAP32[r45+12>>2];HEAP16[r39+12>>1]=0;HEAP16[r39+10>>1]=0;r69=r37;STACKTOP=r4;return r69}}while(0);if(r2==15){_err_msg(4,34176,79,24e3,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r41,HEAPF64[r3+8>>3]=r42,r3));STACKTOP=r3}_fe_free(r37);r69=0;STACKTOP=r4;return r69}function _fe_free(r1){var r2,r3,r4,r5,r6;r2=0;if((r1|0)==0){return}r3=r1+4|0;r4=HEAP32[r3>>2]-1|0;HEAP32[r3>>2]=r4;if((r4|0)>0){return}r4=r1+60|0;r3=HEAP32[r4>>2];if((r3|0)!=0){r5=HEAP32[r3+24>>2];if((r5|0)==0){r6=r3}else{_free(HEAP32[r5>>2]);_free(r5);r6=HEAP32[r4>>2]}_free(HEAP32[r6+72>>2]);_free(HEAP32[HEAP32[r4>>2]+32>>2]);_free(HEAP32[HEAP32[r4>>2]+36>>2]);_free(HEAP32[HEAP32[r4>>2]+40>>2]);_free(HEAP32[HEAP32[r4>>2]+28>>2]);_free(HEAP32[r4>>2])}_free(HEAP32[r1+76>>2]);_free(HEAP32[r1+80>>2]);_free(HEAP32[r1+52>>2]);_free(HEAP32[r1+56>>2]);_free(HEAP32[r1+84>>2]);_free(HEAP32[r1+88>>2]);_free(HEAP32[r1+92>>2]);_free(HEAP32[r1+64>>2]);if((HEAP8[r1+36|0]|0)==0){if((HEAP8[r1+37|0]|0)!=0){r2=9}}else{r2=9}if(r2==9){r2=HEAP32[r1+68>>2];_free(HEAP32[r2>>2]);_free(HEAP32[r2+4>>2]);_free(HEAP32[r2+8>>2]);_free(HEAP32[r2+12>>2]);_free(r2)}r2=HEAP32[HEAP32[r1+72>>2]+12>>2];r4=HEAP32[r2>>2];if((r4|0)!=0){_free(HEAP32[r4>>2]);_free(r4)}do{if((HEAP8[r2+8|0]|0)!=0){r4=HEAP32[r2+4>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r2);_cmd_ln_free_r(HEAP32[r1>>2]);_free(r1);return}function _fe_process_frames(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32;r6=0;r7=HEAP32[r3>>2];r8=r1+96|0;r9=HEAP16[r8>>1];r10=r9<<16>>16;r11=r7+r10|0;r12=r1+24|0;r13=HEAP16[r12>>1];r14=r13<<16>>16;r15=r11>>>0<r14>>>0;if((r4|0)==0){if(r15){r16=0}else{r16=(((r11-r14|0)>>>0)/((HEAP16[r1+18>>1]|0)>>>0)&-1)+1|0}HEAP32[r5>>2]=r16;r17=r16;return r17}if(r15){if((r7|0)!=0){_memcpy(HEAP32[r1+92>>2]+(r10<<1)|0,HEAP32[r2>>2],r7<<1)|0;HEAP16[r8>>1]=HEAPU16[r8>>1]+HEAP32[r3>>2];HEAP32[r2>>2]=HEAP32[r2>>2]+(HEAP32[r3>>2]<<1);HEAP32[r3>>2]=0}HEAP32[r5>>2]=0;r17=0;return r17}r10=HEAP32[r5>>2];if((r10|0)<1){HEAP32[r5>>2]=0;r17=0;return r17}r15=r1+72|0;L19:do{if((HEAP8[HEAP32[r15>>2]|0]|0)==0){r18=0;r19=r10;r20=r9;r21=r7;r22=r13}else{r16=0;r14=r10;while(1){if((r14|0)<=0){break}r11=HEAP32[HEAP32[r15>>2]+12>>2];r23=r11+12|0;r24=HEAP16[r23>>1];if(r24<<16>>16>=(HEAP16[r11+16>>1]|0)){r6=16;break}if(r24<<16>>16>=(HEAP16[r11+10>>1]|0)){r6=16;break}_memcpy(HEAP32[r4+(r16<<2)>>2],HEAP32[HEAP32[r11>>2]+(r24<<16>>16<<2)>>2],HEAP16[r11+20>>1]<<2)|0;HEAP16[r23>>1]=HEAP16[r23>>1]+1;r23=HEAP32[r5>>2]-1|0;HEAP32[r5>>2]=r23;r16=r16+1|0;r14=r23}do{if(r6==16){r14=HEAP32[r5>>2];if((r14|0)<1){break}r18=r16;r19=r14;r20=HEAP16[r8>>1];r21=HEAP32[r3>>2];r22=HEAP16[r12>>1];break L19}}while(0);HEAP32[r5>>2]=r16;r17=0;return r17}}while(0);r10=HEAP32[r2>>2];r13=r20<<16>>16;r7=r22<<16>>16;r22=r1+18|0;r9=(((r21+r13-r7|0)>>>0)/((HEAP16[r22>>1]|0)>>>0)&-1)+1|0;r21=(r9|0)>(r19|0)?r19:r9;if(r20<<16>>16==0){_fe_read_frame(r1,r10,r7);HEAP32[r2>>2]=HEAP32[r2>>2]+(HEAP16[r12>>1]<<1);HEAP32[r3>>2]=HEAP32[r3>>2]-(HEAP16[r12>>1]|0)}else{r20=r7-r13|0;r7=r1+92|0;_memcpy(HEAP32[r7>>2]+(r13<<1)|0,r10,r20<<1)|0;_fe_read_frame(r1,HEAP32[r7>>2],HEAP16[r12>>1]|0);HEAP32[r2>>2]=HEAP32[r2>>2]+(r20<<1);HEAP32[r3>>2]=HEAP32[r3>>2]-r20;HEAP16[r8>>1]=HEAP16[r8>>1]-HEAP16[r22>>1]}_fe_write_frame(r1,HEAP32[r4+(r18<<2)>>2]);r20=HEAP32[r15>>2];L35:do{if((HEAP8[r20+2|0]|0)==0){r25=(HEAP8[r20|0]|0)==0?r18:r18+1|0;r26=r21}else{r7=r18;if((HEAP8[r20|0]|0)==0){r25=r7;r26=r21;break}r9=r7;r7=r21;r19=HEAP32[r5>>2];while(1){if((r19|0)<=0){r25=r9;r26=r7;break L35}r14=HEAP32[HEAP32[r15>>2]+12>>2];r23=r14+12|0;r11=HEAP16[r23>>1];if(r11<<16>>16>=(HEAP16[r14+16>>1]|0)){r25=r9;r26=r7;break L35}if(r11<<16>>16>=(HEAP16[r14+10>>1]|0)){r25=r9;r26=r7;break L35}_memcpy(HEAP32[r4+(r9<<2)>>2],HEAP32[HEAP32[r14>>2]+(r11<<16>>16<<2)>>2],HEAP16[r14+20>>1]<<2)|0;HEAP16[r23>>1]=HEAP16[r23>>1]+1;r23=HEAP32[r5>>2]-1|0;HEAP32[r5>>2]=r23;r9=r9+1|0;r7=r7-1|0;r19=r23}}}while(0);r21=r1+76|0;r20=r1+33|0;r18=r1+34|0;r19=1;r7=r25;while(1){if((r19|0)>=(r26|0)){break}r25=HEAP16[r22>>1]|0;if(HEAP32[r3>>2]>>>0<r25>>>0){r6=33;break}r9=HEAP32[r2>>2];r16=HEAP16[r12>>1]|0;r23=r16-r25|0;r14=HEAP32[r21>>2];_memmove(r14,r14+(r25<<1)|0,r23<<1,2,0);_memcpy(HEAP32[r21>>2]+(r23<<1)|0,r9,r25<<1)|0;L49:do{if((HEAP8[r20]|0)!=0){r9=0;while(1){if((r9|0)>=(r25|0)){break L49}r14=HEAP32[r21>>2]+(r23+r9<<1)|0;r11=_llvm_bswap_i16(HEAP16[r14>>1]);HEAP16[r14>>1]=r11;r9=r9+1|0}}}while(0);L54:do{if((HEAP8[r18]|0)!=0){r9=0;while(1){if((r9|0)>=(r25|0)){break L54}r11=(_genrand_int31()&3|0)==0|0;r14=HEAP32[r21>>2]+(r23+r9<<1)|0;HEAP16[r14>>1]=HEAP16[r14>>1]+r11;r9=r9+1|0}}}while(0);_fe_spch_to_frame(r1,r16);_fe_write_frame(r1,HEAP32[r4+(r7<<2)>>2]);r23=HEAP32[r15>>2];if((HEAP8[r23+2|0]|0)==0){r27=(HEAP8[r23|0]|0)==0?r7:r7+1|0}else{r27=r7}HEAP32[r2>>2]=HEAP32[r2>>2]+(HEAP16[r22>>1]<<1);HEAP32[r3>>2]=HEAP32[r3>>2]-(HEAP16[r22>>1]|0);r23=HEAP16[r8>>1];if(r23<<16>>16>0){HEAP16[r8>>1]=r23-HEAP16[r22>>1]}r23=HEAP32[r15>>2];L65:do{if((HEAP8[r23+2|0]|0)==0){r28=r19;r29=r27}else{if((HEAP8[r23|0]|0)==0){r28=r19;r29=r27;break}else{r30=r19;r31=r27}while(1){if((r30|0)>=(r26|0)){r28=r30;r29=r31;break L65}r25=HEAP32[HEAP32[r15>>2]+12>>2];r9=r25+12|0;r11=HEAP16[r9>>1];if(r11<<16>>16>=(HEAP16[r25+16>>1]|0)){r28=r30;r29=r31;break L65}if(r11<<16>>16>=(HEAP16[r25+10>>1]|0)){r28=r30;r29=r31;break L65}_memcpy(HEAP32[r4+(r31<<2)>>2],HEAP32[HEAP32[r25>>2]+(r11<<16>>16<<2)>>2],HEAP16[r25+20>>1]<<2)|0;HEAP16[r9>>1]=HEAP16[r9>>1]+1;r30=r30+1|0;r31=r31+1|0}}}while(0);r19=r28+1|0;r7=r29}if(r6==33){___assert_fail(15280,34176,479,50920)}r6=HEAP16[r8>>1];do{if(r6<<16>>16<1){r29=HEAP32[r3>>2];r28=HEAP16[r22>>1];r19=r28<<16>>16;r31=(r29|0)>(r19|0)?r19:r29;r29=HEAP16[r12>>1];r30=r29-r28&65535;HEAP16[r8>>1]=r30;r28=HEAP32[r2>>2]-r10|0;if((r30<<16>>16|0)>(r28>>1|0)){r4=r28>>>1&65535;HEAP16[r8>>1]=r4;r32=r4}else{r32=r30}r30=(r32&65535)+r31&65535;HEAP16[r8>>1]=r30;if(r30<<16>>16<=0){break}_memcpy(HEAP32[r1+92>>2],HEAP32[r2>>2]+(r19-(r29<<16>>16)<<1)|0,r30<<16>>16<<1)|0;HEAP32[r2>>2]=HEAP32[r2>>2]+(r31<<1);HEAP32[r3>>2]=HEAP32[r3>>2]-r31}else{r31=r1+92|0;r30=HEAP32[r31>>2];r29=r6<<16>>16;_memmove(r30,r30+(r13-r29<<1)|0,r29<<1,2,0);r29=r10;r30=(HEAP32[r2>>2]-r29>>1)+HEAP32[r3>>2]|0;r19=HEAP16[r8>>1]|0;r4=HEAP16[r12>>1]-r19|0;r28=(r30|0)>(r4|0)?r4:r30;_memcpy(HEAP32[r31>>2]+(r19<<1)|0,r10,r28<<1)|0;HEAP16[r8>>1]=HEAPU16[r8>>1]+r28;r19=HEAP32[r2>>2];r31=r19-r29>>1;if((r28|0)<=(r31|0)){break}r29=r28-r31|0;HEAP32[r2>>2]=r19+(r29<<1);HEAP32[r3>>2]=HEAP32[r3>>2]-r29}}while(0);HEAP32[r5>>2]=r7;r17=0;return r17}function _fe_end_utt(r1,r2,r3){var r4,r5,r6;HEAP32[r3>>2]=0;r4=r1+96|0;r5=HEAP16[r4>>1];do{if(r5<<16>>16>0){_fe_read_frame(r1,HEAP32[r1+92>>2],r5<<16>>16);_fe_write_frame(r1,r2);r6=HEAP32[r1+72>>2];if((HEAP8[r6+2|0]|0)!=0){break}if((HEAP8[r6|0]|0)==0){break}HEAP32[r3>>2]=HEAP32[r3>>2]+1}}while(0);HEAP16[r4>>1]=0;HEAP8[r1+50|0]=0;return}function _fe_mel(r1,r2){var r3,r4,r5;r3=0;r4=STACKTOP;r5=HEAP32[r1+56>>2];if(r5>>>0<3){r1=_log10(FUNCTION_TABLE[HEAP32[5636+(r5*28&-1)>>2]](r2)/700+1)*2595;STACKTOP=r4;return r1}if((r5|0)==-1){_err_msg(5,37312,227,12032,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}else{_err_msg(5,37312,232,14960,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r5,r3));STACKTOP=r3;_exit(1)}}function _fe_melinv(r1,r2){var r3,r4,r5;r3=0;r4=STACKTOP;r5=HEAP32[r1+56>>2];if(r5>>>0<3){r1=(Math_pow(10,r2/2595)-1)*700;r2=FUNCTION_TABLE[HEAP32[5632+(r5*28&-1)>>2]](r1);STACKTOP=r4;return r2}if((r5|0)==-1){_err_msg(5,37312,209,12032,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}else{_err_msg(5,37312,214,14960,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r5,r3));STACKTOP=r3;_exit(1)}}function _fe_read_frame(r1,r2,r3){var r4,r5,r6,r7;r4=HEAP16[r1+24>>1]|0;r5=(r4|0)<(r3|0)?r4:r3;r3=r1+76|0;_memcpy(HEAP32[r3>>2],r2,r5<<1)|0;L1:do{if((HEAP8[r1+33|0]|0)!=0){r2=0;while(1){if((r2|0)>=(r5|0)){break L1}r4=HEAP32[r3>>2]+(r2<<1)|0;r6=_llvm_bswap_i16(HEAP16[r4>>1]);HEAP16[r4>>1]=r6;r2=r2+1|0}}}while(0);if((HEAP8[r1+34|0]|0)==0){_fe_spch_to_frame(r1,r5);return}else{r7=0}while(1){if((r7|0)>=(r5|0)){break}r2=(_genrand_int31()&3|0)==0|0;r6=HEAP32[r3>>2]+(r7<<1)|0;HEAP16[r6>>1]=HEAP16[r6>>1]+r2;r7=r7+1|0}_fe_spch_to_frame(r1,r5);return}function _fe_spch_to_frame(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=HEAPF32[r1+40>>2];r4=r1+76|0;r5=HEAP32[r4>>2];r6=HEAP32[r1+80>>2];L1:do{if(r3!=0){r7=r1+98|0;r8=r3;HEAPF64[r6>>3]=(HEAP16[r5>>1]|0)-(HEAP16[r7>>1]|0)*r8;r9=1;while(1){if((r9|0)>=(r2|0)){break}HEAPF64[r6+(r9<<3)>>3]=(HEAP16[r5+(r9<<1)>>1]|0)-(HEAP16[r5+(r9-1<<1)>>1]|0)*r8;r9=r9+1|0}r9=HEAP16[r1+18>>1]|0;if((r9|0)>(r2|0)){HEAP16[r7>>1]=HEAP16[HEAP32[r4>>2]+(r2-1<<1)>>1];break}else{HEAP16[r7>>1]=HEAP16[HEAP32[r4>>2]+(r9-1<<1)>>1];break}}else{r9=0;while(1){if((r9|0)>=(r2|0)){break L1}HEAPF64[r6+(r9<<3)>>3]=HEAP16[r5+(r9<<1)>>1]|0;r9=r9+1|0}}}while(0);r5=r1+80|0;_memset(HEAP32[r5>>2]+(r2<<3)|0,0,HEAP16[r1+26>>1]-r2<<3)|0;r2=HEAP32[r5>>2];r5=HEAP32[r1+64>>2];r6=HEAP16[r1+24>>1];r4=r6<<16>>16;L14:do{if((HEAP8[r1+31|0]|0)!=0){r3=0;r9=0;while(1){if((r3|0)>=(r4|0)){break}r7=r9+HEAPF64[r2+(r3<<3)>>3];r3=r3+1|0;r9=r7}r3=r9/(r6<<16>>16);r7=0;while(1){if((r7|0)>=(r4|0)){break L14}r8=r2+(r7<<3)|0;HEAPF64[r8>>3]=HEAPF64[r8>>3]-r3;r7=r7+1|0}}}while(0);r6=(r4|0)/2&-1;r1=r4-1|0;r4=0;while(1){if((r4|0)>=(r6|0)){break}r7=r2+(r4<<3)|0;r3=r5+(r4<<3)|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]*HEAPF64[r3>>3];r7=r2+(r1-r4<<3)|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]*HEAPF64[r3>>3];r4=r4+1|0}return}function _fe_dct2(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=HEAPF64[r2>>3];HEAPF32[r3>>2]=r5;r6=r1+60|0;r7=1;r8=r5;while(1){r9=HEAP32[r6>>2];if((r7|0)>=(HEAP32[r9+8>>2]|0)){break}r5=r8+HEAPF64[r2+(r7<<3)>>3];HEAPF32[r3>>2]=r5;r7=r7+1|0;r8=r5}HEAPF32[r3>>2]=r8*HEAPF32[((r4|0)==0?r9+60|0:r9+64|0)>>2];r9=r1+30|0;r1=1;while(1){if((r1|0)>=(HEAPU8[r9]|0)){break}r4=r3+(r1<<2)|0;HEAPF32[r4>>2]=0;r8=0;r7=0;while(1){r10=HEAP32[r6>>2];if((r8|0)>=(HEAP32[r10+8>>2]|0)){break}r5=r7+HEAPF64[r2+(r8<<3)>>3]*HEAPF32[HEAP32[HEAP32[r10+24>>2]+(r1<<2)>>2]+(r8<<2)>>2];HEAPF32[r4>>2]=r5;r8=r8+1|0;r7=r5}HEAPF32[r4>>2]=r7*HEAPF32[r10+64>>2];r1=r1+1|0}return}function _fe_write_frame(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36;r3=0;r4=r1+80|0;r5=HEAP32[r4>>2];r6=HEAPU8[r1+28|0];r7=r1+26|0;r8=HEAP16[r7>>1]|0;r9=r8-1|0;r10=0;r11=0;while(1){if((r10|0)>=(r9|0)){r12=0;break}if((r10|0)<(r11|0)){r13=r5+(r11<<3)|0;r14=HEAPF64[r13>>3];r15=r5+(r10<<3)|0;HEAPF64[r13>>3]=HEAPF64[r15>>3];HEAPF64[r15>>3]=r14;r16=r8;r17=r11}else{r16=r8;r17=r11}while(1){r18=(r16|0)/2&-1;if((r18|0)>(r17|0)){break}r16=r18;r17=r17-r18|0}r10=r10+1|0;r11=r17+r18|0}while(1){if((r12|0)>=(r8|0)){break}r18=r5+(r12<<3)|0;r17=HEAPF64[r18>>3];r11=r5+((r12|1)<<3)|0;r10=HEAPF64[r11>>3];HEAPF64[r18>>3]=r17+r10;HEAPF64[r11>>3]=r17-r10;r12=r12+2|0}r12=r1+52|0;r10=r1+56|0;r17=1;L14:while(1){if((r17|0)>=(r6|0)){break}r11=r17+1|0;r18=1<<r17;r16=1<<r17-1;r9=r6-r11|0;r14=1<<r11;r15=0;while(1){if((r15|0)>=(r8|0)){r17=r11;continue L14}r13=r5+(r15<<3)|0;r19=HEAPF64[r13>>3];r20=r15+r18|0;r21=r5+(r20<<3)|0;HEAPF64[r13>>3]=r19+HEAPF64[r21>>3];HEAPF64[r21>>3]=r19-HEAPF64[r21>>3];r21=r5+(r20+r16<<3)|0;HEAPF64[r21>>3]=-0-HEAPF64[r21>>3];r21=r20+r18|0;r19=1;while(1){if((r19|0)>=(r16|0)){break}r13=r19<<r9;r22=HEAPF64[HEAP32[r12>>2]+(r13<<3)>>3];r23=HEAPF64[HEAP32[r10>>2]+(r13<<3)>>3];r13=r5+(r20+r19<<3)|0;r24=HEAPF64[r13>>3];r25=r5+(r21-r19<<3)|0;r26=HEAPF64[r25>>3];r27=r24*r22+r26*r23;r28=r24*r23-r26*r22;r22=r5+(r20-r19<<3)|0;HEAPF64[r25>>3]=HEAPF64[r22>>3]-r28;HEAPF64[r13>>3]=-0-HEAPF64[r22>>3]-r28;r28=r5+(r15+r19<<3)|0;HEAPF64[r22>>3]=HEAPF64[r28>>3]-r27;HEAPF64[r28>>3]=HEAPF64[r28>>3]+r27;r19=r19+1|0}r15=r15+r14|0}}r5=HEAP32[r4>>2];r4=r1+84|0;r10=HEAP32[r4>>2];r12=HEAP16[r7>>1]|0;r7=HEAPF64[r5>>3];HEAPF64[r10>>3]=r7*r7;r7=(r12|0)/2&-1;r17=1;while(1){if((r17|0)>(r7|0)){break}r8=HEAPF64[r5+(r17<<3)>>3];r6=HEAPF64[r5+(r12-r17<<3)>>3];HEAPF64[r10+(r17<<3)>>3]=r8*r8+r6*r6;r17=r17+1|0}r17=HEAP32[r4>>2];r4=r1+88|0;r10=HEAP32[r4>>2];r12=r1+60|0;r5=0;r7=HEAP32[r12>>2];while(1){if((r5|0)>=(HEAP32[r7+8>>2]|0)){break}r6=HEAP16[HEAP32[r7+32>>2]+(r5<<1)>>1]|0;r8=HEAP16[HEAP32[r7+36>>2]+(r5<<1)>>1]|0;r14=r10+(r5<<3)|0;HEAPF64[r14>>3]=0;r15=0;r9=0;while(1){r29=HEAP32[r12>>2];if((r15|0)>=(HEAP16[HEAP32[r29+40>>2]+(r5<<1)>>1]|0)){break}r16=r9+HEAPF64[r17+(r6+r15<<3)>>3]*HEAPF32[HEAP32[r29+28>>2]+(r8+r15<<2)>>2];HEAPF64[r14>>3]=r16;r15=r15+1|0;r9=r16}r5=r5+1|0;r7=r29}r29=r1+36|0;do{if((HEAP8[r29]|0)==0){if((HEAP8[r1+37|0]|0)!=0){r3=30;break}HEAP8[HEAP32[r1+72>>2]+1|0]=1}else{r3=30}}while(0);do{if(r3==30){r7=HEAP32[r1+68>>2];r5=HEAP32[r4>>2];r17=HEAP32[r7+20>>2];r10=___ckd_calloc__(r17,8,36408,287);r9=r10;r15=r7+16|0;r14=r7|0;if((HEAP8[r15]|0)==0){r30=r14}else{r8=r7+4|0;r6=r7+88|0;r16=r7+8|0;r18=r7+12|0;r11=0;while(1){if((r11|0)>=(r17|0)){break}r19=r5+(r11<<3)|0;HEAPF64[HEAP32[r14>>2]+(r11<<3)>>3]=HEAPF64[r19>>3];HEAPF64[HEAP32[r8>>2]+(r11<<3)>>3]=HEAPF64[r19>>3];HEAPF64[HEAP32[r16>>2]+(r11<<3)>>3]=HEAPF64[r19>>3]/HEAPF64[r6>>3];HEAPF64[HEAP32[r18>>2]+(r11<<3)>>3]=0;r11=r11+1|0}HEAP8[r15]=0;r30=r14}r11=r7+24|0;r18=r7+32|0;r6=0;while(1){if((r6|0)>=(r17|0)){break}r16=HEAP32[r30>>2]+(r6<<3)|0;HEAPF64[r16>>3]=HEAPF64[r11>>3]*HEAPF64[r16>>3]+HEAPF64[r18>>3]*HEAPF64[r5+(r6<<3)>>3];r6=r6+1|0}r6=r7+4|0;_fe_low_envelope(r7,HEAP32[r30>>2],HEAP32[r6>>2],r17);r18=0;r11=0;while(1){if((r18|0)>=(r17|0)){break}r14=HEAPF64[HEAP32[r30>>2]+(r18<<3)>>3]-HEAPF64[HEAP32[r6>>2]+(r18<<3)>>3];HEAPF64[r9+(r18<<3)>>3]=r14<0?0:r14;r14=Math_log(HEAPF64[HEAP32[r30>>2]+(r18<<3)>>3]/HEAPF64[HEAP32[r6>>2]+(r18<<3)>>3]);r18=r18+1|0;r11=r14>r11?r14:r11}if((HEAP8[r1+37|0]|0)==0){HEAP8[HEAP32[r1+72>>2]+1|0]=1}else{HEAP8[HEAP32[r1+72>>2]+1|0]=r11>2|0}r18=r7+8|0;_fe_low_envelope(r7,r9,HEAP32[r18>>2],r17);r6=HEAP32[r7+12>>2];r14=r7+72|0;r15=r7+80|0;r16=0;while(1){if((r16|0)>=(r17|0)){break}r8=r9+(r16<<3)|0;r19=HEAPF64[r8>>3];r20=r6+(r16<<3)|0;r21=HEAPF64[r20>>3]*HEAPF64[r14>>3];HEAPF64[r20>>3]=r21;if(HEAPF64[r8>>3]<HEAPF64[r14>>3]*r21){HEAPF64[r8>>3]=r21*HEAPF64[r15>>3];r31=HEAPF64[r20>>3]}else{r31=r21}if(r19>r31){HEAPF64[r20>>3]=r19}r16=r16+1|0}if((HEAP8[r29]|0)==0){_free(r10);break}else{r32=0}while(1){if((r32|0)>=(r17|0)){break}r16=r9+(r32<<3)|0;r15=HEAPF64[HEAP32[r18>>2]+(r32<<3)>>3];if(HEAPF64[r16>>3]<r15){HEAPF64[r16>>3]=r15}r32=r32+1|0}r18=___ckd_calloc__(r17,8,36408,353);r15=r18;r16=r7+88|0;r14=r7+96|0;r6=0;while(1){if((r6|0)>=(r17|0)){break}r11=HEAPF64[r9+(r6<<3)>>3];r19=HEAPF64[r16>>3];r20=HEAPF64[HEAP32[r30>>2]+(r6<<3)>>3];if(r11<r19*r20){r21=r11/r20;HEAPF64[r15+(r6<<3)>>3]=r21;r33=r21}else{HEAPF64[r15+(r6<<3)>>3]=r19;r33=r19}r19=HEAPF64[r14>>3];if(r33<r19){HEAPF64[r15+(r6<<3)>>3]=r19}r6=r6+1|0}r6=r17-1|0;r14=0;while(1){if((r14|0)>=(r17|0)){break}r16=r14-4|0;r9=(r16|0)>0?r16:0;r16=r14+4|0;r7=(r16|0)<(r6|0)?r16:r6;r16=r9;r19=0;while(1){if((r16|0)>(r7|0)){break}r21=r19+HEAPF64[r15+(r16<<3)>>3];r16=r16+1|0;r19=r21}r16=r5+(r14<<3)|0;HEAPF64[r16>>3]=HEAPF64[r16>>3]*(r19/(r7-r9+1|0));r14=r14+1|0}_free(r18);_free(r10)}}while(0);r33=HEAP32[r4>>2];r4=0;while(1){if((r4|0)>=(HEAP32[HEAP32[r12>>2]+8>>2]|0)){break}r30=r33+(r4<<3)|0;r32=Math_log(HEAPF64[r30>>3]+1e-4);HEAPF64[r30>>3]=r32;r4=r4+1|0}r4=HEAP8[r1+32|0];L104:do{if(r4<<24>>24==2){_fe_dct2(r1,r33,r2,0);r32=r1+30|0;r30=0;while(1){if((r30|0)>=(HEAP32[HEAP32[r12>>2]+8>>2]|0)){break}r29=HEAPF32[r2>>2]*.707106781186548;r31=r33+(r30<<3)|0;HEAPF64[r31>>3]=r29;r14=1;r5=r29;while(1){if((r14|0)>=(HEAPU8[r32]|0)){break}r29=r5+HEAPF32[r2+(r14<<2)>>2]*HEAPF32[HEAP32[HEAP32[HEAP32[r12>>2]+24>>2]+(r14<<2)>>2]+(r30<<2)>>2];HEAPF64[r31>>3]=r29;r14=r14+1|0;r5=r29}HEAPF64[r31>>3]=r5*HEAPF32[HEAP32[r12>>2]+64>>2];r30=r30+1|0}r30=r1+29|0;r32=0;while(1){if((r32|0)>=(HEAPU8[r30]|0)){break L104}HEAPF32[r2+(r32<<2)>>2]=HEAPF64[r33+(r32<<3)>>3];r32=r32+1|0}}else if(r4<<24>>24==1){r32=r1+29|0;r30=0;while(1){if((r30|0)>=(HEAPU8[r32]|0)){break L104}HEAPF32[r2+(r30<<2)>>2]=HEAPF64[r33+(r30<<3)>>3];r30=r30+1|0}}else{r30=HEAP8[r1+35|0];if(r30<<24>>24==1){_fe_dct2(r1,r33,r2,0);break}else if(r30<<24>>24==2){_fe_dct2(r1,r33,r2,1);break}else{r30=HEAPF64[r33>>3]*.5;HEAPF32[r2>>2]=r30;r32=1;r10=r30;while(1){r34=HEAP32[HEAP32[r12>>2]+8>>2];if((r32|0)>=(r34|0)){break}r30=r10+HEAPF64[r33+(r32<<3)>>3];HEAPF32[r2>>2]=r30;r32=r32+1|0;r10=r30}HEAPF32[r2>>2]=r10/(r34|0);r32=r1+30|0;r30=1;while(1){if((r30|0)>=(HEAPU8[r32]|0)){break L104}r18=r2+(r30<<2)|0;HEAPF32[r18>>2]=0;r14=0;r9=0;while(1){r7=HEAP32[r12>>2];r35=HEAP32[r7+8>>2];if((r14|0)>=(r35|0)){break}r19=r9+HEAPF64[r33+(r14<<3)>>3]*HEAPF32[HEAP32[HEAP32[r7+24>>2]+(r30<<2)>>2]+(r14<<2)>>2]*((r14|0)==0?1:2);HEAPF32[r18>>2]=r19;r14=r14+1|0;r9=r19}HEAPF32[r18>>2]=r9/((r35|0)*2);r30=r30+1|0}}}}while(0);L138:do{if((HEAP32[HEAP32[r12>>2]+68>>2]|0)!=0){r35=r1+30|0;r33=0;while(1){if((r33|0)>=(HEAPU8[r35]|0)){break L138}r34=r2+(r33<<2)|0;HEAPF32[r34>>2]=HEAPF32[r34>>2]*HEAPF32[HEAP32[HEAP32[r12>>2]+72>>2]+(r33<<2)>>2];r33=r33+1|0}}}while(0);r12=r1+72|0;HEAP8[HEAP32[r12>>2]+2|0]=0;r33=HEAP32[r12>>2]+8|0;HEAP32[r33>>2]=HEAP32[r33>>2]+1;r33=HEAP32[r12>>2];do{if((HEAP8[r33+1|0]|0)==0){HEAP16[r33+4>>1]=0;r35=HEAP32[HEAP32[r12>>2]+12>>2];HEAP16[r35+12>>1]=0;HEAP16[r35+10>>1]=0;r35=HEAP32[r12>>2];if((HEAP8[r35|0]|0)==0){break}r34=r35+6|0;HEAP16[r34>>1]=HEAP16[r34>>1]+1;r34=HEAP32[r12>>2]+6|0;if((HEAP16[r34>>1]|0)<(HEAP16[r1+10>>1]|0)){break}HEAP16[r34>>1]=0;HEAP8[HEAP32[r12>>2]|0]=0;HEAP8[HEAP32[r12>>2]+2|0]=1}else{HEAP16[r33+6>>1]=0;r34=HEAP32[r12>>2];if((HEAP8[r34|0]|0)!=0){break}r35=r34+4|0;HEAP16[r35>>1]=HEAP16[r35>>1]+1;r35=HEAP32[HEAP32[r12>>2]+12>>2];r34=r35+10|0;r4=HEAP16[r34>>1];if(r4<<16>>16>=(HEAP16[r35+16>>1]|0)){___assert_fail(46704,36160,126,50968)}_memcpy(HEAP32[HEAP32[r35>>2]+(r4<<16>>16<<2)>>2],r2,HEAP16[r35+20>>1]<<2)|0;HEAP16[r34>>1]=HEAP16[r34>>1]+1;r34=HEAP32[r12>>2]+4|0;if((HEAP16[r34>>1]|0)<(HEAP16[r1+8>>1]|0)){break}HEAP16[r34>>1]=0;HEAP8[HEAP32[r12>>2]|0]=1;HEAP8[HEAP32[r12>>2]+2|0]=1}}while(0);r2=HEAP32[r12>>2];if((HEAP8[r2+3|0]|0)==0){return}if((HEAP8[r2+1|0]|0)==0){if((HEAP8[r2|0]|0)==0){r36=r2}else{r3=116}}else{r3=116}do{if(r3==116){r33=HEAP32[r2+12>>2];r34=r33+14|0;r35=HEAP16[r34>>1];if(r35<<16>>16>=(HEAP16[r33+18>>1]|0)){___assert_fail(33568,36160,152,50944)}r4=HEAP16[r33+22>>1]|0;r30=Math_imul(r35<<16>>16,r4)|0;_memcpy(HEAP32[r33+4>>2]+(r30<<1)|0,HEAP32[r1+76>>2],r4<<1)|0;HEAP16[r34>>1]=HEAP16[r34>>1]+1;r34=HEAP32[r12>>2];if((HEAP8[r34+1|0]|0)==0){r36=r34;break}return}}while(0);if((HEAP8[r36|0]|0)!=0){return}HEAP16[HEAP32[r36+12>>2]+14>>1]=0;return}function _fe_warp_affine_doc(){return 37416}function _fe_warp_affine_id(){return 1}function _fe_warp_affine_n_param(){return 2}function _fe_warp_affine_set_parameters(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+256|0;r5=r4;HEAPF32[4632>>2]=r2*.5;if((r1|0)==0){HEAP32[4944>>2]=1;STACKTOP=r4;return}r2=HEAP8[r1];r6=HEAP8[65104];if(r2<<24>>24!=r6<<24>>24|r2<<24>>24==0|r6<<24>>24==0){r7=r2;r8=r6}else{r6=r1;r2=65104;while(1){r9=r6+1|0;r10=r2+1|0;r11=HEAP8[r9];r12=HEAP8[r10];if(r11<<24>>24!=r12<<24>>24|r11<<24>>24==0|r12<<24>>24==0){r7=r11;r8=r12;break}else{r6=r9;r2=r10}}}if(r7<<24>>24==r8<<24>>24){STACKTOP=r4;return}HEAP32[4944>>2]=0;r8=r5|0;_strcpy(r8,r1);r5=4608;HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=0;_strcpy(65104,r1);r1=0;r5=_strtok(r8,46824);while(1){if((r5|0)==0){r13=r5;break}r8=_atof_c(r5);HEAPF32[4608+(r1<<2)>>2]=r8;r8=_strtok(0,46824);if((r1|0)>0){r13=r8;break}r1=r1+1|0;r5=r8}if((r13|0)!=0){_err_msg(1,33920,130,23712,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r13,r3));STACKTOP=r3}if(HEAPF32[4608>>2]!=0){STACKTOP=r4;return}HEAP32[4944>>2]=1;_err_msg(1,33920,135,18248,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;STACKTOP=r4;return}function _fe_warp_affine_warped_to_unwarped(r1){var r2,r3,r4,r5,r6;r2=0;r3=STACKTOP;if((HEAP32[4944>>2]|0)!=0){r4=r1;STACKTOP=r3;return r4}r5=HEAPF32[4608>>2];r6=(r1-HEAPF32[4612>>2])/r5;r1=HEAPF32[4632>>2];if(r6<=r1){r4=r6;STACKTOP=r3;return r4}_err_msg(3,33920,152,14888,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAPF64[r2>>3]=r5,HEAPF64[r2+8>>3]=r6,HEAPF64[r2+16>>3]=r1,r2));STACKTOP=r2;r4=r6;STACKTOP=r3;return r4}function _fe_warp_affine_unwarped_to_warped(r1){var r2;if((HEAP32[4944>>2]|0)!=0){r2=r1;return r2}r2=HEAPF32[4608>>2]*r1+HEAPF32[4612>>2];return r2}function _fe_warp_affine_print(r1){var r2,r3,r4,r5;r2=0;r3=STACKTOP;r4=0;while(1){if(r4>>>0>=2){break}r5=HEAPF32[4608+(r4<<2)>>2];_printf(12008,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r1,HEAP32[r2+8>>2]=r4,HEAPF64[r2+16>>3]=r5,r2));STACKTOP=r2;r4=r4+1|0}_putchar(10);STACKTOP=r3;return}function _fe_warp_inverse_linear_doc(){return 37080}function _fe_warp_inverse_linear_id(){return 0}function _fe_warp_inverse_linear_n_param(){return 1}function _fe_warp_inverse_linear_set_parameters(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+256|0;r5=r4;HEAPF32[4624>>2]=r2*.5;if((r1|0)==0){HEAP32[4936>>2]=1;STACKTOP=r4;return}r2=HEAP8[r1];r6=HEAP8[64848];if(r2<<24>>24!=r6<<24>>24|r2<<24>>24==0|r6<<24>>24==0){r7=r2;r8=r6}else{r6=r1;r2=64848;while(1){r9=r6+1|0;r10=r2+1|0;r11=HEAP8[r9];r12=HEAP8[r10];if(r11<<24>>24!=r12<<24>>24|r11<<24>>24==0|r12<<24>>24==0){r7=r11;r8=r12;break}else{r6=r9;r2=r10}}}if(r7<<24>>24==r8<<24>>24){STACKTOP=r4;return}HEAP32[4936>>2]=0;r8=r5|0;_strcpy(r8,r1);HEAP32[4600>>2]=0;_strcpy(64848,r1);r1=0;r5=_strtok(r8,46824);while(1){if((r5|0)==0){r13=r5;break}r8=_atof_c(r5);HEAPF32[4600+(r1<<2)>>2]=r8;r8=_strtok(0,46824);if((r1|0)>-1){r13=r8;break}r1=r1+1|0;r5=r8}if((r13|0)!=0){_err_msg(1,33736,129,23592,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r13,r3));STACKTOP=r3}if(HEAPF32[4600>>2]!=0){STACKTOP=r4;return}HEAP32[4936>>2]=1;_err_msg(1,33736,134,18088,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;STACKTOP=r4;return}function _fe_warp_inverse_linear_warped_to_unwarped(r1){var r2,r3,r4,r5,r6,r7;r2=0;r3=STACKTOP;do{if((HEAP32[4936>>2]|0)==0){r4=HEAPF32[4600>>2];r5=r4*r1;r6=HEAPF32[4624>>2];if(r5<=r6){r7=r5;break}_err_msg(3,33736,150,14888,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAPF64[r2>>3]=r4,HEAPF64[r2+8>>3]=r5,HEAPF64[r2+16>>3]=r6,r2));STACKTOP=r2;r7=r5}else{r7=r1}}while(0);STACKTOP=r3;return r7}function _fe_warp_inverse_linear_unwarped_to_warped(r1){var r2;if((HEAP32[4936>>2]|0)==0){r2=r1/HEAPF32[4600>>2]}else{r2=r1}return r2}function _fe_warp_inverse_linear_print(r1){var r2,r3,r4;r2=0;r3=STACKTOP;r4=HEAPF32[4600>>2];_printf(12008,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r1,HEAP32[r2+8>>2]=0,HEAPF64[r2+16>>3]=r4,r2));STACKTOP=r2;_putchar(10);STACKTOP=r3;return}function _fe_warp_piecewise_linear_doc(){return 36640}function _fe_warp_piecewise_linear_id(){return 2}function _fe_warp_piecewise_linear_n_param(){return 2}function _fe_warp_piecewise_linear_set_parameters(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+256|0;r5=r4;HEAPF32[4616>>2]=r2*.5;if((r1|0)==0){HEAP32[4928>>2]=1;STACKTOP=r4;return}r6=HEAP8[r1];r7=HEAP8[64592];if(r6<<24>>24!=r7<<24>>24|r6<<24>>24==0|r7<<24>>24==0){r8=r6;r9=r7}else{r7=r1;r6=64592;while(1){r10=r7+1|0;r11=r6+1|0;r12=HEAP8[r10];r13=HEAP8[r11];if(r12<<24>>24!=r13<<24>>24|r12<<24>>24==0|r13<<24>>24==0){r8=r12;r9=r13;break}else{r7=r10;r6=r11}}}if(r8<<24>>24==r9<<24>>24){STACKTOP=r4;return}HEAP32[4928>>2]=0;r9=r5|0;_strcpy(r9,r1);r5=4592;HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=0;r5=67920;HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=0;_strcpy(64592,r1);r1=0;r5=_strtok(r9,46824);while(1){if((r5|0)==0){r14=r5;break}r9=_atof_c(r5);HEAPF32[4592+(r1<<2)>>2]=r9;r9=_strtok(0,46824);if((r1|0)>0){r14=r9;break}r1=r1+1|0;r5=r9}if((r14|0)!=0){_err_msg(1,33632,141,23504,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r14,r3));STACKTOP=r3}r14=HEAPF32[4596>>2];if(r14<r2){if(r14==0){r5=r2*.8500000238418579;HEAPF32[4596>>2]=r5;r15=r5}else{r15=r14}r14=HEAPF32[4616>>2];r5=HEAPF32[4592>>2];r2=r14-r15;HEAPF32[67920>>2]=(r14-r5*r15)/r2;HEAPF32[67924>>2]=r14*r15*(r5-1)/r2;r16=r5}else{r5=67920;HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=0;r16=HEAPF32[4592>>2]}if(r16!=0){STACKTOP=r4;return}HEAP32[4928>>2]=1;_err_msg(1,33632,166,18016,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;STACKTOP=r4;return}function _fe_warp_piecewise_linear_warped_to_unwarped(r1){var r2,r3,r4,r5,r6;r2=0;r3=STACKTOP;if((HEAP32[4928>>2]|0)!=0){r4=r1;STACKTOP=r3;return r4}r5=HEAPF32[4592>>2];if(r5*HEAPF32[4596>>2]>r1){r6=r1/r5}else{r6=(r1-HEAPF32[67924>>2])/HEAPF32[67920>>2]}r1=HEAPF32[4616>>2];if(r6<=r1){r4=r6;STACKTOP=r3;return r4}_err_msg(3,33632,189,14888,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAPF64[r2>>3]=r5,HEAPF64[r2+8>>3]=r6,HEAPF64[r2+16>>3]=r1,r2));STACKTOP=r2;r4=r6;STACKTOP=r3;return r4}function _fe_warp_piecewise_linear_unwarped_to_warped(r1){var r2;do{if((HEAP32[4928>>2]|0)==0){if(HEAPF32[4596>>2]>r1){r2=HEAPF32[4592>>2]*r1;break}else{r2=HEAPF32[67920>>2]*r1+HEAPF32[67924>>2];break}}else{r2=r1}}while(0);return r2}function _fe_warp_piecewise_linear_print(r1){var r2,r3,r4,r5;r2=0;r3=STACKTOP;r4=0;while(1){if(r4>>>0>=2){break}r5=HEAPF32[4592+(r4<<2)>>2];_printf(12008,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r1,HEAP32[r2+8>>2]=r4,HEAPF64[r2+16>>3]=r5,r2));STACKTOP=r2;r4=r4+1|0}_putchar(10);STACKTOP=r3;return}function _fe_low_envelope(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12;r5=r1+56|0;r6=r1+64|0;r7=r1+40|0;r8=r1+48|0;r1=0;while(1){if((r1|0)>=(r4|0)){break}r9=HEAPF64[r2+(r1<<3)>>3];r10=r3+(r1<<3)|0;r11=HEAPF64[r10>>3];if(r9<r11){r12=HEAPF64[r5>>3]*r11+HEAPF64[r6>>3]*r9}else{r12=HEAPF64[r7>>3]*r11+HEAPF64[r8>>3]*r9}HEAPF64[r10>>3]=r12;r1=r1+1|0}return}function _feat_array_alloc(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;if((r1|0)==0){___assert_fail(46184,46560,361,50840)}if((r2|0)<=0){___assert_fail(44536,46560,362,50840)}r3=r1+92|0;r4=HEAP32[r3>>2];if((r4|0)==0){___assert_fail(43008,46560,363,50840)}r5=r1+12|0;r6=HEAP32[r5>>2];r7=r1+16|0;r8=0;r9=0;while(1){if((r8|0)>=(r6|0)){break}r10=r9+HEAP32[HEAP32[r7>>2]+(r8<<2)>>2]|0;r8=r8+1|0;r9=r10}if(r9>>>0<r4>>>0){___assert_fail(41968,46560,370,50840)}if((r9|0)<(HEAP32[r1+40>>2]|0)){___assert_fail(40600,46560,371,50840)}r4=r1+24|0;r8=HEAP32[r4>>2];r10=___ckd_calloc_2d__(r2,(r8|0)==0?r6:r8,4,46560,374);r8=___ckd_calloc__(Math_imul(r9,r2)|0,4,46560,375);r6=r1+84|0;r11=r1+28|0;r1=0;while(1){if((r1|0)>=(r2|0)){break}r12=r10+(r1<<2)|0;r13=0;r14=r8+(Math_imul(r1,r9)<<2)|0;while(1){if((r13|0)>=(HEAP32[((HEAP32[r4>>2]|0)==0?r5:r4)>>2]|0)){break}HEAP32[HEAP32[r12>>2]+(r13<<2)>>2]=r14;do{if((HEAP32[r6>>2]|0)==0){r15=HEAP32[r11>>2];if((r15|0)==0){r16=HEAP32[r7>>2]+(r13<<2)|0;break}else{r16=r15+(r13<<2)|0;break}}else{r16=r3}}while(0);r13=r13+1|0;r14=r14+(HEAP32[r16>>2]<<2)|0}r1=r1+1|0}return r10}function _feat_s2_4x_cep2feat(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;if((r1|0)==0){___assert_fail(46184,46560,433,50776)}r4=r1+8|0;if((HEAP32[r4>>2]|0)!=13){___assert_fail(8864,46560,434,50776)}if((HEAP32[r1+12>>2]|0)!=4){___assert_fail(8504,46560,435,50776)}r5=HEAP32[r1+16>>2];if((HEAP32[r5>>2]|0)!=12){___assert_fail(8240,46560,436,50776)}if((HEAP32[r5+4>>2]|0)!=24){___assert_fail(7968,46560,437,50776)}if((HEAP32[r5+8>>2]|0)!=3){___assert_fail(7568,46560,438,50776)}if((HEAP32[r5+12>>2]|0)!=12){___assert_fail(7368,46560,439,50776)}if((HEAP32[r1+20>>2]|0)!=4){___assert_fail(7280,46560,440,50776)}_memcpy(HEAP32[r3>>2],HEAP32[r2>>2]+4|0,48)|0;r1=r2+8|0;r5=HEAP32[r1>>2];r6=r2-8|0;r7=HEAP32[r6>>2];r8=HEAP32[r3+4>>2];r9=0;while(1){r10=HEAP32[r4>>2];if((r9|0)>=(r10-1|0)){break}HEAPF32[r8+(r9<<2)>>2]=HEAPF32[r5+(r9+1<<2)>>2]-HEAPF32[r7+(r9+1<<2)>>2];r9=r9+1|0}r7=HEAP32[r2+16>>2];r5=HEAP32[r2-16>>2];r11=0;r12=r9;r9=r10;while(1){if((r11|0)>=(r9-1|0)){break}HEAPF32[r8+(r12<<2)>>2]=HEAPF32[r7+(r11+1<<2)>>2]-HEAPF32[r5+(r11+1<<2)>>2];r11=r11+1|0;r12=r12+1|0;r9=HEAP32[r4>>2]}r12=r2+12|0;r11=HEAP32[r12>>2];r5=r2-4|0;r7=HEAP32[r5>>2];r8=r2+4|0;r10=HEAP32[r8>>2];r13=r2-12|0;r14=HEAP32[r13>>2];r15=HEAP32[r3+12>>2];r16=0;r17=r9;while(1){if((r16|0)>=(r17-1|0)){break}HEAPF32[r15+(r16<<2)>>2]=HEAPF32[r11+(r16+1<<2)>>2]-HEAPF32[r7+(r16+1<<2)>>2]-(HEAPF32[r10+(r16+1<<2)>>2]-HEAPF32[r14+(r16+1<<2)>>2]);r16=r16+1|0;r17=HEAP32[r4>>2]}r4=HEAP32[r3+8>>2];HEAPF32[r4>>2]=HEAPF32[HEAP32[r2>>2]>>2];HEAPF32[r4+4>>2]=HEAPF32[HEAP32[r1>>2]>>2]-HEAPF32[HEAP32[r6>>2]>>2];HEAPF32[r4+8>>2]=HEAPF32[HEAP32[r12>>2]>>2]-HEAPF32[HEAP32[r5>>2]>>2]-(HEAPF32[HEAP32[r8>>2]>>2]-HEAPF32[HEAP32[r13>>2]>>2]);return}function _feat_s3_1x39_cep2feat(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12;if((r1|0)==0){___assert_fail(46184,46560,496,50752)}r4=r1+8|0;if((HEAP32[r4>>2]|0)!=13){___assert_fail(8864,46560,497,50752)}if((HEAP32[r1+12>>2]|0)!=1){___assert_fail(10280,46560,498,50752)}if((HEAP32[HEAP32[r1+16>>2]>>2]|0)!=39){___assert_fail(8760,46560,499,50752)}if((HEAP32[r1+20>>2]|0)!=3){___assert_fail(8600,46560,500,50752)}_memcpy(HEAP32[r3>>2],HEAP32[r2>>2]+4|0,48)|0;r1=HEAP32[r3>>2];r3=HEAP32[r4>>2];r5=r3-1|0;r6=r2+8|0;r7=HEAP32[r6>>2];r8=r2-8|0;r9=HEAP32[r8>>2];r10=0;r11=r3;while(1){r12=r11-1|0;if((r10|0)>=(r12|0)){break}HEAPF32[r1+(r5+r10<<2)>>2]=HEAPF32[r7+(r10+1<<2)>>2]-HEAPF32[r9+(r10+1<<2)>>2];r10=r10+1|0;r11=HEAP32[r4>>2]}r10=r5+r12|0;HEAPF32[r1+(r10<<2)>>2]=HEAPF32[HEAP32[r2>>2]>>2];HEAPF32[r1+(r5+r11<<2)>>2]=HEAPF32[HEAP32[r6>>2]>>2]-HEAPF32[HEAP32[r8>>2]>>2];r8=r2+12|0;r6=r2-4|0;r11=r2+4|0;r5=r2-12|0;HEAPF32[r1+(r10+2<<2)>>2]=HEAPF32[HEAP32[r8>>2]>>2]-HEAPF32[HEAP32[r6>>2]>>2]-(HEAPF32[HEAP32[r11>>2]>>2]-HEAPF32[HEAP32[r5>>2]>>2]);r2=r10+3|0;r10=HEAP32[r8>>2];r8=HEAP32[r6>>2];r6=HEAP32[r11>>2];r11=HEAP32[r5>>2];r5=0;while(1){if((r5|0)>=(HEAP32[r4>>2]-1|0)){break}HEAPF32[r1+(r2+r5<<2)>>2]=HEAPF32[r10+(r5+1<<2)>>2]-HEAPF32[r8+(r5+1<<2)>>2]-(HEAPF32[r6+(r5+1<<2)>>2]-HEAPF32[r11+(r5+1<<2)>>2]);r5=r5+1|0}return}function _feat_1s_c_d_dd_cep2feat(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;if((r1|0)==0){___assert_fail(46184,46560,587,50896)}if((HEAP32[r1+12>>2]|0)!=1){___assert_fail(10280,46560,588,50896)}r4=r1+8|0;r5=HEAP32[r4>>2];if((HEAP32[HEAP32[r1+16>>2]>>2]|0)!=(r5*3&-1|0)){___assert_fail(9056,46560,589,50896)}if((HEAP32[r1+20>>2]|0)!=3){___assert_fail(8952,46560,590,50896)}_memcpy(HEAP32[r3>>2],HEAP32[r2>>2],r5<<2)|0;r5=HEAP32[r3>>2];r3=HEAP32[r4>>2];r1=HEAP32[r2+8>>2];r6=HEAP32[r2-8>>2];r7=0;r8=r3;while(1){if((r7|0)>=(r8|0)){break}HEAPF32[r5+(r3+r7<<2)>>2]=HEAPF32[r1+(r7<<2)>>2]-HEAPF32[r6+(r7<<2)>>2];r7=r7+1|0;r8=HEAP32[r4>>2]}r7=r3+r8|0;r3=HEAP32[r2+12>>2];r6=HEAP32[r2-4>>2];r1=HEAP32[r2+4>>2];r9=HEAP32[r2-12>>2];r2=0;r10=r8;while(1){if((r2|0)>=(r10|0)){break}HEAPF32[r5+(r7+r2<<2)>>2]=HEAPF32[r3+(r2<<2)>>2]-HEAPF32[r6+(r2<<2)>>2]-(HEAPF32[r1+(r2<<2)>>2]-HEAPF32[r9+(r2<<2)>>2]);r2=r2+1|0;r10=HEAP32[r4>>2]}return}function _feat_1s_c_d_ld_dd_cep2feat(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;if((r1|0)==0){___assert_fail(46184,46560,633,50864)}if((HEAP32[r1+12>>2]|0)!=1){___assert_fail(10280,46560,634,50864)}r4=HEAP32[HEAP32[r1+16>>2]>>2];r5=r1+8|0;if((r4|0)!=(HEAP32[r5>>2]<<2|0)){___assert_fail(9312,46560,635,50864)}if((HEAP32[r1+20>>2]|0)!=4){___assert_fail(9176,46560,636,50864)}_memcpy(HEAP32[r3>>2],HEAP32[r2>>2],r4)|0;r4=HEAP32[r3>>2];r3=HEAP32[r5>>2];r1=HEAP32[r2+8>>2];r6=HEAP32[r2-8>>2];r7=0;r8=r3;while(1){if((r7|0)>=(r8|0)){break}HEAPF32[r4+(r3+r7<<2)>>2]=HEAPF32[r1+(r7<<2)>>2]-HEAPF32[r6+(r7<<2)>>2];r7=r7+1|0;r8=HEAP32[r5>>2]}r7=r3+r8|0;r3=HEAP32[r2+16>>2];r6=HEAP32[r2-16>>2];r1=0;r9=r8;while(1){if((r1|0)>=(r9|0)){break}HEAPF32[r4+(r7+r1<<2)>>2]=HEAPF32[r3+(r1<<2)>>2]-HEAPF32[r6+(r1<<2)>>2];r1=r1+1|0;r9=HEAP32[r5>>2]}r1=r7+r9|0;r7=HEAP32[r2+12>>2];r6=HEAP32[r2-4>>2];r3=HEAP32[r2+4>>2];r8=HEAP32[r2-12>>2];r2=0;r10=r9;while(1){if((r2|0)>=(r10|0)){break}HEAPF32[r4+(r1+r2<<2)>>2]=HEAPF32[r7+(r2<<2)>>2]-HEAPF32[r6+(r2<<2)>>2]-(HEAPF32[r3+(r2<<2)>>2]-HEAPF32[r8+(r2<<2)>>2]);r2=r2+1|0;r10=HEAP32[r5>>2]}return}function _feat_s3_cep_dcep(r1,r2,r3){var r4,r5,r6,r7;if((r1|0)==0){___assert_fail(46184,46560,559,50712)}if((HEAP32[r1+12>>2]|0)!=1){___assert_fail(10280,46560,560,50712)}r4=r1+8|0;r5=HEAP32[r4>>2];if((HEAP32[HEAP32[r1+16>>2]>>2]|0)!=(r5<<1|0)){___assert_fail(9960,46560,561,50712)}if((HEAP32[r1+20>>2]|0)!=2){___assert_fail(9608,46560,562,50712)}_memcpy(HEAP32[r3>>2],HEAP32[r2>>2],r5<<2)|0;r5=HEAP32[r3>>2];r3=HEAP32[r4>>2];r1=HEAP32[r2+8>>2];r6=HEAP32[r2-8>>2];r2=0;r7=r3;while(1){if((r2|0)>=(r7|0)){break}HEAPF32[r5+(r3+r2<<2)>>2]=HEAPF32[r1+(r2<<2)>>2]-HEAPF32[r6+(r2<<2)>>2];r2=r2+1|0;r7=HEAP32[r4>>2]}return}function _feat_s3_cep(r1,r2,r3){if((r1|0)==0){___assert_fail(46184,46560,544,50736)}if((HEAP32[r1+12>>2]|0)!=1){___assert_fail(10280,46560,545,50736)}if((HEAP32[r1+20>>2]|0)==0){_memcpy(HEAP32[r3>>2],HEAP32[r2>>2],HEAP32[r1+8>>2]<<2)|0;return}else{___assert_fail(10152,46560,546,50736)}}function _feat_copy(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=HEAP32[r1+20>>2];r5=r1+12|0;r6=r1+16|0;r1=r4<<1|1;r7=-r4|0;while(1){if((r7|0)>(r4|0)){break}r8=r7+r4|0;r9=r2+(r7<<2)|0;r10=0;r11=0;while(1){if((r10|0)>=(HEAP32[r5>>2]|0)){break}r12=(HEAP32[HEAP32[r6>>2]+(r10<<2)>>2]>>>0)/(r1>>>0)&-1;r13=HEAP32[r3+(r10<<2)>>2]+(Math_imul(r8,r12)<<2)|0;_memcpy(r13,HEAP32[r9>>2]+(r11<<2)|0,r12<<2)|0;r10=r10+1|0;r11=r11+r12|0}r7=r7+1|0}return}function _feat_s2mfc2feat_live(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30;r7=STACKTOP;STACKTOP=STACKTOP+8|0;r8=r7;HEAP32[r8>>2]=0;r9=(r3|0)==0?r8:r3;r3=(r4|0)==0;if(r3){r10=HEAP32[r1+76>>2];r11=HEAP32[r1+80>>2];r12=HEAP32[r1+20>>2];r13=HEAP32[r1+8>>2]}else{do{if((r5|0)!=0){r8=HEAP32[r9>>2];if((r8|0)<=0){break}r14=HEAP32[r1+20>>2];r15=HEAP32[r1+8>>2];r16=r8+(r14<<1)|0;r17=___ckd_calloc__(r16,4,46560,1286);r18=r17;r19=r18+(r14<<2)|0;_memcpy(r19,r2,r8<<2)|0;_feat_cmn(r1,r19,r8,1,1);_feat_agc(r1,r19,r8,1,1);r19=r1+68|0;r20=r15<<2;r15=r8+r14|0;r21=r2+(r8-1<<2)|0;r22=0;while(1){if((r22|0)>=(r14|0)){break}r23=HEAP32[HEAP32[r19>>2]+(r22<<2)>>2];HEAP32[r18+(r22<<2)>>2]=r23;_memcpy(r23,HEAP32[r2>>2],r20)|0;r23=HEAP32[HEAP32[r19>>2]+(r14+r22<<2)>>2];HEAP32[r18+(r15+r22<<2)>>2]=r23;_memcpy(r23,HEAP32[r21>>2],r20)|0;r22=r22+1|0}r22=r16-r14|0;r20=r1+56|0;r21=r14;while(1){if((r21|0)>=(r22|0)){break}FUNCTION_TABLE[HEAP32[r20>>2]](r1,r18+(r21<<2)|0,HEAP32[r6+(r21-r14<<2)>>2]);r21=r21+1|0}if((HEAP32[r1+84>>2]|0)!=0){_feat_lda_transform(r1,r6,r8)}if((HEAP32[r1+32>>2]|0)!=0){_feat_subvec_project(r1,r6,r8)}_free(r17);r24=r8;STACKTOP=r7;return r24}}while(0);r21=HEAP32[r1+20>>2];r14=HEAP32[r1+8>>2];r18=HEAP32[r1+80>>2];HEAP32[r1+76>>2]=r18;r10=r18;r11=r18;r12=r21;r13=r14}r14=r1+76|0;r21=r1+80|0;r18=r10-r11|0;if((r18|0)<0){r25=r10+256-r11|0}else{r25=r18}if(r3){r26=r25}else{r26=(HEAP32[r9>>2]|0)>0?r25+r12|0:r25}r25=(r5|0)==0?r26:r26+r12|0;r26=HEAP32[r9>>2];if((r25+r26|0)>256){r18=256-r25-r12|0;HEAP32[r9>>2]=r18;r27=0;r28=r18}else{r27=r5;r28=r26}_feat_cmn(r1,r2,r28,r4,r27);_feat_agc(r1,r2,HEAP32[r9>>2],r4,r27);do{if(r3){r29=r25}else{if((HEAP32[r9>>2]|0)<=0){r29=r25;break}r4=r1+68|0;r28=r13<<2;r26=0;while(1){r30=HEAP32[r14>>2];if((r26|0)>=(r12|0)){break}HEAP32[r14>>2]=r30+1;_memcpy(HEAP32[HEAP32[r4>>2]+(r30<<2)>>2],HEAP32[r2>>2],r28)|0;HEAP32[r14>>2]=(HEAP32[r14>>2]|0)%256&-1;r26=r26+1|0}HEAP32[r21>>2]=r30;r29=r25-r12|0}}while(0);r25=r1+68|0;r30=r13<<2;r13=0;r3=r29;while(1){if((r13|0)>=(HEAP32[r9>>2]|0)){break}r29=HEAP32[r14>>2];HEAP32[r14>>2]=r29+1;_memcpy(HEAP32[HEAP32[r25>>2]+(r29<<2)>>2],HEAP32[r2+(r13<<2)>>2],r30)|0;HEAP32[r14>>2]=(HEAP32[r14>>2]|0)%256&-1;r13=r13+1|0;r3=r3+1|0}L45:do{if((r27|0)!=0){r13=HEAP32[r14>>2];r2=(r13|0)==0;r9=r2?255:r13-1|0;r29=0;r26=r2?0:r13;while(1){if((r29|0)>=(r12|0)){break L45}HEAP32[r14>>2]=r26+1;r13=HEAP32[r25>>2];_memcpy(HEAP32[r13+(r26<<2)>>2],HEAP32[r13+(r9<<2)>>2],r30)|0;r13=(HEAP32[r14>>2]|0)%256&-1;HEAP32[r14>>2]=r13;r29=r29+1|0;r26=r13}}}while(0);r14=r3-r12|0;if((r14|0)<1){r24=0;STACKTOP=r7;return r24}r3=-r12|0;r30=r1+72|0;r27=r1+56|0;r26=0;while(1){if((r26|0)>=(r14|0)){break}r29=HEAP32[r21>>2];if((r29-r12|0)<0|(r29+r12|0)>255){r9=r3;while(1){if((r9|0)>(r12|0)){break}HEAP32[HEAP32[r30>>2]+(r12+r9<<2)>>2]=HEAP32[HEAP32[r25>>2]+(((HEAP32[r21>>2]+r9+256|0)%256&-1)<<2)>>2];r9=r9+1|0}FUNCTION_TABLE[HEAP32[r27>>2]](r1,HEAP32[r30>>2]+(r12<<2)|0,HEAP32[r6+(r26<<2)>>2])}else{FUNCTION_TABLE[HEAP32[r27>>2]](r1,HEAP32[r25>>2]+(r29<<2)|0,HEAP32[r6+(r26<<2)>>2])}HEAP32[r21>>2]=(HEAP32[r21>>2]+1|0)%256&-1;r26=r26+1|0}if((HEAP32[r1+84>>2]|0)!=0){_feat_lda_transform(r1,r6,r14)}if((HEAP32[r1+32>>2]|0)==0){r24=r14;STACKTOP=r7;return r24}_feat_subvec_project(r1,r6,r14);r24=r14;STACKTOP=r7;return r24}function _feat_cmn(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r6=0;r7=STACKTOP;r8=HEAP32[r1+44>>2];do{if((r4|0)==0|(r5|0)==0){if((r8|0)!=0){break}STACKTOP=r7;return}else{if((r8|0)==2){break}else if((r8|0)!=1){STACKTOP=r7;return}r9=HEAP32[r1+60>>2];r10=HEAP32[r1+48>>2];if((r2|0)==0){___assert_fail(11936,23376,156,51256)}if((r3|0)<1){STACKTOP=r7;return}r11=r9|0;r12=r9+16|0;_memset(HEAP32[r11>>2],0,HEAP32[r12>>2]<<2)|0;r13=0;while(1){if((r13|0)>=(r3|0)){break}r14=HEAP32[r2+(r13<<2)>>2];r15=0;while(1){if((r15|0)>=(HEAP32[r12>>2]|0)){break}r16=HEAP32[r11>>2]+(r15<<2)|0;HEAPF32[r16>>2]=HEAPF32[r16>>2]+HEAPF32[r14+(r15<<2)>>2];r15=r15+1|0}r13=r13+1|0}r13=r3|0;r15=0;while(1){if((r15|0)>=(HEAP32[r12>>2]|0)){break}r14=HEAP32[r11>>2]+(r15<<2)|0;HEAPF32[r14>>2]=HEAPF32[r14>>2]/r13;r15=r15+1|0}_err_msg(1,23376,175,9792,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r15=0;while(1){if((r15|0)>=(HEAP32[r12>>2]|0)){break}_err_msg(2,0,0,33488,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=HEAPF32[HEAP32[r11>>2]+(r15<<2)>>2],r6));STACKTOP=r6;r15=r15+1|0}_err_msg(2,0,0,16600,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;if((r10|0)==0){r15=0;while(1){if((r15|0)>=(r3|0)){break}r13=HEAP32[r2+(r15<<2)>>2];r14=0;while(1){if((r14|0)>=(HEAP32[r12>>2]|0)){break}r16=r13+(r14<<2)|0;HEAPF32[r16>>2]=HEAPF32[r16>>2]-HEAPF32[HEAP32[r11>>2]+(r14<<2)>>2];r14=r14+1|0}r15=r15+1|0}STACKTOP=r7;return}r15=r9+4|0;_memset(HEAP32[r15>>2],0,HEAP32[r12>>2]<<2)|0;r10=0;while(1){if((r10|0)>=(r3|0)){break}r14=HEAP32[r2+(r10<<2)>>2];r13=0;while(1){if((r13|0)>=(HEAP32[r12>>2]|0)){break}r16=HEAPF32[r14+(r13<<2)>>2]-HEAPF32[HEAP32[r11>>2]+(r13<<2)>>2];r17=HEAP32[r15>>2]+(r13<<2)|0;HEAPF32[r17>>2]=HEAPF32[r17>>2]+r16*r16;r13=r13+1|0}r10=r10+1|0}r10=r3|0;r9=0;while(1){r13=HEAP32[r12>>2];if((r9|0)>=(r13|0)){r18=0;r19=r13;break}r13=HEAP32[r15>>2]+(r9<<2)|0;r14=Math_sqrt(r10/HEAPF32[r13>>2]);HEAPF32[r13>>2]=r14;r9=r9+1|0}while(1){if((r18|0)>=(r3|0)){break}r9=HEAP32[r2+(r18<<2)>>2];r10=0;r14=r19;while(1){if((r10|0)>=(r14|0)){break}r13=r9+(r10<<2)|0;HEAPF32[r13>>2]=(HEAPF32[r13>>2]-HEAPF32[HEAP32[r11>>2]+(r10<<2)>>2])*HEAPF32[HEAP32[r15>>2]+(r10<<2)>>2];r10=r10+1|0;r14=HEAP32[r12>>2]}r18=r18+1|0;r19=r14}STACKTOP=r7;return}}while(0);r19=r1+60|0;r18=HEAP32[r19>>2];if((HEAP32[r1+48>>2]|0)!=0){_err_msg(5,35760,162,9728,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;_exit(1)}do{if((r3|0)>=1){r1=r18+16|0;r8=r18+8|0;r4=r18|0;r12=r18+12|0;r15=0;while(1){if((r15|0)>=(r3|0)){break}r11=r2+(r15<<2)|0;r10=0;while(1){if((r10|0)>=(HEAP32[r1>>2]|0)){break}r9=HEAP32[r8>>2]+(r10<<2)|0;HEAPF32[r9>>2]=HEAPF32[r9>>2]+HEAPF32[HEAP32[r11>>2]+(r10<<2)>>2];r9=HEAP32[r11>>2]+(r10<<2)|0;HEAPF32[r9>>2]=HEAPF32[r9>>2]-HEAPF32[HEAP32[r4>>2]+(r10<<2)>>2];r10=r10+1|0}HEAP32[r12>>2]=HEAP32[r12>>2]+1;r15=r15+1|0}if((HEAP32[r12>>2]|0)<=800){break}_err_msg(1,35760,99,14784,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r15=0;while(1){if((r15|0)>=(HEAP32[r1>>2]|0)){break}_err_msg(2,0,0,33488,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=HEAPF32[HEAP32[r4>>2]+(r15<<2)>>2],r6));STACKTOP=r6;r15=r15+1|0}_err_msg(2,0,0,23368,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r15=1/(HEAP32[r12>>2]|0);r10=0;while(1){r20=HEAP32[r1>>2];if((r10|0)>=(r20|0)){break}HEAPF32[HEAP32[r4>>2]+(r10<<2)>>2]=HEAPF32[HEAP32[r8>>2]+(r10<<2)>>2]/(HEAP32[r12>>2]|0);r10=r10+1|0}if((HEAP32[r12>>2]|0)>799){r10=r15*500;r11=0;r14=r20;while(1){if((r11|0)>=(r14|0)){break}r9=HEAP32[r8>>2]+(r11<<2)|0;HEAPF32[r9>>2]=HEAPF32[r9>>2]*r10;r11=r11+1|0;r14=HEAP32[r1>>2]}HEAP32[r12>>2]=500}_err_msg(1,35760,116,11904,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r14=0;while(1){if((r14|0)>=(HEAP32[r1>>2]|0)){break}_err_msg(2,0,0,33488,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=HEAPF32[HEAP32[r4>>2]+(r14<<2)>>2],r6));STACKTOP=r6;r14=r14+1|0}_err_msg(2,0,0,23368,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6}}while(0);if((r5|0)==0){STACKTOP=r7;return}r5=HEAP32[r19>>2];r19=r5+12|0;if((HEAP32[r19>>2]|0)<1){STACKTOP=r7;return}_err_msg(1,35760,131,14784,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r20=r5+16|0;r2=r5|0;r3=0;while(1){if((r3|0)>=(HEAP32[r20>>2]|0)){break}_err_msg(2,0,0,33488,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=HEAPF32[HEAP32[r2>>2]+(r3<<2)>>2],r6));STACKTOP=r6;r3=r3+1|0}_err_msg(2,0,0,23368,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r3=1/(HEAP32[r19>>2]|0);r18=r5+8|0;r5=0;while(1){r21=HEAP32[r20>>2];if((r5|0)>=(r21|0)){break}HEAPF32[HEAP32[r2>>2]+(r5<<2)>>2]=HEAPF32[HEAP32[r18>>2]+(r5<<2)>>2]/(HEAP32[r19>>2]|0);r5=r5+1|0}if((HEAP32[r19>>2]|0)>800){r5=r3*500;r3=0;r14=r21;while(1){if((r3|0)>=(r14|0)){break}r21=HEAP32[r18>>2]+(r3<<2)|0;HEAPF32[r21>>2]=HEAPF32[r21>>2]*r5;r3=r3+1|0;r14=HEAP32[r20>>2]}HEAP32[r19>>2]=500}_err_msg(1,35760,149,11904,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;r19=0;while(1){if((r19|0)>=(HEAP32[r20>>2]|0)){break}_err_msg(2,0,0,33488,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=HEAPF32[HEAP32[r2>>2]+(r19<<2)>>2],r6));STACKTOP=r6;r19=r19+1|0}_err_msg(2,0,0,23368,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;STACKTOP=r7;return}function _feat_agc(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r6=0;r7=STACKTOP;r8=HEAP32[r1+52>>2];do{if((r4|0)==0|(r5|0)==0){if((r8|0)!=0){break}STACKTOP=r7;return}else{if((r8|0)==2){break}else if((r8|0)==1){r9=HEAP32[r1+64>>2];if((r3|0)<1){STACKTOP=r7;return}r10=HEAPF32[HEAP32[r2>>2]>>2];r11=r9+4|0;HEAPF32[r11>>2]=r10;r12=r9+8|0;r9=1;r13=r10;while(1){if((r9|0)>=(r3|0)){break}r10=HEAPF32[HEAP32[r2+(r9<<2)>>2]>>2];if(r10>r13){HEAPF32[r11>>2]=r10;HEAP32[r12>>2]=1;r14=r10}else{r14=r13}r9=r9+1|0;r13=r14}_err_msg(1,17936,123,11952,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=r13,r6));STACKTOP=r6;r9=0;while(1){if((r9|0)>=(r3|0)){break}r12=HEAP32[r2+(r9<<2)>>2];HEAPF32[r12>>2]=HEAPF32[r12>>2]-HEAPF32[r11>>2];r9=r9+1|0}STACKTOP=r7;return}else if((r8|0)==3){r9=HEAP32[r1+64>>2];r11=0;r13=HEAPF32[HEAP32[r2>>2]>>2];while(1){if((r11|0)>=(r3|0)){break}r12=HEAPF32[HEAP32[r2+(r11<<2)>>2]>>2];r11=r11+1|0;r13=r12<r13?r12:r13}r11=r13+HEAPF32[r9+20>>2];r12=0;r10=0;r15=0;while(1){if((r12|0)>=(r3|0)){break}r16=HEAPF32[HEAP32[r2+(r12<<2)>>2]>>2];if(r16<r11){r17=r10+r16;r18=r15+1|0}else{r17=r10;r18=r15}r12=r12+1|0;r10=r17;r15=r18}r12=r10/(r15|0);_err_msg(1,17936,208,6720,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=r12,r6));STACKTOP=r6;r11=0;while(1){if((r11|0)>=(r3|0)){break}r9=HEAP32[r2+(r11<<2)>>2];HEAPF32[r9>>2]=HEAPF32[r9>>2]-r12;r11=r11+1|0}STACKTOP=r7;return}else{STACKTOP=r7;return}}}while(0);r18=r1+64|0;r1=HEAP32[r18>>2];L39:do{if((r3|0)>=1){r17=r1+4|0;r8=r1+8|0;r14=r1|0;r4=0;while(1){if((r4|0)>=(r3|0)){break L39}r11=r2+(r4<<2)|0;r12=HEAP32[r11>>2];r15=HEAPF32[r12>>2];if(r15>HEAPF32[r17>>2]){HEAPF32[r17>>2]=r15;HEAP32[r8>>2]=1;r10=HEAP32[r11>>2];r19=r10;r20=HEAPF32[r10>>2]}else{r19=r12;r20=r15}HEAPF32[r19>>2]=r20-HEAPF32[r14>>2];r4=r4+1|0}}}while(0);if((r5|0)==0){STACKTOP=r7;return}r5=HEAP32[r18>>2];r18=r5+8|0;r20=HEAPF32[r5+4>>2];do{if((HEAP32[r18>>2]|0)==0){r21=r20;r22=HEAPF32[r5>>2]}else{r19=r5+16|0;r2=HEAPF32[r19>>2]+r20;HEAPF32[r19>>2]=r2;r3=r5+12|0;r1=HEAP32[r3>>2]+1|0;HEAP32[r3>>2]=r1;r4=r2/(r1|0);HEAPF32[r5>>2]=r4;if((r1|0)!=8){r21=r20;r22=r4;break}HEAPF32[r19>>2]=r2*.5;HEAP32[r3>>2]=4;r21=r20;r22=r4}}while(0);_err_msg(1,17936,172,8096,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r6>>3]=r21,HEAPF64[r6+8>>3]=r22,r6));STACKTOP=r6;HEAP32[r18>>2]=0;HEAPF32[r5+4>>2]=-1e3;STACKTOP=r7;return}function _feat_subvec_project(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=r1+32|0;if((HEAP32[r4>>2]|0)==0){return}r5=r1+36|0;r6=r1+24|0;r7=r1+40|0;r1=0;while(1){if(r1>>>0>=r3>>>0){break}r8=r2+(r1<<2)|0;r9=0;r10=HEAP32[r5>>2];while(1){if((r9|0)>=(HEAP32[r6>>2]|0)){break}r11=HEAP32[HEAP32[r4>>2]+(r9<<2)>>2];r12=r10;while(1){if((r11|0)==0){break}r13=HEAP32[r11>>2];if((r13|0)==-1){break}HEAPF32[r12>>2]=HEAPF32[HEAP32[HEAP32[r8>>2]>>2]+(r13<<2)>>2];r11=r11+4|0;r12=r12+4|0}r9=r9+1|0;r10=r12}_memcpy(HEAP32[HEAP32[r8>>2]>>2],HEAP32[r5>>2],HEAP32[r7>>2]<<2)|0;r1=r1+1|0}return}function _feat_lda_transform(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12;r4=r1+16|0;r5=___ckd_calloc__(HEAP32[HEAP32[r4>>2]>>2],4,46448,144);r6=r5;r7=r1+92|0;r8=r1+84|0;r1=0;while(1){if(r1>>>0>=r3>>>0){break}_memset(r5,0,HEAP32[HEAP32[r4>>2]>>2]<<2)|0;r9=r2+(r1<<2)|0;r10=0;while(1){if(r10>>>0>=HEAP32[r7>>2]>>>0){break}r11=r6+(r10<<2)|0;r12=0;while(1){if(r12>>>0>=HEAP32[HEAP32[r4>>2]>>2]>>>0){break}HEAPF32[r11>>2]=HEAPF32[r11>>2]+HEAPF32[HEAP32[HEAP32[r9>>2]>>2]+(r12<<2)>>2]*HEAPF32[HEAP32[HEAP32[HEAP32[r8>>2]>>2]+(r10<<2)>>2]+(r12<<2)>>2];r12=r12+1|0}r10=r10+1|0}_memcpy(HEAP32[HEAP32[r9>>2]>>2],r5,HEAP32[HEAP32[r4>>2]>>2]<<2)|0;r1=r1+1|0}_free(r5);return}function _fsg_model_trans_add(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+16|0;r8=r7;r9=r7+8;r10=r1+48|0;r11=HEAP32[HEAP32[r10>>2]+(r2<<3)+4>>2];if((r11|0)==0){r12=_hash_table_new(5,0);HEAP32[HEAP32[r10>>2]+(r2<<3)+4>>2]=r12;r12=HEAP32[HEAP32[r10>>2]+(r2<<3)+4>>2];r13=r8;r14=r9;HEAP32[r8>>2]=r3;if((r12|0)==0){r15=0;r16=r13;r17=r14}else{r18=r12;r19=r13;r20=r14;r6=4}}else{HEAP32[r8>>2]=r3;r18=r11;r19=r8;r20=r9;r6=4}do{if(r6==4){if((_hash_table_lookup_bkey(r18,r19,r9)|0)<0){r15=0;r16=r19;r17=r20;break}r15=HEAP32[r9>>2];r16=r19;r17=r20}}while(0);r20=r15;while(1){if((r20|0)==0){r6=12;break}r21=HEAP32[r20>>2];if((HEAP32[r21+12>>2]|0)==(r5|0)){r6=9;break}r20=HEAP32[r20+8>>2]}if(r6==9){r20=r21+8|0;if((HEAP32[r20>>2]|0)>=(r4|0)){STACKTOP=r7;return}HEAP32[r20>>2]=r4;STACKTOP=r7;return}else if(r6==12){r6=HEAP32[r1+52>>2];r1=r6|0;r20=HEAP32[r1>>2];if((r20|0)==0){_listelem_add_block(r6,34544,141);r22=HEAP32[r1>>2]}else{r22=r20}HEAP32[r1>>2]=HEAP32[r22>>2];r1=r6+24|0;HEAP32[r1>>2]=HEAP32[r1>>2]+1;HEAP32[r22>>2]=r2;r1=r22+4|0;HEAP32[r1>>2]=r3;HEAP32[r22+8>>2]=r4;HEAP32[r22+12>>2]=r5;r5=_glist_add_ptr(r15,r22);r22=HEAP32[HEAP32[r10>>2]+(r2<<3)+4>>2];r2=r1;r1=_makekey(r2,4);r10=_key2hash(r22,r1);_free(r1);_enter(r22,r10,r2,4,r5,1);STACKTOP=r7;return}}function _fsg_model_null_trans_add(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+16|0;r8=r7;r9=r7+8;if((r4|0)>0){_err_msg(5,34544,163,46392,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r2,HEAP32[r6+8>>2]=r3,r6));STACKTOP=r6;_exit(1)}if((r2|0)==(r3|0)){r10=-1;STACKTOP=r7;return r10}r6=r1+48|0;r11=HEAP32[HEAP32[r6>>2]+(r2<<3)>>2];if((r11|0)==0){r12=_hash_table_new(5,0);HEAP32[HEAP32[r6>>2]+(r2<<3)>>2]=r12;r12=HEAP32[HEAP32[r6>>2]+(r2<<3)>>2];r13=r8;r14=r9;HEAP32[r8>>2]=r3;if((r12|0)==0){r15=r13;r16=r14;r5=8}else{r17=r12;r18=r13;r19=r14;r5=7}}else{HEAP32[r8>>2]=r3;r17=r11;r18=r8;r19=r9;r5=7}do{if(r5==7){if((_hash_table_lookup_bkey(r17,r18,r9)|0)<0){r15=r18;r16=r19;r5=8;break}r8=HEAP32[r9>>2];if((r8|0)==0){break}r11=r8+8|0;if((HEAP32[r11>>2]|0)>=(r4|0)){r10=-1;STACKTOP=r7;return r10}HEAP32[r11>>2]=r4;r10=0;STACKTOP=r7;return r10}}while(0);r9=HEAP32[r1+52>>2];r1=r9|0;r5=HEAP32[r1>>2];if((r5|0)==0){_listelem_add_block(r9,34544,185);r20=HEAP32[r1>>2]}else{r20=r5}HEAP32[r1>>2]=HEAP32[r20>>2];r1=r9+24|0;HEAP32[r1>>2]=HEAP32[r1>>2]+1;HEAP32[r20>>2]=r2;r1=r20+4|0;HEAP32[r1>>2]=r3;HEAP32[r20+8>>2]=r4;HEAP32[r20+12>>2]=-1;r4=HEAP32[HEAP32[r6>>2]+(r2<<3)>>2];r2=r1;r1=_makekey(r2,4);r6=_key2hash(r4,r1);_free(r1);if((r20|0)==(_enter(r4,r6,r2,4,r20,0)|0)){r10=1;STACKTOP=r7;return r10}else{___assert_fail(33272,34544,195,50608)}}function _fsg_model_null_trans_closure(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=r5+8;_err_msg(1,34544,215,23224,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;L1:do{if((r2|0)==0){r8=r1+32|0;r9=r1+48|0;r10=0;r11=0;while(1){if((r10|0)>=(HEAP32[r8>>2]|0)){r12=r11;r13=r9;break L1}r14=HEAP32[HEAP32[r9>>2]+(r10<<3)>>2];L7:do{if((r14|0)==0){r15=r11}else{r16=_hash_table_iter(r14);r17=r11;while(1){if((r16|0)==0){r15=r17;break L7}r18=_glist_add_ptr(r17,HEAP32[HEAP32[r16+4>>2]+8>>2]);r16=_hash_table_iter_next(r16);r17=r18}}}while(0);r10=r10+1|0;r11=r15}}else{r12=r2;r13=r1+48|0}}while(0);r2=r6;r15=r12;r11=r12;r12=0;r10=0;while(1){if((r15|0)==0){if((r12|0)==0){r3=25;break}else{r15=r11;r11=r11;r12=0;r10=r10;continue}}r9=HEAP32[r15>>2];if((HEAP32[r9+12>>2]|0)>=0){r3=13;break}r8=HEAP32[HEAP32[r13>>2]+(HEAP32[r9+4>>2]<<3)>>2];L20:do{if((r8|0)==0){r19=r11;r20=r12;r21=r10}else{r14=r9;r17=r9+8|0;r16=_hash_table_iter(r8);r18=r11;r22=r12;r23=r10;while(1){if((r16|0)==0){r19=r18;r20=r22;r21=r23;break L20}r24=HEAP32[HEAP32[r16+4>>2]+8>>2];r25=_fsg_model_null_trans_add(r1,HEAP32[r14>>2],HEAP32[r24+4>>2],HEAP32[r17>>2]+HEAP32[r24+8>>2]|0);do{if((r25|0)>-1){if((r25|0)<=0){r26=r18;r27=1;r28=r23;break}r29=HEAP32[r14>>2];HEAP32[r6>>2]=HEAP32[r24+4>>2];r30=HEAP32[HEAP32[r13>>2]+(r29<<3)>>2];if((r30|0)==0){r31=0}else{r29=(_hash_table_lookup_bkey(r30,r2,r7)|0)<0;r31=r29?0:HEAP32[r7>>2]}r26=_glist_add_ptr(r18,r31);r27=1;r28=r23+1|0}else{r26=r18;r27=r22;r28=r23}}while(0);r16=_hash_table_iter_next(r16);r18=r26;r22=r27;r23=r28}}}while(0);r15=HEAP32[r15+8>>2];r11=r19;r12=r20;r10=r21}if(r3==13){___assert_fail(17792,34544,248,50632)}else if(r3==25){_err_msg(1,34544,277,14680,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r10,r4));STACKTOP=r4;STACKTOP=r5;return r11}}function _fsg_model_arcs(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10;r3=0;r4=STACKTOP;r5=r1+48|0;r1=HEAP32[r5>>2];do{if((HEAP32[r1+(r2<<3)+4>>2]|0)==0){if((HEAP32[r1+(r2<<3)>>2]|0)==0){r6=0}else{break}STACKTOP=r4;return r6}}while(0);r1=_malloc(12);if((r1|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=12,HEAP32[r3+16>>2]=34544,HEAP32[r3+24>>2]=315,r3));STACKTOP=r3}if((HEAP32[r1-4>>2]&3|0)!=0){_memset(r1,0,12)|0}r3=r1;r7=HEAP32[r5>>2];r8=HEAP32[r7+(r2<<3)>>2];if((r8|0)==0){r9=r7}else{r7=_hash_table_iter(r8);HEAP32[r1+4>>2]=r7;r9=HEAP32[r5>>2]}r5=HEAP32[r9+(r2<<3)+4>>2];if((r5|0)==0){r10=HEAP32[r1>>2]}else{r2=_hash_table_iter(r5);HEAP32[r1>>2]=r2;r10=r2}if((r10|0)==0){r6=r3;STACKTOP=r4;return r6}HEAP32[r1+8>>2]=HEAP32[HEAP32[r10+4>>2]+8>>2];r6=r3;STACKTOP=r4;return r6}function _fsg_arciter_next(r1){var r2,r3,r4,r5,r6,r7,r8;r2=0;r3=r1+8|0;r4=HEAP32[r3>>2];do{if((r4|0)==0){r5=r1+4|0;r6=HEAP32[r5>>2];if((r6|0)==0){r2=8;break}r7=_hash_table_iter_next(r6);HEAP32[r5>>2]=r7;if((r7|0)==0){r2=8}else{r8=r1}}else{r7=HEAP32[r4+8>>2];HEAP32[r3>>2]=r7;if((r7|0)!=0){r8=r1;break}r7=r1|0;r5=_hash_table_iter_next(HEAP32[r7>>2]);HEAP32[r7>>2]=r5;if((r5|0)==0){if((HEAP32[r1+4>>2]|0)==0){r2=8;break}else{r8=r1;break}}else{HEAP32[r3>>2]=HEAP32[HEAP32[r5+4>>2]+8>>2];r8=r1;break}}}while(0);do{if(r2==8){if((r1|0)==0){r8=0;break}_free(0);_free(HEAP32[r1>>2]);_free(r1);r8=0}}while(0);return r8}function _fsg_model_word_add(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r3=0;r4=STACKTOP;r5=r1+8|0;r6=HEAP32[r5>>2];r7=r1+16|0;r8=0;while(1){if((r8|0)>=(r6|0)){break}r9=HEAP32[HEAP32[r7>>2]+(r8<<2)>>2];r10=HEAP8[r9];r11=HEAP8[r2];if(r10<<24>>24!=r11<<24>>24|r10<<24>>24==0|r11<<24>>24==0){r12=r10;r13=r11}else{r11=r9;r9=r2;while(1){r10=r11+1|0;r14=r9+1|0;r15=HEAP8[r10];r16=HEAP8[r14];if(r15<<24>>24!=r16<<24>>24|r15<<24>>24==0|r16<<24>>24==0){r12=r15;r13=r16;break}else{r11=r10;r9=r14}}}if(r12<<24>>24==r13<<24>>24){break}r8=r8+1|0}if(!((r8|0)==(r6|0)|(r8|0)==-1)){r17=r8;STACKTOP=r4;return r17}r8=r1+12|0;do{if((r6|0)==(HEAP32[r8>>2]|0)){r13=r6+10|0;HEAP32[r8>>2]=r13;r12=r13<<2;r13=_realloc(HEAP32[r7>>2],r12);if((r13|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r12,HEAP32[r3+8>>2]=34544,HEAP32[r3+16>>2]=407,r3));STACKTOP=r3}HEAP32[r7>>2]=r13;r13=r1+20|0;r12=HEAP32[r13>>2];if((r12|0)!=0){r9=(r6+31|0)>>>5;r11=(HEAP32[r8>>2]+31|0)>>>5;r14=r11<<2;r10=_realloc(r12,r14);if((r10|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r14,HEAP32[r3+8>>2]=29160,HEAP32[r3+16>>2]=72,r3));STACKTOP=r3}r14=r10;if(r11>>>0>r9>>>0){_memset(r14+(r9<<2)|0,0,r11-r9<<2)|0}HEAP32[r13>>2]=r14}r14=r1+24|0;r13=HEAP32[r14>>2];if((r13|0)==0){break}r9=(r6+31|0)>>>5;r11=(HEAP32[r8>>2]+31|0)>>>5;r10=r11<<2;r12=_realloc(r13,r10);if((r12|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r10,HEAP32[r3+8>>2]=29160,HEAP32[r3+16>>2]=72,r3));STACKTOP=r3}r10=r12;if(r11>>>0>r9>>>0){_memset(r10+(r9<<2)|0,0,r11-r9<<2)|0}HEAP32[r14>>2]=r10}}while(0);HEAP32[r5>>2]=HEAP32[r5>>2]+1;r5=___ckd_salloc__(r2,34544,416);HEAP32[HEAP32[r7>>2]+(r6<<2)>>2]=r5;r17=r6;STACKTOP=r4;return r17}function _fsg_model_add_silence(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r4=0;r5=STACKTOP;_err_msg(1,34544,428,11784,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r2,r4));STACKTOP=r4;r6=_fsg_model_word_add(r1,r2);r2=HEAP32[r1+28>>2];if(r3>0){r7=Math_log(r3);r8=(r7*HEAPF64[r2+48>>3]&-1)>>HEAP8[r2+9|0]}else{r8=HEAP32[r2+64>>2]}r2=r8*HEAPF32[r1+44>>2]&-1;r8=r1+20|0;r7=HEAP32[r8>>2];if((r7|0)==0){r3=___ckd_calloc__((HEAP32[r1+12>>2]+31|0)/32&-1,4,34544,433);HEAP32[r8>>2]=r3;r9=r3}else{r9=r7}r7=r9+(((r6|0)/32&-1)<<2)|0;HEAP32[r7>>2]=HEAP32[r7>>2]|1<<(r6&31);r7=r1+32|0;r9=0;r3=0;while(1){if((r9|0)>=(HEAP32[r7>>2]|0)){break}_fsg_model_trans_add(r1,r9,r9,r2,r6);r9=r9+1|0;r3=r3+1|0}_err_msg(1,34544,448,9648,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r3,r4));STACKTOP=r4;STACKTOP=r5;return}function _fsg_model_init(r1,r2,r3,r4){var r5,r6,r7,r8;r5=0;r6=STACKTOP;r7=_malloc(56);if((r7|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=56,HEAP32[r5+16>>2]=34544,HEAP32[r5+24>>2]=525,r5));STACKTOP=r5}if((HEAP32[r7-4>>2]&3|0)!=0){_memset(r7,0,56)|0}HEAP32[r7>>2]=1;r5=_listelem_alloc_init(16);HEAP32[r7+52>>2]=r5;HEAP32[r7+28>>2]=r2;if((r1|0)==0){r8=0}else{r8=___ckd_salloc__(r1,34544,529)}HEAP32[r7+4>>2]=r8;HEAP32[r7+32>>2]=r4;HEAPF32[r7+44>>2]=r3;r3=___ckd_calloc__(r4,8,34544,533);HEAP32[r7+48>>2]=r3;STACKTOP=r6;return r7}function _nextline_str2words(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+128|0;r8=r7;r9=r8|0;L1:while(1){_free(HEAP32[r3>>2]);r10=0;r11=0;while(1){if((_fgets(r9,128,r1)|0)==0){r12=r10;break}r13=_strlen(r9);if((r10|0)==0){r14=r13+1|0;r15=_malloc(r14);if((r15|0)==0){r5=6;break L1}else{r16=r15;r17=r15;r18=r14}}else{r15=r11-r10|0;r19=r15+r13+1|0;r20=_realloc(r10,r19);if((r20|0)==0){r5=8;break L1}r16=r20+r15|0;r17=r20;r18=r13+1|0}_memcpy(r16,r9,r18)|0;if(r13>>>0<127){r12=r17;break}if((HEAP8[r8+(r13-1)|0]|0)==10){r12=r17;break}else{r10=r17;r11=r16+r13|0}}HEAP32[r3>>2]=r12;if((r12|0)==0){r21=-1;r5=20;break}HEAP32[r2>>2]=HEAP32[r2>>2]+1;r11=HEAP32[r3>>2];if((HEAP8[r11]|0)==35){continue}r22=_str2words(r11,0,0);if((r22|0)!=0){r5=15;break}}if(r5==6){_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r14,HEAP32[r6+8>>2]=11368,HEAP32[r6+16>>2]=377,r6));STACKTOP=r6}else if(r5==8){_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r19,HEAP32[r6+8>>2]=11368,HEAP32[r6+16>>2]=382,r6));STACKTOP=r6}else if(r5==15){r19=HEAP32[r4>>2];do{if((r19|0)==0){r23=___ckd_calloc__(r22,4,34544,112)}else{r14=r22<<2;r2=_realloc(r19,r14);if((r2|0)!=0){r23=r2;break}_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r14,HEAP32[r6+8>>2]=34544,HEAP32[r6+16>>2]=114,r6));STACKTOP=r6}}while(0);r6=r23;HEAP32[r4>>2]=r6;r21=_str2words(HEAP32[r3>>2],r6,r22);STACKTOP=r7;return r21}else if(r5==20){STACKTOP=r7;return r21}}function _fsg_model_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=r1+8|0;r2=r1+16|0;r4=0;while(1){if((r4|0)>=(HEAP32[r3>>2]|0)){break}_free(HEAP32[HEAP32[r2>>2]+(r4<<2)>>2]);r4=r4+1|0}r4=r1+32|0;r3=r1+48|0;r5=0;while(1){r6=HEAP32[r3>>2];if((r5|0)>=(HEAP32[r4>>2]|0)){break}r7=HEAP32[r6+(r5<<3)+4>>2];if((r7|0)==0){r8=0}else{r9=_hash_table_iter(r7);while(1){if((r9|0)==0){break}r7=HEAP32[HEAP32[r9+4>>2]+8>>2];while(1){if((r7|0)==0){break}r10=HEAP32[r7+8>>2];_free(r7);r7=r10}r9=_hash_table_iter_next(r9)}r8=HEAP32[HEAP32[r3>>2]+(r5<<3)+4>>2]}_hash_table_free(r8);_hash_table_free(HEAP32[HEAP32[r3>>2]+(r5<<3)>>2]);r5=r5+1|0}_free(r6);_free(HEAP32[r2>>2]);_listelem_alloc_free(HEAP32[r1+52>>2]);_free(HEAP32[r1+20>>2]);_free(HEAP32[r1+24>>2]);_free(HEAP32[r1+4>>2]);_free(r1);return}function _jsgf_grammar_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;if((HEAP32[r1+24>>2]|0)!=0){r2=r1+12|0;r3=HEAP32[r2>>2];_free(r3);r4=r1|0;r5=HEAP32[r4>>2];_free(r5);r6=r1+4|0;r7=HEAP32[r6>>2];_free(r7);r8=r1+8|0;r9=HEAP32[r8>>2];_free(r9);r10=r1;_free(r10);return}r11=r1+16|0;r12=_hash_table_iter(HEAP32[r11>>2]);while(1){if((r12|0)==0){break}r13=r12+4|0;_free(HEAP32[HEAP32[r13>>2]>>2]);r14=HEAP32[HEAP32[r13>>2]+8>>2];do{if((r14|0)!=0){r13=r14;r15=HEAP32[r13>>2]-1|0;HEAP32[r13>>2]=r15;if((r15|0)>0){break}_jsgf_rhs_free(HEAP32[r14+12>>2]);_free(HEAP32[r14+4>>2]);_free(r14)}}while(0);r12=_hash_table_iter_next(r12)}_hash_table_free(HEAP32[r11>>2]);r11=r1+20|0;r12=_hash_table_iter(HEAP32[r11>>2]);while(1){if((r12|0)==0){break}r14=r12+4|0;_free(HEAP32[HEAP32[r14>>2]>>2]);_jsgf_grammar_free(HEAP32[HEAP32[r14>>2]+8>>2]);r12=_hash_table_iter_next(r12)}_hash_table_free(HEAP32[r11>>2]);r11=r1+28|0;r12=r11;while(1){r14=HEAP32[r12>>2];if((r14|0)==0){break}_free(HEAP32[r14>>2]);r12=r14+8|0}r12=HEAP32[r11>>2];while(1){if((r12|0)==0){break}r11=HEAP32[r12+8>>2];_free(r12);r12=r11}r12=r1+36|0;r11=r12;while(1){r14=HEAP32[r11>>2];if((r14|0)==0){break}_free(HEAP32[r14>>2]);r11=r14+8|0}r11=HEAP32[r12>>2];while(1){if((r11|0)==0){break}r12=HEAP32[r11+8>>2];_free(r11);r11=r12}r2=r1+12|0;r3=HEAP32[r2>>2];_free(r3);r4=r1|0;r5=HEAP32[r4>>2];_free(r5);r6=r1+4|0;r7=HEAP32[r6>>2];_free(r7);r8=r1+8|0;r9=HEAP32[r8>>2];_free(r9);r10=r1;_free(r10);return}function _jsgf_kleene_new(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r4=0;r5=STACKTOP;r6=_malloc(8);if((r6|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=186,r4));STACKTOP=r4}if((HEAP32[r6-4>>2]&3|0)!=0){r7=r6;r8=r7|0;tempBigInt=0;HEAP8[r8]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r8+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r8+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r8+3|0]=tempBigInt;r8=r7+4|0;tempBigInt=0;HEAP8[r8]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r8+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r8+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r8+3|0]=tempBigInt}r8=r6;if((r3|0)==0){r3=_malloc(12);if((r3|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}if((HEAP32[r3-4>>2]&3|0)!=0){_memset(r3,0,12)|0}r7=___ckd_salloc__(23088,33352,67);HEAP32[r3>>2]=r7;HEAPF32[r3+8>>2]=1;r7=_glist_add_ptr(0,r3);HEAP32[r6>>2]=r7}else{r7=HEAP32[r2>>2];r3=_malloc(12);if((r3|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}if((HEAP32[r3-4>>2]&3|0)!=0){_memset(r3,0,12)|0}r9=___ckd_salloc__(r7,33352,67);HEAP32[r3>>2]=r9;HEAPF32[r3+8>>2]=1;r9=_glist_add_ptr(0,r3);HEAP32[r6>>2]=r9}r9=_jsgf_define_rule(r1,0,r8,0);r8=r9+4|0;r1=HEAP32[r8>>2];r6=_malloc(12);if((r6|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}if((HEAP32[r6-4>>2]&3|0)!=0){_memset(r6,0,12)|0}r3=___ckd_salloc__(r1,33352,67);HEAP32[r6>>2]=r3;HEAPF32[r6+8>>2]=1;r3=_malloc(8);if((r3|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=193,r4));STACKTOP=r4}if((HEAP32[r3-4>>2]&3|0)!=0){r1=r3;r7=r1|0;tempBigInt=0;HEAP8[r7]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+3|0]=tempBigInt;r7=r1+4|0;tempBigInt=0;HEAP8[r7]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+3|0]=tempBigInt}r7=_glist_add_ptr(0,r6);r6=r3;HEAP32[r6>>2]=r7;r1=_glist_add_ptr(r7,r2);HEAP32[r6>>2]=r1;HEAP32[HEAP32[r9+12>>2]+4>>2]=r3;r3=HEAP32[r8>>2];r8=_malloc(12);if((r8|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}if((HEAP32[r8-4>>2]&3|0)==0){r10=r8;r11=___ckd_salloc__(r3,33352,67);r12=r8;HEAP32[r12>>2]=r11;r13=r8+8|0;r14=r13;HEAPF32[r14>>2]=1;STACKTOP=r5;return r10}_memset(r8,0,12)|0;r10=r8;r11=___ckd_salloc__(r3,33352,67);r12=r8;HEAP32[r12>>2]=r11;r13=r8+8|0;r14=r13;HEAPF32[r14>>2]=1;STACKTOP=r5;return r10}function _jsgf_define_rule(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=0;r6=STACKTOP;do{if((r2|0)==0){r7=r1+12|0;r8=_strlen(HEAP32[r7>>2])+16|0;r9=_malloc(r8);if((r9|0)==0){_ckd_fail(45472,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r8,HEAP32[r5+8>>2]=33352,HEAP32[r5+16>>2]=646,r5));STACKTOP=r5}else{r8=HEAP32[HEAP32[r1+16>>2]+8>>2];_sprintf(r9,11768,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=HEAP32[r7>>2],HEAP32[r5+8>>2]=r8,r5));STACKTOP=r5;r10=r9;break}}else{r10=_jsgf_fullname(r1,r2)}}while(0);r2=_malloc(16);if((r2|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=16,HEAP32[r5+16>>2]=33352,HEAP32[r5+24>>2]=656,r5));STACKTOP=r5}if((HEAP32[r2-4>>2]&3|0)!=0){_memset(r2,0,16)|0}r9=r2;HEAP32[r2>>2]=1;r8=___ckd_salloc__(r10,33352,658);HEAP32[r2+4>>2]=r8;HEAP32[r2+12>>2]=r3;HEAP32[r2+8>>2]=r4;_err_msg(1,33352,664,9584,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=(r4|0)!=0?7960:67928,HEAP32[r5+8>>2]=r8,r5));STACKTOP=r5;r8=HEAP32[r1+16>>2];r1=_key2hash(r8,r10);if((_enter(r8,r1,r10,_strlen(r10),r2,0)|0)==(r2|0)){STACKTOP=r6;return r9}_err_msg(3,33352,667,49224,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r10,r5));STACKTOP=r5;STACKTOP=r6;return r9}function _jsgf_parse_file(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543,r544,r545,r546,r547,r548,r549,r550,r551,r552,r553,r554,r555,r556,r557,r558,r559,r560,r561,r562,r563,r564,r565,r566,r567,r568,r569,r570,r571,r572,r573,r574,r575,r576,r577,r578,r579,r580,r581,r582,r583,r584,r585,r586,r587,r588,r589,r590,r591,r592,r593,r594,r595,r596,r597,r598,r599,r600,r601,r602,r603,r604,r605,r606,r607,r608,r609,r610,r611,r612,r613,r614,r615,r616,r617,r618,r619,r620,r621,r622,r623,r624,r625,r626,r627,r628,r629,r630,r631,r632,r633,r634,r635,r636,r637,r638,r639,r640,r641,r642,r643,r644,r645,r646,r647,r648,r649,r650,r651,r652,r653,r654,r655,r656,r657,r658,r659,r660,r661,r662,r663,r664,r665,r666,r667,r668,r669,r670,r671,r672,r673,r674,r675,r676,r677,r678,r679,r680,r681,r682,r683,r684,r685,r686,r687,r688,r689,r690,r691,r692,r693,r694,r695,r696,r697,r698,r699,r700,r701,r702,r703,r704,r705,r706,r707,r708,r709,r710,r711,r712,r713,r714,r715,r716,r717,r718,r719,r720,r721,r722,r723,r724,r725,r726,r727,r728,r729,r730,r731,r732,r733,r734,r735,r736,r737,r738,r739,r740,r741,r742,r743,r744,r745,r746,r747,r748,r749,r750,r751,r752,r753,r754,r755,r756,r757,r758,r759,r760,r761,r762,r763,r764,r765,r766,r767,r768,r769,r770,r771,r772,r773,r774,r775,r776,r777,r778,r779,r780,r781,r782,r783,r784,r785,r786,r787,r788,r789,r790,r791,r792,r793,r794,r795,r796,r797,r798,r799,r800,r801,r802,r803,r804,r805,r806,r807,r808,r809,r810,r811,r812,r813,r814,r815,r816,r817,r818,r819,r820,r821,r822,r823,r824,r825,r826,r827,r828,r829,r830,r831,r832,r833,r834,r835,r836,r837,r838,r839,r840,r841,r842,r843,r844,r845,r846,r847,r848,r849,r850,r851,r852,r853,r854,r855,r856,r857,r858,r859,r860,r861,r862,r863,r864,r865,r866,r867,r868,r869,r870,r871,r872,r873,r874,r875,r876,r877,r878,r879,r880,r881,r882,r883,r884,r885,r886,r887,r888,r889,r890,r891,r892,r893,r894,r895,r896,r897,r898,r899,r900,r901,r902,r903,r904,r905,r906,r907,r908,r909,r910,r911,r912,r913,r914,r915,r916,r917,r918,r919,r920,r921,r922,r923,r924,r925,r926,r927,r928,r929,r930,r931,r932,r933,r934,r935,r936,r937,r938,r939,r940,r941,r942,r943,r944,r945,r946,r947,r948,r949,r950,r951,r952,r953,r954,r955,r956,r957,r958,r959,r960,r961,r962,r963,r964,r965,r966,r967,r968,r969,r970,r971,r972,r973,r974,r975,r976,r977,r978,r979,r980,r981,r982,r983,r984,r985,r986,r987,r988,r989,r990,r991,r992,r993,r994,r995,r996,r997,r998,r999,r1000,r1001,r1002,r1003,r1004,r1005,r1006,r1007,r1008,r1009,r1010,r1011,r1012,r1013,r1014,r1015,r1016,r1017,r1018,r1019,r1020,r1021,r1022,r1023,r1024,r1025,r1026,r1027,r1028,r1029,r1030,r1031,r1032,r1033,r1034,r1035,r1036,r1037,r1038,r1039,r1040,r1041,r1042,r1043,r1044,r1045,r1046;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+1336|0;r6=r5;r7=r5+8;r8=r5+408;r9=r5+1208;r10=_malloc(96);r11=(r10|0)==0;if(r11){r12=___errno_location();HEAP32[r12>>2]=12}else{_memset(r10,0,96)|0}r13=(r1|0)==0;do{if(r13){r14=HEAP32[_stdin>>2];r15=r10+4|0;r16=r15;HEAP32[r16>>2]=r14;r17=0}else{r18=_fopen(r1,26184);r19=(r18|0)==0;if(!r19){r20=r10+4|0;r21=r20;HEAP32[r21>>2]=r18;r17=r18;break}r22=___errno_location();r23=HEAP32[r22>>2];r24=_malloc(35);_memcpy(r24,35512,30)|0;r25=_strlen(r24);r26=r24+r25|0;HEAP8[r26]=HEAP8[6400];HEAP8[r26+1|0]=HEAP8[6401];HEAP8[r26+2|0]=HEAP8[6402];HEAP8[r26+3|0]=HEAP8[6403];HEAP8[r26+4|0]=HEAP8[6404];HEAP8[r26+5|0]=HEAP8[6405];r27=_strerror(r23);_err_msg(4,33352,829,r24,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r1,HEAP32[r4+8>>2]=r27,r4));STACKTOP=r4;_free(r24);r28=0;STACKTOP=r5;return r28}}while(0);r29=_malloc(44);r30=(r29|0)==0;if(r30){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=44,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=87,r4));STACKTOP=r4}r31=r29-4|0;r32=r31;r33=HEAP32[r32>>2];r34=r33&3;r35=(r34|0)==0;if(!r35){_memset(r29,0,44)|0}r36=r29;r37=(r2|0)==0;do{if(r37){r38=_hash_table_new(64,0);r39=r29+16|0;r40=r39;HEAP32[r40>>2]=r38;r41=_hash_table_new(16,0);r42=r29+20|0;r43=r42;HEAP32[r43>>2]=r41;r44=_getenv(46168);r45=(r44|0)==0;if(r45){r46=r29+28|0;r47=r46;r48=HEAP32[r47>>2];r49=___ckd_salloc__(21472,33352,120);r50=_glist_add_ptr(r48,r49);HEAP32[r47>>2]=r50;break}r51=___ckd_salloc__(r44,33352,109);r52=r29+28|0;r53=r52;r54=r51;while(1){r55=_strchr(r54,58);r56=(r55|0)==0;if(r56){break}HEAP8[r55]=0;r57=HEAP32[r53>>2];r58=_glist_add_ptr(r57,r54);HEAP32[r53>>2]=r58;r59=r55+1|0;r54=r59}r60=HEAP32[r53>>2];r61=_glist_add_ptr(r60,r54);HEAP32[r53>>2]=r61;r62=r61;r63=0;while(1){r64=(r62|0)==0;if(r64){break}r65=r62+8|0;r66=HEAP32[r65>>2];HEAP32[r65>>2]=r63;r63=r62;r62=r66}HEAP32[r53>>2]=r63}else{r67=r2+16|0;r68=HEAP32[r67>>2];r69=r29+16|0;r70=r69;HEAP32[r70>>2]=r68;r71=r2+20|0;r72=HEAP32[r71>>2];r73=r29+20|0;r74=r73;HEAP32[r74>>2]=r72;r75=r2+28|0;r76=HEAP32[r75>>2];r77=r29+28|0;r78=r77;HEAP32[r78>>2]=r76;r79=r29+24|0;r80=r79;HEAP32[r80>>2]=r2}}while(0);r81=r6;r82=4;r83=0;r84=r7;r85=400;r86=0;r87=r8;r88=800;r89=0;r90=r9|0;r91=128;r92=0;r93=r7|0;r94=r8|0;r95=r29+12|0;r96=r95;r97=r29;r98=r29+4|0;r99=r98;r100=r29+8|0;r101=r100;r102=r10+92|0;r103=r102;r104=r10+40|0;r105=r104;r106=r10+44|0;r107=r106;r108=r10+4|0;r109=r108;r110=HEAP32[_stdin>>2];r111=r10+8|0;r112=r111;r113=HEAP32[_stdout>>2];r114=r10+20|0;r115=r114;r116=r10+12|0;r117=r116;r118=r10+12|0;r119=r118;r120=r10+20|0;r121=r120;r122=r10+28|0;r123=r122;r124=r10+36|0;r125=r124;r126=r10+80|0;r127=r126;r128=r10+24|0;r129=r10+64|0;r130=r129;r131=r10+68|0;r132=r131;r133=r10+32|0;r134=r133;r135=r10+48|0;r136=r135;r137=r10+36|0;r138=r137;r139=r10+92|0;r140=r139;r141=r6|0;r142=200;r143=r94;r144=r94;r145=r93;r146=r93;r147=0;r148=0;r149=-2;L34:while(1){r150=r148&65535;HEAP16[r145>>1]=r150;r151=r142-1|0;r152=r146+(r151<<1)|0;r153=r152>>>0>r145>>>0;if(r153){r154=r142;r155=r143;r156=r144;r157=r145;r158=r146}else{r159=r145;r160=r146;r161=r159-r160|0;r162=r161>>1;r163=r162+1|0;r164=r142>>>0>9999;if(r164){r165=r90;r166=r145;r167=r146;r3=236;break}r168=r142<<1;r169=r168>>>0>1e4;r170=r169?1e4:r168;r171=r170*6&-1;r172=r171|3;r173=_malloc(r172);r174=(r173|0)==0;if(r174){r165=r90;r166=r145;r167=r146;r3=236;break}r175=r173;r176=r146;r177=r163<<1;_memcpy(r173,r176,r177)|0;r178=r173;r179=r170>>>1;r180=r179&1073741823;r181=r175+(r180<<2)|0;r182=r181;r183=r144;r184=r163<<2;_memcpy(r182,r183,r184)|0;r185=r181|0;r186=(r146|0)==(r93|0);if(!r186){_free(r176)}r187=r178+(r162<<1)|0;r188=r180+r162|0;r189=r175+(r188<<2)|0;r190=r170-1|0;r191=(r190|0)>(r162|0);if(r191){r154=r170;r155=r189;r156=r185;r157=r187;r158=r178}else{r192=r90;r193=1;r194=r187;r195=r178;break}}r196=(r148|0)==7;if(r196){r192=r90;r193=0;r194=r157;r195=r158;break}r197=r148+640|0;r198=HEAP8[r197];r199=r198<<24>>24;r200=r198<<24>>24==-37;do{if(r200){r201=r149;r3=157}else{r202=(r149|0)==-2;L47:do{if(r202){HEAP32[r103>>2]=r6;r203=HEAP32[r105>>2];r204=(r203|0)==0;if(r204){HEAP32[r105>>2]=1;r205=HEAP32[r107>>2];r206=(r205|0)==0;if(r206){HEAP32[r107>>2]=1}r207=HEAP32[r109>>2];r208=(r207|0)==0;if(r208){HEAP32[r109>>2]=r110}r209=HEAP32[r112>>2];r210=(r209|0)==0;if(r210){HEAP32[r112>>2]=r113}r211=HEAP32[r115>>2];r212=(r211|0)==0;if(r212){r3=44}else{r213=HEAP32[r117>>2];r214=r211+(r213<<2)|0;r215=HEAP32[r214>>2];r216=(r215|0)==0;if(r216){r3=44}else{r217=r213;r218=r211;r219=r215}}if(r3==44){r3=0;_yyensure_buffer_stack(r10);r220=HEAP32[r109>>2];r221=_yy_create_buffer(r220,r10);r222=HEAP32[r117>>2];r223=HEAP32[r115>>2];r224=r223+(r222<<2)|0;HEAP32[r224>>2]=r221;r225=HEAP32[r119>>2];r226=HEAP32[r121>>2];r227=r226+(r225<<2)|0;r228=HEAP32[r227>>2];r217=r225;r218=r226;r219=r228}r229=r218+(r217<<2)|0;r230=r219+16|0;r231=HEAP32[r230>>2];HEAP32[r123>>2]=r231;r232=HEAP32[r229>>2];r233=r232+8|0;r234=HEAP32[r233>>2];HEAP32[r125>>2]=r234;HEAP32[r127>>2]=r234;r235=HEAP32[r229>>2];r236=r235|0;r237=HEAP32[r236>>2];HEAP32[r109>>2]=r237;r238=HEAP8[r234];HEAP8[r128]=r238}L65:while(1){r239=HEAP32[r125>>2];r240=HEAP8[r128];HEAP8[r239]=r240;r241=HEAP32[r107>>2];r242=r241;r243=r239;r244=r239;L67:while(1){r245=r242;r246=r243;while(1){r247=HEAP8[r246];r248=r247&255;r249=1696+(r248<<2)|0;r250=HEAP32[r249>>2];r251=r250&255;r252=3888+(r245<<1)|0;r253=HEAP16[r252>>1];r254=r253<<16>>16==0;if(r254){r255=r245;r256=r251}else{HEAP32[r130>>2]=r245;HEAP32[r132>>2]=r246;r255=r245;r256=r251}L73:while(1){r257=r256&255;r258=r255;while(1){r259=3656+(r258<<1)|0;r260=HEAP16[r259>>1];r261=r260<<16>>16;r262=r261+r257|0;r263=2952+(r262<<1)|0;r264=HEAP16[r263>>1];r265=r264<<16>>16;r266=(r265|0)==(r258|0);if(r266){break L73}r267=2720+(r258<<1)|0;r268=HEAP16[r267>>1];r269=r268<<16>>16;r270=r268<<16>>16>97;if(r270){break}else{r258=r269}}r271=1544+(r257<<2)|0;r272=HEAP32[r271>>2];r273=r272&255;r255=r269;r256=r273}r274=840+(r262<<1)|0;r275=HEAP16[r274>>1];r276=r275<<16>>16==97;if(r276){break}r277=r246+1|0;r278=r275<<16>>16;r245=r278;r246=r277}r279=HEAP32[r130>>2];r280=r279;r281=r132;r282=r244;L82:while(1){r283=r282;r284=r280;r285=r281;L84:while(1){r286=HEAP32[r285>>2];r287=3888+(r284<<1)|0;r288=HEAP16[r287>>1];r289=r288<<16>>16;HEAP32[r127>>2]=r282;r290=r286;r291=r290-r283|0;HEAP32[r134>>2]=r291;r292=HEAP8[r286];HEAP8[r128]=r292;HEAP8[r286]=0;HEAP32[r125>>2]=r286;r293=(r284|0)==9;L86:do{if(r293){r294=r289}else{r295=639046>>>(r289>>>0);r296=r295&1;r297=(r296|0)==0;if(r297){r294=r289;break}else{r298=0}while(1){r299=HEAP32[r134>>2];r300=r298>>>0<r299>>>0;if(!r300){r294=r289;break L86}r301=HEAP32[r127>>2];r302=r301+r298|0;r303=HEAP8[r302];r304=r303<<24>>24==10;if(r304){r305=HEAP32[r117>>2];r306=HEAP32[r115>>2];r307=r306+(r305<<2)|0;r308=HEAP32[r307>>2];r309=r308+32|0;r310=HEAP32[r309>>2];r311=r310+1|0;HEAP32[r309>>2]=r311;r312=HEAP32[r117>>2];r313=HEAP32[r115>>2];r314=r313+(r312<<2)|0;r315=HEAP32[r314>>2];r316=r315+36|0;HEAP32[r316>>2]=0}r317=r298+1|0;r298=r317}}}while(0);L94:while(1){switch(r294|0){case 21:{r3=81;break L65;break};case 22:{r3=82;break L67;break};case 24:case 25:case 26:case 27:{r318=0;r319=0;break L47;break};case 15:{r3=75;break L65;break};case 8:{r3=69;break L67;break};case 10:{r3=70;break L65;break};case 11:{r3=71;break L65;break};case 12:{r3=72;break L65;break};case 13:{r3=73;break L65;break};case 14:{r3=74;break L65;break};case 18:{r3=78;break L65;break};case 20:{r3=80;break L65;break};case 1:case 2:case 5:case 6:case 9:{continue L65;break};case 19:{r3=79;break L65;break};case 16:{r3=76;break L65;break};case 17:{r3=77;break L65;break};case 23:{break};case 3:{r3=66;break L67;break};case 4:{r3=67;break L67;break};case 7:{r3=68;break L67;break};case 0:{break L94;break};default:{r3=149;break L34}}r320=HEAP32[r127>>2];r321=HEAP8[r128];HEAP8[r286]=r321;r322=HEAP32[r117>>2];r323=HEAP32[r115>>2];r324=r323+(r322<<2)|0;r325=HEAP32[r324>>2];r326=r325+44|0;r327=HEAP32[r326>>2];r328=(r327|0)==0;if(r328){r329=r325+16|0;r330=HEAP32[r329>>2];HEAP32[r123>>2]=r330;r331=HEAP32[r109>>2];r332=HEAP32[r324>>2];r333=r332|0;HEAP32[r333>>2]=r331;r334=HEAP32[r117>>2];r335=HEAP32[r115>>2];r336=r335+(r334<<2)|0;r337=HEAP32[r336>>2];r338=r337+44|0;HEAP32[r338>>2]=1;r339=HEAP32[r117>>2];r340=HEAP32[r115>>2];r341=r340+(r339<<2)|0;r342=HEAP32[r341>>2];r343=r339;r344=r340;r345=r342}else{r343=r322;r344=r323;r345=r325}r346=HEAP32[r125>>2];r347=HEAP32[r123>>2];r348=r345+4|0;r349=HEAP32[r348>>2];r350=r349+r347|0;r351=r346>>>0>r350>>>0;if(!r351){break L84}r352=HEAP32[r127>>2];r353=r347+1|0;r354=r349+r353|0;r355=r346>>>0>r354>>>0;if(r355){r3=98;break L34}r356=r345+40|0;r357=HEAP32[r356>>2];r358=(r357|0)==0;r359=r346;r360=r352;r361=r359-r360|0;if(r358){r362=(r361|0)==1;if(r362){r363=r352}else{r364=r344;r365=r343;r3=148;break L84}}else{r366=r361-1|0;r367=0;r368=r349;r369=r352;while(1){r370=(r367|0)<(r366|0);if(!r370){break}r371=r369+1|0;r372=HEAP8[r369];r373=r368+1|0;HEAP8[r368]=r372;r374=r367+1|0;r367=r374;r368=r373;r369=r371}r375=HEAP32[r117>>2];r376=HEAP32[r115>>2];r377=r376+(r375<<2)|0;r378=HEAP32[r377>>2];r379=r378+44|0;r380=HEAP32[r379>>2];r381=(r380|0)==2;if(r381){HEAP32[r123>>2]=0;r382=HEAP32[r377>>2];r383=r382+16|0;HEAP32[r383>>2]=0}else{r384=r378+12|0;r385=HEAP32[r384>>2];r386=r378;r387=r385;while(1){r388=r387-r366|0;r389=r388-1|0;r390=(r389|0)==0;if(!r390){break}r391=HEAP32[r125>>2];r392=r386+4|0;r393=HEAP32[r392>>2];r394=r391;r395=r393;r396=r394-r395|0;r397=r386+20|0;r398=HEAP32[r397>>2];r399=(r398|0)==0;if(r399){r3=109;break L34}r400=r386+12|0;r401=r387&2147483647;r402=(r401|0)==0;if(r402){r403=r387>>>3;r404=r387+r403|0;r405=r404}else{r406=r387<<1;r405=r406}HEAP32[r400>>2]=r405;r407=r405+2|0;r408=_realloc(r393,r407);HEAP32[r392>>2]=r408;r409=(r408|0)==0;if(r409){r3=114;break L34}r410=r408+r396|0;HEAP32[r125>>2]=r410;r411=HEAP32[r117>>2];r412=HEAP32[r115>>2];r413=r412+(r411<<2)|0;r414=HEAP32[r413>>2];r415=r414+12|0;r416=HEAP32[r415>>2];r386=r414;r387=r416}r417=r389>>>0>8192;r418=r417?8192:r389;r419=r386+24|0;r420=HEAP32[r419>>2];r421=(r420|0)==0;L122:do{if(r421){r422=___errno_location();HEAP32[r422>>2]=0;while(1){r423=HEAP32[r117>>2];r424=HEAP32[r115>>2];r425=r424+(r423<<2)|0;r426=HEAP32[r425>>2];r427=r426+4|0;r428=HEAP32[r427>>2];r429=r428+r366|0;r430=HEAP32[r109>>2];r431=_fread(r429,1,r418,r430);HEAP32[r123>>2]=r431;r432=(r431|0)==0;if(!r432){r433=r431;break L122}r434=HEAP32[r109>>2];r435=_ferror(r434);r436=(r435|0)==0;if(r436){r433=r431;break L122}r437=HEAP32[r422>>2];r438=(r437|0)==4;if(!r438){r3=130;break L34}HEAP32[r422>>2]=0;r439=HEAP32[r109>>2];_clearerr(r439)}}else{r440=0;r441=42;while(1){r442=r440>>>0<r418>>>0;if(!r442){r3=120;break}r443=HEAP32[r109>>2];r444=_fgetc(r443);if((r444|0)==10){r3=121;break}else if((r444|0)==-1){r445=r440;r3=123;break}r446=r444&255;r447=HEAP32[r117>>2];r448=HEAP32[r115>>2];r449=r448+(r447<<2)|0;r450=HEAP32[r449>>2];r451=r450+4|0;r452=HEAP32[r451>>2];r453=r366+r440|0;r454=r452+r453|0;HEAP8[r454]=r446;r455=r440+1|0;r440=r455;r441=r444}do{if(r3==120){r3=0;r456=(r441|0)==10;if(r456){r3=121;break}else{r457=r441;r458=r440}r459=(r457|0)==-1;if(r459){r445=r458;r3=123}else{r460=r458}}}while(0);if(r3==121){r3=0;r461=r440+1|0;r462=HEAP32[r117>>2];r463=HEAP32[r115>>2];r464=r463+(r462<<2)|0;r465=HEAP32[r464>>2];r466=r465+4|0;r467=HEAP32[r466>>2];r468=r366+r440|0;r469=r467+r468|0;HEAP8[r469]=10;r460=r461}else if(r3==123){r3=0;r470=HEAP32[r109>>2];r471=_ferror(r470);r472=(r471|0)==0;if(r472){r460=r445}else{r3=124;break L34}}HEAP32[r123>>2]=r460;r433=r460}}while(0);r473=HEAP32[r117>>2];r474=HEAP32[r115>>2];r475=r474+(r473<<2)|0;r476=HEAP32[r475>>2];r477=r476+16|0;HEAP32[r477>>2]=r433}r478=HEAP32[r123>>2];r479=(r478|0)==0;do{if(r479){r480=(r366|0)==0;if(!r480){r481=HEAP32[r117>>2];r482=HEAP32[r115>>2];r483=r482+(r481<<2)|0;r484=HEAP32[r483>>2];r485=r484+44|0;HEAP32[r485>>2]=2;r486=HEAP32[r123>>2];r487=2;r488=r486;break}r489=HEAP32[r109>>2];r490=HEAP32[r121>>2];r491=(r490|0)==0;if(r491){r3=137}else{r492=HEAP32[r117>>2];r493=r490+(r492<<2)|0;r494=HEAP32[r493>>2];r495=(r494|0)==0;if(r495){r3=137}else{r496=r490;r3=138}}if(r3==137){r3=0;_yyensure_buffer_stack(r10);r497=HEAP32[r109>>2];r498=_yy_create_buffer(r497,r10);r499=HEAP32[r117>>2];r500=HEAP32[r115>>2];r501=r500+(r499<<2)|0;HEAP32[r501>>2]=r498;r502=HEAP32[r115>>2];r503=(r502|0)==0;if(r503){r504=0}else{r496=r502;r3=138}}if(r3==138){r3=0;r505=HEAP32[r117>>2];r506=r496+(r505<<2)|0;r507=HEAP32[r506>>2];r504=r507}_yy_init_buffer(r504,r489,r10);r508=HEAP32[r119>>2];r509=HEAP32[r121>>2];r510=r509+(r508<<2)|0;r511=HEAP32[r510>>2];r512=r511+16|0;r513=HEAP32[r512>>2];HEAP32[r123>>2]=r513;r514=HEAP32[r510>>2];r515=r514+8|0;r516=HEAP32[r515>>2];HEAP32[r125>>2]=r516;HEAP32[r127>>2]=r516;r517=HEAP32[r510>>2];r518=r517|0;r519=HEAP32[r518>>2];HEAP32[r109>>2]=r519;r520=HEAP8[r516];HEAP8[r128]=r520;r487=1;r488=r513}else{r487=0;r488=r478}}while(0);r521=r488+r366|0;r522=HEAP32[r117>>2];r523=HEAP32[r115>>2];r524=r523+(r522<<2)|0;r525=HEAP32[r524>>2];r526=r525+12|0;r527=HEAP32[r526>>2];r528=r521>>>0>r527>>>0;if(r528){r529=r488>>>1;r530=r521+r529|0;r531=r525+4|0;r532=HEAP32[r531>>2];r533=_realloc(r532,r530);r534=HEAP32[r117>>2];r535=HEAP32[r115>>2];r536=r535+(r534<<2)|0;r537=HEAP32[r536>>2];r538=r537+4|0;HEAP32[r538>>2]=r533;r539=HEAP32[r117>>2];r540=HEAP32[r115>>2];r541=r540+(r539<<2)|0;r542=HEAP32[r541>>2];r543=r542+4|0;r544=HEAP32[r543>>2];r545=(r544|0)==0;if(r545){r3=144;break L34}r546=HEAP32[r123>>2];r547=r539;r548=r540;r549=r546}else{r547=r522;r548=r523;r549=r488}r550=r549+r366|0;HEAP32[r123>>2]=r550;r551=r548+(r547<<2)|0;r552=HEAP32[r551>>2];r553=r552+4|0;r554=HEAP32[r553>>2];r555=r554+r550|0;HEAP8[r555]=0;r556=HEAP32[r123>>2];r557=r556+1|0;r558=HEAP32[r117>>2];r559=HEAP32[r115>>2];r560=r559+(r558<<2)|0;r561=HEAP32[r560>>2];r562=r561+4|0;r563=HEAP32[r562>>2];r564=r563+r557|0;HEAP8[r564]=0;r565=HEAP32[r117>>2];r566=HEAP32[r115>>2];r567=r566+(r565<<2)|0;r568=HEAP32[r567>>2];r569=r568+4|0;r570=HEAP32[r569>>2];HEAP32[r127>>2]=r570;if((r487|0)==1){r363=r570}else if((r487|0)==0){r3=147;break L82}else if((r487|0)==2){r364=r566;r365=r565;r3=148;break L84}else{continue L65}}HEAP32[r136>>2]=0;HEAP32[r125>>2]=r363;r571=HEAP32[r107>>2];r572=r571-1|0;r573=(r572|0)/2&-1;r574=r573+24|0;r294=r574}r575=HEAP8[r128];HEAP8[r286]=r575;r576=HEAP32[r130>>2];r284=r576;r285=r132}if(r3==148){r3=0;r577=HEAP32[r123>>2];r578=r364+(r365<<2)|0;r579=HEAP32[r578>>2];r580=r579+4|0;r581=HEAP32[r580>>2];r582=r581+r577|0;HEAP32[r125>>2]=r582;r583=_yy_get_previous_state(r10);r584=HEAP32[r127>>2];r280=r583;r281=r125;r282=r584;continue}r585=r320;r586=r290-r585|0;r587=r586-1|0;r588=HEAP32[r127>>2];r589=r588+r587|0;HEAP32[r125>>2]=r589;r590=_yy_get_previous_state(r10);r591=HEAP32[r138>>2];r592=3888+(r590<<1)|0;r593=HEAP16[r592>>1];r594=r593<<16>>16==0;if(r594){r595=r590;r596=1}else{HEAP32[r130>>2]=r590;HEAP32[r132>>2]=r591;r595=r590;r596=1}L166:while(1){r597=r595;while(1){r598=3656+(r597<<1)|0;r599=HEAP16[r598>>1];r600=r599<<16>>16;r601=r600+r596|0;r602=2952+(r601<<1)|0;r603=HEAP16[r602>>1];r604=r603<<16>>16;r605=(r604|0)==(r597|0);if(r605){break L166}r606=2720+(r597<<1)|0;r607=HEAP16[r606>>1];r608=r607<<16>>16;r609=r607<<16>>16>97;if(r609){break}else{r597=r608}}r610=1544+(r596<<2)|0;r611=HEAP32[r610>>2];r612=r611&255;r595=r608;r596=r612}r613=840+(r601<<1)|0;r614=HEAP16[r613>>1];r615=r614<<16>>16==97;if(r615){r616=HEAP32[r127>>2];r617=r616}else{r618=r614<<16>>16;r619=HEAP32[r127>>2];r620=(r618|0)==0;if(r620){r617=r619}else{r3=95;break}}r621=HEAP32[r130>>2];r280=r621;r281=r132;r282=r617}if(r3==95){r3=0;r622=r591+1|0;HEAP32[r125>>2]=r622;r242=r618;r243=r622;r244=r619;continue}else if(r3==147){r3=0;r623=r320;r624=r290-r623|0;r625=r624-1|0;r626=r570+r625|0;HEAP32[r125>>2]=r626;r627=_yy_get_previous_state(r10);r628=HEAP32[r125>>2];r629=HEAP32[r127>>2];r242=r627;r243=r628;r244=r629;continue}}if(r3==66){r3=0;HEAP32[r107>>2]=3;continue}else if(r3==67){r3=0;HEAP32[r107>>2]=1;continue}else if(r3==68){r3=0;HEAP32[r107>>2]=7;continue}else if(r3==69){r3=0;HEAP32[r107>>2]=5;continue}else if(r3==82){r3=0;r630=HEAP32[r127>>2];r631=HEAP32[r134>>2];r632=HEAP32[r112>>2];r633=_fwrite(r630,r631,1,r632);continue}}if(r3==70){r3=0;HEAP32[r107>>2]=5;r634=258;r3=152;break}else if(r3==71){r3=0;HEAP32[r107>>2]=5;r634=259;r3=152;break}else if(r3==72){r3=0;HEAP32[r107>>2]=5;r634=260;r3=152;break}else if(r3==73){r3=0;HEAP32[r107>>2]=5;r634=261;r3=152;break}else if(r3==74){r3=0;HEAP32[r107>>2]=5;r635=HEAP32[r127>>2];r636=_strdup(r635);r637=HEAP32[r140>>2];r638=r637|0;HEAP32[r638>>2]=r636;r634=263;r3=152;break}else if(r3==75){r3=0;r639=HEAP32[r127>>2];r640=_strdup(r639);r641=HEAP32[r140>>2];r642=r641|0;HEAP32[r642>>2]=r640;r634=263;r3=152;break}else if(r3==76){r3=0;r643=HEAP32[r127>>2];r644=_strdup(r643);r645=HEAP32[r140>>2];r646=r645|0;HEAP32[r646>>2]=r644;r634=264;r3=152;break}else if(r3==77){r3=0;r647=HEAP32[r127>>2];r648=_strdup(r647);r649=HEAP32[r140>>2];r650=r649|0;HEAP32[r650>>2]=r648;r634=262;r3=152;break}else if(r3==78){r3=0;HEAP32[r107>>2]=1;r651=HEAP32[r127>>2];r652=HEAP8[r651];r653=r652<<24>>24;r654=r653;r3=150;break}else if(r3==79){r3=0;r655=HEAP32[r127>>2];r656=_strdup(r655);r657=HEAP32[r140>>2];r658=r657|0;HEAP32[r658>>2]=r656;r634=262;r3=152;break}else if(r3==80){r3=0;r659=HEAP32[r127>>2];r660=r659+1|0;r661=_atof_c(r660);r662=r661;r663=HEAP32[r140>>2];r664=r663;HEAPF32[r664>>2]=r662;r634=265;r3=152;break}else if(r3==81){r3=0;r665=HEAP32[r127>>2];r666=HEAP8[r665];r667=r666<<24>>24;r654=r667;r3=150;break}}else{r654=r149;r3=150}}while(0);do{if(r3==150){r3=0;r668=(r654|0)<1;if(r668){r318=0;r319=0;break}else{r669=r654}r670=r669>>>0<266;if(r670){r634=r669;r3=152}else{r318=2;r319=r669}}}while(0);if(r3==152){r3=0;r671=r634+8|0;r672=HEAP8[r671];r673=r672&255;r318=r673;r319=r634}r674=r199+r318|0;r675=(r674|0)<0;r676=(r674|0)>54;r677=r675|r676;if(r677){r201=r319;r3=157;break}r678=r674+784|0;r679=HEAP8[r678];r680=r679<<24>>24;r681=(r680|0)==(r318|0);if(!r681){r201=r319;r3=157;break}r682=r674+432|0;r683=HEAP8[r682];r684=r683&255;if((r674|0)==53|(r674|0)==48){r685=r319;r3=220;break L34}r686=(r147|0)==0;r687=r147-1|0;r688=r686?0:r687;r689=r155+4|0;r690=HEAP32[r141>>2];r691=r689|0;HEAP32[r691>>2]=r690;r692=r689;r693=r157;r694=r688;r695=r684;r696=-2}}while(0);L208:do{if(r3==157){r3=0;r697=r148+720|0;r698=HEAP8[r697];r699=r698&255;r700=r698<<24>>24==0;if(r700){r685=r201;r3=220;break L34}r701=r699+544|0;r702=HEAP8[r701];r703=r702&255;r704=1-r703|0;r705=r155+(r704<<2)|0;r706=HEAP32[r705>>2];switch(r699|0){case 32:{r707=r155-4|0;r708=r707;r709=HEAP32[r708>>2];r710=_jsgf_kleene_new(r36,r709,0);r711=r710;r712=r711;break};case 33:{r713=r155-4|0;r714=r713;r715=HEAP32[r714>>2];r716=_jsgf_kleene_new(r36,r715,1);r717=r716;r712=r717;break};case 31:{r718=r155;r719=HEAP32[r718>>2];r720=r719+4|0;r721=HEAP32[r720>>2];r722=_malloc(12);r723=(r722|0)==0;if(r723){r3=212;break L34}r724=r722-4|0;r725=r724;r726=HEAP32[r725>>2];r727=r726&3;r728=(r727|0)==0;if(!r728){_memset(r722,0,12)|0}r729=___ckd_salloc__(r721,33352,67);r730=r722;HEAP32[r730>>2]=r729;r731=r722+8|0;r732=r731;HEAPF32[r732>>2]=1;r712=r722;break};case 29:{r733=r155|0;r734=HEAP32[r733>>2];r735=_malloc(12);r736=(r735|0)==0;if(r736){r3=202;break L34}r737=r735-4|0;r738=r737;r739=HEAP32[r738>>2];r740=r739&3;r741=(r740|0)==0;if(!r741){_memset(r735,0,12)|0}r742=___ckd_salloc__(r734,33352,67);r743=r735;HEAP32[r743>>2]=r742;r744=r735+8|0;r745=r744;HEAPF32[r745>>2]=1;r746=HEAP32[r733>>2];_free(r746);r712=r735;break};case 20:{r747=_malloc(8);r748=(r747|0)==0;if(r748){r3=179;break L34}r749=r747-4|0;r750=r749;r751=HEAP32[r750>>2];r752=r751&3;r753=(r752|0)==0;if(r753){r754=r747;r755=HEAP32[r754>>2];r756=r755;r757=r754}else{r758=r747;r759=0;r760=0;r761=r758|0;tempBigInt=r759;HEAP8[r761]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r761+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r761+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r761+3|0]=tempBigInt;r762=r758+4|0;tempBigInt=r760;HEAP8[r762]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r762+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r762+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r762+3|0]=tempBigInt;r763=r747;r756=0;r757=r763}r764=r155;r765=HEAP32[r764>>2];r766=r765;r767=_glist_add_ptr(r756,r766);HEAP32[r757>>2]=r767;r712=r747;break};case 25:{r768=r155;r769=HEAP32[r768>>2];r770=r769;r771=r155-4|0;r772=r771;r773=HEAPF32[r772>>2];r774=r769+8|0;HEAPF32[r774>>2]=r773;r712=r770;break};case 21:{r775=r155-4|0;r776=r775;r777=HEAP32[r776>>2];r778=r777;r779=r777|0;r780=HEAP32[r779>>2];r781=r155;r782=HEAP32[r781>>2];r783=r782;r784=_glist_add_ptr(r780,r783);HEAP32[r779>>2]=r784;r712=r778;break};case 23:{r785=r155-4|0;r786=r785;r787=HEAP32[r786>>2];r788=r787;r789=r787+4|0;r790=HEAP32[r789>>2];r791=r155|0;r792=HEAP32[r791>>2];r793=_glist_add_ptr(r790,r792);HEAP32[r789>>2]=r793;r712=r788;break};case 18:{r794=r155;r795=HEAP32[r794>>2];r796=r795;r797=r795|0;r798=HEAP32[r797>>2];r799=r798;r800=0;while(1){r801=(r799|0)==0;if(r801){break}r802=r799+8|0;r803=HEAP32[r802>>2];HEAP32[r802>>2]=r800;r800=r799;r799=r803}HEAP32[r797>>2]=r800;r712=r796;break};case 19:{r804=r155;r805=HEAP32[r804>>2];r806=r805;r807=r805|0;r808=HEAP32[r807>>2];r809=r808;r810=0;while(1){r811=(r809|0)==0;if(r811){break}r812=r809+8|0;r813=HEAP32[r812>>2];HEAP32[r812>>2]=r810;r810=r809;r809=r813}HEAP32[r807>>2]=r810;r814=r155-8|0;r815=r814;r816=HEAP32[r815>>2];r817=r805+4|0;HEAP32[r817>>2]=r816;r712=r806;break};case 9:{r818=r155-12|0;r819=HEAP32[r818>>2];HEAP32[r97>>2]=r819;r820=r155-8|0;r821=HEAP32[r820>>2];HEAP32[r99>>2]=r821;r822=r155-4|0;r823=HEAP32[r822>>2];HEAP32[r101>>2]=r823;r712=r706;break};case 30:{r824=r155;r825=HEAP32[r824>>2];r826=r825+4|0;r827=HEAP32[r826>>2];r828=_malloc(12);r829=(r828|0)==0;if(r829){r3=207;break L34}r830=r828-4|0;r831=r830;r832=HEAP32[r831>>2];r833=r832&3;r834=(r833|0)==0;if(!r834){_memset(r828,0,12)|0}r835=___ckd_salloc__(r827,33352,67);r836=r828;HEAP32[r836>>2]=r835;r837=r828+8|0;r838=r837;HEAPF32[r838>>2]=1;r712=r828;break};case 10:{r839=r155-4|0;r840=HEAP32[r839>>2];r712=r840;break};case 13:{r841=r155-4|0;r842=HEAP32[r841>>2];_jsgf_import_rule(r36,r842);r843=HEAP32[r841>>2];_free(r843);r712=r706;break};case 16:{r844=r155-12|0;r845=HEAP32[r844>>2];r846=r155-4|0;r847=r846;r848=HEAP32[r847>>2];r849=_jsgf_define_rule(r36,r845,r848,0);r850=HEAP32[r844>>2];_free(r850);r712=r706;break};case 17:{r851=r155-12|0;r852=HEAP32[r851>>2];r853=r155-4|0;r854=r853;r855=HEAP32[r854>>2];r856=_jsgf_define_rule(r36,r852,r855,1);r857=HEAP32[r851>>2];_free(r857);r712=r706;break};case 26:{r858=r155-4|0;r859=r858;r860=HEAP32[r859>>2];r861=_jsgf_define_rule(r36,0,r860,0);r862=r861;r712=r862;break};case 27:{r863=r155-4|0;r864=r863;r865=HEAP32[r864>>2];r866=_malloc(8);r867=(r866|0)==0;if(r867){r3=188;break L34}r868=r866-4|0;r869=r868;r870=HEAP32[r869>>2];r871=r870&3;r872=(r871|0)==0;if(!r872){r873=r866;r874=0;r875=0;r876=r873|0;tempBigInt=r874;HEAP8[r876]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r876+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r876+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r876+3|0]=tempBigInt;r877=r873+4|0;tempBigInt=r875;HEAP8[r877]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r877+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r877+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r877+3|0]=tempBigInt}r878=r866;r879=_malloc(12);r880=(r879|0)==0;if(r880){r3=192;break L34}r881=r879-4|0;r882=r881;r883=HEAP32[r882>>2];r884=r883&3;r885=(r884|0)==0;if(!r885){_memset(r879,0,12)|0}r886=___ckd_salloc__(23088,33352,67);r887=r879;HEAP32[r887>>2]=r886;r888=r879+8|0;r889=r888;HEAPF32[r889>>2]=1;r890=r866+4|0;r891=r890;HEAP32[r891>>2]=r865;r892=_glist_add_ptr(0,r879);r893=r866;HEAP32[r893>>2]=r892;r894=_jsgf_define_rule(r36,0,r878,0);r895=r894;r712=r895;break};case 5:{r896=r155|0;r897=HEAP32[r896>>2];HEAP32[r96>>2]=r897;r712=r706;break};case 7:{r898=r155-4|0;r899=HEAP32[r898>>2];HEAP32[r97>>2]=r899;r712=r706;break};case 8:{r900=r155-8|0;r901=HEAP32[r900>>2];HEAP32[r97>>2]=r901;r902=r155-4|0;r903=HEAP32[r902>>2];HEAP32[r99>>2]=r903;r712=r706;break};case 28:{r904=r155|0;r905=HEAP32[r904>>2];r906=_malloc(12);r907=(r906|0)==0;if(r907){r3=197;break L34}r908=r906-4|0;r909=r908;r910=HEAP32[r909>>2];r911=r910&3;r912=(r911|0)==0;if(!r912){_memset(r906,0,12)|0}r913=___ckd_salloc__(r905,33352,67);r914=r906;HEAP32[r914>>2]=r913;r915=r906+8|0;r916=r915;HEAPF32[r916>>2]=1;r917=HEAP32[r904>>2];_free(r917);r712=r906;break};default:{r712=r706}}r918=-r703|0;r919=r157+(r918<<1)|0;r920=r155+(r704<<2)|0;r921=r920|0;HEAP32[r921>>2]=r712;r922=r699+584|0;r923=HEAP8[r922];r924=r923&255;r925=r924-20|0;r926=r925+624|0;r927=HEAP8[r926];r928=r927<<24>>24;r929=HEAP16[r919>>1];r930=r929<<16>>16;r931=r928+r930|0;r932=(r931|0)>-1;r933=(r931|0)<55;r934=r932&r933;do{if(r934){r935=r931+784|0;r936=HEAP8[r935];r937=r936<<24>>24;r938=(r937|0)==(r930|0);if(!r938){break}r939=r931+432|0;r940=HEAP8[r939];r941=r940&255;r692=r920;r693=r919;r694=r147;r695=r941;r696=r201;break L208}}while(0);r942=r925+704|0;r943=HEAP8[r942];r944=r943<<24>>24;r692=r920;r693=r919;r694=r147;r695=r944;r696=r201}}while(0);r945=r693+2|0;r142=r154;r143=r692;r144=r156;r145=r945;r146=r158;r147=r694;r148=r695;r149=r696}L277:do{if(r3==98){r946=HEAP32[_stderr>>2];r947=_fprintf(r946,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=6568,r4));STACKTOP=r4;_exit(2)}else if(r3==109){HEAP32[r392>>2]=0;r948=HEAP32[_stderr>>2];r949=_fprintf(r948,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=49168,r4));STACKTOP=r4;_exit(2)}else if(r3==114){r948=HEAP32[_stderr>>2];r949=_fprintf(r948,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=49168,r4));STACKTOP=r4;_exit(2)}else if(r3==124){r950=HEAP32[_stderr>>2];r951=_fprintf(r950,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=47680,r4));STACKTOP=r4;_exit(2)}else if(r3==130){r952=HEAP32[_stderr>>2];r953=_fprintf(r952,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=47680,r4));STACKTOP=r4;_exit(2)}else if(r3==144){r954=HEAP32[_stderr>>2];r955=_fprintf(r954,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=46080,r4));STACKTOP=r4;_exit(2)}else if(r3==149){r956=HEAP32[_stderr>>2];r957=_fprintf(r956,9536,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=32120,r4));STACKTOP=r4;_exit(2)}else if(r3==179){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=32688,HEAP32[r4+24>>2]=121,r4));STACKTOP=r4}else if(r3==188){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=204,r4));STACKTOP=r4}else if(r3==192){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}else if(r3==197){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}else if(r3==202){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}else if(r3==207){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}else if(r3==212){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=12,HEAP32[r4+16>>2]=33352,HEAP32[r4+24>>2]=66,r4));STACKTOP=r4}else if(r3==220){r958=(r147|0)==0;do{if(r958){r959=_yysyntax_error(0,r148,r685);r960=r959>>>0>128;if(r960){r961=r959<<1;r962=r959>>>0>r961>>>0;r963=r962?-1:r961;r964=_malloc(r963);r965=(r964|0)==0;r966=r965?r90:r964;r967=r965?128:r963;r968=r967;r969=r966}else{r968=128;r969=r90}r970=(r959|0)==0;r971=r959>>>0>r968>>>0;r972=r970|r971;if(r972){r973=HEAP32[r121>>2];r974=(r973|0)==0;do{if(r974){r975=0}else{r976=HEAP32[r117>>2];r977=r973+(r976<<2)|0;r978=HEAP32[r977>>2];r979=(r978|0)==0;if(r979){r975=0;break}r980=r978+32|0;r981=HEAP32[r980>>2];r975=r981}}while(0);r982=r10+80|0;r983=r982;r984=HEAP32[r983>>2];_err_msg(4,32688,155,9544,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=46e3,HEAP32[r4+8>>2]=r975,HEAP32[r4+16>>2]=r984,r4));STACKTOP=r4;if(r970){r985=r969;break}else{r165=r969;r166=r157;r167=r158;r3=236;break L277}}else{r986=_yysyntax_error(r969,r148,r685);r987=HEAP32[r121>>2];r988=(r987|0)==0;do{if(r988){r989=0}else{r990=HEAP32[r117>>2];r991=r987+(r990<<2)|0;r992=HEAP32[r991>>2];r993=(r992|0)==0;if(r993){r989=0;break}r994=r992+32|0;r995=HEAP32[r994>>2];r989=r995}}while(0);r996=r10+80|0;r997=r996;r998=HEAP32[r997>>2];_err_msg(4,32688,155,9544,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r969,HEAP32[r4+8>>2]=r989,HEAP32[r4+16>>2]=r998,r4));STACKTOP=r4;r985=r969;break}}else{r999=r147;r1000=r90;r1001=(r999|0)==3;r1002=(r685|0)<1;r1003=r1001&r1002;r1004=(r685|0)==0;r1005=r1003&r1004;if(r1005){r192=r1000;r193=1;r194=r157;r195=r158;break L277}else{r985=r1000}}}while(0);r1006=r157;r1007=r198;while(1){r1008=r1007<<24>>24!=-37;r1009=r1007<<24>>24>-2;r1010=r1008&r1009;r1011=(r1006|0)==(r158|0);if(r1011){r192=r985;r193=1;r194=r158;r195=r158;break L277}r1012=r1006-2|0;r1013=HEAP16[r1012>>1];r1014=r1013<<16>>16;r1015=r1014+640|0;r1016=HEAP8[r1015];r1006=r1012;r1007=r1016}}}while(0);if(r3==236){r1017=HEAP32[r121>>2];r1018=(r1017|0)==0;do{if(r1018){r1019=0}else{r1020=HEAP32[r117>>2];r1021=r1017+(r1020<<2)|0;r1022=HEAP32[r1021>>2];r1023=(r1022|0)==0;if(r1023){r1019=0;break}r1024=r1022+32|0;r1025=HEAP32[r1024>>2];r1019=r1025}}while(0);r1026=r10+80|0;r1027=r1026;r1028=HEAP32[r1027>>2];_err_msg(4,32688,155,9544,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=17648,HEAP32[r4+8>>2]=r1019,HEAP32[r4+16>>2]=r1028,r4));STACKTOP=r4;r192=r165;r193=2;r194=r166;r195=r167}r1029=r194;while(1){r1030=(r1029|0)==(r195|0);if(r1030){break}r1031=r1029-2|0;r1029=r1031}r1032=(r195|0)==(r93|0);if(!r1032){r1033=r195;_free(r1033)}r1034=(r192|0)==(r90|0);if(!r1034){_free(r192)}r1035=4;r1036=0;r1037=400;r1038=0;r1039=800;r1040=0;r1041=128;r1042=0;r1043=(r193|0)==0;if(!r1043){r1044=r13?31848:r1;_err_msg(4,33352,838,33136,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r1044,r4));STACKTOP=r4;_jsgf_grammar_free(r36);_yylex_destroy(r10);r28=0;STACKTOP=r5;return r28}r1045=(r17|0)==0;if(!r1045){r1046=_fclose(r17)}_yylex_destroy(r10);r28=r36;STACKTOP=r5;return r28}function _jsgf_fullname(r1,r2){var r3,r4,r5,r6,r7,r8;r3=0;r4=STACKTOP;r5=r2+1|0;if((_strchr(r5,46)|0)!=0){r6=___ckd_salloc__(r2,33352,249);STACKTOP=r4;return r6}r7=r1+12|0;r1=_strlen(HEAP32[r7>>2]);r8=r1+_strlen(r2)+4|0;r2=_malloc(r8);if((r2|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r8,HEAP32[r3+8>>2]=33352,HEAP32[r3+16>>2]=252,r3));STACKTOP=r3}_sprintf(r2,30224,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=HEAP32[r7>>2],HEAP32[r3+8>>2]=r5,r3));STACKTOP=r3;r6=r2;STACKTOP=r4;return r6}function _jsgf_rhs_free(r1){var r2,r3,r4,r5;if((r1|0)==0){return}_jsgf_rhs_free(HEAP32[r1+4>>2]);r2=r1|0;r3=r2;while(1){r4=HEAP32[r3>>2];if((r4|0)==0){break}r5=HEAP32[r4>>2];if((r5|0)!=0){_free(HEAP32[r5>>2]);_free(r5)}r3=r4+8|0}r3=HEAP32[r2>>2];while(1){if((r3|0)==0){break}r2=HEAP32[r3+8>>2];_free(r3);r3=r2}_free(r1);return}function _jsgf_import_rule(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;r7=_strlen(r2);r8=r7+4|0;r9=_malloc(r8);if((r9|0)==0){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r8,HEAP32[r4+8>>2]=33352,HEAP32[r4+16>>2]=726,r4));STACKTOP=r4}_strcpy(r9,r2+1|0);r8=_strrchr(r9,46);if((r8|0)==0){_err_msg(4,33352,731,47728,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r2,r4));STACKTOP=r4;_free(r9);STACKTOP=r5;return}r10=r8-r9|0;HEAP8[r8]=0;if(_strlen(r2)>>>0>2){r8=r2+(r7-3)|0;r7=HEAP8[r8];if(r7<<24>>24==46){r11=r8;r8=46136;while(1){r12=r11+1|0;r13=r8+1|0;r14=HEAP8[r12];r15=HEAP8[r13];if(r14<<24>>24!=r15<<24>>24|r14<<24>>24==0|r15<<24>>24==0){r16=r14;r17=r15;break}else{r11=r12;r8=r13}}}else{r16=r7;r17=46}r18=r16<<24>>24==r17<<24>>24|0}else{r18=0}r17=r9;while(1){r16=HEAP8[r17];if(r16<<24>>24==46){HEAP8[r17]=47}else if(r16<<24>>24==0){break}r17=r17+1|0}r17=r9+_strlen(r9)|0;HEAP8[r17]=HEAP8[44520];HEAP8[r17+1|0]=HEAP8[44521];HEAP8[r17+2|0]=HEAP8[44522];HEAP8[r17+3|0]=HEAP8[44523];HEAP8[r17+4|0]=HEAP8[44524];HEAP8[r17+5|0]=HEAP8[44525];r17=r1+28|0;while(1){r16=HEAP32[r17>>2];if((r16|0)==0){r3=15;break}r19=_string_join(HEAP32[r16>>2],(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=30928,HEAP32[r4+8>>2]=r9,HEAP32[r4+16>>2]=0,r4));STACKTOP=r4;r20=_fopen(r19,26184);if((r20|0)!=0){break}_free(r19);r17=r16+8|0}if(r3==15){_free(r9);STACKTOP=r5;return}_fclose(r20);_free(r9);if((r19|0)==0){STACKTOP=r5;return}r9=HEAP32[r1+12>>2];_err_msg(1,33352,751,42880,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r2,HEAP32[r4+8>>2]=r19,HEAP32[r4+16>>2]=r9,r4));STACKTOP=r4;r9=r1+20|0;do{if((_hash_table_lookup(HEAP32[r9>>2],r19,r6)|0)==0){_err_msg(1,33352,757,41840,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r19,r4));STACKTOP=r4;r20=HEAP32[r6>>2];_free(r19);r21=r20}else{r20=_jsgf_parse_file(r19,r1);r17=HEAP32[r9>>2];r16=r20;r7=_key2hash(r17,r19);r8=_enter(r17,r7,r19,_strlen(r19),r16,0);HEAP32[r6>>2]=r8;if((r8|0)==(r16|0)){r21=r20;break}_err_msg(3,33352,766,40560,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r19,r4));STACKTOP=r4;r21=r20}}while(0);if((r21|0)==0){STACKTOP=r5;return}r19=(r18|0)==0;r18=r1+16|0;r6=r10+1|0;r10=(r6|0)==0;r9=_hash_table_iter(HEAP32[r21+16>>2]);while(1){if((r9|0)==0){r3=46;break}r21=HEAP32[HEAP32[r9+4>>2]+8>>2];r20=___ckd_salloc__(r2,33352,281);r16=r20+1|0;r8=_strrchr(r16,46);do{if((r8|0)==0){r22=r20}else{HEAP8[r8]=0;r7=_strrchr(r16,46);HEAP8[r8]=46;if((r7|0)==0){r22=r20;break}HEAP8[r7]=60;r17=___ckd_salloc__(r7,33352,290);_free(r20);r22=r17}}while(0);r20=HEAP32[r21+4>>2];do{if(r19){r8=HEAP8[r22];r16=HEAP8[r20];if(r8<<24>>24!=r16<<24>>24|r8<<24>>24==0|r16<<24>>24==0){r23=r8;r24=r16}else{r16=r22;r8=r20;while(1){r17=r16+1|0;r7=r8+1|0;r11=HEAP8[r17];r13=HEAP8[r7];if(r11<<24>>24!=r13<<24>>24|r11<<24>>24==0|r13<<24>>24==0){r23=r11;r24=r13;break}else{r16=r17;r8=r7}}}r25=(r23&255)-(r24&255)|0}else{if(r10){r25=0;break}r8=HEAP8[r22];L50:do{if(r8<<24>>24==0){r26=r20;r27=0}else{r16=r22;r7=r20;r17=r6;r13=r8;while(1){r11=r17-1|0;r12=HEAP8[r7];if(!((r11|0)!=0&r12<<24>>24!=0&r13<<24>>24==r12<<24>>24)){r26=r7;r27=r13;break L50}r12=r16+1|0;r15=r7+1|0;r14=HEAP8[r12];if(r14<<24>>24==0){r26=r15;r27=0;break}else{r16=r12;r7=r15;r17=r11;r13=r14}}}}while(0);r25=(r27&255)-HEAPU8[r26]|0}}while(0);_free(r22);if((HEAP32[r21+8>>2]|0)!=0&(r25|0)==0){r20=_strrchr(HEAP32[r21+4>>2],46);if((r20|0)==0){r3=40;break}r8=_jsgf_fullname(r1,r20);_err_msg(1,33352,797,38056,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r8,r4));STACKTOP=r4;r20=HEAP32[r18>>2];r13=r21;HEAP32[r13>>2]=HEAP32[r13>>2]+1;r13=_key2hash(r20,r8);if((_enter(r20,r13,r8,_strlen(r8),r21,0)|0)!=(r21|0)){_err_msg(3,33352,801,49224,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r8,r4));STACKTOP=r4}if(r19){r3=44;break}}r9=_hash_table_iter_next(r9)}if(r3==40){___assert_fail(39088,33352,794,50248)}else if(r3==44){_free(r9);STACKTOP=r5;return}else if(r3==46){STACKTOP=r5;return}}function _expand_rule(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+8|0;r8=r7;r9=_malloc(8);if((r9|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=8,HEAP32[r6+16>>2]=33352,HEAP32[r6+24>>2]=436,r6));STACKTOP=r6}if((HEAP32[r9-4>>2]&3|0)!=0){r10=r9;r11=r10|0;tempBigInt=0;HEAP8[r11]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r11+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r11+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r11+3|0]=tempBigInt;r11=r10+4|0;tempBigInt=0;HEAP8[r11]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r11+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r11+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r11+3|0]=tempBigInt}HEAP32[r9>>2]=r2;HEAP32[r9+4>>2]=r3;r11=r1+40|0;r10=_glist_add_ptr(HEAP32[r11>>2],r9);HEAP32[r11>>2]=r10;r10=r2+12|0;r9=r10;r12=0;while(1){r13=HEAP32[r9>>2];if((r13|0)==0){break}r14=HEAP32[r13>>2];if((r14|0)==0){r15=r12}else{r15=r12+HEAPF32[HEAP32[r14>>2]+8>>2]}r9=r13+4|0;r12=r15}r15=r12==0?1:r12;r12=r2+4|0;r2=r1+16|0;r9=r8;r13=r1+36|0;r14=r1+32|0;r16=r1+12|0;r17=r10;r10=r4;L14:while(1){r4=HEAP32[r17>>2];if((r4|0)==0){r5=69;break}r18=r4|0;r19=HEAP32[r18>>2];if((r19|0)==0){r20=r18;r21=r10;r22=r3}else{r23=HEAP32[r19>>2]+8|0;HEAPF32[r23>>2]=HEAPF32[r23>>2]/r15;r20=r18;r21=r10;r22=r3}while(1){r23=HEAP32[r20>>2];if((r23|0)==0){r24=r22;break}r19=HEAP32[r23>>2];r25=r19;r26=HEAP32[r19>>2];if((HEAP8[r26]|0)!=60){r27=r23+8|0;if((HEAP32[r27>>2]|0)==0&(r21|0)>-1){r28=r21}else{r29=HEAP32[r14>>2];HEAP32[r14>>2]=r29+1;r28=r29}r29=_malloc(12);if((r29|0)==0){r5=62;break L14}if((HEAP32[r29-4>>2]&3|0)!=0){_memset(r29,0,12)|0}HEAP32[r29+4>>2]=r22;HEAP32[r29+8>>2]=r28;HEAP32[r29>>2]=r25;r30=_glist_add_ptr(HEAP32[r13>>2],r29);HEAP32[r13>>2]=r30;r20=r27;r21=r21;r22=r28;continue}r27=r19;r19=r26;r30=23088;while(1){r29=r19+1|0;r31=r30+1|0;r32=HEAP8[r29];r33=HEAP8[r31];if(r32<<24>>24!=r33<<24>>24|r32<<24>>24==0|r33<<24>>24==0){break}else{r19=r29;r30=r31}}if(r32<<24>>24==r33<<24>>24){r30=r23+8|0;if((r23|0)!=(HEAP32[r18>>2]|0)){r20=r30;r21=r21;r22=r22;continue}if((HEAP32[r30>>2]|0)!=0){r20=r30;r21=r21;r22=r22;continue}if((r21|0)==-1){r19=HEAP32[r14>>2];r31=_malloc(12);if((r31|0)==0){r5=25;break L14}if((HEAP32[r31-4>>2]&3|0)!=0){_memset(r31,0,12)|0}HEAP32[r31+4>>2]=r22;HEAP32[r31+8>>2]=r19;HEAP32[r31>>2]=r25;r19=_glist_add_ptr(HEAP32[r13>>2],r31);HEAP32[r13>>2]=r19;r19=HEAP32[r14>>2];HEAP32[r14>>2]=r19+1;r20=r30;r21=r19;r22=r19;continue}else{r19=_malloc(12);if((r19|0)==0){r5=30;break L14}if((HEAP32[r19-4>>2]&3|0)!=0){_memset(r19,0,12)|0}HEAP32[r19+4>>2]=r22;HEAP32[r19+8>>2]=r21;HEAP32[r19>>2]=r25;r31=_glist_add_ptr(HEAP32[r13>>2],r19);HEAP32[r13>>2]=r31;r20=r30;r21=r21;r22=r22;continue}}else{r34=r26;r35=28616}while(1){r30=r34+1|0;r31=r35+1|0;r36=HEAP8[r30];r37=HEAP8[r31];if(r36<<24>>24!=r37<<24>>24|r36<<24>>24==0|r37<<24>>24==0){break}else{r34=r30;r35=r31}}if(r36<<24>>24==r37<<24>>24){r38=-1;r5=70;break L14}r31=r26+1|0;L54:do{if((_strchr(r31,46)|0)==0){r30=___ckd_salloc__(HEAP32[r12>>2]+1|0,33352,227);r19=_strrchr(r30+1|0,46);do{if((r19|0)==0){_free(r30)}else{HEAP8[r19]=0;if((r30|0)==0){break}r29=_strlen(r30);r39=r29+_strlen(r26)+4|0;r29=_malloc(r39);if((r29|0)==0){r5=41;break L14}_sprintf(r29,30224,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r30,HEAP32[r6+8>>2]=r31,r6));STACKTOP=r6;_free(r30);r40=r29;break L54}}while(0);r40=___ckd_salloc__(r26,33352,268)}else{r40=___ckd_salloc__(r26,33352,264)}}while(0);if((_hash_table_lookup(HEAP32[r2>>2],r40,r9)|0)==-1){r5=44;break L14}_free(r40);r26=HEAP32[r8>>2];r31=r11;while(1){r30=HEAP32[r31>>2];if((r30|0)==0){r5=56;break}r41=HEAP32[r30>>2];if((HEAP32[r41>>2]|0)==(r26|0)){break}r31=r30+8|0}if(r5==56){r5=0;r31=r23+8|0;r30=_expand_rule(r1,r26,r22,(HEAP32[r31>>2]|0)==0&(r21|0)>-1?r21:-1);if((r30|0)==-1){r38=-1;r5=70;break L14}else{r20=r31;r21=r21;r22=r30;continue}}r30=r23+8|0;if((HEAP32[r30>>2]|0)!=0){r5=50;break L14}r31=r41+4|0;r19=HEAP32[r31>>2];_err_msg(1,33352,381,25608,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=HEAP32[r27>>2],HEAP32[r6+8>>2]=r22,HEAP32[r6+16>>2]=r19,r6));STACKTOP=r6;r19=HEAP32[r31>>2];r31=_malloc(12);if((r31|0)==0){r5=54;break L14}if((HEAP32[r31-4>>2]&3|0)!=0){_memset(r31,0,12)|0}HEAP32[r31+4>>2]=r22;HEAP32[r31+8>>2]=r19;HEAP32[r31>>2]=r25;r19=_glist_add_ptr(HEAP32[r13>>2],r31);HEAP32[r13>>2]=r19;r20=r30;r21=r21;r22=-2}do{if((r24|0)==-2){r42=r10}else if((r24|0)==-1){r38=-1;r5=70;break L14}else{if((r10|0)!=-1){r42=r10;break}if((r24|0)>-1){r42=r24}else{r5=67;break L14}}}while(0);r17=r4+4|0;r10=r42}if(r5==25){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=12,HEAP32[r6+16>>2]=33352,HEAP32[r6+24>>2]=216,r6));STACKTOP=r6}else if(r5==30){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=12,HEAP32[r6+16>>2]=33352,HEAP32[r6+24>>2]=216,r6));STACKTOP=r6}else if(r5==41){_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r39,HEAP32[r6+8>>2]=33352,HEAP32[r6+16>>2]=269,r6));STACKTOP=r6}else if(r5==44){_err_msg(4,33352,360,27680,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r40,r6));STACKTOP=r6;_free(r40);r38=-1;STACKTOP=r7;return r38}else if(r5==50){r40=HEAP32[r12>>2];_err_msg(4,33352,377,26536,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=HEAP32[r16>>2],HEAP32[r6+8>>2]=r40,r6));STACKTOP=r6;r38=-1;STACKTOP=r7;return r38}else if(r5==54){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=12,HEAP32[r6+16>>2]=33352,HEAP32[r6+24>>2]=216,r6));STACKTOP=r6}else if(r5==62){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=12,HEAP32[r6+16>>2]=33352,HEAP32[r6+24>>2]=216,r6));STACKTOP=r6}else if(r5==67){___assert_fail(29432,33352,473,51008)}else if(r5==69){_free(HEAP32[HEAP32[r11>>2]>>2]);r6=HEAP32[r11>>2];r40=HEAP32[r6+8>>2];_free(r6);HEAP32[r11>>2]=r40;r38=(r10|0)==-1?r3:r10;STACKTOP=r7;return r38}else if(r5==70){STACKTOP=r7;return r38}}function _yysyntax_error(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+88|0;r6=r5;r7=r5+24;r8=HEAP8[r2+640|0];r2=r8<<24>>24;if(r8<<24>>24<=-37){r9=0;STACKTOP=r5;return r9}if(r3>>>0<266){r10=HEAPU8[r3+8|0]}else{r10=2}r3=HEAP32[280+(r10<<2)>>2];r10=_yytnamerr(0,r3);r11=r8<<24>>24<0?-r2|0:0;r8=54-r2+1|0;r12=(r8|0)<20?r8:20;HEAP32[r6>>2]=r3;r3=r7|0;r8=r3;r13=488;while(1){r14=HEAP8[r13];HEAP8[r8]=r14;if(r14<<24>>24==0){r15=r11;r16=1;r17=528;r18=r8;r19=0;r20=r10;break}else{r8=r8+1|0;r13=r13+1|0}}while(1){if((r15|0)>=(r12|0)){r21=r16;r22=r20;break}if((HEAP8[784+(r15+r2)|0]|0)!=(r15|0)|(r15|0)==1){r23=r16;r24=r17;r25=r18;r26=r19;r27=r20}else{if((r16|0)==5){r4=9;break}r13=HEAP32[280+(r15<<2)>>2];r8=r16+1|0;HEAP32[r6+(r16<<2)>>2]=r13;r11=r20+_yytnamerr(0,r13)|0;r13=r19|r11>>>0<r20>>>0;r14=r18;r28=r17;while(1){r29=HEAP8[r28];HEAP8[r14]=r29;if(r29<<24>>24==0){r23=r8;r24=520;r25=r14;r26=r13;r27=r11;break}else{r14=r14+1|0;r28=r28+1|0}}}r15=r15+1|0;r16=r23;r17=r24;r18=r25;r19=r26;r20=r27}if(r4==9){HEAP8[r7+27|0]=0;r21=1;r22=r10}r10=0;while(1){if((HEAP8[r7+r10|0]|0)==0){break}r10=r10+1|0}r7=r22+r10|0;if((r19|r7>>>0<r22>>>0|0)!=0){r9=-1;STACKTOP=r5;return r9}if((r1|0)==0){r9=r7;STACKTOP=r5;return r9}else{r30=0;r31=r1;r32=r3}L30:while(1){r3=HEAP8[r32];HEAP8[r31]=r3;do{if(r3<<24>>24==37){r1=r32+1|0;if(!((HEAP8[r1]|0)==115&(r30|0)<(r21|0))){r33=r1;break}r1=r31+_yytnamerr(r31,HEAP32[r6+(r30<<2)>>2])|0;r30=r30+1|0;r31=r1;r32=r32+2|0;continue L30}else if(r3<<24>>24==0){r9=r7;break L30}else{r33=r32+1|0}}while(0);r30=r30;r31=r31+1|0;r32=r33}STACKTOP=r5;return r9}function _yytnamerr(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;L1:do{if((HEAP8[r2]|0)==34){r3=(r1|0)==0;r4=r2;r5=0;while(1){r6=r4+1|0;r7=HEAP8[r6];r8=r7<<24>>24;if((r8|0)==39|(r8|0)==44){break L1}else if((r8|0)==34){break}else if((r8|0)==92){r8=r4+2|0;if((HEAP8[r8]|0)==92){r9=r8;r10=92}else{break L1}}else{r9=r6;r10=r7}if(!r3){HEAP8[r1+r5|0]=r10}r4=r9;r5=r5+1|0}if(r3){r11=r5;return r11}HEAP8[r1+r5|0]=0;r11=r5;return r11}}while(0);if((r1|0)==0){r9=0;while(1){if((HEAP8[r2+r9|0]|0)==0){r11=r9;break}r9=r9+1|0}return r11}else{r12=r1;r13=r2}while(1){r2=HEAP8[r13];HEAP8[r12]=r2;if(r2<<24>>24==0){break}r12=r12+1|0;r13=r13+1|0}r11=r12-r1|0;return r11}function _yyensure_buffer_stack(r1){var r2,r3,r4,r5,r6,r7;r2=0;r3=STACKTOP;r4=HEAP32[r1+20>>2];if((r4|0)==0){r5=_malloc(4);HEAP32[r1+20>>2]=r5;if((r5|0)==0){_fprintf(HEAP32[_stderr>>2],9536,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=7904,r2));STACKTOP=r2;_exit(2)}HEAP32[r5>>2]=0;HEAP32[r1+16>>2]=1;HEAP32[r1+12>>2]=0;STACKTOP=r3;return}r5=r1+16|0;r6=HEAP32[r5>>2];if(HEAP32[r1+12>>2]>>>0<(r6-1|0)>>>0){STACKTOP=r3;return}r7=r6+8|0;r6=_realloc(r4,r7<<2);r4=r6;HEAP32[r1+20>>2]=r4;if((r6|0)==0){_fprintf(HEAP32[_stderr>>2],9536,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=7904,r2));STACKTOP=r2;_exit(2)}_memset(r4+(HEAP32[r5>>2]<<2)|0,0,32)|0;HEAP32[r5>>2]=r7;STACKTOP=r3;return}function _yy_create_buffer(r1,r2){var r3,r4,r5,r6,r7;r3=0;r4=STACKTOP;r5=_malloc(48);r6=r5;if((r5|0)==0){_fprintf(HEAP32[_stderr>>2],9536,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=45904,r3));STACKTOP=r3;_exit(2)}HEAP32[r5+12>>2]=16384;r7=_malloc(16386);HEAP32[r5+4>>2]=r7;if((r7|0)==0){_fprintf(HEAP32[_stderr>>2],9536,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=45904,r3));STACKTOP=r3;_exit(2)}else{HEAP32[r5+20>>2]=1;_yy_init_buffer(r6,r1,r2);STACKTOP=r4;return r6}}function _yy_get_previous_state(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r2=r1+64|0;r3=r1+68|0;r4=HEAP32[r1+36>>2];r5=HEAP32[r1+80>>2];r6=HEAP32[r1+44>>2];while(1){if(r5>>>0>=r4>>>0){break}r1=HEAP8[r5];if(r1<<24>>24==0){r7=1}else{r7=HEAP32[1696+((r1&255)<<2)>>2]&255}if((HEAP16[3888+(r6<<1)>>1]|0)==0){r8=r7;r9=r6}else{HEAP32[r2>>2]=r6;HEAP32[r3>>2]=r5;r8=r7;r9=r6}L9:while(1){r1=r8&255;r10=r9;while(1){r11=HEAP16[3656+(r10<<1)>>1]+r1|0;if((HEAP16[2952+(r11<<1)>>1]|0)==(r10|0)){break L9}r12=HEAP16[2720+(r10<<1)>>1];r13=r12<<16>>16;if(r12<<16>>16>97){break}else{r10=r13}}r8=HEAP32[1544+(r1<<2)>>2]&255;r9=r13}r5=r5+1|0;r6=HEAP16[840+(r11<<1)>>1]|0}return r6}function _yy_init_buffer(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r4=___errno_location();r5=HEAP32[r4>>2];do{if((r1|0)==0){r6=r3+20|0}else{HEAP32[r1+16>>2]=0;r7=r1+4|0;HEAP8[HEAP32[r7>>2]]=0;HEAP8[HEAP32[r7>>2]+1|0]=0;HEAP32[r1+8>>2]=HEAP32[r7>>2];HEAP32[r1+28>>2]=1;HEAP32[r1+44>>2]=0;r7=r3+20|0;r8=HEAP32[r7>>2];if((r8|0)==0){r9=0;r10=0}else{r9=HEAP32[r8+(HEAP32[r3+12>>2]<<2)>>2];r10=r8}if((r9|0)!=(r1|0)){r6=r7;break}r8=r10+(HEAP32[r3+12>>2]<<2)|0;HEAP32[r3+28>>2]=HEAP32[HEAP32[r8>>2]+16>>2];r11=HEAP32[HEAP32[r8>>2]+8>>2];HEAP32[r3+36>>2]=r11;HEAP32[r3+80>>2]=r11;HEAP32[r3+4>>2]=HEAP32[HEAP32[r8>>2]>>2];HEAP8[r3+24|0]=HEAP8[r11];r6=r7}}while(0);HEAP32[r1>>2]=r2;HEAP32[r1+40>>2]=1;r2=HEAP32[r6>>2];if((r2|0)==0){r12=0}else{r12=HEAP32[r2+(HEAP32[r3+12>>2]<<2)>>2]}if((r12|0)==(r1|0)){r13=r1+24|0;HEAP32[r13>>2]=0;HEAP32[r4>>2]=r5;return}HEAP32[r1+32>>2]=1;HEAP32[r1+36>>2]=0;r13=r1+24|0;HEAP32[r13>>2]=0;HEAP32[r4>>2]=r5;return}function _yy_delete_buffer(r1,r2){var r3,r4,r5;if((r1|0)==0){return}r3=HEAP32[r2+20>>2];if((r3|0)==0){r4=0;r5=0}else{r4=HEAP32[r3+(HEAP32[r2+12>>2]<<2)>>2];r5=r3}if((r4|0)==(r1|0)){HEAP32[r5+(HEAP32[r2+12>>2]<<2)>>2]=0}if((HEAP32[r1+20>>2]|0)!=0){_free(HEAP32[r1+4>>2])}_free(r1);return}function _yylex_destroy(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r2=r1+12|0;r3=r1+20|0;r4=r1+20|0;r5=r1+28|0;r6=r1+36|0;r7=r1+80|0;r8=r1+4|0;r9=r8;r10=r1+24|0;r11=r1+48|0;r12=HEAP32[r3>>2];while(1){if((r12|0)==0){r13=0;break}r14=HEAP32[r2>>2];if((HEAP32[r12+(r14<<2)>>2]|0)==0){r13=r12;break}_yy_delete_buffer(HEAP32[r12+(r14<<2)>>2],r1);HEAP32[HEAP32[r3>>2]+(HEAP32[r2>>2]<<2)>>2]=0;r14=HEAP32[r4>>2];if((r14|0)==0){r12=0;continue}r15=HEAP32[r14+(HEAP32[r2>>2]<<2)>>2];if((r15|0)==0){r12=r14;continue}_yy_delete_buffer(r15,r1);HEAP32[HEAP32[r3>>2]+(HEAP32[r2>>2]<<2)>>2]=0;r15=HEAP32[r2>>2];if((r15|0)==0){r16=0}else{r14=r15-1|0;HEAP32[r2>>2]=r14;r16=r14}r14=HEAP32[r3>>2];if((r14|0)==0){r12=0;continue}r15=r14+(r16<<2)|0;r17=HEAP32[r15>>2];if((r17|0)==0){r12=r14;continue}HEAP32[r5>>2]=HEAP32[r17+16>>2];r17=HEAP32[HEAP32[r15>>2]+8>>2];HEAP32[r6>>2]=r17;HEAP32[r7>>2]=r17;HEAP32[r9>>2]=HEAP32[HEAP32[r15>>2]>>2];HEAP8[r10]=HEAP8[r17];HEAP32[r11>>2]=1;r12=r14}_free(r13);HEAP32[r3>>2]=0;r3=r1+60|0;_free(HEAP32[r3>>2]);HEAP32[r4>>2]=0;HEAP32[r6>>2]=0;HEAP32[r1+40>>2]=0;HEAP32[r1+44>>2]=0;HEAP32[r1+52>>2]=0;HEAP32[r1+56>>2]=0;HEAP32[r3>>2]=0;HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;HEAP32[r8+8>>2]=0;HEAP32[r8+12>>2]=0;_free(r1);return}function _lm3g_apply_weights(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+8|0;r8=r7;r9=r1+20|0;r10=HEAP32[r9>>2];if(r4>0){r11=Math_log(r4);r12=(r11*HEAPF64[r10+48>>3]&-1)>>HEAP8[r10+9|0]}else{r12=HEAP32[r10+64>>2]}r11=r5;if(r5>0){r5=Math_log(r11);r13=(r5*HEAPF64[r10+48>>3]&-1)>>HEAP8[r10+9|0]}else{r13=HEAP32[r10+64>>2]}r5=1-r11;if(r5>0){r11=Math_log(r5);r14=(r11*HEAPF64[r10+48>>3]&-1)>>HEAP8[r10+9|0]}else{r14=HEAP32[r10+64>>2]}r10=r1+4|0;r11=r2|0;r5=r1+24|0;r4=r1+48|0;r15=r1+36|0;r16=0;while(1){if((r16|0)>=(HEAP32[HEAP32[r10>>2]>>2]|0)){break}r17=(HEAP32[HEAP32[r11>>2]+(r16*12&-1)+4>>2]|0)/HEAPF32[r5>>2]&-1;r18=_ngram_ng_prob(r1,r16,0,0,r8);HEAP32[HEAP32[r11>>2]+(r16*12&-1)+4>>2]=r17*r3&-1;r17=HEAP32[HEAP32[r4>>2]+(r16<<2)>>2];do{if((HEAP8[r17]|0)==60){r19=r17;r20=15496;while(1){r21=r19+1|0;r22=r20+1|0;r23=HEAP8[r21];r24=HEAP8[r22];if(r23<<24>>24!=r24<<24>>24|r23<<24>>24==0|r24<<24>>24==0){break}else{r19=r21;r20=r22}}if(r23<<24>>24!=r24<<24>>24){r6=17;break}HEAP32[HEAP32[r11>>2]+(r16*12&-1)>>2]=(r18*r3&-1)+r12}else{r6=17}}while(0);if(r6==17){r6=0;r17=(_logmath_add(HEAP32[r9>>2],r18+r13|0,HEAP32[r15>>2]+r14|0)*r3&-1)+r12|0;HEAP32[HEAP32[r11>>2]+(r16*12&-1)>>2]=r17}r16=r16+1|0}r16=r2+16|0;r11=r2+12|0;r15=r1+28|0;r9=0;while(1){if((r9|0)>=(HEAP32[r16>>2]|0)){break}r6=HEAP32[r11>>2]+(r9<<2)|0;HEAP32[r6>>2]=(((HEAP32[r6>>2]-HEAP32[r15>>2]|0)/HEAPF32[r5>>2]&-1)*r3&-1)+r12;r9=r9+1|0}if(HEAPU8[r1+16|0]<=2){HEAP32[r15>>2]=r12;r25=r1+32|0;HEAP32[r25>>2]=r13;r26=r1+40|0;HEAP32[r26>>2]=r14;HEAPF32[r5>>2]=r3;STACKTOP=r7;return}r9=r2+24|0;r11=r2+20|0;r16=0;while(1){if((r16|0)>=(HEAP32[r9>>2]|0)){break}r6=HEAP32[r11>>2]+(r16<<2)|0;HEAP32[r6>>2]=(HEAP32[r6>>2]|0)/HEAPF32[r5>>2]*r3&-1;r16=r16+1|0}r16=r2+32|0;r11=r2+28|0;r2=0;while(1){if((r2|0)>=(HEAP32[r16>>2]|0)){break}r9=HEAP32[r11>>2]+(r2<<2)|0;HEAP32[r9>>2]=(((HEAP32[r9>>2]-HEAP32[r15>>2]|0)/HEAPF32[r5>>2]&-1)*r3&-1)+r12;r2=r2+1|0}HEAP32[r15>>2]=r12;r25=r1+32|0;HEAP32[r25>>2]=r13;r26=r1+40|0;HEAP32[r26>>2]=r14;HEAPF32[r5>>2]=r3;STACKTOP=r7;return}function _lm3g_add_ug(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11;r5=0;r6=STACKTOP;if((r3|0)<0){___assert_fail(45880,32968,141,50208)}r7=r2|0;r8=r1+8|0;r9=HEAP32[r8>>2]*12&-1;r10=_realloc(HEAP32[r7>>2],r9);if((r10|0)==0){_ckd_fail(45472,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r9,HEAP32[r5+8>>2]=32968,HEAP32[r5+16>>2]=145,r5));STACKTOP=r5}r9=r10;HEAP32[r7>>2]=r9;r10=r1+4|0;r11=HEAP32[HEAP32[r10>>2]>>2];_memset(r9+(r11*12&-1)|0,0,(HEAP32[r8>>2]-r11)*12&-1)|0;r11=r2+40|0;r2=HEAP32[r8>>2]<<2;r9=_realloc(HEAP32[r11>>2],r2);if((r9|0)==0){_ckd_fail(45472,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r2,HEAP32[r5+8>>2]=32968,HEAP32[r5+16>>2]=150,r5));STACKTOP=r5}r5=r9;HEAP32[r11>>2]=r5;r11=HEAP32[HEAP32[r10>>2]>>2];_memset(r5+(r11<<2)|0,0,HEAP32[r8>>2]-r11<<2)|0;r11=HEAP32[r1+36>>2];r8=_logmath_add(HEAP32[r1+20>>2],r11+r4+HEAP32[r1+32>>2]|0,r11+HEAP32[r1+40>>2]|0);HEAP32[HEAP32[r7>>2]+(r3*12&-1)>>2]=r8;HEAP32[HEAP32[r7>>2]+(r3*12&-1)+4>>2]=0;HEAP32[HEAP32[r7>>2]+(r3*12&-1)+8>>2]=0;r7=HEAP32[r10>>2];HEAP32[r7>>2]=HEAP32[r7>>2]+1;r7=HEAP32[r10>>2];if((HEAP32[r7>>2]|0)>(r3|0)){STACKTOP=r6;return r8}HEAP32[r7>>2]=r3+1;STACKTOP=r6;return r8}function _init_sorted_list(r1){var r2,r3,r4;r2=0;r3=STACKTOP;r4=_malloc(786420);if((r4|0)==0){_ckd_fail(29016,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=65535,HEAP32[r2+8>>2]=12,HEAP32[r2+16>>2]=32968,HEAP32[r2+24>>2]=183,r2));STACKTOP=r2}if((HEAP32[r4-4>>2]&3|0)!=0){_memset(r4,0,786420)|0}r2=r1|0;HEAP32[r2>>2]=r4;HEAP32[r4>>2]=-2147483648;HEAP32[HEAP32[r2>>2]+4>>2]=0;HEAP32[HEAP32[r2>>2]+8>>2]=0;HEAP32[r1+4>>2]=1;HEAP32[r1+8>>2]=65535;STACKTOP=r3;return}function _sorted_id(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r3=0;r4=0;r5=STACKTOP;r6=HEAP32[r2>>2];r7=r1|0;r8=HEAP32[r7>>2];r9=0;while(1){r10=HEAP32[r8+(r9*12&-1)>>2];if((r6|0)==(r10|0)){r11=r9;r3=16;break}if((r6|0)<(r10|0)){r10=HEAP32[r8+(r9*12&-1)+4>>2];if((r10|0)==0){r3=5;break}else{r9=r10;continue}}else{r10=HEAP32[r8+(r9*12&-1)+8>>2];if((r10|0)==0){r3=11;break}else{r9=r10;continue}}}if(r3==5){r6=r1+4|0;r10=HEAP32[r6>>2];r12=r1+8|0;r13=HEAP32[r12>>2];do{if((r10|0)<(r13|0)){r14=r10;r15=r8}else{r16=r13+65535|0;r17=r16*12&-1;r18=_realloc(r8,r17);if((r18|0)==0){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r17,HEAP32[r4+8>>2]=32968,HEAP32[r4+16>>2]=222,r4));STACKTOP=r4}else{r17=r18;HEAP32[r7>>2]=r17;_memset(r17+(HEAP32[r12>>2]*12&-1)|0,0,786420)|0;HEAP32[r12>>2]=r16;r14=HEAP32[r6>>2];r15=HEAP32[r7>>2];break}}}while(0);HEAP32[r15+(r9*12&-1)+4>>2]=r14;HEAP32[r6>>2]=HEAP32[r6>>2]+1;r6=HEAP32[r7>>2];r14=HEAP32[r6+(r9*12&-1)+4>>2];HEAP32[r6+(r14*12&-1)>>2]=HEAP32[r2>>2];r11=r14;STACKTOP=r5;return r11}else if(r3==11){r14=r1+4|0;r6=HEAP32[r14>>2];r15=r1+8|0;r1=HEAP32[r15>>2];do{if((r6|0)<(r1|0)){r19=r6;r20=r8}else{r12=r1+65535|0;r13=r12*12&-1;r10=_realloc(r8,r13);if((r10|0)==0){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r13,HEAP32[r4+8>>2]=32968,HEAP32[r4+16>>2]=242,r4));STACKTOP=r4}else{r13=r10;HEAP32[r7>>2]=r13;_memset(r13+(HEAP32[r15>>2]*12&-1)|0,0,786420)|0;HEAP32[r15>>2]=r12;r19=HEAP32[r14>>2];r20=HEAP32[r7>>2];break}}}while(0);HEAP32[r20+(r9*12&-1)+8>>2]=r19;HEAP32[r14>>2]=HEAP32[r14>>2]+1;r14=HEAP32[r7>>2];r7=HEAP32[r14+(r9*12&-1)+8>>2];HEAP32[r14+(r7*12&-1)>>2]=HEAP32[r2>>2];r11=r7;STACKTOP=r5;return r11}else if(r3==16){STACKTOP=r5;return r11}}function _ngram_model_arpa_free(r1){var r2,r3,r4,r5;_free(HEAP32[r1+68>>2]);_free(HEAP32[r1+72>>2]);_free(HEAP32[r1+76>>2]);_free(HEAP32[r1+80>>2]);_free(HEAP32[r1+88>>2]);_free(HEAP32[r1+96>>2]);if((HEAP32[r1+108>>2]|0)==0){r2=r1+104|0;r3=r2;r4=HEAP32[r3>>2];r5=r4;_free(r5);return}_listelem_alloc_free(HEAP32[r1+112>>2]);_free(HEAP32[r1+108>>2]);r2=r1+104|0;r3=r2;r4=HEAP32[r3>>2];r5=r4;_free(r5);return}function _ngram_model_arpa_apply_weights(r1,r2,r3,r4){_lm3g_apply_weights(r1,r1+68|0,r2,r3,r4);return 0}function _lm3g_template_score(r1,r2,r3,r4,r5){var r6,r7;r6=r1;if((r4|0)==0){HEAP32[r5>>2]=1;r7=HEAP32[HEAP32[r1+68>>2]+(r2*12&-1)>>2];return r7}else if((r4|0)==1){r7=_lm3g_bg_score(r6,HEAP32[r3>>2],r2,r5);return r7}else{r7=_lm3g_tg_score(r6,HEAP32[r3+4>>2],HEAP32[r3>>2],r2,r5);return r7}}function _lm3g_template_raw_score(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r6=r1;if((r4|0)==0){HEAP32[r5>>2]=1;r7=(HEAP32[HEAP32[r1+68>>2]+(r2*12&-1)>>2]-HEAP32[r1+28>>2]|0)/HEAPF32[r1+24>>2]&-1;r8=HEAP32[HEAP32[r1+48>>2]+(r2<<2)>>2];do{if((HEAP8[r8]|0)==60){r9=r8;r10=15496;while(1){r11=r9+1|0;r12=r10+1|0;r13=HEAP8[r11];r14=HEAP8[r12];if(r13<<24>>24!=r14<<24>>24|r13<<24>>24==0|r14<<24>>24==0){break}else{r9=r11;r10=r12}}if(r13<<24>>24==r14<<24>>24){r15=r7}else{break}return r15}}while(0);r14=HEAP32[r1+36>>2]+HEAP32[r1+40>>2]|0;r13=HEAP32[r1+20>>2];r8=HEAP32[r13+64>>2];if((r14|0)<=(r8|0)){r15=r7;return r15}r10=HEAPF64[r13+24>>3];r9=HEAP8[r13+9|0]|0;r12=Math_pow(r10,r7<<r9|0)-Math_pow(r10,r14<<r9|0);if(r12<=0){r15=r8;return r15}r8=Math_log(r12);r15=(r8*HEAPF64[r13+48>>3]&-1)>>r9;return r15}else if((r4|0)==1){r16=_lm3g_bg_score(r6,HEAP32[r3>>2],r2,r5)}else{r16=_lm3g_tg_score(r6,HEAP32[r3+4>>2],HEAP32[r3>>2],r2,r5)}r15=(r16-HEAP32[r1+28>>2]|0)/HEAPF32[r1+24>>2]&-1;return r15}function _lm3g_template_add_ug(r1,r2,r3){return _lm3g_add_ug(r1,r1+68|0,r2,r3)}function _lm3g_template_flush(r1){var r2;if((HEAP32[r1+108>>2]|0)==0){return}r2=r1+112|0;_listelem_alloc_free(HEAP32[r2>>2]);_memset(HEAP32[r1+108>>2],0,HEAP32[HEAP32[r1+4>>2]>>2]<<2)|0;r1=_listelem_alloc_init(24);HEAP32[r2>>2]=r1;return}function _lm3g_template_iter(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r5=0;r6=0;r7=STACKTOP;r8=r1;r9=_malloc(24);if((r9|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=24,HEAP32[r6+16>>2]=16608,HEAP32[r6+24>>2]=292,r6));STACKTOP=r6}if((HEAP32[r9-4>>2]&3|0)!=0){_memset(r9,0,24)|0}HEAP32[r9>>2]=r1;r6=___ckd_calloc__(HEAPU8[r1+16|0],4,11488,703);HEAP32[r9+4>>2]=r6;HEAP16[r9+8>>1]=r4;HEAP16[r9+10>>1]=0;if((r4|0)==0){HEAP32[r9+12>>2]=HEAP32[r1+68>>2]+(r2*12&-1);r10=r9;STACKTOP=r7;return r10}else if((r4|0)==1){r11=r1+68|0;HEAP32[r9+12>>2]=HEAP32[r11>>2]+(HEAP32[r3>>2]*12&-1);r12=HEAP32[r3>>2];r13=HEAP32[r11>>2];r11=HEAP32[r13+(r12*12&-1)+8>>2];r14=HEAP32[r13+((r12+1)*12&-1)+8>>2]-r11|0;r12=HEAP32[r1+72>>2];r13=r12+(r11*12&-1)|0;r15=r9+16|0;HEAP32[r15>>2]=r13;r16=_find_bg(r13,r14,r2);if((r16|0)<0){_free(r6);FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[r9>>2]+64>>2]+44>>2]](r9);r10=0;STACKTOP=r7;return r10}else{HEAP32[r15>>2]=r12+((r11+r16)*12&-1);r10=r9;STACKTOP=r7;return r10}}else if((r4|0)==2){r4=r3+4|0;HEAP32[r9+12>>2]=HEAP32[r1+68>>2]+(HEAP32[r4>>2]*12&-1);r16=HEAP32[r3>>2];r11=r1+108|0;r12=HEAP32[r11>>2]+(r16<<2)|0;r15=0;while(1){r17=HEAP32[r12>>2];if((r17|0)==0){r5=14;break}if((HEAP32[r17>>2]|0)==(HEAP32[r4>>2]|0)){r5=15;break}r12=r17+20|0;r15=r17}do{if(r5==14){_load_tginfo(r8,HEAP32[r4>>2],r16);r18=HEAP32[HEAP32[r11>>2]+(HEAP32[r3>>2]<<2)>>2]}else if(r5==15){if((r15|0)==0){r18=r17;break}r12=r17+20|0;HEAP32[r15+20>>2]=HEAP32[r12>>2];HEAP32[r12>>2]=HEAP32[HEAP32[r11>>2]+(HEAP32[r3>>2]<<2)>>2];HEAP32[HEAP32[r11>>2]+(HEAP32[r3>>2]<<2)>>2]=r17;r18=r17}}while(0);HEAP32[r18+12>>2]=1;r17=HEAP32[r18+4>>2];r3=HEAP32[r18+16>>2];r18=r9+20|0;HEAP32[r18>>2]=r3;r11=_find_tg(r3,r17,r2);if((r11|0)<=-1){_free(HEAP32[r9+4>>2]);FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[r9>>2]+64>>2]+44>>2]](r9);r10=0;STACKTOP=r7;return r10}r2=r3+(r11<<3)|0;HEAP32[r18>>2]=r2;r18=r1+72|0;r11=HEAP32[r18>>2];r3=r9+16|0;HEAP32[r3>>2]=r11;r17=r1+104|0;r15=r1+76|0;r1=r11;while(1){r11=HEAP32[r18>>2];r5=((r1-r11|0)/12&-1)+1|0;if((HEAP32[HEAP32[r17>>2]+(r5>>9<<2)>>2]+HEAPU16[r11+(r5*12&-1)+8>>1]|0)>(r2-HEAP32[r15>>2]>>3|0)){break}r5=r1+12|0;HEAP32[r3>>2]=r5;r1=r5}r10=r9;STACKTOP=r7;return r10}else{___assert_fail(15600,16608,362,50184)}}function _lm3g_template_mgrams(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r3=0;r4=STACKTOP;r5=_malloc(24);if((r5|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=24,HEAP32[r3+16>>2]=16608,HEAP32[r3+24>>2]=372,r3));STACKTOP=r3}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,24)|0}HEAP32[r5>>2]=r1;r3=___ckd_calloc__(HEAPU8[r1+16|0],4,11488,703);HEAP32[r5+4>>2]=r3;HEAP16[r5+8>>1]=r2;HEAP16[r5+10>>1]=0;r3=HEAP32[r1+68>>2];r6=r5+12|0;HEAP32[r6>>2]=r3;r7=r1+72|0;r8=HEAP32[r7>>2];r9=r5+16|0;HEAP32[r9>>2]=r8;r10=r1+76|0;r11=HEAP32[r10>>2];HEAP32[r5+20>>2]=r11;L7:do{if((r2|0)>1){if((HEAP32[HEAP32[r1+4>>2]+4>>2]|0)<=1){r12=r8;break}r13=r1+104|0;r14=r8;while(1){r15=HEAP32[r7>>2];r16=((r14-r15|0)/12&-1)+1|0;if((HEAP32[HEAP32[r13>>2]+(r16>>9<<2)>>2]+HEAPU16[r15+(r16*12&-1)+8>>1]|0)>(r11-HEAP32[r10>>2]>>3|0)){r12=r14;break L7}r16=r14+12|0;HEAP32[r9>>2]=r16;r14=r16}}else{r12=r8}}while(0);if((r2|0)<=0){r17=r5;STACKTOP=r4;return r17}if((HEAP32[HEAP32[r1+4>>2]>>2]|0)>1){r18=r3}else{r17=r5;STACKTOP=r4;return r17}while(1){if((HEAP32[r18+20>>2]|0)>((r12-HEAP32[r7>>2]|0)/12&-1|0)){break}r3=r18+12|0;HEAP32[r6>>2]=r3;r18=r3}r17=r5;STACKTOP=r4;return r17}function _lm3g_template_successors(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r2=0;r3=0;r4=STACKTOP;r5=r1|0;r6=HEAP32[r5>>2];r7=_malloc(24);if((r7|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=24,HEAP32[r3+16>>2]=16608,HEAP32[r3+24>>2]=400,r3));STACKTOP=r3}if((HEAP32[r7-4>>2]&3|0)!=0){_memset(r7,0,24)|0}r3=HEAP32[r1+12>>2];HEAP32[r7+12>>2]=r3;r8=r1+8|0;r9=HEAP16[r8>>1]|0;do{if((r9|0)==1){r10=HEAP32[r1+16>>2];HEAP32[r7+16>>2]=r10;r11=HEAP32[r6+72>>2];r12=r11;r13=r11;r11=(r10+12-r13|0)/12&-1;r14=HEAP32[HEAP32[r5>>2]+4>>2];if((r11|0)<(HEAP32[r14+4>>2]|0)){r15=(r10-r13|0)/12&-1;r16=r15>>9;r17=HEAP32[r6+104>>2];r18=r12+(r15*12&-1)+8|0;if((HEAP32[r17+(r16<<2)>>2]+HEAPU16[r18>>1]|0)==(HEAP32[r17+(r11>>9<<2)>>2]+HEAPU16[r12+(r11*12&-1)+8>>1]|0)){r2=16;break}else{r19=r17;r20=r16;r21=r18}}else{r18=(r10-r13|0)/12&-1;r19=HEAP32[r6+104>>2];r20=r18>>9;r21=r12+(r18*12&-1)+8|0}r18=HEAP32[r19+(r20<<2)>>2]+HEAPU16[r21>>1]|0;if((r18|0)==(HEAP32[r14+8>>2]|0)){r2=16;break}HEAP32[r7+20>>2]=HEAP32[r6+76>>2]+(r18<<3);r2=15}else if((r9|0)==0){r18=HEAP32[HEAP32[r5>>2]+4>>2];r14=HEAP32[r3+8>>2];if(((r3+12-HEAP32[r6+68>>2]|0)/12&-1|0)<(HEAP32[r18>>2]|0)){if((r14|0)==(HEAP32[r3+20>>2]|0)){r2=16;break}else{r22=r14}}else{r22=r14}if((r22|0)==(HEAP32[r18+4>>2]|0)){r2=16;break}HEAP32[r7+16>>2]=HEAP32[r6+72>>2]+(r22*12&-1);r2=15}else{r2=16}}while(0);if(r2==15){r22=HEAP32[r5>>2];r5=HEAP16[r8>>1]+1&65535;HEAP32[r7>>2]=r22;r8=___ckd_calloc__(HEAPU8[r22+16|0],4,11488,703);HEAP32[r7+4>>2]=r8;HEAP16[r7+8>>1]=r5;HEAP16[r7+10>>1]=1;r23=r7;STACKTOP=r4;return r23}else if(r2==16){_free(r7);r23=0;STACKTOP=r4;return r23}}function _lm3g_template_iter_get(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=HEAP32[r1>>2];r5=r1+4|0;HEAP32[HEAP32[r5>>2]>>2]=(HEAP32[r1+12>>2]-HEAP32[r4+68>>2]|0)/12&-1;r6=r1+16|0;r7=HEAP32[r6>>2];if((r7|0)!=0){HEAP32[HEAP32[r5>>2]+4>>2]=HEAP32[r7>>2]}r7=r1+20|0;r8=HEAP32[r7>>2];if((r8|0)!=0){HEAP32[HEAP32[r5>>2]+8>>2]=HEAP32[r8>>2]}r8=HEAP16[r1+8>>1]|0;do{if((r8|0)==1){HEAP32[r2>>2]=HEAP32[HEAP32[r4+80>>2]+(HEAPU16[HEAP32[r6>>2]+4>>1]<<2)>>2];r9=HEAP32[r4+88>>2];if((r9|0)==0){HEAP32[r3>>2]=0;break}else{HEAP32[r3>>2]=HEAP32[r9+(HEAPU16[HEAP32[r6>>2]+6>>1]<<2)>>2];break}}else if((r8|0)==0){r9=r1+12|0;HEAP32[r2>>2]=HEAP32[HEAP32[r9>>2]>>2];HEAP32[r3>>2]=HEAP32[HEAP32[r9>>2]+4>>2]}else if((r8|0)==2){HEAP32[r2>>2]=HEAP32[HEAP32[r4+96>>2]+(HEAPU16[HEAP32[r7>>2]+4>>1]<<2)>>2];HEAP32[r3>>2]=0}else{r10=0;return r10}}while(0);r10=HEAP32[r5>>2];return r10}function _lm3g_template_iter_next(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;r2=0;r3=0;r4=STACKTOP;r5=r1|0;r6=HEAP32[r5>>2];r7=HEAP16[r1+8>>1]|0;L1:do{if((r7|0)==0){r8=r1+12|0;r9=HEAP32[r8>>2]+12|0;HEAP32[r8>>2]=r9;if(((r9-HEAP32[r6+68>>2]|0)/12&-1|0)<(HEAP32[HEAP32[r6+4>>2]>>2]|0)){r10=r1}else{break}STACKTOP=r4;return r10}else if((r7|0)==1){r9=r1+16|0;r8=HEAP32[r9>>2]+12|0;HEAP32[r9>>2]=r8;r9=r6+72|0;r11=HEAP32[r9>>2];r12=r8;r8=r6+4|0;if(((r12-r11|0)/12&-1|0)>=(HEAP32[HEAP32[r8>>2]+4>>2]|0)){break}r13=r1+12|0;r14=r1+10|0;r15=r6+68|0;r16=HEAP32[r13>>2];r17=r11;while(1){if(((r12-r17|0)/12&-1|0)<(HEAP32[r16+20>>2]|0)){r10=r1;r2=21;break}if((HEAP16[r14>>1]|0)!=0){break L1}r11=r16+12|0;HEAP32[r13>>2]=r11;r18=HEAP32[r9>>2];if((r11|0)==(HEAP32[r15>>2]+(HEAP32[HEAP32[r8>>2]>>2]*12&-1)|0)){r2=8;break}else{r16=r11;r17=r18}}if(r2==8){_err_msg(4,16608,513,16336,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=(r12-r18|0)/12&-1,r3));STACKTOP=r3;break}else if(r2==21){STACKTOP=r4;return r10}}else if((r7|0)==2){r17=r1+20|0;r16=HEAP32[r17>>2]+8|0;HEAP32[r17>>2]=r16;r17=r6+76|0;r8=HEAP32[r17>>2];r15=r16;r16=r6+4|0;if((r15-r8>>3|0)>=(HEAP32[HEAP32[r16>>2]+8>>2]|0)){break}r9=r1+16|0;r13=r6+72|0;r14=r6+104|0;r11=r1+10|0;r19=HEAP32[r9>>2];r20=HEAP32[r13>>2];r21=r8;while(1){r22=r19;r8=((r22-r20|0)/12&-1)+1|0;if((r15-r21>>3|0)<(HEAP32[HEAP32[r14>>2]+(r8>>9<<2)>>2]+HEAPU16[r20+(r8*12&-1)+8>>1]|0)){break}if((HEAP16[r11>>1]|0)!=0){break L1}r8=r19+12|0;HEAP32[r9>>2]=r8;r23=HEAP32[r13>>2];r24=HEAP32[r17>>2];if((r8|0)==(r23+(HEAP32[HEAP32[r16>>2]+4>>2]*12&-1)|0)){r2=15;break}else{r19=r8;r20=r23;r21=r24}}if(r2==15){_err_msg(4,16608,531,16040,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r15-r24>>3,r3));STACKTOP=r3;break}r21=r1+12|0;r19=r6+68|0;r9=HEAP32[r21>>2];r11=r20;while(1){if(((r22-r11|0)/12&-1|0)<(HEAP32[r9+20>>2]|0)){r10=r1;r2=21;break}r14=r9+12|0;HEAP32[r21>>2]=r14;if((r14|0)==(HEAP32[r19>>2]+(HEAP32[HEAP32[r16>>2]>>2]*12&-1)|0)){r2=19;break}r9=r14;r11=HEAP32[r13>>2]}if(r2==19){_err_msg(4,16608,541,15904,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r15-HEAP32[r17>>2]>>3,r3));STACKTOP=r3;break}else if(r2==21){STACKTOP=r4;return r10}}}while(0);_free(HEAP32[r1+4>>2]);FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[r5>>2]+64>>2]+44>>2]](r1);r10=0;STACKTOP=r4;return r10}function _lm3g_template_iter_free(r1){_free(r1);return}function _find_bg(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=0;r5=r2;r2=0;L1:while(1){r6=r5;while(1){if((r6-r2|0)<=16){r7=r2;break L1}r8=r2+r6>>1;r9=HEAP32[r1+(r8*12&-1)>>2];if(r9>>>0<r3>>>0){break}if(r9>>>0>r3>>>0){r6=r8}else{r10=r8;r4=10;break L1}}r5=r6;r2=r8+1|0}if(r4==10){return r10}while(1){if((r7|0)>=(r6|0)){r10=-1;r4=10;break}if((HEAP32[r1+(r7*12&-1)>>2]|0)==(r3|0)){r10=r7;r4=10;break}r7=r7+1|0}if(r4==10){return r10}}function _load_tginfo(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12;r4=HEAP32[r1+112>>2];r5=r4|0;r6=HEAP32[r5>>2];if((r6|0)==0){_listelem_add_block(r4,16608,107);r7=HEAP32[r5>>2]}else{r7=r6}HEAP32[r5>>2]=HEAP32[r7>>2];r5=r4+24|0;HEAP32[r5>>2]=HEAP32[r5>>2]+1;HEAP32[r7>>2]=r2;r5=r7+16|0;HEAP32[r5>>2]=0;r4=r1+108|0;HEAP32[r7+20>>2]=HEAP32[HEAP32[r4>>2]+(r3<<2)>>2];HEAP32[HEAP32[r4>>2]+(r3<<2)>>2]=r7;r4=HEAP32[r1+68>>2];r6=HEAP32[r4+(r2*12&-1)+8>>2];r8=HEAP32[r4+((r2+1)*12&-1)+8>>2]-r6|0;r2=r1+72|0;r4=HEAP32[r2>>2];do{if((r8|0)>0){r9=_find_bg(r4+(r6*12&-1)|0,r8,r3);if((r9|0)<=-1){break}HEAP32[r7+8>>2]=HEAP32[HEAP32[r1+88>>2]+(HEAPU16[r4+((r6+r9)*12&-1)+6>>1]<<2)>>2];r10=r6+r9|0;r9=r1+104|0;r11=HEAP32[HEAP32[r9>>2]+(r10>>9<<2)>>2]+HEAPU16[HEAP32[r2>>2]+(r10*12&-1)+8>>1]|0;HEAP32[r5>>2]=HEAP32[r1+76>>2]+(r11<<3);r12=r10+1|0;HEAP32[r7+4>>2]=HEAP32[HEAP32[r9>>2]+(r12>>9<<2)>>2]+HEAPU16[HEAP32[r2>>2]+(r12*12&-1)+8>>1]-r11;return}}while(0);HEAP32[r7+8>>2]=0;HEAP32[r7+4>>2]=0;return}function _find_tg(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=0;r5=r2;r2=0;L1:while(1){r6=r5;while(1){if((r6-r2|0)<=16){r7=r2;break L1}r8=r2+r6>>1;r9=HEAP32[r1+(r8<<3)>>2];if(r9>>>0<r3>>>0){break}if(r9>>>0>r3>>>0){r6=r8}else{r10=r8;r4=10;break L1}}r5=r6;r2=r8+1|0}if(r4==10){return r10}while(1){if((r7|0)>=(r6|0)){r10=-1;r4=10;break}if((HEAP32[r1+(r7<<3)>>2]|0)==(r3|0)){r10=r7;r4=10;break}r7=r7+1|0}if(r4==10){return r10}}function _lm3g_bg_score(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;do{if((r2|0)>=0){if(HEAPU8[r1+16|0]<2){break}r5=r1+68|0;r6=HEAP32[r5>>2];r7=HEAP32[r6+(r2*12&-1)+8>>2];r8=HEAP32[r1+72>>2];r9=_find_bg(r8+(r7*12&-1)|0,HEAP32[r6+((r2+1)*12&-1)+8>>2]-r7|0,r3);if((r9|0)>-1){HEAP32[r4>>2]=2;r10=HEAP32[HEAP32[r1+80>>2]+(HEAPU16[r8+((r7+r9)*12&-1)+4>>1]<<2)>>2];return r10}else{HEAP32[r4>>2]=1;r9=HEAP32[r5>>2];r10=HEAP32[r9+(r2*12&-1)+4>>2]+HEAP32[r9+(r3*12&-1)>>2]|0;return r10}}}while(0);HEAP32[r4>>2]=1;r10=HEAP32[HEAP32[r1+68>>2]+(r3*12&-1)>>2];return r10}function _lm3g_tg_score(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;r6=0;if(HEAPU8[r1+16|0]<3|(r2|0)<0|(r3|0)<0){r7=_lm3g_bg_score(r1,r3,r4,r5);return r7}r8=r1+108|0;r9=HEAP32[r8>>2]+(r3<<2)|0;r10=0;while(1){r11=HEAP32[r9>>2];if((r11|0)==0){r6=7;break}if((HEAP32[r11>>2]|0)==(r2|0)){r6=8;break}r9=r11+20|0;r10=r11}do{if(r6==7){_load_tginfo(r1,r2,r3);r12=HEAP32[HEAP32[r8>>2]+(r3<<2)>>2]}else if(r6==8){if((r10|0)==0){r12=r11;break}r9=r11+20|0;HEAP32[r10+20>>2]=HEAP32[r9>>2];HEAP32[r9>>2]=HEAP32[HEAP32[r8>>2]+(r3<<2)>>2];HEAP32[HEAP32[r8>>2]+(r3<<2)>>2]=r11;r12=r11}}while(0);HEAP32[r12+12>>2]=1;r11=HEAP32[r12+16>>2];r8=_find_tg(r11,HEAP32[r12+4>>2],r4);if((r8|0)>-1){HEAP32[r5>>2]=3;r7=HEAP32[HEAP32[r1+96>>2]+(HEAPU16[r11+(r8<<3)+4>>1]<<2)>>2];return r7}else{r8=HEAP32[r12+8>>2];r7=r8+_lm3g_bg_score(r1,r3,r4,r5)|0;return r7}}function _ngram_model_dmp_free(r1){var r2,r3,r4;_free(HEAP32[r1+68>>2]);_free(HEAP32[r1+80>>2]);r2=HEAP32[r1+116>>2];do{if((r2|0)==0){_free(HEAP32[r1+72>>2]);r3=r1+16|0;if(HEAPU8[r3]<=2){r4=r3;break}_free(HEAP32[r1+76>>2]);_free(HEAP32[r1+104>>2]);r4=r3}else{_mmio_file_unmap(r2);r4=r1+16|0}}while(0);if(HEAPU8[r4]>2){_free(HEAP32[r1+88>>2]);_free(HEAP32[r1+96>>2])}if((HEAP32[r1+108>>2]|0)==0){return}_listelem_alloc_free(HEAP32[r1+112>>2]);_free(HEAP32[r1+108>>2]);return}function _ngram_model_dmp_apply_weights(r1,r2,r3,r4){_lm3g_apply_weights(r1,r1+68|0,r2,r3,r4);return 0}function _lm3g_template_score2467(r1,r2,r3,r4,r5){var r6,r7;r6=r1;if((r4|0)==0){HEAP32[r5>>2]=1;r7=HEAP32[HEAP32[r1+68>>2]+(r2*12&-1)>>2];return r7}else if((r4|0)==1){r7=_lm3g_bg_score2480(r6,HEAP32[r3>>2],r2,r5);return r7}else{r7=_lm3g_tg_score2481(r6,HEAP32[r3+4>>2],HEAP32[r3>>2],r2,r5);return r7}}function _lm3g_template_raw_score2468(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r6=r1;if((r4|0)==1){r7=_lm3g_bg_score2480(r6,HEAP32[r3>>2],r2,r5)}else if((r4|0)==0){HEAP32[r5>>2]=1;r4=(HEAP32[HEAP32[r1+68>>2]+(r2*12&-1)>>2]-HEAP32[r1+28>>2]|0)/HEAPF32[r1+24>>2]&-1;r8=HEAP32[HEAP32[r1+48>>2]+(r2<<2)>>2];do{if((HEAP8[r8]|0)==60){r9=r8;r10=15496;while(1){r11=r9+1|0;r12=r10+1|0;r13=HEAP8[r11];r14=HEAP8[r12];if(r13<<24>>24!=r14<<24>>24|r13<<24>>24==0|r14<<24>>24==0){break}else{r9=r11;r10=r12}}if(r13<<24>>24==r14<<24>>24){r15=r4}else{break}return r15}}while(0);r14=HEAP32[r1+36>>2]+HEAP32[r1+40>>2]|0;r13=HEAP32[r1+20>>2];r8=HEAP32[r13+64>>2];if((r14|0)<=(r8|0)){r15=r4;return r15}r10=HEAPF64[r13+24>>3];r9=HEAP8[r13+9|0]|0;r12=Math_pow(r10,r4<<r9|0)-Math_pow(r10,r14<<r9|0);if(r12<=0){r15=r8;return r15}r8=Math_log(r12);r15=(r8*HEAPF64[r13+48>>3]&-1)>>r9;return r15}else{r7=_lm3g_tg_score2481(r6,HEAP32[r3+4>>2],HEAP32[r3>>2],r2,r5)}r15=(r7-HEAP32[r1+28>>2]|0)/HEAPF32[r1+24>>2]&-1;return r15}function _lm3g_template_add_ug2469(r1,r2,r3){return _lm3g_add_ug(r1,r1+68|0,r2,r3)}function _lm3g_template_flush2470(r1){var r2;if((HEAP32[r1+108>>2]|0)==0){return}r2=r1+112|0;_listelem_alloc_free(HEAP32[r2>>2]);_memset(HEAP32[r1+108>>2],0,HEAP32[HEAP32[r1+4>>2]>>2]<<2)|0;r1=_listelem_alloc_init(24);HEAP32[r2>>2]=r1;return}function _lm3g_template_iter2471(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r5=0;r6=0;r7=STACKTOP;r8=r1;r9=_malloc(24);if((r9|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=24,HEAP32[r6+16>>2]=16608,HEAP32[r6+24>>2]=292,r6));STACKTOP=r6}if((HEAP32[r9-4>>2]&3|0)!=0){_memset(r9,0,24)|0}HEAP32[r9>>2]=r1;r6=___ckd_calloc__(HEAPU8[r1+16|0],4,11488,703);HEAP32[r9+4>>2]=r6;HEAP16[r9+8>>1]=r4;HEAP16[r9+10>>1]=0;if((r4|0)==0){HEAP32[r9+12>>2]=HEAP32[r1+68>>2]+(r2*12&-1);r10=r9;STACKTOP=r7;return r10}else if((r4|0)==1){r11=r1+68|0;HEAP32[r9+12>>2]=HEAP32[r11>>2]+(HEAP32[r3>>2]*12&-1);r12=HEAP32[r3>>2];r13=HEAP32[r11>>2];r11=HEAP32[r13+(r12*12&-1)+8>>2];r14=HEAP32[r13+((r12+1)*12&-1)+8>>2]-r11|0;r12=HEAP32[r1+72>>2];r13=r12+(r11<<3)|0;r15=r9+16|0;HEAP32[r15>>2]=r13;r16=_find_bg2477(r13,r14,r2);if((r16|0)<0){_free(r6);FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[r9>>2]+64>>2]+44>>2]](r9);r10=0;STACKTOP=r7;return r10}else{HEAP32[r15>>2]=r12+(r11+r16<<3);r10=r9;STACKTOP=r7;return r10}}else if((r4|0)==2){r4=r3+4|0;HEAP32[r9+12>>2]=HEAP32[r1+68>>2]+(HEAP32[r4>>2]*12&-1);r16=HEAP32[r3>>2];r11=r1+108|0;r12=HEAP32[r11>>2]+(r16<<2)|0;r15=0;while(1){r17=HEAP32[r12>>2];if((r17|0)==0){r5=14;break}if((HEAP32[r17>>2]|0)==(HEAP32[r4>>2]|0)){r5=15;break}r12=r17+20|0;r15=r17}do{if(r5==14){_load_tginfo2478(r8,HEAP32[r4>>2],r16);r18=HEAP32[HEAP32[r11>>2]+(HEAP32[r3>>2]<<2)>>2]}else if(r5==15){if((r15|0)==0){r18=r17;break}r12=r17+20|0;HEAP32[r15+20>>2]=HEAP32[r12>>2];HEAP32[r12>>2]=HEAP32[HEAP32[r11>>2]+(HEAP32[r3>>2]<<2)>>2];HEAP32[HEAP32[r11>>2]+(HEAP32[r3>>2]<<2)>>2]=r17;r18=r17}}while(0);HEAP32[r18+12>>2]=1;r17=HEAP32[r18+4>>2];r3=HEAP32[r18+16>>2];r18=r9+20|0;HEAP32[r18>>2]=r3;r11=_find_tg2479(r3,r17,r2);if((r11|0)<=-1){_free(HEAP32[r9+4>>2]);FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[r9>>2]+64>>2]+44>>2]](r9);r10=0;STACKTOP=r7;return r10}r2=r3+(r11<<2)|0;HEAP32[r18>>2]=r2;r18=r1+72|0;r11=HEAP32[r18>>2];r3=r9+16|0;HEAP32[r3>>2]=r11;r17=r1+104|0;r15=r1+76|0;r1=r11;while(1){r11=HEAP32[r18>>2];r5=(r1-r11>>3)+1|0;if((HEAP32[HEAP32[r17>>2]+(r5>>9<<2)>>2]+HEAPU16[r11+(r5<<3)+6>>1]|0)>(r2-HEAP32[r15>>2]>>2|0)){break}r5=r1+8|0;HEAP32[r3>>2]=r5;r1=r5}r10=r9;STACKTOP=r7;return r10}else{___assert_fail(15600,16608,362,50184)}}function _lm3g_template_mgrams2472(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r3=0;r4=STACKTOP;r5=_malloc(24);if((r5|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=24,HEAP32[r3+16>>2]=16608,HEAP32[r3+24>>2]=372,r3));STACKTOP=r3}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,24)|0}HEAP32[r5>>2]=r1;r3=___ckd_calloc__(HEAPU8[r1+16|0],4,11488,703);HEAP32[r5+4>>2]=r3;HEAP16[r5+8>>1]=r2;HEAP16[r5+10>>1]=0;r3=HEAP32[r1+68>>2];r6=r5+12|0;HEAP32[r6>>2]=r3;r7=r1+72|0;r8=HEAP32[r7>>2];r9=r5+16|0;HEAP32[r9>>2]=r8;r10=r1+76|0;r11=HEAP32[r10>>2];HEAP32[r5+20>>2]=r11;L7:do{if((r2|0)>1){if((HEAP32[HEAP32[r1+4>>2]+4>>2]|0)<=1){r12=r8;break}r13=r1+104|0;r14=r8;while(1){r15=HEAP32[r7>>2];r16=(r14-r15>>3)+1|0;if((HEAP32[HEAP32[r13>>2]+(r16>>9<<2)>>2]+HEAPU16[r15+(r16<<3)+6>>1]|0)>(r11-HEAP32[r10>>2]>>2|0)){r12=r14;break L7}r16=r14+8|0;HEAP32[r9>>2]=r16;r14=r16}}else{r12=r8}}while(0);if((r2|0)<=0){r17=r5;STACKTOP=r4;return r17}if((HEAP32[HEAP32[r1+4>>2]>>2]|0)>1){r18=r3}else{r17=r5;STACKTOP=r4;return r17}while(1){if((HEAP32[r18+20>>2]|0)>(r12-HEAP32[r7>>2]>>3|0)){break}r3=r18+12|0;HEAP32[r6>>2]=r3;r18=r3}r17=r5;STACKTOP=r4;return r17}function _lm3g_template_successors2473(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;r2=0;r3=0;r4=STACKTOP;r5=r1|0;r6=HEAP32[r5>>2];r7=_malloc(24);if((r7|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=24,HEAP32[r3+16>>2]=16608,HEAP32[r3+24>>2]=400,r3));STACKTOP=r3}if((HEAP32[r7-4>>2]&3|0)!=0){_memset(r7,0,24)|0}r3=HEAP32[r1+12>>2];HEAP32[r7+12>>2]=r3;r8=r1+8|0;r9=HEAP16[r8>>1]|0;do{if((r9|0)==0){r10=HEAP32[HEAP32[r5>>2]+4>>2];r11=HEAP32[r3+8>>2];if(((r3+12-HEAP32[r6+68>>2]|0)/12&-1|0)<(HEAP32[r10>>2]|0)){if((r11|0)==(HEAP32[r3+20>>2]|0)){r2=16;break}else{r12=r11}}else{r12=r11}if((r12|0)==(HEAP32[r10+4>>2]|0)){r2=16;break}HEAP32[r7+16>>2]=HEAP32[r6+72>>2]+(r12<<3);r2=15}else if((r9|0)==1){r10=HEAP32[r1+16>>2];HEAP32[r7+16>>2]=r10;r11=HEAP32[r6+72>>2];r13=r11;r14=r11;r11=r10+8-r14|0;r15=r11>>3;r16=HEAP32[HEAP32[r5>>2]+4>>2];if((r15|0)<(HEAP32[r16+4>>2]|0)){r17=r10-r14|0;r18=r17>>12;r19=HEAP32[r6+104>>2];r20=r13+(r17>>3<<3)+6|0;if((HEAP32[r19+(r18<<2)>>2]+HEAPU16[r20>>1]|0)==(HEAP32[r19+(r11>>12<<2)>>2]+HEAPU16[r13+(r15<<3)+6>>1]|0)){r2=16;break}else{r21=r19;r22=r18;r23=r20}}else{r20=r10-r14|0;r21=HEAP32[r6+104>>2];r22=r20>>12;r23=r13+(r20>>3<<3)+6|0}r20=HEAP32[r21+(r22<<2)>>2]+HEAPU16[r23>>1]|0;if((r20|0)==(HEAP32[r16+8>>2]|0)){r2=16;break}HEAP32[r7+20>>2]=HEAP32[r6+76>>2]+(r20<<2);r2=15}else{r2=16}}while(0);if(r2==15){r6=HEAP32[r5>>2];r5=HEAP16[r8>>1]+1&65535;HEAP32[r7>>2]=r6;r8=___ckd_calloc__(HEAPU8[r6+16|0],4,11488,703);HEAP32[r7+4>>2]=r8;HEAP16[r7+8>>1]=r5;HEAP16[r7+10>>1]=1;r24=r7;STACKTOP=r4;return r24}else if(r2==16){_free(r7);r24=0;STACKTOP=r4;return r24}}function _lm3g_template_iter_get2474(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=HEAP32[r1>>2];r5=r1+4|0;HEAP32[HEAP32[r5>>2]>>2]=(HEAP32[r1+12>>2]-HEAP32[r4+68>>2]|0)/12&-1;r6=r1+16|0;r7=HEAP32[r6>>2];if((r7|0)!=0){HEAP32[HEAP32[r5>>2]+4>>2]=HEAPU16[r7>>1]}r7=r1+20|0;r8=HEAP32[r7>>2];if((r8|0)!=0){HEAP32[HEAP32[r5>>2]+8>>2]=HEAPU16[r8>>1]}r8=HEAP16[r1+8>>1]|0;do{if((r8|0)==2){HEAP32[r2>>2]=HEAP32[HEAP32[r4+96>>2]+(HEAPU16[HEAP32[r7>>2]+2>>1]<<2)>>2];HEAP32[r3>>2]=0}else if((r8|0)==1){HEAP32[r2>>2]=HEAP32[HEAP32[r4+80>>2]+(HEAPU16[HEAP32[r6>>2]+2>>1]<<2)>>2];r9=HEAP32[r4+88>>2];if((r9|0)==0){HEAP32[r3>>2]=0;break}else{HEAP32[r3>>2]=HEAP32[r9+(HEAPU16[HEAP32[r6>>2]+4>>1]<<2)>>2];break}}else if((r8|0)==0){r9=r1+12|0;HEAP32[r2>>2]=HEAP32[HEAP32[r9>>2]>>2];HEAP32[r3>>2]=HEAP32[HEAP32[r9>>2]+4>>2]}else{r10=0;return r10}}while(0);r10=HEAP32[r5>>2];return r10}function _lm3g_template_iter_next2475(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r2=0;r3=0;r4=STACKTOP;r5=r1|0;r6=HEAP32[r5>>2];r7=HEAP16[r1+8>>1]|0;L1:do{if((r7|0)==2){r8=r1+20|0;r9=HEAP32[r8>>2]+4|0;HEAP32[r8>>2]=r9;r8=r6+76|0;r10=HEAP32[r8>>2];r11=r9;r9=r6+4|0;if((r11-r10>>2|0)>=(HEAP32[HEAP32[r9>>2]+8>>2]|0)){break}r12=r1+16|0;r13=r6+72|0;r14=r6+104|0;r15=r1+10|0;r16=HEAP32[r12>>2];r17=HEAP32[r13>>2];r18=r10;while(1){r19=r16;r10=(r19-r17>>3)+1|0;if((r11-r18>>2|0)<(HEAP32[HEAP32[r14>>2]+(r10>>9<<2)>>2]+HEAPU16[r17+(r10<<3)+6>>1]|0)){break}if((HEAP16[r15>>1]|0)!=0){break L1}r10=r16+8|0;HEAP32[r12>>2]=r10;r20=HEAP32[r13>>2];r21=HEAP32[r8>>2];if((r10|0)==(r20+(HEAP32[HEAP32[r9>>2]+4>>2]<<3)|0)){r2=15;break}else{r16=r10;r17=r20;r18=r21}}if(r2==15){_err_msg(4,16608,531,16040,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r11-r21>>2,r3));STACKTOP=r3;break}r18=r1+12|0;r16=r6+68|0;r12=HEAP32[r18>>2];r15=r17;while(1){if((r19-r15>>3|0)<(HEAP32[r12+20>>2]|0)){r22=r1;r2=21;break}r14=r12+12|0;HEAP32[r18>>2]=r14;if((r14|0)==(HEAP32[r16>>2]+(HEAP32[HEAP32[r9>>2]>>2]*12&-1)|0)){r2=19;break}r12=r14;r15=HEAP32[r13>>2]}if(r2==19){_err_msg(4,16608,541,15904,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r11-HEAP32[r8>>2]>>2,r3));STACKTOP=r3;break}else if(r2==21){STACKTOP=r4;return r22}}else if((r7|0)==1){r13=r1+16|0;r15=HEAP32[r13>>2]+8|0;HEAP32[r13>>2]=r15;r13=r6+72|0;r12=HEAP32[r13>>2];r9=r15;r15=r6+4|0;if((r9-r12>>3|0)>=(HEAP32[HEAP32[r15>>2]+4>>2]|0)){break}r16=r1+12|0;r18=r1+10|0;r17=r6+68|0;r14=HEAP32[r16>>2];r20=r12;while(1){if((r9-r20>>3|0)<(HEAP32[r14+20>>2]|0)){r22=r1;r2=21;break}if((HEAP16[r18>>1]|0)!=0){break L1}r12=r14+12|0;HEAP32[r16>>2]=r12;r23=HEAP32[r13>>2];if((r12|0)==(HEAP32[r17>>2]+(HEAP32[HEAP32[r15>>2]>>2]*12&-1)|0)){r2=8;break}else{r14=r12;r20=r23}}if(r2==8){_err_msg(4,16608,513,16336,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r9-r23>>3,r3));STACKTOP=r3;break}else if(r2==21){STACKTOP=r4;return r22}}else if((r7|0)==0){r20=r1+12|0;r14=HEAP32[r20>>2]+12|0;HEAP32[r20>>2]=r14;if(((r14-HEAP32[r6+68>>2]|0)/12&-1|0)<(HEAP32[HEAP32[r6+4>>2]>>2]|0)){r22=r1}else{break}STACKTOP=r4;return r22}}while(0);_free(HEAP32[r1+4>>2]);FUNCTION_TABLE[HEAP32[HEAP32[HEAP32[r5>>2]+64>>2]+44>>2]](r1);r22=0;STACKTOP=r4;return r22}function _lm3g_template_iter_free2476(r1){_free(r1);return}function _find_bg2477(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=0;r5=r2;r2=0;L1:while(1){r6=r5;while(1){if((r6-r2|0)<=16){r7=r2;break L1}r8=r2+r6>>1;r9=HEAPU16[r1+(r8<<3)>>1];if((r9|0)<(r3|0)){break}if((r9|0)>(r3|0)){r6=r8}else{r10=r8;r4=10;break L1}}r5=r6;r2=r8+1|0}if(r4==10){return r10}while(1){if((r7|0)>=(r6|0)){r10=-1;r4=10;break}if((HEAPU16[r1+(r7<<3)>>1]|0)==(r3|0)){r10=r7;r4=10;break}r7=r7+1|0}if(r4==10){return r10}}function _load_tginfo2478(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12;r4=HEAP32[r1+112>>2];r5=r4|0;r6=HEAP32[r5>>2];if((r6|0)==0){_listelem_add_block(r4,16608,107);r7=HEAP32[r5>>2]}else{r7=r6}HEAP32[r5>>2]=HEAP32[r7>>2];r5=r4+24|0;HEAP32[r5>>2]=HEAP32[r5>>2]+1;HEAP32[r7>>2]=r2;r5=r7+16|0;HEAP32[r5>>2]=0;r4=r1+108|0;HEAP32[r7+20>>2]=HEAP32[HEAP32[r4>>2]+(r3<<2)>>2];HEAP32[HEAP32[r4>>2]+(r3<<2)>>2]=r7;r4=HEAP32[r1+68>>2];r6=HEAP32[r4+(r2*12&-1)+8>>2];r8=HEAP32[r4+((r2+1)*12&-1)+8>>2]-r6|0;r2=r1+72|0;r4=HEAP32[r2>>2];do{if((r8|0)>0){r9=_find_bg2477(r4+(r6<<3)|0,r8,r3);if((r9|0)<=-1){break}HEAP32[r7+8>>2]=HEAP32[HEAP32[r1+88>>2]+(HEAPU16[r4+(r6+r9<<3)+4>>1]<<2)>>2];r10=r6+r9|0;r9=r1+104|0;r11=HEAP32[HEAP32[r9>>2]+(r10>>9<<2)>>2]+HEAPU16[HEAP32[r2>>2]+(r10<<3)+6>>1]|0;HEAP32[r5>>2]=HEAP32[r1+76>>2]+(r11<<2);r12=r10+1|0;HEAP32[r7+4>>2]=HEAP32[HEAP32[r9>>2]+(r12>>9<<2)>>2]+HEAPU16[HEAP32[r2>>2]+(r12<<3)+6>>1]-r11;return}}while(0);HEAP32[r7+8>>2]=0;HEAP32[r7+4>>2]=0;return}function _find_tg2479(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=0;r5=r2;r2=0;L1:while(1){r6=r5;while(1){if((r6-r2|0)<=16){r7=r2;break L1}r8=r2+r6>>1;r9=HEAPU16[r1+(r8<<2)>>1];if((r9|0)<(r3|0)){break}if((r9|0)>(r3|0)){r6=r8}else{r10=r8;r4=10;break L1}}r5=r6;r2=r8+1|0}if(r4==10){return r10}while(1){if((r7|0)>=(r6|0)){r10=-1;r4=10;break}if((HEAPU16[r1+(r7<<2)>>1]|0)==(r3|0)){r10=r7;r4=10;break}r7=r7+1|0}if(r4==10){return r10}}function _lm3g_bg_score2480(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;do{if((r2|0)>=0){if(HEAPU8[r1+16|0]<2){break}r5=r1+68|0;r6=HEAP32[r5>>2];r7=HEAP32[r6+(r2*12&-1)+8>>2];r8=HEAP32[r1+72>>2];r9=_find_bg2477(r8+(r7<<3)|0,HEAP32[r6+((r2+1)*12&-1)+8>>2]-r7|0,r3);if((r9|0)>-1){HEAP32[r4>>2]=2;r10=HEAP32[HEAP32[r1+80>>2]+(HEAPU16[r8+(r7+r9<<3)+2>>1]<<2)>>2];return r10}else{HEAP32[r4>>2]=1;r9=HEAP32[r5>>2];r10=HEAP32[r9+(r2*12&-1)+4>>2]+HEAP32[r9+(r3*12&-1)>>2]|0;return r10}}}while(0);HEAP32[r4>>2]=1;r10=HEAP32[HEAP32[r1+68>>2]+(r3*12&-1)>>2];return r10}function _lm3g_tg_score2481(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;r6=0;if(HEAPU8[r1+16|0]<3|(r2|0)<0|(r3|0)<0){r7=_lm3g_bg_score2480(r1,r3,r4,r5);return r7}r8=r1+108|0;r9=HEAP32[r8>>2]+(r3<<2)|0;r10=0;while(1){r11=HEAP32[r9>>2];if((r11|0)==0){r6=7;break}if((HEAP32[r11>>2]|0)==(r2|0)){r6=8;break}r9=r11+20|0;r10=r11}do{if(r6==7){_load_tginfo2478(r1,r2,r3);r12=HEAP32[HEAP32[r8>>2]+(r3<<2)>>2]}else if(r6==8){if((r10|0)==0){r12=r11;break}r9=r11+20|0;HEAP32[r10+20>>2]=HEAP32[r9>>2];HEAP32[r9>>2]=HEAP32[HEAP32[r8>>2]+(r3<<2)>>2];HEAP32[HEAP32[r8>>2]+(r3<<2)>>2]=r11;r12=r11}}while(0);HEAP32[r12+12>>2]=1;r11=HEAP32[r12+16>>2];r8=_find_tg2479(r11,HEAP32[r12+4>>2],r4);if((r8|0)>-1){HEAP32[r5>>2]=3;r7=HEAP32[HEAP32[r1+96>>2]+(HEAPU16[r11+(r8<<2)+2>>1]<<2)>>2];return r7}else{r8=HEAP32[r12+8>>2];r7=r8+_lm3g_bg_score2480(r1,r3,r4,r5)|0;return r7}}function _ngram_model_set_init(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+16|0;r7=r6;r8=r6+8;if((r3|0)==0){r9=0;STACKTOP=r6;return r9}r10=HEAP32[HEAP32[r1>>2]+20>>2];r11=r10+24|0;r12=r10+9|0;r13=1;while(1){if((r13|0)>=(r3|0)){break}r14=HEAP32[HEAP32[r1+(r13<<2)>>2]+20>>2];if(HEAPF64[r14+24>>3]!=HEAPF64[r11>>3]){r4=6;break}if((HEAP8[r14+9|0]|0)!=(HEAP8[r12]|0)){r4=6;break}r13=r13+1|0}if(r4==6){_err_msg(4,30416,141,45552,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r9=0;STACKTOP=r6;return r9}r4=_malloc(96);if((r4|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=96,HEAP32[r5+16>>2]=30416,HEAP32[r5+24>>2]=147,r5));STACKTOP=r5}if((HEAP32[r4-4>>2]&3|0)!=0){_memset(r4,0,96)|0}r5=r4;HEAP32[r4+68>>2]=r3;r13=___ckd_calloc__(r3,4,30416,150);r11=r4+76|0;HEAP32[r11>>2]=r13;r13=___ckd_calloc__(r3,4,30416,151);r14=r4+80|0;HEAP32[r14>>2]=r13;r13=___ckd_calloc__(r3,4,30416,153);r15=r4+84|0;HEAP32[r15>>2]=r13;r13=1/(r3|0);if(r13>0){r16=Math_log(r13);r17=(r16*HEAPF64[r10+48>>3]&-1)>>HEAP8[r12]}else{r17=HEAP32[r10+64>>2]}r12=0;while(1){if((r12|0)>=(r3|0)){r18=0;r19=0;break}HEAP32[HEAP32[r15>>2]+(r12<<2)>>2]=r17;r12=r12+1|0}while(1){if((r18|0)>=(r3|0)){break}r12=r1+(r18<<2)|0;r17=HEAP32[r12>>2];r15=r17|0;HEAP32[r15>>2]=HEAP32[r15>>2]+1;HEAP32[HEAP32[r11>>2]+(r18<<2)>>2]=r17;r17=___ckd_salloc__(HEAP32[r2+(r18<<2)>>2],30416,166);HEAP32[HEAP32[r14>>2]+(r18<<2)>>2]=r17;r17=HEAPU8[HEAP32[r12>>2]+16|0];r18=r18+1|0;r19=(r17|0)>(r19|0)?r17:r19}r18=___ckd_calloc__(r19-1|0,4,30416,174);HEAP32[r4+92>>2]=r18;r18=HEAP32[r4+76>>2];r14=_hash_table_new(HEAP32[HEAP32[r18>>2]+12>>2],0);r2=r4+68|0;r11=0;while(1){if((r11|0)>=(HEAP32[r2>>2]|0)){break}r1=r18+(r11<<2)|0;r3=0;while(1){r17=HEAP32[r1>>2];if((r3|0)>=(HEAP32[r17+12>>2]|0)){break}r12=HEAP32[HEAP32[r17+48>>2]+(r3<<2)>>2];r17=_key2hash(r14,r12);_enter(r14,r17,r12,_strlen(r12),r3,0);r3=r3+1|0}r11=r11+1|0}if((_hash_table_lookup(r14,40464,0)|0)!=0){_enter(r14,_key2hash(r14,40464),40464,5,0,0)}_ngram_model_init(r5,4648,r10,r19,HEAP32[r14+8>>2]);HEAP8[r4+18|0]=0;r19=_hash_table_tolist(r14,0);r10=r4+48|0;r11=r19;r3=0;while(1){if((r11|0)==0){r20=r19;break}HEAP32[HEAP32[r10>>2]+(r3<<2)>>2]=HEAP32[HEAP32[r11>>2]>>2];r11=HEAP32[r11+8>>2];r3=r3+1|0}while(1){if((r20|0)==0){break}r3=HEAP32[r20+8>>2];_free(r20);r20=r3}r20=r4+12|0;_qsort(HEAP32[r10>>2],HEAP32[r20>>2],4,380);r3=r4+88|0;r11=HEAP32[r3>>2];if((r11|0)!=0){_free(HEAP32[r11>>2]);_free(r11)}r11=___ckd_calloc_2d__(HEAP32[r20>>2],HEAP32[r2>>2],4,30416,105);HEAP32[r3>>2]=r11;r11=r4+52|0;r4=0;while(1){if((r4|0)>=(HEAP32[r20>>2]|0)){break}r19=HEAP32[r11>>2];r1=HEAP32[HEAP32[r10>>2]+(r4<<2)>>2];r12=_key2hash(r19,r1);_enter(r19,r12,r1,_strlen(r1),r4,0);r1=0;while(1){if((r1|0)>=(HEAP32[r2>>2]|0)){break}r12=HEAP32[r18+(r1<<2)>>2]+52|0;r19=_hash_table_lookup(HEAP32[r12>>2],HEAP32[HEAP32[r10>>2]+(r4<<2)>>2],r8);do{if((r19|0)==0){r21=HEAP32[r8>>2]}else{if((r19|0)!=-1){r21=0;break}r17=_hash_table_lookup(HEAP32[r12>>2],40464,r7);if((r17|0)==0){r22=HEAP32[r7>>2]}else{if((r17|0)==-1){r21=-1;break}else{r22=0}}r21=r22}}while(0);HEAP32[HEAP32[HEAP32[r3>>2]+(r4<<2)>>2]+(r1<<2)>>2]=r21;r1=r1+1|0}r4=r4+1|0}_hash_table_free(r14);r9=r5;STACKTOP=r6;return r9}function _ngram_model_set_known_wid(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+16|0;r5=r4;r6=r4+8;if((HEAP32[r1+12>>2]|0)<=(r2|0)){r7=0;STACKTOP=r4;return r7}r8=HEAP32[r1+72>>2];if((r8|0)!=-1){r9=HEAP32[HEAP32[HEAP32[r1+88>>2]+(r2<<2)>>2]+(r8<<2)>>2];r10=_hash_table_lookup(HEAP32[HEAP32[HEAP32[r1+76>>2]+(r8<<2)>>2]+52>>2],40464,r5);if((r10|0)==0){r11=HEAP32[r5>>2];r3=14}else{if((r10|0)==-1){r12=-1}else{r11=0;r3=14}}if(r3==14){r12=r11}r7=(r9|0)!=(r12|0)|0;STACKTOP=r4;return r7}r12=r1+68|0;r9=r1+88|0;r11=r1+76|0;r1=0;while(1){if((r1|0)>=(HEAP32[r12>>2]|0)){r7=0;r3=16;break}r10=HEAP32[HEAP32[HEAP32[r9>>2]+(r2<<2)>>2]+(r1<<2)>>2];r5=_hash_table_lookup(HEAP32[HEAP32[HEAP32[r11>>2]+(r1<<2)>>2]+52>>2],40464,r6);if((r5|0)==0){r13=HEAP32[r6>>2];r3=8}else{if((r5|0)==-1){r14=-1}else{r13=0;r3=8}}if(r3==8){r3=0;r14=r13}if((r10|0)!=(r14|0)){r7=1;r3=16;break}r1=r1+1|0}if(r3==16){STACKTOP=r4;return r7}}function _my_compare(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=HEAP32[r1>>2];r1=HEAP8[r3];do{if(r1<<24>>24==60){r4=r3;r5=40464;while(1){r6=r4+1|0;r7=r5+1|0;r8=HEAP8[r6];r9=HEAP8[r7];if(r8<<24>>24!=r9<<24>>24|r8<<24>>24==0|r9<<24>>24==0){break}else{r4=r6;r5=r7}}if(r8<<24>>24==r9<<24>>24){r10=-1}else{break}return r10}}while(0);r9=HEAP32[r2>>2];r2=HEAP8[r9];do{if(r2<<24>>24==60){r8=r9;r5=40464;while(1){r4=r8+1|0;r7=r5+1|0;r11=HEAP8[r4];r12=HEAP8[r7];if(r11<<24>>24!=r12<<24>>24|r11<<24>>24==0|r12<<24>>24==0){break}else{r8=r4;r5=r7}}if(r11<<24>>24==r12<<24>>24){r10=1}else{break}return r10}}while(0);if(r1<<24>>24!=r2<<24>>24|r1<<24>>24==0|r2<<24>>24==0){r13=r1;r14=r2}else{r2=r3;r3=r9;while(1){r9=r2+1|0;r1=r3+1|0;r12=HEAP8[r9];r11=HEAP8[r1];if(r12<<24>>24!=r11<<24>>24|r12<<24>>24==0|r11<<24>>24==0){r13=r12;r14=r11;break}else{r2=r9;r3=r1}}}r10=(r13&255)-(r14&255)|0;return r10}function _ngram_model_set_free(r1){var r2,r3,r4,r5,r6,r7;r2=r1+68|0;r3=r1+76|0;r4=0;while(1){r5=HEAP32[r3>>2];if((r4|0)>=(HEAP32[r2>>2]|0)){break}_ngram_model_free(HEAP32[r5+(r4<<2)>>2]);r4=r4+1|0}_free(r5);r5=r1+80|0;r4=0;while(1){r6=HEAP32[r5>>2];if((r4|0)>=(HEAP32[r2>>2]|0)){break}_free(HEAP32[r6+(r4<<2)>>2]);r4=r4+1|0}_free(r6);_free(HEAP32[r1+84>>2]);_free(HEAP32[r1+92>>2]);r6=HEAP32[r1+88>>2];if((r6|0)==0){r7=r6;_free(r7);return}_free(HEAP32[r6>>2]);r7=r6;_free(r7);return}function _ngram_model_set_apply_weights(r1,r2,r3,r4){var r5,r6,r7;r5=r1+68|0;r6=r1+76|0;r1=0;while(1){if((r1|0)>=(HEAP32[r5>>2]|0)){break}r7=HEAP32[HEAP32[r6>>2]+(r1<<2)>>2];FUNCTION_TABLE[HEAP32[HEAP32[r7+64>>2]+4>>2]](r7,r2,r3,r4);r1=r1+1|0}return 0}function _ngram_model_set_score(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r6=HEAPU8[r1+16|0];r7=(r6|0)>(r4|0)?r4:r6-1|0;r6=r1+72|0;r4=HEAP32[r6>>2];if((r4|0)!=-1){r8=r1+88|0;r9=HEAP32[HEAP32[HEAP32[r8>>2]+(r2<<2)>>2]+(r4<<2)>>2];r4=r1+92|0;r10=0;while(1){if((r10|0)>=(r7|0)){break}r11=HEAP32[r3+(r10<<2)>>2];if((r11|0)==-1){HEAP32[HEAP32[r4>>2]+(r10<<2)>>2]=-1}else{HEAP32[HEAP32[r4>>2]+(r10<<2)>>2]=HEAP32[HEAP32[HEAP32[r8>>2]+(r11<<2)>>2]+(HEAP32[r6>>2]<<2)>>2]}r10=r10+1|0}r12=_ngram_ng_score(HEAP32[HEAP32[r1+76>>2]+(HEAP32[r6>>2]<<2)>>2],r9,HEAP32[r4>>2],r7,r5);return r12}r4=r1+68|0;r9=r1+88|0;r6=r1+92|0;r10=r1+20|0;r8=r1+84|0;r11=r1+76|0;r13=0;r14=HEAP32[r1+44>>2];while(1){if((r13|0)>=(HEAP32[r4>>2]|0)){r12=r14;break}r1=HEAP32[HEAP32[HEAP32[r9>>2]+(r2<<2)>>2]+(r13<<2)>>2];r15=0;while(1){if((r15|0)>=(r7|0)){break}r16=HEAP32[r3+(r15<<2)>>2];if((r16|0)==-1){HEAP32[HEAP32[r6>>2]+(r15<<2)>>2]=-1}else{HEAP32[HEAP32[r6>>2]+(r15<<2)>>2]=HEAP32[HEAP32[HEAP32[r9>>2]+(r16<<2)>>2]+(r13<<2)>>2]}r15=r15+1|0}r15=HEAP32[r10>>2];r16=HEAP32[HEAP32[r8>>2]+(r13<<2)>>2];r17=_logmath_add(r15,r14,r16+_ngram_ng_score(HEAP32[HEAP32[r11>>2]+(r13<<2)>>2],r1,HEAP32[r6>>2],r7,r5)|0);r13=r13+1|0;r14=r17}return r12}function _ngram_model_set_raw_score(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r6=HEAPU8[r1+16|0];r7=(r6|0)>(r4|0)?r4:r6-1|0;r6=r1+72|0;r4=HEAP32[r6>>2];if((r4|0)!=-1){r8=r1+88|0;r9=HEAP32[HEAP32[HEAP32[r8>>2]+(r2<<2)>>2]+(r4<<2)>>2];r4=r1+92|0;r10=0;while(1){if((r10|0)>=(r7|0)){break}r11=HEAP32[r3+(r10<<2)>>2];if((r11|0)==-1){HEAP32[HEAP32[r4>>2]+(r10<<2)>>2]=-1}else{HEAP32[HEAP32[r4>>2]+(r10<<2)>>2]=HEAP32[HEAP32[HEAP32[r8>>2]+(r11<<2)>>2]+(HEAP32[r6>>2]<<2)>>2]}r10=r10+1|0}r12=_ngram_ng_prob(HEAP32[HEAP32[r1+76>>2]+(HEAP32[r6>>2]<<2)>>2],r9,HEAP32[r4>>2],r7,r5);return r12}r4=r1+68|0;r9=r1+88|0;r6=r1+92|0;r10=r1+20|0;r8=r1+84|0;r11=r1+76|0;r13=0;r14=HEAP32[r1+44>>2];while(1){if((r13|0)>=(HEAP32[r4>>2]|0)){r12=r14;break}r1=HEAP32[HEAP32[HEAP32[r9>>2]+(r2<<2)>>2]+(r13<<2)>>2];r15=0;while(1){if((r15|0)>=(r7|0)){break}r16=HEAP32[r3+(r15<<2)>>2];if((r16|0)==-1){HEAP32[HEAP32[r6>>2]+(r15<<2)>>2]=-1}else{HEAP32[HEAP32[r6>>2]+(r15<<2)>>2]=HEAP32[HEAP32[HEAP32[r9>>2]+(r16<<2)>>2]+(r13<<2)>>2]}r15=r15+1|0}r15=HEAP32[r10>>2];r16=HEAP32[HEAP32[r8>>2]+(r13<<2)>>2];r17=_logmath_add(r15,r14,r16+_ngram_ng_prob(HEAP32[HEAP32[r11>>2]+(r13<<2)>>2],r1,HEAP32[r6>>2],r7,r5)|0);r13=r13+1|0;r14=r17}return r12}function _ngram_model_set_add_ug(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+24|0;r7=r6;r8=r6+8;r9=r6+16;r10=___ckd_calloc__(HEAP32[r1+68>>2],4,30416,791);r11=r10;r12=r1+44|0;r13=r1+68|0;r14=r1+72|0;r15=r1+76|0;r16=r1+48|0;r17=r1+20|0;r18=r1+84|0;r19=0;r20=HEAP32[r12>>2];L1:while(1){if((r19|0)>=(HEAP32[r13>>2]|0)){break}r21=HEAP32[r14>>2];do{if((r21|0)==-1|(r21|0)==(r19|0)){r22=HEAP32[HEAP32[r15>>2]+(r19<<2)>>2]+52|0;r23=_hash_table_lookup(HEAP32[r22>>2],HEAP32[HEAP32[r16>>2]+(r2<<2)>>2],r8);do{if((r23|0)==0){r24=HEAP32[r8>>2];r4=13}else{if((r23|0)!=-1){r25=r11+(r19<<2)|0;HEAP32[r25>>2]=0;r26=r25;r4=14;break}r25=_hash_table_lookup(HEAP32[r22>>2],40464,r7);if((r25|0)==0){r24=HEAP32[r7>>2];r4=13;break}r27=r11+(r19<<2)|0;if((r25|0)==-1){HEAP32[r27>>2]=-1;r26=r27;r4=14;break}else{HEAP32[r27>>2]=0;r28=0;break}}}while(0);if(r4==13){r4=0;r22=r11+(r19<<2)|0;HEAP32[r22>>2]=r24;if((r24|0)==-1){r26=r22;r4=14}else{r28=r24}}if(r4==14){r4=0;r22=HEAP32[r17>>2];r23=_ngram_model_add_word(HEAP32[HEAP32[r15>>2]+(r19<<2)>>2],HEAP32[HEAP32[r16>>2]+(r2<<2)>>2],Math_pow(HEAPF64[r22+24>>3],r3<<HEAP8[r22+9|0]|0));HEAP32[r26>>2]=r23;if((r23|0)==-1){r4=15;break L1}else{r28=r23}}r23=_ngram_ng_prob(HEAP32[HEAP32[r15>>2]+(r19<<2)>>2],r28,0,0,r9);r22=HEAP32[r14>>2];if((r22|0)==(r19|0)){r29=r23;break}if((r22|0)!=-1){r29=r20;break}r29=_logmath_add(HEAP32[r17>>2],r20,HEAP32[HEAP32[r18>>2]+(r19<<2)>>2]+r23|0)}else{HEAP32[r11+(r19<<2)>>2]=-1;r29=r20}}while(0);r19=r19+1|0;r20=r29}if(r4==15){_free(r10);r30=HEAP32[r12>>2];STACKTOP=r6;return r30}r12=r1+88|0;r4=r1+12|0;r1=HEAP32[r4>>2]<<2;r29=_realloc(HEAP32[r12>>2],r1);if((r29|0)==0){_ckd_fail(45472,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r1,HEAP32[r5+8>>2]=30416,HEAP32[r5+16>>2]=824,r5));STACKTOP=r5}HEAP32[r12>>2]=r29;r1=Math_imul(HEAP32[r4>>2],HEAP32[r13>>2])<<2;r19=_realloc(HEAP32[r29>>2],r1);if((r19|0)==0){_ckd_fail(45472,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r1,HEAP32[r5+8>>2]=30416,HEAP32[r5+16>>2]=828,r5));STACKTOP=r5}HEAP32[HEAP32[r12>>2]>>2]=r19;r19=0;while(1){r31=HEAP32[r12>>2];if((r19|0)>=(HEAP32[r4>>2]|0)){break}r5=HEAP32[r31>>2]+(Math_imul(r19,HEAP32[r13>>2])<<2)|0;HEAP32[r31+(r19<<2)>>2]=r5;r19=r19+1|0}_memcpy(HEAP32[r31+(r2<<2)>>2],r10,HEAP32[r13>>2]<<2)|0;_free(r10);r30=r20;STACKTOP=r6;return r30}function _ngram_model_set_flush(r1){var r2,r3,r4,r5,r6;r2=r1+68|0;r3=r1+76|0;r1=0;while(1){if((r1|0)>=(HEAP32[r2>>2]|0)){break}r4=HEAP32[HEAP32[r3>>2]+(r1<<2)>>2];r5=HEAP32[r4+64>>2];do{if((r5|0)!=0){r6=HEAP32[r5+20>>2];if((r6|0)==0){break}FUNCTION_TABLE[r6](r4)}}while(0);r1=r1+1|0}return}function _ngram_model_read(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+1296|0;r7=r6;r8=r6+8;r9=r6+16;r10=r6+24;r11=r6+32;r12=r6+40;r13=r6+48;r14=r6+56;r15=r6+64;r16=r6+72;r17=r6+80;r18=r6+88;r19=r6+96;r20=r6+104;r21=r6+112;r22=r6+1136;r23=r6+1144;r24=r6+1152;r25=r6+1160;r26=r6+1168;r27=r6+1176;r28=r6+1184;r29=r6+1192;r30=r6+1200;r31=r6+1208;r32=r6+1216;r33=r6+1224;r34=r6+1232;r35=r6+1240;r36=r6+1256;r37=r6+1272;r38=r6+1280;r39=r6+1288;r40=_fopen_comp(r2,26184,r39);L1:do{if((r40|0)==0){_err_msg(4,45784,466,28512,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r2,r5));STACKTOP=r5;r4=216}else{r41=_lineiter_start(r40);r42=r41;while(1){r43=(r42|0)==0;if(r43){r4=13;break}r41=r42|0;_string_trim(HEAP32[r41>>2]);r44=HEAP32[r41>>2];if((HEAP8[r44]|0)==92){r41=r44;r44=15504;while(1){r45=r41+1|0;r46=r44+1|0;r47=HEAP8[r45];r48=HEAP8[r46];if(r47<<24>>24!=r48<<24>>24|r47<<24>>24==0|r48<<24>>24==0){break}else{r41=r45;r44=r46}}if(r47<<24>>24==r48<<24>>24){r4=9;break}}r42=_lineiter_next(r42)}L12:do{if(r4==9){if(r43){r4=13;break}r44=HEAP32[r42>>2];if((HEAP8[r44]|0)==92){r49=r44;r50=15504}else{r4=13;break}while(1){r44=r49+1|0;r41=r50+1|0;r51=HEAP8[r44];r52=HEAP8[r41];if(r51<<24>>24!=r52<<24>>24|r51<<24>>24==0|r52<<24>>24==0){break}else{r49=r44;r50=r41}}if(r51<<24>>24==r52<<24>>24){r53=r42;r54=0;r55=0;r56=0}else{r4=13;break}L18:while(1){r41=r53;r44=r54;r57=r55;L20:while(1){r46=r41;r58=r44;while(1){r59=_lineiter_next(r46);if((r59|0)==0){r4=23;break L18}r45=_sscanf(HEAP32[r59>>2],14640,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r37,HEAP32[r5+8>>2]=r38,r5));STACKTOP=r5;if((r45|0)!=2){r60=r59;r4=24;break L18}r61=HEAP32[r37>>2];if((r61|0)==2){break}else if((r61|0)==3){break L20}else if((r61|0)!=1){r4=22;break L18}r46=r59;r58=HEAP32[r38>>2]}r41=r59;r44=r58;r57=HEAP32[r38>>2]}r53=r59;r54=r58;r55=r57;r56=HEAP32[r38>>2]}if(r4==22){_err_msg(4,45784,96,14272,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r61,r5));STACKTOP=r5;r62=r59;r63=r58;r64=r57;r65=r56;r4=32;break}else if(r4==23){_err_msg(4,45784,101,13968,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;break}else if(r4==24){while(1){r4=0;r66=_lineiter_next(r60);r67=(r66|0)==0;if(r67){break}r44=r66|0;_string_trim(HEAP32[r44>>2]);r41=HEAP32[r44>>2];if((HEAP8[r41]|0)==92){r68=r41;r69=13776}else{r60=r66;r4=24;continue}while(1){r41=r68+1|0;r44=r69+1|0;r70=HEAP8[r41];r71=HEAP8[r44];if(r70<<24>>24!=r71<<24>>24|r70<<24>>24==0|r71<<24>>24==0){break}else{r68=r41;r69=r44}}if(r70<<24>>24==r71<<24>>24){r4=28;break}else{r60=r66;r4=24}}do{if(r4==28){if(r67){break}if((r58|0)<1|(r57|0)<0|(r56|0)<0){_err_msg(4,45784,117,13384,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r62=r66;r63=r58;r64=r57;r65=r56;r4=32;break L12}_err_msg(1,45784,477,46048,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r58,HEAP32[r5+8>>2]=r57,HEAP32[r5+16>>2]=r56,r5));STACKTOP=r5;r44=_malloc(152);if((r44|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=152,HEAP32[r5+16>>2]=45784,HEAP32[r5+24>>2]=480,r5));STACKTOP=r5}if((HEAP32[r44-4>>2]&3|0)!=0){_memset(r44,0,152)|0}r41=r44;r46=(r56|0)>0;if(r46){r72=3}else{r72=(r57|0)>0?2:1}_ngram_model_init(r41,4744,r3,r72,r58);r45=r44+4|0;HEAP32[HEAP32[r45>>2]>>2]=r58;HEAP32[HEAP32[r45>>2]+4>>2]=r57;HEAP32[HEAP32[r45>>2]+8>>2]=r56;HEAP8[r44+18|0]=1;r73=r58+1|0;r74=___ckd_calloc__(r73,12,45784,442);r75=0;while(1){if((r75|0)>=(r73|0)){break}HEAP32[r74+(r75*12&-1)>>2]=-2147483648;HEAP32[r74+(r75*12&-1)+4>>2]=-2147483648;r75=r75+1|0}r75=r44+68|0;HEAP32[r75>>2]=r74;r73=r57+1|0;r76=___ckd_calloc__(r73,12,45784,501);r77=r44+72|0;HEAP32[r77>>2]=r76;if(r46){r76=___ckd_calloc__(r56,8,45784,504);HEAP32[r44+76>>2]=r76;r76=___ckd_calloc__(((r73|0)/512&-1)+1|0,4,45784,509);HEAP32[r44+104>>2]=r76}_err_msg(1,45784,135,17016,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r76=r36|0;r73=r36+4|0;r78=r36+8|0;r79=r44+4|0;r80=r44+48|0;r81=r44+52|0;r82=r44+20|0;r83=0;r84=r66;L58:while(1){r85=r84;while(1){r86=_lineiter_next(r85);if((r86|0)==0){break L58}r87=r86|0;_string_trim(HEAP32[r87>>2]);r88=HEAP32[r87>>2];r89=(HEAP8[r88]|0)==92;do{if(r89){r90=r88;r91=16704;while(1){r92=r90+1|0;r93=r91+1|0;r94=HEAP8[r92];r95=HEAP8[r93];if(r94<<24>>24!=r95<<24>>24|r94<<24>>24==0|r95<<24>>24==0){break}else{r90=r92;r91=r93}}if(r94<<24>>24==r95<<24>>24){break L58}if(r89){r96=r88;r97=20936}else{break}while(1){r91=r96+1|0;r90=r97+1|0;r98=HEAP8[r91];r99=HEAP8[r90];if(r98<<24>>24!=r99<<24>>24|r98<<24>>24==0|r99<<24>>24==0){break}else{r96=r91;r97=r90}}if(r98<<24>>24==r99<<24>>24){break L58}}}while(0);r100=_str2words(r88,r76,3);if((r100|0)>=2){break}r89=HEAP32[r87>>2];if((HEAP8[r89]|0)==0){r85=r86;continue}_err_msg(3,45784,150,16376,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r89,r5));STACKTOP=r5;r85=r86}r85=_atof_c(HEAP32[r76>>2]);r89=HEAP32[r73>>2];if((r100|0)==3){r101=_atof_c(HEAP32[r78>>2])}else{r101=0}if((r83|0)>=(HEAP32[HEAP32[r79>>2]>>2]|0)){r4=68;break}r90=___ckd_salloc__(r89,45784,166);HEAP32[HEAP32[r80>>2]+(r83<<2)>>2]=r90;r90=HEAP32[r81>>2];r89=HEAP32[HEAP32[r80>>2]+(r83<<2)>>2];r91=r83;r93=_key2hash(r90,r89);if((_enter(r90,r93,r89,_strlen(r89),r91,0)|0)!=(r91|0)){_err_msg(3,45784,169,24512,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[HEAP32[r80>>2]+(r83<<2)>>2],r5));STACKTOP=r5}r91=HEAP32[r82>>2];HEAP32[HEAP32[r75>>2]+(r83*12&-1)>>2]=(HEAPF64[r91+56>>3]*r85&-1)>>HEAP8[r91+9|0];r91=HEAP32[r82>>2];HEAP32[HEAP32[r75>>2]+(r83*12&-1)+4>>2]=(HEAPF64[r91+56>>3]*r101&-1)>>HEAP8[r91+9|0];r83=r83+1|0;r84=r86}if(r4==68){_err_msg(4,45784,161,16080,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;if((HEAP32[r39>>2]|0)==0){_fclose(r40)}else{_pclose(r40)}_ngram_model_free(r41);r4=216;break L1}r84=HEAP32[HEAP32[r79>>2]>>2];if((r84|0)!=(r83|0)){_err_msg(3,45784,178,15616,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r84,HEAP32[r5+8>>2]=r83,r5));STACKTOP=r5;HEAP32[HEAP32[r79>>2]>>2]=r83;HEAP32[r44+12>>2]=r83}_err_msg(1,45784,516,17608,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[HEAP32[r45>>2]>>2],r5));STACKTOP=r5;r84=r44+116|0;r80=r84;_init_sorted_list(r80);r78=HEAP32[r45>>2];if((HEAP32[r78+8>>2]|0)>0){_init_sorted_list(r44+128|0);r102=HEAP32[r45>>2]}else{r102=r78}L95:do{if((HEAP32[r102+4>>2]|0)>0){_err_msg(1,45784,195,19984,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r78=r35+12|0;r73=r35|0;r76=r35+4|0;r46=r35+8|0;r74=r44+128|0;r91=-1;r85=0;r89=HEAP32[r77>>2];r93=r86;L97:while(1){r90=r93;L99:while(1){r103=_lineiter_next(r90);r104=(r103|0)==0;if(r104){r4=108;break L97}r92=r103|0;_string_trim(HEAP32[r92>>2]);HEAP32[r78>>2]=0;if((_str2words(HEAP32[r92>>2],r73,4)|0)<3){if((HEAP8[HEAP32[r92>>2]]|0)==0){r90=r103;continue}else{r4=107;break L97}}r105=_atof_c(HEAP32[r73>>2]);r106=HEAP32[r76>>2];r107=HEAP32[r46>>2];r92=HEAP32[r78>>2];if((r92|0)==0){r108=0}else{r108=_atof_c(r92)*1e4&-1|0}r92=_hash_table_lookup(HEAP32[r81>>2],r106,r32);do{if((r92|0)==0){r109=HEAP32[r32>>2];r4=87}else{if((r92|0)!=-1){r110=0;break}if((_hash_table_lookup(HEAP32[r81>>2],40464,r31)|0)!=0){r4=88;break}r109=HEAP32[r31>>2];r4=87}}while(0);if(r4==87){r4=0;if((r109|0)==-1){r4=88}else{r110=r109}}if(r4==88){r4=0;_err_msg(4,45784,224,19424,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r106,HEAP32[r5+8>>2]=r106,HEAP32[r5+16>>2]=r107,r5));STACKTOP=r5;r90=r103;continue}r92=_hash_table_lookup(HEAP32[r81>>2],r107,r30);do{if((r92|0)==0){r111=HEAP32[r30>>2];r4=94}else{if((r92|0)!=-1){r112=0;break L99}if((_hash_table_lookup(HEAP32[r81>>2],40464,r29)|0)!=0){break}r111=HEAP32[r29>>2];r4=94}}while(0);if(r4==94){r4=0;if((r111|0)!=-1){r112=r111;break}}_err_msg(4,45784,229,19424,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r107,HEAP32[r5+8>>2]=r106,HEAP32[r5+16>>2]=r107,r5));STACKTOP=r5;r90=r103}r90=HEAP32[r82>>2];r87=HEAPF64[r90+56>>3];r88=HEAP8[r90+9|0]|0;HEAP32[r33>>2]=(r87*((r105*1e4&-1|0)/1e4)&-1)>>r88;HEAP32[r34>>2]=(r87*(r108/1e4)&-1)>>r88;if((r85|0)>=(HEAP32[HEAP32[r79>>2]+4>>2]|0)){r4=97;break}HEAP32[r89>>2]=r112;r88=_sorted_id(r80,r33)&65535;HEAP16[r89+4>>1]=r88;if((HEAP32[HEAP32[r79>>2]+8>>2]|0)>0){r88=_sorted_id(r74,r34)&65535;HEAP16[r89+6>>1]=r88}L131:do{if((r110|0)==(r91|0)){r113=r91}else{if((r110|0)<(r91|0)){r4=102;break L97}else{r114=r91}while(1){r88=r114+1|0;if((r114|0)>=(r110|0)){r113=r110;break L131}HEAP32[HEAP32[r75>>2]+(r88*12&-1)+8>>2]=r85;r114=r88}}}while(0);r88=r85+1|0;r87=r89+12|0;if((r88&65535|0)!=0){r91=r113;r85=r88;r89=r87;r93=r103;continue}_err_msg(2,0,0,21472,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r91=r113;r85=r88;r89=r87;r93=r103}if(r4==97){_err_msg(4,45784,242,18992,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5}else if(r4==102){_err_msg(4,45784,253,18584,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=r106,HEAP32[r5+8>>2]=r107,HEAP32[r5+16>>2]=r110,HEAP32[r5+24>>2]=r91,r5));STACKTOP=r5}else if(r4==107){if(r104){_llvm_trap()}r93=HEAP32[r103>>2];r89=(HEAP8[r93]|0)==92;do{if(r89){r74=r93;r78=20936;while(1){r46=r74+1|0;r76=r78+1|0;r115=HEAP8[r46];r116=HEAP8[r76];if(r115<<24>>24!=r116<<24>>24|r115<<24>>24==0|r116<<24>>24==0){break}else{r74=r46;r78=r76}}if(r115<<24>>24==r116<<24>>24){r117=r91}else{if(r89){r118=r93;r119=17672}else{break}while(1){r78=r118+1|0;r74=r119+1|0;r120=HEAP8[r78];r121=HEAP8[r74];if(r120<<24>>24!=r121<<24>>24|r120<<24>>24==0|r121<<24>>24==0){break}else{r118=r78;r119=r74}}if(r120<<24>>24==r121<<24>>24){r117=r91}else{break}}while(1){r74=r117+1|0;if((r117|0)>=(HEAP32[HEAP32[r79>>2]>>2]|0)){break}HEAP32[HEAP32[r75>>2]+(r74*12&-1)+8>>2]=r85;r117=r74}r74=HEAP32[r45>>2];HEAP32[r74+4>>2]=HEAP32[HEAP32[r75>>2]+(HEAP32[r74>>2]*12&-1)+8>>2];r74=HEAP32[r44+120>>2];r78=r44+84|0;HEAP32[r78>>2]=r74;r76=___ckd_calloc__(r74,4,32968,203);r74=r44+120|0;r46=r84;r73=0;while(1){if((r73|0)>=(HEAP32[r74>>2]|0)){break}HEAPF32[r76+(r73<<2)>>2]=HEAPF32[HEAP32[r46>>2]+(r73*12&-1)>>2];r73=r73+1|0}HEAP32[r44+80>>2]=r76;_free(HEAP32[r44+116>>2]);_err_msg(1,45784,533,14616,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[HEAP32[r45>>2]+4>>2],r5));STACKTOP=r5;_err_msg(1,45784,534,11744,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[r78>>2],r5));STACKTOP=r5;r122=r103;r123=HEAP32[r45>>2];break L95}}while(0);_err_msg(4,45784,270,17232,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r93,r5));STACKTOP=r5}else if(r4==108){_llvm_trap()}if((HEAP32[r39>>2]|0)==0){_fclose(r40)}else{_pclose(r40)}_ngram_model_free(r41);r4=216;break L1}else{r122=r86;r123=r102}}while(0);L170:do{if((HEAP32[r123+8>>2]|0)>0){r84=HEAP32[r44+132>>2];r80=r44+92|0;HEAP32[r80>>2]=r84;r83=___ckd_calloc__(r84,4,32968,203);r84=r44+132|0;r85=r44+128|0;r91=0;while(1){if((r91|0)>=(HEAP32[r84>>2]|0)){break}HEAPF32[r83+(r91<<2)>>2]=HEAPF32[HEAP32[r85>>2]+(r91*12&-1)>>2];r91=r91+1|0}HEAP32[r44+88>>2]=r83;_free(HEAP32[r44+128>>2]);_err_msg(1,45784,542,9512,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[r80>>2],r5));STACKTOP=r5;r91=r44+140|0;r85=r91;_init_sorted_list(r85);_err_msg(1,45784,292,26504,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r84=r35|0;r93=r35+4|0;r89=r35+8|0;r73=r35+12|0;r46=r44+104|0;r74=-1;r87=-1;r88=0;r90=-1;r92=-1;r124=HEAP32[r44+76>>2];r125=r122;L176:while(1){r126=r125;L178:while(1){r127=_lineiter_next(r126);r128=(r127|0)==0;if(r128){r4=191;break L176}r129=r127|0;_string_trim(HEAP32[r129>>2]);if((_str2words(HEAP32[r129>>2],r84,4)|0)!=4){if((HEAP8[HEAP32[r129>>2]]|0)==0){r126=r127;continue}else{r4=190;break L176}}r130=_atof_c(HEAP32[r84>>2]);r131=HEAP32[r93>>2];r132=HEAP32[r89>>2];r133=HEAP32[r73>>2];r134=_hash_table_lookup(HEAP32[r81>>2],r131,r27);do{if((r134|0)==0){r135=HEAP32[r27>>2];r4=140}else{if((r134|0)!=-1){r136=0;break}if((_hash_table_lookup(HEAP32[r81>>2],40464,r26)|0)!=0){r4=141;break}r135=HEAP32[r26>>2];r4=140}}while(0);if(r4==140){r4=0;if((r135|0)==-1){r4=141}else{r136=r135}}if(r4==141){r4=0;_err_msg(4,45784,321,25552,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=r131,HEAP32[r5+8>>2]=r131,HEAP32[r5+16>>2]=r132,HEAP32[r5+24>>2]=r133,r5));STACKTOP=r5;r126=r127;continue}r134=_hash_table_lookup(HEAP32[r81>>2],r132,r25);do{if((r134|0)==0){r137=HEAP32[r25>>2];r4=147}else{if((r134|0)!=-1){r138=0;break}if((_hash_table_lookup(HEAP32[r81>>2],40464,r24)|0)!=0){r4=148;break}r137=HEAP32[r24>>2];r4=147}}while(0);if(r4==147){r4=0;if((r137|0)==-1){r4=148}else{r138=r137}}if(r4==148){r4=0;_err_msg(4,45784,326,25552,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=r132,HEAP32[r5+8>>2]=r131,HEAP32[r5+16>>2]=r132,HEAP32[r5+24>>2]=r133,r5));STACKTOP=r5;r126=r127;continue}r134=_hash_table_lookup(HEAP32[r81>>2],r133,r23);do{if((r134|0)==0){r139=HEAP32[r23>>2];r4=154}else{if((r134|0)!=-1){r140=0;break L178}if((_hash_table_lookup(HEAP32[r81>>2],40464,r22)|0)!=0){break}r139=HEAP32[r22>>2];r4=154}}while(0);if(r4==154){r4=0;if((r139|0)!=-1){r140=r139;break}}_err_msg(4,45784,331,25552,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=r133,HEAP32[r5+8>>2]=r131,HEAP32[r5+16>>2]=r132,HEAP32[r5+24>>2]=r133,r5));STACKTOP=r5;r126=r127}r126=HEAP32[r82>>2];HEAP32[r28>>2]=(HEAPF64[r126+56>>3]*((r130*1e4&-1|0)/1e4)&-1)>>HEAP8[r126+9|0];if((r88|0)>=(HEAP32[HEAP32[r79>>2]+8>>2]|0)){r4=157;break}HEAP32[r124>>2]=r140;r126=_sorted_id(r85,r28)&65535;HEAP16[r124+4>>1]=r126;r126=(r136|0)==(r74|0);L214:do{if(r126&(r138|0)==(r87|0)){r141=r74;r142=r87;r143=r90;r144=r92}else{if((r136|0)<(r74|0)){r4=162;break L176}if(r126){if((r138|0)<(r87|0)){r4=162;break L176}r145=r90+1|0;r146=HEAP32[r75>>2]}else{r78=HEAP32[r75>>2];r145=HEAP32[r78+(r136*12&-1)+8>>2];r146=r78}r78=HEAP32[r146+((r136+1)*12&-1)+8>>2];r76=HEAP32[r77>>2]+(r145*12&-1)|0;r134=r145;while(1){if((r134|0)>=(r78|0)){r4=169;break L176}if((HEAP32[r76>>2]|0)==(r138|0)){break}r76=r76+12|0;r134=r134+1|0}r76=r134>>9;r78=r92;while(1){r133=r78+1|0;if((r78|0)>=(r76|0)){break}HEAP32[HEAP32[r46>>2]+(r133<<2)>>2]=r88;r78=r133}if((r92|0)>=(r76|0)){r78=r88-HEAP32[HEAP32[r46>>2]+(r92<<2)>>2]|0;if((r78|0)>65535){r4=184;break L176}r133=r90+1|0;r132=r78&65535;r78=HEAP32[r77>>2]+(r133*12&-1)|0;r131=r133;while(1){if((r131|0)>(r134|0)){r141=r136;r142=r138;r143=r134;r144=r76;break L214}HEAP16[r78+8>>1]=r132;r78=r78+12|0;r131=r131+1|0}}if((r92|0)>-1){r131=r88-HEAP32[HEAP32[r46>>2]+(r92<<2)>>2]|0;if((r131|0)>65535){r4=177;break L176}r147=r131&65535}else{r147=0}r131=r92<<9|511;r78=r90+1|0;r132=HEAP32[r77>>2]+(r78*12&-1)|0;r133=r78;while(1){if((r133|0)>(r131|0)){r148=r133;r149=r132;break}HEAP16[r132+8>>1]=r147;r132=r132+12|0;r133=r133+1|0}while(1){if((r148|0)>(r134|0)){r141=r136;r142=r138;r143=r134;r144=r76;break L214}HEAP16[r149+8>>1]=0;r148=r148+1|0;r149=r149+12|0}}}while(0);r126=r88+1|0;r76=r124+8|0;if((r126&65535|0)!=0){r74=r141;r87=r142;r88=r126;r90=r143;r92=r144;r124=r76;r125=r127;continue}_err_msg(2,0,0,21472,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r74=r141;r87=r142;r88=r126;r90=r143;r92=r144;r124=r76;r125=r127}L250:do{if(r4==157){_err_msg(4,45784,341,24552,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5}else if(r4==162){_err_msg(4,45784,351,22992,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5}else if(r4==169){_err_msg(4,45784,361,22304,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[r129>>2],r5));STACKTOP=r5}else if(r4==177){_err_msg(4,45784,377,21816,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5}else if(r4==184){_err_msg(4,45784,396,21816,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5}else if(r4==190){if(r128){_llvm_trap()}r125=HEAP32[r127>>2];do{if((HEAP8[r125]|0)==92){r124=r125;r92=20936;while(1){r87=r124+1|0;r74=r92+1|0;r150=HEAP8[r87];r151=HEAP8[r74];if(r150<<24>>24!=r151<<24>>24|r150<<24>>24==0|r151<<24>>24==0){break}else{r124=r87;r92=r74}}if(r150<<24>>24==r151<<24>>24){r152=r90}else{break}while(1){r92=r152+1|0;if((r152|0)>=(HEAP32[HEAP32[r79>>2]+4>>2]|0)){break}r124=r92>>9;if((r92&511|0)==0){HEAP32[HEAP32[r46>>2]+(r124<<2)>>2]=r88}r74=r88-HEAP32[HEAP32[r46>>2]+(r124<<2)>>2]|0;if((r74|0)>65535){r4=200;break}HEAP16[HEAP32[r77>>2]+(r92*12&-1)+8>>1]=r74;r152=r92}if(r4==200){_err_msg(4,45784,427,21816,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;break L250}r92=HEAP32[r45>>2];r74=HEAP32[r92+4>>2];HEAP32[r92+8>>2]=HEAP32[HEAP32[r46>>2]+(r74>>9<<2)>>2]+HEAPU16[HEAP32[r77>>2]+(r74*12&-1)+8>>1];r74=HEAP32[r44+144>>2];r92=r44+100|0;HEAP32[r92>>2]=r74;r124=___ckd_calloc__(r74,4,32968,203);r74=r44+144|0;r87=r91;r85=0;while(1){if((r85|0)>=(HEAP32[r74>>2]|0)){break}HEAPF32[r124+(r85<<2)>>2]=HEAPF32[HEAP32[r87>>2]+(r85*12&-1)>>2];r85=r85+1|0}HEAP32[r44+96>>2]=r124;_err_msg(1,45784,555,7872,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[HEAP32[r45>>2]+8>>2],r5));STACKTOP=r5;_err_msg(1,45784,556,6544,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[r92>>2],r5));STACKTOP=r5;_free(HEAP32[r44+140>>2]);r85=___ckd_calloc__(r58,4,45784,561);HEAP32[r44+108>>2]=r85;r85=_listelem_alloc_init(24);HEAP32[r44+112>>2]=r85;r153=r127;break L170}}while(0);_err_msg(4,45784,419,20544,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r125,r5));STACKTOP=r5}else if(r4==191){_llvm_trap()}}while(0);if((HEAP32[r39>>2]|0)==0){_fclose(r40)}else{_pclose(r40)}_ngram_model_free(r41);r4=216;break L1}else{r153=r122}}while(0);if((r153|0)!=0){_free(HEAP32[r153>>2]);_free(r153)}if((HEAP32[r39>>2]|0)==0){_fclose(r40)}else{_pclose(r40)}if((r41|0)==0){r4=216;break L1}else{r154=r41;break L1}}}while(0);r44=___errno_location();r45=HEAP32[r44>>2];r44=_malloc(35);_memcpy(r44,13504,30)|0;r77=r44+_strlen(r44)|0;HEAP8[r77]=HEAP8[6400];HEAP8[r77+1|0]=HEAP8[6401];HEAP8[r77+2|0]=HEAP8[6402];HEAP8[r77+3|0]=HEAP8[6403];HEAP8[r77+4|0]=HEAP8[6404];HEAP8[r77+5|0]=HEAP8[6405];r77=_strerror(r45);_err_msg(4,45784,112,r44,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r77,r5));STACKTOP=r5;_free(r44);break}}}while(0);if(r4==13){_err_msg(1,45784,77,15248,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r62=r42;r63=0;r64=0;r65=0;r4=32}do{if(r4==32){if((r62|0)==0){break}_free(HEAP32[r62>>2]);_free(r62)}}while(0);if((HEAP32[r39>>2]|0)==0){_fclose(r40);r4=216;break}else{_pclose(r40);r4=216;break}}}while(0);do{if(r4==216){r40=r15;r39=r16;r62=r17;r65=r18;r64=r19;r63=r20;r153=r21|0;do{if((r1|0)==0){r155=0}else{if((_hash_table_lookup(HEAP32[r1+4>>2],31344,r13)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=31344,r5));STACKTOP=r5;r155=0;break}r122=HEAP32[r13>>2];if((r122|0)==0){r155=0;break}r155=(HEAP32[r122>>2]|0)!=0|0}}while(0);r122=_fopen_comp(r2,45688,r14);r127=(r122|0)==0;L314:do{if(r127){_err_msg(4,32800,106,22888,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r2,r5));STACKTOP=r5;r156=0;r4=394}else{do{if((HEAP32[r14>>2]|0)==0){r157=r155}else{if((r155|0)==0){r157=0;break}_err_msg(3,32800,111,17488,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r157=0}}while(0);L321:do{if((_fread(r40,4,1,r122)|0)==1){r58=HEAP32[r15>>2];do{if((r58|0)==17){r158=0;r159=17}else{r152=_llvm_bswap_i32(r58);HEAP32[r15>>2]=r152;if((r58|0)==285212672){r158=1;r159=r152;break}_err_msg(4,32800,121,14536,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r152,HEAP32[r5+8>>2]=r2,r5));STACKTOP=r5;r160=0;break L321}}while(0);r58=_fread(r153,1,r159,r122);if((r58|0)!=(HEAP32[r15>>2]|0)){_err_msg(4,32800,127,11640,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=0;break}do{if((r58|0)!=0){r41=HEAP8[r153];L332:do{if(r41<<24>>24==0){r161=5768;r162=0}else{r152=r153;r151=5768;r150=r58;r128=r41;while(1){r129=r150-1|0;r144=HEAP8[r151];if(!((r129|0)!=0&r144<<24>>24!=0&r128<<24>>24==r144<<24>>24)){r161=r151;r162=r128;break L332}r144=r152+1|0;r143=r151+1|0;r142=HEAP8[r144];if(r142<<24>>24==0){r161=r143;r162=0;break}else{r152=r144;r151=r143;r150=r129;r128=r142}}}}while(0);if(r162<<24>>24==(HEAP8[r161]|0)){break}_err_msg(4,32800,131,9472,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=5768,r5));STACKTOP=r5;r160=0;break L321}}while(0);do{if((r157|0)==0){r163=0}else{if((r158|0)==0){_err_msg(1,32800,142,6504,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r163=r157;break}else{_err_msg(1,32800,138,7800,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r163=0;break}}}while(0);if((_fread(r40,4,1,r122)|0)!=1){r160=0;break}r58=(r158|0)==0;r41=HEAP32[r15>>2];if(r58){r164=r41}else{r128=_llvm_bswap_i32(r41);HEAP32[r15>>2]=r128;r164=r128}r128=_fread(r153,1,r164,r122);if((r128|0)!=(HEAP32[r15>>2]|0)){_err_msg(4,32800,154,49128,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=0;break}if((_fread(r39,4,1,r122)|0)!=1){r160=0;break}r128=HEAP32[r16>>2];if(r58){r165=r128}else{r41=_llvm_bswap_i32(r128);HEAP32[r16>>2]=r41;r165=r41}do{if((r165|0)<1){if((_fread(r62,4,1,r122)|0)!=1){r160=0;break L321}if(!r58){r41=_llvm_bswap_i32(HEAP32[r17>>2]);HEAP32[r17>>2]=r41}while(1){if((_fread(r40,4,1,r122)|0)!=1){r160=0;break L321}r41=HEAP32[r15>>2];if(r58){r166=r41}else{r128=_llvm_bswap_i32(r41);HEAP32[r15>>2]=r128;r166=r128}if((r166|0)==0){break}r128=_fread(r153,1,r166,r122);if((r128|0)!=(HEAP32[r15>>2]|0)){r4=260;break}}if(r4==260){_err_msg(4,32800,176,47616,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=0;break L321}if((_fread(r65,4,1,r122)|0)!=1){r160=0;break L321}if(r58){break}r128=_llvm_bswap_i32(HEAP32[r18>>2]);HEAP32[r18>>2]=r128}else{HEAP32[r18>>2]=r165}}while(0);if((_fread(r64,4,1,r122)|0)!=1){r160=0;break}if(!r58){r128=_llvm_bswap_i32(HEAP32[r19>>2]);HEAP32[r19>>2]=r128}if((_fread(r63,4,1,r122)|0)!=1){r160=0;break}r128=HEAP32[r20>>2];if(r58){r167=r128}else{r41=_llvm_bswap_i32(r128);HEAP32[r20>>2]=r41;r167=r41}r41=HEAP32[r18>>2];r128=HEAP32[r19>>2];_err_msg(1,32800,196,46048,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r41,HEAP32[r5+8>>2]=r128,HEAP32[r5+16>>2]=r167,r5));STACKTOP=r5;r150=_malloc(120);if((r150|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=120,HEAP32[r5+16>>2]=32800,HEAP32[r5+24>>2]=199,r5));STACKTOP=r5}if((HEAP32[r150-4>>2]&3|0)!=0){_memset(r150,0,120)|0}r151=r150;if((r167|0)>0){r168=3}else{r168=(r128|0)>0?2:1}_ngram_model_init(r151,4696,r3,r168,r41);r152=r150+4|0;HEAP32[HEAP32[r152>>2]>>2]=r41;HEAP32[HEAP32[r152>>2]+4>>2]=r128;HEAP32[HEAP32[r152>>2]+8>>2]=r167;r152=r41+1|0;r128=___ckd_calloc__(r152,12,32800,70);r125=0;while(1){if((r125|0)>=(r152|0)){break}HEAPF32[r128+(r125*12&-1)>>2]=-99;HEAPF32[r128+(r125*12&-1)+4>>2]=-99;r125=r125+1|0}HEAP32[r150+68>>2]=r128;r125=r3+56|0;r152=r3+9|0;r142=0;r129=r128;r143=r41;while(1){if((r142|0)>(r143|0)){r4=291;break}r144=r129;if((_fread(r144,4,1,r122)|0)!=1){r4=282;break}if((_fread(r144,12,1,r122)|0)!=1){r4=284;break}if(r58){r169=HEAPF32[r129>>2];r170=HEAPF32[r129+4>>2];r171=r129;r172=r129+4|0}else{r144=r129;r141=_llvm_bswap_i32(HEAP32[r144>>2]);HEAP32[r144>>2]=r141;r149=r129+4|0;r148=_llvm_bswap_i32(HEAP32[r149>>2]);HEAP32[r149>>2]=r148;r138=r129+8|0;r136=_llvm_bswap_i32(HEAP32[r138>>2]);HEAP32[r138>>2]=r136;r136=(HEAP32[tempDoublePtr>>2]=r141,HEAPF32[tempDoublePtr>>2]);r169=r136;r170=(HEAP32[tempDoublePtr>>2]=r148,HEAPF32[tempDoublePtr>>2]);r171=r144;r172=r149}HEAP32[r171>>2]=(HEAPF64[r125>>3]*r169&-1)>>HEAP8[r152];HEAP32[r172>>2]=(HEAPF64[r125>>3]*r170&-1)>>HEAP8[r152];r142=r142+1|0;r129=r129+12|0;r143=HEAP32[r18>>2]}if(r4==282){_err_msg(4,32800,219,44480,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r142,r5));STACKTOP=r5;r160=r151;break}else if(r4==284){_err_msg(4,32800,224,42840,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;_ngram_model_free(r151);if((HEAP32[r14>>2]|0)==0){_fclose(r122);r173=0;break L314}else{_pclose(r122);r173=0;break L314}}else if(r4==291){_err_msg(1,32800,242,41792,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r143,r5));STACKTOP=r5;do{if((r163|0)==0){r174=0;r175=0;r176=0}else{r129=_ftell(r122);if((r129&3|0)!=0){_err_msg(3,32800,250,40472,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r174=0;r175=0;r176=r129;break}r41=_mmio_file_read(r2);HEAP32[r150+116>>2]=r41;if((r41|0)==0){r174=0;r175=0;r176=r129;break}r174=r163;r175=HEAP32[r41>>2];r176=r129}}while(0);r143=HEAP32[r19>>2];if((r143|0)>0){L421:do{if((r174|0)==0){r142=r143+1|0;r129=___ckd_calloc__(r142,8,32800,272);r41=r150+72|0;HEAP32[r41>>2]=r129;if((_fread(r129,8,r142,r122)|0)!=(r142|0)){_err_msg(4,32800,275,39040,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break L321}if(r58){r177=r176;r178=r143;break}r142=HEAP32[r41>>2];r41=0;r129=r143;while(1){if((r41|0)>(r129|0)){r177=r176;r178=r129;break L421}r128=r142|0;r149=_llvm_bswap_i16(HEAP16[r128>>1]);HEAP16[r128>>1]=r149;r149=r142+2|0;r128=_llvm_bswap_i16(HEAP16[r149>>1]);HEAP16[r149>>1]=r128;r128=r142+4|0;r149=_llvm_bswap_i16(HEAP16[r128>>1]);HEAP16[r128>>1]=r149;r149=r142+6|0;r128=_llvm_bswap_i16(HEAP16[r149>>1]);HEAP16[r149>>1]=r128;r142=r142+8|0;r41=r41+1|0;r129=HEAP32[r19>>2]}}else{HEAP32[r150+72>>2]=r175+r176;r177=r176+((r143<<3)+8)|0;r178=r143}}while(0);_err_msg(1,32800,288,38008,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r178,r5));STACKTOP=r5;r179=r177;r180=r178}else{r179=r176;r180=r143}r129=HEAP32[r20>>2];if((r129|0)>0){do{if((r174|0)==0){r41=___ckd_calloc__(r129,4,32800,299);r142=r150+76|0;HEAP32[r142>>2]=r41;if((_fread(r41,4,r129,r122)|0)!=(r129|0)){_err_msg(4,32800,303,36792,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break L321}if(r58){r181=r179;r182=r129;r183=r180;break}r41=HEAP32[r142>>2];r142=0;r128=r129;while(1){if((r142|0)>=(r128|0)){break}r149=r41|0;r144=_llvm_bswap_i16(HEAP16[r149>>1]);HEAP16[r149>>1]=r144;r144=r41+2|0;r149=_llvm_bswap_i16(HEAP16[r144>>1]);HEAP16[r144>>1]=r149;r41=r41+4|0;r142=r142+1|0;r128=HEAP32[r20>>2]}r181=r179;r182=r128;r183=HEAP32[r19>>2]}else{HEAP32[r150+76>>2]=r175+r179;r181=r179+(r129<<2)|0;r182=r129;r183=r180}}while(0);_err_msg(1,32800,314,35480,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r182,r5));STACKTOP=r5;r143=___ckd_calloc__(HEAP32[r18>>2],4,32800,316);HEAP32[r150+108>>2]=r143;r143=_listelem_alloc_init(24);HEAP32[r150+112>>2]=r143;r184=r181;r185=r183;r186=r182}else{r184=r179;r185=r180;r186=r129}if((r185|0)>0){if((r174|0)!=0){_fseek(r122,r184,0)}if((_fread(r40,4,1,r122)|0)!=1){r160=r151;break}r143=HEAP32[r15>>2];if(r58){r187=r143}else{r142=_llvm_bswap_i32(r143);HEAP32[r15>>2]=r142;r187=r142}HEAP32[r150+84>>2]=r187;r142=___ckd_calloc__(HEAP32[r15>>2],4,32800,328);r143=r150+80|0;HEAP32[r143>>2]=r142;r41=_fread(r142,4,HEAP32[r15>>2],r122);if((r41|0)==(HEAP32[r15>>2]|0)){r188=0;r189=r41}else{_err_msg(4,32800,330,34728,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break}while(1){if((r188|0)>=(r189|0)){break}if(!r58){r41=HEAP32[r143>>2]+(r188<<2)|0;r142=_llvm_bswap_i32(HEAP32[r41>>2]);HEAP32[r41>>2]=r142}r142=HEAP32[r143>>2];HEAP32[r142+(r188<<2)>>2]=(HEAPF64[r125>>3]*HEAPF32[r142+(r188<<2)>>2]&-1)>>HEAP8[r152];r188=r188+1|0;r189=HEAP32[r15>>2]}_err_msg(1,32800,339,33096,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r189,r5));STACKTOP=r5}r143=r150+16|0;do{if(HEAPU8[r143]>2){if((_fread(r40,4,1,r122)|0)!=1){r160=r151;break L321}r129=HEAP32[r15>>2];if(r58){r190=r129}else{r142=_llvm_bswap_i32(r129);HEAP32[r15>>2]=r142;r190=r142}HEAP32[r150+92>>2]=r190;r142=___ckd_calloc__(HEAP32[r15>>2],4,32800,348);r129=r150+88|0;HEAP32[r129>>2]=r142;r41=_fread(r142,4,HEAP32[r15>>2],r122);if((r41|0)==(HEAP32[r15>>2]|0)){r191=0;r192=r41}else{_err_msg(4,32800,350,31808,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break L321}while(1){if((r191|0)>=(r192|0)){break}if(!r58){r41=HEAP32[r129>>2]+(r191<<2)|0;r142=_llvm_bswap_i32(HEAP32[r41>>2]);HEAP32[r41>>2]=r142}r142=HEAP32[r129>>2];HEAP32[r142+(r191<<2)>>2]=(HEAPF64[r125>>3]*HEAPF32[r142+(r191<<2)>>2]&-1)>>HEAP8[r152];r191=r191+1|0;r192=HEAP32[r15>>2]}_err_msg(1,32800,359,30888,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r192,r5));STACKTOP=r5;if(HEAPU8[r143]<=2){break}if((_fread(r40,4,1,r122)|0)!=1){r160=r151;break L321}r129=HEAP32[r15>>2];if(r58){r193=r129}else{r128=_llvm_bswap_i32(r129);HEAP32[r15>>2]=r128;r193=r128}HEAP32[r150+100>>2]=r193;r128=___ckd_calloc__(HEAP32[r15>>2],4,32800,368);r129=r150+96|0;HEAP32[r129>>2]=r128;r142=_fread(r128,4,HEAP32[r15>>2],r122);if((r142|0)==(HEAP32[r15>>2]|0)){r194=0;r195=r142}else{_err_msg(4,32800,370,30176,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break L321}while(1){if((r194|0)>=(r195|0)){break}if(!r58){r142=HEAP32[r129>>2]+(r194<<2)|0;r128=_llvm_bswap_i32(HEAP32[r142>>2]);HEAP32[r142>>2]=r128}r128=HEAP32[r129>>2];HEAP32[r128+(r194<<2)>>2]=(HEAPF64[r125>>3]*HEAPF32[r128+(r194<<2)>>2]&-1)>>HEAP8[r152];r194=r194+1|0;r195=HEAP32[r15>>2]}_err_msg(1,32800,379,29392,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r195,r5));STACKTOP=r5}}while(0);r152=(r174|0)==0;if(r152){r196=r184}else{r196=_ftell(r122)}if((r186|0)>0){L502:do{if(r152){HEAP32[r15>>2]=((r185+1|0)/512&-1)+1;if((_fread(r40,4,1,r122)|0)!=1){r160=r151;break L321}r125=HEAP32[r15>>2];if(r58){r197=r125}else{r143=_llvm_bswap_i32(r125);HEAP32[r15>>2]=r143;r197=r143}r143=___ckd_calloc__(r197,4,32800,397);r125=r150+104|0;HEAP32[r125>>2]=r143;r129=_fread(r143,4,HEAP32[r15>>2],r122);if((r129|0)!=(HEAP32[r15>>2]|0)){_err_msg(4,32800,400,28536,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break L321}if(r58){r198=r196;r199=r129;break}else{r200=0;r201=r129}while(1){if((r200|0)>=(r201|0)){r198=r196;r199=r201;break L502}r129=HEAP32[r125>>2]+(r200<<2)|0;r143=_llvm_bswap_i32(HEAP32[r129>>2]);HEAP32[r129>>2]=r143;r200=r200+1|0;r201=HEAP32[r15>>2]}}else{r125=r175+r196|0;HEAP32[r15>>2]=HEAPU8[r125]|HEAPU8[r125+1|0]<<8|HEAPU8[r125+2|0]<<16|HEAPU8[r125+3|0]<<24;r125=r196+4|0;HEAP32[r150+104>>2]=r175+r125;r143=HEAP32[r15>>2];r198=r125+(r143<<2)|0;r199=r143}}while(0);_err_msg(1,32800,407,27632,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r199,r5));STACKTOP=r5;r202=r198}else{r202=r196}do{if(r152){HEAP8[r150+18|0]=1;if((_fread(r40,4,1,r122)|0)!=1){r160=r151;break L321}r143=HEAP32[r15>>2];if(r58){r203=r143}else{r125=_llvm_bswap_i32(r143);HEAP32[r15>>2]=r125;r203=r125}r125=___ckd_calloc__(r203,1,32800,422);r143=_fread(r125,1,HEAP32[r15>>2],r122);if((r143|0)==(HEAP32[r15>>2]|0)){r204=r125;r205=r143;break}_err_msg(4,32800,424,26480,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r160=r151;break L321}else{r143=r175+r202|0;r125=HEAPU8[r143]|HEAPU8[r143+1|0]<<8|HEAPU8[r143+2|0]<<16|HEAPU8[r143+3|0]<<24|0;HEAP32[r15>>2]=r125;r204=r175+(r202+4)|0;r205=r125}}while(0);r58=0;r125=0;while(1){if((r58|0)>=(r205|0)){break}r143=(HEAP8[r204+r58|0]|0)==0?r125+1|0:r125;r58=r58+1|0;r125=r143}r58=HEAP32[r18>>2];if((r125|0)!=(r58|0)){_err_msg(4,32800,435,25488,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r125,HEAP32[r5+8>>2]=r58,r5));STACKTOP=r5;r160=r151;break}r58=r150+48|0;r143=r150+52|0;L533:do{if(r152){r129=0;r128=0;r142=r125;while(1){if((r129|0)>=(r142|0)){break}r41=___ckd_salloc__(r204+r128|0,32800,454);HEAP32[HEAP32[r58>>2]+(r129<<2)>>2]=r41;r41=HEAP32[r143>>2];r149=HEAP32[HEAP32[r58>>2]+(r129<<2)>>2];r144=r129;r148=_key2hash(r41,r149);if((_enter(r41,r148,r149,_strlen(r149),r144,0)|0)!=(r144|0)){_err_msg(3,32800,457,24512,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[HEAP32[r58>>2]+(r129<<2)>>2],r5));STACKTOP=r5}r144=r128+(_strlen(HEAP32[HEAP32[r58>>2]+(r129<<2)>>2])+1)|0;r129=r129+1|0;r128=r144;r142=HEAP32[r18>>2]}_free(r204);r206=r129}else{r142=0;r128=0;while(1){if((r142|0)>=(r125|0)){r206=r142;break L533}HEAP32[HEAP32[r58>>2]+(r142<<2)>>2]=r204+r128;r144=HEAP32[r143>>2];r149=HEAP32[HEAP32[r58>>2]+(r142<<2)>>2];r148=r142;r41=_key2hash(r144,r149);if((_enter(r144,r41,r149,_strlen(r149),r148,0)|0)!=(r148|0)){_err_msg(3,32800,446,24512,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=HEAP32[HEAP32[r58>>2]+(r142<<2)>>2],r5));STACKTOP=r5}r148=r128+(_strlen(HEAP32[HEAP32[r58>>2]+(r142<<2)>>2])+1)|0;r142=r142+1|0;r128=r148}}}while(0);_err_msg(1,32800,463,22960,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r206,r5));STACKTOP=r5;if((HEAP32[r14>>2]|0)==0){_fclose(r122);r173=r151;break L314}else{_pclose(r122);r173=r151;break L314}}}else{r160=0}}while(0);if(r127){r156=r160;r4=394;break}if((HEAP32[r14>>2]|0)==0){_fclose(r122);r156=r160;r4=394;break}else{_pclose(r122);r156=r160;r4=394;break}}}while(0);if(r4==394){_ngram_model_free(r156);r173=0}if((r173|0)==0){r207=0}else{r154=r173;break}STACKTOP=r6;return r207}}while(0);if((r1|0)==0){r207=r154;STACKTOP=r6;return r207}r173=r1+4|0;do{if((_hash_table_lookup(HEAP32[r173>>2],7760,r12)|0)==0){if((_hash_table_lookup(HEAP32[r173>>2],7760,r11)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=7760,r5));STACKTOP=r5;r208=0;break}r156=HEAP32[r11>>2];if((r156|0)==0){r208=0;break}r208=HEAPF64[r156>>3]}else{r208=1}}while(0);r11=r1+4|0;do{if((_hash_table_lookup(HEAP32[r11>>2],6472,r10)|0)==0){if((_hash_table_lookup(HEAP32[r11>>2],6472,r9)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=6472,r5));STACKTOP=r5;r209=0;break}r173=HEAP32[r9>>2];if((r173|0)==0){r209=0;break}r209=HEAPF64[r173>>3]}else{r209=1}}while(0);r9=r1+4|0;do{if((_hash_table_lookup(HEAP32[r9>>2],49016,r8)|0)==0){if((_hash_table_lookup(HEAP32[r9>>2],49016,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=49016,r5));STACKTOP=r5;r210=0;break}r1=HEAP32[r7>>2];if((r1|0)==0){r210=0;break}r210=HEAPF64[r1>>3]}else{r210=1}}while(0);FUNCTION_TABLE[HEAP32[HEAP32[r154+64>>2]+4>>2]](r154,r208,r209,r210);r207=r154;STACKTOP=r6;return r207}function _ngram_model_init(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r6=0;r7=STACKTOP;HEAP32[r1>>2]=1;HEAP32[r1+64>>2]=r2;HEAP8[r1+16|0]=r4;r4=r1+4|0;if((HEAP32[r4>>2]|0)==0){r2=_malloc(12);if((r2|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=3,HEAP32[r6+8>>2]=4,HEAP32[r6+16>>2]=11488,HEAP32[r6+24>>2]=201,r6));STACKTOP=r6}if((HEAP32[r2-4>>2]&3|0)!=0){_memset(r2,0,12)|0}HEAP32[r4>>2]=r2}r2=r1+20|0;if((HEAP32[r2>>2]|0)!=(r3|0)){HEAPF32[r1+24>>2]=1;HEAP32[r1+28>>2]=0;HEAP32[r1+32>>2]=0;r8=1/(r5|0);if(r8>0){r9=Math_log(r8);r10=(r9*HEAPF64[r3+48>>3]&-1)>>HEAP8[r3+9|0];r11=r3+64|0}else{r9=r3+64|0;r10=HEAP32[r9>>2];r11=r9}HEAP32[r1+36>>2]=r10;HEAP32[r1+40>>2]=HEAP32[r11>>2];HEAP32[r1+44>>2]=HEAP32[r11>>2];HEAP32[r2>>2]=r3}r3=r1+48|0;r2=HEAP32[r3>>2];do{if((r2|0)==0){r12=___ckd_calloc__(r5,4,11488,226)}else{L19:do{if((HEAP8[r1+18|0]|0)==0){r13=r2}else{r11=r1+12|0;r10=0;while(1){r9=HEAP32[r3>>2];if((r10|0)>=(HEAP32[r11>>2]|0)){r13=r9;break L19}_free(HEAP32[r9+(r10<<2)>>2]);HEAP32[HEAP32[r3>>2]+(r10<<2)>>2]=0;r10=r10+1|0}}}while(0);r10=r5<<2;r11=_realloc(r13,r10);if((r11|0)!=0){r12=r11;break}_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r10,HEAP32[r6+8>>2]=11488,HEAP32[r6+16>>2]=223,r6));STACKTOP=r6}}while(0);HEAP32[r3>>2]=r12;r12=r1+52|0;r3=HEAP32[r12>>2];if((r3|0)==0){r6=_hash_table_new(r5,0);HEAP32[r12>>2]=r6;r14=r1+12|0;HEAP32[r14>>2]=r5;r15=r1+8|0;HEAP32[r15>>2]=r5;r16=HEAP32[r4>>2];HEAP32[r16>>2]=r5;STACKTOP=r7;return}r6=r3+4|0;r12=r3|0;r13=0;while(1){if((r13|0)>=(HEAP32[r6>>2]|0)){break}r2=HEAP32[HEAP32[r12>>2]+(r13<<4)+12>>2];while(1){if((r2|0)==0){break}r10=HEAP32[r2+12>>2];_free(r2);r2=r10}r2=HEAP32[r12>>2]+(r13<<4)|0;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;HEAP32[r2+12>>2]=0;r13=r13+1|0}HEAP32[r3+8>>2]=0;r14=r1+12|0;HEAP32[r14>>2]=r5;r15=r1+8|0;HEAP32[r15>>2]=r5;r16=HEAP32[r4>>2];HEAP32[r16>>2]=r5;STACKTOP=r7;return}function _ngram_model_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=HEAP32[r1+64>>2];do{if((r3|0)!=0){r2=HEAP32[r3>>2];if((r2|0)==0){break}FUNCTION_TABLE[r2](r1)}}while(0);L11:do{if((HEAP8[r1+18|0]|0)==0){r3=r1+17|0;r2=r1+60|0;r4=r1+48|0;r5=0;while(1){if((r5|0)>=(HEAPU8[r3]|0)){r6=r3;r7=r2;break L11}r8=HEAP32[HEAP32[r2>>2]+(r5<<2)>>2];r9=r8+8|0;r10=r8+4|0;r11=0;while(1){if((r11|0)>=(HEAP32[r9>>2]|0)){break}_free(HEAP32[HEAP32[r4>>2]+(HEAP32[r10>>2]+r11<<2)>>2]);r11=r11+1|0}r11=r8+20|0;r10=r8+16|0;r9=0;while(1){if((r9|0)>=(HEAP32[r11>>2]|0)){break}r12=HEAP32[HEAP32[r10>>2]+(r9*12&-1)>>2];if((r12|0)!=-1){_free(HEAP32[HEAP32[r4>>2]+(r12<<2)>>2])}r9=r9+1|0}r5=r5+1|0}}else{r5=r1+12|0;r4=r1+48|0;r2=0;while(1){if((r2|0)>=(HEAP32[r5>>2]|0)){break}_free(HEAP32[HEAP32[r4>>2]+(r2<<2)>>2]);r2=r2+1|0}r6=r1+17|0;r7=r1+60|0}}while(0);r2=0;while(1){r13=HEAP32[r7>>2];if((r2|0)>=(HEAPU8[r6]|0)){break}r4=HEAP32[r13+(r2<<2)>>2];_free(HEAP32[r4+16>>2]);_free(HEAP32[r4+12>>2]);_free(r4);r2=r2+1|0}_free(r13);_hash_table_free(HEAP32[r1+52>>2]);_free(HEAP32[r1+48>>2]);_free(HEAP32[r1+4>>2]);_free(r1);return}function _ngram_ng_score(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;if((r2|0)==-1){r6=HEAP32[r1+44>>2];return r6}do{if((r2|0)<0){r7=r1+60|0;r8=HEAP32[HEAP32[r7>>2]+((r2>>>24&127)<<2)>>2];r9=_ngram_class_prob(r8,r2);if((r9|0)!=1){r10=HEAP32[r8>>2];r11=r9;r12=r7;break}r6=HEAP32[r1+44>>2];return r6}else{r10=r2;r11=0;r12=r1+60|0}}while(0);r2=0;while(1){if((r2|0)>=(r4|0)){break}r7=r3+(r2<<2)|0;r9=HEAP32[r7>>2];if((r9|0)!=-1&(r9|0)<0){HEAP32[r7>>2]=HEAP32[HEAP32[HEAP32[r12>>2]+((r9>>>24&127)<<2)>>2]>>2]}r2=r2+1|0}r6=FUNCTION_TABLE[HEAP32[HEAP32[r1+64>>2]+8>>2]](r1,r10,r3,r4,r5)+r11|0;return r6}function _ngram_class_prob(r1,r2){var r3,r4,r5,r6,r7;r3=0;r4=r2&16777215;r5=HEAP32[r1+4>>2];do{if((r4|0)>=(r5|0)){if((r4|0)>(r5+HEAP32[r1+8>>2]|0)){break}r6=HEAP32[HEAP32[r1+12>>2]+(r4-r5<<2)>>2];return r6}}while(0);r5=r1+16|0;r4=HEAP32[r1+20>>2]-1&r2;while(1){if((r4|0)==-1){r6=1;r3=9;break}r7=HEAP32[r5>>2];if((HEAP32[r7+(r4*12&-1)>>2]|0)==(r2|0)){break}r4=HEAP32[r7+(r4*12&-1)+8>>2]}if(r3==9){return r6}r6=HEAP32[r7+(r4*12&-1)+4>>2];return r6}function _ngram_ng_prob(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;if((r2|0)==-1){r6=HEAP32[r1+44>>2];return r6}do{if((r2|0)<0){r7=r1+60|0;r8=HEAP32[HEAP32[r7>>2]+((r2>>>24&127)<<2)>>2];r9=_ngram_class_prob(r8,r2);if((r9|0)==1){r6=1;return r6}else{r10=HEAP32[r8>>2];r11=r9;r12=r7;break}}else{r10=r2;r11=0;r12=r1+60|0}}while(0);r2=0;while(1){if((r2|0)>=(r4|0)){break}r7=r3+(r2<<2)|0;r9=HEAP32[r7>>2];if((r9|0)!=-1&(r9|0)<0){HEAP32[r7>>2]=HEAP32[HEAP32[HEAP32[r12>>2]+((r9>>>24&127)<<2)>>2]>>2]}r2=r2+1|0}r6=FUNCTION_TABLE[HEAP32[HEAP32[r1+64>>2]+12>>2]](r1,r10,r3,r4,r5)+r11|0;return r6}function _ngram_add_word_internal(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;r7=r1+52|0;if((_hash_table_lookup(HEAP32[r7>>2],r2,r6)|0)==0){r8=HEAP32[r6>>2];_err_msg(3,11488,823,38992,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r2,r4));STACKTOP=r4;r9=r8;STACKTOP=r5;return r9}r8=r1+12|0;r6=HEAP32[r8>>2];if((r3|0)>-1){r10=r3<<24|r6|-2147483648}else{r10=r6}r3=r1+8|0;r11=HEAP32[r3>>2];do{if((r6|0)<(r11|0)){r12=r1+48|0}else{r13=r11+10|0;HEAP32[r3>>2]=r13;r14=r1+48|0;r15=r13<<2;r13=_realloc(HEAP32[r14>>2],r15);if((r13|0)==0){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r15,HEAP32[r4+8>>2]=11488,HEAP32[r4+16>>2]=837,r4));STACKTOP=r4}else{HEAP32[r14>>2]=r13;r12=r14;break}}}while(0);r1=___ckd_salloc__(r2,11488,841);HEAP32[HEAP32[r12>>2]+(HEAP32[r8>>2]<<2)>>2]=r1;r1=HEAP32[r7>>2];r7=HEAP32[HEAP32[r12>>2]+(HEAP32[r8>>2]<<2)>>2];r2=r10;r3=_key2hash(r1,r7);if((_enter(r1,r3,r7,_strlen(r7),r2,0)|0)!=(r10|0)){_err_msg(4,11488,845,37944,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=HEAP32[HEAP32[r12>>2]+(HEAP32[r8>>2]<<2)>>2],HEAP32[r4+8>>2]=r2,r4));STACKTOP=r4}HEAP32[r8>>2]=HEAP32[r8>>2]+1;r9=r10;STACKTOP=r5;return r9}function _ngram_model_add_word(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=0;r5=STACKTOP;r6=HEAP32[r1+44>>2];if((HEAP8[r1+18|0]|0)==0){_err_msg(3,11488,861,36688,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r2,r4));STACKTOP=r4;STACKTOP=r5;return-1}r4=_ngram_add_word_internal(r1,r2,-1);if((r4|0)==-1){STACKTOP=r5;return-1}r2=HEAP32[r1+64>>2];if((r2|0)==0){r7=r6;r8=(r7|0)==0;r9=r8?-1:r4;STACKTOP=r5;return r9}r10=HEAP32[r2+16>>2];if((r10|0)==0){r7=r6;r8=(r7|0)==0;r9=r8?-1:r4;STACKTOP=r5;return r9}r6=HEAP32[r1+20>>2];if(r3>0){r2=Math_log(r3);r11=(r2*HEAPF64[r6+48>>3]&-1)>>HEAP8[r6+9|0]}else{r11=HEAP32[r6+64>>2]}r7=FUNCTION_TABLE[r10](r1,r4,r11);r8=(r7|0)==0;r9=r8?-1:r4;STACKTOP=r5;return r9}function _classdef_free(r1){var r2,r3,r4,r5;r2=r1+8|0;r3=r1|0;r4=0;while(1){r5=HEAP32[r3>>2];if((r4|0)>=(HEAP32[r2>>2]|0)){break}_free(HEAP32[r5+(r4<<2)>>2]);r4=r4+1|0}_free(r5);_free(HEAP32[r1+4>>2]);_free(r1);return}function _bio_hdrarg_free(r1,r2){var r3,r4;if((r1|0)==0){return}else{r3=0}while(1){r4=HEAP32[r1+(r3<<2)>>2];if((r4|0)==0){break}_free(r4);_free(HEAP32[r2+(r3<<2)>>2]);r3=r3+1|0}_free(r1);_free(r2);return}function _bio_writehdr(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+24|0;r6=r5;r7=r5+16;_fwrite(29832,3,1,r1);r8=r6;HEAP32[r8>>2]=r2;HEAP32[r8+4>>2]=0;r8=r6|0;while(1){r6=(tempInt=HEAP32[r8+4>>2],HEAP32[r8+4>>2]=tempInt+8,HEAP32[HEAP32[r8>>2]+tempInt>>2]);if((r6|0)==0){break}r2=(tempInt=HEAP32[r8+4>>2],HEAP32[r8+4>>2]=tempInt+8,HEAP32[HEAP32[r8>>2]+tempInt>>2]);if((r2|0)==0){r3=4;break}_fprintf(r1,14480,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r6,HEAP32[r4+8>>2]=r2,r4));STACKTOP=r4}if(r3==4){_err_msg(4,22752,166,17456,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;r9=-1;STACKTOP=r5;return r9}_fwrite(32664,7,1,r1);_fflush(r1);HEAP32[r7>>2]=287454020;if((_fwrite(r7,4,1,r1)|0)!=1){r9=-1;STACKTOP=r5;return r9}_fflush(r1);r9=0;STACKTOP=r5;return r9}function _bio_readhdr(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+36880|0;r8=r7;r9=r7+8;r10=r7+16392;r11=r7+32776;r12=r7+36872;r13=_malloc(132);if((r13|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=33,HEAP32[r6+8>>2]=4,HEAP32[r6+16>>2]=22752,HEAP32[r6+24>>2]=193,r6));STACKTOP=r6}if((HEAP32[r13-4>>2]&3|0)!=0){_memset(r13,0,132)|0}HEAP32[r2>>2]=r13;r13=_malloc(128);if((r13|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=32,HEAP32[r6+8>>2]=4,HEAP32[r6+16>>2]=22752,HEAP32[r6+24>>2]=194,r6));STACKTOP=r6}if((HEAP32[r13-4>>2]&3|0)!=0){_memset(r13,0,128)|0}HEAP32[r3>>2]=r13;r13=r10|0;L13:do{if((_fgets(r13,16384,r1)|0)==0){_err_msg(4,22752,198,11464,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=0,r6));STACKTOP=r6}else{L15:do{if((HEAP8[r13]|0)==115){if((HEAP8[r10+1|0]|0)!=51){r5=29;break}if((HEAP8[r10+2|0]|0)!=10){r5=29;break}r14=r11|0;r15=1;r16=0;L19:while(1){r17=r15;while(1){if((_fgets(r13,16384,r1)|0)==0){r5=17;break L19}r18=r17+1|0;r19=_sscanf(r13,9440,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r14,HEAP32[r6+8>>2]=r12,r6));STACKTOP=r6;if((r19|0)!=1){r5=19;break L19}r19=HEAP8[r14];if(r19<<24>>24==35){r17=r18;continue}else if(r19<<24>>24==101){r20=r14;r21=6464}else{break}while(1){r22=r20+1|0;r23=r21+1|0;r24=HEAP8[r22];r25=HEAP8[r23];if(r24<<24>>24!=r25<<24>>24|r24<<24>>24==0|r25<<24>>24==0){break}else{r20=r22;r21=r23}}if(r24<<24>>24==r25<<24>>24){r26=r16;break L15}if(r19<<24>>24==35){r17=r18}else{break}}if((r16|0)>31){r5=25;break}r23=___ckd_salloc__(r14,22752,228);HEAP32[HEAP32[r2>>2]+(r16<<2)>>2]=r23;r23=_sscanf(r10+HEAP32[r12>>2]|0,6408,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r14,r6));STACKTOP=r6;if((r23|0)!=1){r5=27;break}r23=___ckd_salloc__(r14,22752,233);HEAP32[HEAP32[r3>>2]+(r16<<2)>>2]=r23;r15=r18;r16=r16+1|0}if(r5==17){_err_msg(4,22752,207,11464,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r17,r6));STACKTOP=r6;break L13}else if(r5==19){_err_msg(4,22752,213,7728,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r18,r6));STACKTOP=r6;break L13}else if(r5==25){_err_msg(4,22752,224,48952,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=32,r6));STACKTOP=r6;break L13}else if(r5==27){_err_msg(4,22752,230,7728,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r18,r6));STACKTOP=r6;break L13}}else{r5=29}}while(0);L37:do{if(r5==29){r16=r11|0;r15=_sscanf(r13,6408,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r16,r6));STACKTOP=r6;if((r15|0)!=1){_err_msg(4,22752,240,7728,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=1,r6));STACKTOP=r6;break L13}r15=___ckd_salloc__(45992,22752,244);HEAP32[HEAP32[r2>>2]>>2]=r15;r15=___ckd_salloc__(r16,22752,245);HEAP32[HEAP32[r3>>2]>>2]=r15;r15=r9|0;while(1){if((_fgets(r15,16384,r1)|0)==0){break}if((HEAP8[r15]|0)==42){r27=r15;r28=19408}else{continue}while(1){r16=r27+1|0;r14=r28+1|0;r29=HEAP8[r16];r30=HEAP8[r14];if(r29<<24>>24!=r30<<24>>24|r29<<24>>24==0|r30<<24>>24==0){break}else{r27=r16;r28=r14}}if(r29<<24>>24==r30<<24>>24){r26=1;break L37}}_err_msg(5,22752,89,18968,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=19408,r6));STACKTOP=r6;_exit(1)}}while(0);HEAP32[HEAP32[r2>>2]+(r26<<2)>>2]=0;L50:do{if((_fread(r8,4,1,r1)|0)==1){r15=HEAP32[r8>>2];do{if((r15|0)==287454020){r31=0}else{r14=_llvm_bswap_i32(r15);HEAP32[r8>>2]=r14;if((r15|0)==1144201745){r31=1;break}HEAP32[r8>>2]=r15;_err_msg(4,22752,112,19936,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r15,HEAP32[r6+8>>2]=287454020,r6));STACKTOP=r6;break L50}}while(0);HEAP32[r4>>2]=r31;r32=0;STACKTOP=r7;return r32}else{_err_msg(4,22752,99,20464,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6}}while(0);HEAP32[r4>>2]=-1;_err_msg(4,22752,253,44336,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6}}while(0);_bio_hdrarg_free(HEAP32[r2>>2],HEAP32[r3>>2]);HEAP32[r3>>2]=0;HEAP32[r2>>2]=0;r32=-1;STACKTOP=r7;return r32}function _bio_fread(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13;r7=0;r8=STACKTOP;if((_fread(r1,r2,r3,r4)|0)!=(r3|0)){r9=-1;STACKTOP=r8;return r9}L4:do{if((r5|0)!=0){if((r2|0)==2){r4=r1;r10=0;while(1){if((r10|0)>=(r3|0)){break L4}r11=r4+(r10<<1)|0;r12=_llvm_bswap_i16(HEAP16[r11>>1]);HEAP16[r11>>1]=r12;r10=r10+1|0}}else if((r2|0)==1){break}else if((r2|0)==4){r10=r1;r4=0;while(1){if((r4|0)>=(r3|0)){break L4}r12=r10+(r4<<2)|0;r11=_llvm_bswap_i32(HEAP32[r12>>2]);HEAP32[r12>>2]=r11;r4=r4+1|0}}else{_err_msg(5,22752,319,20888,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r2,r7));STACKTOP=r7;_exit(1)}}}while(0);if((r6|0)==0){r9=r3;STACKTOP=r8;return r9}r5=HEAP32[r6>>2];L20:do{if((r2|0)==2){r4=r1;r10=0;r11=r5;while(1){if((r10|0)>=(r3|0)){r13=r11;break L20}r12=(r11<<10|r11>>>22)+HEAPU16[r4+(r10<<1)>>1]|0;r10=r10+1|0;r11=r12}}else if((r2|0)==4){r11=r1;r10=0;r4=r5;while(1){if((r10|0)>=(r3|0)){r13=r4;break L20}r12=(r4<<20|r4>>>12)+HEAP32[r11+(r10<<2)>>2]|0;r10=r10+1|0;r4=r12}}else if((r2|0)==1){r4=0;r10=r5;while(1){if((r4|0)>=(r3|0)){r13=r10;break L20}r11=(r10<<5|r10>>>27)+HEAPU8[r1+r4|0]|0;r4=r4+1|0;r10=r11}}else{_err_msg(5,22752,290,21432,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r2,r7));STACKTOP=r7;_exit(1)}}while(0);HEAP32[r6>>2]=r13;r9=r3;STACKTOP=r8;return r9}function _bio_fread_1d(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10;r7=0;r8=STACKTOP;if((_bio_fread(r3,4,1,r4,r5,r6)|0)!=1){_err_msg(5,22752,369,42768,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;_exit(1)}r9=HEAP32[r3>>2];if((r9|0)==0){_err_msg(5,22752,371,41728,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=0,r7));STACKTOP=r7;_exit(1)}r10=___ckd_calloc__(r9,r2,22752,374);HEAP32[r1>>2]=r10;r1=_bio_fread(r10,r2,HEAP32[r3>>2],r4,r5,r6);if((r1|0)==(HEAP32[r3>>2]|0)){STACKTOP=r8;return r1}else{_err_msg(5,22752,378,40432,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;_exit(1)}}function _bio_verify_chksum(r1,r2,r3){var r4,r5,r6,r7;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;if((_fread(r6,4,1,r1)|0)!=1){_err_msg(5,22752,497,31784,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;_exit(1)}r1=HEAP32[r6>>2];if((r2|0)==0){r7=r1}else{r2=_llvm_bswap_i32(r1);HEAP32[r6>>2]=r2;r7=r2}if((r7|0)==(r3|0)){STACKTOP=r5;return}else{_err_msg(5,22752,503,30832,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r7,HEAP32[r4+8>>2]=r3,r4));STACKTOP=r4;_exit(1)}}function _strcmp_nocase(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=0;if((r1|0)==(r2|0)){r4=0;return r4}r5=(r1|0)==0;if(r5|(r2|0)==0){r4=r5?-1:1;return r4}else{r6=r2;r7=r1}while(1){r1=HEAP8[r7];r8=r1<<24>>24>96&r1<<24>>24<123?r1-32&255:r1;r1=HEAP8[r6];r9=r1<<24>>24>96&r1<<24>>24<123?r1-32&255:r1;if(r8<<24>>24!=r9<<24>>24){break}if(r8<<24>>24==0){r4=0;r3=7;break}else{r6=r6+1|0;r7=r7+1|0}}if(r3==7){return r4}r4=(r8<<24>>24)-(r9<<24>>24)|0;return r4}function _ckd_fail(r1,r2){var r3,r4;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r3=r4;HEAP32[r3>>2]=r2;HEAP32[r3+4>>2]=0;_vfprintf(HEAP32[_stderr>>2],r1,r4|0);_exit(-1)}function ___ckd_calloc__(r1,r2,r3,r4){var r5,r6,r7,r8;r5=0;r6=STACKTOP;do{if((r1|0)==0){r7=0}else{r8=Math_imul(r2,r1)|0;if((r2|r1)>>>0<=65535){r7=r8;break}r7=((r8>>>0)/(r1>>>0)&-1|0)==(r2|0)?r8:-1}}while(0);r8=_malloc(r7);if((r8|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=r1,HEAP32[r5+8>>2]=r2,HEAP32[r5+16>>2]=r3,HEAP32[r5+24>>2]=r4,r5));STACKTOP=r5}if((HEAP32[r8-4>>2]&3|0)==0){STACKTOP=r6;return r8}_memset(r8,0,r7)|0;STACKTOP=r6;return r8}function ___ckd_salloc__(r1,r2,r3){var r4,r5,r6,r7;r4=0;r5=STACKTOP;r6=_strlen(r1)+1|0;r7=_malloc(r6);if((r7|0)==0){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r6,HEAP32[r4+8>>2]=r2,HEAP32[r4+16>>2]=r3,r4));STACKTOP=r4}else{_strcpy(r7,r1);STACKTOP=r5;return r7}}function ___ckd_calloc_2d__(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10;r6=0;r7=STACKTOP;r8=___ckd_calloc__(Math_imul(r1,r2)|0,r3,r4,r5);r9=r1<<2;r10=_malloc(r9);if((r10|0)==0){_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r9,HEAP32[r6+8>>2]=r4,HEAP32[r6+16>>2]=r5,r6));STACKTOP=r6}r6=r10;r5=Math_imul(r2,r3)|0;r3=0;r2=0;while(1){if(r2>>>0>=r1>>>0){break}HEAP32[r6+(r2<<2)>>2]=r8+r3;r3=r3+r5|0;r2=r2+1|0}STACKTOP=r7;return r10}function ___ckd_calloc_3d__(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13;r7=0;r8=STACKTOP;r9=Math_imul(r1,r2)|0;r10=___ckd_calloc__(Math_imul(r9,r3)|0,r4,r5,r6);r11=r1<<2;r12=_malloc(r11);if((r12|0)==0){_ckd_fail(45472,(r7=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r7>>2]=r11,HEAP32[r7+8>>2]=r5,HEAP32[r7+16>>2]=r6,r7));STACKTOP=r7}r11=r12;r13=r9<<2;r9=_malloc(r13);if((r9|0)==0){_ckd_fail(45472,(r7=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r7>>2]=r13,HEAP32[r7+8>>2]=r5,HEAP32[r7+16>>2]=r6,r7));STACKTOP=r7}r7=r9;r9=0;r6=0;while(1){if(r6>>>0>=r1>>>0){break}HEAP32[r11+(r6<<2)>>2]=r7+(r9<<2);r9=r9+r2|0;r6=r6+1|0}r6=Math_imul(r3,r4)|0;r4=0;r3=0;while(1){if(r4>>>0>=r1>>>0){break}r9=r11+(r4<<2)|0;r7=0;r5=r3;while(1){if(r7>>>0>=r2>>>0){break}HEAP32[HEAP32[r9>>2]+(r7<<2)>>2]=r10+r5;r7=r7+1|0;r5=r5+r6|0}r4=r4+1|0;r3=r5}STACKTOP=r8;return r12}function _cmd_ln_val_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9;r2=r1+8|0;r3=HEAP32[r2>>2];do{if((r3&32|0)==0){r4=r3}else{r5=HEAP32[r1>>2];r6=r5;if((r5|0)==0){r4=r3;break}else{r7=0}while(1){r8=HEAP32[r6+(r7<<2)>>2];if((r8|0)==0){break}_free(r8);r7=r7+1|0}_free(r5);r4=HEAP32[r2>>2]}}while(0);if((r4&8|0)==0){r9=r1;_free(r9);return}_free(HEAP32[r1>>2]);r9=r1;_free(r9);return}function _cmd_ln_parse_r(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40;r6=0;r7=0;r8=STACKTOP;STACKTOP=STACKTOP+48|0;r9=r8;r10=r8+8;r11=r8+16;r12=r8+24;r13=r8+32;r14=r8+40;r15=(r1|0)==0;if(r15){r16=_malloc(16);if((r16|0)==0){_ckd_fail(29016,(r7=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r7>>2]=1,HEAP32[r7+8>>2]=16,HEAP32[r7+16>>2]=45384,HEAP32[r7+24>>2]=560,r7));STACKTOP=r7}if((HEAP32[r16-4>>2]&3|0)!=0){_memset(r16,0,16)|0}HEAP32[r16>>2]=1;r17=r16}else{r17=r1}r1=_hash_table_new(50,0);r16=(r2|0)==0;L10:do{if(r16){r18=0;r6=13}else{r19=(r5|0)==0;r20=0;while(1){r21=r2+(r20<<4)|0;r22=HEAP32[r21>>2];if((r22|0)==0){r18=r20;r6=13;break L10}r23=r2+(r20<<4)|0;r24=_key2hash(r1,r22);if(!(r19|(_enter(r1,r24,r22,_strlen(r22),r23,0)|0)==(r23|0))){break}r20=r20+1|0}_err_msg(4,45384,574,6416,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r21>>2],r7));STACKTOP=r7}}while(0);do{if(r6==13){r21=r17+4|0;if((HEAP32[r21>>2]|0)==0){r20=_hash_table_new(r18,0);HEAP32[r21>>2]=r20}if((r3|0)>0){r25=(HEAP8[HEAP32[r4>>2]]|0)==45?0:1}else{r25=0}r20=(r5|0)==0;r19=r25;L25:while(1){if((r19|0)>=(r3|0)){r26=0;r6=40;break}r27=r4+(r19<<2)|0;do{if((_hash_table_lookup(r1,HEAP32[r27>>2],r12)|0)<0){if(!r20){r6=22;break L25}if(!r16){break}HEAP32[r12>>2]=0;r28=0;r6=25}else{r28=HEAP32[r12>>2];r6=25}}while(0);do{if(r6==25){r6=0;r23=r19+1|0;if((r23|0)>=(r3|0)){r6=26;break L25}if((r28|0)==0){r29=_cmd_ln_val_init(8,HEAP32[r4+(r23<<2)>>2])}else{r30=r4+(r23<<2)|0;r23=_cmd_ln_val_init(HEAP32[r28+4>>2],HEAP32[r30>>2]);if((r23|0)==0){r6=32;break L25}else{r29=r23}}r23=HEAP32[r21>>2];r22=HEAP32[r27>>2];r24=r29;r31=_key2hash(r23,r22);r32=_enter(r23,r31,r22,_strlen(r22),r24,0);HEAP32[r12>>2]=r32;if((r32|0)==(r24|0)){break}if(!r20){r6=37;break L25}r32=HEAP32[r21>>2];r22=HEAP32[r27>>2];r31=_key2hash(r32,r22);r23=_enter(r32,r31,r22,_strlen(r22),r24,1);HEAP32[r12>>2]=r23;_cmd_ln_val_free(r23)}}while(0);r19=r19+2|0}if(r6==22){_err_msg(4,45384,603,48920,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r27>>2],r7));STACKTOP=r7;break}else if(r6==26){r19=HEAP32[_stderr>>2];if(!r16){_fwrite(24480,27,1,r19);_arg_dump_r(r17,r19,r2,1)}_err_msg(4,45384,616,47504,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r27>>2],r7));STACKTOP=r7;break}else if(r6==32){r19=HEAP32[_stderr>>2];if(!r16){_fwrite(24480,27,1,r19);_arg_dump_r(r17,r19,r2,1)}r19=HEAP32[r30>>2];_err_msg(4,45384,626,45960,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r27>>2],HEAP32[r7+8>>2]=r19,r7));STACKTOP=r7;break}else if(r6==37){_cmd_ln_val_free(r29);_err_msg(4,45384,637,44288,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r28>>2],r7));STACKTOP=r7;break}else if(r6==40){while(1){r6=0;if((r26|0)>=(r18|0)){r33=0;break}r34=r2+(r26<<4)|0;if((_hash_table_lookup(HEAP32[r21>>2],HEAP32[r34>>2],r13)|0)<0){r35=r2+(r26<<4)+8|0;r19=_cmd_ln_val_init(HEAP32[r2+(r26<<4)+4>>2],HEAP32[r35>>2]);if((r19|0)==0){r6=43;break}r23=HEAP32[r21>>2];r24=HEAP32[r34>>2];r22=_key2hash(r23,r24);_enter(r23,r22,r24,_strlen(r24),r19,0)}r26=r26+1|0;r6=40}if(r6==43){r19=HEAP32[r35>>2];_err_msg(4,45384,656,42728,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=HEAP32[r34>>2],HEAP32[r7+8>>2]=r19,r7));STACKTOP=r7;break}while(1){if((r33|0)>=(r18|0)){break}do{if((HEAP32[r2+(r33<<4)+4>>2]&1|0)!=0){r19=r2+(r33<<4)|0;if((_hash_table_lookup(HEAP32[r21>>2],HEAP32[r19>>2],r14)|0)==0){break}_err_msg(4,45384,669,41696,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r19>>2],r7));STACKTOP=r7}}while(0);r33=r33+1|0}if((r20^1)&(r3|0)==1){_err_msg(4,45384,678,40384,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;r19=HEAP32[_stderr>>2];if(!r16){_fwrite(24480,27,1,r19);_arg_dump_r(r17,r19,r2,1)}if((r1|0)!=0){_hash_table_free(r1)}if(!r15){r36=0;STACKTOP=r8;return r36}_cmd_ln_free_r(r17);r36=0;STACKTOP=r8;return r36}do{if((r17|0)!=0){if((_hash_table_lookup(HEAP32[r21>>2],38952,r11)|0)!=0){break}if((_hash_table_lookup(HEAP32[r21>>2],38952,r10)|0)<0){_err_msg(4,45384,945,22936,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=38952,r7));STACKTOP=r7;break}r19=HEAP32[r10>>2];if((r19|0)==0){break}if((HEAP32[r19>>2]|0)==0){break}do{if((_hash_table_lookup(HEAP32[r21>>2],38952,r9)|0)<0){_err_msg(4,45384,945,22936,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=38952,r7));STACKTOP=r7;r37=0}else{r19=HEAP32[r9>>2];if((r19|0)==0){r37=0;break}r37=HEAP32[r19>>2]}}while(0);r19=_fopen(r37,48912);if((r19|0)==0){r24=___errno_location();r22=HEAP32[r24>>2];r24=_malloc(32);_memcpy(r24,37912,27)|0;r23=r24+_strlen(r24)|0;HEAP8[r23]=HEAP8[6400];HEAP8[r23+1|0]=HEAP8[6401];HEAP8[r23+2|0]=HEAP8[6402];HEAP8[r23+3|0]=HEAP8[6403];HEAP8[r23+4|0]=HEAP8[6404];HEAP8[r23+5|0]=HEAP8[6405];r23=_strerror(r22);_err_msg(5,45384,692,r24,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r23,r7));STACKTOP=r7;_free(r24);_exit(r22)}if((HEAP32[67896>>2]|0)!=0){HEAP32[67896>>2]=0;HEAP32[67904>>2]=r19;break}r22=HEAP32[67904>>2];if((r22|0)==0){r24=HEAP32[_stderr>>2];HEAP32[67896>>2]=0;HEAP32[67904>>2]=r19;if((r24|0)==0){break}else{r38=r24}}else{HEAP32[67896>>2]=0;HEAP32[67904>>2]=r19;r38=r22}if((r38|0)==(HEAP32[_stdout>>2]|0)|(r38|0)==(HEAP32[_stderr>>2]|0)){break}_fclose(r38)}}while(0);_err_msg(1,45384,696,35408,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;r21=0;while(1){if((r21|0)>=(r3|0)){break}r20=r4+(r21<<2)|0;r22=HEAP32[r20>>2];if((HEAP8[r22]|0)==45){_err_msg(2,0,0,34688,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;r39=HEAP32[r20>>2]}else{r39=r22}_err_msg(2,0,0,33064,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r39,r7));STACKTOP=r7;r21=r21+1|0}_err_msg(2,0,0,31776,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;_err_msg(2,0,0,30808,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;if((HEAP32[67896>>2]|0)==0){r21=HEAP32[67904>>2];r40=(r21|0)==0?HEAP32[_stderr>>2]:r21}else{r40=0}_arg_dump_r(r17,r40,r2,0);_hash_table_free(r1);r36=r17;STACKTOP=r8;return r36}}}while(0);if((r1|0)!=0){_hash_table_free(r1)}if(r15){_cmd_ln_free_r(r17)}_err_msg(4,45384,717,30096,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;r36=0;STACKTOP=r8;return r36}function _cmd_ln_val_init(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+128|0;r6=r5;r7=r5+8;r8=r5+112;r9=r5+120;r10=(r2|0)==0;L1:do{if(r10){r11=r9;r12=0;r13=0;r14=r11|0;HEAP32[r14>>2]=r12;r15=r11+4|0;HEAP32[r15>>2]=r13}else{r16=r6;r17=4;r18=0;r19=r7|0;r20=100;r21=0;r22=r8;r23=4;r24=0;HEAP32[r6>>2]=0;HEAP32[r8>>2]=0;r25=r2;L3:while(1){r26=_strstr(r25,16024);r27=(r26|0)==0;if(r27){break}r28=(r26|0)==(r25|0);if(r28){r29=r25}else{r30=r26;r31=r25;r32=r30-r31|0;_strnappend(r6,r8,r25,r32);r29=r26}r33=r29+2|0;r34=_strchr(r33,41);r35=(r34|0)==0;if(r35){_strnappend(r6,r8,r29,2);r25=r33;continue}r36=r34;r37=r33;r38=r36-r37|0;r39=(r38|0)<100;do{if(r39){r40=_strncpy(r19,r33,r38);r41=r7+r38|0;HEAP8[r41]=0;r42=_getenv(r19);r43=(r42|0)==0;if(r43){break}_strnappend(r6,r8,r42,0);r44=r34+1|0;r45=(r34|0)==0;r25=r44;continue L3}}while(0);r46=r34+1|0;r25=r46}_strnappend(r6,r8,r25,0);r47=HEAP32[r6>>2];r48=4;r49=0;r50=100;r51=0;r52=4;r53=0;L17:do{switch(r1|0){case 2:case 3:{r54=_sscanf(r47,19400,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r9,r4));STACKTOP=r4;r55=(r54|0)==1;if(r55){r3=34}break};case 4:case 5:{r56=(r47|0)==0;if(r56){r3=17}else{r57=HEAP8[r47];r58=r57<<24>>24==0;if(r58){r3=17}else{r59=1}}if(r3==17){r59=0}r60=_atof_c(r47);r61=r9|0;HEAPF64[r61>>3]=r60;_free(r47);r62=(r59|0)==0;if(r62){r63=0}else{break L1}STACKTOP=r5;return r63;break};case 16:case 17:{r64=HEAP8[r47];switch(r64<<24>>24){case 121:case 116:case 89:case 84:case 49:{r65=r9;HEAP32[r65>>2]=1;r3=34;break L17;break};case 110:case 102:case 78:{break};default:{r3=20}}do{if(r3==20){r66=r64<<24>>24==70;r67=r66&1;r68=r64<<24>>24==48;r69=r68&1;r70=r67|r69;r71=(r70|0)==0;if(!r71){break}_err_msg(4,45384,401,16304,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r2,r4));STACKTOP=r4;break L17}}while(0);r72=r9;HEAP32[r72>>2]=0;r3=34;break};case 8:case 9:{r73=___ckd_salloc__(r47,45384,407);r74=r9;HEAP32[r74>>2]=r73;r3=34;break};case 32:{r75=1;r76=r47;while(1){r77=HEAP8[r76];if(r77<<24>>24==0){break}else if(r77<<24>>24==44){r78=r75+1|0;r79=r78}else{r79=r75}r80=r76+1|0;r75=r79;r76=r80}r81=r75+1|0;r82=___ckd_calloc__(r81,4,45384,351);r83=r82;r84=0;r85=r47;while(1){r86=(r84|0)<(r75|0);if(r86){r87=0}else{break}while(1){r88=r85+r87|0;r89=HEAP8[r88];if(r89<<24>>24==44|r89<<24>>24==0){break}r90=r87+1|0;r87=r90}r91=r87+1|0;r92=___ckd_calloc__(r91,1,45384,355);r93=r83+(r84<<2)|0;HEAP32[r93>>2]=r92;r94=_strncpy(r92,r85,r87);r95=r85+r91|0;r96=r84+1|0;r84=r96;r85=r95}r97=r9;HEAP32[r97>>2]=r82;r3=34;break};default:{_err_msg(4,45384,413,16984,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r1,r4));STACKTOP=r4}}}while(0);if(r3==34){_free(r47);break}_free(r47);r63=0;STACKTOP=r5;return r63}}while(0);r98=_malloc(16);r99=(r98|0)==0;if(r99){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=16,HEAP32[r4+16>>2]=45384,HEAP32[r4+24>>2]=422,r4));STACKTOP=r4}r100=r98-4|0;r101=r100;r102=HEAP32[r101>>2];r103=r102&3;r104=(r103|0)==0;if(!r104){_memset(r98,0,16)|0}r105=r98;r106=r9;r107=r98;r108=r106|0;r109=HEAP32[r108>>2];r110=r106+4|0;r111=HEAP32[r110>>2];r112=r107|0;HEAP32[r112>>2]=r109;r113=r107+4|0;HEAP32[r113>>2]=r111;r114=r98+8|0;r115=r114;HEAP32[r115>>2]=r1;r63=r105;STACKTOP=r5;return r63}function _cmd_ln_free_r(r1){var r2,r3,r4,r5,r6,r7;r2=STACKTOP;STACKTOP=STACKTOP+8|0;if((r1|0)==0){STACKTOP=r2;return}r3=r1|0;r4=HEAP32[r3>>2]-1|0;HEAP32[r3>>2]=r4;if((r4|0)>0){STACKTOP=r2;return}r4=r1+4|0;r3=HEAP32[r4>>2];if((r3|0)!=0){r5=_hash_table_tolist(r3,r2);r3=r5;while(1){if((r3|0)==0){r6=r5;break}_cmd_ln_val_free(HEAP32[HEAP32[r3>>2]+8>>2]);r3=HEAP32[r3+8>>2]}while(1){if((r6|0)==0){break}r3=HEAP32[r6+8>>2];_free(r6);r6=r3}_hash_table_free(HEAP32[r4>>2]);HEAP32[r4>>2]=0}r4=r1+8|0;if((HEAP32[r4>>2]|0)!=0){r6=r1+12|0;r3=0;while(1){r7=HEAP32[r4>>2];if(r3>>>0>=HEAP32[r6>>2]>>>0){break}_free(HEAP32[r7+(r3<<2)>>2]);r3=r3+1|0}_free(r7);HEAP32[r4>>2]=0;HEAP32[r6>>2]=0}_free(r1);STACKTOP=r2;return}function _arg_dump_r(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+8|0;r8=r7;r9=(r3|0)==0;r10=(r2|0)==0;r11=r9|r10;if(r11){STACKTOP=r7;return}else{r12=0;r13=0;r14=0}while(1){r15=r3+(r12<<4)|0;r16=HEAP32[r15>>2];r17=(r16|0)==0;if(r17){break}r18=_strlen(r16);r19=(r13|0)<(r18|0);r20=r19?r18:r13;r21=r3+(r12<<4)+8|0;r22=HEAP32[r21>>2];r23=(r22|0)==0;if(r23){r24=6}else{r25=_strlen(r22);r24=r25}r26=(r14|0)<(r24|0);r27=r26?r24:r14;r28=r12+1|0;r12=r28;r13=r20;r14=r27}r29=r13&-8;r30=r14&-8;r31=_fwrite(22296,6,1,r2);r32=6;while(1){r33=(r32|0)<(r29|0);if(!r33){break}r34=_fputc(9,r2);r35=r32+8|0;r32=r35}r36=_fwrite(21416,8,1,r2);r37=7;while(1){r38=(r37|0)<(r30|0);if(!r38){break}r39=_fputc(9,r2);r40=r37+8|0;r37=r40}r41=(r4|0)==0;if(r41){r42=_fwrite(20448,9,1,r2)}else{r43=_fwrite(20872,9,1,r2)}r44=___ckd_calloc__(r12,4,45384,148);r45=r44;r46=0;while(1){r47=(r46|0)<(r12|0);if(!r47){break}r48=r3+(r46<<4)|0;r49=r45+(r46<<2)|0;HEAP32[r49>>2]=r48;r50=r46+1|0;r46=r50}_qsort(r44,r12,4,360);r51=r8;r52=r1+4|0;r53=0;while(1){r54=(r53|0)<(r12|0);if(!r54){break}r55=r45+(r53<<2)|0;r56=HEAP32[r55>>2];r57=r56|0;r58=HEAP32[r57>>2];r59=_fputs(r58,r2);r60=HEAP32[r55>>2];r61=r60|0;r62=HEAP32[r61>>2];r63=_strlen(r62);r64=r63;while(1){r65=(r64|0)<(r29|0);r66=_fputc(9,r2);if(!r65){break}r67=r64+8|0;r64=r67}r68=HEAP32[r55>>2];r69=r68+8|0;r70=HEAP32[r69>>2];r71=(r70|0)==0;if(r71){r72=0}else{r73=_fputs(r70,r2);r74=HEAP32[r55>>2];r75=r74+8|0;r76=HEAP32[r75>>2];r77=_strlen(r76);r72=r77}while(1){r78=(r72|0)<(r30|0);r79=_fputc(9,r2);if(!r78){break}r80=r72+8|0;r72=r80}r81=HEAP32[r55>>2];L39:do{if(r41){r82=r81|0;r83=HEAP32[r82>>2];r84=4;r85=0;r86=HEAP32[r52>>2];r87=_hash_table_lookup(r86,r83,r8);r88=(r87|0)<0;if(r88){_err_msg(4,45384,945,22936,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r83,r6));STACKTOP=r6;r89=4;r90=0;break}r91=HEAP32[r8>>2];r92=4;r93=0;r94=(r91|0)==0;if(r94){break}r95=HEAP32[r55>>2];r96=r95+4|0;r97=HEAP32[r96>>2];switch(r97|0){case 32:{r98=r91;r99=HEAP32[r98>>2];r100=r99;r101=(r99|0)==0;if(r101){break L39}else{r102=0}while(1){r103=r100+(r102<<2)|0;r104=HEAP32[r103>>2];r105=(r104|0)==0;if(r105){break L39}r106=_fprintf(r2,18576,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r104,r6));STACKTOP=r6;r107=r102+1|0;r102=r107}break};case 4:case 5:{r108=r91;r109=HEAPF64[r108>>3];r110=_fprintf(r2,18960,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r6>>3]=r109,r6));STACKTOP=r6;break L39;break};case 16:case 17:{r111=r91;r112=HEAP32[r111>>2];r113=(r112|0)!=0;r114=r113?17640:17224;r115=_fputs(r114,r2);break L39;break};case 2:case 3:{r116=r91;r117=HEAP32[r116>>2];r118=_fprintf(r2,19400,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r117,r6));STACKTOP=r6;break L39;break};case 8:case 9:{r119=r91;r120=HEAP32[r119>>2];r121=(r120|0)==0;if(r121){break L39}r122=_fputs(r120,r2);break L39;break};default:{_err_msg(4,45384,324,16984,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r97,r6));STACKTOP=r6;break L39}}}else{r123=r81+12|0;r124=HEAP32[r123>>2];r125=(r124|0)==0;if(r125){break}r126=_fputs(r124,r2)}}while(0);r127=_fputc(10,r2);r128=r53+1|0;r53=r128}_free(r44);r129=_fputc(10,r2);STACKTOP=r7;return}function _cmp_name(r1,r2){return _strcmp_nocase(HEAP32[HEAP32[r1>>2]>>2],HEAP32[HEAP32[r2>>2]>>2])}function _strnappend(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r5=0;r6=STACKTOP;if((r1|0)==0|(r2|0)==0){STACKTOP=r6;return}r7=HEAP32[r1>>2];r8=(r7|0)==0;do{if(r8){if(!((HEAP32[r2>>2]|0)!=0|(r3|0)==0)){break}STACKTOP=r6;return}else{if((r3|0)!=0){break}STACKTOP=r6;return}}while(0);r9=_strlen(r3);r10=(r4|0)!=0&r9>>>0>r4>>>0?r4:r9;if(r8){r11=0;r12=0}else{r11=_strlen(r7);r12=r7}r7=r11+r10+1|0;r11=HEAP32[r2>>2];if(r11>>>0<r7>>>0){r8=r7<<1;do{if((r11|0)==0){r13=___ckd_calloc__(r8,1,45384,176)}else{r9=_realloc(r12,r8);if((r9|0)!=0){r13=r9;break}_ckd_fail(45472,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r8,HEAP32[r5+8>>2]=45384,HEAP32[r5+16>>2]=178,r5));STACKTOP=r5}}while(0);HEAP32[r1>>2]=r13;HEAP32[r2>>2]=r7<<1;r14=HEAP32[r1>>2]}else{r14=r12}_strncat(r14,r3,r10);STACKTOP=r6;return}function _Balloc(r1){var r2,r3,r4,r5,r6;r2=0;r3=STACKTOP;r4=1<<r1;r5=(r4<<2)+27&-8;r6=_malloc(r5);if((r6|0)==0){_ckd_fail(45472,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r5,HEAP32[r2+8>>2]=22624,HEAP32[r2+16>>2]=498,r2));STACKTOP=r2}else{HEAP32[r6+4>>2]=r1;HEAP32[r6+8>>2]=r4;HEAP32[r6+16>>2]=0;HEAP32[r6+12>>2]=0;STACKTOP=r3;return r6}}function _pow5mult(r1,r2){var r3,r4,r5,r6,r7;r3=r2&3;if((r3|0)==0){r4=r1}else{r4=_multadd(r1,HEAP32[4536+(r3-1<<2)>>2],0)}r3=r2>>2;if((r3|0)==0){r5=r4;return r5}r2=_Balloc(1);HEAP32[r2+20>>2]=625;HEAP32[r2+16>>2]=1;r1=r2;r2=r4;r4=r3;while(1){if((r4&1|0)==0){r6=r2}else{r3=_mult(r2,r1);_free(r2);r6=r3}r3=r4>>1;if((r3|0)==0){break}r7=_mult(r1,r1);_free(r1);r1=r7;r2=r6;r4=r3}_free(r1);r5=r6;return r5}function _mult(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r3=0;r4=HEAP32[r1+16>>2];r5=HEAP32[r2+16>>2];r6=(r4|0)<(r5|0);r7=r6?r4:r5;r8=r6?r5:r4;r4=r6?r1:r2;r5=r6?r2:r1;r1=HEAP32[r5+4>>2];r2=r8+r7|0;r6=_Balloc((r2|0)>(HEAP32[r5+8>>2]|0)?r1+1|0:r1);r1=r6+20|0;r9=r6+20+(r2<<2)|0;r10=r1;while(1){if(r10>>>0>=r9>>>0){break}HEAP32[r10>>2]=0;r10=r10+4|0}r10=r5+20|0;r11=r5+20+(r8<<2)|0;r8=r4+20+(r7<<2)|0;r7=r1;r1=r4+20|0;while(1){if(r1>>>0>=r8>>>0){r12=r9;r13=r2;break}r4=r1+4|0;r5=HEAP32[r1>>2];if((r5|0)!=0){r14=r5;r5=0;r15=0;r16=0;r17=r7;r18=r10;while(1){r19=r18+4|0;r20=___muldi3(HEAP32[r18>>2],0,r14,r5);r21=_i64Add(r20,tempRet0,HEAP32[r17>>2],0);r20=_i64Add(r21,tempRet0,r16,r15);r22=tempRet0;r23=r17+4|0;HEAP32[r17>>2]=r20;if(r19>>>0<r11>>>0){r15=0;r16=r22;r17=r23;r18=r19}else{break}}HEAP32[r23>>2]=r22}r7=r7+4|0;r1=r4}while(1){if((r13|0)<=0){r3=14;break}r1=r12-4|0;if((HEAP32[r1>>2]|0)!=0){r3=14;break}r12=r1;r13=r13-1|0}if(r3==14){HEAP32[r6+16>>2]=r13;return r6}}function _lshift(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r3=r2>>5;r4=r1+16|0;r5=r3+HEAP32[r4>>2]|0;r6=r5+1|0;r7=HEAP32[r1+8>>2];r8=HEAP32[r1+4>>2];while(1){if((r5|0)<(r7|0)){break}r7=r7<<1;r8=r8+1|0}r7=_Balloc(r8);r8=0;r9=r7+20|0;while(1){if((r8|0)>=(r3|0)){break}HEAP32[r9>>2]=0;r8=r8+1|0;r9=r9+4|0}r8=r1+20|0;r3=r1+20+(HEAP32[r4>>2]<<2)|0;r4=r2&31;if((r4|0)==0){r2=r9;r10=r8;while(1){r11=r10+4|0;HEAP32[r2>>2]=HEAP32[r10>>2];if(r11>>>0<r3>>>0){r2=r2+4|0;r10=r11}else{r12=r6;break}}r13=r12-1|0;r14=r7+16|0;HEAP32[r14>>2]=r13;r15=r1;_free(r15);return r7}r10=32-r4|0;r2=0;r11=r9;r9=r8;while(1){r16=r11+4|0;HEAP32[r11>>2]=HEAP32[r9>>2]<<r4|r2;r8=r9+4|0;r17=HEAP32[r9>>2]>>>(r10>>>0);if(r8>>>0<r3>>>0){r2=r17;r11=r16;r9=r8}else{break}}HEAP32[r16>>2]=r17;r12=(r17|0)==0?r6:r5+2|0;r13=r12-1|0;r14=r7+16|0;HEAP32[r14>>2]=r13;r15=r1;_free(r15);return r7}function _cmp(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=0;r4=HEAP32[r1+16>>2];r5=HEAP32[r2+16>>2];if((r4|0)!=(r5|0)){r6=r4-r5|0;return r6}r5=r1+20|0;r7=r2+20+(r4<<2)|0;r2=r1+20+(r4<<2)|0;while(1){r4=r2-4|0;r8=HEAP32[r4>>2];r1=r7-4|0;r9=HEAP32[r1>>2];if((r8|0)!=(r9|0)){break}if(r4>>>0>r5>>>0){r7=r1;r2=r4}else{r6=0;r3=7;break}}if(r3==7){return r6}r6=r8>>>0<r9>>>0?-1:1;return r6}function _b2d(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r3=r1+20|0;r4=HEAP32[r1+16>>2];r5=r4-1|0;r6=r1+20+(r5<<2)|0;r7=HEAP32[r6>>2];r8=_hi0bits(r7);HEAP32[r2>>2]=32-r8;do{if((r8|0)<11){r2=11-r8|0;if((r5|0)>0){r9=HEAP32[r1+20+(r4-2<<2)>>2]}else{r9=0}r10=r7>>>(r2>>>0)|1072693248|0;r11=r7<<r8+21|r9>>>(r2>>>0)|0}else{if((r5|0)>0){r2=r1+20+(r4-2<<2)|0;r12=HEAP32[r2>>2];r13=r2}else{r12=0;r13=r6}r2=r8-11|0;if((r2|0)==0){r10=r7|1072693248|0;r11=r12|0;break}r14=43-r8|0;if(r13>>>0>r3>>>0){r15=HEAP32[r13-4>>2]}else{r15=0}r10=r7<<r2|r12>>>(r14>>>0)|1072693248|0;r11=r12<<r2|r15>>>(r14>>>0)|0}}while(0);return HEAP32[tempDoublePtr>>2]=r11,HEAP32[tempDoublePtr+4>>2]=r10,HEAPF64[tempDoublePtr>>3]}function _hi0bits(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r2=r1>>>0>65535;r3=r1<<16;r4=r2?r1:r3;r5=r2?0:16;if((r2?r1:r3)>>>0>16777215){r6=r5;r7=r4}else{r6=r5|8;r7=r4<<8}if(r7>>>0>268435455){r8=r6;r9=r7}else{r8=r6+4|0;r9=r7<<4}if(r9>>>0>1073741823){r10=r8;r11=r9}else{r10=r8+2|0;r11=r9<<2}do{if((r11|0)<0){r12=r10}else{if((r11&1073741824|0)==0){r13=32}else{r12=r10+1|0;break}return r13}}while(0);r13=r12;return r13}function _multadd(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r4=r1+16|0;r5=HEAP32[r4>>2];r6=r2;r7=(r2|0)<0|0?-1:0;r2=(r3|0)<0|0?-1:0;r8=r3;r3=r1+20|0;r9=0;while(1){r10=___muldi3(HEAP32[r3>>2],0,r6,r7);r11=_i64Add(r10,tempRet0,r8,r2);r12=tempRet0;r13=0;HEAP32[r3>>2]=r11;r11=r9+1|0;if((r11|0)<(r5|0)){r2=r13;r8=r12;r3=r3+4|0;r9=r11}else{break}}if((r12|0)==0&(r13|0)==0){r14=r1;return r14}if((r5|0)<(HEAP32[r1+8>>2]|0)){r15=r1}else{r13=_Balloc(HEAP32[r1+4>>2]+1|0);_memcpy(r13+12|0,r1+12|0,(HEAP32[r4>>2]<<2)+8|0)|0;_free(r1);r15=r13}HEAP32[r15+20+(r5<<2)>>2]=r12;HEAP32[r15+16>>2]=r5+1;r14=r15;return r14}function _lo0bits(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r2=HEAP32[r1>>2];if((r2&7|0)!=0){if((r2&1|0)!=0){r3=0;return r3}if((r2&2|0)==0){HEAP32[r1>>2]=r2>>>2;r3=2;return r3}else{HEAP32[r1>>2]=r2>>>1;r3=1;return r3}}r4=(r2&65535|0)==0;r5=r4?16:0;r6=r4?r2>>>16:r2;if((r6&255|0)==0){r7=r6>>>8;r8=r5|8}else{r7=r6;r8=r5}if((r7&15|0)==0){r9=r7>>>4;r10=r8+4|0}else{r9=r7;r10=r8}if((r9&3|0)==0){r11=r9>>>2;r12=r10+2|0}else{r11=r9;r12=r10}do{if((r11&1|0)==0){r10=r11>>>1;if((r10|0)==0){r3=32}else{r13=r10;r14=r12+1|0;break}return r3}else{r13=r11;r14=r12}}while(0);HEAP32[r1>>2]=r13;r3=r14;return r3}function _err_msg(r1,r2,r3,r4,r5){var r6,r7,r8,r9;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+1040|0;r8=r7+1024;r9=r8;HEAP32[r9>>2]=r5;HEAP32[r9+4>>2]=0;r9=r7|0;_vsnprintf(r9,1024,r4,r8|0);if((r2|0)==0){_err_logfp_cb(r1,6408,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r9,r6));STACKTOP=r6;STACKTOP=r7;return}r8=_strrchr(r2,47);r4=(r8|0)==0?r2:r8+1|0;if((r1|0)==1){_err_logfp_cb(1,9424,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=45296,HEAP32[r6+8>>2]=r4,HEAP32[r6+16>>2]=r3,HEAP32[r6+24>>2]=r9,r6));STACKTOP=r6;STACKTOP=r7;return}else if((r1|0)==2){_err_logfp_cb(2,11448,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r4,HEAP32[r6+8>>2]=r3,HEAP32[r6+16>>2]=r9,r6));STACKTOP=r6;STACKTOP=r7;return}else{_err_logfp_cb(r1,7704,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=HEAP32[5704+(r1<<2)>>2],HEAP32[r6+8>>2]=r4,HEAP32[r6+16>>2]=r3,HEAP32[r6+24>>2]=r9,r6));STACKTOP=r6;STACKTOP=r7;return}}function _err_logfp_cb(r1,r2,r3){var r4,r5,r6,r7;r1=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r1;if((HEAP32[67896>>2]|0)!=0){STACKTOP=r1;return}r5=HEAP32[67904>>2];do{if((r5|0)==0){r6=HEAP32[_stderr>>2];if((r6|0)!=0){r7=r6;break}STACKTOP=r1;return}else{r7=r5}}while(0);r5=r4;HEAP32[r5>>2]=r3;HEAP32[r5+4>>2]=0;_vfprintf(r7,r2,r4|0);STACKTOP=r1;return}function _genrand_int31(){var r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r1=HEAP32[4856>>2];if((r1|0)<=623){r2=r1+1|0;r3=HEAP32[65360+(r1<<2)>>2];HEAP32[4856>>2]=r2;r4=r3>>>11;r5=r3^r4;r6=r5<<7;r7=r6&-1658038656;r8=r5^r7;r9=r8<<15;r10=r9&-272236544;r11=r8^r10;r12=r11>>>18;r13=r11^r12;r14=r13>>>1;return r14}if((r1|0)==625){HEAP32[65360>>2]=5489;r1=1;r15=5489;while(1){if((r1|0)>=624){break}r16=Math_imul(r15^r15>>>30,1812433253)+r1|0;HEAP32[65360+(r1<<2)>>2]=r16;r1=r1+1|0;r15=r16}HEAP32[4856>>2]=r1;r17=0}else{r17=0}while(1){if((r17|0)>=227){r18=r17;break}r1=65360+(r17<<2)|0;r15=r17+1|0;r16=HEAP32[65360+(r15<<2)>>2];HEAP32[r1>>2]=HEAP32[65360+(r17+397<<2)>>2]^(HEAP32[r1>>2]&-2147483648|r16&2147483646)>>>1^HEAP32[4952+((r16&1)<<2)>>2];r17=r15}while(1){if((r18|0)>=623){break}r17=65360+(r18<<2)|0;r15=r18+1|0;r16=HEAP32[65360+(r15<<2)>>2];HEAP32[r17>>2]=HEAP32[65360+(r18-227<<2)>>2]^(HEAP32[r17>>2]&-2147483648|r16&2147483646)>>>1^HEAP32[4952+((r16&1)<<2)>>2];r18=r15}r18=HEAP32[65360>>2];HEAP32[67852>>2]=HEAP32[66944>>2]^(HEAP32[67852>>2]&-2147483648|r18&2147483646)>>>1^HEAP32[4952+((r18&1)<<2)>>2];HEAP32[4856>>2]=0;r2=1;r3=r18;HEAP32[4856>>2]=r2;r4=r3>>>11;r5=r3^r4;r6=r5<<7;r7=r6&-1658038656;r8=r5^r7;r9=r8<<15;r10=r9&-272236544;r11=r8^r10;r12=r11>>>18;r13=r11^r12;r14=r13>>>1;return r14}function _glist_add_ptr(r1,r2){var r3,r4,r5;r3=0;r4=STACKTOP;r5=_malloc(16);if((r5|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=16,HEAP32[r3+16>>2]=28144,HEAP32[r3+24>>2]=78,r3));STACKTOP=r3}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,16)|0}HEAP32[r5>>2]=r2;HEAP32[r5+8>>2]=r1;STACKTOP=r4;return r5}function _glist_add_int32(r1,r2){var r3,r4,r5;r3=0;r4=STACKTOP;r5=_malloc(16);if((r5|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=16,HEAP32[r3+16>>2]=28144,HEAP32[r3+24>>2]=90,r3));STACKTOP=r3}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,16)|0}HEAP32[r5>>2]=r2;HEAP32[r5+8>>2]=r1;STACKTOP=r4;return r5}function _glist_add_float32(r1,r2){var r3,r4,r5;r3=0;r4=STACKTOP;r5=_malloc(16);if((r5|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=16,HEAP32[r3+16>>2]=28144,HEAP32[r3+24>>2]=114,r3));STACKTOP=r3}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,16)|0}HEAPF64[r5>>3]=r2;HEAP32[r5+8>>2]=r1;STACKTOP=r4;return r5}function _glist_insert_ptr(r1,r2){var r3,r4,r5;r3=0;r4=STACKTOP;r5=_malloc(16);if((r5|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=16,HEAP32[r3+16>>2]=28144,HEAP32[r3+24>>2]=191,r3));STACKTOP=r3}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,16)|0}r3=r5;HEAP32[r5>>2]=r2;r2=r1+8|0;HEAP32[r5+8>>2]=HEAP32[r2>>2];HEAP32[r2>>2]=r3;STACKTOP=r4;return r3}function _hash_table_new(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10;r3=0;r4=0;r5=STACKTOP;r6=_malloc(16);if((r6|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=16,HEAP32[r4+16>>2]=27896,HEAP32[r4+24>>2]=162,r4));STACKTOP=r4}if((HEAP32[r6-4>>2]&3|0)!=0){_memset(r6,0,16)|0}r7=r6;r8=(r1>>1)+r1|0;r1=0;while(1){if((r1|0)==45){r3=10;break}if((HEAP32[4352+(r1<<2)>>2]|0)>=(r8|0)){r9=r1;r3=9;break}r1=r1+1|0}if(r3==9){if((r9|0)==45){r3=10}else{r10=r1}}if(r3==10){_err_msg(3,27896,150,7656,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r8,r4));STACKTOP=r4;r10=r1-1|0}r1=HEAP32[4352+(r10<<2)>>2];HEAP32[r6+4>>2]=r1;HEAP32[r6+12>>2]=(r2|0)==1;r2=___ckd_calloc__(r1,16,27896,165);HEAP32[r6>>2]=r2;STACKTOP=r5;return r7}function _hash_table_lookup(r1,r2,r3){var r4,r5,r6;r4=_key2hash(r1,r2);r5=_lookup(r1,r4,r2,_strlen(r2));do{if((r5|0)==0){r6=-1}else{if((r3|0)==0){r6=0;break}HEAP32[r3>>2]=HEAP32[r5+8>>2];r6=0}}while(0);return r6}function _key2hash(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11;if((HEAP32[r1+12>>2]|0)==0){r3=r2;r4=0;r5=0;while(1){r6=HEAP8[r3];if(r6<<24>>24==0){r7=r4;break}r8=r5+5|0;r3=r3+1|0;r4=r4+(r6<<24>>24<<r5)|0;r5=(r8|0)>24?r5-19|0:r8}r9=r1+4|0;r10=HEAP32[r9>>2];r11=(r7>>>0)%(r10>>>0)&-1;return r11}else{r5=r2;r2=0;r4=0;while(1){r3=HEAP8[r5];if(r3<<24>>24==0){r7=r2;break}r8=r4+5|0;r5=r5+1|0;r2=r2+((((r3&255)>96&(r3&255)<123?r3-32&255:r3)&255)<<r4)|0;r4=(r8|0)>24?r4-19|0:r8}r9=r1+4|0;r10=HEAP32[r9>>2];r11=(r7>>>0)%(r10>>>0)&-1;return r11}}function _lookup(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10;r5=0;r6=HEAP32[r1>>2]+(r2<<4)|0;if((HEAP32[r6>>2]|0)==0){r7=0;return r7}if((HEAP32[r1+12>>2]|0)==0){r1=r6;L5:while(1){if((r1|0)==0){r7=r1;r5=17;break}L8:do{if((HEAP32[r1+4>>2]|0)==(r4|0)){r2=0;r8=r3;r9=HEAP32[r1>>2];while(1){if(r2>>>0>=r4>>>0){r7=r1;r5=17;break L5}if((HEAP8[r9]|0)!=(HEAP8[r8]|0)){break L8}r2=r2+1|0;r8=r8+1|0;r9=r9+1|0}}}while(0);r1=HEAP32[r1+12>>2]}if(r5==17){return r7}}else{r1=r6;L18:while(1){if((r1|0)==0){r7=r1;r5=17;break}L21:do{if((HEAP32[r1+4>>2]|0)==(r4|0)){r6=0;r9=r3;r8=HEAP32[r1>>2];while(1){if(r6>>>0>=r4>>>0){r7=r1;r5=17;break L18}r2=HEAP8[r8];r10=HEAP8[r9];if((r2<<24>>24>96&r2<<24>>24<123?r2-32&255:r2)<<24>>24!=(r10<<24>>24>96&r10<<24>>24<123?r10-32&255:r10)<<24>>24){break L21}r6=r6+1|0;r9=r9+1|0;r8=r8+1|0}}}while(0);r1=HEAP32[r1+12>>2]}if(r5==17){return r7}}}function _hash_table_lookup_bkey(r1,r2,r3){var r4,r5,r6;r4=_makekey(r2,4);r5=_key2hash(r1,r4);_free(r4);r4=_lookup(r1,r5,r2,4);do{if((r4|0)==0){r6=-1}else{if((r3|0)==0){r6=0;break}HEAP32[r3>>2]=HEAP32[r4+8>>2];r6=0}}while(0);return r6}function _makekey(r1,r2){var r3,r4,r5,r6;r3=___ckd_calloc__(r2<<1|1,1,27896,228);r4=0;r5=0;while(1){if((r5|0)>=(r2|0)){break}r6=r1+r5|0;HEAP8[r3+r4|0]=(HEAP8[r6]&15)+65;HEAP8[r3+(r4|1)|0]=(HEAPU8[r6]>>>4)+74;r4=r4+2|0;r5=r5+1|0}HEAP8[r3+r4|0]=0;return r3}function _enter(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12;r7=0;r8=STACKTOP;r9=_lookup(r1,r2,r3,r4);if((r9|0)!=0){r10=r9+8|0;r11=HEAP32[r10>>2];if((r6|0)==0){r12=r11;STACKTOP=r8;return r12}HEAP32[r9>>2]=r3;HEAP32[r10>>2]=r5;r12=r11;STACKTOP=r8;return r12}r11=HEAP32[r1>>2];r10=r11+(r2<<4)|0;if((HEAP32[r10>>2]|0)==0){HEAP32[r10>>2]=r3;HEAP32[r11+(r2<<4)+4>>2]=r4;HEAP32[r11+(r2<<4)+8>>2]=r5;HEAP32[r11+(r2<<4)+12>>2]=0}else{r10=_malloc(16);if((r10|0)==0){_ckd_fail(29016,(r7=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r7>>2]=1,HEAP32[r7+8>>2]=16,HEAP32[r7+16>>2]=27896,HEAP32[r7+24>>2]=411,r7));STACKTOP=r7}if((HEAP32[r10-4>>2]&3|0)!=0){_memset(r10,0,16)|0}HEAP32[r10>>2]=r3;HEAP32[r10+4>>2]=r4;HEAP32[r10+8>>2]=r5;r4=r11+(r2<<4)+12|0;HEAP32[r10+12>>2]=HEAP32[r4>>2];HEAP32[r4>>2]=r10}r10=r1+8|0;HEAP32[r10>>2]=HEAP32[r10>>2]+1;r12=r5;STACKTOP=r8;return r12}function _hash_table_tolist(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=r1+4|0;r4=r1|0;r1=0;r5=0;r6=0;while(1){if((r1|0)>=(HEAP32[r3>>2]|0)){break}r7=HEAP32[r4>>2]+(r1<<4)|0;L4:do{if((HEAP32[r7>>2]|0)==0){r8=r5;r9=r6}else{r10=r7;r11=r5;r12=_glist_add_ptr(r6,r7);while(1){r13=r11+1|0;r14=HEAP32[r10+12>>2];if((r14|0)==0){r8=r13;r9=r12;break L4}r10=r14;r11=r13;r12=_glist_add_ptr(r12,r14)}}}while(0);r1=r1+1|0;r5=r8;r6=r9}if((r2|0)==0){return r6}HEAP32[r2>>2]=r5;return r6}function _hash_table_iter(r1){var r2,r3,r4;r2=0;r3=STACKTOP;r4=_malloc(12);if((r4|0)==0){_ckd_fail(29016,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=1,HEAP32[r2+8>>2]=12,HEAP32[r2+16>>2]=27896,HEAP32[r2+24>>2]=657,r2));STACKTOP=r2}if((HEAP32[r4-4>>2]&3|0)!=0){_memset(r4,0,12)|0}HEAP32[r4>>2]=r1;r1=_hash_table_iter_next(r4);STACKTOP=r3;return r1}function _hash_table_iter_next(r1){var r2,r3,r4,r5,r6,r7,r8;r2=r1+4|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=HEAP32[r3+12>>2];HEAP32[r2>>2]=r4;if((r4|0)==0){break}else{r5=r1}return r5}}while(0);r3=r1+8|0;r4=HEAP32[r1>>2];r6=HEAP32[r3>>2];while(1){r7=HEAP32[r4+4>>2];if(r6>>>0>=r7>>>0){break}if((HEAP32[HEAP32[r4>>2]+(r6<<4)>>2]|0)!=0){break}r8=r6+1|0;HEAP32[r3>>2]=r8;r6=r8}if((r6|0)==(r7|0)){_free(r1);r5=0;return r5}else{HEAP32[r2>>2]=HEAP32[r4>>2]+(r6<<4);HEAP32[r3>>2]=r6+1;r5=r1;return r5}}function _hash_table_free(r1){var r2,r3,r4,r5,r6,r7;if((r1|0)==0){return}r2=r1+4|0;r3=r1|0;r4=0;while(1){r5=HEAP32[r3>>2];if((r4|0)>=(HEAP32[r2>>2]|0)){break}r6=HEAP32[r5+(r4<<4)+12>>2];while(1){if((r6|0)==0){break}r7=HEAP32[r6+12>>2];_free(r6);r6=r7}r4=r4+1|0}_free(r5);_free(r1);return}function _listelem_alloc_init(r1){var r2,r3,r4,r5,r6,r7;r2=0;r3=STACKTOP;if((r1&3|0)==0){r4=r1}else{r5=r1+3&-4;_err_msg(3,27040,96,44992,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r1,HEAP32[r2+8>>2]=r5,r2));STACKTOP=r2;r4=r5}r5=_malloc(32);if((r5|0)==0){_ckd_fail(29016,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=1,HEAP32[r2+8>>2]=32,HEAP32[r2+16>>2]=27040,HEAP32[r2+24>>2]=99,r2));STACKTOP=r2}if((HEAP32[r5-4>>2]&3|0)!=0){_memset(r5,0,32)|0}r1=r5;HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=0;HEAP32[r5+12>>2]=r4;r6=262144/((r4*50&-1)>>>0)&-1;HEAP32[r5+16>>2]=r6;if((r6|0)==0){_err_msg(4,27040,108,32464,(r2=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r2>>2]=0,r2));STACKTOP=r2;_free(r5);r7=0;STACKTOP=r3;return r7}else{HEAP32[r5+24>>2]=0;HEAP32[r5+28>>2]=0;_listelem_add_block(r1,27040,116);r7=r1;STACKTOP=r3;return r7}}function _listelem_add_block(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=r1+8|0;r5=HEAP32[r4>>2];if((r5|0)==0){r6=50}else{r6=HEAP32[r5>>2]}r5=r1+16|0;if((HEAP32[r5>>2]|0)==0){r7=r6<<1;r8=HEAP32[r1+12>>2];if((Math_imul(r7,r8)|0)>>>0>262144){r9=262144/(r8>>>0)&-1}else{r9=r7}r7=262144/((Math_imul(r9,r8)|0)>>>0)&-1;HEAP32[r5>>2]=r7;r10=r9;r11=r8}else{r10=r6;r11=HEAP32[r1+12>>2]}r6=r1+12|0;r8=___ckd_calloc__(r10,r11,r2,r3);r3=r8;HEAP32[r1>>2]=r3;r2=r1+4|0;r11=_glist_add_ptr(HEAP32[r2>>2],r8);HEAP32[r2>>2]=r11;r11=_glist_add_int32(HEAP32[r4>>2],r10);HEAP32[r4>>2]=r11;r11=r10;r10=r3;r3=r8;while(1){r8=r11-1|0;if((r8|0)==0){break}r4=r3+HEAP32[r6>>2]|0;HEAP32[r10>>2]=r4;r11=r8;r10=r4;r3=r4}HEAP32[r10>>2]=0;HEAP32[r5>>2]=HEAP32[r5>>2]-1;r5=r1+20|0;HEAP32[r5>>2]=HEAP32[r5>>2]+1;return}function _listelem_alloc_free(r1){var r2,r3,r4;if((r1|0)==0){return}r2=r1+4|0;r3=r2;while(1){r4=HEAP32[r3>>2];if((r4|0)==0){break}_free(HEAP32[r4>>2]);r3=r4+8|0}r3=HEAP32[r2>>2];while(1){if((r3|0)==0){break}r2=HEAP32[r3+8>>2];_free(r3);r3=r2}r3=HEAP32[r1+8>>2];while(1){if((r3|0)==0){break}r2=HEAP32[r3+8>>2];_free(r3);r3=r2}_free(r1);return}function _logmath_init(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r4=0;r5=0;r6=STACKTOP;if(r1<=1){_err_msg(4,26856,71,44960,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r7=0;STACKTOP=r6;return r7}r8=_malloc(72);if((r8|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=72,HEAP32[r5+16>>2]=26856,HEAP32[r5+24>>2]=76,r5));STACKTOP=r5}if((HEAP32[r8-4>>2]&3|0)!=0){_memset(r8,0,72)|0}r5=r8;HEAP32[r8+12>>2]=1;HEAPF64[r8+24>>3]=r1;r9=Math_log(r1);r10=r8+32|0;HEAPF64[r10>>3]=r9;r11=_log10(r1);HEAPF64[r8+40>>3]=r11;r12=1/HEAPF64[r10>>3];r10=r8+48|0;HEAPF64[r10>>3]=r12;HEAPF64[r8+56>>3]=1/r11;HEAP8[r8+9|0]=r2;HEAP32[r8+64>>2]=-2147483648>>r2+2;if((r3|0)==0){r7=r5;STACKTOP=r6;return r7}r3=.6931471805599453/r9+.5;r9=(r3>=0?Math_floor(r3):Math_ceil(r3))>>>(r2>>>0);if(r9>>>0<256){r13=1}else{r13=r9>>>0<65536?2:4}HEAP8[r8+8|0]=r13;r9=(1<<r2|0)*.5;r3=0;r11=1;while(1){if(((Math_log(r11+1)*r12+r9&-1)>>r2|0)<1){break}r3=r3+1|0;r11=r11/r1}r11=r3>>>(r2>>>0);r3=(r11>>>0<255?255:r11)+1|0;r11=___ckd_calloc__(r3,r13,26856,118);r12=r8;HEAP32[r12>>2]=r11;HEAP32[r8+4>>2]=r3;r3=0;r8=1;while(1){r11=Math_log(r8+1);r14=(r11*HEAPF64[r10>>3]+r9&-1)>>r2;if((r13|0)==2){r15=HEAPU16[HEAP32[r12>>2]+(r3>>>(r2>>>0)<<1)>>1];r4=18}else if((r13|0)==4){r15=HEAP32[HEAP32[r12>>2]+(r3>>>(r2>>>0)<<2)>>2];r4=18}else if((r13|0)==1){r15=HEAPU8[HEAP32[r12>>2]+(r3>>>(r2>>>0))|0];r4=18}do{if(r4==18){r4=0;if((r15|0)!=0){break}if((r13|0)==2){HEAP16[HEAP32[r12>>2]+(r3>>>(r2>>>0)<<1)>>1]=r14;break}else if((r13|0)==4){HEAP32[HEAP32[r12>>2]+(r3>>>(r2>>>0)<<2)>>2]=r14;break}else if((r13|0)==1){HEAP8[HEAP32[r12>>2]+(r3>>>(r2>>>0))|0]=r14;break}else{break}}}while(0);if((r14|0)<1){r7=r5;break}r3=r3+1|0;r8=r8/r1}STACKTOP=r6;return r7}function _logmath_add(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r4=HEAP32[r1+64>>2];if((r4|0)>=(r2|0)){r5=r3;return r5}if((r4|0)>=(r3|0)){r5=r2;return r5}r6=HEAP32[r1>>2];if((r6|0)==0){r7=HEAPF64[r1+24>>3];r8=HEAP8[r1+9|0]|0;r9=Math_pow(r7,r2<<r8|0)+Math_pow(r7,r3<<r8|0);if(r9<=0){r5=r4;return r5}r4=Math_log(r9);r5=(r4*HEAPF64[r1+48>>3]&-1)>>r8;return r5}r8=(r2|0)>(r3|0);r4=r8?r2-r3|0:r3-r2|0;r9=r8?r2:r3;if((r4|0)<0){r5=r9;return r5}if(r4>>>0>=HEAP32[r1+4>>2]>>>0){r5=r9;return r5}r3=HEAPU8[r1+8|0];if((r3|0)==1){r5=r9+HEAPU8[r6+r4|0]|0;return r5}else if((r3|0)==2){r5=r9+HEAPU16[r6+(r4<<1)>>1]|0;return r5}else if((r3|0)==4){r5=r9+HEAP32[r6+(r4<<2)>>2]|0;return r5}else{r5=r9;return r5}}function _mmio_file_read(r1){var r2,r3,r4,r5,r6,r7,r8,r9;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+80|0;r4=r3;r5=_open(r1,0,(r2=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r2>>2]=0,r2));STACKTOP=r2;if((r5|0)==-1){r6=___errno_location();r7=HEAP32[r6>>2];r6=_malloc(23);_memcpy(r6,26208,18)|0;r8=r6+_strlen(r6)|0;HEAP8[r8]=HEAP8[6400];HEAP8[r8+1|0]=HEAP8[6401];HEAP8[r8+2|0]=HEAP8[6402];HEAP8[r8+3|0]=HEAP8[6403];HEAP8[r8+4|0]=HEAP8[6404];HEAP8[r8+5|0]=HEAP8[6405];r8=_strerror(r7);_err_msg(4,32232,216,r6,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r1,HEAP32[r2+8>>2]=r8,r2));STACKTOP=r2;_free(r6);r9=0;STACKTOP=r3;return r9}if((_fstat(r5,r4)|0)==-1){r6=___errno_location();r8=HEAP32[r6>>2];r6=_malloc(23);_memcpy(r6,22448,18)|0;r7=r6+_strlen(r6)|0;HEAP8[r7]=HEAP8[6400];HEAP8[r7+1|0]=HEAP8[6401];HEAP8[r7+2|0]=HEAP8[6402];HEAP8[r7+3|0]=HEAP8[6403];HEAP8[r7+4|0]=HEAP8[6404];HEAP8[r7+5|0]=HEAP8[6405];r7=_strerror(r8);_err_msg(4,32232,220,r6,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r1,HEAP32[r2+8>>2]=r7,r2));STACKTOP=r2;_free(r6);_close(r5);r9=0;STACKTOP=r3;return r9}r6=HEAP32[r4+36>>2];r4=_mmap(0,r6,1,1,r5,0);if((r4|0)==-1){r7=___errno_location();r1=HEAP32[r7>>2];r7=_malloc(31);_memcpy(r7,17368,26)|0;r8=r7+_strlen(r7)|0;HEAP8[r8]=HEAP8[6400];HEAP8[r8+1|0]=HEAP8[6401];HEAP8[r8+2|0]=HEAP8[6402];HEAP8[r8+3|0]=HEAP8[6403];HEAP8[r8+4|0]=HEAP8[6404];HEAP8[r8+5|0]=HEAP8[6405];r8=_strerror(r1);_err_msg(4,32232,226,r7,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r6,HEAP32[r2+8>>2]=(r6|0)<0|0?-1:0,HEAP32[r2+16>>2]=r8,r2));STACKTOP=r2;_free(r7);_close(r5);r9=0;STACKTOP=r3;return r9}_close(r5);r5=_malloc(8);if((r5|0)==0){_ckd_fail(29016,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=1,HEAP32[r2+8>>2]=8,HEAP32[r2+16>>2]=32232,HEAP32[r2+24>>2]=231,r2));STACKTOP=r2}if((HEAP32[r5-4>>2]&3|0)!=0){r2=r5;r7=r2|0;tempBigInt=0;HEAP8[r7]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+3|0]=tempBigInt;r7=r2+4|0;tempBigInt=0;HEAP8[r7]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r7+3|0]=tempBigInt}HEAP32[r5>>2]=r4;r4=_getpagesize();r7=r6+r4-1|0;HEAP32[r5+4>>2]=r7-((r7>>>0)%(r4>>>0)&-1);r9=r5;STACKTOP=r3;return r9}function _mmio_file_unmap(r1){var r2,r3,r4,r5,r6,r7,r8;r2=0;r3=STACKTOP;if((r1|0)==0){STACKTOP=r3;return}r4=r1|0;r5=r1+4|0;if((_munmap(HEAP32[r4>>2],HEAP32[r5>>2])|0)<0){r6=___errno_location();r7=HEAP32[r6>>2];r6=_malloc(37);_memcpy(r6,14408,32)|0;r8=r6+_strlen(r6)|0;HEAP8[r8]=HEAP8[6400];HEAP8[r8+1|0]=HEAP8[6401];HEAP8[r8+2|0]=HEAP8[6402];HEAP8[r8+3|0]=HEAP8[6403];HEAP8[r8+4|0]=HEAP8[6404];HEAP8[r8+5|0]=HEAP8[6405];r8=HEAP32[r5>>2];r5=HEAP32[r4>>2];r4=_strerror(r7);_err_msg(4,32232,246,r6,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r8,HEAP32[r2+8>>2]=r5,HEAP32[r2+16>>2]=r4,r2));STACKTOP=r2;_free(r6)}_free(r1);STACKTOP=r3;return}function _fopen_comp(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42;r4=0;r5=0;r6=STACKTOP;r7=_strlen(r1);HEAP32[r3>>2]=0;L1:do{if((r7|0)>2){r8=r1+(r7-2)|0;r9=(HEAP8[r8]|0)==46;do{if(r9){r10=r8;r11=34680;while(1){r12=r10+1|0;r13=r11+1|0;r14=HEAP8[r12];r15=HEAP8[r13];if(r14<<24>>24!=r15<<24>>24|r14<<24>>24==0|r15<<24>>24==0){break}else{r10=r12;r11=r13}}if(r14<<24>>24!=r15<<24>>24){if(r9){r16=r8;r17=29384}else{r4=9;break}while(1){r11=r16+1|0;r10=r17+1|0;r18=HEAP8[r11];r19=HEAP8[r10];if(r18<<24>>24!=r19<<24>>24|r18<<24>>24==0|r19<<24>>24==0){break}else{r16=r11;r17=r10}}if(r18<<24>>24!=r19<<24>>24){r4=9;break}}HEAP32[r3>>2]=1;r20=1}else{r4=9}}while(0);L13:do{if(r4==9){if((r7|0)<=3){break L1}r8=r1+(r7-3)|0;r9=(HEAP8[r8]|0)==46;do{if(r9){r10=r8;r11=37904;while(1){r13=r10+1|0;r12=r11+1|0;r21=HEAP8[r13];r22=HEAP8[r12];if(r21<<24>>24!=r22<<24>>24|r21<<24>>24==0|r22<<24>>24==0){break}else{r10=r13;r11=r12}}if(r21<<24>>24!=r22<<24>>24){if(r9){r23=r8;r24=28504}else{break}while(1){r11=r23+1|0;r10=r24+1|0;r25=HEAP8[r11];r26=HEAP8[r10];if(r25<<24>>24!=r26<<24>>24|r25<<24>>24==0|r26<<24>>24==0){break}else{r23=r11;r24=r10}}if(r25<<24>>24!=r26<<24>>24){break}}HEAP32[r3>>2]=1;r20=2;break L13}}while(0);if((r7|0)<=4){break L1}r8=r1+(r7-4)|0;r9=(HEAP8[r8]|0)==46;if(r9){r27=r8;r28=35400}else{break L1}while(1){r10=r27+1|0;r11=r28+1|0;r29=HEAP8[r10];r30=HEAP8[r11];if(r29<<24>>24!=r30<<24>>24|r29<<24>>24==0|r30<<24>>24==0){break}else{r27=r10;r28=r11}}if(r29<<24>>24!=r30<<24>>24){if(r9){r31=r8;r32=27568}else{break L1}while(1){r11=r31+1|0;r10=r32+1|0;r33=HEAP8[r11];r34=HEAP8[r10];if(r33<<24>>24!=r34<<24>>24|r33<<24>>24==0|r34<<24>>24==0){break}else{r31=r11;r32=r10}}if(r33<<24>>24!=r34<<24>>24){break L1}}HEAP32[r3>>2]=1;r20=3}}while(0);r8=HEAP8[r2];do{if(r8<<24>>24==114){r9=r2;r10=26184;while(1){r11=r9+1|0;r12=r10+1|0;r35=HEAP8[r11];r36=HEAP8[r12];if(r35<<24>>24!=r36<<24>>24|r35<<24>>24==0|r36<<24>>24==0){break}else{r9=r11;r10=r12}}if(r35<<24>>24!=r36<<24>>24){r37=r20;break}if((r20|0)==3){r10=_string_join(14400,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=32224,HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r38=r10}else if((r20|0)==2){r10=_string_join(44904,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=32224,HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r38=r10}else if((r20|0)==1){r10=_string_join(22440,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=17360,HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r38=r10}else{_err_msg(5,11368,128,9368,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r20,r5));STACKTOP=r5;_exit(1)}r10=_popen(r38,r2);if((r10|0)==0){r9=___errno_location();r12=HEAP32[r9>>2];r9=_malloc(56);_memcpy(r9,7600,51)|0;r11=r9+_strlen(r9)|0;HEAP8[r11]=HEAP8[6400];HEAP8[r11+1|0]=HEAP8[6401];HEAP8[r11+2|0]=HEAP8[6402];HEAP8[r11+3|0]=HEAP8[6403];HEAP8[r11+4|0]=HEAP8[6404];HEAP8[r11+5|0]=HEAP8[6405];r11=_strerror(r12);_err_msg(4,11368,131,r9,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r38,HEAP32[r5+8>>2]=r2,HEAP32[r5+16>>2]=r11,r5));STACKTOP=r5;_free(r9);_free(r38);r39=0;STACKTOP=r6;return r39}else{_free(r38);r39=r10;STACKTOP=r6;return r39}}else{r37=r20}}while(0);do{if(r8<<24>>24==119){r10=r2;r9=48904;while(1){r11=r10+1|0;r12=r9+1|0;r40=HEAP8[r11];r41=HEAP8[r12];if(r40<<24>>24!=r41<<24>>24|r40<<24>>24==0|r41<<24>>24==0){break}else{r10=r11;r9=r12}}if(r40<<24>>24!=r41<<24>>24){break}if((r37|0)==1){r9=_string_join(44176,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=42704,HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r42=r9}else if((r37|0)==3){r9=_string_join(41680,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=45952,HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r42=r9}else if((r37|0)==2){r9=_string_join(47496,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=45952,HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=0,r5));STACKTOP=r5;r42=r9}else{_err_msg(5,11368,151,40344,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r37,r5));STACKTOP=r5;_exit(1)}r9=_popen(r42,r2);if((r9|0)==0){r10=___errno_location();r12=HEAP32[r10>>2];r10=_malloc(56);_memcpy(r10,7600,51)|0;r11=r10+_strlen(r10)|0;HEAP8[r11]=HEAP8[6400];HEAP8[r11+1|0]=HEAP8[6401];HEAP8[r11+2|0]=HEAP8[6402];HEAP8[r11+3|0]=HEAP8[6403];HEAP8[r11+4|0]=HEAP8[6404];HEAP8[r11+5|0]=HEAP8[6405];r11=_strerror(r12);_err_msg(4,11368,154,r10,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r42,HEAP32[r5+8>>2]=r2,HEAP32[r5+16>>2]=r11,r5));STACKTOP=r5;_free(r10);_free(r42);r39=0;STACKTOP=r6;return r39}else{_free(r42);r39=r9;STACKTOP=r6;return r39}}}while(0);_err_msg(4,11368,161,38888,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r2,r5));STACKTOP=r5;r39=0;STACKTOP=r6;return r39}}while(0);r39=_fopen(r1,r2);STACKTOP=r6;return r39}function _lineiter_start(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r2=0;r3=STACKTOP;r4=_malloc(24);if((r4|0)==0){_ckd_fail(29016,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=1,HEAP32[r2+8>>2]=24,HEAP32[r2+16>>2]=11368,HEAP32[r2+24>>2]=259,r2));STACKTOP=r2}if((HEAP32[r4-4>>2]&3|0)!=0){_memset(r4,0,24)|0}r5=_malloc(128);if((r5|0)==0){_ckd_fail(45472,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=128,HEAP32[r2+8>>2]=11368,HEAP32[r2+16>>2]=260,r2));STACKTOP=r2}HEAP32[r4>>2]=r5;HEAP8[r5]=0;HEAP32[r4+4>>2]=128;HEAP32[r4+8>>2]=0;HEAP32[r4+12>>2]=r1;r1=_lineiter_next(r4);if((r1|0)==0){STACKTOP=r3;return r1}r4=HEAP32[r1>>2];r5=HEAP8[r4];L13:do{if(r5<<24>>24==0){r6=33056;r7=0}else{r2=r4;r8=33056;r9=3;r10=r5;while(1){r11=r9-1|0;r12=HEAP8[r8];if(!((r11|0)!=0&r12<<24>>24!=0&r10<<24>>24==r12<<24>>24)){r6=r8;r7=r10;break L13}r12=r2+1|0;r13=r8+1|0;r14=HEAP8[r12];if(r14<<24>>24==0){r6=r13;r7=0;break}else{r2=r12;r8=r13;r9=r11;r10=r14}}}}while(0);if(r7<<24>>24!=(HEAP8[r6]|0)){STACKTOP=r3;return r1}_memmove(r4,r4+3|0,_strlen(r4+1|0),1,0);r4=r1+8|0;HEAP32[r4>>2]=HEAP32[r4>>2]-3;STACKTOP=r3;return r1}function _lineiter_next(r1){var r2,r3,r4,r5,r6,r7,r8;r2=0;r3=(HEAP32[r1+16>>2]|0)==0;r4=_lineiter_next_plain(r1);if(r3){r5=r4;return r5}else{r6=r4}while(1){if((r6|0)==0){r5=r6;r2=7;break}r7=r6|0;r8=HEAP32[r7>>2];if((r8|0)!=0){if((HEAP8[r8]|0)!=35){break}}r6=_lineiter_next_plain(r6)}if(r2==7){return r5}r2=_string_trim(r8);HEAP32[r7>>2]=r2;r5=r6;return r5}function _lineiter_next_plain(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r2=0;r3=0;r4=STACKTOP;r5=r1+20|0;HEAP32[r5>>2]=HEAP32[r5>>2]+1;r5=r1|0;r6=r1+4|0;r7=r1+12|0;if((_fgets(HEAP32[r5>>2],HEAP32[r6>>2],HEAP32[r7>>2])|0)==0){_free(HEAP32[r5>>2]);_free(r1);r8=0;STACKTOP=r4;return r8}r9=HEAP32[r5>>2];r10=_strlen(r9);r11=r1+8|0;HEAP32[r11>>2]=r10;r12=HEAP32[r6>>2];if(r10>>>0<(r12-1|0)>>>0){r8=r1;STACKTOP=r4;return r8}if((HEAP8[r9+(r10-1)|0]|0)==10){r8=r1;STACKTOP=r4;return r8}else{r13=r12;r14=r9}while(1){r15=r13<<1;HEAP32[r6>>2]=r15;r9=_realloc(r14,r15);if((r9|0)==0){r2=6;break}HEAP32[r5>>2]=r9;r12=HEAP32[r11>>2];r10=(_fgets(r9+r12|0,HEAP32[r6>>2]-r12|0,HEAP32[r7>>2])|0)==0;r12=HEAP32[r5>>2];r9=HEAP32[r11>>2];r16=r9+_strlen(r12+r9|0)|0;HEAP32[r11>>2]=r16;if(r10){r8=r1;r2=10;break}r10=HEAP32[r6>>2];if(r16>>>0<(r10-1|0)>>>0){r8=r1;r2=10;break}if((HEAP8[r12+(r16-1)|0]|0)==10){r8=r1;r2=10;break}else{r13=r10;r14=r12}}if(r2==6){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r15,HEAP32[r3+8>>2]=11368,HEAP32[r3+16>>2]=320,r3));STACKTOP=r3}else if(r2==10){STACKTOP=r4;return r8}}function _atof_c(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200,r201,r202,r203,r204,r205,r206,r207,r208,r209,r210,r211,r212,r213,r214,r215,r216,r217,r218,r219,r220,r221,r222,r223,r224,r225,r226,r227,r228,r229,r230,r231,r232,r233,r234,r235,r236,r237,r238,r239,r240,r241,r242,r243,r244,r245,r246,r247,r248,r249,r250,r251,r252,r253,r254,r255,r256,r257,r258,r259,r260,r261,r262,r263,r264,r265,r266,r267,r268,r269,r270,r271,r272,r273,r274,r275,r276,r277,r278,r279,r280,r281,r282,r283,r284,r285,r286,r287,r288,r289,r290,r291,r292,r293,r294,r295,r296,r297,r298,r299,r300,r301,r302,r303,r304,r305,r306,r307,r308,r309,r310,r311,r312,r313,r314,r315,r316,r317,r318,r319,r320,r321,r322,r323,r324,r325,r326,r327,r328,r329,r330,r331,r332,r333,r334,r335,r336,r337,r338,r339,r340,r341,r342,r343,r344,r345,r346,r347,r348,r349,r350,r351,r352,r353,r354,r355,r356,r357,r358,r359,r360,r361,r362,r363,r364,r365,r366,r367,r368,r369,r370,r371,r372,r373,r374,r375,r376,r377,r378,r379,r380,r381,r382,r383,r384,r385,r386,r387,r388,r389,r390,r391,r392,r393,r394,r395,r396,r397,r398,r399,r400,r401,r402,r403,r404,r405,r406,r407,r408,r409,r410,r411,r412,r413,r414,r415,r416,r417,r418,r419,r420,r421,r422,r423,r424,r425,r426,r427,r428,r429,r430,r431,r432,r433,r434,r435,r436,r437,r438,r439,r440,r441,r442,r443,r444,r445,r446,r447,r448,r449,r450,r451,r452,r453,r454,r455,r456,r457,r458,r459,r460,r461,r462,r463,r464,r465,r466,r467,r468,r469,r470,r471,r472,r473,r474,r475,r476,r477,r478,r479,r480,r481,r482,r483,r484,r485,r486,r487,r488,r489,r490,r491,r492,r493,r494,r495,r496,r497,r498,r499,r500,r501,r502,r503,r504,r505,r506,r507,r508,r509,r510,r511,r512,r513,r514,r515,r516,r517,r518,r519,r520,r521,r522,r523,r524,r525,r526,r527,r528,r529,r530,r531,r532,r533,r534,r535,r536,r537,r538,r539,r540,r541,r542,r543,r544,r545,r546,r547,r548,r549,r550,r551,r552,r553,r554,r555,r556,r557,r558,r559,r560,r561,r562,r563,r564,r565,r566,r567,r568,r569,r570,r571,r572,r573,r574,r575,r576,r577,r578,r579,r580,r581,r582,r583,r584,r585,r586,r587,r588,r589,r590,r591,r592,r593,r594,r595,r596,r597,r598,r599,r600,r601,r602,r603,r604,r605,r606,r607,r608,r609,r610,r611,r612,r613,r614,r615,r616,r617,r618,r619,r620,r621,r622,r623,r624,r625,r626,r627,r628,r629,r630,r631,r632,r633,r634,r635,r636,r637,r638,r639,r640,r641,r642,r643,r644,r645,r646,r647,r648,r649,r650,r651,r652,r653,r654,r655,r656,r657,r658,r659,r660,r661,r662,r663,r664,r665,r666,r667,r668,r669,r670,r671,r672,r673,r674,r675,r676,r677,r678,r679,r680,r681,r682,r683,r684,r685,r686,r687,r688,r689,r690,r691,r692,r693,r694,r695,r696,r697,r698,r699,r700,r701,r702,r703,r704,r705,r706,r707,r708,r709,r710,r711,r712,r713,r714,r715,r716,r717,r718,r719,r720,r721,r722,r723,r724,r725,r726,r727,r728,r729,r730,r731,r732,r733,r734,r735,r736,r737,r738,r739,r740,r741,r742,r743,r744,r745,r746,r747,r748,r749,r750,r751,r752,r753,r754,r755,r756,r757,r758,r759,r760,r761,r762,r763,r764,r765,r766,r767,r768,r769,r770,r771,r772,r773,r774,r775,r776,r777,r778,r779,r780,r781,r782,r783,r784,r785,r786,r787,r788,r789,r790,r791,r792,r793,r794,r795,r796,r797,r798,r799,r800,r801,r802,r803,r804,r805,r806,r807,r808,r809,r810,r811,r812,r813,r814,r815,r816,r817,r818,r819,r820,r821,r822,r823,r824,r825,r826,r827,r828,r829,r830,r831,r832,r833,r834,r835,r836,r837,r838,r839,r840,r841,r842,r843,r844,r845,r846,r847,r848,r849,r850,r851,r852,r853,r854,r855,r856,r857,r858,r859,r860,r861,r862,r863,r864,r865,r866,r867,r868,r869,r870,r871,r872,r873,r874,r875,r876,r877,r878,r879,r880,r881,r882,r883,r884,r885,r886,r887,r888,r889,r890,r891,r892,r893,r894,r895,r896,r897,r898,r899,r900,r901,r902,r903,r904,r905,r906,r907,r908,r909,r910,r911,r912,r913,r914,r915,r916,r917,r918,r919,r920,r921,r922,r923,r924,r925,r926,r927,r928,r929,r930,r931,r932,r933,r934,r935,r936,r937,r938,r939,r940,r941,r942,r943,r944,r945,r946,r947,r948,r949,r950,r951,r952,r953,r954,r955,r956,r957,r958,r959,r960,r961,r962,r963,r964,r965,r966,r967,r968,r969,r970,r971,r972,r973,r974,r975,r976,r977,r978,r979,r980,r981,r982,r983,r984,r985,r986,r987,r988,r989,r990,r991,r992,r993,r994,r995,r996,r997,r998,r999,r1000,r1001,r1002,r1003,r1004,r1005,r1006,r1007,r1008,r1009,r1010,r1011,r1012,r1013,r1014,r1015,r1016,r1017,r1018,r1019,r1020,r1021,r1022,r1023,r1024,r1025,r1026,r1027,r1028,r1029,r1030,r1031,r1032,r1033,r1034,r1035,r1036,r1037,r1038,r1039,r1040,r1041,r1042,r1043,r1044,r1045,r1046,r1047,r1048,r1049,r1050,r1051,r1052,r1053,r1054,r1055,r1056,r1057,r1058,r1059,r1060,r1061,r1062,r1063,r1064,r1065,r1066,r1067,r1068,r1069,r1070,r1071,r1072,r1073,r1074,r1075,r1076,r1077,r1078,r1079,r1080,r1081,r1082,r1083,r1084,r1085,r1086,r1087,r1088,r1089,r1090,r1091,r1092,r1093;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+32|0;r4=r3;r5=r3+8;r6=r3+16;r7=r3+24;r8=r1;L1:while(1){r9=HEAP8[r8];r10=r9<<24>>24;switch(r10|0){case 0:{r11=0;r2=230;break L1;break};case 43:{r2=3;break L1;break};case 45:{r12=1;r2=4;break L1;break};case 9:case 10:case 11:case 12:case 13:case 32:{break};default:{r13=0;r14=r8;r15=r9;break L1}}r16=r8+1|0;r8=r16}if(r2==3){r12=0;r2=4}else if(r2==230){STACKTOP=r3;return r11}do{if(r2==4){r17=r8+1|0;r18=HEAP8[r17];r19=r18<<24>>24==0;if(r19){r11=0}else{r13=r12;r14=r17;r15=r18;break}STACKTOP=r3;return r11}}while(0);r20=r15<<24>>24==48;if(r20){r21=r14;while(1){r22=r21+1|0;r23=HEAP8[r22];if(r23<<24>>24==0){r24=0;break}else if(r23<<24>>24==48){r21=r22}else{r25=1;r26=r22;r27=r23;r2=8;break}}}else{r25=0;r26=r14;r27=r15;r2=8}L14:do{if(r2==8){r28=0;r29=0;r30=0;r31=r26;r32=r27;while(1){r33=r32<<24>>24;r34=r32<<24>>24>47;if(!r34){r2=16;break}r35=r32<<24>>24<58;if(!r35){r36=r28;r37=r29;r38=r26;r39=0;r40=0;r41=r30;r42=r33;r43=r31;r2=36;break}r44=(r30|0)<9;do{if(r44){r45=r29*10&-1;r46=r45+r33|0;r47=r46-48|0;r48=r28;r49=r47}else{r50=(r30|0)<16;if(!r50){r48=r28;r49=r29;break}r51=r28*10&-1;r52=r51+r33|0;r53=r52-48|0;r48=r53;r49=r29}}while(0);r54=r30+1|0;r55=r31+1|0;r56=HEAP8[r55];r28=r48;r29=r49;r30=r54;r31=r55;r32=r56}do{if(r2==16){r57=r32<<24>>24==46;if(!r57){r36=r28;r37=r29;r38=r26;r39=0;r40=0;r41=r30;r42=r33;r43=r31;r2=36;break}r58=r31+1|0;r59=HEAP8[r58];r60=r59<<24>>24;r61=(r30|0)==0;if(r61){r62=0;r63=r60;r64=r58;while(1){r65=(r63|0)==48;if(!r65){break}r66=r62+1|0;r67=r64+1|0;r68=HEAP8[r67];r69=r68<<24>>24;r62=r66;r63=r69;r64=r67}r70=(r63|0)>48;if(!r70){r71=r64;r72=r63;r73=r62;break}r74=(r63|0)<58;if(r74){r75=r28;r76=r29;r77=r64;r78=0;r79=r62;r80=0;r81=r63;r82=r64}else{r36=r28;r37=r29;r38=r26;r39=r62;r40=0;r41=0;r42=r63;r43=r64;r2=36;break}}else{r83=r28;r84=r29;r85=r26;r86=0;r87=0;r88=r30;r89=r60;r90=r58;r2=22}while(1){if(r2==22){r2=0;r91=(r89|0)>47;r92=(r89|0)<58;r93=r91&r92;if(r93){r75=r83;r76=r84;r77=r85;r78=r86;r79=r87;r80=r88;r81=r89;r82=r90}else{r36=r83;r37=r84;r38=r85;r39=r86;r40=r87;r41=r88;r42=r89;r43=r90;r2=36;break}}r94=r78+1|0;r95=r81-48|0;r96=(r95|0)==0;do{if(r96){r97=r75;r98=r76;r99=r94;r100=r79;r101=r80}else{r102=r79+r94|0;r103=1;r104=r75;r105=r76;r106=r80;while(1){r107=(r103|0)<(r94|0);r108=r106+1|0;r109=(r106|0)<9;if(!r107){break}do{if(r109){r110=r105*10&-1;r111=r104;r112=r110}else{r113=(r108|0)<17;if(!r113){r111=r104;r112=r105;break}r114=r104*10&-1;r111=r114;r112=r105}}while(0);r115=r103+1|0;r103=r115;r104=r111;r105=r112;r106=r108}if(r109){r116=r105*10&-1;r117=r116+r95|0;r97=r104;r98=r117;r99=0;r100=r102;r101=r108;break}r118=(r108|0)<17;if(!r118){r97=r104;r98=r105;r99=0;r100=r102;r101=r108;break}r119=r104*10&-1;r120=r119+r95|0;r97=r120;r98=r105;r99=0;r100=r102;r101=r108}}while(0);r121=r82+1|0;r122=HEAP8[r121];r123=r122<<24>>24;r83=r97;r84=r98;r85=r77;r86=r99;r87=r100;r88=r101;r89=r123;r90=r121;r2=22}}}while(0);do{if(r2==36){r124=(r42|0)==101;if(r124){r125=r36;r126=r37;r127=r38;r128=r39;r129=r40;r130=r41;r131=r43;r2=38}else{r132=r36;r133=r37;r134=r38;r135=r39;r136=r40;r137=r41;r138=r42;r139=r43;r140=(r138|0)==69;if(r140){r125=r132;r126=r133;r127=r134;r128=r135;r129=r136;r130=r137;r131=r139;r2=38}else{r141=r132;r142=r133;r143=r134;r144=r135;r145=r136;r146=r137;r147=0;r148=r138;r149=r139}}do{if(r2==38){r150=(r130|0)==0;r151=(r128|0)==0;r152=r150&r151;r153=(r25|0)==0;r154=r152&r153;if(r154){r11=0;STACKTOP=r3;return r11}r155=r131+1|0;r156=HEAP8[r155];r157=r156<<24>>24;if((r157|0)==43){r158=0;r2=41}else if((r157|0)==45){r158=1;r2=41}else{r159=0;r160=r157;r161=r155}if(r2==41){r162=r131+2|0;r163=HEAP8[r162];r164=r163<<24>>24;r159=r158;r160=r164;r161=r162}r165=(r160|0)>47;r166=(r160|0)<58;r167=r165&r166;if(r167){r168=r160;r169=r161}else{r141=r125;r142=r126;r143=r127;r144=r128;r145=r129;r146=r130;r147=0;r148=r160;r149=r131;break}while(1){r170=(r168|0)==48;if(!r170){break}r171=r169+1|0;r172=HEAP8[r171];r173=r172<<24>>24;r168=r173;r169=r171}r174=(r168|0)>48;r175=(r168|0)<58;r176=r174&r175;if(r176){r177=r168;r178=r169}else{r141=r125;r142=r126;r143=r127;r144=r128;r145=r129;r146=r130;r147=0;r148=r168;r149=r169;break}while(1){r179=r177-48|0;r180=r178+1|0;r181=HEAP8[r180];r182=r181<<24>>24;r183=r181-48&255;r184=(r183&255)<10;if(!r184){break}r185=r179*10&-1;r186=r185+r182|0;r177=r186;r178=r180}r187=r180;r188=r169;r189=r187-r188|0;r190=(r189|0)>8;r191=(r179|0)>19999;r192=r190|r191;r193=r192?19999:r179;r194=(r159|0)==0;r195=-r193|0;r196=r194?r193:r195;r141=r125;r142=r126;r143=r127;r144=r128;r145=r129;r146=r130;r147=r196;r148=r182;r149=r180}}while(0);r197=(r146|0)==0;if(r197){r71=r149;r72=r148;r73=r144;break}r198=r147-r145|0;r199=(r30|0)==0;r200=r199?r146:r30;r201=(r146|0)<16;r202=r142>>>0;do{if(r201){r203=(r146|0)>9;if(r203){r204=r146-9|0;r205=4128+(r204<<3)|0;r206=HEAPF64[r205>>3];r207=r205|0;r208=HEAP32[r207>>2];r209=r205+4|0;r210=HEAP32[r209>>2];r211=r206*r202;r212=r141>>>0;r213=r211+r212;r214=r146;r215=r213}else{r214=r146;r215=r202}r216=(r147|0)==(r145|0);if(r216){r24=r215;break L14}r217=(r198|0)>0;if(!r217){r218=(r198|0)>-23;if(!r218){r219=r214;r220=r215;break}r221=-r198|0;r222=4128+(r221<<3)|0;r223=HEAPF64[r222>>3];r224=r222|0;r225=HEAP32[r224>>2];r226=r222+4|0;r227=HEAP32[r226>>2];r228=r215/r223;r24=r228;break L14}r229=(r198|0)<23;if(r229){r230=4128+(r198<<3)|0;r231=HEAPF64[r230>>3];r232=r230|0;r233=HEAP32[r232>>2];r234=r230+4|0;r235=HEAP32[r234>>2];r236=r215*r231;r24=r236;break L14}r237=15-r146|0;r238=r237+22|0;r239=(r198|0)>(r238|0);if(r239){r219=r214;r220=r215;break}r240=r198-r237|0;r241=4128+(r237<<3)|0;r242=HEAPF64[r241>>3];r243=r241|0;r244=HEAP32[r243>>2];r245=r241+4|0;r246=HEAP32[r245>>2];r247=r215*r242;r248=4128+(r240<<3)|0;r249=HEAPF64[r248>>3];r250=r248|0;r251=HEAP32[r250>>2];r252=r248+4|0;r253=HEAP32[r252>>2];r254=r247*r249;r24=r254;break L14}else{r255=7;r256=4128+(r255<<3)|0;r257=HEAPF64[r256>>3];r258=r256|0;r259=HEAP32[r258>>2];r260=r256+4|0;r261=HEAP32[r260>>2];r262=r257*r202;r263=r141>>>0;r264=r262+r263;r219=16;r220=r264}}while(0);r265=r146-r219|0;r266=r198+r265|0;r267=(r266|0)>0;L94:do{if(r267){r268=r266&15;r269=(r268|0)==0;if(r269){r270=r220}else{r271=4128+(r268<<3)|0;r272=HEAPF64[r271>>3];r273=r271|0;r274=HEAP32[r273>>2];r275=r271+4|0;r276=HEAP32[r275>>2];r277=r220*r272;r270=r277}r278=r266&-16;r279=(r278|0)==0;if(r279){r280=0;r281=r270;break}r282=(r278|0)>308;do{if(!r282){r283=r266>>4;r284=0;r285=r283;r286=r270;while(1){r287=(r285|0)>1;if(!r287){break}r288=r285&1;r289=(r288|0)==0;if(r289){r290=r286}else{r291=5816+(r284<<3)|0;r292=HEAPF64[r291>>3];r293=r291|0;r294=HEAP32[r293>>2];r295=r291+4|0;r296=HEAP32[r295>>2];r297=r286*r292;r290=r297}r298=r284+1|0;r299=r285>>1;r284=r298;r285=r299;r286=r290}HEAPF64[tempDoublePtr>>3]=r286;r300=HEAP32[tempDoublePtr>>2];r301=HEAP32[tempDoublePtr+4>>2];r302=r301;r303=0;r304=r302;r305=r304;r306=r305-55574528|0;r307=r306;r308=0;r309=0;r310=r307;r311=-1;r312=0;r313=r300&r311;r314=r301&r312;r315=r313|r309;r316=r314|r310;r317=(HEAP32[tempDoublePtr>>2]=r315,HEAP32[tempDoublePtr+4>>2]=r316,HEAPF64[tempDoublePtr>>3]);r318=5816+(r284<<3)|0;r319=HEAPF64[r318>>3];r320=r318|0;r321=HEAP32[r320>>2];r322=r318+4|0;r323=HEAP32[r322>>2];r324=r317*r319;HEAPF64[tempDoublePtr>>3]=r324;r325=HEAP32[tempDoublePtr>>2];r326=HEAP32[tempDoublePtr+4>>2];r327=r326;r328=0;r329=r327;r330=r329;r331=r330&2146435072;r332=r331>>>0>2090860544;if(r332){break}r333=r331>>>0>2089811968;if(r333){r280=0;r281=1.7976931348623157e+308;break L94}r334=r330+55574528|0;r335=r334;r336=0;r337=0;r338=r335;r339=-1;r340=0;r341=r325&r339;r342=r326&r340;r343=r341|r337;r344=r342|r338;r345=(HEAP32[tempDoublePtr>>2]=r343,HEAP32[tempDoublePtr+4>>2]=r344,HEAPF64[tempDoublePtr>>3]);r280=0;r281=r345;break L94}}while(0);r346=___errno_location();HEAP32[r346>>2]=34;r24=Infinity;break L14}else{r347=(r266|0)<0;if(!r347){r280=0;r281=r220;break}r348=-r266|0;r349=r348&15;r350=(r349|0)==0;if(r350){r351=r220}else{r352=4128+(r349<<3)|0;r353=HEAPF64[r352>>3];r354=r352|0;r355=HEAP32[r354>>2];r356=r352+4|0;r357=HEAP32[r356>>2];r358=r220/r353;r351=r358}r359=r348>>4;r360=(r359|0)==0;if(r360){r280=0;r281=r351;break}r361=(r359|0)>31;if(!r361){r362=r359&16;r363=(r362|0)==0;r364=r363?0:106;r365=0;r366=r359;r367=r351;while(1){r368=(r366|0)>0;if(!r368){break}r369=r366&1;r370=(r369|0)==0;if(r370){r371=r367}else{r372=4088+(r365<<3)|0;r373=HEAPF64[r372>>3];r374=r372|0;r375=HEAP32[r374>>2];r376=r372+4|0;r377=HEAP32[r376>>2];r378=r367*r373;r371=r378}r379=r365+1|0;r380=r366>>1;r365=r379;r366=r380;r367=r371}r381=(r364|0)==0;do{if(r381){r382=r367}else{HEAPF64[tempDoublePtr>>3]=r367;r383=HEAP32[tempDoublePtr>>2];r384=HEAP32[tempDoublePtr+4>>2];r385=r384>>>20|0<<12;r386=0>>>20|0<<12;r387=r385;r388=r387;r389=r388&2047;r390=107-r389|0;r391=(r390|0)>0;if(!r391){r382=r367;break}r392=(r390|0)>31;if(!r392){r393=-1<<r390;r394=r383;r395=r394;r396=r395&r393;r397=r396;r398=0;r399=0;r400=-1;r401=r383&r399;r402=r384&r400;r403=r401|r397;r404=r402|r398;r405=(HEAP32[tempDoublePtr>>2]=r403,HEAP32[tempDoublePtr+4>>2]=r404,HEAPF64[tempDoublePtr>>3]);r382=r405;break}r406=(r390|0)>52;if(r406){r280=r364;r281=4.008336720017946e-292;break L94}r407=r390-32|0;r408=-1<<r407;r409=r384;r410=0;r411=r409;r412=r411;r413=r412&r408;r414=r413;r415=0;r416=0;r417=r414;r418=(HEAP32[tempDoublePtr>>2]=r416,HEAP32[tempDoublePtr+4>>2]=r417,HEAPF64[tempDoublePtr>>3]);r382=r418}}while(0);r419=r382!=0;if(r419){r280=r364;r281=r382;break}}r420=___errno_location();HEAP32[r420>>2]=34;r24=0;break L14}}while(0);r421=r146+8|0;r422=(r421|0)/9&-1;r423=1;r424=0;while(1){r425=(r422|0)>(r423|0);if(!r425){break}r426=r423<<1;r427=r424+1|0;r423=r426;r424=r427}r428=_Balloc(r424);r429=r428+20|0;HEAP32[r429>>2]=r142;r430=r428+16|0;HEAP32[r430>>2]=1;r431=(r200|0)>9;if(r431){r432=r143+9|0;r433=9;r434=r428;r435=r432;while(1){r436=r435+1|0;r437=HEAP8[r435];r438=r437<<24>>24;r439=r438-48|0;r440=_multadd(r434,10,r439);r441=r433+1|0;r442=(r441|0)<(r200|0);if(r442){r433=r441;r434=r440;r435=r436}else{break}}r443=r435+2|0;r444=r441;r445=r440;r446=r443}else{r447=r143+10|0;r444=9;r445=r428;r446=r447}while(1){r448=(r444|0)<(r146|0);if(!r448){break}r449=r446+1|0;r450=HEAP8[r446];r451=r450<<24>>24;r452=r451-48|0;r453=_multadd(r445,10,r452);r454=r444+1|0;r444=r454;r445=r453;r446=r449}r455=r445+4|0;r456=r445+12|0;r457=r456;r458=r445+16|0;r459=r6;r460=r7;r461=(r198|0)>-1;r462=r4;r463=r5;r464=(r280|0)==0;r465=-r198|0;r466=0;r467=0;r468=0;r469=r281;L151:while(1){r470=HEAP32[r455>>2];r471=_Balloc(r470);r472=r471+12|0;r473=r472;r474=HEAP32[r458>>2];r475=r474<<2;r476=r475+8|0;_memcpy(r473,r457,r476)|0;r477=4;r478=0;r479=4;r480=0;r481=_Balloc(1);r482=r481+20|0;HEAPF64[tempDoublePtr>>3]=r469;r483=HEAP32[tempDoublePtr>>2];r484=HEAP32[tempDoublePtr+4>>2];r485=r484;r486=0;r487=r485;r488=r487;r489=r488&1048575;r490=-1;r491=0;r492=r483&r490;r493=r484&r491;r494=r484>>>20|0<<12;r495=0>>>20|0<<12;r496=r494;r497=r496;r498=r497&2047;r499=(r498|0)==0;r500=r489|1048576;r501=r499?r489:r500;r502=r499?r489:r500;HEAP32[r7>>2]=r501;r503=r483;r504=r503;HEAP32[r6>>2]=r504;r505=(r504|0)==0;if(r505){r506=_lo0bits(r7);r507=HEAP32[r7>>2];HEAP32[r482>>2]=r507;r508=r481+16|0;HEAP32[r508>>2]=1;r509=r506+32|0;r510=r509;r511=1}else{r512=_lo0bits(r6);r513=(r512|0)==0;r514=HEAP32[r6>>2];if(r513){HEAP32[r482>>2]=r514;r515=r502}else{r516=32-r512|0;r517=r502<<r516;r518=r514|r517;HEAP32[r482>>2]=r518;r519=r502>>>(r512>>>0);HEAP32[r7>>2]=r519;r515=r519}r520=r481+24|0;HEAP32[r520>>2]=r515;r521=(r515|0)!=0;r522=r521?2:1;r523=r481+16|0;HEAP32[r523>>2]=r522;r510=r512;r511=r522}if(r499){r524=r511<<5;r525=r511-1|0;r526=r481+20+(r525<<2)|0;r527=HEAP32[r526>>2];r528=_hi0bits(r527);r529=r524-r528|0;r530=-1074;r531=r529}else{r532=r498-1075|0;r533=53-r510|0;r530=r532;r531=r533}r534=r530+r510|0;r535=4;r536=0;r537=4;r538=0;r539=_Balloc(1);r540=r539+20|0;HEAP32[r540>>2]=1;r541=r539+16|0;HEAP32[r541>>2]=1;r542=r461?0:r465;r543=r461?0:r465;r544=r461?r198:0;r545=r461?r198:0;r546=(r534|0)>-1;r547=r542+r534|0;r548=r545-r534|0;r549=r546?r547:r542;r550=r546?r545:r548;r551=r534-r280|0;r552=r551+r531|0;r553=(r552|0)<-1021;r554=54-r531|0;r555=r551+1075|0;r556=r553?r555:r554;r557=r549+r556|0;r558=r550+r556|0;r559=r558+r280|0;r560=(r557|0)<(r559|0);r561=r560?r557:r559;r562=(r561|0)>(r549|0);r563=r562?r549:r561;r564=(r563|0)>0;if(r564){r565=r557-r563|0;r566=r559-r563|0;r567=r549-r563|0;r568=r567;r569=r566;r570=r565}else{r568=r549;r569=r559;r570=r557}r571=(r543|0)>0;if(r571){r572=_pow5mult(r539,r543);r573=_mult(r572,r481);r574=r481;_free(r574);r575=r572;r576=r573}else{r575=r539;r576=r481}r577=(r570|0)>0;if(r577){r578=_lshift(r576,r570);r579=r578}else{r579=r576}r580=(r544|0)>0;if(r580){r581=_pow5mult(r471,r544);r582=r581}else{r582=r471}r583=(r569|0)>0;if(r583){r584=_lshift(r582,r569);r585=r584}else{r585=r582}r586=(r568|0)>0;if(r586){r587=_lshift(r575,r568);r588=r587}else{r588=r575}r589=_cmp(r579,r585);r590=(r589|0)==0;if(r590){r591=_Balloc(0);r592=r591+16|0;HEAP32[r592>>2]=1;r593=r591+20|0;HEAP32[r593>>2]=0;r594=r591;r595=1}else{r596=(r589|0)<0;r597=r596?r579:r585;r598=r596?r585:r579;r599=r596?1:0;r600=r598+4|0;r601=HEAP32[r600>>2];r602=_Balloc(r601);r603=r602+12|0;HEAP32[r603>>2]=r599;r604=r598+16|0;r605=HEAP32[r604>>2];r606=r598+20|0;r607=r598+20+(r605<<2)|0;r608=r597+16|0;r609=HEAP32[r608>>2];r610=r597+20|0;r611=r597+20+(r609<<2)|0;r612=r602+20|0;r613=r606;r614=r610;r615=r612;r616=0;r617=0;while(1){r618=r613+4|0;r619=HEAP32[r613>>2];r620=r619;r621=0;r622=r614+4|0;r623=HEAP32[r614>>2];r624=r623;r625=0;r626=_i64Subtract(r620,r621,r624,r625);r627=tempRet0;r628=_i64Subtract(r626,r627,r617,r616);r629=tempRet0;r630=r629;r631=0;r632=1;r633=0;r634=r630&r632;r635=r631&r633;r636=r628;r637=r636;r638=r615+4|0;HEAP32[r615>>2]=r637;r639=r622>>>0<r611>>>0;if(r639){r613=r618;r614=r622;r615=r638;r616=r635;r617=r634}else{r640=r618;r641=r638;r642=r635;r643=r634;break}}while(1){r644=r640>>>0<r607>>>0;if(!r644){r645=r605;r646=r641;break}r647=r640+4|0;r648=HEAP32[r640>>2];r649=r648;r650=0;r651=_i64Subtract(r649,r650,r643,r642);r652=tempRet0;r653=r652;r654=0;r655=1;r656=0;r657=r653&r655;r658=r654&r656;r659=r651;r660=r659;r661=r641+4|0;HEAP32[r641>>2]=r660;r640=r647;r641=r661;r642=r658;r643=r657}while(1){r662=r646-4|0;r663=HEAP32[r662>>2];r664=(r663|0)==0;if(!r664){break}r665=r645-1|0;r645=r665;r646=r662}r666=r602+16|0;HEAP32[r666>>2]=r645;r594=r602;r595=r645}r667=r594+12|0;r668=HEAP32[r667>>2];HEAP32[r667>>2]=0;r669=_cmp(r594,r588);r670=(r669|0)<0;if(r670){r2=172;break}r671=(r669|0)==0;if(r671){r2=177;break}r672=4;r673=0;r674=4;r675=0;r676=_b2d(r594,r4);r677=_b2d(r588,r5);r678=HEAP32[r4>>2];r679=HEAP32[r5>>2];r680=r678-r679|0;r681=r594+16|0;r682=HEAP32[r681>>2];r683=r588+16|0;r684=HEAP32[r683>>2];r685=r682-r684|0;r686=r685<<5;r687=r680+r686|0;r688=(r687|0)>0;if(r688){r689=r687<<20;HEAPF64[tempDoublePtr>>3]=r676;r690=HEAP32[tempDoublePtr>>2];r691=HEAP32[tempDoublePtr+4>>2];r692=r691;r693=0;r694=r692;r695=r694;r696=r695+r689|0;r697=r696;r698=0;r699=0;r700=r697;r701=-1;r702=0;r703=r690&r701;r704=r691&r702;r705=r703|r699;r706=r704|r700;r707=(HEAP32[tempDoublePtr>>2]=r705,HEAP32[tempDoublePtr+4>>2]=r706,HEAPF64[tempDoublePtr>>3]);r708=r707;r709=r677}else{r710=-r687|0;r711=r710<<20;HEAPF64[tempDoublePtr>>3]=r677;r712=HEAP32[tempDoublePtr>>2];r713=HEAP32[tempDoublePtr+4>>2];r714=r713;r715=0;r716=r714;r717=r716;r718=r717+r711|0;r719=r718;r720=0;r721=0;r722=r719;r723=-1;r724=0;r725=r712&r723;r726=r713&r724;r727=r725|r721;r728=r726|r722;r729=(HEAP32[tempDoublePtr>>2]=r727,HEAP32[tempDoublePtr+4>>2]=r728,HEAPF64[tempDoublePtr>>3]);r708=r676;r709=r729}r730=r708/r709;r731=4;r732=0;r733=4;r734=0;r735=r730>2;do{if(r735){r736=r730*.5;r737=(r668|0)==0;if(!r737){r738=r736;r739=r736;break}r740=-0-r736;r738=r740;r739=r736}else{r741=(r668|0)==0;if(!r741){r738=1;r739=1;break}r742=r483;r743=r742;if((r743|0)==1){r744=(r488|0)==0;if(r744){r745=r594;r746=r588;r747=r445;r748=r585;r749=r579;r2=129;break L151}else{r738=-1;r739=1;break}}else if((r743|0)!=0){r738=-1;r739=1;break}r750=(r489|0)==0;if(!r750){r738=-1;r739=1;break}r751=r730<1;if(r751){r752=.5}else{r753=r730*.5;r752=r753}r754=-0-r752;r738=r754;r739=r752}}while(0);r755=r488&2146435072;r756=(r755|0)==2145386496;do{if(r756){r757=r488-55574528|0;r758=r757;r759=0;r760=0;r761=r758;r762=r492|r760;r763=r493|r761;r764=(HEAP32[tempDoublePtr>>2]=r762,HEAP32[tempDoublePtr+4>>2]=r763,HEAPF64[tempDoublePtr>>3]);r765=r757&2146435072;r766=r765-54525952|0;r767=r766;r768=0;r769=0;r770=r767;r771=(HEAP32[tempDoublePtr>>2]=r769,HEAP32[tempDoublePtr+4>>2]=r770,HEAPF64[tempDoublePtr>>3]);r772=r738*r771;r773=r764+r772;HEAPF64[tempDoublePtr>>3]=r773;r774=HEAP32[tempDoublePtr>>2];r775=HEAP32[tempDoublePtr+4>>2];r776=r775;r777=0;r778=r776;r779=r778;r780=r779&2145386496;r781=r780>>>0>2090860543;if(r781){r782=(r488|0)==2146435071;r783=r483;r784=r783;r785=(r784|0)==-1;r786=r782&r785;if(r786){r2=102;break L151}else{r787=r466;r788=r469;r789=r771;r790=1.7976931348623157e+308;break}}else{r791=r779+55574528|0;r792=r791;r793=0;r794=0;r795=r792;r796=-1;r797=0;r798=r774&r796;r799=r775&r797;r800=r798|r794;r801=r799|r795;r802=(HEAP32[tempDoublePtr>>2]=r800,HEAP32[tempDoublePtr+4>>2]=r801,HEAPF64[tempDoublePtr>>3]);r803=r466;r804=r469;r805=r739;r806=r771;r807=r802;r2=216;break}}else{r808=r464^1;r809=r755>>>0<111149057;r810=r808&r809;if(r810){r811=r739>2147483647;do{if(r811){r812=r738;r813=r739}else{r814=r739>=0?Math_floor(r739):Math_ceil(r739);r815=(r814|0)==0;r816=r815?1:r814;r817=r816>>>0;r818=(r668|0)==0;if(!r818){r812=r817;r813=r817;break}r819=-0-r817;r812=r819;r813=r817}}while(0);r820=112197632-r755|0;HEAPF64[tempDoublePtr>>3]=r812;r821=HEAP32[tempDoublePtr>>2];r822=HEAP32[tempDoublePtr+4>>2];r823=r822;r824=0;r825=r823;r826=r825;r827=r826+r820|0;r828=r827;r829=0;r830=0;r831=r828;r832=-1;r833=0;r834=r821&r832;r835=r822&r833;r836=r834|r830;r837=r835|r831;r838=(HEAP32[tempDoublePtr>>2]=r836,HEAP32[tempDoublePtr+4>>2]=r837,HEAPF64[tempDoublePtr>>3]);r839=r838;r840=r813}else{r839=r738;r840=r739}r841=r755-54525952|0;r842=r841;r843=0;r844=0;r845=r842;r846=(HEAP32[tempDoublePtr>>2]=r844,HEAP32[tempDoublePtr+4>>2]=r845,HEAPF64[tempDoublePtr>>3]);r847=r839*r846;r848=r469+r847;r803=r846;r804=r467;r805=r840;r806=r468;r807=r848;r2=216}}while(0);L228:do{if(r2==216){r2=0;HEAPF64[tempDoublePtr>>3]=r807;r849=HEAP32[tempDoublePtr>>2];r850=HEAP32[tempDoublePtr+4>>2];r851=r850;r852=0;r853=r851;r854=r853;if(!r464){r787=r803;r788=r804;r789=r806;r790=r807;break}r855=r854&2146435072;r856=(r755|0)==(r855|0);if(!r856){r787=r803;r788=r804;r789=r806;r790=r807;break}r857=r805&-1;r858=r857|0;r859=r805-r858;r860=(r668|0)==0;do{if(r860){r861=r849;r862=r861;r863=(r862|0)==0;if(!r863){break}r864=r854&1048575;r865=(r864|0)==0;if(!r865){break}r866=r859<.24999995;if(r866){r867=r594;r868=r807;r2=224;break L151}else{r787=r803;r788=r804;r789=r806;r790=r807;break L228}}}while(0);r869=r859<.4999999;r870=r859>.5000001;r871=r869|r870;if(r871){r867=r594;r868=r807;r2=224;break L151}else{r787=r803;r788=r804;r789=r806;r790=r807}}}while(0);r872=r579;_free(r872);r873=r585;_free(r873);r874=r588;_free(r874);r875=r594;_free(r875);r466=r787;r467=r788;r468=r789;r469=r790}L238:do{if(r2==102){r876=___errno_location();HEAP32[r876>>2]=34;r877=(r445|0)==0;if(r877){r24=Infinity;break L14}else{r878=r594;r879=r588;r880=r445;r881=r585;r882=r579;r883=Infinity}}else if(r2==172){r884=(r668|0)==0;if(!r884){r867=r594;r868=r469;r2=224;break}r885=r483;r886=r885;r887=(r886|0)==0;r888=(r489|0)==0;r889=r887&r888;r890=r889^1;r891=r488&2146435072;r892=r891>>>0<112197633;r893=r890|r892;if(r893){r867=r594;r868=r469;r2=224;break}r894=r594+20|0;r895=HEAP32[r894>>2];r896=(r895|0)==0;r897=(r595|0)<2;r898=r896&r897;if(r898){r867=r594;r868=r469;r2=224;break}r899=_lshift(r594,1);r900=_cmp(r899,r588);r901=(r900|0)>0;if(r901){r902=r899;r2=186}else{r867=r899;r868=r469;r2=224}}else if(r2==177){r903=(r668|0)==0;do{if(r903){r904=(r489|0)==0;if(!r904){break}r905=r483;r906=r905;r907=(r906|0)==0;if(r907){r902=r594;r2=186;break L238}}else{r908=(r489|0)==1048575;if(!r908){break}r909=r483;r910=r909;do{if(r464){r911=-1}else{r912=r488&2146435072;r913=r912>>>0<111149057;if(!r913){r911=-1;break}r914=r912>>>20;r915=107-r914|0;r916=-1<<r915;r911=r916}}while(0);r917=(r910|0)==(r911|0);if(!r917){break}r918=r488&2146435072;r919=r918+1048576|0;r920=r919;r921=0;r922=0;r923=r920;r924=(HEAP32[tempDoublePtr>>2]=r922,HEAP32[tempDoublePtr+4>>2]=r923,HEAPF64[tempDoublePtr>>3]);r867=r594;r868=r924;r2=224;break L238}}while(0);r925=1;r926=0;r927=r483&r925;r928=r484&r926;r929=0;r930=0;r931=(r927|0)==(r929|0)&(r928|0)==(r930|0);if(r931){r867=r594;r868=r469;r2=224;break}r932=r488&2146435072;r933=r932-54525952|0;r934=r933;r935=0;r936=0;r937=r934;r938=(HEAP32[tempDoublePtr>>2]=r936,HEAP32[tempDoublePtr+4>>2]=r937,HEAPF64[tempDoublePtr>>3]);if(r903){r939=r469-r938;r940=r939!=0;if(r940){r867=r594;r868=r939;r2=224;break}else{r745=r594;r746=r588;r747=r445;r748=r585;r749=r579;r2=129;break}}else{r941=r469+r938;r867=r594;r868=r941;r2=224;break}}}while(0);do{if(r2==186){r942=r488&2146435072;r943=r464^1;r944=r942>>>0<112197633;r945=r943&r944;if(r945){r946=r942>>>0>57671680;if(r946){r867=r902;r868=r469;r2=224;break}else{r745=r902;r746=r588;r747=r445;r748=r585;r749=r579;r2=129;break}}else{r947=r942-1048576|0;r948=r947|1048575;r949=r948;r950=0;r951=0;r952=r949;r953=-1;r954=0;r955=r951|r953;r956=r952|r954;r957=(HEAP32[tempDoublePtr>>2]=r955,HEAP32[tempDoublePtr+4>>2]=r956,HEAPF64[tempDoublePtr>>3]);r867=r902;r868=r957;r2=224;break}}}while(0);do{if(r2==129){r958=___errno_location();HEAP32[r958>>2]=34;r959=(r747|0)==0;if(r959){r24=0;break L14}else{r878=r745;r879=r746;r880=r747;r881=r748;r882=r749;r883=0}}else if(r2==224){if(r464){r878=r867;r879=r588;r880=r445;r881=r585;r882=r579;r883=r868;break}r960=r868*1.232595164407831e-32;HEAPF64[tempDoublePtr>>3]=r960;r961=HEAP32[tempDoublePtr>>2];r962=HEAP32[tempDoublePtr+4>>2];r963=0;r964=1;r965=r962>>>0<r964>>>0|r962>>>0==r964>>>0&r961>>>0<r963>>>0;r966=r961;r967=r966;r968=(r967|0)==0;r969=r965&r968;if(!r969){r878=r867;r879=r588;r880=r445;r881=r585;r882=r579;r883=r960;break}r970=___errno_location();HEAP32[r970>>2]=34;r878=r867;r879=r588;r880=r445;r881=r585;r882=r579;r883=r960}}while(0);r971=r882;_free(r971);r972=r881;_free(r972);r973=r879;_free(r973);r974=r880;_free(r974);r975=r878;_free(r975);r24=r883;break L14}}while(0);r976=(r73|0)==0;r977=(r25|0)==0;r978=r976&r977;if(!r978){r24=0;break}if((r72|0)==105|(r72|0)==73){r979=r71;r980=28360;while(1){r981=r980+1|0;r982=HEAP8[r980];r983=r982<<24>>24;r984=r982<<24>>24==0;r985=r979+1|0;if(r984){break}r986=HEAP8[r985];r987=r986<<24>>24;r988=r986<<24>>24>64;r989=r986<<24>>24<91;r990=r988&r989;r991=r987+32|0;r992=r990?r991:r987;r993=(r992|0)==(r983|0);if(r993){r979=r985;r980=r981}else{r11=0;r2=230;break}}if(r2==230){STACKTOP=r3;return r11}r994=r985-1|0;r995=r994;r996=45304;while(1){r997=r996+1|0;r998=HEAP8[r996];r999=r998<<24>>24;r1000=r998<<24>>24==0;if(r1000){r24=Infinity;break L14}r1001=r995+1|0;r1002=HEAP8[r1001];r1003=r1002<<24>>24;r1004=r1002<<24>>24>64;r1005=r1002<<24>>24<91;r1006=r1004&r1005;r1007=r1003+32|0;r1008=r1006?r1007:r1003;r1009=(r1008|0)==(r999|0);if(r1009){r995=r1001;r996=r997}else{r24=Infinity;break}}}else if((r72|0)==110|(r72|0)==78){r1010=r71;r1011=32544;while(1){r1012=r1011+1|0;r1013=HEAP8[r1011];r1014=r1013<<24>>24;r1015=r1013<<24>>24==0;r1016=r1010+1|0;r1017=HEAP8[r1016];if(r1015){break}r1018=r1017<<24>>24;r1019=r1017<<24>>24>64;r1020=r1017<<24>>24<91;r1021=r1019&r1020;r1022=r1018+32|0;r1023=r1021?r1022:r1018;r1024=(r1023|0)==(r1014|0);if(r1024){r1010=r1016;r1011=r1012}else{r11=0;r2=230;break}}if(r2==230){STACKTOP=r3;return r11}r1025=r1017<<24>>24==40;if(r1025){r1026=r1016}else{r24=NaN;break}while(1){r1027=r1026+1|0;r1028=HEAP8[r1027];r1029=r1028<<24>>24!=0;r1030=(r1028&255)<33;r1031=r1029&r1030;if(r1031){r1026=r1027}else{break}}r1032=r1028<<24>>24==48;do{if(r1032){r1033=r1026+2|0;r1034=HEAP8[r1033];if(!(r1034<<24>>24==120|r1034<<24>>24==88)){r1035=1;r1036=1;r1037=r1026;r1038=0;r1039=0;break}r1035=1;r1036=1;r1037=r1033;r1038=0;r1039=0}else{r1035=1;r1036=1;r1037=r1026;r1038=0;r1039=0}}while(0);L295:while(1){r1040=0;r1041=r1035;r1042=r1037;L297:while(1){r1043=(r1041|0)==0;r1044=r1042;while(1){r1045=r1044+1|0;r1046=HEAP8[r1045];r1047=r1046&255;r1048=r1046<<24>>24==0;if(r1048){break L295}r1049=(r1046&255)>47;if(r1049){break L297}r1050=(r1046&255)<33;if(!r1050){r1051=r1047;r1052=r1045;r2=77;break L295}r1053=r1043|r1036;if(r1053){r1044=r1045}else{r1040=1;r1041=0;r1042=r1045;continue L297}}}r1054=(r1046&255)<58;do{if(r1054){r1055=r1047-48|0;r1056=r1055}else{r1057=(r1046&255)>96;if(r1057){r1058=(r1046&255)<103;if(!r1058){r1051=r1047;r1052=r1045;r2=77;break L295}r1059=r1047-87|0;r1056=r1059;break}else{r1060=(r1046&255)>64;r1061=(r1046&255)<71;r1062=r1060&r1061;if(!r1062){r1051=r1047;r1052=r1045;r2=77;break L295}r1063=r1047-55|0;r1056=r1063;break}}}while(0);r1064=(r1040|0)==0;r1065=r1064?r1039:0;r1066=r1064?r1038:r1039;if(r1043){r1067=r1066}else{r1068=r1066<<4;r1069=r1065>>>28;r1070=r1068|r1069;r1067=r1070}r1071=r1065<<4;r1072=r1071|r1056;r1035=r1041;r1036=0;r1037=r1045;r1038=r1067;r1039=r1072}L317:do{if(r2==77){while(1){r2=0;r1073=(r1051|0)==41;if(r1073){break L317}r1074=r1052+1|0;r1075=HEAP8[r1074];r1076=r1075<<24>>24;r1077=r1075<<24>>24==0;if(r1077){break}else{r1051=r1076;r1052=r1074;r2=77}}}}while(0);r1078=r1038&1048575;r1079=(r1078|0)==0;r1080=(r1039|0)==0;r1081=r1079&r1080;if(r1081){r24=NaN;break}r1082=r1078|2146435072;r1083=r1082;r1084=0;r1085=0;r1086=r1083;r1087=r1039;r1088=0;r1089=r1085|r1087;r1090=r1086|r1088;r1091=(HEAP32[tempDoublePtr>>2]=r1089,HEAP32[tempDoublePtr+4>>2]=r1090,HEAPF64[tempDoublePtr>>3]);r24=r1091;break}else{r11=0;STACKTOP=r3;return r11}}}while(0);r1092=(r13|0)==0;if(r1092){r11=r24;STACKTOP=r3;return r11}r1093=-0-r24;r11=r1093;STACKTOP=r3;return r11}function _string_join(r1,r2){var r3,r4,r5,r6,r7;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r5=r4;HEAP32[r5>>2]=r2;HEAP32[r5+4>>2]=0;r6=r4|0;r4=_strlen(r1);while(1){r7=(tempInt=HEAP32[r6+4>>2],HEAP32[r6+4>>2]=tempInt+8,HEAP32[HEAP32[r6>>2]+tempInt>>2]);if((r7|0)==0){break}r4=r4+_strlen(r7)|0}r7=___ckd_calloc__(r4+1|0,1,25248,77);HEAP32[r5>>2]=r2;HEAP32[r5+4>>2]=0;_strcpy(r7,r1);while(1){r1=(tempInt=HEAP32[r6+4>>2],HEAP32[r6+4>>2]=tempInt+8,HEAP32[HEAP32[r6>>2]+tempInt>>2]);if((r1|0)==0){break}_strcat(r7,r1)}STACKTOP=r3;return r7}function _string_trim(r1){var r2,r3,r4,r5;r2=0;r3=_strlen(r1);r4=_strspn(r1,44776);if((r4|0)==0){r5=r3}else{_memmove(r1,r1+r4|0,r3+1-r4|0,1,0);r5=r3-r4|0}while(1){r4=r5-1|0;if((r5|0)<=0){r2=5;break}if((_memchr(44776,HEAP8[r1+r4|0]|0,6)|0)==0){break}else{r5=r4}}do{if(r2==5){if((r5|0)!=0){break}HEAP8[r1]=0;return r1}}while(0);HEAP8[r1+r5|0]=0;return r1}function _str2words(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r4=0;r5=(r2|0)==0;r6=0;r7=0;L1:while(1){r8=r6;while(1){r9=r1+r8|0;r10=HEAP8[r9];if(r10<<24>>24==0){r11=r7;r4=22;break L1}if((_isspace(r10&255)|0)==0){break}r8=r8+1|0}if((HEAP8[r9]|0)==0){r11=r7;r4=22;break}if(!r5){if((r7|0)>=(r3|0)){r12=r8;r4=9;break}HEAP32[r2+(r7<<2)>>2]=r9}r10=r7+1|0;r13=r8;while(1){r14=r1+r13|0;r15=HEAP8[r14];if(r15<<24>>24==0){r11=r10;r4=22;break L1}if((_isspace(r15&255)|0)!=0){break}r13=r13+1|0}if((HEAP8[r14]|0)==0){r11=r10;r4=22;break}if(!r5){HEAP8[r14]=0}r6=r13+1|0;r7=r10}if(r4==9){while(1){r4=0;if((r12|0)<=-1){r11=-1;break}r7=r1+r12|0;if((HEAP8[r7]|0)==0){HEAP8[r7]=32}r12=r12-1|0;r4=9}return r11}else if(r4==22){return r11}}function ___getTypeName(r1){return _strdup(HEAP32[r1+4>>2])}function __GLOBAL__I_a347(){__embind_register_void(62160,22520);__embind_register_bool(62168,44168,1,0);__embind_register_integer(__ZTIc,31608,-128,127);__embind_register_integer(__ZTIa,22272,-128,127);__embind_register_integer(__ZTIh,17208,0,255);__embind_register_integer(__ZTIs,14208,-32768,32767);__embind_register_integer(__ZTIt,11344,0,65535);__embind_register_integer(__ZTIi,9288,-2147483648,2147483647);__embind_register_integer(__ZTIj,7536,0,-1);__embind_register_integer(__ZTIl,6392,-2147483648,2147483647);__embind_register_integer(__ZTIm,48840,0,-1);__embind_register_float(__ZTIf,47488);__embind_register_float(__ZTId,45760);__embind_register_std_string(64016,44152);__embind_register_std_wstring(63992,4,42680);__embind_register_emval(64360,41584);__embind_register_memory_view(64368,40248);return}function __ZNSt3__18ios_base4InitD2Ev(r1){__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(71552);__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(71640);__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(71184);__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(71272);return}



function __ZN10emscripten11value_arrayIN14pocketsphinxjs4WordEE7elementIS2_NSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEERS3_MT_T0_(r1,r2){var r3,r4;r3=_malloc(4);if((r3|0)!=0){HEAP32[r3>>2]=r2}r4=_malloc(4);if((r4|0)!=0){HEAP32[r4>>2]=r2}__embind_register_value_array_element(64320,64016,602,r3,64016,306,r4);return r1}function __ZN10emscripten11value_arrayIN14pocketsphinxjs10ConfigItemEE7elementIS2_NSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEERS3_MT_T0_(r1,r2){var r3,r4;r3=_malloc(4);if((r3|0)!=0){HEAP32[r3>>2]=r2}r4=_malloc(4);if((r4|0)!=0){HEAP32[r4>>2]=r2}__embind_register_value_array_element(64352,64016,834,r3,64016,810,r4);return r1}function __ZN10emscripten12value_objectIN14pocketsphinxjs7SegItemEE5fieldIS2_iEERS3_PKcMT_T0_(r1,r2,r3){var r4,r5;r4=_malloc(4);if((r4|0)!=0){HEAP32[r4>>2]=r3}r5=_malloc(4);if((r5|0)!=0){HEAP32[r5>>2]=r3}__embind_register_value_object_field(64304,r2,__ZTIi,398,r4,__ZTIi,1184,r5);return r1}function __ZN10emscripten12value_objectIN14pocketsphinxjs10TransitionEE5fieldIS2_iEERS3_PKcMT_T0_(r1,r2,r3){var r4,r5;r4=_malloc(4);if((r4|0)!=0){HEAP32[r4>>2]=r3}r5=_malloc(4);if((r5|0)!=0){HEAP32[r5>>2]=r3}__embind_register_value_object_field(64328,r2,__ZTIi,844,r4,__ZTIi,624,r5);return r1}function __ZN10emscripten12value_objectIN14pocketsphinxjs7GrammarEE5fieldIS2_iEERS3_PKcMT_T0_(r1,r2,r3){var r4,r5;r4=_malloc(4);if((r4|0)!=0){HEAP32[r4>>2]=r3}r5=_malloc(4);if((r5|0)!=0){HEAP32[r5>>2]=r3}__embind_register_value_object_field(64312,r2,__ZTIi,304,r4,__ZTIi,28,r5);return r1}function __ZN14pocketsphinxjs10Recognizer6reInitERKNSt3__16vectorINS_10ConfigItemENS1_9allocatorIS3_EEEE(r1,r2){var r3;r3=__ZN14pocketsphinxjs10Recognizer4initERKNSt3__16vectorINS_10ConfigItemENS1_9allocatorIS3_EEEE(r1,r2);if((r3|0)==0){return r3}__ZN14pocketsphinxjs10Recognizer7cleanupEv(r1);return r3}function __ZN14pocketsphinxjs10Recognizer8addWordsERKNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEE(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45;r3=0;r4=0;r5=STACKTOP;r6=r1+44|0;if((HEAP32[r6>>2]|0)==0){r7=1;STACKTOP=r5;return r7}r1=r2+4|0;r8=r2|0;r2=0;L4:while(1){r9=HEAP32[r8>>2];if(r2>>>0>=((HEAP32[r1>>2]-r9|0)/24&-1)>>>0){r7=0;r3=53;break}r10=r9+(r2*24&-1)+12|0;r11=HEAP8[r10];r12=(r11&1)==0;if(r12){r13=(r11&255)>>>1}else{r13=HEAP32[r9+(r2*24&-1)+16>>2]}if((r13|0)==0){r7=3;r3=53;break}r11=HEAP32[r6>>2];r14=r9+(r2*24&-1)|0;if((HEAP8[r14]&1)==0){r15=r14+1|0}else{r15=HEAP32[r9+(r2*24&-1)+8>>2]}if(r12){r16=r10+1|0}else{r16=HEAP32[r9+(r2*24&-1)+20>>2]}r17=___ckd_salloc__(r16,49568,701);r9=_str2words(r17,0,0);r18=___ckd_calloc__(r9,4,49568,703);r10=r18;_str2words(r17,r10,r9);r19=___ckd_calloc__(r9,2,49568,705);r12=r19;r14=r11+8|0;r20=0;while(1){if((r20|0)>=(r9|0)){break}r21=r10+(r20<<2)|0;r22=_bin_mdef_ciphone_id(HEAP32[HEAP32[r14>>2]+20>>2],HEAP32[r21>>2])&65535;HEAP16[r12+(r20<<1)>>1]=r22;if(r22<<16>>16==-1){r3=17;break L4}r20=r20+1|0}_free(r18);_free(r17);r20=r11+12|0;r14=_dict_add_word(HEAP32[r20>>2],r15,r12,r9);_free(r19);if((r14|0)==-1){r7=3;r3=53;break}r10=r11+16|0;r22=HEAP32[r10>>2];r23=HEAP32[r22+4>>2];r24=HEAP32[r22+8>>2]+8|0;r25=HEAP32[r24>>2];r26=HEAP32[r25+(r14*20&-1)+8>>2];r27=HEAP32[r25+(r14*20&-1)+4>>2];do{if((r26|0)>1){r25=r22+12|0;if((HEAP16[HEAP32[HEAP32[HEAP32[r25>>2]+(HEAP16[r27>>1]<<2)>>2]+(HEAP16[r27+2>>1]<<2)>>2]>>1]|0)==-1){r28=r23+4|0;r29=r23+56|0;r30=0;while(1){r31=r30<<16>>16;r32=HEAP32[r24>>2];if((r31|0)>=(HEAP32[r28>>2]|0)){break}r33=HEAP32[r32+(r14*20&-1)+4>>2];r34=_bin_mdef_phone_id_nearest(r23,HEAP16[r33>>1]|0,r31,HEAP16[r33+2>>1]|0,1);r33=HEAP32[r29>>2]+(r34*12&-1)|0;r34=HEAP32[HEAP32[r24>>2]+(r14*20&-1)+4>>2];HEAP16[HEAP32[HEAP32[HEAP32[r25>>2]+(HEAP16[r34>>1]<<2)>>2]+(HEAP16[r34+2>>1]<<2)>>2]+(r31<<1)>>1]=HEAPU8[r33]|HEAPU8[r33+1|0]<<8|HEAPU8[r33+2|0]<<16|HEAPU8[r33+3|0]<<24;r30=r30+1&65535}r35=HEAP32[r32+(r14*20&-1)+8>>2];r36=HEAP32[r32+(r14*20&-1)+4>>2]}else{r35=r26;r36=r27}r30=r22+16|0;if((HEAP32[HEAP32[HEAP32[r30>>2]+(HEAP16[r36+(r35-1<<1)>>1]<<2)>>2]+(HEAP16[r36+(r35-2<<1)>>1]*12&-1)+8>>2]|0)!=0){break}r25=r23+4|0;r29=___ckd_calloc__(HEAP32[r25>>2],2,13088,333);r28=r29;r33=r23+56|0;r31=0;while(1){r34=r31<<16>>16;r37=HEAP32[r25>>2];if((r34|0)>=(r37|0)){break}r38=HEAP32[r24>>2];r39=HEAP32[r38+(r14*20&-1)+8>>2];r40=HEAP32[r38+(r14*20&-1)+4>>2];r38=_bin_mdef_phone_id_nearest(r23,HEAP16[r40+(r39-1<<1)>>1]|0,HEAP16[r40+(r39-2<<1)>>1]|0,r34,2);r39=HEAP32[r33>>2]+(r38*12&-1)|0;HEAP16[r28+(r34<<1)>>1]=HEAPU8[r39]|HEAPU8[r39+1|0]<<8|HEAPU8[r39+2|0]<<16|HEAPU8[r39+3|0]<<24;r31=r31+1&65535}r31=___ckd_calloc__(r37,2,13088,342);r33=___ckd_calloc__(HEAP32[r25>>2],2,13088,343);_compress_table(r28,r31,r33,HEAP32[r25>>2]);r39=HEAP32[r25>>2];r34=0;while(1){r41=r34<<16>>16;if((r41|0)>=(r39|0)){break}if((HEAP16[r31+(r41<<1)>>1]|0)==-1){break}r34=r34+1&65535}r34=HEAP32[r24>>2];r39=HEAP32[r34+(r14*20&-1)+8>>2];r25=HEAP32[r34+(r14*20&-1)+4>>2];HEAP32[HEAP32[HEAP32[r30>>2]+(HEAP16[r25+(r39-1<<1)>>1]<<2)>>2]+(HEAP16[r25+(r39-2<<1)>>1]*12&-1)>>2]=r31;r39=HEAP32[r24>>2];r25=HEAP32[r39+(r14*20&-1)+8>>2];r34=HEAP32[r39+(r14*20&-1)+4>>2];HEAP32[HEAP32[HEAP32[r30>>2]+(HEAP16[r34+(r25-1<<1)>>1]<<2)>>2]+(HEAP16[r34+(r25-2<<1)>>1]*12&-1)+4>>2]=r33;r25=HEAP32[r24>>2];r34=HEAP32[r25+(r14*20&-1)+8>>2];r39=HEAP32[r25+(r14*20&-1)+4>>2];HEAP32[HEAP32[HEAP32[r30>>2]+(HEAP16[r39+(r34-1<<1)>>1]<<2)>>2]+(HEAP16[r39+(r34-2<<1)>>1]*12&-1)+8>>2]=r41;_free(r29)}else{r34=HEAP16[r27>>1]|0;if((r23|0)==0){r3=36;break L4}if((r34|0)>=(HEAP32[r23+4>>2]|0)){r3=38;break L4}_err_msg(1,13088,357,41096,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[HEAP32[r23+48>>2]+(r34<<2)>>2],r4));STACKTOP=r4;r34=HEAP16[HEAP32[HEAP32[r24>>2]+(r14*20&-1)+4>>2]>>1];if((HEAP16[HEAP32[HEAP32[HEAP32[r22+20>>2]+(r34<<16>>16<<2)>>2]>>2]>>1]|0)!=-1){break}_populate_lrdiph(r22,0,r34)}}while(0);r22=r11+28|0;r42=_hash_table_iter(HEAP32[r11+24>>2]);while(1){if((r42|0)==0){r43=r14;r3=51;break}r24=HEAP32[HEAP32[r42+4>>2]+8>>2];r23=HEAP32[HEAP32[r24>>2]>>2];r27=HEAP8[r23];if(r27<<24>>24==110){r26=10384;r9=r23;while(1){r23=r26+1|0;r12=r9+1|0;r34=HEAP8[r23];r39=HEAP8[r12];if(r34<<24>>24!=r39<<24>>24|r34<<24>>24==0|r39<<24>>24==0){r44=r34;r45=r39;break}else{r26=r23;r9=r12}}}else{r44=110;r45=r27}if(r44<<24>>24==r45<<24>>24){if((_ngram_model_add_word(HEAP32[r24+56>>2],r15,1)|0)==-1){r3=47;break L4}}r9=HEAP32[r22>>2];if((FUNCTION_TABLE[HEAP32[HEAP32[r9>>2]+16>>2]](r9,HEAP32[r20>>2],HEAP32[r10>>2])|0)<0){r3=49;break}r42=_hash_table_iter_next(r42)}if(r3==49){r3=0;_free(r42)}else if(r3==51){r3=0;if((r43|0)<0){r7=3;r3=53;break}}r2=r2+1|0}if(r3==17){_err_msg(4,49568,710,20080,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=HEAP32[r21>>2],HEAP32[r4+8>>2]=r17,r4));STACKTOP=r4;_free(r18);_free(r17);_free(r19);r7=3;STACKTOP=r5;return r7}else if(r3==36){___assert_fail(12720,16208,739,51368)}else if(r3==38){___assert_fail(12360,16208,740,51368)}else if(r3==47){_free(r42);r7=3;STACKTOP=r5;return r7}else if(r3==53){STACKTOP=r5;return r7}}function __ZN14pocketsphinxjs10Recognizer10addGrammarERNSt3__16vectorIiNS1_9allocatorIiEEEERKNS_7GrammarE(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r4=STACKTOP;STACKTOP=STACKTOP+176|0;r5=r4;r6=r4+8;r7=r4+24;r8=r4+160;r9=r1+44|0;if((HEAP32[r9>>2]|0)==0){r10=1;STACKTOP=r4;return r10}r11=r7|0;HEAP32[r11>>2]=64524;r12=r7;r13=r7+56|0;HEAP32[r13>>2]=64544;r14=HEAP32[HEAP32[r7>>2]-12>>2];HEAP32[r12+(r14+24)>>2]=r7+4;HEAP32[r12+(r14+16)>>2]=0;HEAP32[r12+(r14+20)>>2]=0;HEAP32[r12+(r14+4)>>2]=4098;HEAP32[r12+(r14+12)>>2]=0;HEAP32[r12+(r14+8)>>2]=6;_memset(r12+(r14+32)|0,0,40)|0;__ZNSt3__16localeC2Ev(r12+(r14+28)|0);HEAP32[r12+(r14+72)>>2]=0;HEAP32[r12+(r14+76)>>2]=-1;HEAP32[r11>>2]=55452;HEAP32[r7+56>>2]=55472;r14=r7+4|0;r12=r14|0;HEAP32[r12>>2]=55800;__ZNSt3__16localeC2Ev(r7+8|0);r15=r7+12|0;r16=r15;HEAP32[r16>>2]=0;HEAP32[r16+4>>2]=0;HEAP32[r16+8>>2]=0;HEAP32[r16+12>>2]=0;HEAP32[r16+16>>2]=0;HEAP32[r16+20>>2]=0;HEAP32[r12>>2]=55656;r16=r7+36|0;r17=r16;r18=0;while(1){if(r18>>>0>=3){break}HEAP32[r17+(r18<<2)>>2]=0;r18=r18+1|0}r18=r7+48|0;HEAP32[r18>>2]=0;r17=r7+52|0;HEAP32[r17>>2]=16;r19=r6;r20=0;while(1){if(r20>>>0>=3){break}HEAP32[r19+(r20<<2)>>2]=0;r20=r20+1|0}__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(r14,r6);do{if((HEAP8[r6]&1)!=0){r14=HEAP32[r6+8>>2];if((r14|0)==0){break}_free(r14)}}while(0);r6=r1+32|0;__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(r7,HEAP32[r6>>2]);r14=r1|0;r20=HEAP32[r17>>2];L18:do{if((r20&16|0)==0){if((r20&8|0)!=0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r8,HEAP32[r15>>2],HEAP32[r7+20>>2]);break}r17=r8;r19=0;while(1){if(r19>>>0>=3){break L18}HEAP32[r17+(r19<<2)>>2]=0;r19=r19+1|0}}else{r19=HEAP32[r18>>2];r17=HEAP32[r7+28>>2];if(r19>>>0<r17>>>0){HEAP32[r18>>2]=r17;r21=r17}else{r21=r19}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r8,HEAP32[r7+24>>2],r21)}}while(0);r21=r1+4|0;r18=HEAP32[r21>>2];if(r18>>>0<HEAP32[r1+8>>2]>>>0){if((r18|0)==0){r22=0}else{r15=r18;r18=r8;HEAP32[r15>>2]=HEAP32[r18>>2];HEAP32[r15+4>>2]=HEAP32[r18+4>>2];HEAP32[r15+8>>2]=HEAP32[r18+8>>2];r18=r8;r15=0;while(1){if(r15>>>0>=3){break}HEAP32[r18+(r15<<2)>>2]=0;r15=r15+1|0}r22=HEAP32[r21>>2]}HEAP32[r21>>2]=r22+12}else{__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(r14,r8)}do{if((HEAP8[r8]&1)!=0){r14=HEAP32[r8+8>>2];if((r14|0)==0){break}_free(r14)}}while(0);r8=HEAP32[r21>>2];r14=r8-12|0;if((HEAP8[r14]&1)==0){r23=r14+1|0}else{r23=HEAP32[r8-12+8>>2]}r8=_fsg_model_init(r23,HEAP32[r1+48>>2],1,HEAP32[r3+8>>2]);r23=r1+40|0;HEAP32[r23>>2]=r8;do{if((r8|0)==0){r24=3}else{HEAP32[r8+36>>2]=HEAP32[r3>>2];HEAP32[HEAP32[r23>>2]+40>>2]=HEAP32[r3+4>>2];r1=r3+16|0;r14=r3+12|0;r22=0;while(1){r15=HEAP32[r14>>2];if(r22>>>0>=((HEAP32[r1>>2]-r15|0)/24&-1)>>>0){break}r18=r15+(r22*24&-1)+12|0;r20=HEAP8[r18];r19=(r20&1)==0;if(r19){r25=(r20&255)>>>1}else{r25=HEAP32[r15+(r22*24&-1)+16>>2]}r20=HEAP32[r23>>2];r17=HEAP32[r15+(r22*24&-1)>>2];r26=HEAP32[r15+(r22*24&-1)+4>>2];r27=HEAP32[r15+(r22*24&-1)+8>>2];if((r25|0)==0){_fsg_model_null_trans_add(r20,r17,r26,r27)}else{if(r19){r28=r18+1|0}else{r28=HEAP32[r15+(r22*24&-1)+20>>2]}_fsg_model_trans_add(r20,r17,r26,r27,_fsg_model_word_add(r20,r28))}r22=r22+1|0}_fsg_model_add_silence(HEAP32[r23>>2],17448,1);r22=HEAP32[r21>>2];r1=r22-12|0;if((HEAP8[r1]&1)==0){r29=r1+1|0}else{r29=HEAP32[r22-12+8>>2]}if((_ps_set_fsg(HEAP32[r9>>2],r29,HEAP32[r23>>2])|0)!=0){r24=3;break}r22=r2+4|0;r1=HEAP32[r22>>2];r14=HEAP32[r2>>2];do{if((r1|0)==(r14|0)){if((r1|0)==(HEAP32[r2+8>>2]|0)){__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(r2,r6);break}if((r1|0)==0){r30=0}else{HEAP32[r1>>2]=HEAP32[r6>>2];r30=HEAP32[r22>>2]}HEAP32[r22>>2]=r30+4}else{HEAP32[r14>>2]=HEAP32[r6>>2]}}while(0);HEAP32[r6>>2]=HEAP32[r6>>2]+1;r14=HEAP32[r9>>2];r22=HEAP32[r21>>2];r1=r22-12|0;if((HEAP8[r1]&1)==0){r31=r1+1|0}else{r31=HEAP32[r22-12+8>>2]}HEAP32[r5>>2]=0;_hash_table_lookup(HEAP32[r14+24>>2],r31,r5);r22=HEAP32[r5>>2];if((r22|0)==0){r24=3;break}HEAP32[r14+28>>2]=r22;r24=0}}while(0);HEAP32[r11>>2]=55452;HEAP32[r13>>2]=55472;HEAP32[r12>>2]=55656;do{if((HEAP8[r16]&1)!=0){r13=HEAP32[r7+44>>2];if((r13|0)==0){break}_free(r13)}}while(0);HEAP32[r12>>2]=55800;r12=HEAP32[r7+8>>2];r16=r12+4|0;if(((tempValue=HEAP32[r16>>2],HEAP32[r16>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+8>>2]](r12|0)}__ZNSt3__18ios_baseD2Ev(r7+56|0);r10=r24;STACKTOP=r4;return r10}function __ZN14pocketsphinxjs10Recognizer10addKeywordERNSt3__16vectorIiNS1_9allocatorIiEEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r4=STACKTOP;STACKTOP=STACKTOP+176|0;r5=r4;r6=r4+8;r7=r4+24;r8=r4+160;r9=r1+44|0;if((HEAP32[r9>>2]|0)==0){r10=1;STACKTOP=r4;return r10}r11=r7|0;HEAP32[r11>>2]=64524;r12=r7;r13=r7+56|0;HEAP32[r13>>2]=64544;r14=HEAP32[HEAP32[r7>>2]-12>>2];HEAP32[r12+(r14+24)>>2]=r7+4;HEAP32[r12+(r14+16)>>2]=0;HEAP32[r12+(r14+20)>>2]=0;HEAP32[r12+(r14+4)>>2]=4098;HEAP32[r12+(r14+12)>>2]=0;HEAP32[r12+(r14+8)>>2]=6;_memset(r12+(r14+32)|0,0,40)|0;__ZNSt3__16localeC2Ev(r12+(r14+28)|0);HEAP32[r12+(r14+72)>>2]=0;HEAP32[r12+(r14+76)>>2]=-1;HEAP32[r11>>2]=55452;HEAP32[r7+56>>2]=55472;r14=r7+4|0;r12=r14|0;HEAP32[r12>>2]=55800;__ZNSt3__16localeC2Ev(r7+8|0);r15=r7+12|0;r16=r15;HEAP32[r16>>2]=0;HEAP32[r16+4>>2]=0;HEAP32[r16+8>>2]=0;HEAP32[r16+12>>2]=0;HEAP32[r16+16>>2]=0;HEAP32[r16+20>>2]=0;HEAP32[r12>>2]=55656;r16=r7+36|0;r17=r16;r18=0;while(1){if(r18>>>0>=3){break}HEAP32[r17+(r18<<2)>>2]=0;r18=r18+1|0}r18=r7+48|0;HEAP32[r18>>2]=0;r17=r7+52|0;HEAP32[r17>>2]=16;r19=r6;r20=0;while(1){if(r20>>>0>=3){break}HEAP32[r19+(r20<<2)>>2]=0;r20=r20+1|0}__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(r14,r6);do{if((HEAP8[r6]&1)!=0){r14=HEAP32[r6+8>>2];if((r14|0)==0){break}_free(r14)}}while(0);r6=r1+32|0;__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(r7,HEAP32[r6>>2]);r14=r1|0;r20=HEAP32[r17>>2];L18:do{if((r20&16|0)==0){if((r20&8|0)!=0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r8,HEAP32[r15>>2],HEAP32[r7+20>>2]);break}r17=r8;r19=0;while(1){if(r19>>>0>=3){break L18}HEAP32[r17+(r19<<2)>>2]=0;r19=r19+1|0}}else{r19=HEAP32[r18>>2];r17=HEAP32[r7+28>>2];if(r19>>>0<r17>>>0){HEAP32[r18>>2]=r17;r21=r17}else{r21=r19}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r8,HEAP32[r7+24>>2],r21)}}while(0);r21=r1+4|0;r18=HEAP32[r21>>2];if(r18>>>0<HEAP32[r1+8>>2]>>>0){if((r18|0)==0){r22=0}else{r1=r18;r18=r8;HEAP32[r1>>2]=HEAP32[r18>>2];HEAP32[r1+4>>2]=HEAP32[r18+4>>2];HEAP32[r1+8>>2]=HEAP32[r18+8>>2];r18=r8;r1=0;while(1){if(r1>>>0>=3){break}HEAP32[r18+(r1<<2)>>2]=0;r1=r1+1|0}r22=HEAP32[r21>>2]}HEAP32[r21>>2]=r22+12}else{__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(r14,r8)}do{if((HEAP8[r8]&1)!=0){r14=HEAP32[r8+8>>2];if((r14|0)==0){break}_free(r14)}}while(0);r8=HEAP32[r21>>2];r14=r8-12|0;if((HEAP8[r14]&1)==0){r23=r14+1|0}else{r23=HEAP32[r8-12+8>>2]}if((HEAP8[r3]&1)==0){r24=r3+1|0}else{r24=HEAP32[r3+8>>2]}do{if((_ps_set_kws(HEAP32[r9>>2],r23,r24)|0)==0){r3=r2+4|0;r8=HEAP32[r3>>2];r14=HEAP32[r2>>2];do{if((r8|0)==(r14|0)){if((r8|0)==(HEAP32[r2+8>>2]|0)){__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(r2,r6);break}if((r8|0)==0){r25=0}else{HEAP32[r8>>2]=HEAP32[r6>>2];r25=HEAP32[r3>>2]}HEAP32[r3>>2]=r25+4}else{HEAP32[r14>>2]=HEAP32[r6>>2]}}while(0);HEAP32[r6>>2]=HEAP32[r6>>2]+1;r14=HEAP32[r9>>2];r3=HEAP32[r21>>2];r8=r3-12|0;if((HEAP8[r8]&1)==0){r26=r8+1|0}else{r26=HEAP32[r3-12+8>>2]}HEAP32[r5>>2]=0;_hash_table_lookup(HEAP32[r14+24>>2],r26,r5);r3=HEAP32[r5>>2];if((r3|0)==0){r27=3;break}HEAP32[r14+28>>2]=r3;r27=0}else{r27=3}}while(0);HEAP32[r11>>2]=55452;HEAP32[r13>>2]=55472;HEAP32[r12>>2]=55656;do{if((HEAP8[r16]&1)!=0){r13=HEAP32[r7+44>>2];if((r13|0)==0){break}_free(r13)}}while(0);HEAP32[r12>>2]=55800;r12=HEAP32[r7+8>>2];r16=r12+4|0;if(((tempValue=HEAP32[r16>>2],HEAP32[r16>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r12>>2]+8>>2]](r12|0)}__ZNSt3__18ios_baseD2Ev(r7+56|0);r10=r27;STACKTOP=r4;return r10}function __ZN14pocketsphinxjs10Recognizer13switchGrammarEi(r1,r2){return __ZN14pocketsphinxjs10Recognizer12switchSearchEi(r1,r2)}function __ZN14pocketsphinxjs10Recognizer12switchSearchEi(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r3=STACKTOP;STACKTOP=STACKTOP+176|0;r4=r3;r5=r3+8;r6=r3+24;r7=r3+160;r8=r1+44|0;if((HEAP32[r8>>2]|0)==0){r9=1;STACKTOP=r3;return r9}r1=r6|0;HEAP32[r1>>2]=64524;r10=r6;r11=r6+56|0;HEAP32[r11>>2]=64544;r12=HEAP32[HEAP32[r6>>2]-12>>2];HEAP32[r10+(r12+24)>>2]=r6+4;HEAP32[r10+(r12+16)>>2]=0;HEAP32[r10+(r12+20)>>2]=0;HEAP32[r10+(r12+4)>>2]=4098;HEAP32[r10+(r12+12)>>2]=0;HEAP32[r10+(r12+8)>>2]=6;_memset(r10+(r12+32)|0,0,40)|0;__ZNSt3__16localeC2Ev(r10+(r12+28)|0);HEAP32[r10+(r12+72)>>2]=0;HEAP32[r10+(r12+76)>>2]=-1;HEAP32[r1>>2]=55452;HEAP32[r6+56>>2]=55472;r12=r6+4|0;r10=r12|0;HEAP32[r10>>2]=55800;__ZNSt3__16localeC2Ev(r6+8|0);r13=r6+12|0;r14=r13;HEAP32[r14>>2]=0;HEAP32[r14+4>>2]=0;HEAP32[r14+8>>2]=0;HEAP32[r14+12>>2]=0;HEAP32[r14+16>>2]=0;HEAP32[r14+20>>2]=0;HEAP32[r10>>2]=55656;r14=r6+36|0;r15=r14;r16=0;while(1){if(r16>>>0>=3){break}HEAP32[r15+(r16<<2)>>2]=0;r16=r16+1|0}r16=r6+48|0;HEAP32[r16>>2]=0;r15=r6+52|0;HEAP32[r15>>2]=16;r17=r5;r18=0;while(1){if(r18>>>0>=3){break}HEAP32[r17+(r18<<2)>>2]=0;r18=r18+1|0}__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(r12,r5);do{if((HEAP8[r5]&1)!=0){r12=HEAP32[r5+8>>2];if((r12|0)==0){break}_free(r12)}}while(0);__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(r6,r2);r2=HEAP32[r8>>2];r8=HEAP32[r15>>2];L18:do{if((r8&16|0)==0){if((r8&8|0)!=0){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r7,HEAP32[r13>>2],HEAP32[r6+20>>2]);break}r15=r7;r5=0;while(1){if(r5>>>0>=3){break L18}HEAP32[r15+(r5<<2)>>2]=0;r5=r5+1|0}}else{r5=HEAP32[r16>>2];r15=HEAP32[r6+28>>2];if(r5>>>0<r15>>>0){HEAP32[r16>>2]=r15;r19=r15}else{r19=r5}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r7,HEAP32[r6+24>>2],r19)}}while(0);r19=r7;if((HEAP8[r19]&1)==0){r20=r7+1|0}else{r20=HEAP32[r7+8>>2]}HEAP32[r4>>2]=0;_hash_table_lookup(HEAP32[r2+24>>2],r20,r4);r20=HEAP32[r4>>2];if((r20|0)!=0){HEAP32[r2+28>>2]=r20}r2=(r20|0)==0;do{if((HEAP8[r19]&1)!=0){r20=HEAP32[r7+8>>2];if((r20|0)==0){break}_free(r20)}}while(0);r7=r2?3:0;HEAP32[r1>>2]=55452;HEAP32[r11>>2]=55472;HEAP32[r10>>2]=55656;do{if((HEAP8[r14]&1)!=0){r11=HEAP32[r6+44>>2];if((r11|0)==0){break}_free(r11)}}while(0);HEAP32[r10>>2]=55800;r10=HEAP32[r6+8>>2];r14=r10+4|0;if(((tempValue=HEAP32[r14>>2],HEAP32[r14>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r10>>2]+8>>2]](r10|0)}__ZNSt3__18ios_baseD2Ev(r6+56|0);r9=r7;STACKTOP=r3;return r9}function __ZN14pocketsphinxjs10Recognizer6getHypEv(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r3=0;r4=r2+16|0;if((HEAP8[r4]&1)==0){r5=r1;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2];return}r4=HEAP32[r2+24>>2];r5=HEAP32[r2+20>>2];if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r6=r1+1|0}else{r2=r5+16&-16;r7=(r2|0)==0?1:r2;while(1){r8=_malloc(r7);if((r8|0)!=0){r3=18;break}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}if(r3==18){HEAP32[r1+8>>2]=r8;HEAP32[r1>>2]=r2|1;HEAP32[r1+4>>2]=r5;r6=r8;break}r7=___cxa_allocate_exception(4);HEAP32[r7>>2]=53824;___cxa_throw(r7,62184,110)}}while(0);_memcpy(r6,r4,r5)|0;HEAP8[r6+r5|0]=0;return}function __ZN14pocketsphinxjs10Recognizer9getHypsegERNSt3__16vectorINS_7SegItemENS1_9allocatorIS3_EEEE(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r3=STACKTOP;STACKTOP=STACKTOP+336|0;r4=r3;r5=r3+8;r6=r3+144;r7=r3+152;r8=r3+288;r9=r3+296;r10=r3+312;r11=r1+44|0;if((HEAP32[r11>>2]|0)==0){r12=1;STACKTOP=r3;return r12}if((HEAP8[r1+13|0]&1)!=0){r12=1;STACKTOP=r3;return r12}r1=HEAP32[r2>>2];r13=r2+4|0;while(1){r14=HEAP32[r13>>2];if((r1|0)==(r14|0)){break}r15=r14-20|0;HEAP32[r13>>2]=r15;if((HEAP8[r15]&1)==0){continue}r15=HEAP32[r14-20+8>>2];if((r15|0)==0){continue}_free(r15)}HEAP32[r8>>2]=0;r1=r9;r15=0;while(1){if(r15>>>0>=3){break}HEAP32[r1+(r15<<2)>>2]=0;r15=r15+1|0}r15=HEAP32[r11>>2];_getrusage(0,r7);r11=r15+88|0;HEAPF64[r11>>3]=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6+((HEAP32[r7+8>>2]|0)+(HEAP32[r7+12>>2]|0)*1e-6);_gettimeofday(r6,0);r7=r15+96|0;HEAPF64[r7>>3]=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6;r6=HEAP32[r15+28>>2];r1=FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+36>>2]](r6,r8);_getrusage(0,r5);r8=(HEAP32[r5>>2]|0)+(HEAP32[r5+4>>2]|0)*1e-6+((HEAP32[r5+8>>2]|0)+(HEAP32[r5+12>>2]|0)*1e-6)-HEAPF64[r11>>3];_gettimeofday(r4,0);r11=(HEAP32[r4>>2]|0)+(HEAP32[r4+4>>2]|0)*1e-6-HEAPF64[r7>>3];r7=r15+56|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]+r8;r7=r15+64|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]+r11;r7=r15+72|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]+r8;r8=r15+80|0;HEAPF64[r8>>3]=HEAPF64[r8>>3]+r11;r11=r10;r8=r10|0;r15=r10+12|0;r7=r10+16|0;r4=r2+8|0;r5=r10;r6=r10+8|0;r14=r1;while(1){if((r14|0)==0){break}else{r16=0}while(1){if(r16>>>0>=3){break}HEAP32[r11+(r16<<2)>>2]=0;r16=r16+1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(r8,HEAP32[r14+8>>2]);r1=HEAP32[r14+16>>2];HEAP32[r15>>2]=HEAP32[r14+12>>2];HEAP32[r7>>2]=r1;r1=HEAP32[r13>>2];if((r1|0)==(HEAP32[r4>>2]|0)){__ZNSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(r2,r10)}else{if((r1|0)==0){r17=0}else{__ZN14pocketsphinxjs7SegItemC1ERKS0_(r1,r10);r17=HEAP32[r13>>2]}HEAP32[r13>>2]=r17+20}r1=FUNCTION_TABLE[HEAP32[HEAP32[r14>>2]>>2]](r14);if((HEAP8[r5]&1)==0){r14=r1;continue}r18=HEAP32[r6>>2];if((r18|0)==0){r14=r1;continue}_free(r18);r14=r1}if((HEAP8[r9]&1)==0){r12=0;STACKTOP=r3;return r12}r14=HEAP32[r9+8>>2];if((r14|0)==0){r12=0;STACKTOP=r3;return r12}_free(r14);r12=0;STACKTOP=r3;return r12}function __ZN14pocketsphinxjs10Recognizer8getCountEv(r1){return HEAP32[r1+28>>2]}function __ZN14pocketsphinxjs10Recognizer5startEv(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+304|0;r4=r3;r5=r3+8;r6=r3+72;r7=r3+136;r8=r3+144;r9=r3+152;r10=HEAP32[r1+44>>2];if((r10|0)==0){r11=1;STACKTOP=r3;return r11}r12=r1+13|0;if((HEAP8[r12]&1)!=0){r11=1;STACKTOP=r3;return r11}r13=r3+288|0;r14=r10+28|0;if((HEAP32[r14>>2]|0)==0){_err_msg(4,49568,802,19632,(r2=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r2>>2]=0,r2));STACKTOP=r2;r11=3;STACKTOP=r3;return r11}HEAPF64[r10+56>>3]=0;HEAPF64[r10+64>>3]=0;_getrusage(0,r9);HEAPF64[r10+88>>3]=(HEAP32[r9>>2]|0)+(HEAP32[r9+4>>2]|0)*1e-6+((HEAP32[r9+8>>2]|0)+(HEAP32[r9+12>>2]|0)*1e-6);_gettimeofday(r8,0);HEAPF64[r10+96>>3]=(HEAP32[r8>>2]|0)+(HEAP32[r8+4>>2]|0)*1e-6;r8=r10+44|0;_free(HEAP32[r8>>2]);r9=r10+40|0;_sprintf(r13,19088,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=HEAP32[r9>>2],r2));STACKTOP=r2;r15=___ckd_salloc__(r13,49568,817);HEAP32[r8>>2]=r15;HEAP32[r9>>2]=HEAP32[r9>>2]+1;_ps_lattice_free(HEAP32[HEAP32[r14>>2]+28>>2]);HEAP32[HEAP32[r14>>2]+28>>2]=0;HEAP32[HEAP32[r14>>2]+32>>2]=0;HEAP32[HEAP32[r14>>2]+36>>2]=0;_free(HEAP32[HEAP32[r14>>2]+24>>2]);HEAP32[HEAP32[r14>>2]+24>>2]=0;r9=r10+8|0;r15=HEAP32[r9>>2];r8=HEAP32[r15+12>>2];HEAP16[r8+96>>1]=0;_memset(HEAP32[r8+92>>2],0,HEAP16[r8+24>>1]<<1)|0;HEAP8[r8+50|0]=1;HEAP16[r8+98>>1]=0;r13=HEAP32[r8+68>>2];if((r13|0)!=0){HEAP8[r13+16|0]=1}r13=HEAP32[r8+72>>2];HEAP8[r13|0]=1;HEAP8[r13+1|0]=0;HEAP8[r13+2|0]=0;r8=r13+4|0;r16=r8|0;tempBigInt=0;HEAP16[r16>>1]=tempBigInt;HEAP16[r16+2>>1]=tempBigInt>>16;r16=r8+4|0;tempBigInt=0;HEAP16[r16>>1]=tempBigInt;HEAP16[r16+2>>1]=tempBigInt>>16;r16=HEAP32[r13+12>>2];HEAP16[r16+12>>1]=0;HEAP16[r16+10>>1]=0;HEAP8[r15+88|0]=1;HEAP32[r15+100>>2]=0;HEAP32[r15+112>>2]=0;HEAP32[r15+104>>2]=0;HEAP32[r15+116>>2]=0;HEAP32[r15+92>>2]=0;HEAP32[r15+48>>2]=-1;HEAP32[r15+52>>2]=0;HEAP32[HEAP32[r15+28>>2]+4>>2]=0;r15=HEAP32[r10+108>>2];if((r15|0)!=0){r16=HEAP32[r10+44>>2];r13=_string_join(r15,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=30928,HEAP32[r2+8>>2]=r16,HEAP32[r2+16>>2]=17856,HEAP32[r2+24>>2]=0,r2));STACKTOP=r2;_err_msg(1,49568,836,17328,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=r13,r2));STACKTOP=r2;r16=_fopen(r13,17136);if((r16|0)==0){r15=___errno_location();r8=HEAP32[r15>>2];r15=_malloc(37);_memcpy(r15,16816,32)|0;r17=r15+_strlen(r15)|0;HEAP8[r17]=HEAP8[6400];HEAP8[r17+1|0]=HEAP8[6401];HEAP8[r17+2|0]=HEAP8[6402];HEAP8[r17+3|0]=HEAP8[6403];HEAP8[r17+4|0]=HEAP8[6404];HEAP8[r17+5|0]=HEAP8[6405];r17=_strerror(r8);_err_msg(4,49568,838,r15,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r13,HEAP32[r2+8>>2]=r17,r2));STACKTOP=r2;_free(r15);_free(r13);r11=3;STACKTOP=r3;return r11}_free(r13);r13=HEAP32[r9>>2];HEAP32[r7>>2]=0;r15=r13+72|0;r13=HEAP32[r15>>2];if((r13|0)!=0){_fclose(r13)}HEAP32[r15>>2]=r16;_fwrite(r7,4,1,r16)}r16=HEAP32[r10+112>>2];if((r16|0)!=0){r7=HEAP32[r10+44>>2];r15=_string_join(r16,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=30928,HEAP32[r2+8>>2]=r7,HEAP32[r2+16>>2]=16184,HEAP32[r2+24>>2]=0,r2));STACKTOP=r2;_err_msg(1,49568,849,15976,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=r15,r2));STACKTOP=r2;r7=_fopen(r15,17136);if((r7|0)==0){r16=___errno_location();r13=HEAP32[r16>>2];r16=_malloc(42);_memcpy(r16,15752,37)|0;r17=r16+_strlen(r16)|0;HEAP8[r17]=HEAP8[6400];HEAP8[r17+1|0]=HEAP8[6401];HEAP8[r17+2|0]=HEAP8[6402];HEAP8[r17+3|0]=HEAP8[6403];HEAP8[r17+4|0]=HEAP8[6404];HEAP8[r17+5|0]=HEAP8[6405];r17=_strerror(r13);_err_msg(4,49568,851,r16,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r15,HEAP32[r2+8>>2]=r17,r2));STACKTOP=r2;_free(r16);_free(r15);r11=3;STACKTOP=r3;return r11}_free(r15);r15=HEAP32[r9>>2]+68|0;r16=HEAP32[r15>>2];if((r16|0)!=0){_fclose(r16)}HEAP32[r15>>2]=r7}r7=HEAP32[r10+116>>2];if((r7|0)!=0){r15=HEAP32[r10+44>>2];r16=_string_join(r7,(r2=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r2>>2]=30928,HEAP32[r2+8>>2]=r15,HEAP32[r2+16>>2]=15560,HEAP32[r2+24>>2]=0,r2));STACKTOP=r2;_err_msg(1,49568,862,15352,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=r16,r2));STACKTOP=r2;r15=_fopen(r16,17136);if((r15|0)==0){r7=___errno_location();r17=HEAP32[r7>>2];r7=_malloc(45);_memcpy(r7,14712,40)|0;r13=r7+_strlen(r7)|0;HEAP8[r13]=HEAP8[6400];HEAP8[r13+1|0]=HEAP8[6401];HEAP8[r13+2|0]=HEAP8[6402];HEAP8[r13+3|0]=HEAP8[6403];HEAP8[r13+4|0]=HEAP8[6404];HEAP8[r13+5|0]=HEAP8[6405];r13=_strerror(r17);_err_msg(4,49568,864,r7,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r16,HEAP32[r2+8>>2]=r13,r2));STACKTOP=r2;_free(r7);_free(r16);r11=3;STACKTOP=r3;return r11}_free(r16);r16=HEAP32[r9>>2];r9=r16+76|0;r7=HEAP32[r9>>2];if((r7|0)!=0){_fclose(r7)}HEAP32[r9>>2]=r15;r9=r5|0;r5=r6|0;_sprintf(r9,40592,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=HEAP32[HEAP32[r16+20>>2]+20>>2],r2));STACKTOP=r2;_sprintf(r5,21656,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r2>>3]=HEAPF64[HEAP32[r16+4>>2]+24>>3],r2));STACKTOP=r2;do{if((_hash_table_lookup(HEAP32[HEAP32[r16>>2]+4>>2],40168,r4)|0)<0){_err_msg(4,45384,945,22936,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=40168,r2));STACKTOP=r2;r18=0}else{r6=HEAP32[r4>>2];if((r6|0)==0){r18=0;break}r18=HEAP32[r6>>2]}}while(0);_bio_writehdr(r15,(r2=STACKTOP,STACKTOP=STACKTOP+72|0,HEAP32[r2>>2]=45992,HEAP32[r2+8>>2]=8064,HEAP32[r2+16>>2]=45768,HEAP32[r2+24>>2]=r18,HEAP32[r2+32>>2]=42696,HEAP32[r2+40>>2]=r9,HEAP32[r2+48>>2]=41600,HEAP32[r2+56>>2]=r5,HEAP32[r2+64>>2]=0,r2));STACKTOP=r2}r2=HEAP32[r10+32>>2];if((r2|0)!=0){FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+4>>2]](r2)}r2=HEAP32[r14>>2];if((FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+4>>2]](r2)|0)<0){r11=3;STACKTOP=r3;return r11}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(r1+16|0,67928);HEAP32[r1+28>>2]=0;HEAP8[r12]=1;r11=0;STACKTOP=r3;return r11}function __ZN14pocketsphinxjs10Recognizer4stopEv(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+1472|0;r4=r3;r5=r3+8;r6=r3+144;r7=r3+152;r8=r3+288;r9=r3+296;r10=r3+432;r11=r3+440;r12=r3+576;r13=r3+584;r14=r3+720;r15=r3+728;r16=r3+864;r17=r3+872;r18=r3+880;r19=r3+1016;r20=r3+1024;r21=r3+1160;r22=r3+1168;r23=r3+1304;r24=r3+1312;r25=r3+1448;r26=r3+1456;r27=r3+1464;r28=r1+44|0;r29=HEAP32[r28>>2];if((r29|0)==0){r30=1;STACKTOP=r3;return r30}r31=r1+13|0;if((HEAP8[r31]&1)==0){r30=1;STACKTOP=r3;return r30}r32=r29+8|0;r33=HEAP32[r32>>2];r34=r26;HEAP32[r25>>2]=0;HEAP8[r33+88|0]=3;r35=r33+100|0;r36=HEAP32[r35>>2];r37=HEAP32[r33+96>>2];do{if((r36|0)<(r37|0)){_fe_end_utt(HEAP32[r33+12>>2],HEAP32[HEAP32[r33+60>>2]+(((HEAP32[r33+104>>2]+r36|0)%(r37|0)&-1)<<2)>>2],r25);r38=HEAP32[r25>>2];HEAP32[r35>>2]=HEAP32[r35>>2]+r38;if((r38|0)==0){break}r38=_acmod_process_mfcbuf(r33);HEAP32[r25>>2]=r38}}while(0);r25=r33+72|0;r35=HEAP32[r25>>2];if((r35|0)!=0){r37=(_ftell(r35)-4|0)/4&-1;HEAP32[r26>>2]=r37;if((_fseek(HEAP32[r25>>2],0,0)|0)==0){_fwrite(r34,4,1,HEAP32[r25>>2])}_fclose(HEAP32[r25>>2]);HEAP32[r25>>2]=0}r25=r33+68|0;r34=HEAP32[r25>>2];if((r34|0)!=0){_fclose(r34);HEAP32[r25>>2]=0}r25=r33+76|0;r33=HEAP32[r25>>2];if((r33|0)!=0){_fclose(r33);HEAP32[r25>>2]=0}if((_ps_search_forward(r29)|0)<0){_getrusage(0,r24);r25=(HEAP32[r24>>2]|0)+(HEAP32[r24+4>>2]|0)*1e-6+((HEAP32[r24+8>>2]|0)+(HEAP32[r24+12>>2]|0)*1e-6)-HEAPF64[r29+88>>3];_gettimeofday(r23,0);r24=(HEAP32[r23>>2]|0)+(HEAP32[r23+4>>2]|0)*1e-6-HEAPF64[r29+96>>3];r23=r29+56|0;HEAPF64[r23>>3]=HEAPF64[r23>>3]+r25;r23=r29+64|0;HEAPF64[r23>>3]=HEAPF64[r23>>3]+r24;r23=r29+72|0;HEAPF64[r23>>3]=HEAPF64[r23>>3]+r25;r25=r29+80|0;HEAPF64[r25>>3]=HEAPF64[r25>>3]+r24;r30=3;STACKTOP=r3;return r30}r24=HEAP32[r29+32>>2];do{if((r24|0)!=0){if((FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+12>>2]](r24)|0)>=0){break}_getrusage(0,r22);r25=(HEAP32[r22>>2]|0)+(HEAP32[r22+4>>2]|0)*1e-6+((HEAP32[r22+8>>2]|0)+(HEAP32[r22+12>>2]|0)*1e-6)-HEAPF64[r29+88>>3];_gettimeofday(r21,0);r23=(HEAP32[r21>>2]|0)+(HEAP32[r21+4>>2]|0)*1e-6-HEAPF64[r29+96>>3];r33=r29+56|0;HEAPF64[r33>>3]=HEAPF64[r33>>3]+r25;r33=r29+64|0;HEAPF64[r33>>3]=HEAPF64[r33>>3]+r23;r33=r29+72|0;HEAPF64[r33>>3]=HEAPF64[r33>>3]+r25;r25=r29+80|0;HEAPF64[r25>>3]=HEAPF64[r25>>3]+r23;r30=3;STACKTOP=r3;return r30}}while(0);r21=HEAP32[HEAP32[r32>>2]+92>>2];r22=r29+28|0;r24=r21-HEAP32[r29+36>>2]|0;r23=r21;while(1){r39=HEAP32[r22>>2];r40=HEAP32[r39>>2];if((r24|0)>=(r23|0)){break}FUNCTION_TABLE[HEAP32[r40+8>>2]](r39,r24);r24=r24+1|0;r23=HEAP32[HEAP32[r32>>2]+92>>2]}r32=FUNCTION_TABLE[HEAP32[r40+12>>2]](r39);if((r32|0)<0){_getrusage(0,r20);r39=(HEAP32[r20>>2]|0)+(HEAP32[r20+4>>2]|0)*1e-6+((HEAP32[r20+8>>2]|0)+(HEAP32[r20+12>>2]|0)*1e-6)-HEAPF64[r29+88>>3];_gettimeofday(r19,0);r20=(HEAP32[r19>>2]|0)+(HEAP32[r19+4>>2]|0)*1e-6-HEAPF64[r29+96>>3];r19=r29+56|0;HEAPF64[r19>>3]=HEAPF64[r19>>3]+r39;r19=r29+64|0;HEAPF64[r19>>3]=HEAPF64[r19>>3]+r20;r19=r29+72|0;HEAPF64[r19>>3]=HEAPF64[r19>>3]+r39;r39=r29+80|0;HEAPF64[r39>>3]=HEAPF64[r39>>3]+r20;r30=3;STACKTOP=r3;return r30}_getrusage(0,r18);r20=r29+88|0;r39=(HEAP32[r18>>2]|0)+(HEAP32[r18+4>>2]|0)*1e-6+((HEAP32[r18+8>>2]|0)+(HEAP32[r18+12>>2]|0)*1e-6)-HEAPF64[r20>>3];_gettimeofday(r17,0);r18=r29+96|0;r19=(HEAP32[r17>>2]|0)+(HEAP32[r17+4>>2]|0)*1e-6-HEAPF64[r18>>3];r17=r29+56|0;HEAPF64[r17>>3]=HEAPF64[r17>>3]+r39;r40=r29+64|0;HEAPF64[r40>>3]=HEAPF64[r40>>3]+r19;r23=r29+72|0;HEAPF64[r23>>3]=HEAPF64[r23>>3]+r39;r39=r29+80|0;HEAPF64[r39>>3]=HEAPF64[r39>>3]+r19;do{if((_hash_table_lookup(HEAP32[HEAP32[r29>>2]+4>>2],14048,r16)|0)<0){_err_msg(4,45384,945,22936,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=14048,r2));STACKTOP=r2}else{r19=HEAP32[r16>>2];L43:do{if((r19|0)==0){r41=r32}else{if((HEAP32[r19>>2]|0)==0){r41=r32;break}_getrusage(0,r9);HEAPF64[r20>>3]=(HEAP32[r9>>2]|0)+(HEAP32[r9+4>>2]|0)*1e-6+((HEAP32[r9+8>>2]|0)+(HEAP32[r9+12>>2]|0)*1e-6);_gettimeofday(r8,0);HEAPF64[r18>>3]=(HEAP32[r8>>2]|0)+(HEAP32[r8+4>>2]|0)*1e-6;r24=HEAP32[r22>>2];r21=FUNCTION_TABLE[HEAP32[HEAP32[r24>>2]+28>>2]](r24,r27,0);r24=HEAP32[r29+44>>2];_getrusage(0,r15);r25=(HEAP32[r15>>2]|0)+(HEAP32[r15+4>>2]|0)*1e-6+((HEAP32[r15+8>>2]|0)+(HEAP32[r15+12>>2]|0)*1e-6)-HEAPF64[r20>>3];_gettimeofday(r14,0);r33=(HEAP32[r14>>2]|0)+(HEAP32[r14+4>>2]|0)*1e-6-HEAPF64[r18>>3];HEAPF64[r17>>3]=HEAPF64[r17>>3]+r25;HEAPF64[r40>>3]=HEAPF64[r40>>3]+r33;HEAPF64[r23>>3]=HEAPF64[r23>>3]+r25;HEAPF64[r39>>3]=HEAPF64[r39>>3]+r33;r33=HEAP32[r27>>2];_err_msg(1,49568,1027,13832,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=r24,HEAP32[r2+8>>2]=r21,HEAP32[r2+16>>2]=r33,r2));STACKTOP=r2;_err_msg(1,0,0,13576,(r2=STACKTOP,STACKTOP=STACKTOP+56|0,HEAP32[r2>>2]=13456,HEAP32[r2+8>>2]=13248,HEAP32[r2+16>>2]=12976,HEAP32[r2+24>>2]=12800,HEAP32[r2+32>>2]=12472,HEAP32[r2+40>>2]=11880,HEAP32[r2+48>>2]=11360,r2));STACKTOP=r2;_getrusage(0,r13);HEAPF64[r20>>3]=(HEAP32[r13>>2]|0)+(HEAP32[r13+4>>2]|0)*1e-6+((HEAP32[r13+8>>2]|0)+(HEAP32[r13+12>>2]|0)*1e-6);_gettimeofday(r12,0);HEAPF64[r18>>3]=(HEAP32[r12>>2]|0)+(HEAP32[r12+4>>2]|0)*1e-6;r33=HEAP32[r22>>2];r21=FUNCTION_TABLE[HEAP32[HEAP32[r33>>2]+36>>2]](r33,r27);_getrusage(0,r11);r33=(HEAP32[r11>>2]|0)+(HEAP32[r11+4>>2]|0)*1e-6+((HEAP32[r11+8>>2]|0)+(HEAP32[r11+12>>2]|0)*1e-6)-HEAPF64[r20>>3];_gettimeofday(r10,0);r24=(HEAP32[r10>>2]|0)+(HEAP32[r10+4>>2]|0)*1e-6-HEAPF64[r18>>3];HEAPF64[r17>>3]=HEAPF64[r17>>3]+r33;HEAPF64[r40>>3]=HEAPF64[r40>>3]+r24;HEAPF64[r23>>3]=HEAPF64[r23>>3]+r33;HEAPF64[r39>>3]=HEAPF64[r39>>3]+r24;r24=r29+20|0;r33=r21;while(1){if((r33|0)==0){r41=r32;break L43}r21=HEAP32[r33+12>>2];r25=HEAP32[r33+16>>2];r34=HEAP32[r33+20>>2];r37=HEAP32[r33+24>>2];r26=HEAP32[r33+32>>2];r35=HEAP32[r24>>2];r36=Math_pow(HEAPF64[r35+24>>3],HEAP32[r33+28>>2]<<HEAP8[r35+9|0]|0);_err_msg(1,0,0,11184,(r2=STACKTOP,STACKTOP=STACKTOP+56|0,HEAP32[r2>>2]=HEAP32[r33+8>>2],HEAP32[r2+8>>2]=r21,HEAP32[r2+16>>2]=r25,HEAPF64[r2+24>>3]=r36,HEAP32[r2+32>>2]=r34,HEAP32[r2+40>>2]=r37,HEAP32[r2+48>>2]=r26,r2));STACKTOP=r2;r33=FUNCTION_TABLE[HEAP32[HEAP32[r33>>2]>>2]](r33)}}}while(0);if((r41|0)<0){r30=3}else{break}STACKTOP=r3;return r30}}while(0);r41=HEAP32[r28>>2];_getrusage(0,r5);r28=r41+88|0;HEAPF64[r28>>3]=(HEAP32[r5>>2]|0)+(HEAP32[r5+4>>2]|0)*1e-6+((HEAP32[r5+8>>2]|0)+(HEAP32[r5+12>>2]|0)*1e-6);_gettimeofday(r4,0);r5=r41+96|0;HEAPF64[r5>>3]=(HEAP32[r4>>2]|0)+(HEAP32[r4+4>>2]|0)*1e-6;r4=HEAP32[r41+28>>2];r2=FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+28>>2]](r4,r1+28|0,0);HEAP32[r1+36>>2]=HEAP32[r41+44>>2];_getrusage(0,r7);r4=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6+((HEAP32[r7+8>>2]|0)+(HEAP32[r7+12>>2]|0)*1e-6)-HEAPF64[r28>>3];_gettimeofday(r6,0);r28=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6-HEAPF64[r5>>3];r5=r41+56|0;HEAPF64[r5>>3]=HEAPF64[r5>>3]+r4;r5=r41+64|0;HEAPF64[r5>>3]=HEAPF64[r5>>3]+r28;r5=r41+72|0;HEAPF64[r5>>3]=HEAPF64[r5>>3]+r4;r4=r41+80|0;HEAPF64[r4>>3]=HEAPF64[r4>>3]+r28;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(r1+16|0,(r2|0)==0?67928:r2);HEAP8[r31]=0;r30=0;STACKTOP=r3;return r30}function __ZN14pocketsphinxjs10Recognizer7processERKNSt3__16vectorIsNS1_9allocatorIsEEEE(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+320|0;r6=r5;r7=r5+8;r8=r5+144;r9=r5+152;r10=r5+288;r11=r5+296;r12=r5+304;r13=r5+312;r14=r1+44|0;r15=HEAP32[r14>>2];if((r15|0)==0){r16=1;STACKTOP=r5;return r16}if((HEAP8[r1+13|0]&1)==0){r16=1;STACKTOP=r5;return r16}r17=HEAP32[r2+4>>2];r18=HEAP32[r2>>2];if((r17|0)==(r18|0)){r16=3;STACKTOP=r5;return r16}HEAP32[r12>>2]=r18;HEAP32[r13>>2]=r17-r18>>1;r18=r15+8|0;L10:do{if((HEAP8[HEAP32[r18>>2]+88|0]|0)==0){_err_msg(4,49568,933,14320,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4}else{while(1){if((HEAP32[r13>>2]|0)==0){break L10}r17=HEAP32[r18>>2];r2=HEAP32[r12>>2];r19=r17+96|0;r20=HEAP32[r19>>2];r21=r17+100|0;r22=HEAP32[r21>>2];r23=r20-r22|0;HEAP32[r10>>2]=r23;r24=r17+12|0;r25=r17+60|0;r26=r17+68|0;r27=r2;r2=(HEAP32[r17+104>>2]+r22|0)%(r20|0)&-1;r22=r23;r23=r20;while(1){if((r2+r22|0)<=(r23|0)){r3=14;break}HEAP32[r11>>2]=r23-r2;if((_fe_process_frames(HEAP32[r24>>2],r12,r13,HEAP32[r25>>2]+(r2<<2)|0,r11)|0)<0){break L10}r20=HEAP32[r26>>2];if((r20|0)==0){r28=r27;r29=r22}else{_fwrite(r27,2,HEAP32[r12>>2]-r27>>1,r20);r28=HEAP32[r12>>2];r29=HEAP32[r10>>2]}r20=HEAP32[r11>>2];HEAP32[r21>>2]=HEAP32[r21>>2]+r20;r30=r29-r20|0;HEAP32[r10>>2]=r30;r31=HEAP32[r19>>2];if((r20|0)==0){break}else{r27=r28;r2=(r2+r20|0)%(r31|0)&-1;r22=r30;r23=r31}}if(r3==14){r3=0;if((_fe_process_frames(HEAP32[r24>>2],r12,r13,HEAP32[r25>>2]+(r2<<2)|0,r10)|0)<0){break L10}r23=HEAP32[r26>>2];if((r23|0)!=0){_fwrite(r27,2,HEAP32[r12>>2]-r27>>1,r23)}HEAP32[r21>>2]=HEAP32[r21>>2]+HEAP32[r10>>2]}if((_acmod_process_mfcbuf(r17)|0)<0){break L10}if((_ps_search_forward(r15)|0)<0){break}}}}while(0);r15=HEAP32[r14>>2];_getrusage(0,r7);r14=r15+88|0;HEAPF64[r14>>3]=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6+((HEAP32[r7+8>>2]|0)+(HEAP32[r7+12>>2]|0)*1e-6);_gettimeofday(r6,0);r7=r15+96|0;HEAPF64[r7>>3]=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6;r6=HEAP32[r15+28>>2];r10=FUNCTION_TABLE[HEAP32[HEAP32[r6>>2]+28>>2]](r6,r1+28|0,0);HEAP32[r1+36>>2]=HEAP32[r15+44>>2];_getrusage(0,r9);r6=(HEAP32[r9>>2]|0)+(HEAP32[r9+4>>2]|0)*1e-6+((HEAP32[r9+8>>2]|0)+(HEAP32[r9+12>>2]|0)*1e-6)-HEAPF64[r14>>3];_gettimeofday(r8,0);r14=(HEAP32[r8>>2]|0)+(HEAP32[r8+4>>2]|0)*1e-6-HEAPF64[r7>>3];r7=r15+56|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]+r6;r7=r15+64|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]+r14;r7=r15+72|0;HEAPF64[r7>>3]=HEAPF64[r7>>3]+r6;r6=r15+80|0;HEAPF64[r6>>3]=HEAPF64[r6>>3]+r14;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(r1+16|0,(r10|0)==0?67928:r10);r16=0;STACKTOP=r5;return r16}function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1Ej(r1){var r2,r3,r4,r5,r6,r7;r2=0;r3=r1|0;HEAP32[r3>>2]=0;r4=r1+4|0;HEAP32[r4>>2]=0;r5=r1+8|0;HEAP32[r5>>2]=0;while(1){r6=_malloc(12e3);if((r6|0)!=0){break}r1=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r1|0)==0){r2=10;break}FUNCTION_TABLE[r1]()}if(r2==10){r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}r2=r6;HEAP32[r4>>2]=r2;HEAP32[r3>>2]=r2;HEAP32[r5>>2]=r6+12e3;r6=1e3;r5=r2;while(1){if((r5|0)==0){r7=0}else{r2=r5;r3=0;while(1){if(r3>>>0>=3){break}HEAP32[r2+(r3<<2)>>2]=0;r3=r3+1|0}r7=HEAP32[r4>>2]}r3=r7+12|0;HEAP32[r4>>2]=r3;r2=r6-1|0;if((r2|0)==0){break}else{r6=r2;r5=r3}}return}function __ZN14pocketsphinxjs10Recognizer4initERKNSt3__16vectorINS_10ConfigItemENS1_9allocatorIS3_EEEE(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+264|0;r6=r5;r7=r5+8;r8=r5+16;r9=r5+24;r10=r5+32;r11=r5+40;r12=r5+56;r13=r5+72;r14=r5+88;r15=r5+96;r16=r5+104;r17=r5+112;r18=r5+120;r19=r5+136;r20=r5+152;r21=r5+168;r22=r5+184;r23=r5+200;r24=r5+216;r25=r5+232;r26=r5+248;r27=r18;HEAP8[r27]=14;r28=r18+1|0;HEAP8[r28]=HEAP8[20120];HEAP8[r28+1|0]=HEAP8[20121];HEAP8[r28+2|0]=HEAP8[20122];HEAP8[r28+3|0]=HEAP8[20123];HEAP8[r28+4|0]=HEAP8[20124];HEAP8[r28+5|0]=HEAP8[20125];HEAP8[r28+6|0]=HEAP8[20126];r28=r18+8|0;HEAP8[r28]=0;r29=r1+52|0;r30=r1+64|0;r31=r11;r32=r12;r33=r13;HEAP8[r31]=2;r34=r11;r35=r34+1|0;HEAP8[r35]=59;HEAP8[r34+2|0]=0;r34=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj(r18,r35,0,1);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_(r12,r18,0,r34);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r30,r12);r36=r29|0;r37=__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_(r36,r10,r12);if((HEAP32[r37>>2]|0)==0){while(1){r38=_malloc(28);if((r38|0)!=0){break}r39=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r39|0)==0){r3=17;break}FUNCTION_TABLE[r39]()}if(r3==17){r39=___cxa_allocate_exception(4);HEAP32[r39>>2]=53824;___cxa_throw(r39,62184,110)}r39=r38+16|0;if((HEAP8[r32]&1)==0){HEAP32[r39>>2]=HEAP32[r32>>2];HEAP32[r39+4>>2]=HEAP32[r32+4>>2];HEAP32[r39+8>>2]=HEAP32[r32+8>>2]}else{r40=HEAP32[r12+8>>2];r41=HEAP32[r12+4>>2];if(r41>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r41>>>0<11){HEAP8[r39]=r41<<1;r42=r38+17|0}else{r43=r41+16&-16;r44=(r43|0)==0?1:r43;while(1){r45=_malloc(r44);if((r45|0)!=0){r3=37;break}r46=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r46|0)==0){break}FUNCTION_TABLE[r46]()}if(r3==37){HEAP32[r38+24>>2]=r45;HEAP32[r39>>2]=r43|1;HEAP32[r38+20>>2]=r41;r42=r45;break}r44=___cxa_allocate_exception(4);HEAP32[r44>>2]=53824;___cxa_throw(r44,62184,110)}}while(0);_memcpy(r42,r40,r41)|0;HEAP8[r42+r41|0]=0}r41=HEAP32[r10>>2];r10=r38;HEAP32[r38>>2]=0;HEAP32[r38+4>>2]=0;HEAP32[r38+8>>2]=r41;HEAP32[r37>>2]=r10;r41=r29|0;r38=HEAP32[HEAP32[r41>>2]>>2];if((r38|0)==0){r47=r10}else{HEAP32[r41>>2]=r38;r47=HEAP32[r37>>2]}r37=r1+56|0;__ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[r37>>2],r47);r47=r1+60|0;HEAP32[r47>>2]=HEAP32[r47>>2]+1;r48=r41;r49=r37;r50=r47}else{r48=r29|0;r49=r1+56|0;r50=r1+60|0}r29=r13;r47=r13+8|0;r37=r11+4|0;r41=r11+8|0;r11=r18+4|0;r38=r34;L37:while(1){if((r38|0)==-1){break}r34=HEAP8[r27];if((r34&1)==0){r51=(r34&255)>>>1}else{r51=HEAP32[r11>>2]}if((r38|0)==(r51-1|0)){break}r34=r38+1|0;r10=HEAP8[r31];if((r10&1)==0){r52=(r10&255)>>>1;r53=r35}else{r52=HEAP32[r37>>2];r53=HEAP32[r41>>2]}r10=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEPKcjj(r18,r53,r34,r52);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_(r13,r18,r34,r10+~r38|0);while(1){r54=_malloc(28);if((r54|0)!=0){break}r34=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r34|0)==0){r3=63;break L37}FUNCTION_TABLE[r34]()}r43=r54;r34=r54+16|0;HEAP32[r34>>2]=HEAP32[r33>>2];HEAP32[r34+4>>2]=HEAP32[r33+4>>2];HEAP32[r34+8>>2]=HEAP32[r33+8>>2];r34=0;while(1){if(r34>>>0>=3){break}HEAP32[r29+(r34<<2)>>2]=0;r34=r34+1|0}r34=__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_(r36,r9,r54+16|0);do{if((HEAP32[r34>>2]|0)==0){r42=HEAP32[r9>>2];r40=r54;HEAP32[r54>>2]=0;HEAP32[r54+4>>2]=0;HEAP32[r54+8>>2]=r42;HEAP32[r34>>2]=r40;r42=HEAP32[HEAP32[r48>>2]>>2];if((r42|0)==0){r55=r40}else{HEAP32[r48>>2]=r42;r55=HEAP32[r34>>2]}__ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[r49>>2],r55);HEAP32[r50>>2]=HEAP32[r50>>2]+1}else{if((r43|0)==0){break}do{if((HEAP8[r43+16|0]&1)!=0){r42=HEAP32[r43+24>>2];if((r42|0)==0){break}_free(r42)}}while(0);_free(r43)}}while(0);if((HEAP8[r33]&1)==0){r38=r10;continue}r43=HEAP32[r47>>2];if((r43|0)==0){r38=r10;continue}_free(r43);r38=r10}if(r3==63){r38=___cxa_allocate_exception(4);HEAP32[r38>>2]=53824;___cxa_throw(r38,62184,110)}do{if((HEAP8[r32]&1)!=0){r38=HEAP32[r12+8>>2];if((r38|0)==0){break}_free(r38)}}while(0);do{if((HEAP8[r31]&1)!=0){r12=HEAP32[r41>>2];if((r12|0)==0){break}_free(r12)}}while(0);do{if((HEAP8[r27]&1)!=0){r41=HEAP32[r28>>2];if((r41|0)==0){break}_free(r41)}}while(0);r28=r19+4|0;HEAP32[r28>>2]=0;r27=r19+8|0;HEAP32[r27>>2]=0;r41=r19+4|0;r31=r19|0;HEAP32[r31>>2]=r41;r12=r2+4|0;r32=r2|0;r2=0;L88:while(1){r38=HEAP32[r32>>2];if(r2>>>0>=((HEAP32[r12>>2]-r38|0)/24&-1)>>>0){r3=149;break}r47=r38+(r2*24&-1)|0;r33=__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(r19,r8,r47);r50=HEAP32[r33>>2];r55=r50;if((r50|0)==0){while(1){r56=_malloc(40);if((r56|0)!=0){break}r50=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r50|0)==0){r3=110;break L88}FUNCTION_TABLE[r50]()}r10=r56;r50=r56+16|0;r49=r47;if((HEAP8[r49]&1)==0){HEAP32[r50>>2]=HEAP32[r49>>2];HEAP32[r50+4>>2]=HEAP32[r49+4>>2];HEAP32[r50+8>>2]=HEAP32[r49+8>>2]}else{r49=HEAP32[r38+(r2*24&-1)+8>>2];r48=HEAP32[r38+(r2*24&-1)+4>>2];if(r48>>>0>4294967279){r3=115;break}if(r48>>>0<11){HEAP8[r50]=r48<<1;r57=r56+17|0}else{r54=r48+16&-16;r9=(r54|0)==0?1:r54;while(1){r58=_malloc(r9);if((r58|0)!=0){break}r36=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r36|0)==0){r3=128;break L88}FUNCTION_TABLE[r36]()}HEAP32[r56+24>>2]=r58;HEAP32[r50>>2]=r54|1;HEAP32[r56+20>>2]=r48;r57=r58}_memcpy(r57,r49,r48)|0;HEAP8[r57+r48|0]=0}r9=r56+28|0;r38=0;while(1){if(r38>>>0>=3){break}HEAP32[r9+(r38<<2)>>2]=0;r38=r38+1|0}r38=HEAP32[r8>>2];r9=r56;HEAP32[r56>>2]=0;HEAP32[r56+4>>2]=0;HEAP32[r56+8>>2]=r38;HEAP32[r33>>2]=r9;r38=HEAP32[HEAP32[r31>>2]>>2];if((r38|0)==0){r59=r9}else{HEAP32[r31>>2]=r38;r59=HEAP32[r33>>2]}__ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[r28>>2],r59);HEAP32[r27>>2]=HEAP32[r27>>2]+1;r60=r10}else{r60=r55}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r60+28|0,HEAP32[r32>>2]+(r2*24&-1)+12|0);r2=r2+1|0}if(r3==110){r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}else if(r3==115){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}else if(r3==128){r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}else if(r3==149){r2=_strlen(48632);if(r2>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r2>>>0<11){HEAP8[r20]=r2<<1;r61=r20+1|0}else{r32=r2+16&-16;r60=(r32|0)==0?1:r32;while(1){r62=_malloc(r60);if((r62|0)!=0){r3=165;break}r59=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r59|0)==0){break}FUNCTION_TABLE[r59]()}if(r3==165){HEAP32[r20+8>>2]=r62;HEAP32[r20>>2]=r32|1;HEAP32[r20+4>>2]=r2;r61=r62;break}r60=___cxa_allocate_exception(4);HEAP32[r60>>2]=53824;___cxa_throw(r60,62184,110)}}while(0);_memcpy(r61,48632,r2)|0;HEAP8[r61+r2|0]=0;r2=r19|0;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(r17,r2,r20);do{if((HEAP32[r17>>2]|0)==(r41|0)){r63=1}else{r61=_strlen(48632);if(r61>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r61>>>0<11){HEAP8[r21]=r61<<1;r64=r21+1|0}else{r62=r61+16&-16;r60=(r62|0)==0?1:r62;while(1){r65=_malloc(r60);if((r65|0)!=0){r3=183;break}r55=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r55|0)==0){break}FUNCTION_TABLE[r55]()}if(r3==183){HEAP32[r21+8>>2]=r65;HEAP32[r21>>2]=r62|1;HEAP32[r21+4>>2]=r61;r64=r65;break}r60=___cxa_allocate_exception(4);HEAP32[r60>>2]=53824;___cxa_throw(r60,62184,110)}}while(0);_memcpy(r64,48632,r61)|0;HEAP8[r64+r61|0]=0;__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE4findIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_(r16,r1+52|0,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixEOS6_(r19,r21));r32=(HEAP32[r16>>2]|0)==(r1+56|0);if((HEAP8[r21]&1)==0){r63=r32;break}r60=HEAP32[r21+8>>2];if((r60|0)==0){r63=r32;break}_free(r60);r63=r32}}while(0);do{if((HEAP8[r20]&1)!=0){r21=HEAP32[r20+8>>2];if((r21|0)==0){break}_free(r21)}}while(0);do{if(r63){r20=_strlen(48632);if(r20>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r20>>>0<11){HEAP8[r22]=r20<<1;r66=r22+1|0}else{r21=r20+16&-16;r16=(r21|0)==0?1:r21;while(1){r67=_malloc(r16);if((r67|0)!=0){r3=208;break}r64=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r64|0)==0){break}FUNCTION_TABLE[r64]()}if(r3==208){HEAP32[r22+8>>2]=r67;HEAP32[r22>>2]=r21|1;HEAP32[r22+4>>2]=r20;r66=r67;break}r16=___cxa_allocate_exception(4);HEAP32[r16>>2]=53824;___cxa_throw(r16,62184,110)}}while(0);_memcpy(r66,48632,r20)|0;HEAP8[r66+r20|0]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixEOS6_(r19,r22),r30);if((HEAP8[r22]&1)==0){break}r61=HEAP32[r22+8>>2];if((r61|0)==0){break}_free(r61)}}while(0);r22=_strlen(38264);if(r22>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r22>>>0<11){r30=r23;HEAP8[r30]=r22<<1;r68=r23+1|0;r69=r30}else{r30=r22+16&-16;r66=(r30|0)==0?1:r30;while(1){r70=_malloc(r66);if((r70|0)!=0){r3=241;break}r67=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r67|0)==0){break}FUNCTION_TABLE[r67]()}if(r3==241){HEAP32[r23+8>>2]=r70;HEAP32[r23>>2]=r30|1;HEAP32[r23+4>>2]=r22;r68=r70;r69=r23;break}r66=___cxa_allocate_exception(4);HEAP32[r66>>2]=53824;___cxa_throw(r66,62184,110)}}while(0);_memcpy(r68,38264,r22)|0;HEAP8[r68+r22|0]=0;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(r15,r2,r23);r22=(HEAP32[r15>>2]|0)==(r41|0);do{if((HEAP8[r69]&1)!=0){r15=HEAP32[r23+8>>2];if((r15|0)==0){break}_free(r15)}}while(0);do{if(r22){r23=_strlen(38264);if(r23>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r23>>>0<11){HEAP8[r24]=r23<<1;r71=r24+1|0}else{r69=r23+16&-16;r15=(r69|0)==0?1:r69;while(1){r72=_malloc(r15);if((r72|0)!=0){r3=262;break}r68=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r68|0)==0){break}FUNCTION_TABLE[r68]()}if(r3==262){HEAP32[r24+8>>2]=r72;HEAP32[r24>>2]=r69|1;HEAP32[r24+4>>2]=r23;r71=r72;break}r15=___cxa_allocate_exception(4);HEAP32[r15>>2]=53824;___cxa_throw(r15,62184,110)}}while(0);_memcpy(r71,38264,r23)|0;HEAP8[r71+r23|0]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixEOS6_(r19,r24),17224);if((HEAP8[r24]&1)==0){break}r30=HEAP32[r24+8>>2];if((r30|0)==0){break}_free(r30)}}while(0);r24=_strlen(39408);if(r24>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r24>>>0<11){r71=r25;HEAP8[r71]=r24<<1;r73=r25+1|0;r74=r71}else{r71=r24+16&-16;r72=(r71|0)==0?1:r71;while(1){r75=_malloc(r72);if((r75|0)!=0){r3=287;break}r22=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r22|0)==0){break}FUNCTION_TABLE[r22]()}if(r3==287){HEAP32[r25+8>>2]=r75;HEAP32[r25>>2]=r71|1;HEAP32[r25+4>>2]=r24;r73=r75;r74=r25;break}r72=___cxa_allocate_exception(4);HEAP32[r72>>2]=53824;___cxa_throw(r72,62184,110)}}while(0);_memcpy(r73,39408,r24)|0;HEAP8[r73+r24|0]=0;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(r14,r2,r25);r24=(HEAP32[r14>>2]|0)==(r41|0);do{if((HEAP8[r74]&1)!=0){r14=HEAP32[r25+8>>2];if((r14|0)==0){break}_free(r14)}}while(0);do{if(r24){r25=_strlen(39408);if(r25>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r25>>>0<11){HEAP8[r26]=r25<<1;r76=r26+1|0}else{r74=r25+16&-16;r14=(r74|0)==0?1:r74;while(1){r77=_malloc(r14);if((r77|0)!=0){r3=308;break}r73=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r73|0)==0){break}FUNCTION_TABLE[r73]()}if(r3==308){HEAP32[r26+8>>2]=r77;HEAP32[r26>>2]=r74|1;HEAP32[r26+4>>2]=r25;r76=r77;break}r14=___cxa_allocate_exception(4);HEAP32[r14>>2]=53824;___cxa_throw(r14,62184,110)}}while(0);_memcpy(r76,39408,r25)|0;HEAP8[r76+r25|0]=0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixEOS6_(r19,r26),17224);if((HEAP8[r26]&1)==0){break}r71=HEAP32[r26+8>>2];if((r71|0)==0){break}_free(r71)}}while(0);r26=HEAP32[r27>>2]<<1;r27=_llvm_umul_with_overflow_i32(r26,4);r19=tempRet0?-1:r27;r27=(r19|0)==0?1:r19;while(1){r78=_malloc(r27);if((r78|0)!=0){break}r19=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r19|0)==0){r3=326;break}FUNCTION_TABLE[r19]()}if(r3==326){r27=___cxa_allocate_exception(4);HEAP32[r27>>2]=53824;___cxa_throw(r27,62184,110)}r27=r78;r19=r1+88|0;r76=r7|0;r77=r1+92|0;r24=r1+12|0;r71=r1+76|0;r14=r6|0;r69=r1+80|0;r73=HEAP32[r31>>2];r31=0;while(1){if((r73|0)==(r41|0)){break}r75=r73+16|0;r72=r73+28|0;if((__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(r75,47320)|0)==0){__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE4findIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_(r7,r19,r72);if((HEAP32[r76>>2]|0)==(r77|0)){r79=r31}else{r3=336}}else{r3=336}do{if(r3==336){r3=0;if((__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(r75,34984)|0)==0){__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE4findIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_(r6,r71,r72);if((HEAP32[r14>>2]|0)==(r69|0)){r79=r31;break}}if((__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(r75,34984)|0)==0){HEAP8[r24]=0}if((HEAP8[r75]&1)==0){r80=r75+1|0}else{r80=HEAP32[r73+24>>2]}HEAP32[r27+(r31<<2)>>2]=r80;if((HEAP8[r72]&1)==0){r81=r72+1|0}else{r81=HEAP32[r73+36>>2]}HEAP32[r27+(r31+1<<2)>>2]=r81;r79=r31+2|0}}while(0);r72=HEAP32[r73+4>>2];if((r72|0)==0){r75=r73|0;while(1){r25=HEAP32[r75+8>>2];if((r75|0)==(HEAP32[r25>>2]|0)){r82=r25;break}else{r75=r25}}}else{r75=r72;while(1){r25=HEAP32[r75>>2];if((r25|0)==0){r82=r75;break}else{r75=r25}}}r73=r82;r31=r79}r79=_cmd_ln_parse_r(0,51928,r26,r27,0);if((r79|0)==0){if((r78|0)==0){r83=3;r84=HEAP32[r28>>2];r85=r84;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r2,r85);STACKTOP=r5;return r83}_free(r78);r83=3;r84=HEAP32[r28>>2];r85=r84;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r2,r85);STACKTOP=r5;return r83}r27=_malloc(120);if((r27|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=120,HEAP32[r4+16>>2]=49568,HEAP32[r4+24>>2]=358,r4));STACKTOP=r4}if((HEAP32[r27-4>>2]&3|0)!=0){_memset(r27,0,120)|0}r4=r27;HEAP32[r27+4>>2]=1;if((_ps_reinit(r4,r79)|0)<0){_ps_free(r4);r86=0}else{r86=r4}r4=r1+44|0;HEAP32[r4>>2]=r86;if((r78|0)==0){r87=r86}else{_free(r78);r87=HEAP32[r4>>2]}if((r87|0)==0){r83=3;r84=HEAP32[r28>>2];r85=r84;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r2,r85);STACKTOP=r5;return r83}r87=_logmath_init(1.0001,0,0);HEAP32[r1+48>>2]=r87;r83=(r87|0)==0?3:0;r84=HEAP32[r28>>2];r85=r84;__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r2,r85);STACKTOP=r5;return r83}}function __ZN14pocketsphinxjs10Recognizer7cleanupEv(r1){var r2,r3,r4,r5;r2=r1+44|0;r3=HEAP32[r2>>2];if((r3|0)!=0){_ps_free(r3)}r3=r1+48|0;r1=HEAP32[r3>>2];do{if((r1|0)!=0){r4=r1+12|0;r5=HEAP32[r4>>2]-1|0;HEAP32[r4>>2]=r5;if((r5|0)>0){break}r5=HEAP32[r1+16>>2];if((r5|0)==0){_free(HEAP32[r1>>2])}else{_mmio_file_unmap(r5)}_free(r1)}}while(0);HEAP32[r2>>2]=0;HEAP32[r3>>2]=0;return}function __ZNKSt3__16vectorIN14pocketsphinxjs4WordENS_9allocatorIS2_EEE4sizeEv(r1){return(HEAP32[r1+4>>2]-HEAP32[r1>>2]|0)/24&-1}function __ZNKSt3__16vectorIN14pocketsphinxjs10TransitionENS_9allocatorIS2_EEE4sizeEv(r1){return(HEAP32[r1+4>>2]-HEAP32[r1>>2]|0)/24&-1}function __ZNKSt3__16vectorIiNS_9allocatorIiEEE4sizeEv(r1){return HEAP32[r1+4>>2]-HEAP32[r1>>2]>>2}function __ZNSt3__16vectorIiNS_9allocatorIiEEE9push_backERKi(r1,r2){var r3,r4,r5;r3=r1+4|0;r4=HEAP32[r3>>2];if((r4|0)==(HEAP32[r1+8>>2]|0)){__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(r1,r2);return}if((r4|0)==0){r5=0}else{HEAP32[r4>>2]=HEAP32[r2>>2];r5=HEAP32[r3>>2]}HEAP32[r3>>2]=r5+4;return}function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55452;HEAP32[r1+56>>2]=55472;r2=r1+4|0;HEAP32[r2>>2]=55656;do{if((HEAP8[r1+36|0]&1)!=0){r3=HEAP32[r1+44>>2];if((r3|0)==0){break}_free(r3)}}while(0);HEAP32[r2>>2]=55800;r2=HEAP32[r1+8>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r4=r1+56|0;__ZNSt3__18ios_baseD2Ev(r4);return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);r4=r1+56|0;__ZNSt3__18ios_baseD2Ev(r4);return}function __ZNKSt3__16vectorIsNS_9allocatorIsEEE4sizeEv(r1){return HEAP32[r1+4>>2]-HEAP32[r1>>2]>>1}function __ZNSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE9push_backERKS2_(r1,r2){var r3,r4,r5;r3=r1+4|0;r4=HEAP32[r3>>2];if((r4|0)==(HEAP32[r1+8>>2]|0)){__ZNSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(r1,r2);return}if((r4|0)==0){r5=0}else{__ZN14pocketsphinxjs7SegItemC1ERKS0_(r4,r2);r5=HEAP32[r3>>2]}HEAP32[r3>>2]=r5+20;return}function __ZNKSt3__16vectorIN14pocketsphinxjs10ConfigItemENS_9allocatorIS2_EEE4sizeEv(r1){return(HEAP32[r1+4>>2]-HEAP32[r1>>2]|0)/24&-1}function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixEOS6_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;r6=__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(r1,r5,r2);r7=HEAP32[r6>>2];if((r7|0)!=0){r8=r7;r9=r8+28|0;STACKTOP=r4;return r9}while(1){r10=_malloc(40);if((r10|0)!=0){break}r7=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r7|0)==0){r3=9;break}FUNCTION_TABLE[r7]()}if(r3==9){r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}r3=r10;r7=r10+16|0;r11=r2;HEAP32[r7>>2]=HEAP32[r11>>2];HEAP32[r7+4>>2]=HEAP32[r11+4>>2];HEAP32[r7+8>>2]=HEAP32[r11+8>>2];r11=r2;r2=0;while(1){if(r2>>>0>=3){break}HEAP32[r11+(r2<<2)>>2]=0;r2=r2+1|0}r2=r10+28|0;r11=0;while(1){if(r11>>>0>=3){break}HEAP32[r2+(r11<<2)>>2]=0;r11=r11+1|0}r11=HEAP32[r5>>2];r5=r10;HEAP32[r10>>2]=0;HEAP32[r10+4>>2]=0;HEAP32[r10+8>>2]=r11;HEAP32[r6>>2]=r5;r11=r1|0;r10=HEAP32[HEAP32[r11>>2]>>2];if((r10|0)==0){r12=r5}else{HEAP32[r11>>2]=r10;r12=HEAP32[r6>>2]}__ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[r1+4>>2],r12);r12=r1+8|0;HEAP32[r12>>2]=HEAP32[r12>>2]+1;r8=r3;r9=r8+28|0;STACKTOP=r4;return r9}function ___clang_call_terminate(r1){___cxa_begin_catch(r1);__ZSt9terminatev()}function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29;r4=0;r5=HEAP32[r1+4>>2];if((r5|0)==0){r6=r1+4|0;HEAP32[r2>>2]=r6;r7=r6|0;return r7}r6=HEAP8[r3];r1=(r6&1)==0;r8=r3+1|0;r9=r3+8|0;r10=r3+4|0;r3=r5;L5:while(1){r5=r3+16|0;if(r1){r11=(r6&255)>>>1}else{r11=HEAP32[r10>>2]}r12=HEAP8[r5];r13=(r12&1)==0;if(r13){r14=(r12&255)>>>1}else{r14=HEAP32[r3+20>>2]}if(r1){r15=r8}else{r15=HEAP32[r9>>2]}if(r13){r16=r5+1|0}else{r16=HEAP32[r3+24>>2]}r17=r14>>>0<r11>>>0?r14:r11;L22:do{if((r17|0)==0){r4=18}else{r18=r17;r19=r15;r20=r16;while(1){r21=HEAP8[r19];r22=HEAP8[r20];if(r21<<24>>24!=r22<<24>>24){break}r23=r18-1|0;if((r23|0)==0){r4=18;break L22}else{r18=r23;r19=r19+1|0;r20=r20+1|0}}if(r21<<24>>24==r22<<24>>24){r4=18;break}if(((r21&255)-(r22&255)|0)<0){r4=20}}}while(0);if(r4==18){r4=0;if(r11>>>0<r14>>>0){r4=20}}if(r4==20){r4=0;r17=HEAP32[r3>>2];if((r17|0)==0){r4=21;break}else{r3=r17;continue}}if(r13){r24=(r12&255)>>>1}else{r24=HEAP32[r3+20>>2]}if(r1){r25=(r6&255)>>>1}else{r25=HEAP32[r10>>2]}if(r13){r26=r5+1|0}else{r26=HEAP32[r3+24>>2]}if(r1){r27=r8}else{r27=HEAP32[r9>>2]}r17=r25>>>0<r24>>>0?r25:r24;L48:do{if((r17|0)==0){r4=37}else{r20=r17;r19=r26;r18=r27;while(1){r28=HEAP8[r19];r29=HEAP8[r18];if(r28<<24>>24!=r29<<24>>24){break}r23=r20-1|0;if((r23|0)==0){r4=37;break L48}else{r20=r23;r19=r19+1|0;r18=r18+1|0}}if(r28<<24>>24==r29<<24>>24){r4=37;break}if(((r28&255)-(r29&255)|0)>=0){r4=41;break L5}}}while(0);if(r4==37){r4=0;if(r24>>>0>=r25>>>0){r4=41;break}}r17=HEAP32[r3+4>>2];if((r17|0)==0){r4=40;break}else{r3=r17}}if(r4==21){HEAP32[r2>>2]=r3;r7=r3|0;return r7}else if(r4==40){HEAP32[r2>>2]=r3;r7=r3+4|0;return r7}else if(r4==41){HEAP32[r2>>2]=r3;r7=r2;return r7}}function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r3=0;HEAP8[r2+12|0]=(r2|0)==(r1|0)|0;r4=r2;while(1){if((r4|0)==(r1|0)){r3=37;break}r5=r4+8|0;r6=HEAP32[r5>>2];r2=r6+12|0;if((HEAP8[r2]&1)!=0){r3=37;break}r7=r6+8|0;r8=HEAP32[r7>>2];r9=HEAP32[r8>>2];if((r6|0)==(r9|0)){r10=HEAP32[r8+4>>2];if((r10|0)==0){r3=7;break}r11=r10+12|0;if((HEAP8[r11]&1)!=0){r3=7;break}HEAP8[r2]=1;HEAP8[r8+12|0]=(r8|0)==(r1|0)|0;HEAP8[r11]=1;r4=r8;continue}else{if((r9|0)==0){r3=23;break}r11=r9+12|0;if((HEAP8[r11]&1)!=0){r3=23;break}HEAP8[r2]=1;HEAP8[r8+12|0]=(r8|0)==(r1|0)|0;HEAP8[r11]=1;r4=r8;continue}}if(r3==7){if((r4|0)==(HEAP32[r6>>2]|0)){r12=r6;r13=r8}else{r1=r6+4|0;r11=HEAP32[r1>>2];r2=r11|0;r9=HEAP32[r2>>2];HEAP32[r1>>2]=r9;if((r9|0)==0){r14=r8}else{HEAP32[r9+8>>2]=r6;r14=HEAP32[r7>>2]}r9=r11+8|0;HEAP32[r9>>2]=r14;r14=HEAP32[r7>>2];r1=r14|0;if((r6|0)==(HEAP32[r1>>2]|0)){HEAP32[r1>>2]=r11}else{HEAP32[r14+4>>2]=r11}HEAP32[r2>>2]=r6;HEAP32[r7>>2]=r11;r12=r11;r13=HEAP32[r9>>2]}HEAP8[r12+12|0]=1;HEAP8[r13+12|0]=0;r12=r13|0;r9=HEAP32[r12>>2];r11=r9+4|0;r2=HEAP32[r11>>2];HEAP32[r12>>2]=r2;if((r2|0)!=0){HEAP32[r2+8>>2]=r13}r2=r13+8|0;HEAP32[r9+8>>2]=HEAP32[r2>>2];r12=HEAP32[r2>>2];r14=r12|0;if((r13|0)==(HEAP32[r14>>2]|0)){HEAP32[r14>>2]=r9}else{HEAP32[r12+4>>2]=r9}HEAP32[r11>>2]=r13;HEAP32[r2>>2]=r9;return}else if(r3==23){r9=r6|0;if((r4|0)==(HEAP32[r9>>2]|0)){r2=r4+4|0;r13=HEAP32[r2>>2];HEAP32[r9>>2]=r13;if((r13|0)==0){r15=r8}else{HEAP32[r13+8>>2]=r6;r15=HEAP32[r7>>2]}HEAP32[r5>>2]=r15;r15=HEAP32[r7>>2];r13=r15|0;if((r6|0)==(HEAP32[r13>>2]|0)){HEAP32[r13>>2]=r4}else{HEAP32[r15+4>>2]=r4}HEAP32[r2>>2]=r6;HEAP32[r7>>2]=r4;r16=r4;r17=HEAP32[r5>>2]}else{r16=r6;r17=r8}HEAP8[r16+12|0]=1;HEAP8[r17+12|0]=0;r16=r17+4|0;r8=HEAP32[r16>>2];r6=r8|0;r5=HEAP32[r6>>2];HEAP32[r16>>2]=r5;if((r5|0)!=0){HEAP32[r5+8>>2]=r17}r5=r17+8|0;HEAP32[r8+8>>2]=HEAP32[r5>>2];r16=HEAP32[r5>>2];r4=r16|0;if((r17|0)==(HEAP32[r4>>2]|0)){HEAP32[r4>>2]=r8}else{HEAP32[r16+4>>2]=r8}HEAP32[r6>>2]=r17;HEAP32[r5>>2]=r8;return}else if(r3==37){return}}function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE4findIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28;r4=0;r5=r2+4|0;r6=r3;r7=r3+1|0;r8=r3+8|0;r9=r3+4|0;r3=HEAP32[r2+4>>2];r2=r5;while(1){if((r3|0)==0){break}r10=r3+16|0;r11=HEAP8[r10];r12=(r11&1)==0;if(r12){r13=(r11&255)>>>1}else{r13=HEAP32[r3+20>>2]}r11=HEAP8[r6];r14=(r11&1)==0;if(r14){r15=(r11&255)>>>1}else{r15=HEAP32[r9>>2]}if(r12){r16=r10+1|0}else{r16=HEAP32[r3+24>>2]}if(r14){r17=r7}else{r17=HEAP32[r8>>2]}r14=r15>>>0<r13>>>0?r15:r13;L19:do{if((r14|0)==0){r4=18}else{r10=r14;r12=r16;r11=r17;while(1){r18=HEAP8[r12];r19=HEAP8[r11];if(r18<<24>>24!=r19<<24>>24){break}r20=r10-1|0;if((r20|0)==0){r4=18;break L19}else{r10=r20;r12=r12+1|0;r11=r11+1|0}}if(r18<<24>>24==r19<<24>>24){r4=18;break}if(((r18&255)-(r19&255)|0)<0){r4=21}else{r4=20}}}while(0);if(r4==18){r4=0;if(r13>>>0<r15>>>0){r4=21}else{r4=20}}if(r4==20){r4=0;r21=r3|0;r22=r3}else if(r4==21){r4=0;r21=r3+4|0;r22=r2}r3=HEAP32[r21>>2];r2=r22}L32:do{if((r2|0)!=(r5|0)){r22=r2+16|0;r21=HEAP8[r6];r3=(r21&1)==0;if(r3){r23=(r21&255)>>>1}else{r23=HEAP32[r9>>2]}r21=HEAP8[r22];r15=(r21&1)==0;if(r15){r24=(r21&255)>>>1}else{r24=HEAP32[r2+20>>2]}if(r3){r25=r7}else{r25=HEAP32[r8>>2]}if(r15){r26=r22+1|0}else{r26=HEAP32[r2+24>>2]}r22=r24>>>0<r23>>>0?r24:r23;L49:do{if((r22|0)==0){r4=39}else{r15=r22;r3=r25;r21=r26;while(1){r27=HEAP8[r3];r28=HEAP8[r21];if(r27<<24>>24!=r28<<24>>24){break}r13=r15-1|0;if((r13|0)==0){r4=39;break L49}else{r15=r13;r3=r3+1|0;r21=r21+1|0}}if(r27<<24>>24==r28<<24>>24){r4=39;break}if(((r27&255)-(r28&255)|0)<0){break L32}}}while(0);if(r4==39){if(r23>>>0<r24>>>0){break}}HEAP32[r1>>2]=r2;return}}while(0);HEAP32[r1>>2]=r5;return}function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29;r4=0;r5=HEAP32[r1+4>>2];if((r5|0)==0){r6=r1+4|0;HEAP32[r2>>2]=r6;r7=r6|0;return r7}r6=HEAP8[r3];r1=(r6&1)==0;r8=r3+1|0;r9=r3+8|0;r10=r3+4|0;r3=r5;L5:while(1){r5=r3+16|0;if(r1){r11=(r6&255)>>>1}else{r11=HEAP32[r10>>2]}r12=HEAP8[r5];r13=(r12&1)==0;if(r13){r14=(r12&255)>>>1}else{r14=HEAP32[r3+20>>2]}if(r1){r15=r8}else{r15=HEAP32[r9>>2]}if(r13){r16=r5+1|0}else{r16=HEAP32[r3+24>>2]}r17=r14>>>0<r11>>>0?r14:r11;L22:do{if((r17|0)==0){r4=18}else{r18=r17;r19=r15;r20=r16;while(1){r21=HEAP8[r19];r22=HEAP8[r20];if(r21<<24>>24!=r22<<24>>24){break}r23=r18-1|0;if((r23|0)==0){r4=18;break L22}else{r18=r23;r19=r19+1|0;r20=r20+1|0}}if(r21<<24>>24==r22<<24>>24){r4=18;break}if(((r21&255)-(r22&255)|0)<0){r4=20}}}while(0);if(r4==18){r4=0;if(r11>>>0<r14>>>0){r4=20}}if(r4==20){r4=0;r17=HEAP32[r3>>2];if((r17|0)==0){r4=21;break}else{r3=r17;continue}}if(r13){r24=(r12&255)>>>1}else{r24=HEAP32[r3+20>>2]}if(r1){r25=(r6&255)>>>1}else{r25=HEAP32[r10>>2]}if(r13){r26=r5+1|0}else{r26=HEAP32[r3+24>>2]}if(r1){r27=r8}else{r27=HEAP32[r9>>2]}r17=r25>>>0<r24>>>0?r25:r24;L48:do{if((r17|0)==0){r4=37}else{r20=r17;r19=r26;r18=r27;while(1){r28=HEAP8[r19];r29=HEAP8[r18];if(r28<<24>>24!=r29<<24>>24){break}r23=r20-1|0;if((r23|0)==0){r4=37;break L48}else{r20=r23;r19=r19+1|0;r18=r18+1|0}}if(r28<<24>>24==r29<<24>>24){r4=37;break}if(((r28&255)-(r29&255)|0)>=0){r4=41;break L5}}}while(0);if(r4==37){r4=0;if(r24>>>0>=r25>>>0){r4=41;break}}r17=HEAP32[r3+4>>2];if((r17|0)==0){r4=40;break}else{r3=r17}}if(r4==21){HEAP32[r2>>2]=r3;r7=r3|0;return r7}else if(r4==40){HEAP32[r2>>2]=r3;r7=r3+4|0;return r7}else if(r4==41){HEAP32[r2>>2]=r3;r7=r2;return r7}}function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28;r4=0;r5=r2+4|0;r6=r3;r7=r3+1|0;r8=r3+8|0;r9=r3+4|0;r3=HEAP32[r2+4>>2];r2=r5;while(1){if((r3|0)==0){break}r10=r3+16|0;r11=HEAP8[r10];r12=(r11&1)==0;if(r12){r13=(r11&255)>>>1}else{r13=HEAP32[r3+20>>2]}r11=HEAP8[r6];r14=(r11&1)==0;if(r14){r15=(r11&255)>>>1}else{r15=HEAP32[r9>>2]}if(r12){r16=r10+1|0}else{r16=HEAP32[r3+24>>2]}if(r14){r17=r7}else{r17=HEAP32[r8>>2]}r14=r15>>>0<r13>>>0?r15:r13;L19:do{if((r14|0)==0){r4=18}else{r10=r14;r12=r16;r11=r17;while(1){r18=HEAP8[r12];r19=HEAP8[r11];if(r18<<24>>24!=r19<<24>>24){break}r20=r10-1|0;if((r20|0)==0){r4=18;break L19}else{r10=r20;r12=r12+1|0;r11=r11+1|0}}if(r18<<24>>24==r19<<24>>24){r4=18;break}if(((r18&255)-(r19&255)|0)<0){r4=21}else{r4=20}}}while(0);if(r4==18){r4=0;if(r13>>>0<r15>>>0){r4=21}else{r4=20}}if(r4==20){r4=0;r21=r3|0;r22=r3}else if(r4==21){r4=0;r21=r3+4|0;r22=r2}r3=HEAP32[r21>>2];r2=r22}L32:do{if((r2|0)!=(r5|0)){r22=r2+16|0;r21=HEAP8[r6];r3=(r21&1)==0;if(r3){r23=(r21&255)>>>1}else{r23=HEAP32[r9>>2]}r21=HEAP8[r22];r15=(r21&1)==0;if(r15){r24=(r21&255)>>>1}else{r24=HEAP32[r2+20>>2]}if(r3){r25=r7}else{r25=HEAP32[r8>>2]}if(r15){r26=r22+1|0}else{r26=HEAP32[r2+24>>2]}r22=r24>>>0<r23>>>0?r24:r23;L49:do{if((r22|0)==0){r4=39}else{r15=r22;r3=r25;r21=r26;while(1){r27=HEAP8[r3];r28=HEAP8[r21];if(r27<<24>>24!=r28<<24>>24){break}r13=r15-1|0;if((r13|0)==0){r4=39;break L49}else{r15=r13;r3=r3+1|0;r21=r21+1|0}}if(r27<<24>>24==r28<<24>>24){r4=39;break}if(((r27&255)-(r28&255)|0)<0){break L32}}}while(0);if(r4==39){if(r23>>>0<r24>>>0){break}}HEAP32[r1>>2]=r2;return}}while(0);HEAP32[r1>>2]=r5;return}function __ZNSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=r1+4|0;r5=r1|0;r6=HEAP32[r5>>2];r7=(HEAP32[r4>>2]-r6|0)/20&-1;r8=r7+1|0;if(r8>>>0>214748364){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}r9=r1+8|0;r1=(HEAP32[r9>>2]-r6|0)/20&-1;if(r1>>>0<107374182){r6=r1<<1;r1=r6>>>0<r8>>>0?r8:r6;if((r1|0)==0){r10=0;r11=r1}else{r12=r1;r3=5}}else{r12=214748364;r3=5}do{if(r3==5){r1=r12*20&-1;r6=(r1|0)==0?1:r1;while(1){r13=_malloc(r6);if((r13|0)!=0){r3=16;break}r1=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r1|0)==0){break}FUNCTION_TABLE[r1]()}if(r3==16){r10=r13;r11=r12;break}r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53824;___cxa_throw(r6,62184,110)}}while(0);r12=r10+(r7*20&-1)|0;r13=r10+(r11*20&-1)|0;if((r12|0)!=0){__ZN14pocketsphinxjs7SegItemC1ERKS0_(r12,r2)}r2=r10+((r7+1)*20&-1)|0;r7=HEAP32[r5>>2];r10=HEAP32[r4>>2];r11=r12;while(1){if((r10|0)==(r7|0)){break}r12=r10-20|0;r3=r11-20|0;r6=r3;r1=r12;HEAP32[r6>>2]=HEAP32[r1>>2];HEAP32[r6+4>>2]=HEAP32[r1+4>>2];HEAP32[r6+8>>2]=HEAP32[r1+8>>2];r1=r12;r6=0;while(1){if(r6>>>0>=3){break}HEAP32[r1+(r6<<2)>>2]=0;r6=r6+1|0}r6=r10-20+12|0;r1=r11-20+12|0;r8=HEAP32[r6+4>>2];HEAP32[r1>>2]=HEAP32[r6>>2];HEAP32[r1+4>>2]=r8;r10=r12;r11=r3}r10=HEAP32[r5>>2];HEAP32[r5>>2]=r11;r11=HEAP32[r4>>2];HEAP32[r4>>2]=r2;HEAP32[r9>>2]=r13;r13=r11;while(1){if((r10|0)==(r13|0)){break}r11=r13-20|0;if((HEAP8[r11]&1)==0){r13=r11;continue}r9=HEAP32[r13-20+8>>2];if((r9|0)==0){r13=r11;continue}_free(r9);r13=r11}if((r10|0)==0){return}_free(r10);return}function __ZNKSt3__16vectorIN14pocketsphinxjs7SegItemENS_9allocatorIS2_EEE4sizeEv(r1){return(HEAP32[r1+4>>2]-HEAP32[r1>>2]|0)/20&-1}function __ZN14pocketsphinxjs7SegItemC1ERKS0_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r3=0;r4=r2;if((HEAP8[r4]&1)==0){r5=r1;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2];r6=r1+12|0;r7=r2+12|0;r8=r7;r9=r6;r10=r8|0;r11=HEAP32[r10>>2];r12=r8+4|0;r13=HEAP32[r12>>2];r14=r9|0;HEAP32[r14>>2]=r11;r15=r9+4|0;HEAP32[r15>>2]=r13;return}r4=HEAP32[r2+8>>2];r5=HEAP32[r2+4>>2];if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r16=r1+1|0}else{r17=r5+16&-16;r18=(r17|0)==0?1:r17;while(1){r19=_malloc(r18);if((r19|0)!=0){r3=18;break}r20=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r20|0)==0){break}FUNCTION_TABLE[r20]()}if(r3==18){HEAP32[r1+8>>2]=r19;HEAP32[r1>>2]=r17|1;HEAP32[r1+4>>2]=r5;r16=r19;break}r18=___cxa_allocate_exception(4);HEAP32[r18>>2]=53824;___cxa_throw(r18,62184,110)}}while(0);_memcpy(r16,r4,r5)|0;HEAP8[r16+r5|0]=0;r6=r1+12|0;r7=r2+12|0;r8=r7;r9=r6;r10=r8|0;r11=HEAP32[r10>>2];r12=r8+4|0;r13=HEAP32[r12>>2];r14=r9|0;HEAP32[r14>>2]=r11;r15=r9+4|0;HEAP32[r15>>2]=r13;return}function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=r1+4|0;r5=r1|0;r6=HEAP32[r5>>2];r7=HEAP32[r4>>2]-r6>>2;r8=r7+1|0;if(r8>>>0>1073741823){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}r9=r1+8|0;r1=HEAP32[r9>>2]-r6|0;if(r1>>2>>>0<536870911){r6=r1>>1;r1=r6>>>0<r8>>>0?r8:r6;if((r1|0)==0){r10=0;r11=r1}else{r12=r1;r3=5}}else{r12=1073741823;r3=5}do{if(r3==5){r1=r12<<2;r6=(r1|0)==0?1:r1;while(1){r13=_malloc(r6);if((r13|0)!=0){r3=16;break}r1=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r1|0)==0){break}FUNCTION_TABLE[r1]()}if(r3==16){r10=r13;r11=r12;break}r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53824;___cxa_throw(r6,62184,110)}}while(0);r12=r10+(r7<<2)|0;if((r12|0)!=0){HEAP32[r12>>2]=HEAP32[r2>>2]}r2=HEAP32[r5>>2];r12=HEAP32[r4>>2]-r2|0;r13=r10+(r7-(r12>>2)<<2)|0;_memcpy(r13,r2,r12)|0;r12=HEAP32[r5>>2];HEAP32[r5>>2]=r13;r13=HEAP32[r4>>2];HEAP32[r4>>2]=r10+(r7+1<<2);HEAP32[r9>>2]=r10+(r11<<2);r11=r13;while(1){if((r12|0)==(r11|0)){break}r11=r11-4|0}if((r12|0)==0){return}_free(r12);return}function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=r1+4|0;r5=r1|0;r6=HEAP32[r5>>2];r7=(HEAP32[r4>>2]-r6|0)/12&-1;r8=r7+1|0;if(r8>>>0>357913941){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}r9=r1+8|0;r1=(HEAP32[r9>>2]-r6|0)/12&-1;if(r1>>>0<178956970){r6=r1<<1;r1=r6>>>0<r8>>>0?r8:r6;if((r1|0)==0){r10=0;r11=r1}else{r12=r1;r3=5}}else{r12=357913941;r3=5}do{if(r3==5){r1=r12*12&-1;r6=(r1|0)==0?1:r1;while(1){r13=_malloc(r6);if((r13|0)!=0){r3=16;break}r1=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r1|0)==0){break}FUNCTION_TABLE[r1]()}if(r3==16){r10=r13;r11=r12;break}r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53824;___cxa_throw(r6,62184,110)}}while(0);r12=r10+(r7*12&-1)|0;r13=r10+(r11*12&-1)|0;L17:do{if((r12|0)!=0){r11=r12;r3=r2;HEAP32[r11>>2]=HEAP32[r3>>2];HEAP32[r11+4>>2]=HEAP32[r3+4>>2];HEAP32[r11+8>>2]=HEAP32[r3+8>>2];r3=r2;r11=0;while(1){if(r11>>>0>=3){break L17}HEAP32[r3+(r11<<2)>>2]=0;r11=r11+1|0}}}while(0);r2=r10+((r7+1)*12&-1)|0;r7=HEAP32[r5>>2];r10=HEAP32[r4>>2];r11=r12;while(1){if((r10|0)==(r7|0)){break}r12=r10-12|0;r3=r11-12|0;r6=r12;HEAP32[r3>>2]=HEAP32[r6>>2];HEAP32[r3+4>>2]=HEAP32[r6+4>>2];HEAP32[r3+8>>2]=HEAP32[r6+8>>2];r6=r12;r3=0;while(1){if(r3>>>0>=3){break}HEAP32[r6+(r3<<2)>>2]=0;r3=r3+1|0}r10=r12;r11=r11-12|0}r10=HEAP32[r5>>2];HEAP32[r5>>2]=r11;r11=HEAP32[r4>>2];HEAP32[r4>>2]=r2;HEAP32[r9>>2]=r13;r13=r11;while(1){if((r10|0)==(r13|0)){break}r11=r13-12|0;if((HEAP8[r11]&1)==0){r13=r11;continue}r9=HEAP32[r13-12+8>>2];if((r9|0)==0){r13=r11;continue}_free(r9);r13=r11}if((r10|0)==0){return}_free(r10);return}function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11;r4=0;r5=r3-r2|0;if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r6=r2;r7=r1+1|0}else{r8=r5+16&-16;r9=(r8|0)==0?1:r8;while(1){r10=_malloc(r9);if((r10|0)!=0){r4=16;break}r11=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r11|0)==0){break}FUNCTION_TABLE[r11]()}if(r4==16){HEAP32[r1+8>>2]=r10;HEAP32[r1>>2]=r8|1;HEAP32[r1+4>>2]=r5;r6=r2;r7=r10;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);while(1){if((r6|0)==(r3|0)){break}HEAP8[r7]=HEAP8[r6];r6=r6+1|0;r7=r7+1|0}HEAP8[r7]=0;return}function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(r1){var r2,r3,r4;HEAP32[r1>>2]=55452;r2=r1;HEAP32[r1+56>>2]=55472;r3=r1+4|0;HEAP32[r3>>2]=55656;do{if((HEAP8[r1+36|0]&1)!=0){r4=HEAP32[r1+44>>2];if((r4|0)==0){break}_free(r4)}}while(0);HEAP32[r3>>2]=55800;r3=HEAP32[r1+8>>2];r4=r3+4|0;if(((tempValue=HEAP32[r4>>2],HEAP32[r4>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r3>>2]+8>>2]](r3|0)}__ZNSt3__18ios_baseD2Ev(r1+56|0);if((r1|0)==0){return}_free(r2);return}function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(r1){var r2,r3,r4,r5,r6;r2=r1;r3=HEAP32[HEAP32[r1>>2]-12>>2];HEAP32[r2+r3>>2]=55452;r1=r2+(r3+56)|0;HEAP32[r1>>2]=55472;r4=r2+(r3+4)|0;HEAP32[r4>>2]=55656;do{if((HEAP8[r2+(r3+36)|0]&1)!=0){r5=HEAP32[r2+(r3+44)>>2];if((r5|0)==0){break}_free(r5)}}while(0);HEAP32[r4>>2]=55800;r4=HEAP32[r2+(r3+8)>>2];r3=r4+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)!=0){r6=r1;__ZNSt3__18ios_baseD2Ev(r6);return}FUNCTION_TABLE[HEAP32[HEAP32[r4>>2]+8>>2]](r4|0);r6=r1;__ZNSt3__18ios_baseD2Ev(r6);return}function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(r1){var r2,r3,r4,r5,r6;r2=r1;r3=HEAP32[HEAP32[r1>>2]-12>>2];r1=r2+r3|0;HEAP32[r1>>2]=55452;r4=r2+(r3+56)|0;HEAP32[r4>>2]=55472;r5=r2+(r3+4)|0;HEAP32[r5>>2]=55656;do{if((HEAP8[r2+(r3+36)|0]&1)!=0){r6=HEAP32[r2+(r3+44)>>2];if((r6|0)==0){break}_free(r6)}}while(0);HEAP32[r5>>2]=55800;r5=HEAP32[r2+(r3+8)>>2];r3=r5+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r5>>2]+8>>2]](r5|0)}__ZNSt3__18ios_baseD2Ev(r4);if((r1|0)==0){return}_free(r1);return}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(r1){var r2,r3;r2=r1|0;HEAP32[r2>>2]=55656;do{if((HEAP8[r1+32|0]&1)!=0){r3=HEAP32[r1+40>>2];if((r3|0)==0){break}_free(r3)}}while(0);HEAP32[r2>>2]=55800;r2=HEAP32[r1+4>>2];r1=r2+4|0;if(((tempValue=HEAP32[r1>>2],HEAP32[r1>>2]=tempValue+ -1,tempValue)|0)!=0){return}FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0);return}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(r1){var r2,r3;r2=r1|0;HEAP32[r2>>2]=55656;do{if((HEAP8[r1+32|0]&1)!=0){r3=HEAP32[r1+40>>2];if((r3|0)==0){break}_free(r3)}}while(0);HEAP32[r2>>2]=55800;r2=HEAP32[r1+4>>2];r3=r2+4|0;if(((tempValue=HEAP32[r3>>2],HEAP32[r3>>2]=tempValue+ -1,tempValue)|0)==0){FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+8>>2]](r2|0)}if((r1|0)==0){return}_free(r1);return}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r7=0;r8=r2+44|0;r9=HEAP32[r8>>2];r10=r2+24|0;r11=HEAP32[r10>>2];if(r9>>>0<r11>>>0){HEAP32[r8>>2]=r11;r12=r11}else{r12=r9}r9=r6&24;do{if((r9|0)==24){if((r5|0)==0){r13=0;r14=0;break}else if((r5|0)==2){r7=12;break}else if((r5|0)!=1){r7=16;break}r8=r1;HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;r8=r1+8|0;HEAP32[r8>>2]=-1;HEAP32[r8+4>>2]=-1;return}else if((r9|0)==0){r8=r1;HEAP32[r8>>2]=0;HEAP32[r8+4>>2]=0;r8=r1+8|0;HEAP32[r8>>2]=-1;HEAP32[r8+4>>2]=-1;return}else{if((r5|0)==0){r13=0;r14=0;break}else if((r5|0)==2){r7=12;break}else if((r5|0)!=1){r7=16;break}if((r6&8|0)==0){r15=r11-HEAP32[r2+20>>2]|0}else{r15=HEAP32[r2+12>>2]-HEAP32[r2+8>>2]|0}r13=(r15|0)<0|0?-1:0;r14=r15}}while(0);if(r7==16){r15=r1;HEAP32[r15>>2]=0;HEAP32[r15+4>>2]=0;r15=r1+8|0;HEAP32[r15>>2]=-1;HEAP32[r15+4>>2]=-1;return}if(r7==12){r7=r2+32|0;if((HEAP8[r7]&1)==0){r16=r7+1|0}else{r16=HEAP32[r2+40>>2]}r7=r12-r16|0;r13=(r7|0)<0|0?-1:0;r14=r7}r7=_i64Add(r14,r13,r3,r4);r4=tempRet0;r3=0;do{if(!((r4|0)<(r3|0)|(r4|0)==(r3|0)&r7>>>0<0>>>0)){r13=r2+32|0;if((HEAP8[r13]&1)==0){r17=r13+1|0}else{r17=HEAP32[r2+40>>2]}r13=r12-r17|0;r14=(r13|0)<0|0?-1:0;if((r14|0)<(r4|0)|(r14|0)==(r4|0)&r13>>>0<r7>>>0){break}r13=r6&8;do{if(!((r7|0)==0&(r4|0)==0)){do{if((r13|0)!=0){if((HEAP32[r2+12>>2]|0)!=0){break}r14=r1;HEAP32[r14>>2]=0;HEAP32[r14+4>>2]=0;r14=r1+8|0;HEAP32[r14>>2]=-1;HEAP32[r14+4>>2]=-1;return}}while(0);if(!((r6&16|0)!=0&(r11|0)==0)){break}r14=r1;HEAP32[r14>>2]=0;HEAP32[r14+4>>2]=0;r14=r1+8|0;HEAP32[r14>>2]=-1;HEAP32[r14+4>>2]=-1;return}}while(0);if((r13|0)!=0){HEAP32[r2+12>>2]=HEAP32[r2+8>>2]+r7;HEAP32[r2+16>>2]=r12}if((r6&16|0)!=0){HEAP32[r10>>2]=HEAP32[r2+20>>2]+r7}r14=r1;HEAP32[r14>>2]=0;HEAP32[r14+4>>2]=0;r14=r1+8|0;HEAP32[r14>>2]=r7;HEAP32[r14+4>>2]=r4;return}}while(0);r4=r1;HEAP32[r4>>2]=0;HEAP32[r4+4>>2]=0;r4=r1+8|0;HEAP32[r4>>2]=-1;HEAP32[r4+4>>2]=-1;return}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj(r1,r2,r3,r4){var r5,r6;r5=STACKTOP;r6=r3;r3=STACKTOP;STACKTOP=STACKTOP+16|0;HEAP32[r3>>2]=HEAP32[r6>>2];HEAP32[r3+4>>2]=HEAP32[r6+4>>2];HEAP32[r3+8>>2]=HEAP32[r6+8>>2];HEAP32[r3+12>>2]=HEAP32[r6+12>>2];r6=r3+8|0;FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+16>>2]](r1,r2,HEAP32[r6>>2],HEAP32[r6+4>>2],0,r4);STACKTOP=r5;return}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv(r1){var r2,r3,r4,r5,r6,r7;r2=r1+44|0;r3=HEAP32[r2>>2];r4=HEAP32[r1+24>>2];if(r3>>>0<r4>>>0){HEAP32[r2>>2]=r4;r5=r4}else{r5=r3}if((HEAP32[r1+48>>2]&8|0)==0){r6=-1;return r6}r3=r1+16|0;r4=HEAP32[r3>>2];r2=HEAP32[r1+12>>2];if(r4>>>0<r5>>>0){HEAP32[r3>>2]=r5;r7=r5}else{r7=r4}if(r2>>>0>=r7>>>0){r6=-1;return r6}r6=HEAPU8[r2];return r6}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10;r3=r1+44|0;r4=HEAP32[r3>>2];r5=HEAP32[r1+24>>2];if(r4>>>0<r5>>>0){HEAP32[r3>>2]=r5;r6=r5}else{r6=r4}r4=r1+8|0;r5=HEAP32[r4>>2];r3=r1+12|0;r7=HEAP32[r3>>2];if(r5>>>0>=r7>>>0){r8=-1;return r8}if((r2|0)==-1){HEAP32[r4>>2]=r5;HEAP32[r3>>2]=r7-1;HEAP32[r1+16>>2]=r6;r8=0;return r8}r9=r7-1|0;do{if((HEAP32[r1+48>>2]&16|0)==0){if((r2<<24>>24|0)==(HEAP8[r9]|0)){r10=r9;break}else{r8=-1}return r8}else{r10=r9}}while(0);HEAP32[r4>>2]=r5;HEAP32[r3>>2]=r10;HEAP32[r1+16>>2]=r6;HEAP8[r10]=r2;r8=r2;return r8}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30;r3=0;if((r2|0)==-1){r4=0;return r4}r5=r1+12|0;r6=r1+8|0;r7=HEAP32[r5>>2]-HEAP32[r6>>2]|0;r8=r1+24|0;r9=HEAP32[r8>>2];r10=r1+28|0;r11=HEAP32[r10>>2];if((r9|0)==(r11|0)){if((HEAP32[r1+48>>2]&16|0)==0){r4=-1;return r4}r12=r1+20|0;r13=HEAP32[r12>>2];r14=r9-r13|0;r15=r1+44|0;r16=HEAP32[r15>>2]-r13|0;r13=r1+32|0;r17=r13;r18=HEAP8[r17];r19=(r18&1)!=0;if(r19){r20=HEAP32[r1+36>>2];r21=(HEAP32[r13>>2]&-2)-1|0}else{r20=(r18&255)>>>1;r21=10}if((r20|0)==(r21|0)){__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(r13,r21,1,r21,r21,0);if((HEAP8[r17]&1)==0){r3=12}else{r3=13}}else{if(r19){r3=13}else{r3=12}}if(r3==12){HEAP8[r17]=(r20<<1)+2;r22=r13+1|0;r23=r20+1|0}else if(r3==13){r3=HEAP32[r1+40>>2];r19=r20+1|0;HEAP32[r1+36>>2]=r19;r22=r3;r23=r19}HEAP8[r22+r20|0]=0;HEAP8[r22+r23|0]=0;if((HEAP8[r17]&1)==0){r24=10}else{r24=(HEAP32[r13>>2]&-2)-1|0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r13,r24);r24=HEAP8[r17];if((r24&1)==0){r25=(r24&255)>>>1;r26=r13+1|0}else{r25=HEAP32[r1+36>>2];r26=HEAP32[r1+40>>2]}r13=r26+r25|0;HEAP32[r12>>2]=r26;HEAP32[r10>>2]=r13;r10=r26+r14|0;HEAP32[r8>>2]=r10;r14=r26+r16|0;HEAP32[r15>>2]=r14;r27=r10;r28=r13;r29=r14}else{r27=r9;r28=r11;r29=HEAP32[r1+44>>2]}r11=r27+1|0;r9=r11>>>0<r29>>>0?r29:r11;HEAP32[r1+44>>2]=r9;if((HEAP32[r1+48>>2]&8|0)!=0){r29=r1+32|0;if((HEAP8[r29]&1)==0){r30=r29+1|0}else{r30=HEAP32[r1+40>>2]}HEAP32[r6>>2]=r30;HEAP32[r5>>2]=r30+r7;HEAP32[r1+16>>2]=r9}if((r27|0)==(r28|0)){r4=FUNCTION_TABLE[HEAP32[HEAP32[r1>>2]+52>>2]](r1|0,r2&255);return r4}else{HEAP32[r8>>2]=r11;HEAP8[r27]=r2;r4=r2&255;return r4}}function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r3=r1+32|0;__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r3,r2);r2=r1+44|0;HEAP32[r2>>2]=0;r4=r1+48|0;r5=HEAP32[r4>>2];if((r5&8|0)!=0){r6=HEAP8[r3];if((r6&1)==0){r7=r3+1+((r6&255)>>>1)|0;HEAP32[r2>>2]=r7;r8=r3+1|0;r9=r7;r10=r3+1|0}else{r7=HEAP32[r1+40>>2]+HEAP32[r1+36>>2]|0;HEAP32[r2>>2]=r7;r8=HEAP32[r1+40>>2];r9=r7;r10=HEAP32[r1+40>>2]}HEAP32[r1+8>>2]=r10;HEAP32[r1+12>>2]=r8;HEAP32[r1+16>>2]=r9}if((r5&16|0)==0){return}r5=r3;r9=HEAP8[r5];if((r9&1)==0){r8=(r9&255)>>>1;HEAP32[r2>>2]=r3+1+r8;r11=10;r12=r8}else{r8=HEAP32[r1+36>>2];HEAP32[r2>>2]=HEAP32[r1+40>>2]+r8;r11=(HEAP32[r3>>2]&-2)-1|0;r12=r8}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(r3,r11);r11=HEAP8[r5];if((r11&1)==0){r13=(r11&255)>>>1;r14=r3+1|0;r15=r3+1|0}else{r13=HEAP32[r1+36>>2];r14=HEAP32[r1+40>>2];r15=HEAP32[r1+40>>2]}r3=r1+24|0;HEAP32[r3>>2]=r14;HEAP32[r1+20>>2]=r14;HEAP32[r1+28>>2]=r15+r13;if((HEAP32[r4>>2]&3|0)==0){return}HEAP32[r3>>2]=r14+r12;return}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERKNSt3__16vectorIsNS5_9allocatorIsEEEEES4_PS3_JSB_EE6invokeERKSD_SE_PS9_(r1,r2,r3){var r4,r5,r6,r7,r8;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;r8=FUNCTION_TABLE[r7](r2,r3);return r8}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];r8=FUNCTION_TABLE[r7](r2,r3);return r8}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeEvES4_PS3_JEE6invokeERKS6_S7_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFivEiPS3_JEE6invokeERKS5_S6_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERNSt3__16vectorINS2_7SegItemENS5_9allocatorIS7_EEEEES4_PS3_JSB_EE6invokeERKSD_SE_PSA_(r1,r2,r3){var r4,r5,r6,r7,r8;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;r8=FUNCTION_TABLE[r7](r2,r3);return r8}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];r8=FUNCTION_TABLE[r7](r2,r3);return r8}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEvESA_PS3_JEE6invokeERKSC_SD_(r1,r2){var r3,r4,r5,r6,r7;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r5=HEAP32[r1+4>>2];r6=r2+(r5>>1)|0;r2=HEAP32[r1>>2];if((r5&1|0)==0){r7=r2}else{r7=HEAP32[HEAP32[r6>>2]+r2>>2]}FUNCTION_TABLE[r7](r4,r6);r6=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_(r4);if((HEAP8[r4]&1)==0){STACKTOP=r3;return r6}r7=HEAP32[r4+8>>2];if((r7|0)==0){STACKTOP=r3;return r6}_free(r7);STACKTOP=r3;return r6}function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_(r1){var r2,r3,r4,r5,r6,r7,r8;r2=r1;r3=HEAP8[r2];if((r3&1)==0){r4=(r3&255)>>>1}else{r4=HEAP32[r1+4>>2]}r3=_malloc(r4+4|0);r4=r3;r5=HEAP8[r2];if((r5&1)==0){r6=(r5&255)>>>1}else{r6=HEAP32[r1+4>>2]}HEAP32[r3>>2]=r6;r6=r3+4|0;r3=HEAP8[r2];if((r3&1)==0){r7=(r3&255)>>>1;r8=r1+1|0;_memcpy(r6,r8,r7)|0;return r4}else{r7=HEAP32[r1+4>>2];r8=HEAP32[r1+8>>2];_memcpy(r6,r8,r7)|0;return r4}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeEiES4_PS3_JiEE6invokeERKS6_S7_i(r1,r2,r3){var r4,r5,r6,r7,r8;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;r8=FUNCTION_TABLE[r7](r2,r3);return r8}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];r8=FUNCTION_TABLE[r7](r2,r3);return r8}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERNSt3__16vectorIiNS5_9allocatorIiEEEERKNS5_12basic_stringIcNS5_11char_traitsIcEENS7_IcEEEEES4_PS3_JSA_SH_EE6invokeERKSJ_SK_PS9_PNS0_11BindingTypeISF_EUt_E(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+16|0;r7=r6;r8=HEAP32[r1+4>>2];r9=r2+(r8>>1)|0;r2=r9;r10=HEAP32[r1>>2];if((r8&1|0)==0){r11=r10}else{r11=HEAP32[HEAP32[r9>>2]+r10>>2]}r10=r4+4|0;r9=HEAP32[r4>>2];if(r9>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r9>>>0<11){HEAP8[r7]=r9<<1;r12=r7+1|0}else{r4=r9+16&-16;r8=(r4|0)==0?1:r4;while(1){r13=_malloc(r8);if((r13|0)!=0){r5=19;break}r1=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r1|0)==0){break}FUNCTION_TABLE[r1]()}if(r5==19){HEAP32[r7+8>>2]=r13;HEAP32[r7>>2]=r4|1;HEAP32[r7+4>>2]=r9;r12=r13;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);_memcpy(r12,r10,r9)|0;HEAP8[r12+r9|0]=0;r9=FUNCTION_TABLE[r11](r2,r3,r7);if((HEAP8[r7]&1)==0){STACKTOP=r6;return r9}r3=HEAP32[r7+8>>2];if((r3|0)==0){STACKTOP=r6;return r9}_free(r3);STACKTOP=r6;return r9}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERNSt3__16vectorIiNS5_9allocatorIiEEEERKNS2_7GrammarEES4_PS3_JSA_SD_EE6invokeERKSF_SG_PS9_PSB_(r1,r2,r3,r4){var r5,r6,r7,r8,r9;r5=HEAP32[r1+4>>2];r6=r2+(r5>>1)|0;r2=r6;r7=HEAP32[r1>>2];if((r5&1|0)==0){r8=r7;r9=FUNCTION_TABLE[r8](r2,r3,r4);return r9}else{r8=HEAP32[HEAP32[r6>>2]+r7>>2];r9=FUNCTION_TABLE[r8](r2,r3,r4);return r9}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERKNSt3__16vectorINS2_4WordENS5_9allocatorIS7_EEEEES4_PS3_JSC_EE6invokeERKSE_SF_PSA_(r1,r2,r3){var r4,r5,r6,r7,r8;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;r8=FUNCTION_TABLE[r7](r2,r3);return r8}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];r8=FUNCTION_TABLE[r7](r2,r3);return r8}}function __ZN10emscripten8internal13MethodInvokerIMN14pocketsphinxjs10RecognizerEFNS2_10ReturnTypeERKNSt3__16vectorINS2_10ConfigItemENS5_9allocatorIS7_EEEEES4_PS3_JSC_EE6invokeERKSE_SF_PSA_(r1,r2,r3){var r4,r5,r6,r7,r8;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;r8=FUNCTION_TABLE[r7](r2,r3);return r8}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];r8=FUNCTION_TABLE[r7](r2,r3);return r8}}function __ZN10emscripten8internal12operator_newIN14pocketsphinxjs10RecognizerEJRKNSt3__16vectorINS2_10ConfigItemENS4_9allocatorIS6_EEEEEEEPT_DpT0_(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;r2=0;while(1){r3=_malloc(124);if((r3|0)!=0){break}r4=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r4|0)==0){r2=9;break}FUNCTION_TABLE[r4]()}if(r2==9){r4=___cxa_allocate_exception(4);HEAP32[r4>>2]=53824;___cxa_throw(r4,62184,110)}r4=r3;__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1Ej(r3);HEAP8[r3+12|0]=1;HEAP8[r3+13|0]=0;r5=r3+16|0;r6=_strlen(67928);if(r6>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r6>>>0<11){HEAP8[r5]=r6<<1;r7=r3+17|0}else{r8=r6+16&-16;r9=(r8|0)==0?1:r8;while(1){r10=_malloc(r9);if((r10|0)!=0){r2=29;break}r11=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r11|0)==0){break}FUNCTION_TABLE[r11]()}if(r2==29){HEAP32[r3+24>>2]=r10;HEAP32[r5>>2]=r8|1;HEAP32[r3+20>>2]=r6;r7=r10;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);_memcpy(r7,67928,r6)|0;HEAP8[r7+r6|0]=0;HEAP32[r3+28>>2]=0;HEAP32[r3+32>>2]=0;r6=r3+56|0;HEAP32[r6>>2]=0;HEAP32[r3+60>>2]=0;HEAP32[r3+52>>2]=r6;r6=r3+64|0;r7=0;while(1){if(r7>>>0>=3){break}HEAP32[r6+(r7<<2)>>2]=0;r7=r7+1|0}r7=r3+80|0;HEAP32[r7>>2]=0;HEAP32[r3+84>>2]=0;HEAP32[r3+76>>2]=r7;r7=r3+92|0;HEAP32[r7>>2]=0;HEAP32[r3+96>>2]=0;HEAP32[r3+88>>2]=r7;r7=r3+100|0;r6=0;while(1){if(r6>>>0>=3){break}HEAP32[r7+(r6<<2)>>2]=0;r6=r6+1|0}r6=r3+112|0;r3=0;while(1){if(r3>>>0>=3){break}HEAP32[r6+(r3<<2)>>2]=0;r3=r3+1|0}if((__ZN14pocketsphinxjs10Recognizer4initERKNSt3__16vectorINS_10ConfigItemENS1_9allocatorIS3_EEEE(r4,r1)|0)==0){return r4}__ZN14pocketsphinxjs10Recognizer7cleanupEv(r4);return r4}function __ZN10emscripten8internal7InvokerIPN14pocketsphinxjs10RecognizerEJRKNSt3__16vectorINS2_10ConfigItemENS5_9allocatorIS7_EEEEEE6invokeEPFS4_SC_EPSA_(r1,r2){return FUNCTION_TABLE[r1](r2)}function __ZN10emscripten8internal12operator_newIN14pocketsphinxjs10RecognizerEJEEEPT_DpT0_(){var r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r1=0;r2=STACKTOP;STACKTOP=STACKTOP+16|0;r3=r2;while(1){r4=_malloc(124);if((r4|0)!=0){break}r5=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r5|0)==0){r1=9;break}FUNCTION_TABLE[r5]()}if(r1==9){r5=___cxa_allocate_exception(4);HEAP32[r5>>2]=53824;___cxa_throw(r5,62184,110)}r5=r4;__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1Ej(r4);HEAP8[r4+12|0]=1;HEAP8[r4+13|0]=0;r6=r4+16|0;r7=_strlen(67928);if(r7>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r7>>>0<11){HEAP8[r6]=r7<<1;r8=r4+17|0}else{r9=r7+16&-16;r10=(r9|0)==0?1:r9;while(1){r11=_malloc(r10);if((r11|0)!=0){r1=29;break}r12=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r12|0)==0){break}FUNCTION_TABLE[r12]()}if(r1==29){HEAP32[r4+24>>2]=r11;HEAP32[r6>>2]=r9|1;HEAP32[r4+20>>2]=r7;r8=r11;break}r10=___cxa_allocate_exception(4);HEAP32[r10>>2]=53824;___cxa_throw(r10,62184,110)}}while(0);_memcpy(r8,67928,r7)|0;HEAP8[r8+r7|0]=0;HEAP32[r4+28>>2]=0;HEAP32[r4+32>>2]=0;r7=r4+56|0;HEAP32[r7>>2]=0;HEAP32[r4+60>>2]=0;HEAP32[r4+52>>2]=r7;r7=r4+64|0;r8=0;while(1){if(r8>>>0>=3){break}HEAP32[r7+(r8<<2)>>2]=0;r8=r8+1|0}r8=r4+80|0;HEAP32[r8>>2]=0;HEAP32[r4+84>>2]=0;HEAP32[r4+76>>2]=r8;r8=r4+92|0;HEAP32[r8>>2]=0;HEAP32[r4+96>>2]=0;HEAP32[r4+88>>2]=r8;r8=r4+100|0;r7=0;while(1){if(r7>>>0>=3){break}HEAP32[r8+(r7<<2)>>2]=0;r7=r7+1|0}r7=r4+112|0;r4=0;while(1){if(r4>>>0>=3){break}HEAP32[r7+(r4<<2)>>2]=0;r4=r4+1|0}r4=r3|0;HEAP32[r4>>2]=0;r7=r3+4|0;HEAP32[r7>>2]=0;HEAP32[r3+8>>2]=0;if((__ZN14pocketsphinxjs10Recognizer4initERKNSt3__16vectorINS_10ConfigItemENS1_9allocatorIS3_EEEE(r5,r3)|0)!=0){__ZN14pocketsphinxjs10Recognizer7cleanupEv(r5)}r3=HEAP32[r4>>2];if((r3|0)==0){r13=12;r14=0;STACKTOP=r2;return r5}r4=HEAP32[r7>>2];while(1){if((r3|0)==(r4|0)){break}r8=r4-24|0;HEAP32[r7>>2]=r8;do{if((HEAP8[r4-24+12|0]&1)!=0){r11=HEAP32[r4-24+20>>2];if((r11|0)==0){break}_free(r11)}}while(0);if((HEAP8[r8]&1)==0){r4=r8;continue}r9=HEAP32[r4-24+8>>2];if((r9|0)==0){r4=r8;continue}_free(r9);r4=r8}_free(r3);r13=12;r14=0;STACKTOP=r2;return r5}function __ZN10emscripten8internal7InvokerIPN14pocketsphinxjs10RecognizerEJEE6invokeEPFS4_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeIN14pocketsphinxjs10RecognizerEEEPKNS0_7_TYPEIDEPT_(r1){return 64344}function __ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs10RecognizerEEEvPT_(r1){var r2,r3,r4,r5,r6;if((r1|0)==0){return}__ZN14pocketsphinxjs10Recognizer7cleanupEv(r1);do{if((HEAP8[r1+112|0]&1)!=0){r2=HEAP32[r1+120>>2];if((r2|0)==0){break}_free(r2)}}while(0);do{if((HEAP8[r1+100|0]&1)!=0){r2=HEAP32[r1+108>>2];if((r2|0)==0){break}_free(r2)}}while(0);__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(r1+88|0,HEAP32[r1+92>>2]);__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(r1+76|0,HEAP32[r1+80>>2]);do{if((HEAP8[r1+64|0]&1)!=0){r2=HEAP32[r1+72>>2];if((r2|0)==0){break}_free(r2)}}while(0);__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(r1+52|0,HEAP32[r1+56>>2]);do{if((HEAP8[r1+16|0]&1)!=0){r2=HEAP32[r1+24>>2];if((r2|0)==0){break}_free(r2)}}while(0);r2=r1|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=r1+4|0;while(1){r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){break}r6=r5-12|0;HEAP32[r4>>2]=r6;if((HEAP8[r6]&1)==0){continue}r6=HEAP32[r5-12+8>>2];if((r6|0)==0){continue}_free(r6)}r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r1);return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarENSt3__16vectorINS2_10TransitionENS4_9allocatorIS6_EEEEE7getWireIS3_EEPS9_RKMS3_S9_RKT_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=0;r4=HEAP32[r1>>2];r1=r2;r2=r1+r4|0;while(1){r5=_malloc(12);if((r5|0)!=0){break}r6=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r6|0)==0){r3=9;break}FUNCTION_TABLE[r6]()}if(r3==9){r6=___cxa_allocate_exception(4);HEAP32[r6>>2]=53824;___cxa_throw(r6,62184,110)}r6=r5;r7=r5;HEAP32[r7>>2]=0;r8=r5+4|0;HEAP32[r8>>2]=0;r9=r5+8|0;HEAP32[r9>>2]=0;r5=r1+(r4+4)|0;r4=HEAP32[r5>>2];r1=r2;r2=HEAP32[r1>>2];r10=r4-r2|0;r11=(r10|0)/24&-1;if((r4|0)==(r2|0)){return r6}if(r11>>>0>178956970){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}r12=(r4|0)==(r2|0)?1:r10;while(1){r13=_malloc(r12);if((r13|0)!=0){break}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){r3=25;break}FUNCTION_TABLE[r10]()}if(r3==25){r3=___cxa_allocate_exception(4);HEAP32[r3>>2]=53824;___cxa_throw(r3,62184,110)}r3=r13;HEAP32[r8>>2]=r3;HEAP32[r7>>2]=r3;HEAP32[r9>>2]=r3+(r11*24&-1);r11=HEAP32[r5>>2];r5=HEAP32[r1>>2];r1=r3;while(1){if((r5|0)==(r11|0)){break}if((r1|0)==0){r14=0}else{__ZN14pocketsphinxjs10TransitionC1ERKS0_(r1,r5);r14=HEAP32[r8>>2]}r3=r14+24|0;HEAP32[r8>>2]=r3;r5=r5+24|0;r1=r3}return r6}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarENSt3__16vectorINS2_10TransitionENS4_9allocatorIS6_EEEEE7setWireIS3_EEvRKMS3_S9_RT_PS9_(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22;r4=0;r5=HEAP32[r1>>2];r1=r2;r2=r1+r5|0;if((r2|0)==(r3|0)){return}r6=HEAP32[r3>>2];r7=HEAP32[r3+4>>2];r3=(r7-r6|0)/24&-1;r8=r1+(r5+8)|0;r9=HEAP32[r8>>2];r10=r2;r2=HEAP32[r10>>2];r11=r2;if(r3>>>0<=((r9-r11|0)/24&-1)>>>0){r12=r1+(r5+4)|0;r13=(HEAP32[r12>>2]-r11|0)/24&-1;if(r3>>>0>r13>>>0){r14=1;r15=r6+(r13*24&-1)|0}else{r14=0;r15=r7}r13=r2;r11=r6;while(1){if((r11|0)==(r15|0)){break}r16=r13;r17=r11;HEAP32[r16>>2]=HEAP32[r17>>2];HEAP32[r16+4>>2]=HEAP32[r17+4>>2];HEAP32[r16+8>>2]=HEAP32[r17+8>>2];__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r13+12|0,r11+12|0);r13=r13+24|0;r11=r11+24|0}if(r14<<24>>24==0){while(1){r14=HEAP32[r12>>2];if((r13|0)==(r14|0)){break}HEAP32[r12>>2]=r14-24;if((HEAP8[r14-24+12|0]&1)==0){continue}r11=HEAP32[r14-24+20>>2];if((r11|0)==0){continue}_free(r11)}return}else{r13=r15;while(1){if((r13|0)==(r7|0)){break}r15=HEAP32[r12>>2];if((r15|0)==0){r18=0}else{__ZN14pocketsphinxjs10TransitionC1ERKS0_(r15,r13);r18=HEAP32[r12>>2]}HEAP32[r12>>2]=r18+24;r13=r13+24|0}return}}if((r2|0)==0){r19=r9}else{r9=r1+(r5+4)|0;while(1){r13=HEAP32[r9>>2];if((r2|0)==(r13|0)){break}HEAP32[r9>>2]=r13-24;if((HEAP8[r13-24+12|0]&1)==0){continue}r18=HEAP32[r13-24+20>>2];if((r18|0)==0){continue}_free(r18)}r2=HEAP32[r10>>2];if((r2|0)!=0){_free(r2)}HEAP32[r8>>2]=0;HEAP32[r9>>2]=0;HEAP32[r10>>2]=0;r19=0}if(r3>>>0>178956970){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}r9=(r19|0)/24&-1;do{if(r9>>>0<89478485){r19=r9<<1;r2=r19>>>0<r3>>>0?r3:r19;if(r2>>>0<=178956970){r20=r2;break}__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}else{r20=178956970}}while(0);r3=r20*24&-1;r9=(r3|0)==0?1:r3;while(1){r21=_malloc(r9);if((r21|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r4=39;break}FUNCTION_TABLE[r3]()}if(r4==39){r4=___cxa_allocate_exception(4);HEAP32[r4>>2]=53824;___cxa_throw(r4,62184,110)}r4=r21;r21=r1+(r5+4)|0;HEAP32[r21>>2]=r4;HEAP32[r10>>2]=r4;HEAP32[r8>>2]=r4+(r20*24&-1);r20=r6;r6=r4;while(1){if((r20|0)==(r7|0)){break}if((r6|0)==0){r22=0}else{__ZN14pocketsphinxjs10TransitionC1ERKS0_(r6,r20);r22=HEAP32[r21>>2]}r4=r22+24|0;HEAP32[r21>>2]=r4;r20=r20+24|0;r6=r4}return}function __ZN14pocketsphinxjs10TransitionC1ERKS0_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10;r3=0;r4=r1;r5=r2;HEAP32[r4>>2]=HEAP32[r5>>2];HEAP32[r4+4>>2]=HEAP32[r5+4>>2];HEAP32[r4+8>>2]=HEAP32[r5+8>>2];r5=r1+12|0;r4=r2+12|0;if((HEAP8[r4]&1)==0){r6=r5;HEAP32[r6>>2]=HEAP32[r4>>2];HEAP32[r6+4>>2]=HEAP32[r4+4>>2];HEAP32[r6+8>>2]=HEAP32[r4+8>>2];return}r4=HEAP32[r2+20>>2];r6=HEAP32[r2+16>>2];if(r6>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r6>>>0<11){HEAP8[r5]=r6<<1;r7=r5+1|0}else{r2=r6+16&-16;r8=(r2|0)==0?1:r2;while(1){r9=_malloc(r8);if((r9|0)!=0){r3=18;break}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){break}FUNCTION_TABLE[r10]()}if(r3==18){HEAP32[r1+20>>2]=r9;HEAP32[r5>>2]=r2|1;HEAP32[r1+16>>2]=r6;r7=r9;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);_memcpy(r7,r4,r6)|0;HEAP8[r7+r6|0]=0;return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarEiE7getWireIS3_EEiRKMS3_iRKT_(r1,r2){return HEAP32[r2+HEAP32[r1>>2]>>2]}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7GrammarEiE7setWireIS3_EEvRKMS3_iRT_i(r1,r2,r3){HEAP32[r2+HEAP32[r1>>2]>>2]=r3;return}function __ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs7GrammarEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE(){var r1,r2,r3;r1=0;while(1){r2=_malloc(24);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;HEAP32[r2+12>>2]=0;HEAP32[r2+16>>2]=0;HEAP32[r2+20>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs7GrammarEEEvPT_(r1){var r2,r3,r4,r5,r6;if((r1|0)==0){return}r2=r1+12|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=r1+16|0;while(1){r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){break}HEAP32[r4>>2]=r5-24;if((HEAP8[r5-24+12|0]&1)==0){continue}r6=HEAP32[r5-24+20>>2];if((r6|0)==0){continue}_free(r6)}r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r1);return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIiNS2_9allocatorIiEEEEE3getERKS6_j(r1,r2,r3){var r4;r4=HEAP32[r2>>2];if(HEAP32[r2+4>>2]-r4>>2>>>0>r3>>>0){r2=__emval_take_value(__ZTIi,HEAP32[r4+(r3<<2)>>2]);HEAP32[r1>>2]=r2;return}else{r2=__emval_undefined();HEAP32[r1>>2]=r2;return}}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIiNS2_9allocatorIiEEEEE3setERS6_jRKi(r1,r2,r3){HEAP32[HEAP32[r1>>2]+(r2<<2)>>2]=HEAP32[r3>>2];return 1}function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIiNS2_9allocatorIiEEEEjRKiEbS7_JjS9_EE6invokeEPSB_PS6_ji(r1,r2,r3,r4){var r5,r6,r7;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;r7=HEAP32[r1>>2];HEAP32[r6>>2]=r4;r4=FUNCTION_TABLE[r7](r2,r3,r6);STACKTOP=r5;return r4}function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIiNS3_9allocatorIiEEEEjES2_S9_JjEE6invokeEPSB_PS7_j(r1,r2,r3){var r4,r5;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[r1>>2]](r5,r2,r3);r3=r5|0;__emval_incref(HEAP32[r3>>2]);r5=HEAP32[r3>>2];__emval_decref(r5);STACKTOP=r4;return r5}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIiNS2_9allocatorIiEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;r6=HEAP32[r1+4>>2];r7=r2+(r6>>1)|0;r2=r7;r8=HEAP32[r1>>2];if((r6&1|0)==0){r9=r8;HEAP32[r5>>2]=r3;FUNCTION_TABLE[r9](r2,r5);STACKTOP=r4;return}else{r9=HEAP32[HEAP32[r7>>2]+r8>>2];HEAP32[r5>>2]=r3;FUNCTION_TABLE[r9](r2,r5);STACKTOP=r4;return}}function __ZN10emscripten8internal12operator_newINSt3__16vectorIiNS2_9allocatorIiEEEEJEEEPT_DpT0_(){var r1,r2,r3;r1=0;while(1){r2=_malloc(12);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIiNS2_9allocatorIiEEEEEEPKNS0_7_TYPEIDEPT_(r1){return 63344}function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIiNS2_9allocatorIiEEEEEEvPT_(r1){var r2,r3,r4,r5;if((r1|0)==0){return}r2=HEAP32[r1>>2];if((r2|0)!=0){r3=r1+4|0;r4=HEAP32[r3>>2];while(1){if((r2|0)==(r4|0)){break}r5=r4-4|0;HEAP32[r3>>2]=r5;r4=r5}_free(r2)}_free(r1);return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEE3getERKS8_j(r1,r2,r3){var r4,r5,r6;r4=0;r5=HEAP32[r2>>2];if(((HEAP32[r2+4>>2]-r5|0)/20&-1)>>>0<=r3>>>0){r2=__emval_undefined();HEAP32[r1>>2]=r2;return}r2=r5+(r3*20&-1)|0;while(1){r6=_malloc(20);if((r6|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r4=10;break}FUNCTION_TABLE[r3]()}if(r4==10){r4=___cxa_allocate_exception(4);HEAP32[r4>>2]=53824;___cxa_throw(r4,62184,110)}r4=r6;__ZN14pocketsphinxjs7SegItemC1ERKS0_(r4,r2);r2=__emval_take_value(64304,r4);HEAP32[r1>>2]=r2;return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_(r1,r2,r3){var r4;r4=HEAP32[r1>>2];__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r4+(r2*20&-1)|0,r3|0);r1=r3+12|0;r3=r4+(r2*20&-1)+12|0;r2=HEAP32[r1+4>>2];HEAP32[r3>>2]=HEAP32[r1>>2];HEAP32[r3+4>>2]=r2;return 1}function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_(r1,r2,r3,r4){return FUNCTION_TABLE[HEAP32[r1>>2]](r2,r3,r4)}function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs7SegItemENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j(r1,r2,r3){var r4,r5;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[r1>>2]](r5,r2,r3);r3=r5|0;__emval_incref(HEAP32[r3>>2]);r5=HEAP32[r3>>2];__emval_decref(r5);STACKTOP=r4;return r5}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_(r1,r2,r3){var r4,r5,r6,r7;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;FUNCTION_TABLE[r7](r2,r3);return}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];FUNCTION_TABLE[r7](r2,r3);return}}function __ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEJEEEPT_DpT0_(){var r1,r2,r3;r1=0;while(1){r2=_malloc(12);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_(r1){return 63368}function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs7SegItemENS2_9allocatorIS5_EEEEEEvPT_(r1){var r2,r3,r4,r5,r6;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=r1+4|0;while(1){r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){break}r6=r5-20|0;HEAP32[r4>>2]=r6;if((HEAP8[r6]&1)==0){continue}r6=HEAP32[r5-20+8>>2];if((r6|0)==0){continue}_free(r6)}r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r1);return}function __ZNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS_9allocatorIS2_EEE9push_backERKS2_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+24|0;r5=r4;r6=r1+4|0;r7=HEAP32[r6>>2];r8=r1+8|0;if((r7|0)!=(HEAP32[r8>>2]|0)){if((r7|0)==0){r9=0}else{__ZN14pocketsphinxjs10ConfigItemC1ERKS0_(r7,r2);r9=HEAP32[r6>>2]}HEAP32[r6>>2]=r9+24;STACKTOP=r4;return}r9=r1+8|0;r10=r1|0;r1=(r7-HEAP32[r10>>2]|0)/24&-1;r7=r1+1|0;if(r7>>>0>178956970){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}if(r1>>>0<89478485){r11=r1<<1;r12=r11>>>0<r7>>>0?r7:r11;r11=r5+12|0;HEAP32[r11>>2]=0;HEAP32[r5+16>>2]=r9;if((r12|0)==0){r13=0;r14=r12;r15=r11}else{r16=r12;r17=r11;r3=10}}else{r11=r5+12|0;HEAP32[r11>>2]=0;HEAP32[r5+16>>2]=r9;r16=178956970;r17=r11;r3=10}do{if(r3==10){r11=r16*24&-1;r9=(r11|0)==0?1:r11;while(1){r18=_malloc(r9);if((r18|0)!=0){r3=21;break}r11=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r11|0)==0){break}FUNCTION_TABLE[r11]()}if(r3==21){r13=r18;r14=r16;r15=r17;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);r17=r5|0;HEAP32[r17>>2]=r13;r16=r13+(r1*24&-1)|0;r1=r5+8|0;HEAP32[r1>>2]=r16;r18=r5+4|0;HEAP32[r18>>2]=r16;HEAP32[r15>>2]=r13+(r14*24&-1);if((r16|0)==0){r19=0}else{__ZN14pocketsphinxjs10ConfigItemC1ERKS0_(r16,r2);r19=HEAP32[r1>>2]}HEAP32[r1>>2]=r19+24;r19=HEAP32[r10>>2];r2=HEAP32[r6>>2];while(1){if((r2|0)==(r19|0)){break}r16=HEAP32[r18>>2];r14=r2-24|0;r13=r16-24|0;r3=r14;HEAP32[r13>>2]=HEAP32[r3>>2];HEAP32[r13+4>>2]=HEAP32[r3+4>>2];HEAP32[r13+8>>2]=HEAP32[r3+8>>2];r3=r14;r13=0;while(1){if(r13>>>0>=3){break}HEAP32[r3+(r13<<2)>>2]=0;r13=r13+1|0}r13=r2-24+12|0;r3=r16-24+12|0;r9=r13;HEAP32[r3>>2]=HEAP32[r9>>2];HEAP32[r3+4>>2]=HEAP32[r9+4>>2];HEAP32[r3+8>>2]=HEAP32[r9+8>>2];r9=r13;r13=0;while(1){if(r13>>>0>=3){break}HEAP32[r9+(r13<<2)>>2]=0;r13=r13+1|0}HEAP32[r18>>2]=HEAP32[r18>>2]-24;r2=r14}r2=HEAP32[r10>>2];HEAP32[r10>>2]=HEAP32[r18>>2];HEAP32[r18>>2]=r2;r18=HEAP32[r6>>2];HEAP32[r6>>2]=HEAP32[r1>>2];HEAP32[r1>>2]=r18;r18=HEAP32[r8>>2];HEAP32[r8>>2]=HEAP32[r15>>2];HEAP32[r15>>2]=r18;HEAP32[r17>>2]=r2;__ZNSt3__114__split_bufferIN14pocketsphinxjs10ConfigItemERNS_9allocatorIS2_EEED1Ev(r5);STACKTOP=r4;return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEE3getERKS8_j(r1,r2,r3){var r4,r5,r6;r4=0;r5=HEAP32[r2>>2];if(((HEAP32[r2+4>>2]-r5|0)/24&-1)>>>0<=r3>>>0){r2=__emval_undefined();HEAP32[r1>>2]=r2;return}r2=r5+(r3*24&-1)|0;while(1){r6=_malloc(24);if((r6|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r4=10;break}FUNCTION_TABLE[r3]()}if(r4==10){r4=___cxa_allocate_exception(4);HEAP32[r4>>2]=53824;___cxa_throw(r4,62184,110)}r4=r6;__ZN14pocketsphinxjs10ConfigItemC1ERKS0_(r4,r2);r2=__emval_take_value(64352,r4);HEAP32[r1>>2]=r2;return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_(r1,r2,r3){var r4;r4=HEAP32[r1>>2];__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r4+(r2*24&-1)|0,r3|0);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r4+(r2*24&-1)+12|0,r3+12|0);return 1}function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_(r1,r2,r3,r4){return FUNCTION_TABLE[HEAP32[r1>>2]](r2,r3,r4)}function __ZN14pocketsphinxjs10ConfigItemC1ERKS0_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;r3=0;r4=r2;if((HEAP8[r4]&1)==0){r5=r1;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2]}else{r4=HEAP32[r2+8>>2];r5=HEAP32[r2+4>>2];if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r6=r1+1|0}else{r7=r5+16&-16;r8=(r7|0)==0?1:r7;while(1){r9=_malloc(r8);if((r9|0)!=0){r3=18;break}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){break}FUNCTION_TABLE[r10]()}if(r3==18){HEAP32[r1+8>>2]=r9;HEAP32[r1>>2]=r7|1;HEAP32[r1+4>>2]=r5;r6=r9;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);_memcpy(r6,r4,r5)|0;HEAP8[r6+r5|0]=0}r5=r1+12|0;r6=r2+12|0;if((HEAP8[r6]&1)==0){r4=r5;HEAP32[r4>>2]=HEAP32[r6>>2];HEAP32[r4+4>>2]=HEAP32[r6+4>>2];HEAP32[r4+8>>2]=HEAP32[r6+8>>2];return}r6=HEAP32[r2+20>>2];r4=HEAP32[r2+16>>2];if(r4>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r4>>>0<11){HEAP8[r5]=r4<<1;r11=r5+1|0}else{r2=r4+16&-16;r9=(r2|0)==0?1:r2;while(1){r12=_malloc(r9);if((r12|0)!=0){r3=38;break}r8=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r8|0)==0){break}FUNCTION_TABLE[r8]()}if(r3==38){HEAP32[r1+20>>2]=r12;HEAP32[r5>>2]=r2|1;HEAP32[r1+16>>2]=r4;r11=r12;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);_memcpy(r11,r6,r4)|0;HEAP8[r11+r4|0]=0;return}function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j(r1,r2,r3){var r4,r5;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[r1>>2]](r5,r2,r3);r3=r5|0;__emval_incref(HEAP32[r3>>2]);r5=HEAP32[r3>>2];__emval_decref(r5);STACKTOP=r4;return r5}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_(r1,r2,r3){var r4,r5,r6,r7;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;FUNCTION_TABLE[r7](r2,r3);return}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];FUNCTION_TABLE[r7](r2,r3);return}}function __ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEJEEEPT_DpT0_(){var r1,r2,r3;r1=0;while(1){r2=_malloc(12);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_(r1){return 63440}function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs10ConfigItemENS2_9allocatorIS5_EEEEEEvPT_(r1){var r2,r3,r4,r5,r6,r7;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=r1+4|0;while(1){r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){break}r6=r5-24|0;HEAP32[r4>>2]=r6;do{if((HEAP8[r5-24+12|0]&1)!=0){r7=HEAP32[r5-24+20>>2];if((r7|0)==0){break}_free(r7)}}while(0);if((HEAP8[r6]&1)==0){continue}r7=HEAP32[r5-24+8>>2];if((r7|0)==0){continue}_free(r7)}r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r1);return}function __ZNSt3__114__split_bufferIN14pocketsphinxjs10ConfigItemERNS_9allocatorIS2_EEED1Ev(r1){var r2,r3,r4,r5,r6;r2=HEAP32[r1+4>>2];r3=r1+8|0;while(1){r4=HEAP32[r3>>2];if((r2|0)==(r4|0)){break}r5=r4-24|0;HEAP32[r3>>2]=r5;do{if((HEAP8[r4-24+12|0]&1)!=0){r6=HEAP32[r4-24+20>>2];if((r6|0)==0){break}_free(r6)}}while(0);if((HEAP8[r5]&1)==0){continue}r6=HEAP32[r4-24+8>>2];if((r6|0)==0){continue}_free(r6)}r3=HEAP32[r1>>2];if((r3|0)==0){return}_free(r3);return}function __ZNSt3__16vectorIN14pocketsphinxjs4WordENS_9allocatorIS2_EEE9push_backERKS2_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+24|0;r5=r4;r6=r1+4|0;r7=HEAP32[r6>>2];r8=r1+8|0;if((r7|0)!=(HEAP32[r8>>2]|0)){if((r7|0)==0){r9=0}else{__ZN14pocketsphinxjs4WordC1ERKS0_(r7,r2);r9=HEAP32[r6>>2]}HEAP32[r6>>2]=r9+24;STACKTOP=r4;return}r9=r1+8|0;r10=r1|0;r1=(r7-HEAP32[r10>>2]|0)/24&-1;r7=r1+1|0;if(r7>>>0>178956970){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}if(r1>>>0<89478485){r11=r1<<1;r12=r11>>>0<r7>>>0?r7:r11;r11=r5+12|0;HEAP32[r11>>2]=0;HEAP32[r5+16>>2]=r9;if((r12|0)==0){r13=0;r14=r12;r15=r11}else{r16=r12;r17=r11;r3=10}}else{r11=r5+12|0;HEAP32[r11>>2]=0;HEAP32[r5+16>>2]=r9;r16=178956970;r17=r11;r3=10}do{if(r3==10){r11=r16*24&-1;r9=(r11|0)==0?1:r11;while(1){r18=_malloc(r9);if((r18|0)!=0){r3=21;break}r11=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r11|0)==0){break}FUNCTION_TABLE[r11]()}if(r3==21){r13=r18;r14=r16;r15=r17;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);r17=r5|0;HEAP32[r17>>2]=r13;r16=r13+(r1*24&-1)|0;r1=r5+8|0;HEAP32[r1>>2]=r16;r18=r5+4|0;HEAP32[r18>>2]=r16;HEAP32[r15>>2]=r13+(r14*24&-1);if((r16|0)==0){r19=0}else{__ZN14pocketsphinxjs4WordC1ERKS0_(r16,r2);r19=HEAP32[r1>>2]}HEAP32[r1>>2]=r19+24;r19=HEAP32[r10>>2];r2=HEAP32[r6>>2];while(1){if((r2|0)==(r19|0)){break}r16=HEAP32[r18>>2];r14=r2-24|0;r13=r16-24|0;r3=r14;HEAP32[r13>>2]=HEAP32[r3>>2];HEAP32[r13+4>>2]=HEAP32[r3+4>>2];HEAP32[r13+8>>2]=HEAP32[r3+8>>2];r3=r14;r13=0;while(1){if(r13>>>0>=3){break}HEAP32[r3+(r13<<2)>>2]=0;r13=r13+1|0}r13=r2-24+12|0;r3=r16-24+12|0;r9=r13;HEAP32[r3>>2]=HEAP32[r9>>2];HEAP32[r3+4>>2]=HEAP32[r9+4>>2];HEAP32[r3+8>>2]=HEAP32[r9+8>>2];r9=r13;r13=0;while(1){if(r13>>>0>=3){break}HEAP32[r9+(r13<<2)>>2]=0;r13=r13+1|0}HEAP32[r18>>2]=HEAP32[r18>>2]-24;r2=r14}r2=HEAP32[r10>>2];HEAP32[r10>>2]=HEAP32[r18>>2];HEAP32[r18>>2]=r2;r18=HEAP32[r6>>2];HEAP32[r6>>2]=HEAP32[r1>>2];HEAP32[r1>>2]=r18;r18=HEAP32[r8>>2];HEAP32[r8>>2]=HEAP32[r15>>2];HEAP32[r15>>2]=r18;HEAP32[r17>>2]=r2;__ZNSt3__114__split_bufferIN14pocketsphinxjs4WordERNS_9allocatorIS2_EEED1Ev(r5);STACKTOP=r4;return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEE3getERKS8_j(r1,r2,r3){var r4,r5,r6;r4=0;r5=HEAP32[r2>>2];if(((HEAP32[r2+4>>2]-r5|0)/24&-1)>>>0<=r3>>>0){r2=__emval_undefined();HEAP32[r1>>2]=r2;return}r2=r5+(r3*24&-1)|0;while(1){r6=_malloc(24);if((r6|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r4=10;break}FUNCTION_TABLE[r3]()}if(r4==10){r4=___cxa_allocate_exception(4);HEAP32[r4>>2]=53824;___cxa_throw(r4,62184,110)}r4=r6;__ZN14pocketsphinxjs4WordC1ERKS0_(r4,r2);r2=__emval_take_value(64320,r4);HEAP32[r1>>2]=r2;return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_(r1,r2,r3){var r4;r4=HEAP32[r1>>2];__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r4+(r2*24&-1)|0,r3|0);__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r4+(r2*24&-1)+12|0,r3+12|0);return 1}function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_(r1,r2,r3,r4){return FUNCTION_TABLE[HEAP32[r1>>2]](r2,r3,r4)}function __ZN14pocketsphinxjs4WordC1ERKS0_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;r3=0;r4=r2;if((HEAP8[r4]&1)==0){r5=r1;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2]}else{r4=HEAP32[r2+8>>2];r5=HEAP32[r2+4>>2];if(r5>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r5>>>0<11){HEAP8[r1]=r5<<1;r6=r1+1|0}else{r7=r5+16&-16;r8=(r7|0)==0?1:r7;while(1){r9=_malloc(r8);if((r9|0)!=0){r3=18;break}r10=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r10|0)==0){break}FUNCTION_TABLE[r10]()}if(r3==18){HEAP32[r1+8>>2]=r9;HEAP32[r1>>2]=r7|1;HEAP32[r1+4>>2]=r5;r6=r9;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);_memcpy(r6,r4,r5)|0;HEAP8[r6+r5|0]=0}r5=r1+12|0;r6=r2+12|0;if((HEAP8[r6]&1)==0){r4=r5;HEAP32[r4>>2]=HEAP32[r6>>2];HEAP32[r4+4>>2]=HEAP32[r6+4>>2];HEAP32[r4+8>>2]=HEAP32[r6+8>>2];return}r6=HEAP32[r2+20>>2];r4=HEAP32[r2+16>>2];if(r4>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r4>>>0<11){HEAP8[r5]=r4<<1;r11=r5+1|0}else{r2=r4+16&-16;r9=(r2|0)==0?1:r2;while(1){r12=_malloc(r9);if((r12|0)!=0){r3=38;break}r8=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r8|0)==0){break}FUNCTION_TABLE[r8]()}if(r3==38){HEAP32[r1+20>>2]=r12;HEAP32[r5>>2]=r2|1;HEAP32[r1+16>>2]=r4;r11=r12;break}r9=___cxa_allocate_exception(4);HEAP32[r9>>2]=53824;___cxa_throw(r9,62184,110)}}while(0);_memcpy(r11,r6,r4)|0;HEAP8[r11+r4|0]=0;return}function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs4WordENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j(r1,r2,r3){var r4,r5;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[r1>>2]](r5,r2,r3);r3=r5|0;__emval_incref(HEAP32[r3>>2]);r5=HEAP32[r3>>2];__emval_decref(r5);STACKTOP=r4;return r5}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_(r1,r2,r3){var r4,r5,r6,r7;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;FUNCTION_TABLE[r7](r2,r3);return}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];FUNCTION_TABLE[r7](r2,r3);return}}function __ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEJEEEPT_DpT0_(){var r1,r2,r3;r1=0;while(1){r2=_malloc(12);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_(r1){return 63392}function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs4WordENS2_9allocatorIS5_EEEEEEvPT_(r1){var r2,r3,r4,r5,r6,r7;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=r1+4|0;while(1){r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){break}r6=r5-24|0;HEAP32[r4>>2]=r6;do{if((HEAP8[r5-24+12|0]&1)!=0){r7=HEAP32[r5-24+20>>2];if((r7|0)==0){break}_free(r7)}}while(0);if((HEAP8[r6]&1)==0){continue}r7=HEAP32[r5-24+8>>2];if((r7|0)==0){continue}_free(r7)}r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r1);return}function __ZNSt3__114__split_bufferIN14pocketsphinxjs4WordERNS_9allocatorIS2_EEED1Ev(r1){var r2,r3,r4,r5,r6;r2=HEAP32[r1+4>>2];r3=r1+8|0;while(1){r4=HEAP32[r3>>2];if((r2|0)==(r4|0)){break}r5=r4-24|0;HEAP32[r3>>2]=r5;do{if((HEAP8[r4-24+12|0]&1)!=0){r6=HEAP32[r4-24+20>>2];if((r6|0)==0){break}_free(r6)}}while(0);if((HEAP8[r5]&1)==0){continue}r6=HEAP32[r4-24+8>>2];if((r6|0)==0){continue}_free(r6)}r3=HEAP32[r1>>2];if((r3|0)==0){return}_free(r3);return}function __ZNSt3__16vectorIN14pocketsphinxjs10TransitionENS_9allocatorIS2_EEE9push_backERKS2_(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=r1+4|0;r5=HEAP32[r4>>2];r6=r1+8|0;if((r5|0)!=(HEAP32[r6>>2]|0)){if((r5|0)==0){r7=0}else{__ZN14pocketsphinxjs10TransitionC1ERKS0_(r5,r2);r7=HEAP32[r4>>2]}HEAP32[r4>>2]=r7+24;return}r7=r1|0;r1=(r5-HEAP32[r7>>2]|0)/24&-1;r5=r1+1|0;if(r5>>>0>178956970){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}if(r1>>>0<89478485){r8=r1<<1;r9=r8>>>0<r5>>>0?r5:r8;if((r9|0)==0){r10=0;r11=r9}else{r12=r9;r3=9}}else{r12=178956970;r3=9}do{if(r3==9){r9=r12*24&-1;r8=(r9|0)==0?1:r9;while(1){r13=_malloc(r8);if((r13|0)!=0){r3=20;break}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}if(r3==20){r10=r13;r11=r12;break}r8=___cxa_allocate_exception(4);HEAP32[r8>>2]=53824;___cxa_throw(r8,62184,110)}}while(0);r12=r10+(r1*24&-1)|0;r13=r10+(r11*24&-1)|0;if((r12|0)!=0){__ZN14pocketsphinxjs10TransitionC1ERKS0_(r12,r2)}r2=r10+((r1+1)*24&-1)|0;r1=HEAP32[r7>>2];r10=HEAP32[r4>>2];r11=r12;L27:while(1){if((r10|0)==(r1|0)){break}r12=r10-24|0;r3=r11-24|0;r8=r3;r9=r12;HEAP32[r8>>2]=HEAP32[r9>>2];HEAP32[r8+4>>2]=HEAP32[r9+4>>2];HEAP32[r8+8>>2]=HEAP32[r9+8>>2];r9=r10-24+12|0;r8=r11-24+12|0;r5=r9;HEAP32[r8>>2]=HEAP32[r5>>2];HEAP32[r8+4>>2]=HEAP32[r5+4>>2];HEAP32[r8+8>>2]=HEAP32[r5+8>>2];r5=r9;r9=0;while(1){if(r9>>>0>=3){r10=r12;r11=r3;continue L27}HEAP32[r5+(r9<<2)>>2]=0;r9=r9+1|0}}r10=HEAP32[r7>>2];HEAP32[r7>>2]=r11;r11=HEAP32[r4>>2];HEAP32[r4>>2]=r2;HEAP32[r6>>2]=r13;r13=r11;while(1){if((r10|0)==(r13|0)){break}r11=r13-24|0;if((HEAP8[r13-24+12|0]&1)==0){r13=r11;continue}r6=HEAP32[r13-24+20>>2];if((r6|0)==0){r13=r11;continue}_free(r6);r13=r11}if((r10|0)==0){return}_free(r10);return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEE3getERKS8_j(r1,r2,r3){var r4,r5,r6;r4=0;r5=HEAP32[r2>>2];if(((HEAP32[r2+4>>2]-r5|0)/24&-1)>>>0<=r3>>>0){r2=__emval_undefined();HEAP32[r1>>2]=r2;return}r2=r5+(r3*24&-1)|0;while(1){r6=_malloc(24);if((r6|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r4=10;break}FUNCTION_TABLE[r3]()}if(r4==10){r4=___cxa_allocate_exception(4);HEAP32[r4>>2]=53824;___cxa_throw(r4,62184,110)}r4=r6;__ZN14pocketsphinxjs10TransitionC1ERKS0_(r4,r2);r2=__emval_take_value(64328,r4);HEAP32[r1>>2]=r2;return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEE3setERS8_jRKS5_(r1,r2,r3){var r4,r5;r4=HEAP32[r1>>2];r1=r4+(r2*24&-1)|0;r5=r3;HEAP32[r1>>2]=HEAP32[r5>>2];HEAP32[r1+4>>2]=HEAP32[r5+4>>2];HEAP32[r1+8>>2]=HEAP32[r5+8>>2];__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(r4+(r2*24&-1)+12|0,r3+12|0);return 1}function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEjRKS5_EbS9_JjSB_EE6invokeEPSD_PS8_jPS5_(r1,r2,r3,r4){return FUNCTION_TABLE[HEAP32[r1>>2]](r2,r3,r4)}function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIN14pocketsphinxjs10TransitionENS3_9allocatorIS6_EEEEjES2_SB_JjEE6invokeEPSD_PS9_j(r1,r2,r3){var r4,r5;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[r1>>2]](r5,r2,r3);r3=r5|0;__emval_incref(HEAP32[r3>>2]);r5=HEAP32[r3>>2];__emval_decref(r5);STACKTOP=r4;return r5}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEKFjvEjPKS8_JEE6invokeERKSA_SC_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEFvRKS5_EvPS8_JSA_EE6invokeERKSC_SD_PS5_(r1,r2,r3){var r4,r5,r6,r7;r4=HEAP32[r1+4>>2];r5=r2+(r4>>1)|0;r2=r5;r6=HEAP32[r1>>2];if((r4&1|0)==0){r7=r6;FUNCTION_TABLE[r7](r2,r3);return}else{r7=HEAP32[HEAP32[r5>>2]+r6>>2];FUNCTION_TABLE[r7](r2,r3);return}}function __ZN10emscripten8internal12operator_newINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEJEEEPT_DpT0_(){var r1,r2,r3;r1=0;while(1){r2=_malloc(12);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEJEE6invokeEPFS9_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEEEPKNS0_7_TYPEIDEPT_(r1){return 63416}function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIN14pocketsphinxjs10TransitionENS2_9allocatorIS5_EEEEEEvPT_(r1){var r2,r3,r4,r5,r6;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2];do{if((r3|0)!=0){r4=r1+4|0;while(1){r5=HEAP32[r4>>2];if((r3|0)==(r5|0)){break}HEAP32[r4>>2]=r5-24;if((HEAP8[r5-24+12|0]&1)==0){continue}r6=HEAP32[r5-24+20>>2];if((r6|0)==0){continue}_free(r6)}r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(r4)}}while(0);_free(r1);return}function __ZNSt3__16vectorIsNS_9allocatorIsEEE9push_backERKs(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=r1+4|0;r5=HEAP32[r4>>2];r6=r1+8|0;if((r5|0)!=(HEAP32[r6>>2]|0)){if((r5|0)==0){r7=0}else{HEAP16[r5>>1]=HEAP16[r2>>1];r7=HEAP32[r4>>2]}HEAP32[r4>>2]=r7+2;return}r7=r1|0;r1=r5-HEAP32[r7>>2]|0;r5=r1>>1;r8=r5+1|0;if((r8|0)<0){__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv()}if(r5>>>0<1073741823){r9=r1>>>0<r8>>>0?r8:r1;if((r9|0)==0){r10=0;r11=r9}else{r12=r9;r3=9}}else{r12=2147483647;r3=9}do{if(r3==9){r9=r12<<1;r1=(r9|0)==0?1:r9;while(1){r13=_malloc(r1);if((r13|0)!=0){r3=20;break}r9=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r9|0)==0){break}FUNCTION_TABLE[r9]()}if(r3==20){r10=r13;r11=r12;break}r1=___cxa_allocate_exception(4);HEAP32[r1>>2]=53824;___cxa_throw(r1,62184,110)}}while(0);r12=r10+(r5<<1)|0;if((r12|0)!=0){HEAP16[r12>>1]=HEAP16[r2>>1]}r2=HEAP32[r7>>2];r12=HEAP32[r4>>2]-r2|0;r13=r10+(r5-(r12>>1)<<1)|0;_memcpy(r13,r2,r12)|0;r12=HEAP32[r7>>2];HEAP32[r7>>2]=r13;r13=HEAP32[r4>>2];HEAP32[r4>>2]=r10+(r5+1<<1);HEAP32[r6>>2]=r10+(r11<<1);r11=r13;while(1){if((r12|0)==(r11|0)){break}r11=r11-2|0}if((r12|0)==0){return}_free(r12);return}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIsNS2_9allocatorIsEEEEE3getERKS6_j(r1,r2,r3){var r4;r4=HEAP32[r2>>2];if(HEAP32[r2+4>>2]-r4>>1>>>0>r3>>>0){r2=__emval_take_value(__ZTIs,HEAP16[r4+(r3<<1)>>1]);HEAP32[r1>>2]=r2;return}else{r2=__emval_undefined();HEAP32[r1>>2]=r2;return}}function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIsNS2_9allocatorIsEEEEE3setERS6_jRKs(r1,r2,r3){HEAP16[HEAP32[r1>>2]+(r2<<1)>>1]=HEAP16[r3>>1];return 1}function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIsNS2_9allocatorIsEEEEjRKsEbS7_JjS9_EE6invokeEPSB_PS6_js(r1,r2,r3,r4){var r5,r6,r7;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;r7=HEAP32[r1>>2];HEAP16[r6>>1]=r4;r4=FUNCTION_TABLE[r7](r2,r3,r6);STACKTOP=r5;return r4}function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIsNS3_9allocatorIsEEEEjES2_S9_JjEE6invokeEPSB_PS7_j(r1,r2,r3){var r4,r5;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;FUNCTION_TABLE[HEAP32[r1>>2]](r5,r2,r3);r3=r5|0;__emval_incref(HEAP32[r3>>2]);r5=HEAP32[r3>>2];__emval_decref(r5);STACKTOP=r4;return r5}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIsNS2_9allocatorIsEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_(r1,r2){var r3,r4,r5,r6,r7;r3=HEAP32[r1+4>>2];r4=r2+(r3>>1)|0;r2=r4;r5=HEAP32[r1>>2];if((r3&1|0)==0){r6=r5;r7=FUNCTION_TABLE[r6](r2);return r7}else{r6=HEAP32[HEAP32[r4>>2]+r5>>2];r7=FUNCTION_TABLE[r6](r2);return r7}}function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIsNS2_9allocatorIsEEEEFvRKsEvPS6_JS8_EE6invokeERKSA_SB_s(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r4=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r4;r6=HEAP32[r1+4>>2];r7=r2+(r6>>1)|0;r2=r7;r8=HEAP32[r1>>2];if((r6&1|0)==0){r9=r8;HEAP16[r5>>1]=r3;FUNCTION_TABLE[r9](r2,r5);STACKTOP=r4;return}else{r9=HEAP32[HEAP32[r7>>2]+r8>>2];HEAP16[r5>>1]=r3;FUNCTION_TABLE[r9](r2,r5);STACKTOP=r4;return}}function __ZN10emscripten8internal12operator_newINSt3__16vectorIsNS2_9allocatorIsEEEEJEEEPT_DpT0_(){var r1,r2,r3;r1=0;while(1){r2=_malloc(12);if((r2|0)!=0){r1=12;break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){break}FUNCTION_TABLE[r3]()}if(r1==12){HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;return r2}r2=___cxa_allocate_exception(4);HEAP32[r2>>2]=53824;___cxa_throw(r2,62184,110)}function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIsNS2_9allocatorIsEEEEJEE6invokeEPFS7_vE(r1){return FUNCTION_TABLE[r1]()}function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIsNS2_9allocatorIsEEEEEEPKNS0_7_TYPEIDEPT_(r1){return 63320}function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIsNS2_9allocatorIsEEEEEEvPT_(r1){var r2,r3,r4,r5;if((r1|0)==0){return}r2=HEAP32[r1>>2];if((r2|0)!=0){r3=r1+4|0;r4=HEAP32[r3>>2];while(1){if((r2|0)==(r4|0)){break}r5=r4-2|0;HEAP32[r3>>2]=r5;r4=r5}_free(r2)}_free(r1);return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_(r1,r2){return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_(r2+HEAP32[r1>>2]|0)}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=HEAP32[r1>>2];r1=r2;r2=r1+r7|0;r8=r2;r9=r3+4|0;r10=HEAP32[r3>>2];if(r10>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r10>>>0<11){HEAP8[r6]=r10<<1;r11=r6+1|0}else{r3=r10+16&-16;r12=(r3|0)==0?1:r3;while(1){r13=_malloc(r12);if((r13|0)!=0){r4=16;break}r14=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r14|0)==0){break}FUNCTION_TABLE[r14]()}if(r4==16){HEAP32[r6+8>>2]=r13;HEAP32[r6>>2]=r3|1;HEAP32[r6+4>>2]=r10;r11=r13;break}r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53824;___cxa_throw(r12,62184,110)}}while(0);_memcpy(r11,r9,r10)|0;HEAP8[r11+r10|0]=0;if((HEAP8[r2]&1)==0){HEAP8[r1+(r7+1)|0]=0;HEAP8[r2]=0}else{HEAP8[HEAP32[r1+(r7+8)>>2]]=0;HEAP32[r1+(r7+4)>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r8);r8=r6;HEAP32[r2>>2]=HEAP32[r8>>2];HEAP32[r2+4>>2]=HEAP32[r8+4>>2];HEAP32[r2+8>>2]=HEAP32[r8+8>>2];r2=r6;r7=0;while(1){if(r7>>>0>=3){break}HEAP32[r2+(r7<<2)>>2]=0;r7=r7+1|0}if((HEAP8[r8]&1)==0){STACKTOP=r5;return}r8=HEAP32[r6+8>>2];if((r8|0)==0){STACKTOP=r5;return}_free(r8);STACKTOP=r5;return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionEiE7getWireIS3_EEiRKMS3_iRKT_(r1,r2){return HEAP32[r2+HEAP32[r1>>2]>>2]}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10TransitionEiE7setWireIS3_EEvRKMS3_iRT_i(r1,r2,r3){HEAP32[r2+HEAP32[r1>>2]>>2]=r3;return}function __ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs10TransitionEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE(){var r1,r2,r3;r1=0;while(1){r2=_malloc(24);if((r2|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r1=9;break}FUNCTION_TABLE[r3]()}if(r1==9){r1=___cxa_allocate_exception(4);HEAP32[r1>>2]=53824;___cxa_throw(r1,62184,110)}r1=r2;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;HEAP32[r2+12>>2]=0;HEAP32[r2+16>>2]=0;HEAP32[r2+20>>2]=0;r3=r2+12|0;r2=0;while(1){if(r2>>>0>=3){break}HEAP32[r3+(r2<<2)>>2]=0;r2=r2+1|0}return r1}function __ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs10TransitionEEEvPT_(r1){var r2;if((r1|0)==0){return}do{if((HEAP8[r1+12|0]&1)!=0){r2=HEAP32[r1+20>>2];if((r2|0)==0){break}_free(r2)}}while(0);_free(r1);return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemEiE7getWireIS3_EEiRKMS3_iRKT_(r1,r2){return HEAP32[r2+HEAP32[r1>>2]>>2]}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemEiE7setWireIS3_EEvRKMS3_iRT_i(r1,r2,r3){HEAP32[r2+HEAP32[r1>>2]>>2]=r3;return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_(r1,r2){return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_(r2+HEAP32[r1>>2]|0)}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs7SegItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=HEAP32[r1>>2];r1=r2;r2=r1+r7|0;r8=r2;r9=r3+4|0;r10=HEAP32[r3>>2];if(r10>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r10>>>0<11){HEAP8[r6]=r10<<1;r11=r6+1|0}else{r3=r10+16&-16;r12=(r3|0)==0?1:r3;while(1){r13=_malloc(r12);if((r13|0)!=0){r4=16;break}r14=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r14|0)==0){break}FUNCTION_TABLE[r14]()}if(r4==16){HEAP32[r6+8>>2]=r13;HEAP32[r6>>2]=r3|1;HEAP32[r6+4>>2]=r10;r11=r13;break}r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53824;___cxa_throw(r12,62184,110)}}while(0);_memcpy(r11,r9,r10)|0;HEAP8[r11+r10|0]=0;if((HEAP8[r2]&1)==0){HEAP8[r1+(r7+1)|0]=0;HEAP8[r2]=0}else{HEAP8[HEAP32[r1+(r7+8)>>2]]=0;HEAP32[r1+(r7+4)>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r8);r8=r6;HEAP32[r2>>2]=HEAP32[r8>>2];HEAP32[r2+4>>2]=HEAP32[r8+4>>2];HEAP32[r2+8>>2]=HEAP32[r8+8>>2];r2=r6;r7=0;while(1){if(r7>>>0>=3){break}HEAP32[r2+(r7<<2)>>2]=0;r7=r7+1|0}if((HEAP8[r8]&1)==0){STACKTOP=r5;return}r8=HEAP32[r6+8>>2];if((r8|0)==0){STACKTOP=r5;return}_free(r8);STACKTOP=r5;return}function __ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs7SegItemEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE(){var r1,r2,r3;r1=0;while(1){r2=_malloc(20);if((r2|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r1=9;break}FUNCTION_TABLE[r3]()}if(r1==9){r1=___cxa_allocate_exception(4);HEAP32[r1>>2]=53824;___cxa_throw(r1,62184,110)}r1=r2;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;HEAP32[r2+12>>2]=0;HEAP32[r2+16>>2]=0;r3=r2;r2=0;while(1){if(r2>>>0>=3){break}HEAP32[r3+(r2<<2)>>2]=0;r2=r2+1|0}return r1}function __ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs7SegItemEEEvPT_(r1){var r2,r3;if((r1|0)==0){return}r2=r1;do{if((HEAP8[r2]&1)!=0){r3=HEAP32[r1+8>>2];if((r3|0)==0){break}_free(r3)}}while(0);_free(r2);return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10ConfigItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_(r1,r2){return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_(r2+HEAP32[r1>>2]|0)}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs10ConfigItemENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=HEAP32[r1>>2];r1=r2;r2=r1+r7|0;r8=r2;r9=r3+4|0;r10=HEAP32[r3>>2];if(r10>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r10>>>0<11){HEAP8[r6]=r10<<1;r11=r6+1|0}else{r3=r10+16&-16;r12=(r3|0)==0?1:r3;while(1){r13=_malloc(r12);if((r13|0)!=0){r4=16;break}r14=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r14|0)==0){break}FUNCTION_TABLE[r14]()}if(r4==16){HEAP32[r6+8>>2]=r13;HEAP32[r6>>2]=r3|1;HEAP32[r6+4>>2]=r10;r11=r13;break}r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53824;___cxa_throw(r12,62184,110)}}while(0);_memcpy(r11,r9,r10)|0;HEAP8[r11+r10|0]=0;if((HEAP8[r2]&1)==0){HEAP8[r1+(r7+1)|0]=0;HEAP8[r2]=0}else{HEAP8[HEAP32[r1+(r7+8)>>2]]=0;HEAP32[r1+(r7+4)>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r8);r8=r6;HEAP32[r2>>2]=HEAP32[r8>>2];HEAP32[r2+4>>2]=HEAP32[r8+4>>2];HEAP32[r2+8>>2]=HEAP32[r8+8>>2];r2=r6;r7=0;while(1){if(r7>>>0>=3){break}HEAP32[r2+(r7<<2)>>2]=0;r7=r7+1|0}if((HEAP8[r8]&1)==0){STACKTOP=r5;return}r8=HEAP32[r6+8>>2];if((r8|0)==0){STACKTOP=r5;return}_free(r8);STACKTOP=r5;return}function __ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs10ConfigItemEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE(){var r1,r2,r3,r4;r1=0;while(1){r2=_malloc(24);if((r2|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r1=9;break}FUNCTION_TABLE[r3]()}if(r1==9){r1=___cxa_allocate_exception(4);HEAP32[r1>>2]=53824;___cxa_throw(r1,62184,110)}r1=r2;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;HEAP32[r2+12>>2]=0;HEAP32[r2+16>>2]=0;HEAP32[r2+20>>2]=0;r3=r2;r4=0;while(1){if(r4>>>0>=3){break}HEAP32[r3+(r4<<2)>>2]=0;r4=r4+1|0}r4=r2+12|0;r2=0;while(1){if(r2>>>0>=3){break}HEAP32[r4+(r2<<2)>>2]=0;r2=r2+1|0}return r1}function __ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs10ConfigItemEEEvPT_(r1){var r2,r3;if((r1|0)==0){return}do{if((HEAP8[r1+12|0]&1)!=0){r2=HEAP32[r1+20>>2];if((r2|0)==0){break}_free(r2)}}while(0);r2=r1;do{if((HEAP8[r2]&1)!=0){r3=HEAP32[r1+8>>2];if((r3|0)==0){break}_free(r3)}}while(0);_free(r2);return}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs4WordENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7getWireIS3_EEPNS0_11BindingTypeISA_EUt_ERKMS3_SA_RKT_(r1,r2){return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_(r2+HEAP32[r1>>2]|0)}function __ZN10emscripten8internal12MemberAccessIN14pocketsphinxjs4WordENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE7setWireIS3_EEvRKMS3_SA_RT_PNS0_11BindingTypeISA_EUt_E(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=HEAP32[r1>>2];r1=r2;r2=r1+r7|0;r8=r2;r9=r3+4|0;r10=HEAP32[r3>>2];if(r10>>>0>4294967279){__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv()}do{if(r10>>>0<11){HEAP8[r6]=r10<<1;r11=r6+1|0}else{r3=r10+16&-16;r12=(r3|0)==0?1:r3;while(1){r13=_malloc(r12);if((r13|0)!=0){r4=16;break}r14=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r14|0)==0){break}FUNCTION_TABLE[r14]()}if(r4==16){HEAP32[r6+8>>2]=r13;HEAP32[r6>>2]=r3|1;HEAP32[r6+4>>2]=r10;r11=r13;break}r12=___cxa_allocate_exception(4);HEAP32[r12>>2]=53824;___cxa_throw(r12,62184,110)}}while(0);_memcpy(r11,r9,r10)|0;HEAP8[r11+r10|0]=0;if((HEAP8[r2]&1)==0){HEAP8[r1+(r7+1)|0]=0;HEAP8[r2]=0}else{HEAP8[HEAP32[r1+(r7+8)>>2]]=0;HEAP32[r1+(r7+4)>>2]=0}__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(r8);r8=r6;HEAP32[r2>>2]=HEAP32[r8>>2];HEAP32[r2+4>>2]=HEAP32[r8+4>>2];HEAP32[r2+8>>2]=HEAP32[r8+8>>2];r2=r6;r7=0;while(1){if(r7>>>0>=3){break}HEAP32[r2+(r7<<2)>>2]=0;r7=r7+1|0}if((HEAP8[r8]&1)==0){STACKTOP=r5;return}r8=HEAP32[r6+8>>2];if((r8|0)==0){STACKTOP=r5;return}_free(r8);STACKTOP=r5;return}function __ZN10emscripten8internal15raw_constructorIN14pocketsphinxjs4WordEJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE(){var r1,r2,r3,r4;r1=0;while(1){r2=_malloc(24);if((r2|0)!=0){break}r3=(tempValue=HEAP32[71944>>2],HEAP32[71944>>2]=tempValue+0,tempValue);if((r3|0)==0){r1=9;break}FUNCTION_TABLE[r3]()}if(r1==9){r1=___cxa_allocate_exception(4);HEAP32[r1>>2]=53824;___cxa_throw(r1,62184,110)}r1=r2;HEAP32[r2>>2]=0;HEAP32[r2+4>>2]=0;HEAP32[r2+8>>2]=0;HEAP32[r2+12>>2]=0;HEAP32[r2+16>>2]=0;HEAP32[r2+20>>2]=0;r3=r2;r4=0;while(1){if(r4>>>0>=3){break}HEAP32[r3+(r4<<2)>>2]=0;r4=r4+1|0}r4=r2+12|0;r2=0;while(1){if(r2>>>0>=3){break}HEAP32[r4+(r2<<2)>>2]=0;r2=r2+1|0}return r1}function __ZN10emscripten8internal14raw_destructorIN14pocketsphinxjs4WordEEEvPT_(r1){var r2,r3;if((r1|0)==0){return}do{if((HEAP8[r1+12|0]&1)!=0){r2=HEAP32[r1+20>>2];if((r2|0)==0){break}_free(r2)}}while(0);r2=r1;do{if((HEAP8[r2]&1)!=0){r3=HEAP32[r1+8>>2];if((r3|0)==0){break}_free(r3)}}while(0);_free(r2);return}function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r1,r2){if((r2|0)==0){return}__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r1,HEAP32[r2>>2]);__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(r1,HEAP32[r2+4>>2]);do{if((HEAP8[r2+28|0]&1)!=0){r1=HEAP32[r2+36>>2];if((r1|0)==0){break}_free(r1)}}while(0);do{if((HEAP8[r2+16|0]&1)!=0){r1=HEAP32[r2+24>>2];if((r1|0)==0){break}_free(r1)}}while(0);_free(r2);return}function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(r1,r2){if((r2|0)==0){return}__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(r1,HEAP32[r2>>2]);__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(r1,HEAP32[r2+4>>2]);do{if((HEAP8[r2+16|0]&1)!=0){r1=HEAP32[r2+24>>2];if((r1|0)==0){break}_free(r1)}}while(0);_free(r2);return}function __GLOBAL__I_a(){var r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81;r1=STACKTOP;STACKTOP=STACKTOP+752|0;r2=r1;r3=r1+16;r4=r1+24;r5=r1+32;r6=r1+56;r7=r1+72;r8=r1+88;r9=r1+104;r10=r1+112;r11=r1+136;r12=r1+152;r13=r1+168;r14=r1+184;r15=r1+192;r16=r1+216;r17=r1+232;r18=r1+248;r19=r1+264;r20=r1+272;r21=r1+296;r22=r1+312;r23=r1+328;r24=r1+344;r25=r1+352;r26=r1+376;r27=r1+392;r28=r1+408;r29=r1+424;r30=r1+432;r31=r1+456;r32=r1+472;r33=r1+488;r34=r1+504;r35=r1+520;r36=r1+536;r37=r1+552;r38=r1+568;r39=r1+584;r40=r1+600;r41=r1+616;r42=r1+632;r43=r1+656;r44=r1+680;r45=r1+696;__embind_register_enum(64336,49704);__embind_register_enum_value(64336,49696,0);__embind_register_enum_value(64336,35864,1);__embind_register_enum_value(64336,25976,2);__embind_register_enum_value(64336,19096,3);__embind_register_value_array(64320,15568,26,1086);__ZN10emscripten11value_arrayIN14pocketsphinxjs4WordEE7elementIS2_NSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEERS3_MT_T0_(__ZN10emscripten11value_arrayIN14pocketsphinxjs4WordEE7elementIS2_NSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEERS3_MT_T0_(r1+712,0),12);__embind_finalize_value_array(64320);__embind_register_value_array(64352,12808,808,562);__ZN10emscripten11value_arrayIN14pocketsphinxjs10ConfigItemEE7elementIS2_NSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEERS3_MT_T0_(__ZN10emscripten11value_arrayIN14pocketsphinxjs10ConfigItemEE7elementIS2_NSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEERS3_MT_T0_(r1+720,0),12);__embind_finalize_value_array(64352);__embind_register_value_object(64304,10216,508,488);r46=_malloc(4);if((r46|0)!=0){HEAP32[r46>>2]=0}r47=_malloc(4);if((r47|0)!=0){HEAP32[r47>>2]=0}__embind_register_value_object_field(64304,13456,64016,174,r46,64016,772,r47);__ZN10emscripten12value_objectIN14pocketsphinxjs7SegItemEE5fieldIS2_iEERS3_PKcMT_T0_(__ZN10emscripten12value_objectIN14pocketsphinxjs7SegItemEE5fieldIS2_iEERS3_PKcMT_T0_(r1+728,13248,12),12976,16);__embind_finalize_value_object(64304);__embind_register_value_object(64328,48248,482,44);__ZN10emscripten12value_objectIN14pocketsphinxjs10TransitionEE5fieldIS2_iEERS3_PKcMT_T0_(__ZN10emscripten12value_objectIN14pocketsphinxjs10TransitionEE5fieldIS2_iEERS3_PKcMT_T0_(__ZN10emscripten12value_objectIN14pocketsphinxjs10TransitionEE5fieldIS2_iEERS3_PKcMT_T0_(r1+736,46648,0),44856,4),43296,8);r47=_malloc(4);if((r47|0)!=0){HEAP32[r47>>2]=12}r46=_malloc(4);if((r46|0)!=0){HEAP32[r46>>2]=12}__embind_register_value_object_field(64328,13456,64016,1208,r47,64016,540,r46);__embind_finalize_value_object(64328);__embind_register_class(63320,62280,62392,0,626,0,0,42216,254);HEAP32[r29>>2]=1;r46=r29+4|0;HEAP32[r46>>2]=62280;__embind_register_class_constructor(63320,1,r46,534,664);HEAP32[r33>>2]=3;r46=r33+4|0;HEAP32[r46>>2]=62160;HEAP32[r33+8>>2]=62280;HEAP32[r33+12>>2]=__ZTIs;r33=_malloc(8);if((r33|0)!=0){r29=r33;HEAP32[r29>>2]=786;HEAP32[r29+4>>2]=0}__embind_register_class_function(63320,23112,3,r46,1032,r33);HEAP32[r32>>2]=2;r33=r32+4|0;HEAP32[r33>>2]=__ZTIj;HEAP32[r32+8>>2]=62392;r32=_malloc(8);if((r32|0)!=0){r46=r32;HEAP32[r46>>2]=272;HEAP32[r46+4>>2]=0}__embind_register_class_function(63320,22928,2,r33,734,r32);HEAP32[r31>>2]=3;r32=r31+4|0;HEAP32[r32>>2]=64360;HEAP32[r31+8>>2]=63320;HEAP32[r31+12>>2]=__ZTIj;r31=_malloc(4);if((r31|0)!=0){HEAP32[r31>>2]=800}__embind_register_class_function(63320,22880,3,r32,1064,r31);HEAP32[r30>>2]=4;r31=r30+4|0;HEAP32[r31>>2]=62168;HEAP32[r30+8>>2]=63320;HEAP32[r30+12>>2]=__ZTIj;HEAP32[r30+16>>2]=__ZTIs;r30=_malloc(4);if((r30|0)!=0){HEAP32[r30>>2]=104}__embind_register_class_function(63320,22848,4,r31,682,r30);__embind_register_class(63416,62344,62456,0,194,0,0,41056,364);HEAP32[r24>>2]=1;r30=r24+4|0;HEAP32[r30>>2]=62344;__embind_register_class_constructor(63416,1,r30,242,720);HEAP32[r28>>2]=3;r30=r28+4|0;HEAP32[r30>>2]=62160;HEAP32[r28+8>>2]=62344;HEAP32[r28+12>>2]=64328;r28=_malloc(8);if((r28|0)!=0){r24=r28;HEAP32[r24>>2]=448;HEAP32[r24+4>>2]=0}__embind_register_class_function(63416,23112,3,r30,918,r28);HEAP32[r27>>2]=2;r28=r27+4|0;HEAP32[r28>>2]=__ZTIj;HEAP32[r27+8>>2]=62456;r27=_malloc(8);if((r27|0)!=0){r30=r27;HEAP32[r30>>2]=716;HEAP32[r30+4>>2]=0}__embind_register_class_function(63416,22928,2,r28,132,r27);HEAP32[r26>>2]=3;r27=r26+4|0;HEAP32[r27>>2]=64360;HEAP32[r26+8>>2]=63416;HEAP32[r26+12>>2]=__ZTIj;r26=_malloc(4);if((r26|0)!=0){HEAP32[r26>>2]=916}__embind_register_class_function(63416,22880,3,r27,1134,r26);HEAP32[r25>>2]=4;r26=r25+4|0;HEAP32[r26>>2]=62168;HEAP32[r25+8>>2]=63416;HEAP32[r25+12>>2]=__ZTIj;HEAP32[r25+16>>2]=64328;r25=_malloc(4);if((r25|0)!=0){HEAP32[r25>>2]=518}__embind_register_class_function(63416,22848,4,r26,284,r25);__embind_register_class(63392,62328,62440,0,514,0,0,39656,1002);HEAP32[r19>>2]=1;r25=r19+4|0;HEAP32[r25>>2]=62328;__embind_register_class_constructor(63392,1,r25,668,320);HEAP32[r23>>2]=3;r25=r23+4|0;HEAP32[r25>>2]=62160;HEAP32[r23+8>>2]=62328;HEAP32[r23+12>>2]=64320;r23=_malloc(8);if((r23|0)!=0){r19=r23;HEAP32[r19>>2]=1212;HEAP32[r19+4>>2]=0}__embind_register_class_function(63392,23112,3,r25,884,r23);HEAP32[r22>>2]=2;r23=r22+4|0;HEAP32[r23>>2]=__ZTIj;HEAP32[r22+8>>2]=62440;r22=_malloc(8);if((r22|0)!=0){r25=r22;HEAP32[r25>>2]=1066;HEAP32[r25+4>>2]=0}__embind_register_class_function(63392,22928,2,r23,214,r22);HEAP32[r21>>2]=3;r22=r21+4|0;HEAP32[r22>>2]=64360;HEAP32[r21+8>>2]=63392;HEAP32[r21+12>>2]=__ZTIj;r21=_malloc(4);if((r21|0)!=0){HEAP32[r21>>2]=218}__embind_register_class_function(63392,22880,3,r22,200,r21);HEAP32[r20>>2]=4;r21=r20+4|0;HEAP32[r21>>2]=62168;HEAP32[r20+8>>2]=63392;HEAP32[r20+12>>2]=__ZTIj;HEAP32[r20+16>>2]=64320;r20=_malloc(4);if((r20|0)!=0){HEAP32[r20>>2]=982}__embind_register_class_function(63392,22848,4,r21,490,r20);__embind_register_class(63440,62360,62472,0,378,0,0,38384,728);HEAP32[r14>>2]=1;r20=r14+4|0;HEAP32[r20>>2]=62360;__embind_register_class_constructor(63440,1,r20,1006,1030);HEAP32[r18>>2]=3;r20=r18+4|0;HEAP32[r20>>2]=62160;HEAP32[r18+8>>2]=62360;HEAP32[r18+12>>2]=64352;r18=_malloc(8);if((r18|0)!=0){r14=r18;HEAP32[r14>>2]=412;HEAP32[r14+4>>2]=0}__embind_register_class_function(63440,23112,3,r20,476,r18);HEAP32[r17>>2]=2;r18=r17+4|0;HEAP32[r18>>2]=__ZTIj;HEAP32[r17+8>>2]=62472;r17=_malloc(8);if((r17|0)!=0){r20=r17;HEAP32[r20>>2]=1082;HEAP32[r20+4>>2]=0}__embind_register_class_function(63440,22928,2,r18,676,r17);HEAP32[r16>>2]=3;r17=r16+4|0;HEAP32[r17>>2]=64360;HEAP32[r16+8>>2]=63440;HEAP32[r16+12>>2]=__ZTIj;r16=_malloc(4);if((r16|0)!=0){HEAP32[r16>>2]=358}__embind_register_class_function(63440,22880,3,r17,1120,r16);HEAP32[r15>>2]=4;r16=r15+4|0;HEAP32[r16>>2]=62168;HEAP32[r15+8>>2]=63440;HEAP32[r15+12>>2]=__ZTIj;HEAP32[r15+16>>2]=64352;r15=_malloc(4);if((r15|0)!=0){HEAP32[r15>>2]=1018}__embind_register_class_function(63440,22848,4,r16,876,r15);__embind_register_class(63368,62312,62424,0,116,0,0,37120,1190);HEAP32[r9>>2]=1;r15=r9+4|0;HEAP32[r15>>2]=62312;__embind_register_class_constructor(63368,1,r15,12,686);HEAP32[r13>>2]=3;r15=r13+4|0;HEAP32[r15>>2]=62160;HEAP32[r13+8>>2]=62312;HEAP32[r13+12>>2]=64304;r13=_malloc(8);if((r13|0)!=0){r9=r13;HEAP32[r9>>2]=880;HEAP32[r9+4>>2]=0}__embind_register_class_function(63368,23112,3,r15,652,r13);HEAP32[r12>>2]=2;r13=r12+4|0;HEAP32[r13>>2]=__ZTIj;HEAP32[r12+8>>2]=62424;r12=_malloc(8);if((r12|0)!=0){r15=r12;HEAP32[r15>>2]=654;HEAP32[r15+4>>2]=0}__embind_register_class_function(63368,22928,2,r13,170,r12);HEAP32[r11>>2]=3;r12=r11+4|0;HEAP32[r12>>2]=64360;HEAP32[r11+8>>2]=63368;HEAP32[r11+12>>2]=__ZTIj;r11=_malloc(4);if((r11|0)!=0){HEAP32[r11>>2]=1164}__embind_register_class_function(63368,22880,3,r12,556,r11);HEAP32[r10>>2]=4;r11=r10+4|0;HEAP32[r11>>2]=62168;HEAP32[r10+8>>2]=63368;HEAP32[r10+12>>2]=__ZTIj;HEAP32[r10+16>>2]=64304;r10=_malloc(4);if((r10|0)!=0){HEAP32[r10>>2]=850}__embind_register_class_function(63368,22848,4,r11,1060,r10);__embind_register_class(63344,62296,62408,0,774,0,0,35848,992);HEAP32[r4>>2]=1;r10=r4+4|0;HEAP32[r10>>2]=62296;__embind_register_class_constructor(63344,1,r10,1058,990);HEAP32[r8>>2]=3;r10=r8+4|0;HEAP32[r10>>2]=62160;HEAP32[r8+8>>2]=62296;HEAP32[r8+12>>2]=__ZTIi;r8=_malloc(8);if((r8|0)!=0){r4=r8;HEAP32[r4>>2]=86;HEAP32[r4+4>>2]=0}__embind_register_class_function(63344,23112,3,r10,236,r8);HEAP32[r7>>2]=2;r8=r7+4|0;HEAP32[r8>>2]=__ZTIj;HEAP32[r7+8>>2]=62408;r7=_malloc(8);if((r7|0)!=0){r10=r7;HEAP32[r10>>2]=114;HEAP32[r10+4>>2]=0}__embind_register_class_function(63344,22928,2,r8,248,r7);HEAP32[r6>>2]=3;r7=r6+4|0;HEAP32[r7>>2]=64360;HEAP32[r6+8>>2]=63344;HEAP32[r6+12>>2]=__ZTIj;r6=_malloc(4);if((r6|0)!=0){HEAP32[r6>>2]=418}__embind_register_class_function(63344,22880,3,r7,4,r6);HEAP32[r5>>2]=4;r6=r5+4|0;HEAP32[r6>>2]=62168;HEAP32[r5+8>>2]=63344;HEAP32[r5+12>>2]=__ZTIj;HEAP32[r5+16>>2]=__ZTIi;r5=_malloc(4);if((r5|0)!=0){HEAP32[r5>>2]=952}__embind_register_class_function(63344,22848,4,r6,494,r5);__embind_register_value_object(64312,35024,238,1026);__ZN10emscripten12value_objectIN14pocketsphinxjs7GrammarEE5fieldIS2_iEERS3_PKcMT_T0_(__ZN10emscripten12value_objectIN14pocketsphinxjs7GrammarEE5fieldIS2_iEERS3_PKcMT_T0_(__ZN10emscripten12value_objectIN14pocketsphinxjs7GrammarEE5fieldIS2_iEERS3_PKcMT_T0_(r1+744,13248,0),12976,4),33496,8);r5=_malloc(4);if((r5|0)!=0){HEAP32[r5>>2]=12}r6=_malloc(4);if((r6|0)!=0){HEAP32[r6>>2]=12}__embind_register_value_object_field(64312,32176,63416,396,r5,63416,220,r6);__embind_finalize_value_object(64312);__embind_register_class(64344,62376,62488,0,430,0,0,31152,444);HEAP32[r3>>2]=1;r6=r3+4|0;HEAP32[r6>>2]=62376;__embind_register_class_constructor(64344,1,r6,536,98);HEAP32[r2>>2]=2;r6=r2+4|0;HEAP32[r6>>2]=62376;HEAP32[r2+8>>2]=63440;__embind_register_class_constructor(64344,2,r6,1238,338);HEAP32[r45>>2]=3;r6=r45+4|0;HEAP32[r6>>2]=64336;HEAP32[r45+8>>2]=62376;HEAP32[r45+12>>2]=63440;r45=_malloc(8);if((r45|0)!=0){r2=r45;HEAP32[r2>>2]=930;HEAP32[r2+4>>2]=0}__embind_register_class_function(64344,30336,3,r6,794,r45);HEAP32[r44>>2]=3;r45=r44+4|0;HEAP32[r45>>2]=64336;HEAP32[r44+8>>2]=62376;HEAP32[r44+12>>2]=63392;r44=_malloc(8);if((r44|0)!=0){r6=r44;HEAP32[r6>>2]=478;HEAP32[r6+4>>2]=0}__embind_register_class_function(64344,29752,3,r45,34,r44);HEAP32[r43>>2]=4;r44=r43+4|0;HEAP32[r44>>2]=64336;HEAP32[r43+8>>2]=62376;HEAP32[r43+12>>2]=63344;HEAP32[r43+16>>2]=64312;r43=_malloc(8);if((r43|0)!=0){r45=r43;HEAP32[r45>>2]=240;HEAP32[r45+4>>2]=0}__embind_register_class_function(64344,28792,4,r44,52,r43);HEAP32[r42>>2]=4;r43=r42+4|0;HEAP32[r43>>2]=64336;HEAP32[r42+8>>2]=62376;HEAP32[r42+12>>2]=63344;HEAP32[r42+16>>2]=64016;r42=_malloc(8);if((r42|0)!=0){r44=r42;HEAP32[r44>>2]=498;HEAP32[r44+4>>2]=0}__embind_register_class_function(64344,28128,4,r43,184,r42);HEAP32[r41>>2]=3;r42=r41+4|0;HEAP32[r42>>2]=64336;HEAP32[r41+8>>2]=62376;HEAP32[r41+12>>2]=__ZTIi;r41=_malloc(8);if((r41|0)!=0){r43=r41;HEAP32[r43>>2]=656;HEAP32[r43+4>>2]=0}__embind_register_class_function(64344,26824,3,r42,840,r41);HEAP32[r40>>2]=3;r41=r40+4|0;HEAP32[r41>>2]=64336;HEAP32[r40+8>>2]=62376;HEAP32[r40+12>>2]=__ZTIi;r40=_malloc(8);if((r40|0)!=0){r42=r40;HEAP32[r42>>2]=22;HEAP32[r42+4>>2]=0}__embind_register_class_function(64344,25960,3,r41,840,r40);HEAP32[r39>>2]=2;r40=r39+4|0;HEAP32[r40>>2]=64016;HEAP32[r39+8>>2]=62376;r39=_malloc(8);if((r39|0)!=0){r41=r39;HEAP32[r41>>2]=1222;HEAP32[r41+4>>2]=0}__embind_register_class_function(64344,24912,2,r40,938,r39);HEAP32[r38>>2]=3;r39=r38+4|0;HEAP32[r39>>2]=64336;HEAP32[r38+8>>2]=62376;HEAP32[r38+12>>2]=63368;r38=_malloc(8);if((r38|0)!=0){r40=r38;HEAP32[r40>>2]=710;HEAP32[r40+4>>2]=0}__embind_register_class_function(64344,23456,3,r39,286,r38);HEAP32[r37>>2]=2;r38=r37+4|0;HEAP32[r38>>2]=__ZTIi;HEAP32[r37+8>>2]=62376;r37=_malloc(8);if((r37|0)!=0){r39=r37;HEAP32[r39>>2]=246;HEAP32[r39+4>>2]=0}__embind_register_class_function(64344,22424,2,r38,726,r37);HEAP32[r36>>2]=2;r37=r36+4|0;HEAP32[r37>>2]=64336;HEAP32[r36+8>>2]=62376;r36=_malloc(8);if((r36|0)!=0){r38=r36;HEAP32[r38>>2]=1234;HEAP32[r38+4>>2]=0}__embind_register_class_function(64344,13248,2,r37,558,r36);HEAP32[r35>>2]=2;r36=r35+4|0;HEAP32[r36>>2]=64336;HEAP32[r35+8>>2]=62376;r35=_malloc(8);if((r35|0)!=0){r37=r35;HEAP32[r37>>2]=524;HEAP32[r37+4>>2]=0}__embind_register_class_function(64344,22064,2,r36,558,r35);HEAP32[r34>>2]=3;r35=r34+4|0;HEAP32[r35>>2]=64336;HEAP32[r34+8>>2]=62376;HEAP32[r34+12>>2]=63320;r34=_malloc(8);if((r34|0)==0){__embind_register_class_function(64344,21600,3,r35,154,r34);r48=16;r49=0;r50=12;r51=0;r52=12;r53=0;r54=12;r55=0;r56=16;r57=0;r58=12;r59=0;r60=16;r61=0;r62=16;r63=0;r64=20;r65=0;r66=20;r67=0;r68=16;r69=0;r70=16;r71=0;r72=1;r73=0;r74=1;r75=0;r76=1;r77=0;r78=1;r79=0;r80=1;r81=0;STACKTOP=r1;return}r36=r34;HEAP32[r36>>2]=90;HEAP32[r36+4>>2]=0;__embind_register_class_function(64344,21600,3,r35,154,r34);r48=16;r49=0;r50=12;r51=0;r52=12;r53=0;r54=12;r55=0;r56=16;r57=0;r58=12;r59=0;r60=16;r61=0;r62=16;r63=0;r64=20;r65=0;r66=20;r67=0;r68=16;r69=0;r70=16;r71=0;r72=1;r73=0;r74=1;r75=0;r76=1;r77=0;r78=1;r79=0;r80=1;r81=0;STACKTOP=r1;return}function _acmod_fe_mismatch(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+16|0;r5=r4;r6=r4+8;r7=r1|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r7>>2]+4>>2],22744,r6)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=22744,r3));STACKTOP=r3;r8=0}else{r1=HEAP32[r6>>2];if((r1|0)==0){r8=0;break}r8=HEAP32[r1>>2]}}while(0);r6=r2+29|0;if((r8|0)==(HEAPU8[r6]|0)){r9=0;STACKTOP=r4;return r9}do{if((_hash_table_lookup(HEAP32[HEAP32[r7>>2]+4>>2],22744,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=22744,r3));STACKTOP=r3;r10=0}else{r8=HEAP32[r5>>2];if((r8|0)==0){r10=0;break}r10=HEAP32[r8>>2]}}while(0);r5=HEAPU8[r6];_err_msg(4,44200,214,31696,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r10,HEAP32[r3+8>>2]=r5,r3));STACKTOP=r3;r9=1;STACKTOP=r4;return r9}function _acmod_init_feat(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+464|0;r5=r4;r6=r4+112;r7=r4+224;r8=r4+232;r9=r4+240;r10=r4+248;r11=r4+256;r12=r4+264;r13=r4+272;r14=r4+280;r15=r4+288;r16=r4+296;r17=r4+304;r18=r4+312;r19=r4+320;r20=r4+328;r21=r4+336;r22=r4+344;r23=r4+352;r24=r4+360;r25=r4+368;r26=r4+376;r27=r4+384;r28=r4+392;r29=r4+400;r30=r4+408;r31=r4+416;r32=r4+424;r33=r4+432;r34=r4+440;r35=r4+448;r36=r4+456;r37=r1|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],22288,r36)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=22288,r3));STACKTOP=r3;r38=0}else{r39=HEAP32[r36>>2];if((r39|0)==0){r38=0;break}r38=HEAP32[r39>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],16976,r35)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16976,r3));STACKTOP=r3;r40=0}else{r36=HEAP32[r35>>2];if((r36|0)==0){r40=0;break}r40=HEAP32[r36>>2]}}while(0);r35=0;while(1){if((r35|0)>=3){r2=15;break}r41=HEAP32[5792+(r35<<2)>>2];r36=HEAP8[r40];r39=HEAP8[r41];if(r36<<24>>24!=r39<<24>>24|r36<<24>>24==0|r39<<24>>24==0){r42=r36;r43=r39}else{r39=r40;r36=r41;while(1){r44=r39+1|0;r45=r36+1|0;r46=HEAP8[r44];r47=HEAP8[r45];if(r46<<24>>24!=r47<<24>>24|r46<<24>>24==0|r47<<24>>24==0){r42=r46;r43=r47;break}else{r39=r44;r36=r45}}}if(r42<<24>>24==r43<<24>>24){break}r35=r35+1|0}if(r2==15){_err_msg(5,23376,126,17912,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r40,r3));STACKTOP=r3;_exit(1)}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],16584,r34)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16584,r3));STACKTOP=r3;r48=0}else{r40=HEAP32[r34>>2];if((r40|0)==0){r48=0;break}r48=(HEAP32[r40>>2]|0)!=0|0}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],16296,r33)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16296,r3));STACKTOP=r3;r49=0}else{r34=HEAP32[r33>>2];if((r34|0)==0){r49=0;break}r49=HEAP32[r34>>2]}}while(0);r33=0;while(1){if((r33|0)>=4){r2=30;break}r50=HEAP32[5856+(r33<<2)>>2];r34=HEAP8[r49];r40=HEAP8[r50];if(r34<<24>>24!=r40<<24>>24|r34<<24>>24==0|r40<<24>>24==0){r51=r34;r52=r40}else{r40=r49;r34=r50;while(1){r43=r40+1|0;r42=r34+1|0;r36=HEAP8[r43];r39=HEAP8[r42];if(r36<<24>>24!=r39<<24>>24|r36<<24>>24==0|r39<<24>>24==0){r51=r36;r52=r39;break}else{r40=r43;r34=r42}}}if(r51<<24>>24==r52<<24>>24){break}r33=r33+1|0}if(r2==30){_err_msg(5,17936,87,14856,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r49,r3));STACKTOP=r3;_exit(1)}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],22744,r32)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=22744,r3));STACKTOP=r3;r2=34}else{r49=HEAP32[r32>>2];if((r49|0)==0){r2=34;break}r52=HEAP32[r49>>2];r49=r31;if((r52|0)==0){r53=r49;r2=36}else{r54=r52;r55=r49}}}while(0);if(r2==34){r53=r31;r2=36}if(r2==36){r54=13;r55=r53}_err_msg(1,46560,715,38080,(r3=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r3>>2]=r38,HEAP32[r3+8>>2]=r54,HEAP32[r3+16>>2]=r41,HEAP32[r3+24>>2]=(r48|0)!=0?17640:17224,HEAP32[r3+32>>2]=r50,r3));STACKTOP=r3;r50=_malloc(96);if((r50|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=96,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=717,r3));STACKTOP=r3}if((HEAP32[r50-4>>2]&3|0)!=0){_memset(r50,0,96)|0}r41=r50;HEAP32[r50>>2]=1;r53=___ckd_salloc__(r38,46560,719);HEAP32[r50+4>>2]=r53;r53=HEAP8[r38];r55=r53<<24>>24==115;do{if(r55){r32=r38;r49=34776;while(1){r52=r32+1|0;r51=r49+1|0;r56=HEAP8[r52];r57=HEAP8[r51];if(r56<<24>>24!=r57<<24>>24|r56<<24>>24==0|r57<<24>>24==0){break}else{r32=r52;r49=r51}}if(r56<<24>>24!=r57<<24>>24){if(r55){r58=r38;r59=31920}else{r2=54;break}while(1){r49=r58+1|0;r32=r59+1|0;r60=HEAP8[r49];r61=HEAP8[r32];if(r60<<24>>24!=r61<<24>>24|r60<<24>>24==0|r61<<24>>24==0){break}else{r58=r49;r59=r32}}if(r60<<24>>24==r61<<24>>24){r2=57;break}else{r2=54;break}}if((r54|0)!=13){_err_msg(4,46560,723,33192,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_free(r50);r2=161;break}HEAP32[r50+8>>2]=13;HEAP32[r50+12>>2]=4;r32=_malloc(16);if((r32|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=4,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=729,r3));STACKTOP=r3}if((HEAP32[r32-4>>2]&3|0)!=0){_memset(r32,0,16)|0}r49=r32;r32=r50+16|0;HEAP32[r32>>2]=r49;HEAP32[r49>>2]=12;HEAP32[HEAP32[r32>>2]+4>>2]=24;HEAP32[HEAP32[r32>>2]+8>>2]=3;HEAP32[HEAP32[r32>>2]+12>>2]=12;HEAP32[r50+92>>2]=51;HEAP32[r50+20>>2]=4;HEAP32[r50+56>>2]=370}else{r2=54}}while(0);L77:do{if(r2==54){if(r53<<24>>24==49){r61=r38;r60=30992;while(1){r59=r61+1|0;r58=r60+1|0;r62=HEAP8[r59];r63=HEAP8[r58];if(r62<<24>>24!=r63<<24>>24|r62<<24>>24==0|r63<<24>>24==0){break}else{r61=r59;r60=r58}}if(r62<<24>>24==r63<<24>>24){r2=57;break}}r60=r53<<24>>24==0;L84:do{if(r60){r64=30240;r65=0}else{r61=r38;r58=30240;r59=9;r55=r53;while(1){r57=r59-1|0;r56=HEAP8[r58];if(!((r57|0)!=0&r56<<24>>24!=0&r55<<24>>24==r56<<24>>24)){r64=r58;r65=r55;break L84}r56=r61+1|0;r32=r58+1|0;r49=HEAP8[r56];if(r49<<24>>24==0){r64=r32;r65=0;break}else{r61=r56;r58=r32;r59=r57;r55=r49}}}}while(0);if(r65<<24>>24==(HEAP8[r64]|0)){HEAP32[r50+8>>2]=r54;HEAP32[r50+12>>2]=1;r55=_malloc(4);if((r55|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=756,r3));STACKTOP=r3}r59=r55;if((HEAP32[r55-4>>2]&3|0)!=0){tempBigInt=0;HEAP8[r59]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r59+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r59+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r59+3|0]=tempBigInt}HEAP32[r50+16>>2]=r59;r55=r54*3&-1;HEAP32[r59>>2]=r55;HEAP32[r50+92>>2]=r55;HEAP32[r50+20>>2]=3;HEAP32[r50+56>>2]=440;break}L98:do{if(r60){r66=29456;r67=0}else{r55=r38;r59=29456;r58=12;r61=r53;while(1){r49=r58-1|0;r57=HEAP8[r59];if(!((r49|0)!=0&r57<<24>>24!=0&r61<<24>>24==r57<<24>>24)){r66=r59;r67=r61;break L98}r57=r55+1|0;r32=r59+1|0;r56=HEAP8[r57];if(r56<<24>>24==0){r66=r32;r67=0;break}else{r55=r57;r59=r32;r58=r49;r61=r56}}}}while(0);if(r67<<24>>24==(HEAP8[r66]|0)){HEAP32[r50+8>>2]=r54;HEAP32[r50+12>>2]=1;r61=_malloc(4);if((r61|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=765,r3));STACKTOP=r3}r58=r61;if((HEAP32[r61-4>>2]&3|0)!=0){tempBigInt=0;HEAP8[r58]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r58+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r58+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r58+3|0]=tempBigInt}HEAP32[r50+16>>2]=r58;r61=r54<<2;HEAP32[r58>>2]=r61;HEAP32[r50+92>>2]=r61;HEAP32[r50+20>>2]=4;HEAP32[r50+56>>2]=960;break}L112:do{if(r60){r68=28640;r69=0}else{r61=r38;r58=28640;r59=8;r55=r53;while(1){r56=r59-1|0;r49=HEAP8[r58];if(!((r56|0)!=0&r49<<24>>24!=0&r55<<24>>24==r49<<24>>24)){r68=r58;r69=r55;break L112}r49=r61+1|0;r32=r58+1|0;r57=HEAP8[r49];if(r57<<24>>24==0){r68=r32;r69=0;break}else{r61=r49;r58=r32;r59=r56;r55=r57}}}}while(0);do{if(r69<<24>>24!=(HEAP8[r68]|0)){L119:do{if(r60){r70=27800;r71=0}else{r55=r38;r59=27800;r58=6;r61=r53;while(1){r57=r58-1|0;r56=HEAP8[r59];if(!((r57|0)!=0&r56<<24>>24!=0&r61<<24>>24==r56<<24>>24)){r70=r59;r71=r61;break L119}r56=r55+1|0;r32=r59+1|0;r49=HEAP8[r56];if(r49<<24>>24==0){r70=r32;r71=0;break}else{r55=r56;r59=r32;r58=r57;r61=r49}}}}while(0);if(r71<<24>>24==(HEAP8[r70]|0)){break}L125:do{if(r60){r72=26664;r73=0}else{r61=r38;r58=26664;r59=3;r55=r53;while(1){r49=r59-1|0;r57=HEAP8[r58];if(!((r49|0)!=0&r57<<24>>24!=0&r55<<24>>24==r57<<24>>24)){r72=r58;r73=r55;break L125}r57=r61+1|0;r32=r58+1|0;r56=HEAP8[r57];if(r56<<24>>24==0){r72=r32;r73=0;break}else{r61=r57;r58=r32;r59=r49;r55=r56}}}}while(0);do{if(r73<<24>>24!=(HEAP8[r72]|0)){L132:do{if(r60){r74=25704;r75=0}else{r55=r38;r59=25704;r58=4;r61=r53;while(1){r56=r58-1|0;r49=HEAP8[r59];if(!((r56|0)!=0&r49<<24>>24!=0&r61<<24>>24==r49<<24>>24)){r74=r59;r75=r61;break L132}r49=r55+1|0;r32=r59+1|0;r57=HEAP8[r49];if(r57<<24>>24==0){r74=r32;r75=0;break}else{r55=r49;r59=r32;r58=r56;r61=r57}}}}while(0);if(r75<<24>>24==(HEAP8[r74]|0)){break}L138:do{if(r60){r76=24584;r77=0}else{r61=r38;r58=24584;r59=5;r55=r53;while(1){r57=r59-1|0;r56=HEAP8[r58];if(!((r57|0)!=0&r56<<24>>24!=0&r55<<24>>24==r56<<24>>24)){r76=r58;r77=r55;break L138}r56=r61+1|0;r32=r58+1|0;r49=HEAP8[r56];if(r49<<24>>24==0){r76=r32;r77=0;break}else{r61=r56;r58=r32;r59=r57;r55=r49}}}}while(0);do{if(r77<<24>>24!=(HEAP8[r76]|0)){L145:do{if(r60){r78=23104;r79=0}else{r55=r38;r59=23104;r58=5;r61=r53;while(1){r49=r58-1|0;r57=HEAP8[r59];if(!((r49|0)!=0&r57<<24>>24!=0&r61<<24>>24==r57<<24>>24)){r78=r59;r79=r61;break L145}r57=r55+1|0;r32=r59+1|0;r56=HEAP8[r57];if(r56<<24>>24==0){r78=r32;r79=0;break}else{r55=r57;r59=r32;r58=r49;r61=r56}}}}while(0);if(r79<<24>>24==(HEAP8[r78]|0)){break}r61=___ckd_salloc__(r38,46560,808);r58=___ckd_salloc__(r38,46560,809);r59=_strlen(r61);HEAP32[r31>>2]=r59;r55=1;r56=0;r49=r59;while(1){if((r55|0)>=(r49-1|0)){r2=133;break}r80=r61+r55|0;r59=HEAP8[r80];if(r59<<24>>24==44){HEAP8[r80]=32;r81=r56+1|0;r82=HEAP32[r31>>2]}else if(r59<<24>>24==58){r2=131;break}else{r81=r56;r82=r49}r55=r55+1|0;r56=r81;r49=r82}if(r2==131){HEAP8[r80]=0;r49=_atoi(r61+(r55+1)|0);r59=r50+20|0;HEAP32[r59>>2]=r49;r83=r59}else if(r2==133){r83=r50+20|0}r59=r56+1|0;r49=r50+12|0;HEAP32[r49>>2]=r59;r32=___ckd_calloc__(r59,4,46560,832);r59=r50+16|0;HEAP32[r59>>2]=r32;r32=r50+92|0;HEAP32[r32>>2]=0;r57=r50+8|0;HEAP32[r57>>2]=0;r51=r61;r52=0;while(1){r34=_sscanf(r51,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r58,HEAP32[r3+8>>2]=r31,r3));STACKTOP=r3;if((r34|0)!=1){r2=143;break}r34=r51+HEAP32[r31>>2]|0;if((r52|0)>=(HEAP32[r49>>2]|0)){r2=139;break}r40=_sscanf(r58,21952,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[r59>>2]+(r52<<2),r3));STACKTOP=r3;if((r40|0)!=1){r2=139;break}r40=HEAP32[r59>>2];r42=r40+(r52<<2)|0;r43=HEAP32[r42>>2];if((r43|0)==0){r2=139;break}HEAP32[r57>>2]=HEAP32[r57>>2]+r43;r43=HEAP32[r83>>2];if((r43|0)>0){r39=Math_imul(HEAP32[r42>>2],r43<<1|1)|0;HEAP32[r42>>2]=r39;r84=HEAP32[r59>>2]}else{r84=r40}HEAP32[r32>>2]=HEAP32[r32>>2]+HEAP32[r84+(r52<<2)>>2];r51=r34;r52=r52+1|0}if(r2==139){_err_msg(5,46560,844,21504,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}else if(r2==143){if((r52|0)!=(HEAP32[r49>>2]|0)){_err_msg(5,46560,854,21504,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}if((HEAP32[r57>>2]|0)==(r54|0)){HEAP32[r50+56>>2]=180;_free(r61);_free(r58);break L77}else{_err_msg(5,46560,856,21504,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}}}}while(0);L182:do{if(r60){r85=24584;r86=0}else{r51=r38;r32=24584;r59=5;r56=r53;while(1){r55=r59-1|0;r34=HEAP8[r32];if(!((r55|0)!=0&r34<<24>>24!=0&r56<<24>>24==r34<<24>>24)){r85=r32;r86=r56;break L182}r34=r51+1|0;r40=r32+1|0;r39=HEAP8[r34];if(r39<<24>>24==0){r85=r40;r86=0;break}else{r51=r34;r32=r40;r59=r55;r56=r39}}}}while(0);r56=r50+20|0;if(r86<<24>>24==(HEAP8[r85]|0)){HEAP32[r56>>2]=3}else{HEAP32[r56>>2]=4}r56=r50+8|0;HEAP32[r56>>2]=r54;HEAP32[r50+12>>2]=1;r59=_malloc(4);if((r59|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=800,r3));STACKTOP=r3}r32=r59;if((HEAP32[r59-4>>2]&3|0)!=0){tempBigInt=0;HEAP8[r32]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+3|0]=tempBigInt}r59=r50+16|0;HEAP32[r59>>2]=r32;r51=Math_imul(HEAP32[r56>>2],HEAP32[r50+20>>2]<<1|1)|0;HEAP32[r32>>2]=r51;HEAP32[r50+92>>2]=HEAP32[HEAP32[r59>>2]>>2];HEAP32[r50+56>>2]=180;break L77}}while(0);r59=r50+8|0;HEAP32[r59>>2]=r54;HEAP32[r50+12>>2]=1;r51=_malloc(4);if((r51|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=785,r3));STACKTOP=r3}r32=r51;if((HEAP32[r51-4>>2]&3|0)!=0){tempBigInt=0;HEAP8[r32]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+3|0]=tempBigInt}r51=r50+16|0;HEAP32[r51>>2]=r32;HEAP32[r32>>2]=HEAP32[r59>>2];HEAP32[r50+92>>2]=HEAP32[HEAP32[r51>>2]>>2];HEAP32[r50+20>>2]=0;HEAP32[r50+56>>2]=1116;break L77}}while(0);r60=r50+8|0;HEAP32[r60>>2]=r54;HEAP32[r50+12>>2]=1;r51=_malloc(4);if((r51|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=775,r3));STACKTOP=r3}r59=r51;if((HEAP32[r51-4>>2]&3|0)!=0){tempBigInt=0;HEAP8[r59]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r59+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r59+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r59+3|0]=tempBigInt}r51=r50+16|0;HEAP32[r51>>2]=r59;HEAP32[r59>>2]=HEAP32[r60>>2]<<1;HEAP32[r50+92>>2]=HEAP32[HEAP32[r51>>2]>>2];HEAP32[r50+20>>2]=2;HEAP32[r50+56>>2]=390}}while(0);do{if(r2==57){if((r54|0)!=13){_err_msg(4,46560,741,33192,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_free(r50);r2=161;break}HEAP32[r50+8>>2]=13;HEAP32[r50+12>>2]=1;r85=_malloc(4);if((r85|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=4,HEAP32[r3+16>>2]=46560,HEAP32[r3+24>>2]=747,r3));STACKTOP=r3}r86=r85;if((HEAP32[r85-4>>2]&3|0)!=0){tempBigInt=0;HEAP8[r86]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r86+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r86+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r86+3|0]=tempBigInt}HEAP32[r50+16>>2]=r86;HEAP32[r86>>2]=39;HEAP32[r50+92>>2]=39;HEAP32[r50+20>>2]=3;HEAP32[r50+56>>2]=438}}while(0);if(r2==161){HEAP32[r1+16>>2]=0;r87=-1;STACKTOP=r4;return r87}if((r35|0)!=0){r54=HEAP32[r50+8>>2];r86=_malloc(20);if((r86|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=20,HEAP32[r3+16>>2]=23376,HEAP32[r3+24>>2]=134,r3));STACKTOP=r3}if((HEAP32[r86-4>>2]&3|0)!=0){_memset(r86,0,20)|0}HEAP32[r86+16>>2]=r54;r85=___ckd_calloc__(r54,4,23376,136);r53=r86;HEAP32[r53>>2]=r85;r85=___ckd_calloc__(r54,4,23376,137);HEAP32[r86+4>>2]=r85;r85=___ckd_calloc__(r54,4,23376,138);HEAP32[r86+8>>2]=r85;HEAPF32[HEAP32[r53>>2]>>2]=12;HEAP32[r86+12>>2]=0;_err_msg(1,23376,143,14816,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=HEAPF32[HEAP32[r53>>2]>>2],HEAP32[r3+8>>2]=r54-1,r3));STACKTOP=r3;HEAP32[r50+60>>2]=r86}HEAP32[r50+44>>2]=r35;HEAP32[r50+48>>2]=r48;if((r33|0)!=0){r48=_malloc(24);if((r48|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=24,HEAP32[r3+16>>2]=17936,HEAP32[r3+24>>2]=94,r3));STACKTOP=r3}if((HEAP32[r48-4>>2]&3|0)!=0){_memset(r48,0,24)|0}HEAPF32[r48+20>>2]=2;HEAP32[r50+64>>2]=r48;r86=(r35|0)!=0?5:10;HEAPF32[r48>>2]=r86;_err_msg(1,17936,132,9800,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r3>>3]=r86,r3));STACKTOP=r3}HEAP32[r50+52>>2]=r33;r33=r50+20|0;r86=HEAP32[r33>>2]<<1;r48=___ckd_calloc_2d__((r86|0)>256?r86:256,HEAP32[r50+8>>2],4,46560,884);HEAP32[r50+68>>2]=r48;r48=___ckd_calloc__(HEAP32[r33>>2]<<1|1,4,46560,888);HEAP32[r50+72>>2]=r48;r48=r1+16|0;HEAP32[r48>>2]=r41;if((r41|0)==0){r87=-1;STACKTOP=r4;return r87}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],41328,r30)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=41328,r3));STACKTOP=r3}else{r41=HEAP32[r30>>2];if((r41|0)==0){break}if((HEAP32[r41>>2]|0)==0){break}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],41328,r29)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=41328,r3));STACKTOP=r3;r88=0}else{r41=HEAP32[r29>>2];if((r41|0)==0){r88=0;break}r88=HEAP32[r41>>2]}}while(0);_err_msg(1,44200,160,15856,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r88,r3));STACKTOP=r3;r41=HEAP32[r48>>2];do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],41328,r28)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=41328,r3));STACKTOP=r3;r89=0}else{r1=HEAP32[r28>>2];if((r1|0)==0){r89=0;break}r89=HEAP32[r1>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],15592,r27)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15592,r3));STACKTOP=r3;r90=0}else{r1=HEAP32[r27>>2];if((r1|0)==0){r90=0;break}r90=HEAP32[r1>>2]}}while(0);if((r41|0)==0){___assert_fail(34768,46448,68,50800)}r1=HEAP32[r41+12>>2];if((r1|0)!=1){_err_msg(4,46448,71,33288,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r1,r3));STACKTOP=r3;r87=-1;STACKTOP=r4;return r87}r1=_fopen(r89,45688);if((r1|0)==0){r50=___errno_location();r33=HEAP32[r50>>2];r50=_malloc(52);_memcpy(r50,17808,47)|0;r86=r50+_strlen(r50)|0;HEAP8[r86]=HEAP8[6400];HEAP8[r86+1|0]=HEAP8[6401];HEAP8[r86+2|0]=HEAP8[6402];HEAP8[r86+3|0]=HEAP8[6403];HEAP8[r86+4|0]=HEAP8[6404];HEAP8[r86+5|0]=HEAP8[6405];r86=_strerror(r33);_err_msg(4,46448,76,r50,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r89,HEAP32[r3+8>>2]=r86,r3));STACKTOP=r3;_free(r50);r87=-1;STACKTOP=r4;return r87}if((_bio_readhdr(r1,r25,r26,r23)|0)<0){_err_msg(4,46448,81,11832,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r89,r3));STACKTOP=r3;_fclose(r1);r87=-1;STACKTOP=r4;return r87}r50=HEAP32[r25>>2];r86=0;while(1){r33=HEAP32[r50+(r86<<2)>>2];if((r33|0)==0){break}do{if((HEAP8[r33]|0)==118){r35=r33;r54=45992;while(1){r53=r35+1|0;r85=r54+1|0;r91=HEAP8[r53];r92=HEAP8[r85];if(r91<<24>>24!=r92<<24>>24|r91<<24>>24==0|r92<<24>>24==0){break}else{r35=r53;r54=r85}}if(r91<<24>>24!=r92<<24>>24){break}r54=HEAP32[HEAP32[r26>>2]+(r86<<2)>>2];if((HEAP8[r54]|0)==48){r35=r54;r85=8064;while(1){r53=r35+1|0;r38=r85+1|0;r93=HEAP8[r53];r94=HEAP8[r38];if(r93<<24>>24!=r94<<24>>24|r93<<24>>24==0|r94<<24>>24==0){break}else{r35=r53;r85=r38}}if(r93<<24>>24==r94<<24>>24){break}}_err_msg(3,46448,90,6656,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r89,HEAP32[r3+8>>2]=r54,HEAP32[r3+16>>2]=8064,r3));STACKTOP=r3}}while(0);r86=r86+1|0}_bio_hdrarg_free(r50,HEAP32[r26>>2]);HEAP32[r26>>2]=0;HEAP32[r25>>2]=0;HEAP32[r24>>2]=0;r86=r41+84|0;r33=HEAP32[r86>>2];if((r33|0)!=0){r85=HEAP32[r33>>2];if((r85|0)!=0){_free(HEAP32[r85>>2])}_free(HEAP32[r33>>2]);_free(r33)}r33=r41+88|0;r85=HEAP32[r23>>2];r35=r19;r38=r20;r53=_bio_fread(r18,4,1,r1,r85,r24);do{if((r53|0)==0){r84=___errno_location();r83=HEAP32[r84>>2];r84=_malloc(34);_memcpy(r84,38960,29)|0;r31=r84+_strlen(r84)|0;HEAP8[r31]=HEAP8[6400];HEAP8[r31+1|0]=HEAP8[6401];HEAP8[r31+2|0]=HEAP8[6402];HEAP8[r31+3|0]=HEAP8[6403];HEAP8[r31+4|0]=HEAP8[6404];HEAP8[r31+5|0]=HEAP8[6405];r31=_strerror(r83);_err_msg(4,22752,449,r84,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r31,r3));STACKTOP=r3;_free(r84);r95=1;r96=0;r97=0;r98=0}else if((r53|0)==1){r84=_bio_fread(r35,4,1,r1,r85,r24);if((r84|0)==0){r31=___errno_location();r83=HEAP32[r31>>2];r31=_malloc(34);_memcpy(r31,38960,29)|0;r80=r31+_strlen(r31)|0;HEAP8[r80]=HEAP8[6400];HEAP8[r80+1|0]=HEAP8[6401];HEAP8[r80+2|0]=HEAP8[6402];HEAP8[r80+3|0]=HEAP8[6403];HEAP8[r80+4|0]=HEAP8[6404];HEAP8[r80+5|0]=HEAP8[6405];r80=_strerror(r83);_err_msg(4,22752,459,r31,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r80,r3));STACKTOP=r3;_free(r31);r95=1;r96=0;r97=0;r98=0;break}else if((r84|0)==1){r84=_bio_fread(r38,4,1,r1,r85,r24);if((r84|0)==0){r31=___errno_location();r80=HEAP32[r31>>2];r31=_malloc(34);_memcpy(r31,38960,29)|0;r83=r31+_strlen(r31)|0;HEAP8[r83]=HEAP8[6400];HEAP8[r83+1|0]=HEAP8[6401];HEAP8[r83+2|0]=HEAP8[6402];HEAP8[r83+3|0]=HEAP8[6403];HEAP8[r83+4|0]=HEAP8[6404];HEAP8[r83+5|0]=HEAP8[6405];r83=_strerror(r80);_err_msg(4,22752,469,r31,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r83,r3));STACKTOP=r3;_free(r31);r95=1;r96=0;r97=0;r98=0;break}else if((r84|0)==1){r84=_bio_fread_1d(r22,4,r21,r1,r85,r24);if((r84|0)!=(HEAP32[r21>>2]|0)){r95=1;r96=0;r97=0;r98=0;break}r31=HEAP32[r18>>2];r83=HEAP32[r19>>2];r80=Math_imul(r31,r83)|0;r82=HEAP32[r20>>2];if((r84|0)!=(Math_imul(r80,r82)|0)){___assert_fail(33072,22752,481,51328)}r81=HEAP32[r22>>2];r78=___ckd_calloc__(r80,4,22752,483);r79=___ckd_calloc__(r31,4,22752,483);r76=r79;r77=0;r74=0;while(1){if(r74>>>0>=r80>>>0){r99=0;r100=0;break}HEAP32[r78+(r74<<2)>>2]=r81+(r77<<2);r77=r77+r82|0;r74=r74+1|0}while(1){if(r100>>>0>=r31>>>0){break}HEAP32[r76+(r100<<2)>>2]=r78+(r99<<2);r99=r99+r83|0;r100=r100+1|0}HEAP32[r33>>2]=r31;r95=(r84|0)<0;r96=r79;r97=r83;r98=r82;break}else{r78=___errno_location();r76=HEAP32[r78>>2];r78=_malloc(30);_memcpy(r78,34696,25)|0;r74=r78+_strlen(r78)|0;HEAP8[r74]=HEAP8[6400];HEAP8[r74+1|0]=HEAP8[6401];HEAP8[r74+2|0]=HEAP8[6402];HEAP8[r74+3|0]=HEAP8[6403];HEAP8[r74+4|0]=HEAP8[6404];HEAP8[r74+5|0]=HEAP8[6405];r74=_strerror(r76);_err_msg(4,22752,472,r78,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r74,r3));STACKTOP=r3;_free(r78);r95=1;r96=0;r97=0;r98=0;break}}else{r78=___errno_location();r74=HEAP32[r78>>2];r78=_malloc(30);_memcpy(r78,34696,25)|0;r76=r78+_strlen(r78)|0;HEAP8[r76]=HEAP8[6400];HEAP8[r76+1|0]=HEAP8[6401];HEAP8[r76+2|0]=HEAP8[6402];HEAP8[r76+3|0]=HEAP8[6403];HEAP8[r76+4|0]=HEAP8[6404];HEAP8[r76+5|0]=HEAP8[6405];r76=_strerror(r74);_err_msg(4,22752,462,r78,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r76,r3));STACKTOP=r3;_free(r78);r95=1;r96=0;r97=0;r98=0;break}}else{r78=___errno_location();r76=HEAP32[r78>>2];r78=_malloc(30);_memcpy(r78,34696,25)|0;r74=r78+_strlen(r78)|0;HEAP8[r74]=HEAP8[6400];HEAP8[r74+1|0]=HEAP8[6401];HEAP8[r74+2|0]=HEAP8[6402];HEAP8[r74+3|0]=HEAP8[6403];HEAP8[r74+4|0]=HEAP8[6404];HEAP8[r74+5|0]=HEAP8[6405];r74=_strerror(r76);_err_msg(4,22752,452,r78,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r74,r3));STACKTOP=r3;_free(r78);r95=1;r96=0;r97=0;r98=0}}while(0);if(r95){r33=___errno_location();r85=HEAP32[r33>>2];r33=_malloc(35);_memcpy(r33,49272,30)|0;r38=r33+_strlen(r33)|0;HEAP8[r38]=HEAP8[6400];HEAP8[r38+1|0]=HEAP8[6401];HEAP8[r38+2|0]=HEAP8[6402];HEAP8[r38+3|0]=HEAP8[6403];HEAP8[r38+4|0]=HEAP8[6404];HEAP8[r38+5|0]=HEAP8[6405];r38=_strerror(r85);_err_msg(4,46448,109,r33,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r89,HEAP32[r3+8>>2]=r38,r3));STACKTOP=r3;_free(r33);_fclose(r1);r87=-1;STACKTOP=r4;return r87}HEAP32[r86>>2]=r96;_fclose(r1);r33=HEAP32[HEAP32[r41+16>>2]>>2];if((r98|0)==(r33|0)){HEAP32[r41+92>>2]=r90>>>0>r97>>>0|(r90|0)<1?r97:r90;break}else{_err_msg(5,46448,127,47816,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r98,HEAP32[r3+8>>2]=r33,r3));STACKTOP=r3;_exit(1)}}}while(0);L335:do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],15488,r17)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15488,r3));STACKTOP=r3}else{r98=HEAP32[r17>>2];if((r98|0)==0){break}if((HEAP32[r98>>2]|0)==0){break}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],15488,r16)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15488,r3));STACKTOP=r3;r101=0}else{r98=HEAP32[r16>>2];if((r98|0)==0){r101=0;break}r101=HEAP32[r98>>2]}}while(0);_err_msg(1,44200,170,15208,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r101,r3));STACKTOP=r3;do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],15488,r15)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15488,r3));STACKTOP=r3;r102=0}else{r41=HEAP32[r15>>2];if((r41|0)==0){r102=0;break}r102=HEAP32[r41>>2]}}while(0);r41=r102;r1=0;L350:while(1){r103=r41;r86=0;while(1){r98=_sscanf(r103,35616,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r12,HEAP32[r3+8>>2]=r14,r3));STACKTOP=r3;if((r98|0)!=1){r2=238;break L350}r98=HEAP32[r14>>2];r90=r103+r98|0;if((HEAP8[r90]|0)==45){r97=r98+1|0;r104=r103+r97|0;r98=_sscanf(r104,35616,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r13,HEAP32[r3+8>>2]=r14,r3));STACKTOP=r3;if((r98|0)!=1){r2=241;break L350}r105=HEAP32[r12>>2];r106=r103+(r97+HEAP32[r14>>2])|0}else{r97=HEAP32[r12>>2];HEAP32[r13>>2]=r97;r105=r97;r106=r90}if((r105|0)<0){r2=246;break L350}r90=HEAP32[r13>>2];if((r105|0)>(r90|0)){r2=246;break L350}else{r107=r86;r108=r105;r109=r90}while(1){if((r108|0)>(r109|0)){break}else{r110=r107}while(1){if((r110|0)==0){break}if((HEAP32[r110>>2]|0)==(r108|0)){r2=251;break L350}r110=HEAP32[r110+8>>2]}r90=_glist_add_int32(r107,r108);r97=HEAP32[r12>>2]+1|0;HEAP32[r12>>2]=r97;r107=r90;r108=r97;r109=HEAP32[r13>>2]}r54=HEAP8[r106];if(r54<<24>>24==0|r54<<24>>24==47){break}else if(r54<<24>>24!=44){r2=255;break L350}r103=r106+1|0;r86=r107}r111=_glist_add_ptr(r1,r107);r86=HEAP8[r106];if(r86<<24>>24==0){r112=0;r113=r111;r2=259;break}else if(r86<<24>>24!=47){r2=257;break}r41=r106+1|0;r1=r111}if(r2==238){_err_msg(5,46560,187,33448,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r102,HEAP32[r3+8>>2]=r103-r102,r3));STACKTOP=r3;_exit(1)}else if(r2==241){_err_msg(5,46560,195,33448,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r102,HEAP32[r3+8>>2]=r104-r102,r3));STACKTOP=r3;_exit(1)}else if(r2==246){_err_msg(5,46560,203,23304,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r102,HEAP32[r3+8>>2]=r106-r102,r3));STACKTOP=r3;_exit(1)}else if(r2==251){_err_msg(5,46560,212,17864,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r102,HEAP32[r3+8>>2]=r106-r102,r3));STACKTOP=r3;_exit(1)}else if(r2==255){_err_msg(5,46560,221,14752,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r102,HEAP32[r3+8>>2]=r106-r102,r3));STACKTOP=r3;_exit(1)}else if(r2==257){___assert_fail(11888,46560,231,49976)}else if(r2==259){while(1){r2=0;if((r113|0)==0){break}r112=r112+1|0;r113=HEAP32[r113+8>>2];r2=259}HEAP32[r12>>2]=r112;r1=___ckd_calloc__(r112+1|0,4,46560,237);r41=r1;HEAP32[r41+(HEAP32[r12>>2]<<2)>>2]=0;r86=r111;r82=HEAP32[r12>>2];L382:while(1){r114=r82-1|0;HEAP32[r12>>2]=r114;r115=(r86|0)==0;if((r114|0)<=-1){r2=278;break}if(r115){r2=277;break}r83=HEAP32[r86>>2];r79=0;r84=r83;while(1){if((r84|0)==0){break}r79=r79+1|0;r84=HEAP32[r84+8>>2]}HEAP32[r13>>2]=r79;if((r79|0)<1){r2=268;break}r84=___ckd_calloc__(r79+1|0,4,46560,247);HEAP32[r41+(HEAP32[r12>>2]<<2)>>2]=r84;HEAP32[HEAP32[r41+(HEAP32[r12>>2]<<2)>>2]+(HEAP32[r13>>2]<<2)>>2]=-1;r84=r83;while(1){r31=HEAP32[r13>>2];r54=r31-1|0;HEAP32[r13>>2]=r54;r116=(r84|0)==0;if((r31|0)<=0){break}if(r116){r2=273;break L382}HEAP32[HEAP32[r41+(HEAP32[r12>>2]<<2)>>2]+(r54<<2)>>2]=HEAP32[r84>>2];r84=HEAP32[r84+8>>2]}if(!r116){r2=275;break}r86=HEAP32[r86+8>>2];r82=HEAP32[r12>>2]}do{if(r2==268){_err_msg(5,46560,245,9696,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r102,r3));STACKTOP=r3;_exit(1)}else if(r2==273){___assert_fail(8072,46560,252,49976)}else if(r2==275){___assert_fail(8072,46560,252,49976)}else if(r2==277){if((r114|0)<0){r117=r111;break}___assert_fail(6696,46560,254,49976)}else if(r2==278){if(r115){r117=r111;break}___assert_fail(6696,46560,254,49976)}}while(0);while(1){if((r117|0)==0){r118=r111;break}r82=HEAP32[r117>>2];while(1){if((r82|0)==0){break}r86=HEAP32[r82+8>>2];_free(r82);r82=r86}r117=HEAP32[r117+8>>2]}while(1){if((r118|0)==0){break}r82=HEAP32[r118+8>>2];_free(r118);r118=r82}if((r1|0)==0){r87=-1;STACKTOP=r4;return r87}r82=HEAP32[r48>>2];if((HEAP32[r82+12>>2]|0)==1){r119=r41;r120=0;r121=0}else{_err_msg(4,46560,295,49304,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r87=-1;STACKTOP=r4;return r87}while(1){if((r119|0)==0){break}r86=HEAP32[r119>>2];if((r86|0)==0){break}else{r122=r86;r123=r121}while(1){if((r122|0)==0){break}if((HEAP32[r122>>2]|0)==-1){break}r122=r122+4|0;r123=r123+1|0}r119=r119+4|0;r120=r120+1|0;r121=r123}r1=HEAP32[r82+92>>2];if(r121>>>0>r1>>>0){_err_msg(4,46560,311,47880,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r121,HEAP32[r3+8>>2]=r1,r3));STACKTOP=r3;r87=-1;STACKTOP=r4;return r87}HEAP32[r82+24>>2]=r120;HEAP32[r82+32>>2]=r41;r1=___ckd_calloc__(r120,4,46560,317);r86=r82+28|0;HEAP32[r86>>2]=r1;r1=___ckd_calloc__(r121,4,46560,318);HEAP32[r82+36>>2]=r1;HEAP32[r82+40>>2]=r121;r1=0;while(1){if((r1|0)>=(r120|0)){break L335}r84=HEAP32[r41+(r1<<2)>>2];while(1){if((r84|0)==0){break}if((HEAP32[r84>>2]|0)==-1){break}r83=HEAP32[r86>>2]+(r1<<2)|0;HEAP32[r83>>2]=HEAP32[r83>>2]+1;r84=r84+4|0}r1=r1+1|0}}}}while(0);r120=HEAP32[r37>>2];do{if((r120|0)!=0){if((_hash_table_lookup(HEAP32[r120+4>>2],14600,r11)|0)!=0){break}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],16296,r10)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16296,r3));STACKTOP=r3;r124=0}else{r121=HEAP32[r10>>2];if((r121|0)==0){r124=0;break}r124=HEAP32[r121>>2]}}while(0);if((HEAP8[r124]|0)==110){r121=r124;r123=35912;while(1){r119=r121+1|0;r122=r123+1|0;r125=HEAP8[r119];r126=HEAP8[r122];if(r125<<24>>24!=r126<<24>>24|r125<<24>>24==0|r126<<24>>24==0){break}else{r121=r119;r123=r122}}if(r125<<24>>24==r126<<24>>24){break}}r123=HEAP32[HEAP32[r48>>2]+64>>2];do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],14600,r9)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=14600,r3));STACKTOP=r3;r127=0}else{r121=HEAP32[r9>>2];if((r121|0)==0){r127=0;break}r127=HEAPF64[r121>>3]}}while(0);HEAPF32[r123+20>>2]=r127}}while(0);if((HEAP32[HEAP32[r48>>2]+60>>2]|0)==0){r87=0;STACKTOP=r4;return r87}r127=HEAP32[r37>>2];if((r127|0)==0){r87=0;STACKTOP=r4;return r87}if((_hash_table_lookup(HEAP32[r127+4>>2],13952,r8)|0)!=0){r87=0;STACKTOP=r4;return r87}do{if((_hash_table_lookup(HEAP32[HEAP32[r37>>2]+4>>2],13952,r7)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=13952,r3));STACKTOP=r3;r128=0}else{r8=HEAP32[r7>>2];if((r8|0)==0){r128=0;break}r128=HEAP32[r8>>2]}}while(0);r7=___ckd_salloc__(r128,44200,188);r128=r6;r3=r6+4|0;r37=r6+8|0;r8=r6+44|0;r127=r6+76|0;r9=r6+104|0;r126=r6+108|0;r125=r6+100|0;r124=0;r10=r7;while(1){if((r124|0)>=(HEAP32[HEAP32[HEAP32[r48>>2]+60>>2]+16>>2]|0)){break}r11=_strchr(r10,44);if((r11|0)==0){r2=330;break}HEAP8[r11]=0;_memset(r128,0,108)|0;HEAP32[r3>>2]=r10;HEAP32[r37>>2]=-1;HEAP32[r8>>2]=r10;HEAP32[r127>>2]=-1;HEAP32[r9>>2]=0;HEAP32[r126>>2]=~r10;HEAP32[r125>>2]=-1;r120=___floatscan(r6,1);HEAPF32[HEAP32[HEAP32[HEAP32[r48>>2]+60>>2]>>2]+(r124<<2)>>2]=r120;r124=r124+1|0;r10=r11+1|0}do{if(r2==330){if((HEAP8[r10]|0)==0){break}_memset(r5,0,108)|0;HEAP32[r5+4>>2]=r10;HEAP32[r5+8>>2]=-1;HEAP32[r5+44>>2]=r10;HEAP32[r5+76>>2]=-1;HEAP32[r5+104>>2]=0;HEAP32[r5+108>>2]=~r10;HEAP32[r5+100>>2]=-1;r6=___floatscan(r5,1);HEAPF32[HEAP32[HEAP32[HEAP32[r48>>2]+60>>2]>>2]+(r124<<2)>>2]=r6}}while(0);_free(r7);r87=0;STACKTOP=r4;return r87}function _acmod_init_am(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+168|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r4+32;r10=r4+40;r11=r4+48;r12=r4+56;r13=r4+64;r14=r4+72;r15=r4+80;r16=r4+88;r17=r4+96;r18=r4+104;r19=r4+112;r20=r4+120;r21=r4+128;r22=r4+136;r23=r4+144;r24=r4+152;r25=r4+160;r26=r1|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],40168,r25)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=40168,r3));STACKTOP=r3}else{r27=HEAP32[r25>>2];if((r27|0)==0){break}r28=HEAP32[r27>>2];if((r28|0)==0){break}r27=HEAP32[r26>>2];r29=r23;r30=_bin_mdef_read_text(r28);L5:do{if((r30|0)==0){_err_msg(1,16208,336,10976,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;r31=_fopen(r28,45688);do{if((r31|0)==0){r2=139}else{if((_fread(r29,4,1,r31)|0)!=1){_fclose(r31);r32=___errno_location();r33=HEAP32[r32>>2];r32=_malloc(47);_memcpy(r32,7312,42)|0;r34=r32+_strlen(r32)|0;HEAP8[r34]=HEAP8[6400];HEAP8[r34+1|0]=HEAP8[6401];HEAP8[r34+2|0]=HEAP8[6402];HEAP8[r34+3|0]=HEAP8[6403];HEAP8[r34+4|0]=HEAP8[6404];HEAP8[r34+5|0]=HEAP8[6405];r34=_strerror(r33);_err_msg(4,16208,343,r32,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r34,r3));STACKTOP=r3;_free(r32);r2=139;break}if((HEAP32[r23>>2]|0)==1112360006){_err_msg(1,16208,349,48736,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;r35=1}else{r35=0}if((_fread(r29,4,1,r31)|0)!=1){_fclose(r31);r32=___errno_location();r34=HEAP32[r32>>2];r32=_malloc(37);_memcpy(r32,47344,32)|0;r33=r32+_strlen(r32)|0;HEAP8[r33]=HEAP8[6400];HEAP8[r33+1|0]=HEAP8[6401];HEAP8[r33+2|0]=HEAP8[6402];HEAP8[r33+3|0]=HEAP8[6403];HEAP8[r33+4|0]=HEAP8[6404];HEAP8[r33+5|0]=HEAP8[6405];r33=_strerror(r34);_err_msg(4,16208,353,r32,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r33,r3));STACKTOP=r3;_free(r32);r2=139;break}r32=(r35|0)==0;r33=HEAP32[r23>>2];if(r32){r36=r33}else{r34=_llvm_bswap_i32(r33);HEAP32[r23>>2]=r34;r36=r34}if((r36|0)>1){_err_msg(4,16208,360,45616,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r36,HEAP32[r3+8>>2]=r28,r3));STACKTOP=r3;_fclose(r31);r2=139;break}if((_fread(r29,4,1,r31)|0)!=1){_fclose(r31);r34=___errno_location();r33=HEAP32[r34>>2];r34=_malloc(43);_memcpy(r34,43960,38)|0;r37=r34+_strlen(r34)|0;HEAP8[r37]=HEAP8[6400];HEAP8[r37+1|0]=HEAP8[6401];HEAP8[r37+2|0]=HEAP8[6402];HEAP8[r37+3|0]=HEAP8[6403];HEAP8[r37+4|0]=HEAP8[6404];HEAP8[r37+5|0]=HEAP8[6405];r37=_strerror(r33);_err_msg(4,16208,366,r34,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r37,r3));STACKTOP=r3;_free(r34);r2=139;break}r34=HEAP32[r23>>2];if(r32){r38=r34}else{r37=_llvm_bswap_i32(r34);HEAP32[r23>>2]=r37;r38=r37}_fseek(r31,r38,1);r37=_malloc(80);if((r37|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=80,HEAP32[r3+16>>2]=16208,HEAP32[r3+24>>2]=375,r3));STACKTOP=r3}if((HEAP32[r37-4>>2]&3|0)!=0){_memset(r37,0,80)|0}r34=r37;HEAP32[r37>>2]=1;r33=r37+4|0;r39=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r40=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r41=r33+_strlen(r33)|0;HEAP8[r41]=HEAP8[6400];HEAP8[r41+1|0]=HEAP8[6401];HEAP8[r41+2|0]=HEAP8[6402];HEAP8[r41+3|0]=HEAP8[6403];HEAP8[r41+4|0]=HEAP8[6404];HEAP8[r41+5|0]=HEAP8[6405];r41=_strerror(r40);_err_msg(4,16208,388,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=41400,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r41,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r39>>2]);HEAP32[r39>>2]=r33}r33=r37+8|0;r41=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r40=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r42=r33+_strlen(r33)|0;HEAP8[r42]=HEAP8[6400];HEAP8[r42+1|0]=HEAP8[6401];HEAP8[r42+2|0]=HEAP8[6402];HEAP8[r42+3|0]=HEAP8[6403];HEAP8[r42+4|0]=HEAP8[6404];HEAP8[r42+5|0]=HEAP8[6405];r42=_strerror(r40);_err_msg(4,16208,389,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=40232,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r42,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r41>>2]);HEAP32[r41>>2]=r33}r33=r37+12|0;r42=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r40=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r43=r33+_strlen(r33)|0;HEAP8[r43]=HEAP8[6400];HEAP8[r43+1|0]=HEAP8[6401];HEAP8[r43+2|0]=HEAP8[6402];HEAP8[r43+3|0]=HEAP8[6403];HEAP8[r43+4|0]=HEAP8[6404];HEAP8[r43+5|0]=HEAP8[6405];r43=_strerror(r40);_err_msg(4,16208,390,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=38792,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r43,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r42>>2]);HEAP32[r42>>2]=r33}r33=r37+16|0;r43=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r40=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r44=r33+_strlen(r33)|0;HEAP8[r44]=HEAP8[6400];HEAP8[r44+1|0]=HEAP8[6401];HEAP8[r44+2|0]=HEAP8[6402];HEAP8[r44+3|0]=HEAP8[6403];HEAP8[r44+4|0]=HEAP8[6404];HEAP8[r44+5|0]=HEAP8[6405];r44=_strerror(r40);_err_msg(4,16208,391,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=37704,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r44,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r43>>2]);HEAP32[r43>>2]=r33}r33=r37+20|0;r44=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r40=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r45=r33+_strlen(r33)|0;HEAP8[r45]=HEAP8[6400];HEAP8[r45+1|0]=HEAP8[6401];HEAP8[r45+2|0]=HEAP8[6402];HEAP8[r45+3|0]=HEAP8[6403];HEAP8[r45+4|0]=HEAP8[6404];HEAP8[r45+5|0]=HEAP8[6405];r45=_strerror(r40);_err_msg(4,16208,392,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=36496,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r45,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r44>>2]);HEAP32[r44>>2]=r33}r33=r37+24|0;r45=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r40=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r46=r33+_strlen(r33)|0;HEAP8[r46]=HEAP8[6400];HEAP8[r46+1|0]=HEAP8[6401];HEAP8[r46+2|0]=HEAP8[6402];HEAP8[r46+3|0]=HEAP8[6403];HEAP8[r46+4|0]=HEAP8[6404];HEAP8[r46+5|0]=HEAP8[6405];r46=_strerror(r40);_err_msg(4,16208,393,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=35296,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r46,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r45>>2]);HEAP32[r45>>2]=r33}r33=r37+28|0;r45=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r46=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r40=r33+_strlen(r33)|0;HEAP8[r40]=HEAP8[6400];HEAP8[r40+1|0]=HEAP8[6401];HEAP8[r40+2|0]=HEAP8[6402];HEAP8[r40+3|0]=HEAP8[6403];HEAP8[r40+4|0]=HEAP8[6404];HEAP8[r40+5|0]=HEAP8[6405];r40=_strerror(r46);_err_msg(4,16208,394,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=34512,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r40,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r45>>2]);HEAP32[r45>>2]=r33}r33=r37+32|0;r40=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r46=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r47=r33+_strlen(r33)|0;HEAP8[r47]=HEAP8[6400];HEAP8[r47+1|0]=HEAP8[6401];HEAP8[r47+2|0]=HEAP8[6402];HEAP8[r47+3|0]=HEAP8[6403];HEAP8[r47+4|0]=HEAP8[6404];HEAP8[r47+5|0]=HEAP8[6405];r47=_strerror(r46);_err_msg(4,16208,395,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=32704,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r47,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r40>>2]);HEAP32[r40>>2]=r33}r33=r37+36|0;r40=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r47=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r46=r33+_strlen(r33)|0;HEAP8[r46]=HEAP8[6400];HEAP8[r46+1|0]=HEAP8[6401];HEAP8[r46+2|0]=HEAP8[6402];HEAP8[r46+3|0]=HEAP8[6403];HEAP8[r46+4|0]=HEAP8[6404];HEAP8[r46+5|0]=HEAP8[6405];r46=_strerror(r47);_err_msg(4,16208,396,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=31552,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r46,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=_llvm_bswap_i32(HEAP32[r40>>2]);HEAP32[r40>>2]=r33}r33=r37+40|0;r46=r33;if((_fread(r33,4,1,r31)|0)!=1){_fclose(r31);_free(r37);r33=___errno_location();r47=HEAP32[r33>>2];r33=_malloc(32);_memcpy(r33,42608,27)|0;r48=r33+_strlen(r33)|0;HEAP8[r48]=HEAP8[6400];HEAP8[r48+1|0]=HEAP8[6401];HEAP8[r48+2|0]=HEAP8[6402];HEAP8[r48+3|0]=HEAP8[6403];HEAP8[r48+4|0]=HEAP8[6404];HEAP8[r48+5|0]=HEAP8[6405];r48=_strerror(r47);_err_msg(4,16208,397,r33,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=30744,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r48,r3));STACKTOP=r3;_free(r33);r2=139;break}if(!r32){r33=HEAP16[r46>>1]|0;HEAP16[r46>>1]=r33>>>24|r33>>>8&65280}r33=___ckd_calloc__(HEAP32[r39>>2],4,16208,400);r48=r37+48|0;HEAP32[r48>>2]=r33;do{if((r27|0)==0){r49=1}else{if((_hash_table_lookup(HEAP32[r27+4>>2],31344,r22)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=31344,r3));STACKTOP=r3;r49=0;break}r33=HEAP32[r22>>2];if((r33|0)==0){r49=0;break}r49=(HEAP32[r33>>2]|0)!=0|0}}while(0);do{if(r32){if((r49|0)==0){r2=81;break}r33=_mmio_file_read(r28);HEAP32[r37+44>>2]=r33;if((r33|0)==0){r2=81;break}else{r50=r49}r33=_ftell(r31);if((r50|0)==0){r51=r33;r2=84;break}HEAP32[HEAP32[r48>>2]>>2]=HEAP32[HEAP32[r37+44>>2]>>2]+r33;HEAP32[r37+76>>2]=2;r52=1}else{_err_msg(3,16208,405,29088,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r2=81}}while(0);if(r2==81){r51=_ftell(r31);r2=84}do{if(r2==84){HEAP32[r37+76>>2]=1;_fseek(r31,0,2);r33=_ftell(r31);_fseek(r31,r51,0);r47=r33-r51|0;r33=_malloc(r47);if((r33|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r47,HEAP32[r3+8>>2]=16208,HEAP32[r3+16>>2]=427,r3));STACKTOP=r3}HEAP32[HEAP32[r48>>2]>>2]=r33;if((_fread(HEAP32[HEAP32[r48>>2]>>2],1,r47,r31)|0)==(r47|0)){r52=1;break}_err_msg(5,16208,429,28432,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r47,HEAP32[r3+8>>2]=r28,r3));STACKTOP=r3;_exit(1)}}while(0);while(1){r47=(r52|0)<(HEAP32[r39>>2]|0);r53=HEAP32[r48>>2];r33=HEAP32[r53+(r52-1<<2)>>2];r54=r33+(_strlen(r33)+1)|0;if(!r47){break}HEAP32[r53+(r52<<2)>>2]=r54;r52=r52+1|0}r48=HEAP32[r53>>2];r47=r48+(r54-r48+3&-4)|0;r48=r37+52|0;HEAP32[r48>>2]=r47;L122:do{if(r32){r33=r47+(HEAP32[r40>>2]<<3)|0;r55=r37+56|0;HEAP32[r55>>2]=r33;r56=r33;r57=r55;r2=95}else{r55=0;while(1){r58=HEAP32[r40>>2];r59=HEAP32[r48>>2];if((r55|0)>=(r58|0)){break}r33=r59+(r55<<3)|0;r60=_llvm_bswap_i16(HEAP16[r33>>1]);HEAP16[r33>>1]=r60;r60=HEAP32[r48>>2]+(r55<<3)+2|0;r33=_llvm_bswap_i16(HEAP16[r60>>1]);HEAP16[r60>>1]=r33;r33=HEAP32[r48>>2]+(r55<<3)+4|0;r60=_llvm_bswap_i32(HEAP32[r33>>2]);HEAP32[r33>>2]=r60;r55=r55+1|0}r55=r59+(r58<<3)|0;r60=r37+56|0;HEAP32[r60>>2]=r55;if(r32){r56=r55;r57=r60;r2=95;break}else{r61=0}while(1){r55=HEAP32[r41>>2];r33=HEAP32[r60>>2];if((r61|0)>=(r55|0)){r62=r33;r63=r55;r64=r60;break L122}r55=r33+(r61*12&-1)|0;r33=_llvm_bswap_i32(HEAP32[r55>>2]);HEAP32[r55>>2]=r33;r33=HEAP32[r60>>2]+(r61*12&-1)+4|0;r55=_llvm_bswap_i32(HEAP32[r33>>2]);HEAP32[r33>>2]=r55;r61=r61+1|0}}}while(0);if(r2==95){r62=r56;r63=HEAP32[r41>>2];r64=r57}r48=r62+(r63*12&-1)|0;if(!r32){r40=_llvm_bswap_i32(HEAP32[r48>>2]);HEAP32[r48>>2]=r40}r40=___ckd_calloc__(HEAP32[r45>>2],4,16208,457);r47=r37+60|0;HEAP32[r47>>2]=r40;HEAP32[r40>>2]=r48+4;L137:do{if(!r32){r40=0;while(1){if((r40|0)>=(HEAP32[r48>>2]|0)){break L137}r60=HEAP32[HEAP32[r47>>2]>>2]+(r40<<1)|0;r55=_llvm_bswap_i16(HEAP16[r60>>1]);HEAP16[r60>>1]=r55;r40=r40+1|0}}}while(0);L142:do{if((HEAP32[r42>>2]|0)==0){r32=r37+64|0;HEAP32[r32>>2]=HEAP32[HEAP32[r47>>2]>>2]+(HEAP32[r48>>2]<<1);r40=1;while(1){if((r40|0)>=(HEAP32[r45>>2]|0)){break L142}r55=r40-1|0;r60=HEAP32[r47>>2];HEAP32[r60+(r40<<2)>>2]=HEAP32[r60+(r55<<2)>>2]+(HEAPU8[HEAP32[r32>>2]+r55|0]<<1);r40=r40+1|0}}else{r40=1;while(1){if((r40|0)>=(HEAP32[r45>>2]|0)){break L142}r32=HEAP32[r47>>2];r55=HEAP32[r32>>2]+(Math_imul(r40,HEAP32[r42>>2])<<1)|0;HEAP32[r32+(r40<<2)>>2]=r55;r40=r40+1|0}}}while(0);r48=HEAP32[r44>>2]<<1;r40=_malloc(r48);if((r40|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r48,HEAP32[r3+8>>2]=16208,HEAP32[r3+16>>2]=477,r3));STACKTOP=r3}r48=r37+68|0;HEAP32[r48>>2]=r40;r40=HEAP32[r44>>2]<<1;r55=_malloc(r40);if((r55|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r40,HEAP32[r3+8>>2]=16208,HEAP32[r3+16>>2]=478,r3));STACKTOP=r3}r40=r37+72|0;HEAP32[r40>>2]=r55;r55=0;while(1){if((r55|0)>=(HEAP32[r43>>2]|0)){r65=r55;break}HEAP16[HEAP32[r48>>2]+(r55<<1)>>1]=r55;r55=r55+1|0}while(1){r55=HEAP32[r44>>2];if((r65|0)>=(r55|0)){r66=0;r67=r55;break}HEAP16[HEAP32[r48>>2]+(r65<<1)>>1]=-1;r65=r65+1|0}while(1){if((r66|0)>=(r67|0)){break}HEAP16[HEAP32[r40>>2]+(r66<<1)>>1]=-1;r66=r66+1|0;r67=HEAP32[r44>>2]}r55=r37+64|0;r32=0;while(1){r68=HEAP32[r41>>2];if((r32|0)>=(r68|0)){break}r60=HEAP32[r64>>2]+(r32*12&-1)|0;r33=HEAPU8[r60]|HEAPU8[r60+1|0]<<8|HEAPU8[r60+2|0]<<16|HEAPU8[r60+3|0]<<24|0;r60=0;while(1){r69=HEAP32[r42>>2];if((r69|0)==0){r70=HEAP32[r64>>2]+(r32*12&-1)|0;r71=HEAPU8[HEAP32[r55>>2]+(HEAPU8[r70]|HEAPU8[r70+1|0]<<8|HEAPU8[r70+2|0]<<16|HEAPU8[r70+3|0]<<24)|0]}else{r71=r69}if((r60|0)>=(r71|0)){break}r69=HEAPU16[HEAP32[HEAP32[r47>>2]+(r33<<2)>>2]+(r60<<1)>>1];if((r32|0)<(HEAP32[r39>>2]|0)){r72=r32}else{r72=HEAPU8[HEAP32[r64>>2]+(r32*12&-1)+9|0]}r70=HEAP32[r40>>2]+(r69<<1)|0;r73=HEAP16[r70>>1];if(r73<<16>>16==-1){HEAP16[r70>>1]=r72;r74=HEAP16[HEAP32[r40>>2]+(r69<<1)>>1]}else{r74=r73}if((r74<<16>>16|0)!=(r72|0)){_err_msg(3,16208,499,27336,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r69,r3));STACKTOP=r3}r73=HEAP32[r42>>2];if((r73|0)==0){r70=HEAP32[r64>>2]+(r72*12&-1)|0;r75=HEAPU8[HEAP32[r55>>2]+(HEAPU8[r70]|HEAPU8[r70+1|0]<<8|HEAPU8[r70+2|0]<<16|HEAPU8[r70+3|0]<<24)|0]}else{r75=r73}if((r60|0)>(r75|0)){_err_msg(3,16208,503,26256,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r32,HEAP32[r3+8>>2]=r72,r3));STACKTOP=r3}else{r73=HEAP32[r64>>2]+(r72*12&-1)|0;HEAP16[HEAP32[r48>>2]+(r69<<1)>>1]=HEAP16[HEAP32[HEAP32[r47>>2]+((HEAPU8[r73]|HEAPU8[r73+1|0]<<8|HEAPU8[r73+2|0]<<16|HEAPU8[r73+3|0]<<24)<<2)>>2]+(r60<<1)>>1]}r60=r60+1|0}r32=r32+1|0}r32=_bin_mdef_ciphone_id(r34,18312)&65535;HEAP16[r46>>1]=r32;r32=HEAP32[r39>>2];r47=HEAP32[r42>>2];r48=HEAP32[r43>>2];r55=HEAP32[r44>>2];r40=HEAP32[r45>>2];_err_msg(1,16208,516,24256,(r3=STACKTOP,STACKTOP=STACKTOP+48|0,HEAP32[r3>>2]=r32,HEAP32[r3+8>>2]=r68-r32,HEAP32[r3+16>>2]=r47,HEAP32[r3+24>>2]=r48,HEAP32[r3+32>>2]=r55,HEAP32[r3+40>>2]=r40,r3));STACKTOP=r3;_fclose(r31);r40=r1+20|0;HEAP32[r40>>2]=r34;if((r34|0)!=0){r76=r40;break L5}}}while(0);if(r2==139){HEAP32[r1+20>>2]=0}_err_msg(4,44200,95,24416,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;r77=-1;STACKTOP=r4;return r77}else{r31=r1+20|0;HEAP32[r31>>2]=r30;r76=r31}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],39752,r21)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=39752,r3));STACKTOP=r3}else{r30=HEAP32[r21>>2];if((r30|0)==0){break}r28=HEAP32[r30>>2];if((r28|0)==0){break}r30=r1+4|0;r27=HEAP32[r30>>2];do{if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],21800,r20)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=21800,r3));STACKTOP=r3;r78=0}else{r29=HEAP32[r20>>2];if((r29|0)==0){r78=0;break}r78=HEAPF64[r29>>3]}}while(0);r29=r12;r31=r13;r40=r14;r55=r17;_err_msg(1,24128,206,18416,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;r48=_malloc(8);if((r48|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=8,HEAP32[r3+16>>2]=24128,HEAP32[r3+24>>2]=209,r3));STACKTOP=r3}if((HEAP32[r48-4>>2]&3|0)!=0){r47=r48;r32=r47|0;tempBigInt=0;HEAP8[r32]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+3|0]=tempBigInt;r32=r47+4|0;tempBigInt=0;HEAP8[r32]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r32+3|0]=tempBigInt}r32=r48;r47=_fopen(r28,45688);if((r47|0)==0){r41=___errno_location();r37=HEAP32[r41>>2];r41=_malloc(53);_memcpy(r41,12128,48)|0;r60=r41+_strlen(r41)|0;HEAP8[r60]=HEAP8[6400];HEAP8[r60+1|0]=HEAP8[6401];HEAP8[r60+2|0]=HEAP8[6402];HEAP8[r60+3|0]=HEAP8[6403];HEAP8[r60+4|0]=HEAP8[6404];HEAP8[r60+5|0]=HEAP8[6405];r60=_strerror(r37);_err_msg(5,24128,212,r41,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r60,r3));STACKTOP=r3;_free(r41);_exit(r37)}if((_bio_readhdr(r47,r18,r19,r15)|0)<0){_err_msg(5,24128,216,8144,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;_exit(1)}r37=HEAP32[r18>>2];r41=0;r60=0;while(1){HEAP32[r17>>2]=r41;r33=HEAP32[r37+(r41<<2)>>2];if((r33|0)==0){break}r73=HEAP8[r33];do{if(r73<<24>>24==118){r69=r33;r70=45992;while(1){r79=r69+1|0;r80=r70+1|0;r81=HEAP8[r79];r82=HEAP8[r80];if(r81<<24>>24!=r82<<24>>24|r81<<24>>24==0|r82<<24>>24==0){break}else{r69=r79;r70=r80}}if(r81<<24>>24!=r82<<24>>24){if(r73<<24>>24==99){r83=r33;r84=46256;r2=169;break}else{r85=r60;break}}r70=HEAP32[HEAP32[r19>>2]+(r41<<2)>>2];if((HEAP8[r70]|0)==49){r69=r70;r80=49488;while(1){r79=r69+1|0;r86=r80+1|0;r87=HEAP8[r79];r88=HEAP8[r86];if(r87<<24>>24!=r88<<24>>24|r87<<24>>24==0|r88<<24>>24==0){break}else{r69=r79;r80=r86}}if(r87<<24>>24==r88<<24>>24){r85=r60;break}}_err_msg(3,24128,224,47984,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r70,HEAP32[r3+16>>2]=49488,r3));STACKTOP=r3;r85=r60}else if(r73<<24>>24==99){r83=r33;r84=46256;r2=169}else{r85=r60}}while(0);if(r2==169){while(1){r2=0;r33=r83+1|0;r73=r84+1|0;r89=HEAP8[r33];r90=HEAP8[r73];if(r89<<24>>24!=r90<<24>>24|r89<<24>>24==0|r90<<24>>24==0){break}else{r83=r33;r84=r73;r2=169}}r85=r89<<24>>24==r90<<24>>24?1:r60}r41=r41+1|0;r60=r85}_bio_hdrarg_free(r37,HEAP32[r19>>2]);HEAP32[r19>>2]=0;HEAP32[r18>>2]=0;HEAP32[r16>>2]=0;r41=HEAP32[r15>>2];if((_bio_fread(r40,4,1,r47,r41,r16)|0)!=1){_err_msg(5,24128,243,44648,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;_exit(1)}if((_bio_fread(r29,4,1,r47,r41,r16)|0)!=1){_err_msg(5,24128,243,44648,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;_exit(1)}if((_bio_fread(r31,4,1,r47,r41,r16)|0)!=1){_err_msg(5,24128,243,44648,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;_exit(1)}if((_bio_fread(r55,4,1,r47,r41,r16)|0)!=1){_err_msg(5,24128,243,44648,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;_exit(1)}r73=HEAP32[r14>>2];if((r73|0)>32766){_err_msg(5,24128,247,43112,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r73,HEAP32[r3+16>>2]=32767,r3));STACKTOP=r3;_exit(1)}r33=r73&65535;r73=r48+4|0;HEAP16[r73>>1]=r33;r34=HEAP32[r13>>2];r45=HEAP32[r12>>2];if((r34|0)!=(r45+1|0)){_err_msg(5,24128,252,42016,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r45,HEAP32[r3+16>>2]=r34,r3));STACKTOP=r3;_exit(1)}r44=r48+6|0;HEAP16[r44>>1]=r45;r43=HEAP32[r17>>2];r42=r33<<16>>16;if((r43|0)!=(Math_imul(Math_imul(r42,r45)|0,r34)|0)){_err_msg(5,24128,258,40640,(r3=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r43,HEAP32[r3+16>>2]=r42,HEAP32[r3+24>>2]=r45,HEAP32[r3+32>>2]=r34,r3));STACKTOP=r3;_exit(1)}r43=___ckd_calloc_3d__(r42,r45,r34,1,24128,262);r42=r48;HEAP32[r42>>2]=r43;r43=___ckd_calloc_2d__(r45,r34,4,24128,265);r33=r43;r39=Math_imul(r45,r34)|0;r46=r78;r80=r27+48|0;r69=r27+9|0;r86=r27+64|0;r79=0;while(1){if((r79|0)>=(HEAP16[r73>>1]|0)){break}if((_bio_fread(HEAP32[r33>>2],4,r39,r47,r41,r16)|0)==(r39|0)){r91=0}else{r2=186;break}while(1){if((r91|0)>=(r45|0)){break}r92=r33+(r91<<2)|0;if(_vector_sum_norm(HEAP32[r92>>2],r34)==0){_err_msg(3,24128,279,38192,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r79,HEAP32[r3+8>>2]=r91,r3));STACKTOP=r3}r93=HEAP32[r92>>2];r94=0;while(1){if((r94|0)>=(r34|0)){break}r95=r93+(r94<<2)|0;r96=HEAPF32[r95>>2];if(r96!=0&r96<r78){HEAPF32[r95>>2]=r46}r94=r94+1|0}_vector_sum_norm(HEAP32[r92>>2],r34);r94=0;while(1){if((r94|0)>=(r34|0)){break}r93=HEAPF32[HEAP32[r92>>2]+(r94<<2)>>2];if(r93>0){r70=Math_log(r93);r97=(r70*HEAPF64[r80>>3]&-1)>>HEAP8[r69]}else{r97=HEAP32[r86>>2]}r70=-r97>>10;HEAP8[HEAP32[HEAP32[HEAP32[r42>>2]+(r79<<2)>>2]+(r91<<2)>>2]+r94|0]=(r70|0)>255?-1:r70&255;r94=r94+1|0}r91=r91+1|0}r79=r79+1|0}if(r2==186){_err_msg(5,24128,272,39424,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r79,HEAP32[r3+8>>2]=r28,r3));STACKTOP=r3;_exit(1)}HEAP32[r17>>2]=r79;if((r43|0)!=0){_free(HEAP32[r43>>2])}_free(r43);if((r60|0)!=0){_bio_verify_chksum(r47,r41,HEAP32[r16>>2])}if((_fread(r11,1,1,r47)|0)==1){_err_msg(4,24128,306,36864,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3}_fclose(r47);r86=HEAP16[r73>>1]|0;r69=0;L300:while(1){if((r69|0)>=(r86|0)){break}r80=HEAP16[r44>>1]|0;r98=0;while(1){if((r98|0)<(r80|0)){r99=r98}else{break}while(1){r100=r99+1|0;if((r100|0)>=(r80|0)){break}r101=HEAP8[HEAP32[HEAP32[HEAP32[r42>>2]+(r69<<2)>>2]+(r100<<2)>>2]+r98|0];if(r101<<24>>24==-1){r99=r100}else{r2=217;break L300}}r98=r98+1|0}r69=r69+1|0}if(r2==217){_err_msg(4,24128,162,31080,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r69,HEAP32[r3+8>>2]=r100,HEAP32[r3+16>>2]=r98,HEAP32[r3+24>>2]=r101&255,r3));STACKTOP=r3;_err_msg(5,24128,311,35624,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}r86=HEAP16[r73>>1]|0;r47=0;L313:while(1){if((r47|0)>=(r86|0)){break}r41=HEAP16[r44>>1]|0;r102=0;while(1){if((r102|0)>=(r41|0)){break}r103=r102+3|0;while(1){if((r103|0)>(r41|0)){break}r104=HEAP8[HEAP32[HEAP32[HEAP32[r42>>2]+(r47<<2)>>2]+(r102<<2)>>2]+r103|0];if(r104<<24>>24!=-1){r2=228;break L313}r103=r103+1|0}r102=r102+1|0}r47=r47+1|0}if(r2==228){_err_msg(4,24128,181,31080,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r47,HEAP32[r3+8>>2]=r102,HEAP32[r3+16>>2]=r103,HEAP32[r3+24>>2]=r104&255,r3));STACKTOP=r3;_err_msg(5,24128,313,34792,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}HEAP32[r1+24>>2]=r32;do{if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],34360,r10)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=34360,r3));STACKTOP=r3}else{r42=HEAP32[r10>>2];if((r42|0)==0){break}if((HEAP32[r42>>2]|0)==0){break}if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],24208,r9)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=24208,r3));STACKTOP=r3;break}r42=HEAP32[r9>>2];if((r42|0)==0){break}if((HEAP32[r42>>2]|0)==0){break}if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],39752,r8)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=39752,r3));STACKTOP=r3;break}r42=HEAP32[r8>>2];if((r42|0)==0){break}if((HEAP32[r42>>2]|0)==0){break}do{if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],40016,r7)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=40016,r3));STACKTOP=r3;r2=247}else{r42=HEAP32[r7>>2];if((r42|0)==0){r2=247;break}if((HEAP32[r42>>2]|0)==0){r2=247;break}_err_msg(1,44200,117,19352,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r42=_ms_mgau_init(r1,HEAP32[r30>>2],HEAP32[r76>>2]);HEAP32[r1+28>>2]=r42;if((r42|0)==0){r77=-1}else{break}STACKTOP=r4;return r77}}while(0);do{if(r2==247){_err_msg(1,44200,123,18912,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r42=_s2_semi_mgau_init(r1);r44=r1+28|0;HEAP32[r44>>2]=r42;if((r42|0)!=0){break}_err_msg(1,44200,125,18528,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r42=_ptm_mgau_init(r1,HEAP32[r76>>2]);HEAP32[r44>>2]=r42;if((r42|0)!=0){break}_err_msg(1,44200,127,17552,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r42=_ms_mgau_init(r1,HEAP32[r30>>2],HEAP32[r76>>2]);HEAP32[r44>>2]=r42;if((r42|0)==0){r77=-1}else{break}STACKTOP=r4;return r77}}while(0);if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],17200,r6)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=17200,r3));STACKTOP=r3;r77=0;STACKTOP=r4;return r77}r42=HEAP32[r6>>2];if((r42|0)==0){r77=0;STACKTOP=r4;return r77}r44=HEAP32[r42>>2];if((r44|0)==0){r77=0;STACKTOP=r4;return r77}r42=_malloc(32);if((r42|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=32,HEAP32[r3+16>>2]=41880,HEAP32[r3+24>>2]=58,r3));STACKTOP=r3}if((HEAP32[r42-4>>2]&3|0)!=0){_memset(r42,0,32)|0}r86=r42;HEAP32[r42>>2]=1;r73=_fopen(r44,26184);r69=(r73|0)==0;do{if(r69){r41=___errno_location();r60=HEAP32[r41>>2];r41=_malloc(47);_memcpy(r41,34400,42)|0;r43=r41+_strlen(r41)|0;HEAP8[r43]=HEAP8[6400];HEAP8[r43+1|0]=HEAP8[6401];HEAP8[r43+2|0]=HEAP8[6402];HEAP8[r43+3|0]=HEAP8[6403];HEAP8[r43+4|0]=HEAP8[6404];HEAP8[r43+5|0]=HEAP8[6405];r43=_strerror(r60);_err_msg(4,41880,62,r41,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r44,HEAP32[r3+8>>2]=r43,r3));STACKTOP=r3;_free(r41)}else{_err_msg(1,41880,66,18488,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r44,r3));STACKTOP=r3;r41=_fscanf(r73,40592,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r5,r3));STACKTOP=r3;do{if((r41|0)==1){r43=HEAP32[r5>>2];if((r43|0)<1){r2=262;break}r60=r42+4|0;HEAP32[r60>>2]=r43;r43=_fscanf(r73,40592,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r5,r3));STACKTOP=r3;if((r43|0)!=1){_err_msg(4,41880,75,9880,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break}r43=HEAP32[r5>>2];r79=r42+8|0;HEAP32[r79>>2]=r43;r28=___ckd_calloc__(r43,4,41880,79);r43=r42+12|0;HEAP32[r43>>2]=r28;r28=___ckd_calloc__(HEAP32[r79>>2],4,41880,81);r80=r42+16|0;HEAP32[r80>>2]=r28;r28=___ckd_calloc__(HEAP32[r79>>2],4,41880,82);r34=r42+20|0;HEAP32[r34>>2]=r28;r28=___ckd_calloc__(HEAP32[r79>>2],4,41880,83);r46=r42+24|0;HEAP32[r46>>2]=r28;r28=0;L380:while(1){if((r28|0)>=(HEAP32[r79>>2]|0)){r2=291;break}r33=_fscanf(r73,40592,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r5,r3));STACKTOP=r3;if((r33|0)!=1){r2=268;break}HEAP32[HEAP32[r43>>2]+(r28<<2)>>2]=HEAP32[r5>>2];r33=HEAP32[HEAP32[r43>>2]+(r28<<2)>>2];r45=___ckd_calloc_3d__(HEAP32[r60>>2],r33,r33,4,41880,93);HEAP32[HEAP32[r80>>2]+(r28<<2)>>2]=r45;r45=___ckd_calloc_2d__(HEAP32[r60>>2],HEAP32[HEAP32[r43>>2]+(r28<<2)>>2],4,41880,96);HEAP32[HEAP32[r34>>2]+(r28<<2)>>2]=r45;r45=___ckd_calloc_2d__(HEAP32[r60>>2],HEAP32[HEAP32[r43>>2]+(r28<<2)>>2],4,41880,99);HEAP32[HEAP32[r46>>2]+(r28<<2)>>2]=r45;r105=0;while(1){if((r105|0)>=(HEAP32[r60>>2]|0)){break}r106=0;r45=HEAP32[HEAP32[r43>>2]+(r28<<2)>>2];while(1){if((r106|0)<(r45|0)){r107=0;r108=r45}else{r109=0;r110=r45;break}while(1){if((r107|0)>=(r108|0)){break}r33=_fscanf(r73,6776,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[HEAP32[HEAP32[HEAP32[r80>>2]+(r28<<2)>>2]+(r105<<2)>>2]+(r106<<2)>>2]+(r107<<2),r3));STACKTOP=r3;if((r33|0)!=1){r2=275;break L380}r107=r107+1|0;r108=HEAP32[HEAP32[r43>>2]+(r28<<2)>>2]}r106=r106+1|0;r45=r108}while(1){if((r109|0)>=(r110|0)){r111=0;r112=r110;break}r45=_fscanf(r73,6776,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[HEAP32[HEAP32[r34>>2]+(r28<<2)>>2]+(r105<<2)>>2]+(r109<<2),r3));STACKTOP=r3;if((r45|0)!=1){r2=280;break L380}r109=r109+1|0;r110=HEAP32[HEAP32[r43>>2]+(r28<<2)>>2]}while(1){if((r111|0)>=(r112|0)){break}r45=_fscanf(r73,6776,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[HEAP32[HEAP32[r46>>2]+(r28<<2)>>2]+(r105<<2)>>2]+(r111<<2),r3));STACKTOP=r3;if((r45|0)!=1){r2=284;break L380}r111=r111+1|0;r112=HEAP32[HEAP32[r43>>2]+(r28<<2)>>2]}r105=r105+1|0}r28=r28+1|0}if(r2==268){_err_msg(4,41880,87,8192,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r28,r3));STACKTOP=r3;break}else if(r2==275){_err_msg(4,41880,106,49504,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r105,HEAP32[r3+16>>2]=r106,HEAP32[r3+24>>2]=r107,r3));STACKTOP=r3;break}else if(r2==280){_err_msg(4,41880,114,48032,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r105,HEAP32[r3+16>>2]=r109,r3));STACKTOP=r3;break}else if(r2==284){_err_msg(4,41880,121,46280,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r28,HEAP32[r3+8>>2]=r105,HEAP32[r3+16>>2]=r111,r3));STACKTOP=r3;break}else if(r2==291){_fclose(r73);if((r86|0)==0){r77=-1;STACKTOP=r4;return r77}r43=r1+32|0;r46=HEAP32[r43>>2];if((r46|0)!=0){_ps_mllr_free(r46)}HEAP32[r43>>2]=r86;r43=HEAP32[r1+28>>2];FUNCTION_TABLE[HEAP32[HEAP32[r43>>2]+8>>2]](r43,r86);r77=0;STACKTOP=r4;return r77}}else{r2=262}}while(0);if(r2==262){_err_msg(4,41880,69,12320,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3}if(r69){break}_fclose(r73)}}while(0);_ps_mllr_free(r86);r77=-1;STACKTOP=r4;return r77}}while(0);_err_msg(4,44200,112,20360,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r77=-1;STACKTOP=r4;return r77}}while(0);_err_msg(4,44200,101,22248,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r77=-1;STACKTOP=r4;return r77}}while(0);do{if((_hash_table_lookup(HEAP32[HEAP32[r26>>2]+4>>2],48632,r24)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=48632,r3));STACKTOP=r3}else{r2=HEAP32[r24>>2];if((r2|0)==0){break}r1=HEAP32[r2>>2];if((r1|0)==0){break}_err_msg(4,44200,89,25376,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r1,r3));STACKTOP=r3;r77=-1;STACKTOP=r4;return r77}}while(0);_err_msg(4,44200,86,26304,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r77=-1;STACKTOP=r4;return r77}function _acmod_free(r1){var r2,r3,r4,r5;if((r1|0)==0){return}r2=HEAP32[r1+16>>2];do{if((r2|0)!=0){r3=r2|0;r4=HEAP32[r3>>2]-1|0;HEAP32[r3>>2]=r4;if((r4|0)>0){break}r4=HEAP32[r2+68>>2];if((r4|0)!=0){_free(HEAP32[r4>>2]);_free(r4)}_free(HEAP32[r2+72>>2]);r4=HEAP32[r2+4>>2];if((r4|0)!=0){_free(r4)}r4=HEAP32[r2+84>>2];if((r4|0)!=0){r3=HEAP32[r4>>2];if((r3|0)!=0){_free(HEAP32[r3>>2])}_free(HEAP32[r4>>2]);_free(r4)}_free(HEAP32[r2+16>>2]);_free(HEAP32[r2+28>>2]);_free(HEAP32[r2+36>>2]);r4=HEAP32[r2+32>>2];r3=r4;while(1){if((r3|0)==0){break}r5=HEAP32[r3>>2];if((r5|0)==0){break}_free(r5);r3=r3+4|0}_free(r4);r3=HEAP32[r2+60>>2];if((r3|0)!=0){r5=HEAP32[r3+4>>2];if((r5|0)!=0){_free(r5)}r5=HEAP32[r3>>2];if((r5|0)!=0){_free(r5)}r5=HEAP32[r3+8>>2];if((r5|0)!=0){_free(r5)}_free(r3)}_free(HEAP32[r2+64>>2]);_free(r2)}}while(0);_fe_free(HEAP32[r1+12>>2]);_cmd_ln_free_r(HEAP32[r1>>2]);r2=HEAP32[r1+60>>2];if((r2|0)!=0){_free(HEAP32[r2>>2]);_free(r2)}r2=HEAP32[r1+64>>2];if((r2|0)!=0){_free(HEAP32[HEAP32[r2>>2]>>2]);_free(HEAP32[r2>>2]);_free(r2)}r2=HEAP32[r1+72>>2];if((r2|0)!=0){_fclose(r2)}r2=HEAP32[r1+68>>2];if((r2|0)!=0){_fclose(r2)}r2=HEAP32[r1+76>>2];if((r2|0)!=0){_fclose(r2)}_free(HEAP32[r1+84>>2]);_free(HEAP32[r1+36>>2]);_free(HEAP32[r1+40>>2]);_free(HEAP32[r1+44>>2]);r2=HEAP32[r1+20>>2];if((r2|0)!=0){_bin_mdef_free(r2)}r2=HEAP32[r1+24>>2];if((r2|0)!=0){r3=HEAP32[r2>>2];if((r3|0)!=0){r5=HEAP32[r3>>2];if((r5|0)!=0){_free(HEAP32[r5>>2])}_free(HEAP32[r3>>2]);_free(r3)}_free(r2)}r2=HEAP32[r1+28>>2];if((r2|0)!=0){FUNCTION_TABLE[HEAP32[HEAP32[r2>>2]+12>>2]](r2)}r2=HEAP32[r1+32>>2];if((r2|0)!=0){_ps_mllr_free(r2)}_free(r1);return}function _acmod_grow_feat_buf(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r3=0;r4=STACKTOP;r5=HEAP32[r1+16>>2];r6=r1+64|0;r7=HEAP32[r6>>2];r8=r1+108|0;r9=HEAP32[r8>>2];if((r5|0)==0){___assert_fail(46184,46560,394,50816)}if((r2|0)<=0){___assert_fail(44536,46560,395,50816)}if((r9|0)<=0){___assert_fail(39248,46560,396,50816)}r10=HEAP32[r5+92>>2];if((r10|0)==0){___assert_fail(43008,46560,397,50816)}r11=HEAP32[r5+12>>2];r12=r5+16|0;r13=0;r14=0;while(1){if((r13|0)>=(r11|0)){break}r15=r14+HEAP32[HEAP32[r12>>2]+(r13<<2)>>2]|0;r13=r13+1|0;r14=r15}if(r14>>>0<r10>>>0){___assert_fail(41968,46560,404,50816)}if((r14|0)<(HEAP32[r5+40>>2]|0)){___assert_fail(40600,46560,405,50816)}r10=_feat_array_alloc(r5,r2);_memcpy(HEAP32[HEAP32[r10>>2]>>2],HEAP32[HEAP32[r7>>2]>>2],Math_imul((r9|0)>(r2|0)?r2:r9,r14)<<2)|0;_free(HEAP32[HEAP32[r7>>2]>>2]);if((r7|0)!=0){_free(HEAP32[r7>>2])}_free(r7);HEAP32[r6>>2]=r10;r10=r1+84|0;r1=r2<<2;r6=_realloc(HEAP32[r10>>2],r1);if((r6|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r1,HEAP32[r3+8>>2]=44200,HEAP32[r3+16>>2]=419,r3));STACKTOP=r3}else{HEAP32[r10>>2]=r6;HEAP32[r8>>2]=r2;STACKTOP=r4;return}}function _acmod_process_mfcbuf(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r2=STACKTOP;STACKTOP=STACKTOP+24|0;r3=r2;r4=r2+8;r5=r2+16;r6=r1+100|0;r7=HEAP32[r6>>2];HEAP32[r4>>2]=r7;r8=r1+104|0;r9=HEAP32[r8>>2];r10=r1+96|0;r11=HEAP32[r10>>2];if((r9+r7|0)>(r11|0)){HEAP32[r5>>2]=r11-r9;r11=r1+88|0;r12=HEAP8[r11];if(r12<<24>>24==3){HEAP8[r11]=2}r13=r1+60|0;HEAP32[r3>>2]=HEAP32[r13>>2]+(r9<<2);r14=_acmod_process_cep(r1,r3,r5);HEAP32[r5>>2]=r14;HEAP32[r4>>2]=r7-r14;HEAP32[r6>>2]=HEAP32[r6>>2]-r14;r7=(HEAP32[r8>>2]+r14|0)%(HEAP32[r10>>2]|0)&-1;HEAP32[r8>>2]=r7;HEAP8[r11]=r12;r15=r7;r16=r13}else{r15=r9;r16=r1+60|0}HEAP32[r3>>2]=HEAP32[r16>>2]+(r15<<2);r15=_acmod_process_cep(r1,r3,r4);HEAP32[r6>>2]=HEAP32[r6>>2]-r15;HEAP32[r8>>2]=(HEAP32[r8>>2]+r15|0)%(HEAP32[r10>>2]|0)&-1;STACKTOP=r2;return r15}function _acmod_process_cep(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;r4=STACKTOP;STACKTOP=STACKTOP+16|0;r5=r4;r6=r4+8;if((HEAP32[r1+72>>2]|0)!=0){_acmod_log_mfc(r1,HEAP32[r2>>2],HEAP32[r3>>2])}r7=HEAP32[r3>>2];HEAP32[r5>>2]=r7;r8=r1+88|0;r9=HEAP8[r8];if(r9<<24>>24==1){r10=r7-HEAP32[HEAP32[r1+16>>2]+20>>2]|0;r11=1}else if(r9<<24>>24==3){r10=r7+HEAP32[HEAP32[r1+16>>2]+20>>2]|0;r11=3}else{r10=r7;r11=r9}r9=r1+108|0;r12=HEAP32[r9>>2];r13=r1+112|0;r14=HEAP32[r13>>2];r15=r1+90|0;do{if((r10|0)>(r12-r14|0)){if((HEAP8[r15]|0)!=0|r11<<24>>24==3){_acmod_grow_feat_buf(r1,r12+r10|0);r16=r15;break}else{HEAP32[r5>>2]=r7-(r10+(r14-r12));r16=r15;break}}else{r16=r15}}while(0);r15=HEAP32[r1+116>>2]+HEAP32[r13>>2]|0;L14:do{if((HEAP8[r16]|0)==0){r12=HEAP32[r9>>2];r17=(r15|0)%(r12|0)&-1;r18=r12}else{r12=r15+r10|0;while(1){r14=HEAP32[r9>>2];if((r12|0)<(r14|0)){r17=r15;r18=r14;break L14}_acmod_grow_feat_buf(r1,r14<<1)}}}while(0);do{if((r17+r10|0)>(r18|0)){if((HEAP8[r8]|0)==3){r15=HEAP32[r5>>2];HEAP32[r3>>2]=HEAP32[r3>>2]-r15;HEAP32[r2>>2]=HEAP32[r2>>2]+(r15<<2);r19=0;STACKTOP=r4;return r19}HEAP32[r6>>2]=r18-r17;r15=r1+16|0;r16=r1+64|0;r12=_feat_s2mfc2feat_live(HEAP32[r15>>2],HEAP32[r2>>2],r6,(HEAP8[r8]|0)==1|0,0,HEAP32[r16>>2]+(r17<<2)|0);if((r12|0)<0){r19=-1;STACKTOP=r4;return r19}r14=HEAP32[r13>>2]+r12|0;HEAP32[r13>>2]=r14;r11=HEAP32[r9>>2];if((r14|0)>(r11|0)){___assert_fail(37808,44200,768,51392)}else{r14=HEAP32[r6>>2];HEAP32[r3>>2]=HEAP32[r3>>2]-r14;r20=HEAP32[r2>>2]+(r14<<2)|0;HEAP32[r2>>2]=r20;HEAP32[r5>>2]=HEAP32[r5>>2]-r14;r21=(r17+r12|0)%(r11|0)&-1;r22=r20;r23=r15;r24=r16;break}}else{r21=r17;r22=HEAP32[r2>>2];r23=r1+16|0;r24=r1+64|0}}while(0);r1=HEAP8[r8];r17=_feat_s2mfc2feat_live(HEAP32[r23>>2],r22,r5,r1<<24>>24==1|0,r1<<24>>24==3|0,HEAP32[r24>>2]+(r21<<2)|0);if((r17|0)<0){r19=-1;STACKTOP=r4;return r19}r21=HEAP32[r13>>2]+r17|0;HEAP32[r13>>2]=r21;if((r21|0)>(HEAP32[r9>>2]|0)){___assert_fail(37808,44200,785,51392)}r9=HEAP32[r5>>2];HEAP32[r3>>2]=HEAP32[r3>>2]-r9;HEAP32[r2>>2]=HEAP32[r2>>2]+(r9<<2);if((HEAP8[r8]|0)==1){HEAP8[r8]=2}r19=r7-HEAP32[r3>>2]|0;STACKTOP=r4;return r19}function _acmod_log_mfc(r1,r2,r3){var r4,r5,r6;r4=0;r5=STACKTOP;r6=Math_imul(HEAP32[HEAP32[r1+16>>2]+8>>2],r3)|0;if((_fwrite(HEAP32[r2>>2],4,r6,HEAP32[r1+72>>2])|0)==(r6|0)){STACKTOP=r5;return}r1=___errno_location();r2=HEAP32[r1>>2];r1=_malloc(43);_memcpy(r1,29248,38)|0;r3=r1+_strlen(r1)|0;HEAP8[r3]=HEAP8[6400];HEAP8[r3+1|0]=HEAP8[6401];HEAP8[r3+2|0]=HEAP8[6402];HEAP8[r3+3|0]=HEAP8[6403];HEAP8[r3+4|0]=HEAP8[6404];HEAP8[r3+5|0]=HEAP8[6405];r3=_strerror(r2);_err_msg(4,44200,510,r1,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r6,HEAP32[r4+8>>2]=r3,r4));STACKTOP=r4;_free(r1);STACKTOP=r5;return}function _acmod_score(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+16|0;r6=r5;r7=r5+8;r8=(r2|0)==0;do{if(r8){r9=HEAP32[r1+92>>2]}else{r10=HEAP32[r2>>2];if((r10|0)>=0){r9=r10;break}r9=HEAP32[r1+92>>2]+1+r10|0}}while(0);r10=r1+89|0;if((HEAP8[r10]|0)==0){if((HEAP32[r1+80>>2]|0)!=0){r3=7}}else{r3=7}do{if(r3==7){if((r9|0)!=(HEAP32[r1+48>>2]|0)){break}if(!r8){HEAP32[r2>>2]=r9}r11=HEAP32[r1+36>>2];STACKTOP=r5;return r11}}while(0);r3=r1+108|0;r12=HEAP32[r3>>2];r13=r1+112|0;r14=HEAP32[r13>>2];r15=r12-r14|0;r16=HEAP32[r1+92>>2];do{if((r9|0)<0){r17=r16}else{if((r16-r9|0)>(r15|0)){r17=r16;break}r18=(HEAP32[r1+116>>2]+r9-r16|0)%(r12|0)&-1;do{if((r18|0)<0){r19=r18+r12|0;if((r19|0)<0){r11=0}else{r20=r19;break}STACKTOP=r5;return r11}else{r20=r18}}while(0);r18=r1+80|0;r19=HEAP32[r18>>2];L23:do{if((r19|0)==0){r21=HEAP32[HEAP32[r1+20>>2]+20>>2];r22=HEAP8[r10];if(r22<<24>>24==0){r23=(r21|0)/32&-1;r24=(r21|0)%32&-1;r25=r1+44|0;r26=HEAP32[r1+40>>2];r27=0;r28=0;r29=0;while(1){if((r27|0)>=(r23|0)){break}L61:do{if((HEAP32[r26>>2]|0)==0){r30=r28;r31=r29}else{r32=r27<<5;r33=0;r34=r28;r35=r29;while(1){if((r33|0)>=32){r30=r34;r31=r35;break L61}if((HEAP32[r26>>2]&1<<r33|0)==0){r36=r34;r37=r35}else{r38=r32+r33|0;r39=r38-r34|0;r40=r35;while(1){if((r39|0)<=255){break}HEAP8[HEAP32[r25>>2]+r40|0]=-1;r39=r39-255|0;r40=r40+1|0}HEAP8[HEAP32[r25>>2]+r40|0]=r39;r36=r38;r37=r40+1|0}r33=r33+1|0;r34=r36;r35=r37}}}while(0);r26=r26+4|0;r27=r27+1|0;r28=r30;r29=r31}r23=r27<<5;r35=0;r34=r28;r33=r29;while(1){if((r35|0)>=(r24|0)){break}if((HEAP32[r26>>2]&1<<r35|0)==0){r41=r34;r42=r33}else{r32=r23+r35|0;r43=r32-r34|0;r44=r33;while(1){if((r43|0)<=255){break}HEAP8[HEAP32[r25>>2]+r44|0]=-1;r43=r43-255|0;r44=r44+1|0}HEAP8[HEAP32[r25>>2]+r44|0]=r43;r41=r32;r42=r44+1|0}r35=r35+1|0;r34=r41;r33=r42}HEAP32[r1+52>>2]=r33;r45=r33;r46=HEAP8[r10];r47=r25}else{HEAP32[r1+52>>2]=r21;r45=r21;r46=r22;r47=r1+44|0}r34=HEAP32[r1+28>>2];FUNCTION_TABLE[HEAP32[HEAP32[r34>>2]+4>>2]](r34,HEAP32[r1+36>>2],HEAP32[r47>>2],r45,HEAP32[HEAP32[r1+64>>2]+(r20<<2)>>2],r9,r46&255)}else{_fseek(r19,HEAP32[HEAP32[r1+84>>2]+(r20<<2)>>2],0);r34=r6;r35=HEAP32[r18>>2];r23=HEAP32[r13>>2];if((r23|0)==(HEAP32[r3>>2]|0)){if((HEAP8[r1+90|0]|0)==0){break}_acmod_grow_feat_buf(r1,r23<<1)}if((r35|0)==0){r11=0;STACKTOP=r5;return r11}r23=_fread(r34,2,1,r35);L32:do{if((r23|0)>=0){if((r23|0)==0){break L23}r34=HEAP16[r6>>1]|0;r26=r1+52|0;HEAP32[r26>>2]=r34;r24=r1+20|0;if((r34|0)==(HEAP32[HEAP32[r24>>2]+20>>2]|0)){if((_fread(HEAP32[r1+36>>2],2,r34,r35)|0)<0){break}else{break L23}}r29=r1+44|0;r28=_fread(HEAP32[r29>>2],1,r34,r35);if((r28|0)<0){break}if((r28|0)!=(HEAP32[r26>>2]|0)){break L23}r34=r1+36|0;r27=0;r48=0;r49=r28;while(1){if((r27|0)>=(r49|0)){r50=r48;break}r28=r48+HEAPU8[HEAP32[r29>>2]+r27|0]|0;r51=r48;while(1){r52=r51+1|0;r53=HEAP32[r34>>2];if((r52|0)>=(r28|0)){break}HEAP16[r53+(r52<<1)>>1]=32767;r51=r52}r51=_fread(r53+(r28<<1)|0,2,1,r35);if((r51|0)<0){break L32}if((r51|0)==0){break L23}r27=r27+1|0;r48=r28;r49=HEAP32[r26>>2]}while(1){r26=r50+1|0;if((r26|0)>=(HEAP32[HEAP32[r24>>2]+20>>2]|0)){break L23}HEAP16[HEAP32[r34>>2]+(r26<<1)>>1]=32767;r50=r26}}}while(0);r35=___errno_location();r23=HEAP32[r35>>2];r35=_malloc(43);_memcpy(r35,31568,38)|0;r22=r35+_strlen(r35)|0;HEAP8[r22]=HEAP8[6400];HEAP8[r22+1|0]=HEAP8[6401];HEAP8[r22+2|0]=HEAP8[6402];HEAP8[r22+3|0]=HEAP8[6403];HEAP8[r22+4|0]=HEAP8[6404];HEAP8[r22+5|0]=HEAP8[6405];r22=_strerror(r23);_err_msg(4,44200,1003,r35,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r22,r4));STACKTOP=r4;_free(r35);r11=0;STACKTOP=r5;return r11}}while(0);if(!r8){HEAP32[r2>>2]=r9}HEAP32[r1+48>>2]=r9;r18=HEAP32[r1+76>>2];L91:do{if((r18|0)==0){r54=r1+36|0}else{r19=HEAP32[r1+52>>2];r35=HEAP32[r1+44>>2];r22=r1+36|0;r23=HEAP32[r22>>2];HEAP16[r7>>1]=r19;L94:do{if((_fwrite(r7,2,1,r18)|0)==1){if((r19|0)==(HEAP32[HEAP32[r1+20>>2]+20>>2]|0)){if((_fwrite(r23,2,r19,r18)|0)==(r19|0)){r54=r22;break L91}else{break}}if((_fwrite(r35,1,r19,r18)|0)==(r19|0)){r55=0;r56=0}else{break}while(1){if((r55|0)>=(r19|0)){r54=r22;break L91}r21=r56+HEAPU8[r35+r55|0]|0;if((_fwrite(r23+(r21<<1)|0,2,1,r18)|0)!=1){break L94}r55=r55+1|0;r56=r21}}}while(0);r23=___errno_location();r35=HEAP32[r23>>2];r23=_malloc(42);_memcpy(r23,35312,37)|0;r22=r23+_strlen(r23)|0;HEAP8[r22]=HEAP8[6400];HEAP8[r22+1|0]=HEAP8[6401];HEAP8[r22+2|0]=HEAP8[6402];HEAP8[r22+3|0]=HEAP8[6403];HEAP8[r22+4|0]=HEAP8[6404];HEAP8[r22+5|0]=HEAP8[6405];r22=_strerror(r35);_err_msg(4,44200,944,r23,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r22,r4));STACKTOP=r4;_free(r23);r11=0;STACKTOP=r5;return r11}}while(0);r11=HEAP32[r54>>2];STACKTOP=r5;return r11}}while(0);_err_msg(4,44200,1070,32896,(r4=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r4>>2]=r9,HEAP32[r4+8>>2]=r14,HEAP32[r4+16>>2]=r12,HEAP32[r4+24>>2]=r17-r9,HEAP32[r4+32>>2]=r15,r4));STACKTOP=r4;r11=0;STACKTOP=r5;return r11}function _acmod_activate_hmm(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;if((HEAP8[r1+89|0]|0)!=0){return}r3=r2+77|0;r4=HEAP8[r3];r5=r4&255;if((HEAP8[r2+76|0]|0)==0){if((r5|0)==3){r6=r1+40|0}else if((r5|0)==5){r7=HEAPU16[r2+62>>1];r8=r1+40|0;r9=HEAP32[r8>>2]+(r7>>>5<<2)|0;HEAP32[r9>>2]=HEAP32[r9>>2]|1<<(r7&31);r7=HEAPU16[r2+60>>1];r9=HEAP32[r8>>2]+(r7>>>5<<2)|0;HEAP32[r9>>2]=HEAP32[r9>>2]|1<<(r7&31);r6=r8}else{r8=r1+40|0;r7=0;r9=r4;while(1){if((r7|0)>=(r9&255|0)){break}r10=HEAPU16[r2+54+(r7<<1)>>1];r11=HEAP32[r8>>2]+(r10>>>5<<2)|0;HEAP32[r11>>2]=HEAP32[r11>>2]|1<<(r10&31);r7=r7+1|0;r9=HEAP8[r3]}return}r9=HEAPU16[r2+58>>1];r7=HEAP32[r6>>2]+(r9>>>5<<2)|0;HEAP32[r7>>2]=HEAP32[r7>>2]|1<<(r9&31);r9=HEAPU16[r2+56>>1];r7=HEAP32[r6>>2]+(r9>>>5<<2)|0;HEAP32[r7>>2]=HEAP32[r7>>2]|1<<(r9&31);r9=HEAPU16[r2+54>>1];r7=HEAP32[r6>>2]+(r9>>>5<<2)|0;HEAP32[r7>>2]=HEAP32[r7>>2]|1<<(r9&31);return}do{if((r5|0)==5){r9=HEAP16[r2+62>>1];if(r9<<16>>16!=-1){r7=HEAP32[r1+40>>2]+(HEAPU16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r9&65535)<<2)>>2]+8>>1]>>>5<<2)|0;HEAP32[r7>>2]=HEAP32[r7>>2]|1<<(HEAP16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r9&65535)<<2)>>2]+8>>1]&31)}r9=HEAP16[r2+60>>1];if(r9<<16>>16==-1){break}r7=HEAP32[r1+40>>2]+(HEAPU16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r9&65535)<<2)>>2]+6>>1]>>>5<<2)|0;HEAP32[r7>>2]=HEAP32[r7>>2]|1<<(HEAP16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r9&65535)<<2)>>2]+6>>1]&31)}else if((r5|0)!=3){r9=r1+40|0;r7=r2|0;r6=0;r8=r4;while(1){if((r6|0)>=(r8&255|0)){break}r10=HEAP16[r2+54+(r6<<1)>>1];if(r10<<16>>16==-1){r12=r8}else{r11=HEAP32[r9>>2]+(HEAPU16[HEAP32[HEAP32[HEAP32[r7>>2]+12>>2]+((r10&65535)<<2)>>2]+(r6<<1)>>1]>>>5<<2)|0;HEAP32[r11>>2]=HEAP32[r11>>2]|1<<(HEAP16[HEAP32[HEAP32[HEAP32[r7>>2]+12>>2]+((r10&65535)<<2)>>2]+(r6<<1)>>1]&31);r12=HEAP8[r3]}r6=r6+1|0;r8=r12}return}}while(0);r12=HEAP16[r2+58>>1];if(r12<<16>>16!=-1){r3=HEAP32[r1+40>>2]+(HEAPU16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r12&65535)<<2)>>2]+4>>1]>>>5<<2)|0;HEAP32[r3>>2]=HEAP32[r3>>2]|1<<(HEAP16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r12&65535)<<2)>>2]+4>>1]&31)}r12=HEAP16[r2+56>>1];if(r12<<16>>16!=-1){r3=HEAP32[r1+40>>2]+(HEAPU16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r12&65535)<<2)>>2]+2>>1]>>>5<<2)|0;HEAP32[r3>>2]=HEAP32[r3>>2]|1<<(HEAP16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r12&65535)<<2)>>2]+2>>1]&31)}r12=HEAP16[r2+54>>1];if(r12<<16>>16==-1){return}r3=HEAP32[r1+40>>2]+(HEAPU16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r12&65535)<<2)>>2]>>1]>>>5<<2)|0;HEAP32[r3>>2]=HEAP32[r3>>2]|1<<(HEAP16[HEAP32[HEAP32[HEAP32[r2>>2]+12>>2]+((r12&65535)<<2)>>2]>>1]&31);return}function _bin_mdef_read_text(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+3144|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r4+32;r10=r4+40;r11=r4+48;r12=r4+56;r13=r4+1080;r14=r4+1088;r15=r4+2120;r16=r4+1096|0;r17=r15|0;if((r1|0)==0){_err_msg(5,39104,514,43792,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}_err_msg(1,39104,517,42376,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r1,r3));STACKTOP=r3;r18=_malloc(60);if((r18|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=60,HEAP32[r3+16>>2]=39104,HEAP32[r3+24>>2]=519,r3));STACKTOP=r3}if((HEAP32[r18-4>>2]&3|0)!=0){_memset(r18,0,60)|0}r19=r18;r20=_fopen(r1,26184);if((r20|0)==0){r21=___errno_location();r22=HEAP32[r21>>2];r21=_malloc(47);_memcpy(r21,39968,42)|0;r23=r21+_strlen(r21)|0;HEAP8[r23]=HEAP8[6400];HEAP8[r23+1|0]=HEAP8[6401];HEAP8[r23+2|0]=HEAP8[6402];HEAP8[r23+3|0]=HEAP8[6403];HEAP8[r23+4|0]=HEAP8[6404];HEAP8[r23+5|0]=HEAP8[6405];r23=_strerror(r22);_err_msg(5,39104,522,r21,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r1,HEAP32[r3+8>>2]=r23,r3));STACKTOP=r3;_free(r21);_exit(r22)}while(1){if((_fgets(r17,1024,r20)|0)==0){r2=11;break}r24=HEAP8[r17];if(r24<<24>>24!=35){break}}if(r2==11){_err_msg(5,39104,525,37400,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r1,r3));STACKTOP=r3;_exit(1)}r22=r24<<24>>24==0;L18:do{if(r22){r25=36056;r26=0}else{r21=r17;r23=36056;r27=4;r28=r24;while(1){r29=r27-1|0;r30=HEAP8[r23];if(!((r29|0)!=0&r30<<24>>24!=0&r28<<24>>24==r30<<24>>24)){r25=r23;r26=r28;break L18}r30=r21+1|0;r31=r23+1|0;r32=HEAP8[r30];if(r32<<24>>24==0){r25=r31;r26=0;break}else{r21=r30;r23=r31;r27=r29;r28=r32}}}}while(0);do{if(r26<<24>>24==(HEAP8[r25]|0)){r2=20}else{L25:do{if(r22){r33=35176;r34=0}else{r28=r17;r27=35176;r23=4;r21=r24;while(1){r32=r23-1|0;r29=HEAP8[r27];if(!((r32|0)!=0&r29<<24>>24!=0&r21<<24>>24==r29<<24>>24)){r33=r27;r34=r21;break L25}r29=r28+1|0;r31=r27+1|0;r30=HEAP8[r29];if(r30<<24>>24==0){r33=r31;r34=0;break}else{r28=r29;r27=r31;r23=r32;r21=r30}}}}while(0);if(r34<<24>>24==(HEAP8[r33]|0)){r2=20;break}L31:do{if(r22){r35=32552;r36=0}else{r21=r17;r23=32552;r27=3;r28=r24;while(1){r30=r27-1|0;r32=HEAP8[r23];if(!((r30|0)!=0&r32<<24>>24!=0&r28<<24>>24==r32<<24>>24)){r35=r23;r36=r28;break L31}r32=r21+1|0;r31=r23+1|0;r29=HEAP8[r32];if(r29<<24>>24==0){r35=r31;r36=0;break}else{r21=r32;r23=r31;r27=r30;r28=r29}}}}while(0);if(r36<<24>>24!=(HEAP8[r35]|0)){_err_msg(5,39104,537,31352,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=32552,HEAP32[r3+8>>2]=r17,r3));STACKTOP=r3;_exit(1)}r28=r18+12|0;HEAP32[r28>>2]=-1;r27=r18+16|0;HEAP32[r27>>2]=-1;r23=r18+20|0;HEAP32[r23>>2]=-1;r21=-1;r29=-1;r30=-1;L39:while(1){while(1){if((_fgets(r17,1024,r20)|0)==0){r2=30;break L39}if((HEAP8[r17]|0)!=35){break}}r31=_sscanf(r17,29936,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r14,HEAP32[r3+8>>2]=r16,r3));STACKTOP=r3;if((r31|0)!=2){r2=33;break}r31=HEAP32[r14>>2];if((r31|0)<0){r2=33;break}r32=(HEAP8[r16]|0)==110;if(r32){r37=r16;r38=28288}else{r2=55;break}while(1){r39=r37+1|0;r40=r38+1|0;r41=HEAP8[r39];r42=HEAP8[r40];if(r41<<24>>24!=r42<<24>>24|r41<<24>>24==0|r42<<24>>24==0){break}else{r37=r39;r38=r40}}do{if(r41<<24>>24==r42<<24>>24){r43=r31;r44=r29;r45=r30}else{if(r32){r46=r16;r47=27032}else{r2=55;break L39}while(1){r40=r46+1|0;r39=r47+1|0;r48=HEAP8[r40];r49=HEAP8[r39];if(r48<<24>>24!=r49<<24>>24|r48<<24>>24==0|r49<<24>>24==0){break}else{r46=r40;r47=r39}}if(r48<<24>>24==r49<<24>>24){r43=r21;r44=r29;r45=r31;break}if(r32){r50=r16;r51=26160}else{r2=55;break L39}while(1){r39=r50+1|0;r40=r51+1|0;r52=HEAP8[r39];r53=HEAP8[r40];if(r52<<24>>24!=r53<<24>>24|r52<<24>>24==0|r53<<24>>24==0){break}else{r50=r39;r51=r40}}if(r52<<24>>24==r53<<24>>24){r43=r21;r44=r31;r45=r30;break}if(r32){r54=r16;r55=25112}else{r2=55;break L39}while(1){r40=r54+1|0;r39=r55+1|0;r56=HEAP8[r40];r57=HEAP8[r39];if(r56<<24>>24!=r57<<24>>24|r56<<24>>24==0|r57<<24>>24==0){break}else{r54=r40;r55=r39}}if(r56<<24>>24==r57<<24>>24){HEAP32[r28>>2]=r31;r43=r21;r44=r29;r45=r30;break}if(r32){r58=r16;r59=23984}else{r2=55;break L39}while(1){r39=r58+1|0;r40=r59+1|0;r60=HEAP8[r39];r61=HEAP8[r40];if(r60<<24>>24!=r61<<24>>24|r60<<24>>24==0|r61<<24>>24==0){break}else{r58=r39;r59=r40}}if(r60<<24>>24==r61<<24>>24){HEAP32[r27>>2]=r31;r43=r21;r44=r29;r45=r30;break}if(r32){r62=r16;r63=22712}else{r2=55;break L39}while(1){r40=r62+1|0;r39=r63+1|0;r64=HEAP8[r40];r65=HEAP8[r39];if(r64<<24>>24!=r65<<24>>24|r64<<24>>24==0|r65<<24>>24==0){break}else{r62=r40;r63=r39}}if(r64<<24>>24!=r65<<24>>24){r2=55;break L39}HEAP32[r23>>2]=r31;r43=r21;r44=r29;r45=r30}}while(0);if((r43|0)<0|(r45|0)<0|(r44|0)<0){r21=r43;r29=r44;r30=r45;continue}r66=HEAP32[r28>>2];if((r66|0)<0){r21=r43;r29=r44;r30=r45;continue}r67=HEAP32[r27>>2];if((r67|0)<0){r21=r43;r29=r44;r30=r45;continue}r68=HEAP32[r23>>2];if((r68|0)<0){r21=r43;r29=r44;r30=r45}else{r2=60;break}}if(r2==30){_err_msg(5,39104,548,30552,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}else if(r2==33){_err_msg(5,39104,551,28928,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==55){_err_msg(5,39104,566,22176,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==60){if((r43|0)==0|(r66|0)==0|(r68|0)==0|(r66|0)>(r67|0)){_err_msg(5,39104,572,21696,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r1,r3));STACKTOP=r3;_exit(1)}if((r43|0)>32766){_err_msg(5,39104,577,21224,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r1,HEAP32[r3+8>>2]=r43,HEAP32[r3+16>>2]=32767,r3));STACKTOP=r3;_exit(1)}r30=r43+r45|0;if((r30|0)==2147483647){_err_msg(5,39104,580,20760,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r1,HEAP32[r3+8>>2]=2147483647,HEAP32[r3+16>>2]=2147483647,r3));STACKTOP=r3;_exit(1)}if((r67|0)>32766){_err_msg(5,39104,583,20216,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r1,HEAP32[r3+8>>2]=r67,HEAP32[r3+16>>2]=32767,r3));STACKTOP=r3;_exit(1)}if((r68|0)==2147483647){_err_msg(5,39104,586,19792,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r1,HEAP32[r3+8>>2]=2147483647,HEAP32[r3+16>>2]=2147483647,r3));STACKTOP=r3;_exit(1)}r29=(r44|0)/(r30|0)&-1;r21=r18+8|0;HEAP32[r21>>2]=r29-1;if((Math_imul(r29,r30)|0)!=(r44|0)){_err_msg(5,39104,591,19216,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_exit(1)}r29=r18;HEAP32[r29>>2]=r43;r23=_hash_table_new(r43,0);r31=r18+24|0;HEAP32[r31>>2]=r23;r23=___ckd_calloc__(r43,8,39104,596);r32=r18+28|0;HEAP32[r32>>2]=r23;r23=r18+4|0;HEAP32[r23>>2]=r30;r39=___ckd_calloc__(r30,20,39104,600);r30=r18+32|0;HEAP32[r30>>2]=r39;r39=___ckd_calloc_2d__(HEAP32[r23>>2],HEAP32[r21>>2],2,39104,603);r40=r18+36|0;HEAP32[r40>>2]=r39;r39=___ckd_calloc_2d__(4,HEAP32[r29>>2],4,39104,607);HEAP32[r18+56>>2]=r39;r39=r12|0;r69=r15;r70=0;L100:while(1){if((r70|0)>=(r43|0)){r2=104;break}while(1){if((_fgets(r17,1024,r20)|0)==0){r2=76;break L100}if((HEAP8[r17]|0)!=35){break}}r71=_sscanf(r17,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r11,r3));STACKTOP=r3;if((r71|0)!=1){r2=78;break}r71=r15+HEAP32[r11>>2]|0;if((_hash_table_lookup(HEAP32[r31>>2],r39,r10)|0)==0){if((HEAP32[r10>>2]|0)>-1){r2=81;break}}if((HEAP32[r29>>2]|0)<=(r70|0)){r2=83;break}r72=___ckd_salloc__(r39,39104,106);HEAP32[HEAP32[r32>>2]+(r70<<3)>>2]=r72;r72=HEAP32[r31>>2];r73=HEAP32[HEAP32[r32>>2]+(r70<<3)>>2];r74=r70;r75=_key2hash(r72,r73);if((_enter(r72,r75,r73,_strlen(r73),r74,0)|0)==(r74|0)){r76=0;r77=r71}else{r2=85;break}while(1){r71=_sscanf(r77,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r11,r3));STACKTOP=r3;r78=(r71|0)==1;if((r76|0)>=3){break}if(r78&(HEAP8[r39]|0)==45){r79=r39;r80=9128}else{r2=90;break L100}while(1){r71=r79+1|0;r74=r80+1|0;r81=HEAP8[r71];r82=HEAP8[r74];if(r81<<24>>24!=r82<<24>>24|r81<<24>>24==0|r82<<24>>24==0){break}else{r79=r71;r80=r74}}if(r81<<24>>24!=r82<<24>>24){r2=90;break L100}r76=r76+1|0;r77=r77+HEAP32[r11>>2]|0}if(!r78){r2=93;break}r74=r77+HEAP32[r11>>2]|0;r71=HEAP8[r39];do{if(r71<<24>>24==102){r73=r39;r75=12824;while(1){r72=r73+1|0;r83=r75+1|0;r84=HEAP8[r72];r85=HEAP8[r83];if(r84<<24>>24!=r85<<24>>24|r84<<24>>24==0|r85<<24>>24==0){break}else{r73=r72;r75=r83}}if(r84<<24>>24==r85<<24>>24){HEAP32[HEAP32[r32>>2]+(r70<<3)+4>>2]=1;break}else{if(r71<<24>>24==110){r86=r39;r87=12624;r2=99;break}else{r2=102;break L100}}}else if(r71<<24>>24==110){r86=r39;r87=12624;r2=99}else{r2=102;break L100}}while(0);if(r2==99){while(1){r2=0;r71=r86+1|0;r75=r87+1|0;r88=HEAP8[r71];r89=HEAP8[r75];if(r88<<24>>24!=r89<<24>>24|r88<<24>>24==0|r89<<24>>24==0){break}else{r86=r71;r87=r75;r2=99}}if(r88<<24>>24!=r89<<24>>24){r2=102;break}HEAP32[HEAP32[r32>>2]+(r70<<3)+4>>2]=0}_triphone_add(r19,r70,-1,-1,4,r70);_parse_tmat_senmap(r19,r17,r74-r69|0,r70);r70=r70+1|0}if(r2==76){_err_msg(5,39104,617,18816,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r70,r3));STACKTOP=r3;_exit(1)}else if(r2==78){_err_msg(5,39104,328,15456,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==81){_err_msg(5,39104,334,9224,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==83){___assert_fail(8808,39104,104,51264)}else if(r2==85){_err_msg(5,39104,110,8640,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[HEAP32[r32>>2]+(r70<<3)>>2],r3));STACKTOP=r3;_exit(1)}else if(r2==90){_err_msg(5,39104,344,9e3,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==93){_err_msg(5,39104,350,8888,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==102){_err_msg(5,39104,357,12088,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==104){r69=_hash_table_lookup(HEAP32[r31>>2],18312,r9);if((r69|0)==0){r90=HEAP32[r9>>2]&65535;r2=107}else{if((r69|0)<0){r91=-1}else{r90=0;r2=107}}if(r2==107){r91=r90}HEAP16[r18+52>>1]=r91;r69=r12+1|0;r75=r70;L151:while(1){if((r75|0)>=(HEAP32[r23>>2]|0)){r2=151;break}while(1){if((_fgets(r17,1024,r20)|0)==0){r2=112;break L151}if((HEAP8[r17]|0)!=35){break}}r74=_sscanf(r17,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r8,r3));STACKTOP=r3;if((r74|0)!=1){r2=114;break}r74=HEAP32[r8>>2];r71=r15+r74|0;r73=_hash_table_lookup(HEAP32[r31>>2],r39,r7);if((r73|0)==0){r83=HEAP32[r7>>2];if((r83|0)<0){r2=118;break}else{r92=r83}}else{if((r73|0)<0){r2=118;break}else{r92=0}}r73=_sscanf(r71,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r8,r3));STACKTOP=r3;if((r73|0)!=1){r2=120;break}r73=r74+HEAP32[r8>>2]|0;r74=r15+r73|0;r71=_hash_table_lookup(HEAP32[r31>>2],r39,r6);if((r71|0)==0){r83=HEAP32[r6>>2];if((r83|0)<0){r2=124;break}else{r93=r83}}else{if((r71|0)<0){r2=124;break}else{r93=0}}r71=_sscanf(r74,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r8,r3));STACKTOP=r3;if((r71|0)!=1){r2=126;break}r71=r73+HEAP32[r8>>2]|0;r73=r15+r71|0;r74=_hash_table_lookup(HEAP32[r31>>2],r39,r5);if((r74|0)==0){r83=HEAP32[r5>>2];if((r83|0)<0){r2=130;break}else{r94=r83}}else{if((r74|0)<0){r2=130;break}else{r94=0}}r74=_sscanf(r73,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r8,r3));STACKTOP=r3;if((r74|0)!=1){r2=133;break}if((HEAP8[r69]|0)!=0){r2=133;break}r74=r71+HEAP32[r8>>2]|0;r71=r15+r74|0;r73=HEAP8[r39]|0;if((r73|0)==101){r95=2}else if((r73|0)==115){r95=3}else if((r73|0)==105){r95=0}else if((r73|0)==98){r95=1}else{r2=138;break}r73=_sscanf(r71,9440,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r39,HEAP32[r3+8>>2]=r8,r3));STACKTOP=r3;if((r73|0)!=1){r2=140;break}r73=HEAP32[r8>>2];r71=HEAP8[r39];do{if(r71<<24>>24==102){r83=r39;r72=12824;while(1){r96=r83+1|0;r97=r72+1|0;r98=HEAP8[r96];r99=HEAP8[r97];if(r98<<24>>24!=r99<<24>>24|r98<<24>>24==0|r99<<24>>24==0){break}else{r83=r96;r72=r97}}if(r98<<24>>24==r99<<24>>24){if((HEAP32[HEAP32[r32>>2]+(r92<<3)+4>>2]|0)!=0){break}}if(r71<<24>>24==110){r100=r39;r101=12624;r2=146}else{r2=149;break L151}}else if(r71<<24>>24==110){r100=r39;r101=12624;r2=146}else{r2=149;break L151}}while(0);if(r2==146){while(1){r2=0;r71=r100+1|0;r72=r101+1|0;r102=HEAP8[r71];r103=HEAP8[r72];if(r102<<24>>24!=r103<<24>>24|r102<<24>>24==0|r103<<24>>24==0){break}else{r100=r71;r101=r72;r2=146}}if(r102<<24>>24!=r103<<24>>24){r2=149;break}if((HEAP32[HEAP32[r32>>2]+(r92<<3)+4>>2]|0)!=0){r2=149;break}}_triphone_add(r19,r92,r93,r94,r95,r75);_parse_tmat_senmap(r19,r17,r74+r73|0,r75);r75=r75+1|0}if(r2==112){_err_msg(5,39104,625,17416,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r75,r3));STACKTOP=r3;_exit(1)}else if(r2==114){_err_msg(5,39104,378,15456,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==118){_err_msg(5,39104,383,15024,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==120){_err_msg(5,39104,387,14440,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==124){_err_msg(5,39104,391,14176,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==126){_err_msg(5,39104,395,13864,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==130){_err_msg(5,39104,399,13696,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==133){_err_msg(5,39104,403,13464,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==138){_err_msg(5,39104,419,13272,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==140){_err_msg(5,39104,424,12992,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==149){_err_msg(5,39104,431,12088,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_exit(1)}else if(r2==151){while(1){r2=0;if((_fgets(r17,1024,r20)|0)==0){break}if((HEAP8[r17]|0)==35){r2=151}else{r2=153;break}}if(r2==153){_err_msg(4,39104,631,17152,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[r23>>2],r3));STACKTOP=r3}r75=HEAP32[r29>>2];r32=HEAP32[r21>>2];r39=Math_imul(r75,r32)|0;r69=HEAP32[r28>>2];if((r39|0)!=(r69|0)){_err_msg(5,39104,637,16856,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r69,HEAP32[r3+8>>2]=r75,HEAP32[r3+16>>2]=r32,r3));STACKTOP=r3;_exit(1)}r32=___ckd_calloc__(HEAP32[r27>>2],2,39104,638);r75=r18+44|0;HEAP32[r75>>2]=r32;r32=___ckd_calloc__(HEAP32[r27>>2],2,39104,640);r69=r18+48|0;HEAP32[r69>>2]=r32;r32=0;while(1){if((r32|0)>=(HEAP32[r27>>2]|0)){r104=0;break}HEAP16[HEAP32[r69>>2]+(r32<<1)>>1]=-1;r32=r32+1|0}while(1){if((r104|0)>=(HEAP32[r28>>2]|0)){r105=r43;break}HEAP16[HEAP32[r75>>2]+(r104<<1)>>1]=r104;HEAP16[HEAP32[r69>>2]+(r104<<1)>>1]=(r104|0)/(HEAP32[r21>>2]|0)&-1;r104=r104+1|0}while(1){r106=HEAP32[r23>>2];if((r105|0)<(r106|0)){r107=0}else{break}while(1){if((r107|0)>=(HEAP32[r21>>2]|0)){break}r28=HEAP32[r40>>2];r32=HEAPU16[HEAP32[r28+(r105<<2)>>2]+(r107<<1)>>1];HEAP16[HEAP32[r75>>2]+(r32<<1)>>1]=HEAP16[HEAP32[r28+(HEAP16[HEAP32[r30>>2]+(r105*20&-1)+8>>1]<<2)>>2]+(r107<<1)>>1];HEAP16[HEAP32[r69>>2]+(r32<<1)>>1]=HEAP16[HEAP32[r30>>2]+(r105*20&-1)+8>>1];r107=r107+1|0}r105=r105+1|0}r69=HEAP32[r21>>2]<<1;r75=_hash_table_new(r106,0);r73=0;r74=0;while(1){if((r73|0)>=(HEAP32[r23>>2]|0)){break}r32=HEAP32[HEAP32[r40>>2]+(r73<<2)>>2];r28=_makekey(r32,r69);r27=_key2hash(r75,r28);_free(r28);r28=_enter(r75,r27,r32,r69,r74,0);HEAP32[r13>>2]=r28;HEAP32[HEAP32[r30>>2]+(r73*20&-1)>>2]=r28;r73=r73+1|0;r74=(r74|0)==(r28|0)?r74+1|0:r74}r73=___ckd_calloc_2d__(r74,HEAP32[r21>>2],2,39104,467);r30=_hash_table_tolist(r75,r13);if((HEAP32[r13>>2]|0)==(r74|0)){r108=r30}else{___assert_fail(15800,39104,470,49768)}while(1){if((r108|0)==0){r109=r30;break}r23=HEAP32[r108>>2];r28=HEAP32[r23+8>>2];HEAP32[r13>>2]=r28;_memcpy(HEAP32[r73+(r28<<2)>>2],HEAP32[r23>>2],r69)|0;r108=HEAP32[r108+8>>2]}while(1){if((r109|0)==0){break}r69=HEAP32[r109+8>>2];_free(r109);r109=r69}r69=HEAP32[r40>>2];if((r69|0)!=0){_free(HEAP32[r69>>2])}_free(r69);HEAP32[r40>>2]=r73;HEAP32[r18+40>>2]=r74;_hash_table_free(r75);_fclose(r20);r110=r19;break}}}}}while(0);if(r2==20){_err_msg(1,39104,530,34104,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r17,r3));STACKTOP=r3;_fclose(r20);_free(r18);r110=0}if((r110|0)==0){r111=0;STACKTOP=r4;return r111}r18=r110+16|0;r20=HEAP32[r18>>2];if((r20|0)>65535){_err_msg(4,16208,79,42472,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r20,HEAP32[r3+8>>2]=65535,r3));STACKTOP=r3;_mdef_free(r110);r111=0;STACKTOP=r4;return r111}r20=r110+40|0;r17=HEAP32[r20>>2];if((r17|0)>65535){_err_msg(4,16208,85,30576,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r17,HEAP32[r3+8>>2]=65535,r3));STACKTOP=r3;_mdef_free(r110);r111=0;STACKTOP=r4;return r111}r17=r110|0;r19=HEAP32[r17>>2];if((r19|0)>255){_err_msg(4,16208,92,21720,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r19,HEAP32[r3+8>>2]=255,r3));STACKTOP=r3;_mdef_free(r110);r111=0;STACKTOP=r4;return r111}r19=_malloc(80);if((r19|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=80,HEAP32[r3+16>>2]=16208,HEAP32[r3+24>>2]=97,r3));STACKTOP=r3}if((HEAP32[r19-4>>2]&3|0)!=0){_memset(r19,0,80)|0}r109=r19;HEAP32[r19>>2]=1;r108=r19+4|0;HEAP32[r108>>2]=HEAP32[r17>>2];r13=r110+4|0;r106=r19+8|0;HEAP32[r106>>2]=HEAP32[r13>>2];HEAP32[r19+12>>2]=HEAP32[r110+8>>2];HEAP32[r19+16>>2]=HEAP32[r110+12>>2];HEAP32[r19+20>>2]=HEAP32[r18>>2];HEAP32[r19+24>>2]=HEAP32[r110+20>>2];HEAP32[r19+28>>2]=HEAP32[r20>>2];r20=r110+36|0;HEAP32[r19+60>>2]=HEAP32[r20>>2];r18=r110+44|0;HEAP32[r19+68>>2]=HEAP32[r18>>2];r105=r110+48|0;HEAP32[r19+72>>2]=HEAP32[r105>>2];HEAP32[r19+32>>2]=3;HEAP16[r19+40>>1]=HEAP16[r110+52>>1];HEAP32[r20>>2]=0;HEAP32[r18>>2]=0;HEAP32[r105>>2]=0;r105=___ckd_calloc__(HEAP32[r108>>2],4,16208,120);r18=r19+48|0;HEAP32[r18>>2]=r105;r105=HEAP32[r108>>2];r20=r110+28|0;r107=0;r104=0;while(1){if((r107|0)>=(r105|0)){break}r43=r104+(_strlen(HEAP32[HEAP32[r20>>2]+(r107<<3)>>2])+1)|0;r107=r107+1|0;r104=r43}r107=___ckd_calloc__(r104,1,16208,124);HEAP32[HEAP32[r18>>2]>>2]=r107;_strcpy(HEAP32[HEAP32[r18>>2]>>2],HEAP32[HEAP32[r20>>2]>>2]);r107=1;while(1){if((r107|0)>=(HEAP32[r108>>2]|0)){break}r104=r107-1|0;r105=HEAP32[r18>>2];r43=HEAP32[r105+(r104<<2)>>2];r95=r43+(_strlen(r43)+1)|0;HEAP32[r105+(r107<<2)>>2]=r95;_strcpy(HEAP32[HEAP32[r18>>2]+(r107<<2)>>2],HEAP32[HEAP32[r20>>2]+(r107<<3)>>2]);if((r107|0)>0){r95=HEAP32[r18>>2];r105=HEAP32[r95+(r104<<2)>>2];r104=HEAP32[r95+(r107<<2)>>2];r95=HEAP8[r105];r43=HEAP8[r104];if(r95<<24>>24!=r43<<24>>24|r95<<24>>24==0|r43<<24>>24==0){r112=r95;r113=r43}else{r43=r105;r105=r104;while(1){r104=r43+1|0;r95=r105+1|0;r94=HEAP8[r104];r93=HEAP8[r95];if(r94<<24>>24!=r93<<24>>24|r94<<24>>24==0|r93<<24>>24==0){r112=r94;r113=r93;break}else{r43=r104;r105=r95}}}if(((r112&255)-(r113&255)|0)>0){r2=197;break}}r107=r107+1|0}if(r2==197){_err_msg(4,16208,132,16920,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;_bin_mdef_free(r109);r111=0;STACKTOP=r4;return r111}r2=___ckd_calloc__(HEAP32[r106>>2],12,16208,139);r106=r19+56|0;HEAP32[r106>>2]=r2;r2=r110+32|0;r107=0;while(1){if((r107|0)>=(HEAP32[r13>>2]|0)){break}r113=HEAP32[r106>>2]+(r107*12&-1)|0;tempBigInt=HEAP32[HEAP32[r2>>2]+(r107*20&-1)>>2];HEAP8[r113]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r113+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r113+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r113+3|0]=tempBigInt;r113=HEAP32[r106>>2]+(r107*12&-1)+4|0;tempBigInt=HEAP32[HEAP32[r2>>2]+(r107*20&-1)+4>>2];HEAP8[r113]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r113+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r113+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r113+3|0]=tempBigInt;if((r107|0)<(HEAP32[r108>>2]|0)){HEAP8[HEAP32[r106>>2]+(r107*12&-1)+8|0]=HEAP32[HEAP32[r20>>2]+(r107<<3)+4>>2]}else{HEAP8[HEAP32[r106>>2]+(r107*12&-1)+8|0]=HEAP32[HEAP32[r2>>2]+(r107*20&-1)+16>>2];HEAP8[HEAP32[r106>>2]+(r107*12&-1)+9|0]=HEAP16[HEAP32[r2>>2]+(r107*20&-1)+8>>1];HEAP8[HEAP32[r106>>2]+(r107*12&-1)+10|0]=HEAP16[HEAP32[r2>>2]+(r107*20&-1)+10>>1];HEAP8[HEAP32[r106>>2]+(r107*12&-1)+11|0]=HEAP16[HEAP32[r2>>2]+(r107*20&-1)+12>>1]}r107=r107+1|0}r107=r110+56|0;r2=0;r106=0;r20=0;r108=0;r13=0;while(1){if((r2|0)>=4){break}r113=HEAP32[r17>>2];r112=0;r18=r106;r105=r20;r43=r13;while(1){if((r112|0)>=(r113|0)){break}r75=HEAP32[HEAP32[r107>>2]+(r2<<2)>>2]+(r112<<2)|0;r74=r18;r73=r43;while(1){r40=HEAP32[r75>>2];if((r40|0)==0){break}r95=r40+4|0;r104=r73;while(1){r93=HEAP32[r95>>2];r114=r104+1|0;if((r93|0)==0){break}r95=r93+8|0;r104=r114}r75=r40+8|0;r74=r74+1|0;r73=r114}r112=r112+1|0;r18=r74+1|0;r105=r105+1|0;r43=r73+1|0}r2=r2+1|0;r106=r18+1|0;r20=r105+1|0;r108=r108+1|0;r13=r43+1|0}_err_msg(1,16208,181,13896,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r13,HEAP32[r3+8>>2]=8,HEAP32[r3+16>>2]=r13>>>7&4194303,r3));STACKTOP=r3;HEAP32[r19+36>>2]=r13;r3=___ckd_calloc__(r13,8,16208,183);r13=r19+52|0;HEAP32[r13>>2]=r3;r3=0;r2=r106;r106=r20;r20=r108;while(1){if((r3|0)>=4){break}HEAP16[HEAP32[r13>>2]+(r3<<3)>>1]=r3;HEAP16[HEAP32[r13>>2]+(r3<<3)+2>>1]=HEAP32[r17>>2];HEAP32[HEAP32[r13>>2]+(r3<<3)+4>>2]=r20;r108=0;r114=r2;r112=r106;r113=r20;while(1){if((r108|0)>=(HEAP32[r17>>2]|0)){break}HEAP16[HEAP32[r13>>2]+(r113<<3)>>1]=r108;HEAP32[HEAP32[r13>>2]+(r113<<3)+4>>2]=r112;r75=HEAP32[HEAP32[r107>>2]+(r3<<2)>>2]+(r108<<2)|0;r104=r114;r95=r112;while(1){r93=HEAP32[r75>>2];if((r93|0)==0){break}HEAP16[HEAP32[r13>>2]+(r95<<3)>>1]=HEAP16[r93>>1];HEAP32[HEAP32[r13>>2]+(r95<<3)+4>>2]=r104;r94=r93+4|0;r92=r104;while(1){r103=HEAP32[r94>>2];if((r103|0)==0){break}HEAP16[HEAP32[r13>>2]+(r92<<3)>>1]=HEAP16[r103>>1];HEAP16[HEAP32[r13>>2]+(r92<<3)+2>>1]=0;HEAP32[HEAP32[r13>>2]+(r92<<3)+4>>2]=HEAP32[r103+4>>2];r102=HEAP32[r13>>2]+(r95<<3)+2|0;HEAP16[r102>>1]=HEAP16[r102>>1]+1;r94=r103+8|0;r92=r92+1|0}r94=HEAP32[r13>>2];if((HEAP16[r94+(r95<<3)+2>>1]|0)==0){HEAP32[r94+(r95<<3)+4>>2]=-1;r115=HEAP32[r13>>2]}else{r115=r94}r94=r115+(r113<<3)+2|0;HEAP16[r94>>1]=HEAP16[r94>>1]+1;r75=r93+8|0;r104=r92;r95=r95+1|0}r75=HEAP32[r13>>2];if((HEAP16[r75+(r113<<3)+2>>1]|0)==0){HEAP32[r75+(r113<<3)+4>>2]=-1}r108=r108+1|0;r114=r104;r112=r95;r113=r113+1|0}r3=r3+1|0;r2=r114;r106=r112;r20=r113}_mdef_free(r110);HEAP32[r19+76>>2]=0;r111=r109;STACKTOP=r4;return r111}function _bin_mdef_free(r1){var r2,r3;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=HEAP32[r1+76>>2];if((r3|0)==1){_free(HEAP32[HEAP32[r1+48>>2]>>2])}else if((r3|0)==0){_free(HEAP32[HEAP32[r1+48>>2]>>2]);_free(HEAP32[HEAP32[r1+60>>2]>>2]);_free(HEAP32[r1+56>>2]);_free(HEAP32[r1+52>>2])}r3=HEAP32[r1+44>>2];if((r3|0)!=0){_mmio_file_unmap(r3)}_free(HEAP32[r1+68>>2]);_free(HEAP32[r1+72>>2]);_free(HEAP32[r1+48>>2]);_free(HEAP32[r1+60>>2]);_free(r1);return}function _bin_mdef_ciphone_id(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;r3=0;r4=r1+48|0;r5=0;r6=HEAP32[r1+4>>2];L1:while(1){r1=r5;while(1){r7=(r1|0)<(r6|0);r8=(r1+r6|0)/2&-1;while(1){if(!r7){r9=-1;r3=11;break L1}r10=HEAP32[HEAP32[r4>>2]+(r8<<2)>>2];r11=HEAP8[r2];r12=HEAP8[r10];if(r11<<24>>24!=r12<<24>>24|r11<<24>>24==0|r12<<24>>24==0){r13=r11;r14=r12}else{r12=r2;r11=r10;while(1){r10=r12+1|0;r15=r11+1|0;r16=HEAP8[r10];r17=HEAP8[r15];if(r16<<24>>24!=r17<<24>>24|r16<<24>>24==0|r17<<24>>24==0){r13=r16;r14=r17;break}else{r12=r10;r11=r15}}}r11=(r13&255)-(r14&255)|0;if(r13<<24>>24==r14<<24>>24){r9=r8;r3=11;break L1}if((r11|0)>0){break}if((r11|0)<0){r5=r1;r6=r8;continue L1}}r1=r8+1|0}}if(r3==11){return r9}}function _bin_mdef_phone_id(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+8|0;r8=r7;if((r1|0)==0){___assert_fail(9688,16208,751,51344)}if((r3|0)<0|(r4|0)<0){r9=r2;STACKTOP=r7;return r9}if((r2|0)<=-1){___assert_fail(11280,16208,758,51344)}r10=HEAP32[r1+4>>2];if((r10|0)<=(r2|0)){___assert_fail(11280,16208,758,51344)}if(!((r3|0)>-1&(r10|0)>(r3|0))){___assert_fail(11016,16208,759,51344)}if(!((r4|0)>-1&(r10|0)>(r4|0))){___assert_fail(10832,16208,760,51344)}if(!((r5|0)>-1&(r5|0)<4)){___assert_fail(10672,16208,761,51344)}HEAP16[r8>>1]=r5;HEAP16[r8+2>>1]=r2;r2=HEAP16[r1+40>>1];if(r2<<16>>16>-1){if((HEAP8[HEAP32[r1+56>>2]+(r3*12&-1)+8|0]|0)==0){HEAP16[r8+4>>1]=r3}else{HEAP16[r8+4>>1]=r2}if((HEAP8[HEAP32[r1+56>>2]+(r4*12&-1)+8|0]|0)==0){r6=19}else{r11=r2}}else{HEAP16[r8+4>>1]=r3;r6=19}if(r6==19){r11=r4&65535}HEAP16[r8+6>>1]=r11;r11=HEAP32[r1+52>>2];r1=1;r4=4;r3=0;r2=r11;while(1){if(!r1){r9=-1;r6=30;break}r5=r8+(r3<<1)|0;r12=0;while(1){if((r12|0)>=(r4|0)){break}if((HEAP16[r2+(r12<<3)>>1]|0)==(HEAP16[r5>>1]|0)){break}r12=r12+1|0}if((r12|0)==(r4|0)){r9=-1;r6=30;break}r5=HEAP16[r2+(r12<<3)+2>>1];if(r5<<16>>16==0){r6=28;break}r10=r3+1|0;r1=(r10|0)<4;r4=r5<<16>>16;r3=r10;r2=r11+(HEAP32[r2+(r12<<3)+4>>2]<<3)|0}if(r6==28){r9=HEAP32[r2+(r12<<3)+4>>2];STACKTOP=r7;return r9}else if(r6==30){STACKTOP=r7;return r9}}function _bin_mdef_phone_id_nearest(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12;r6=0;if((r3|0)<0|(r4|0)<0){r7=r2;return r7}r8=_bin_mdef_phone_id(r1,r2,r3,r4,r5);if((r8|0)>-1){r7=r8;return r7}else{r9=0}while(1){if((r9|0)>=4){break}if((r9|0)!=(r5|0)){r8=_bin_mdef_phone_id(r1,r2,r3,r4,r9);if((r8|0)>-1){r7=r8;r6=14;break}}r9=r9+1|0}if(r6==14){return r7}r9=HEAP16[r1+40>>1];if(r9<<16>>16<=-1){r7=r2;return r7}r8=HEAP32[r1+56>>2];r10=(HEAP8[r8+(r3*12&-1)+8|0]|0)!=0|(r5|0)==1|(r5|0)==3?r9<<16>>16:r3;r11=(HEAP8[r8+(r4*12&-1)+8|0]|0)!=0|(r5|0)==2|(r5|0)==3?r9<<16>>16:r4;if((r10|0)==(r3|0)&(r11|0)==(r4|0)){r7=r2;return r7}r4=_bin_mdef_phone_id(r1,r2,r10,r11,r5);if((r4|0)>-1){r7=r4;return r7}else{r12=0}while(1){if((r12|0)>=4){r7=r2;r6=14;break}if((r12|0)!=(r5|0)){r4=_bin_mdef_phone_id(r1,r2,r10,r11,r12);if((r4|0)>-1){r7=r4;r6=14;break}}r12=r12+1|0}if(r6==14){return r7}}function _blkarray_list_reset(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r2=r1+16|0;r3=r1+8|0;r4=r1|0;r5=0;while(1){r6=HEAP32[r2>>2];if((r5|0)<(r6|0)){r7=0}else{break}while(1){r8=HEAP32[HEAP32[r4>>2]+(r5<<2)>>2];if((r7|0)>=(HEAP32[r3>>2]|0)){break}_free(HEAP32[r8+(r7<<2)>>2]);r7=r7+1|0}_free(r8);HEAP32[HEAP32[r4>>2]+(r5<<2)>>2]=0;r5=r5+1|0}r8=r1+20|0;if((r5|0)==(r6|0)){r9=0}else{r10=r8;r11=r1+12|0;HEAP32[r11>>2]=0;HEAP32[r2>>2]=-1;r12=HEAP32[r3>>2];HEAP32[r10>>2]=r12;return}while(1){r13=HEAP32[HEAP32[r4>>2]+(r5<<2)>>2];if((r9|0)>=(HEAP32[r8>>2]|0)){break}_free(HEAP32[r13+(r9<<2)>>2]);r9=r9+1|0}_free(r13);HEAP32[HEAP32[r4>>2]+(r5<<2)>>2]=0;r10=r8;r11=r1+12|0;HEAP32[r11>>2]=0;HEAP32[r2>>2]=-1;r12=HEAP32[r3>>2];HEAP32[r10>>2]=r12;return}function _blkarray_list_append(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r3=0;r4=STACKTOP;if((r1|0)==0){___assert_fail(30040,14064,103,51304)}r5=r1+20|0;r6=HEAP32[r5>>2];r7=HEAP32[r1+8>>2];r8=r1+16|0;do{if((r6|0)<(r7|0)){r9=r6;r10=r8;r11=r1|0}else{r12=HEAP32[r8>>2]+1|0;HEAP32[r8>>2]=r12;r13=HEAP32[r1+4>>2];if((r12|0)>=(r13|0)){_err_msg(4,14064,111,21384,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r13,HEAP32[r3+8>>2]=r7,r3));STACKTOP=r3;HEAP32[r8>>2]=HEAP32[r8>>2]-1;STACKTOP=r4;return}r13=r1|0;if((HEAP32[HEAP32[r13>>2]+(r12<<2)>>2]|0)!=0){___assert_fail(16552,14064,117,51304)}r12=r7<<2;r14=_malloc(r12);if((r14|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r12,HEAP32[r3+8>>2]=14064,HEAP32[r3+16>>2]=119,r3));STACKTOP=r3}else{HEAP32[HEAP32[r13>>2]+(HEAP32[r8>>2]<<2)>>2]=r14;HEAP32[r5>>2]=0;r9=0;r10=r8;r11=r13;break}}}while(0);HEAP32[HEAP32[HEAP32[r11>>2]+(HEAP32[r10>>2]<<2)>>2]+(r9<<2)>>2]=r2;HEAP32[r5>>2]=HEAP32[r5>>2]+1;r5=r1+12|0;r1=HEAP32[r5>>2];HEAP32[r5>>2]=r1+1;if((r1|0)>-1){STACKTOP=r4;return}else{___assert_fail(13768,14064,128,51304)}}function _dict_add_word(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+8|0;r8=r7;r9=r1+20|0;r10=HEAP32[r9>>2];r11=r1+16|0;r12=HEAP32[r11>>2];do{if((r10|0)<(r12|0)){r13=r10;r14=HEAP32[r1+8>>2]}else{_err_msg(1,41416,89,16504,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=((r12*20&-1)+81920|0)>>>10,r6));STACKTOP=r6;r15=r1+8|0;r16=(HEAP32[r11>>2]*20&-1)+81920|0;r17=_realloc(HEAP32[r15>>2],r16);if((r17|0)==0){_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r16,HEAP32[r6+8>>2]=41416,HEAP32[r6+16>>2]=93,r6));STACKTOP=r6}else{r16=r17;HEAP32[r15>>2]=r16;HEAP32[r11>>2]=HEAP32[r11>>2]+4096;r13=HEAP32[r9>>2];r14=r16;break}}}while(0);r11=r1+8|0;r12=___ckd_salloc__(r2,41416,98);r10=r14+(r13*20&-1)|0;HEAP32[r10>>2]=r12;r12=___ckd_salloc__(r2,41416,101);r16=_strlen(r12);L8:do{if((HEAP8[r12+(r16-1)|0]|0)==41){r15=r16-2|0;while(1){if((r15|0)<=0){r5=16;break L8}if((HEAP8[r12+r15|0]|0)==40){break}r15=r15-1|0}HEAP8[r12+r15|0]=0;r17=r1+12|0;r18=_hash_table_lookup(HEAP32[r17>>2],r12,r8);do{if((r18|0)==0){r19=HEAP32[r8>>2]}else{if((r18|0)>=0){r19=0;break}_err_msg(4,41416,107,13728,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r2,r6));STACKTOP=r6;_free(r12);_free(HEAP32[r10>>2]);HEAP32[r10>>2]=0;r20=-1;STACKTOP=r7;return r20}}while(0);HEAP32[r14+(r13*20&-1)+16>>2]=r19;HEAP32[r14+(r13*20&-1)+12>>2]=HEAP32[HEAP32[r11>>2]+(r19*20&-1)+12>>2];HEAP32[HEAP32[r11>>2]+(r19*20&-1)+12>>2]=HEAP32[r9>>2];r21=r17}else{r5=16}}while(0);if(r5==16){HEAP32[r14+(r13*20&-1)+12>>2]=-1;HEAP32[r14+(r13*20&-1)+16>>2]=HEAP32[r9>>2];r21=r1+12|0}_free(r12);r12=HEAP32[r21>>2];r21=HEAP32[r10>>2];r1=HEAP32[r9>>2];r5=_key2hash(r12,r21);r19=_enter(r12,r5,r21,_strlen(r21),r1,0);if((r19|0)!=(HEAP32[r9>>2]|0)){_free(HEAP32[r10>>2]);HEAP32[r10>>2]=0;r20=-1;STACKTOP=r7;return r20}do{if((r3|0)!=0&(r4|0)>0){r10=r4<<1;r19=_malloc(r10);if((r19|0)==0){_ckd_fail(45472,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r10,HEAP32[r6+8>>2]=41416,HEAP32[r6+16>>2]=133,r6));STACKTOP=r6}else{HEAP32[r14+(r13*20&-1)+4>>2]=r19;_memcpy(r19,r3,r10)|0;HEAP32[r14+(r13*20&-1)+8>>2]=r4;break}}else{HEAP32[r14+(r13*20&-1)+4>>2]=0;HEAP32[r14+(r13*20&-1)+8>>2]=0}}while(0);r13=HEAP32[r9>>2];HEAP32[r9>>2]=r13+1;r20=r13;STACKTOP=r7;return r20}function _dict_real_word(r1,r2){var r3,r4;if((r1|0)==0){___assert_fail(27288,41416,413,51080)}if((r2|0)<=-1){___assert_fail(25216,41416,414,51080)}if((HEAP32[r1+20>>2]|0)<=(r2|0)){___assert_fail(25216,41416,414,51080)}r3=HEAP32[HEAP32[r1+8>>2]+(r2*20&-1)+16>>2];if((r3|0)==(HEAP32[r1+32>>2]|0)){r4=0;return r4}if((r3|0)==(HEAP32[r1+36>>2]|0)){r4=0;return r4}do{if((r3|0)>=(HEAP32[r1+24>>2]|0)){if((r3|0)>(HEAP32[r1+28>>2]|0)){break}else{r4=0}return r4}}while(0);r4=1;return r4}function _dict_read(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45;r3=0;r4=0;r5=STACKTOP;r6=_malloc(1032);if((r6|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=516,HEAP32[r4+8>>2]=2,HEAP32[r4+16>>2]=41416,HEAP32[r4+24>>2]=160,r4));STACKTOP=r4}if((HEAP32[r6-4>>2]&3|0)!=0){_memset(r6,0,1032)|0}r7=___ckd_calloc__(512,4,41416,161);r8=r2+44|0;r9=r2+4|0;r10=r2+8|0;r11=_lineiter_start(r1);r1=0;r12=0;r13=512;r14=1;r15=r6;r6=r7;L7:while(1){if((r11|0)==0){r3=44;break}r7=r11|0;r16=HEAP32[r7>>2];r17=HEAP8[r16];r18=r17<<24>>24==0;L10:do{if(r18){r19=41336;r20=0}else{r21=r16;r22=41336;r23=2;r24=r17;while(1){r25=r23-1|0;r26=HEAP8[r22];if(!((r25|0)!=0&r26<<24>>24!=0&r24<<24>>24==r26<<24>>24)){r19=r22;r20=r24;break L10}r26=r21+1|0;r27=r22+1|0;r28=HEAP8[r26];if(r28<<24>>24==0){r19=r27;r20=0;break}else{r21=r26;r22=r27;r23=r25;r24=r28}}}}while(0);do{if(r20<<24>>24==(HEAP8[r19]|0)){r29=r1;r30=r12;r31=r13;r32=r15;r33=r6}else{L17:do{if(r18){r34=40160;r35=0}else{r24=r16;r23=40160;r22=2;r21=r17;while(1){r28=r22-1|0;r25=HEAP8[r23];if(!((r28|0)!=0&r25<<24>>24!=0&r21<<24>>24==r25<<24>>24)){r34=r23;r35=r21;break L17}r25=r24+1|0;r27=r23+1|0;r26=HEAP8[r25];if(r26<<24>>24==0){r34=r27;r35=0;break}else{r24=r25;r23=r27;r22=r28;r21=r26}}}}while(0);if(r35<<24>>24==(HEAP8[r34]|0)){r29=r1;r30=r12;r31=r13;r32=r15;r33=r6;break}r21=_str2words(r16,r6,r13);if((r21|0)<0){r22=_str2words(HEAP32[r7>>2],0,0);if((r22|0)<=(r13|0)){r3=17;break L7}r36=(r22<<1)+8|0;r23=_realloc(r15,r36);if((r23|0)==0){r3=19;break L7}r37=r22<<2;r24=_realloc(r6,r37);if((r24|0)==0){r3=21;break L7}r38=r22;r39=r22;r40=r23;r41=r24}else{r38=r13;r39=r21;r40=r15;r41=r6}if((r39|0)==1){r21=HEAP32[r41>>2];_err_msg(4,41416,185,20800,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r14,HEAP32[r4+8>>2]=r21,r4));STACKTOP=r4;r29=r1;r30=r12;r31=r38;r32=r40;r33=r41;break}else if((r39|0)==0){r29=r1;r30=r12;r31=r38;r32=r40;r33=r41;break}else{r42=1}L31:while(1){if((r42|0)>=(r39|0)){break}r43=r41+(r42<<2)|0;r21=HEAP32[r43>>2];r24=HEAP32[r9>>2];L34:do{if((HEAP32[r8>>2]|0)==0){r44=_bin_mdef_ciphone_id(r24,r21)}else{r23=r24+48|0;r22=0;r26=HEAP32[r24+4>>2];while(1){r28=r22;while(1){r45=(r28+r26|0)/2&-1;if((r28|0)>=(r26|0)){r3=30;break L31}r27=_strcmp_nocase(r21,HEAP32[HEAP32[r23>>2]+(r45<<2)>>2]);if((r27|0)==0){r44=r45;break L34}if((r27|0)<=0){break}r28=r45+1|0}r22=r28;r26=r45}}}while(0);r21=r44&65535;HEAP16[r40+(r42-1<<1)>>1]=r21;if(r21<<16>>16<0){r3=37;break}r42=r42+1|0}if(r3==30){r3=0;HEAP16[r40+(r42-1<<1)>>1]=-1;r3=37}if(r3==37){r3=0;r21=HEAP32[r43>>2];r24=HEAP32[r41>>2];_err_msg(4,41416,195,20288,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r14,HEAP32[r4+8>>2]=r21,HEAP32[r4+16>>2]=r24,r4));STACKTOP=r4}if((r42|0)!=(r39|0)){r29=r1;r30=r12;r31=r38;r32=r40;r33=r41;break}r24=_dict_add_word(r2,HEAP32[r41>>2],r40,r39-1|0);if((r24|0)<0){r21=HEAP32[r41>>2];_err_msg(4,41416,205,19872,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=r14,HEAP32[r4+8>>2]=r21,r4));STACKTOP=r4;r29=r1;r30=r12;r31=r38;r32=r40;r33=r41;break}else{r21=HEAP32[r10>>2];r26=r12+_strlen(HEAP32[r21+(r24*20&-1)>>2])|0;r29=r1+(HEAP32[r21+(r24*20&-1)+8>>2]<<1)|0;r30=r26;r31=r38;r32=r40;r33=r41;break}}}while(0);r11=_lineiter_next(r11);r1=r29;r12=r30;r13=r31;r14=r14+1|0;r15=r32;r6=r33}if(r3==17){___assert_fail(21280,41416,174,51096)}else if(r3==19){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r36,HEAP32[r4+8>>2]=41416,HEAP32[r4+16>>2]=176,r4));STACKTOP=r4}else if(r3==21){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r37,HEAP32[r4+8>>2]=41416,HEAP32[r4+16>>2]=177,r4));STACKTOP=r4}else if(r3==44){_err_msg(1,41416,213,19272,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=(r12|0)/1024&-1,HEAP32[r4+8>>2]=(r1|0)/1024&-1,r4));STACKTOP=r4;_free(r15);_free(r6);STACKTOP=r5;return}}function _dict_wordid(r1,r2){var r3,r4,r5,r6,r7;r3=STACKTOP;STACKTOP=STACKTOP+8|0;r4=r3;if((r1|0)==0){___assert_fail(27288,41416,387,51064)}if((r2|0)==0){___assert_fail(13456,41416,388,51064)}r5=_hash_table_lookup(HEAP32[r1+12>>2],r2,r4);do{if((r5|0)==0){r6=HEAP32[r4>>2]}else{if((r5|0)<0){r7=-1}else{r6=0;break}STACKTOP=r3;return r7}}while(0);r7=r6;STACKTOP=r3;return r7}function _dict_filler_word(r1,r2){var r3,r4;if((r1|0)==0){___assert_fail(27288,41416,399,51112)}if((r2|0)<=-1){___assert_fail(25216,41416,400,51112)}if((HEAP32[r1+20>>2]|0)<=(r2|0)){___assert_fail(25216,41416,400,51112)}r3=HEAP32[HEAP32[r1+8>>2]+(r2*20&-1)+16>>2];if((r3|0)==(HEAP32[r1+32>>2]|0)){r4=0;return r4}if((r3|0)==(HEAP32[r1+36>>2]|0)){r4=0;return r4}do{if((r3|0)>=(HEAP32[r1+24>>2]|0)){if((r3|0)>(HEAP32[r1+28>>2]|0)){break}else{r4=1}return r4}}while(0);r4=0;return r4}function _dict_free(r1){var r2,r3,r4,r5,r6;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=r1+20|0;r2=r1+8|0;r4=0;while(1){r5=HEAP32[r2>>2];if((r4|0)>=(HEAP32[r3>>2]|0)){break}r6=HEAP32[r5+(r4*20&-1)>>2];if((r6|0)!=0){_free(r6)}r6=HEAP32[r5+(r4*20&-1)+4>>2];if((r6|0)!=0){_free(r6)}r4=r4+1|0}if((r5|0)!=0){_free(r5)}r5=HEAP32[r1+12>>2];if((r5|0)!=0){_hash_table_free(r5)}r5=HEAP32[r1+4>>2];if((r5|0)!=0){_bin_mdef_free(r5)}_free(r1);return}function _compress_table(r1,r2,r3,r4){var r5,r6,r7,r8,r9;r5=0;r6=0;while(1){if((r6|0)>=(r4|0)){r7=0;break}HEAP16[r2+(r6<<1)>>1]=-1;HEAP16[r3+(r6<<1)>>1]=-1;r6=r6+1|0}while(1){if((r7|0)>=(r4|0)){break}r6=r1+(r7<<1)|0;r8=0;while(1){if((r8|0)>=(r7|0)){r5=11;break}r9=HEAP16[r2+(r8<<1)>>1];if(r9<<16>>16==-1){r5=11;break}if((HEAP16[r6>>1]|0)==r9<<16>>16){r5=10;break}r8=r8+1|0}if(r5==10){r5=0;HEAP16[r3+(r7<<1)>>1]=r8}else if(r5==11){r5=0;HEAP16[r2+(r8<<1)>>1]=HEAP16[r6>>1];HEAP16[r3+(r7<<1)>>1]=r8}r7=r7+1|0}return}function _populate_lrdiph(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r4=0;r5=HEAP32[r1+4>>2];r6=r5+4|0;r7=r3<<16>>16;r3=r5+56|0;r8=r1+20|0;r9=r5+40|0;r10=r1+12|0;r1=(r2|0)==0;r11=r2+(r7<<2)|0;r2=0;r12=HEAP32[r6>>2];L1:while(1){r13=r2<<16>>16;if((r13|0)<(r12|0)){r14=0;r15=r12}else{r4=13;break}while(1){r16=r14<<16>>16;if((r16|0)>=(r15|0)){break}r17=_bin_mdef_phone_id_nearest(r5,r7,r13,r16,3);r18=HEAP32[r3>>2]+(r17*12&-1)|0;HEAP16[HEAP32[HEAP32[HEAP32[r8>>2]+(r7<<2)>>2]+(r13<<2)>>2]+(r16<<1)>>1]=HEAPU8[r18]|HEAPU8[r18+1|0]<<8|HEAPU8[r18+2|0]<<16|HEAPU8[r18+3|0]<<24;if(r14<<16>>16==(HEAP16[r9>>1]|0)){r18=HEAP32[r3>>2]+(r17*12&-1)|0;HEAP16[HEAP32[HEAP32[HEAP32[r10>>2]+(r7<<2)>>2]+(r16<<2)>>2]+(r13<<1)>>1]=HEAPU8[r18]|HEAPU8[r18+1|0]<<8|HEAPU8[r18+2|0]<<16|HEAPU8[r18+3|0]<<24}do{if(!r1){if(r2<<16>>16!=(HEAP16[r9>>1]|0)){break}r18=HEAP32[r3>>2]+(r17*12&-1)|0;HEAP16[HEAP32[HEAP32[r11>>2]+(r13<<2)>>2]+(r16<<1)>>1]=HEAPU8[r18]|HEAPU8[r18+1|0]<<8|HEAPU8[r18+2|0]<<16|HEAPU8[r18+3|0]<<24}}while(0);r16=HEAP32[r3>>2]+(r17*12&-1)|0;if((HEAPU8[r16]|HEAPU8[r16+1|0]<<8|HEAPU8[r16+2|0]<<16|HEAPU8[r16+3|0]<<24|0)==65535){r4=10;break L1}r14=r14+1&65535;r15=HEAP32[r6>>2]}r2=r2+1&65535;r12=r15}if(r4==10){___assert_fail(36256,13088,287,49960)}else if(r4==13){return}}function _dict2pid_internal(r1,r2,r3,r4){var r5,r6;if((r4|0)==0){r5=-1;return r5}r6=HEAP32[r2+8>>2];if((HEAP32[r6+(r3*20&-1)+8>>2]|0)==(r4|0)){r5=-1;return r5}r2=HEAP32[r6+(r3*20&-1)+4>>2];r3=_bin_mdef_phone_id_nearest(r1,HEAP16[r2+(r4<<1)>>1]|0,HEAP16[r2+(r4-1<<1)>>1]|0,HEAP16[r2+(r4+1<<1)>>1]|0,0);r4=HEAP32[r1+56>>2]+(r3*12&-1)|0;r5=(HEAPU8[r4]|HEAPU8[r4+1|0]<<8|HEAPU8[r4+2|0]<<16|HEAPU8[r4+3|0]<<24)&65535;return r5}function _dict2pid_free(r1){var r2,r3;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r3;if((r3|0)>0){return}r3=HEAP32[r1+12>>2];if((r3|0)!=0){r2=HEAP32[r3>>2];if((r2|0)!=0){_free(HEAP32[r2>>2])}_free(HEAP32[r3>>2]);_free(r3)}r3=HEAP32[r1+20>>2];if((r3|0)!=0){r2=HEAP32[r3>>2];if((r2|0)!=0){_free(HEAP32[r2>>2])}_free(HEAP32[r3>>2]);_free(r3)}r3=HEAP32[r1+16>>2];if((r3|0)!=0){_free_compress_map(r3,HEAP32[HEAP32[r1+4>>2]+4>>2])}r3=HEAP32[r1+24>>2];r2=r1+4|0;if((r3|0)!=0){_free_compress_map(r3,HEAP32[HEAP32[r2>>2]+4>>2])}_bin_mdef_free(HEAP32[r2>>2]);_dict_free(HEAP32[r1+8>>2]);_free(r1);return}function _free_compress_map(r1,r2){var r3,r4,r5,r6;r3=0;while(1){if((r3|0)>=(r2|0)){break}r4=r1+(r3<<2)|0;r5=0;while(1){r6=HEAP32[r4>>2];if((r5|0)>=(r2|0)){break}_free(HEAP32[r6+(r5*12&-1)>>2]);_free(HEAP32[HEAP32[r4>>2]+(r5*12&-1)+4>>2]);r5=r5+1|0}_free(r6);r3=r3+1|0}_free(r1);return}function _fsg_history_set_fsg(r1,r2,r3){var r4,r5,r6;r4=0;r5=STACKTOP;r6=r1+4|0;if((HEAP32[HEAP32[r6>>2]+12>>2]|0)!=0){_err_msg(3,12632,119,40904,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;_blkarray_list_reset(HEAP32[r6>>2])}r6=r1+8|0;r4=HEAP32[r6>>2];if((r4|0)!=0){_free(HEAP32[r4>>2]);_free(r4)}HEAP32[r6>>2]=0;HEAP32[r1>>2]=r2;if((r2|0)==0|(r3|0)==0){STACKTOP=r5;return}r4=r3+4|0;HEAP32[r1+12>>2]=HEAP32[HEAP32[r4>>2]+4>>2];r1=___ckd_calloc_2d__(HEAP32[r2+32>>2],HEAP32[HEAP32[r4>>2]+4>>2],4,12632,133);HEAP32[r6>>2]=r1;STACKTOP=r5;return}function _fsg_history_entry_add(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25;r8=0;r9=0;r10=STACKTOP;r11=r7;r7=STACKTOP;STACKTOP=STACKTOP+16|0;HEAP32[r7>>2]=HEAP32[r11>>2];HEAP32[r7+4>>2]=HEAP32[r11+4>>2];HEAP32[r7+8>>2]=HEAP32[r11+8>>2];HEAP32[r7+12>>2]=HEAP32[r11+12>>2];if((r3|0)<0){r11=_malloc(36);if((r11|0)==0){_ckd_fail(29016,(r9=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r9>>2]=1,HEAP32[r9+8>>2]=36,HEAP32[r9+16>>2]=12632,HEAP32[r9+24>>2]=151,r9));STACKTOP=r9}if((HEAP32[r11-4>>2]&3|0)!=0){_memset(r11,0,36)|0}HEAP32[r11>>2]=r2;HEAP32[r11+12>>2]=r3;HEAP32[r11+4>>2]=r4;HEAP32[r11+8>>2]=r5;HEAP16[r11+16>>1]=r6;r12=r11+20|0;r13=r7;HEAP32[r12>>2]=HEAP32[r13>>2];HEAP32[r12+4>>2]=HEAP32[r13+4>>2];HEAP32[r12+8>>2]=HEAP32[r13+8>>2];HEAP32[r12+12>>2]=HEAP32[r13+12>>2];_blkarray_list_append(HEAP32[r1+4>>2],r11);STACKTOP=r10;return}r11=HEAP32[r2+4>>2];r13=r1+8|0;r1=r7|0;r12=r7+4|0;r14=r7+8|0;r15=r7+12|0;r16=HEAP32[HEAP32[r13>>2]+(r11<<2)>>2]+(r6<<2)|0;r17=0;while(1){r18=HEAP32[r16>>2];if((r18|0)==0){break}r19=HEAP32[r18>>2];if((HEAP32[r19+4>>2]|0)<(r4|0)){break}r20=HEAP32[r1>>2]&~HEAP32[r19+20>>2];HEAP32[r1>>2]=r20;r21=HEAP32[r12>>2]&~HEAP32[r19+24>>2];HEAP32[r12>>2]=r21;r22=HEAP32[r14>>2]&~HEAP32[r19+28>>2];HEAP32[r14>>2]=r22;r23=HEAP32[r15>>2]&~HEAP32[r19+32>>2];HEAP32[r15>>2]=r23;if((r20|r21|r22|r23|0)==0){r8=27;break}r16=r18+8|0;r17=r18}if(r8==27){STACKTOP=r10;return}r16=_malloc(36);if((r16|0)==0){_ckd_fail(29016,(r9=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r9>>2]=1,HEAP32[r9+8>>2]=36,HEAP32[r9+16>>2]=12632,HEAP32[r9+24>>2]=182,r9));STACKTOP=r9}if((HEAP32[r16-4>>2]&3|0)!=0){_memset(r16,0,36)|0}HEAP32[r16>>2]=r2;HEAP32[r16+12>>2]=r3;HEAP32[r16+4>>2]=r4;HEAP32[r16+8>>2]=r5;HEAP16[r16+16>>1]=r6;r5=r16+20|0;r4=r7;HEAP32[r5>>2]=HEAP32[r4>>2];HEAP32[r5+4>>2]=HEAP32[r4+4>>2];HEAP32[r5+8>>2]=HEAP32[r4+8>>2];HEAP32[r5+12>>2]=HEAP32[r4+12>>2];if((r17|0)==0){r4=_glist_add_ptr(HEAP32[HEAP32[HEAP32[r13>>2]+(r11<<2)>>2]+(r6<<2)>>2],r16);HEAP32[HEAP32[HEAP32[r13>>2]+(r11<<2)>>2]+(r6<<2)>>2]=r4;r24=HEAP32[HEAP32[HEAP32[r13>>2]+(r11<<2)>>2]+(r6<<2)>>2];r25=r18}else{r24=_glist_insert_ptr(r17,r16);r25=r18}while(1){if((r25|0)==0){r8=27;break}r18=HEAP32[r25>>2];r16=HEAP32[r18+20>>2]&~HEAP32[r1>>2];HEAP32[r18+20>>2]=r16;r17=r18+24|0;r6=HEAP32[r17>>2]&~HEAP32[r12>>2];HEAP32[r17>>2]=r6;r17=r18+28|0;r11=HEAP32[r17>>2]&~HEAP32[r14>>2];HEAP32[r17>>2]=r11;r17=r18+32|0;r13=HEAP32[r17>>2]&~HEAP32[r15>>2];HEAP32[r17>>2]=r13;if((r16|r6|r11|r13|0)!=0){r24=r25;r25=HEAP32[r25+8>>2];continue}_free(r18);r18=HEAP32[r25+8>>2];if((r24|0)!=0){r13=r24+8|0;if((HEAP32[r13>>2]|0)!=(r25|0)){r8=23;break}HEAP32[r13>>2]=r18}_free(r25);r24=r24;r25=r18}if(r8==23){___assert_fail(45272,28144,263,50296)}else if(r8==27){STACKTOP=r10;return}}function _fsg_history_end_frame(r1){var r2,r3,r4,r5,r6,r7,r8;r2=HEAP32[HEAP32[r1>>2]+32>>2];r3=HEAP32[r1+12>>2];r4=r1+8|0;r5=r1+4|0;r1=0;while(1){if((r1|0)<(r2|0)){r6=0}else{break}while(1){if((r6|0)>=(r3|0)){break}r7=HEAP32[HEAP32[r4>>2]+(r1<<2)>>2]+(r6<<2)|0;while(1){r8=HEAP32[r7>>2];if((r8|0)==0){break}_blkarray_list_append(HEAP32[r5>>2],HEAP32[r8>>2]);r7=r8+8|0}r7=HEAP32[HEAP32[HEAP32[r4>>2]+(r1<<2)>>2]+(r6<<2)>>2];while(1){if((r7|0)==0){break}r8=HEAP32[r7+8>>2];_free(r7);r7=r8}HEAP32[HEAP32[HEAP32[r4>>2]+(r1<<2)>>2]+(r6<<2)>>2]=0;r6=r6+1|0}r1=r1+1|0}return}function _fsg_lextree_free(r1){var r2,r3,r4,r5,r6,r7,r8;if((r1|0)==0){return}r2=r1|0;r3=HEAP32[r2>>2];L4:do{if((r3|0)!=0){r4=r1+32|0;r5=0;r6=r3;while(1){if((r5|0)>=(HEAP32[r6+32>>2]|0)){break L4}r7=HEAP32[HEAP32[r4>>2]+(r5<<2)>>2];while(1){if((r7|0)==0){break}r8=HEAP32[r7+4>>2];_free(r7);r7=r8}r5=r5+1|0;r6=HEAP32[r2>>2]}}}while(0);r2=HEAP32[r1+20>>2];if((r2|0)!=0){_free(HEAP32[r2>>2])}_free(r2);r2=HEAP32[r1+24>>2];if((r2|0)!=0){_free(HEAP32[r2>>2])}_free(r2);_free(HEAP32[r1+28>>2]);_free(HEAP32[r1+32>>2]);_free(r1);return}function _fsg_search_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;_dict_free(HEAP32[r1+16>>2]);_dict2pid_free(HEAP32[r1+20>>2]);_free(HEAP32[r1+24>>2]);_ps_lattice_free(HEAP32[r1+28>>2]);_fsg_lextree_free(HEAP32[r1+64>>2]);r2=r1+68|0;r3=HEAP32[r2>>2];if((r3|0)!=0){_blkarray_list_reset(HEAP32[r3+4>>2]);_fsg_history_set_fsg(HEAP32[r2>>2],0,0);r3=HEAP32[r2>>2];r2=HEAP32[r3>>2];L3:do{if((r2|0)==0){r4=r3+8|0}else{r5=HEAP32[r2+32>>2];r6=HEAP32[r3+12>>2];r7=r3+8|0;r8=0;while(1){if((r8|0)<(r5|0)){r9=0}else{r4=r7;break L3}while(1){if((r9|0)>=(r6|0)){break}r10=HEAP32[HEAP32[r7>>2]+(r8<<2)>>2]+(r9<<2)|0;while(1){r11=HEAP32[r10>>2];if((r11|0)==0){break}_free(HEAP32[r11>>2]);r10=r11+8|0}r10=HEAP32[HEAP32[HEAP32[r7>>2]+(r8<<2)>>2]+(r9<<2)>>2];while(1){if((r10|0)==0){break}r11=HEAP32[r10+8>>2];_free(r10);r10=r11}r9=r9+1|0}r8=r8+1|0}}}while(0);r9=HEAP32[r4>>2];if((r9|0)!=0){_free(HEAP32[r9>>2])}_free(r9);r9=HEAP32[r3+4>>2];_blkarray_list_reset(r9);_free(HEAP32[r9>>2]);_free(r9);_free(r3)}r3=HEAP32[r1+56>>2];if((r3|0)==0){r12=r1+60|0;r13=HEAP32[r12>>2];r14=r13;_fsg_model_free(r14);r15=r1;_free(r15);return}_free(HEAP32[r3+16>>2]);_free(r3);r12=r1+60|0;r13=HEAP32[r12>>2];r14=r13;_fsg_model_free(r14);r15=r1;_free(r15);return}function _fsg_search_reinit(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124;r4=0;r5=0;r6=STACKTOP;r7=HEAP32[r1+64>>2];if((r7|0)!=0){_fsg_lextree_free(r7)}_ps_search_base_reinit(r1,r2,r3);HEAP32[r1+40>>2]=HEAP32[r2+20>>2];r7=r1+60|0;r8=HEAP32[r7>>2];r9=r8;r10=HEAP32[HEAP32[r1+12>>2]+20>>2];r11=HEAP32[r1+56>>2];r12=HEAP32[r1+116>>2];r13=HEAP32[r1+112>>2];r14=_malloc(48);if((r14|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=48,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=223,r5));STACKTOP=r5}if((HEAP32[r14-4>>2]&3|0)!=0){_memset(r14,0,48)|0}HEAP32[r14>>2]=r9;r15=r8+32|0;r8=___ckd_calloc__(HEAP32[r15>>2],4,12384,226);r16=r14+28|0;HEAP32[r16>>2]=r8;r8=___ckd_calloc__(HEAP32[r15>>2],4,12384,228);r17=r14+32|0;HEAP32[r17>>2]=r8;r8=r14+4|0;HEAP32[r8>>2]=r11;r11=r14+8|0;HEAP32[r11>>2]=r2;r18=r14+12|0;HEAP32[r18>>2]=r3;r3=r14+16|0;HEAP32[r3>>2]=r10;r19=r14+40|0;HEAP32[r19>>2]=r12;r12=r14+44|0;HEAP32[r12>>2]=r13;r13=HEAP16[r10+40>>1];r20=r13<<16>>16;if(r13<<16>>16<=-1){___assert_fail(28296,12384,98,50664)}r13=HEAP32[r10+4>>2];r10=r14;r21=HEAP32[r10>>2];r22=r21+32|0;r23=r13+1|0;r24=___ckd_calloc_2d__(HEAP32[r22>>2],r23,2,12384,106);r25=r14+20|0;HEAP32[r25>>2]=r24;r24=___ckd_calloc_2d__(HEAP32[r22>>2],r23,2,12384,107);r26=r14+24|0;HEAP32[r26>>2]=r24;r24=Math_imul(HEAP32[r22>>2],r23)<<1;_err_msg(1,12384,110,27216,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r24,HEAP32[r5+8>>2]=(r24|0)/1024&-1,r5));STACKTOP=r5;r24=r21+20|0;r23=0;while(1){r27=HEAP32[r22>>2];if((r23|0)>=(r27|0)){r28=0;r29=r27;break}r27=_fsg_model_arcs(r21,r23);while(1){if((r27|0)==0){break}r30=HEAP32[r27+8>>2];do{if((r30|0)==0){r31=HEAP32[r27+4>>2];if((r31|0)==0){r32=0;break}r32=HEAP32[HEAP32[r31+4>>2]+8>>2]}else{r32=HEAP32[r30>>2]}}while(0);r30=r32+12|0;r31=HEAP32[r30>>2];L24:do{if((r31|0)>-1){r33=_dict_wordid(HEAP32[r11>>2],HEAP32[HEAP32[HEAP32[r10>>2]+16>>2]+(r31<<2)>>2]);r34=HEAP32[r24>>2];do{if((r34|0)!=0){r35=HEAP32[r30>>2];if((HEAP32[r34+(((r35|0)/32&-1)<<2)>>2]&1<<(r35&31)|0)==0){break}HEAP16[HEAP32[HEAP32[r26>>2]+(HEAP32[r32>>2]<<2)>>2]+(r20<<1)>>1]=1;HEAP16[HEAP32[HEAP32[r25>>2]+(HEAP32[r32+4>>2]<<2)>>2]+(r20<<1)>>1]=1;break L24}}while(0);r34=HEAP32[HEAP32[r11>>2]+8>>2];r35=HEAP32[r34+(r33*20&-1)+8>>2];HEAP16[HEAP32[HEAP32[r26>>2]+(HEAP32[r32>>2]<<2)>>2]+(HEAP16[HEAP32[r34+(r33*20&-1)+4>>2]>>1]<<1)>>1]=1;HEAP16[HEAP32[HEAP32[r25>>2]+(HEAP32[r32+4>>2]<<2)>>2]+(HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r33*20&-1)+4>>2]+(r35-1<<1)>>1]<<1)>>1]=1}}while(0);r27=_fsg_arciter_next(r27)}r23=r23+1|0}while(1){if((r28|0)>=(r29|0)){r36=0;r37=r29;break}HEAP16[HEAP32[HEAP32[r25>>2]+(r28<<2)>>2]+(r20<<1)>>1]=1;HEAP16[HEAP32[HEAP32[r26>>2]+(r28<<2)>>2]+(r20<<1)>>1]=1;r28=r28+1|0;r29=HEAP32[r22>>2]}while(1){if((r36|0)>=(r37|0)){r38=0;r39=r37;break}r29=_fsg_model_arcs(r21,r36);while(1){if((r29|0)==0){break}r28=HEAP32[r29+8>>2];if((r28|0)==0){r40=HEAP32[HEAP32[HEAP32[r29+4>>2]+4>>2]+8>>2]}else{r40=HEAP32[r28>>2]}r28=r40;L45:do{if((HEAP32[r28+12>>2]|0)<0){r20=r28|0;r23=r28+4|0;r32=0;while(1){if((r32|0)>=(r13|0)){r41=0;break}r24=HEAP32[r25>>2];r27=HEAP32[r24+(HEAP32[r23>>2]<<2)>>2]+(r32<<1)|0;HEAP16[r27>>1]=HEAP16[r27>>1]|HEAP16[HEAP32[r24+(HEAP32[r20>>2]<<2)>>2]+(r32<<1)>>1];r32=r32+1|0}while(1){if((r41|0)>=(r13|0)){break L45}r32=HEAP32[r26>>2];r33=HEAP32[r32+(HEAP32[r20>>2]<<2)>>2]+(r41<<1)|0;HEAP16[r33>>1]=HEAP16[r33>>1]|HEAP16[HEAP32[r32+(HEAP32[r23>>2]<<2)>>2]+(r41<<1)>>1];r41=r41+1|0}}}while(0);r29=_fsg_arciter_next(r29)}r36=r36+1|0;r37=HEAP32[r22>>2]}while(1){if((r38|0)<(r39|0)){r42=0;r43=0}else{break}while(1){r44=HEAP32[HEAP32[r25>>2]+(r38<<2)>>2];if((r42|0)>=(r13|0)){break}if((HEAP16[r44+(r42<<1)>>1]|0)==0){r45=r43}else{HEAP16[r44+(r43<<1)>>1]=r42;r45=r43+1|0}r42=r42+1|0;r43=r45}HEAP16[r44+(r43<<1)>>1]=-1;r37=0;r36=0;while(1){r46=HEAP32[HEAP32[r26>>2]+(r38<<2)>>2];if((r37|0)>=(r13|0)){break}if((HEAP16[r46+(r37<<1)>>1]|0)==0){r47=r36}else{HEAP16[r46+(r36<<1)>>1]=r37;r47=r36+1|0}r37=r37+1|0;r36=r47}HEAP16[r46+(r36<<1)>>1]=-1;r38=r38+1|0;r39=HEAP32[r22>>2]}r22=r14+36|0;HEAP32[r22>>2]=0;r39=0;r38=0;L72:while(1){if((r39|0)>=(HEAP32[r15>>2]|0)){r4=191;break}r46=HEAP32[r17>>2]+(r39<<2)|0;if((HEAP32[r46>>2]|0)!=0){r4=54;break}if((HEAP32[HEAP32[r3>>2]+4>>2]|0)>128){r4=56;break}r47=_fsg_model_arcs(r9,r39);r13=0;r43=0;r44=0;while(1){if((r47|0)==0){break}r45=HEAP32[r47+8>>2];if((r45|0)==0){r48=HEAP32[HEAP32[HEAP32[r47+4>>2]+4>>2]+8>>2]}else{r48=HEAP32[r45>>2]}r45=r48;r42=HEAP32[r45+12>>2];if((r42|0)<0){r49=r13;r50=r43;r51=r44}else{r37=HEAP32[HEAP32[r25>>2]+(r39<<2)>>2];r41=HEAP32[HEAP32[r26>>2]+(HEAP32[r45+4>>2]<<2)>>2];r40=HEAP32[r3>>2];r21=HEAP16[r40+40>>1];r29=r21<<16>>16;r28=HEAP32[r40+4>>2];r40=_dict_wordid(HEAP32[r11>>2],HEAP32[HEAP32[HEAP32[r10>>2]+16>>2]+(r42<<2)>>2]);r42=HEAP32[r11>>2];r23=HEAP32[r42+8>>2];r20=HEAP32[r23+(r40*20&-1)+8>>2];if((r20|0)<=0){r4=64;break L72}if((HEAP16[r37>>1]|0)<=-1){r4=66;break L72}if((HEAP16[r41>>1]|0)<=-1){r4=68;break L72}r32=HEAP32[r46>>2];L89:do{if((r20|0)==1){r33=HEAP16[HEAP32[r23+(r40*20&-1)+4>>2]>>1]|0;if((_dict_filler_word(r42,r40)|0)!=0){r24=HEAP32[HEAP32[r3>>2]+56>>2];r27=r24+(r33*12&-1)|0;r30=HEAPU8[r27]|HEAPU8[r27+1|0]<<8|HEAPU8[r27+2|0]<<16|HEAPU8[r27+3|0]<<24|0;r27=r24+(r33*12&-1)+4|0;r24=HEAPU8[r27]|HEAPU8[r27+1|0]<<8|HEAPU8[r27+2|0]<<16|HEAPU8[r27+3|0]<<24|0;r27=_malloc(120);if((r27|0)==0){r4=89;break L72}if((HEAP32[r27-4>>2]&3|0)!=0){_memset(r27,0,120)|0}r31=r27;HEAP32[r27+36>>2]=HEAP32[r8>>2];HEAP32[r27>>2]=r45;HEAP32[r27+12>>2]=(HEAP32[r45+8>>2]>>10)+HEAP32[r19>>2]+HEAP32[r12>>2];HEAP16[r27+32>>1]=r21;HEAP8[r27+34|0]=0;HEAP8[r27+35|0]=1;HEAP32[r27+8>>2]=r13;r35=r27+16|0;r34=0;while(1){if((r34|0)>=4){break}HEAP32[r35+(r34<<2)>>2]=-1;r34=r34+1|0}HEAP32[r27+4>>2]=r32;_hmm_init(HEAP32[r8>>2],r27+40|0,0,r30,r24);r52=r31;r53=r31;r54=r44;break}r34=r45;r35=r45+8|0;r55=0;r56=r13;r57=r32;r58=0;r59=0;while(1){r60=HEAP16[r37+(r55<<1)>>1];if(r60<<16>>16<=-1){r61=r58;break}r62=r60<<16>>16;r60=HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r18>>2]+20>>2]+(r33<<2)>>2]+(r62<<2)>>2]+(r29<<1)>>1];r63=r60&65535;r64=HEAP32[HEAP32[r3>>2]+56>>2]+(HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]>>1]*12&-1)+4|0;r65=HEAPU8[r64]|HEAPU8[r64+1|0]<<8|HEAPU8[r64+2|0]<<16|HEAPU8[r64+3|0]<<24|0;r64=r58;while(1){if((r64|0)==0){r4=78;break}r66=HEAP32[r64>>2];if((HEAP16[r66+92>>1]|0)==r60<<16>>16){r4=77;break}r64=HEAP32[r64+8>>2]}if(r4==77){r4=0;r64=r66+16+(r62>>5<<2)|0;HEAP32[r64>>2]=HEAP32[r64>>2]|1<<(r62&31);r67=r56;r68=r57;r69=r58;r70=r59}else if(r4==78){r4=0;r64=_malloc(120);if((r64|0)==0){r4=81;break L72}if((HEAP32[r64-4>>2]&3|0)!=0){_memset(r64,0,120)|0}r60=r64;HEAP32[r64+36>>2]=HEAP32[r8>>2];HEAP32[r64>>2]=r34;HEAP32[r64+12>>2]=(HEAP32[r35>>2]>>10)+HEAP32[r19>>2]+HEAP32[r12>>2];HEAP16[r64+32>>1]=HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]>>1];HEAP8[r64+34|0]=0;HEAP8[r64+35|0]=1;HEAP32[r64+8>>2]=r56;r71=r60+16+(r62>>5<<2)|0;HEAP32[r71>>2]=HEAP32[r71>>2]|1<<(r62&31);HEAP32[r64+4>>2]=r57;_hmm_init(HEAP32[r8>>2],r64+40|0,0,r63,r65);r67=r60;r68=r60;r69=_glist_add_ptr(r58,r64);r70=r59+1|0}r55=r55+1|0;r56=r67;r57=r68;r58=r69;r59=r70}while(1){if((r61|0)==0){r52=r56;r53=r57;r54=r44;break L89}r59=HEAP32[r61+8>>2];_free(r61);r61=r59}}else{r57=___ckd_calloc__(r28,4,12384,478);r56=r57;r59=r20-1|0;r58=r28<<2;r55=r45+8|0;r35=r45;r34=0;r33=r13;r31=0;r24=r32;r30=0;r27=0;r64=0;r60=0;r71=0;r72=r44;while(1){if((r34|0)>=(r20|0)){break}r73=HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2];r74=HEAP16[r73+(r34<<1)>>1]|0;L124:do{if((r34|0)==0){r75=HEAP16[r73+2>>1]|0;r76=r72;while(1){r77=(r76|0)==0;if(r77){r4=110;break}if((HEAP32[r76+8>>2]|0)==0){r4=104;break}if((HEAP32[r76>>2]|0)==(r74|0)){if((HEAP32[r76+4>>2]|0)==(r75|0)){r78=r76;r4=103;break}}r76=HEAP32[r76+12>>2]}if(r4==103){r4=0;if((r78|0)==0){r4=109}else{r4=104}}do{if(r4==104){r4=0;r79=HEAP32[r76+8>>2];if((r79|0)==0){r4=109;break}if((HEAP32[r76>>2]|0)!=(r74|0)){r4=107;break L72}if((HEAP32[r76+4>>2]|0)!=(r75|0)){r4=107;break L72}r80=r33;r81=HEAP32[r79>>2];r82=r24;r83=r79;r84=r27;r85=r64;r86=r60;r87=r71;r88=r72;break L124}}while(0);if(r4==109){r4=0;if(r77){r4=110}else{r89=r76;r90=r72}}if(r4==110){r4=0;r79=_malloc(16);if((r79|0)==0){r4=113;break L72}if((HEAP32[r79-4>>2]&3|0)!=0){_memset(r79,0,16)|0}r91=r79;HEAP32[r79+12>>2]=r72;r89=r91;r90=r91}HEAP32[r89>>2]=r74;HEAP32[r89+4>>2]=r75;r91=r89+8|0;HEAP32[r91>>2]=0;r79=0;r92=r33;r93=r24;r94=0;r95=r64;while(1){r96=HEAP16[r37+(r79<<1)>>1];if(r96<<16>>16<=-1){break}r97=r96<<16>>16;r96=HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r18>>2]+12>>2]+(r74<<2)>>2]+(r75<<2)>>2]+(r97<<1)>>1];r98=r96&65535;r99=HEAP32[HEAP32[r3>>2]+56>>2]+(HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]>>1]*12&-1)+4|0;r100=HEAPU8[r99]|HEAPU8[r99+1|0]<<8|HEAPU8[r99+2|0]<<16|HEAPU8[r99+3|0]<<24|0;r99=0;r101=HEAP32[r56>>2];while(1){if((r99|0)>=(r28|0)){r4=122;break L72}r102=HEAP32[r56+(r99<<2)>>2];if((r102|0)==0){r103=r101;r4=123;break}if((HEAP16[r102+92>>1]|0)==r96<<16>>16){r104=r92;r105=r102;r106=r93;r107=r94;r108=r95;break}r99=r99+1|0;r101=r102}do{if(r4==123){r4=0;if((r103|0)!=0){r104=r92;r105=r103;r106=r93;r107=r94;r108=r95;break}r101=_malloc(120);if((r101|0)==0){r4=127;break L72}if((HEAP32[r101-4>>2]&3|0)!=0){_memset(r101,0,120)|0}r96=r101;HEAP32[r101+36>>2]=HEAP32[r8>>2];HEAP32[r101+12>>2]=HEAP32[r19>>2]+HEAP32[r12>>2];HEAP16[r101+32>>1]=HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]>>1];HEAP8[r101+34|0]=0;HEAP8[r101+35|0]=0;HEAP32[r101+8>>2]=r92;HEAP32[r101+4>>2]=r93;_hmm_init(HEAP32[r8>>2],r101+40|0,0,r98,r100);r102=_glist_add_ptr(r94,r101);HEAP32[r56+(r99<<2)>>2]=r96;r104=r96;r105=r96;r106=r96;r107=r102;r108=r95+1|0}}while(0);r99=r105+16+(r97>>5<<2)|0;HEAP32[r99>>2]=HEAP32[r99>>2]|1<<(r97&31);r79=r79+1|0;r92=r104;r93=r106;r94=r107;r95=r108}HEAP32[r91>>2]=r94;r80=r92;r81=r92;r82=r93;r83=r94;r84=r27;r85=r95;r86=r60;r87=r71;r88=r90}else{if((r34|0)!=(r59|0)){r79=HEAP32[r18>>2];r75=_dict2pid_internal(HEAP32[r79+4>>2],HEAP32[r79+8>>2],r40,r34);r79=r75&65535;r76=HEAP32[HEAP32[r3>>2]+56>>2]+(HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]+(r34<<1)>>1]*12&-1)+4|0;r99=HEAPU8[r76]|HEAPU8[r76+1|0]<<8|HEAPU8[r76+2|0]<<16|HEAPU8[r76+3|0]<<24|0;r76=r31|0;r100=HEAP32[r76>>2];r98=r100;while(1){if((r98|0)==0){break}if((HEAP16[r98+92>>1]|0)==r75<<16>>16){if((HEAP8[r98+35|0]|0)==0){r4=137;break}}r98=HEAP32[r98+8>>2]}do{if(r4==137){r4=0;if((r98|0)==0){break}if((HEAP16[r98+92>>1]|0)!=r75<<16>>16){break}if((HEAP8[r98+35|0]|0)==0){r80=r33;r81=r98;r82=r24;r83=r30;r84=r27;r85=r64;r86=r60;r87=r71;r88=r72;break L124}}}while(0);r98=_malloc(120);if((r98|0)==0){r4=143;break L72}if((HEAP32[r98-4>>2]&3|0)!=0){_memset(r98,0,120)|0}r75=r98;HEAP32[r98+36>>2]=HEAP32[r8>>2];HEAP32[r98+12>>2]=HEAP32[r12>>2];HEAP16[r98+32>>1]=HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]+(r34<<1)>>1];HEAP8[r98+34|0]=r34;HEAP8[r98+35|0]=0;HEAP32[r98+8>>2]=r100;L184:do{if((r34|0)==1){r95=r30;while(1){if((r95|0)==0){break L184}HEAP32[HEAP32[r95>>2]>>2]=r75;r95=HEAP32[r95+8>>2]}}else{HEAP32[r76>>2]=r75}}while(0);HEAP32[r98+4>>2]=r24;_hmm_init(HEAP32[r8>>2],r98+40|0,0,r79,r99);r80=r33;r81=r75;r82=r75;r83=r30;r84=r27;r85=r64;r86=r60+1|0;r87=r71;r88=r72;break}_memset(r57,0,r58)|0;r76=HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2];r100=HEAP16[r76+(r20-2<<1)>>1]|0;r95=HEAP32[HEAP32[HEAP32[r18>>2]+16>>2]+(r74<<2)>>2];r97=HEAP32[HEAP32[r3>>2]+56>>2]+(HEAP16[r76+(r59<<1)>>1]*12&-1)+4|0;r76=HEAPU8[r97]|HEAPU8[r97+1|0]<<8|HEAPU8[r97+2|0]<<16|HEAPU8[r97+3|0]<<24|0;r97=r95+(r100*12&-1)+4|0;r94=r95+(r100*12&-1)|0;r100=r59&255;r95=0;r93=r24;r92=r27;r91=r71;while(1){r102=HEAP16[r41+(r95<<1)>>1];if(r102<<16>>16<=-1){break}r96=r102<<16>>16;r102=HEAP16[HEAP32[r97>>2]+(r96<<1)>>1]|0;r101=HEAP16[HEAP32[r94>>2]+(r102<<1)>>1];r109=r101&65535;r110=r56+(r102<<2)|0;r102=HEAP32[r110>>2];if((r102|0)==0){r111=_malloc(120);if((r111|0)==0){r4=155;break L72}if((HEAP32[r111-4>>2]&3|0)!=0){_memset(r111,0,120)|0}r112=r111;HEAP32[r111+36>>2]=HEAP32[r8>>2];HEAP32[r111+12>>2]=(HEAP32[r55>>2]>>10)+HEAP32[r12>>2];HEAP16[r111+32>>1]=HEAP16[HEAP32[HEAP32[HEAP32[r11>>2]+8>>2]+(r40*20&-1)+4>>2]+(r59<<1)>>1];HEAP8[r111+34|0]=r100;HEAP8[r111+35|0]=1;if((r92|0)==0){r113=0}else{r113=HEAP32[r92>>2]}HEAP32[r111+8>>2]=r113;HEAP32[r111>>2]=r35;HEAP32[r111+4>>2]=r93;_hmm_init(HEAP32[r8>>2],r111+40|0,0,r109,r76);r109=_glist_add_ptr(r92,r111);HEAP32[r110>>2]=r112;r114=r112;r115=r112;r116=r109;r117=r91+1|0}else{if((HEAP16[r102+92>>1]|0)==r101<<16>>16){r114=r102;r115=r93;r116=r92;r117=r91}else{r4=160;break L72}}r102=r114+16+(r96>>5<<2)|0;HEAP32[r102>>2]=HEAP32[r102>>2]|1<<(r96&31);r95=r95+1|0;r93=r115;r92=r116;r91=r117}if((r59|0)!=1){r95=r31|0;r76=HEAP32[r95>>2];if((r76|0)==0){HEAP32[r95>>2]=HEAP32[r92>>2];r80=r33;r81=r31;r82=r93;r83=r30;r84=r92;r85=r64;r86=r60;r87=r91;r88=r72;break}else{r118=r76}while(1){r119=r118+8|0;r76=HEAP32[r119>>2];if((r76|0)==0){break}else{r118=r76}}HEAP32[r119>>2]=HEAP32[r92>>2];r80=r33;r81=r31;r82=r93;r83=r30;r84=r92;r85=r64;r86=r60;r87=r91;r88=r72;break}r76=r92;r95=r30;r100=r31;while(1){if((r95|0)==0){r80=r33;r81=r100;r82=r93;r83=r30;r84=r92;r85=r64;r86=r60;r87=r91;r88=r72;break L124}r94=HEAP32[r95>>2];r120=r94;r97=HEAP32[r94>>2];if((r97|0)!=0){r121=r97;break}HEAP32[r94>>2]=HEAP32[r76>>2];r95=HEAP32[r95+8>>2];r100=r120}while(1){r122=r121+8|0;r100=HEAP32[r122>>2];if((r100|0)==0){break}else{r121=r100}}HEAP32[r122>>2]=HEAP32[r76>>2];r80=r33;r81=r120;r82=r93;r83=r30;r84=r92;r85=r64;r86=r60;r87=r91;r88=r72}}while(0);r34=r34+1|0;r33=r80;r31=r81;r24=r82;r30=r83;r27=r84;r64=r85;r60=r86;r71=r87;r72=r88}_free(r57);r71=r27;while(1){if((r71|0)==0){r52=r33;r53=r24;r54=r72;break L89}r60=HEAP32[r71+8>>2];_free(r71);r71=r60}}}while(0);HEAP32[r46>>2]=r53;r49=r52;r50=r43+1|0;r51=r54}r47=_fsg_arciter_next(r47);r13=r49;r43=r50;r44=r51}L229:do{if((r44|0)!=0){r43=HEAP32[r44+8>>2];L231:do{if((r43|0)==0){r123=r44}else{r47=r43;while(1){if((r47|0)==0){r123=r44;break L231}r46=HEAP32[r47+8>>2];_free(r47);r47=r46}}}while(0);L235:while(1){r43=HEAP32[r123+12>>2];_free(r123);if((r43|0)==0){break L229}r47=HEAP32[r43+8>>2];if((r47|0)==0){r123=r43;continue}else{r124=r47}while(1){if((r124|0)==0){r123=r43;continue L235}r47=HEAP32[r124+8>>2];_free(r124);r124=r47}}}}while(0);HEAP32[HEAP32[r16>>2]+(r39<<2)>>2]=r13;r44=HEAP32[r17>>2]+(r39<<2)|0;r43=r38;while(1){r47=HEAP32[r44>>2];if((r47|0)==0){break}HEAP32[r22>>2]=HEAP32[r22>>2]+1;r44=r47+4|0;r43=(HEAP8[r47+35|0]|0)==0?r43:r43+1|0}r39=r39+1|0;r38=r43}if(r4==54){___assert_fail(37456,12384,712,50584)}else if(r4==56){_err_msg(5,12384,718,36096,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=128,r5));STACKTOP=r5;_exit(1)}else if(r4==64){___assert_fail(34344,12384,393,49840)}else if(r4==66){___assert_fail(32640,12384,395,49840)}else if(r4==68){___assert_fail(31448,12384,396,49840)}else if(r4==81){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=120,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=428,r5));STACKTOP=r5}else if(r4==89){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=120,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=457,r5));STACKTOP=r5}else if(r4==107){___assert_fail(30664,12384,496,49840)}else if(r4==113){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=16,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=510,r5));STACKTOP=r5}else if(r4==122){___assert_fail(30016,12384,532,49840)}else if(r4==127){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=120,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=537,r5));STACKTOP=r5}else if(r4==143){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=120,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=585,r5));STACKTOP=r5}else if(r4==155){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=120,HEAP32[r5+16>>2]=12384,HEAP32[r5+24>>2]=629,r5));STACKTOP=r5}else if(r4==160){___assert_fail(28976,12384,652,49840)}else if(r4==191){_err_msg(1,12384,256,40752,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=HEAP32[r22>>2],HEAP32[r5+8>>2]=r38,r5));STACKTOP=r5;r4=HEAP32[r22>>2]*120&-1;_err_msg(1,12384,259,29504,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r4,HEAP32[r5+8>>2]=r4>>>10,r5));STACKTOP=r5;r4=r38*120&-1;_err_msg(1,12384,262,20960,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r4,HEAP32[r5+8>>2]=r4>>>10,r5));STACKTOP=r5;HEAP32[r1+64>>2]=r14;_fsg_history_set_fsg(HEAP32[r1+68>>2],HEAP32[r7>>2],r2);STACKTOP=r6;return 0}}function _fsg_search_step(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+32|0;r6=r5;r7=r5+16;r8=r5+24;HEAP32[r8>>2]=r2;r2=r1;r9=HEAP32[r1+12>>2];L1:do{if((HEAP8[r9+89|0]|0)==0){r10=r1+12|0;_memset(HEAP32[r9+40>>2],0,((HEAP32[HEAP32[r9+20>>2]+20>>2]+31|0)/32&-1)<<2)|0;HEAP32[r9+52>>2]=0;r11=r1+72|0;r12=r1+120|0;r13=r11;while(1){r14=HEAP32[r13>>2];if((r14|0)==0){r15=r11;break L1}r16=HEAP32[r14>>2];if((HEAP32[r16+112>>2]|0)!=(HEAP32[r12>>2]|0)){break}_acmod_activate_hmm(HEAP32[r10>>2],r16+40|0);r13=r14+8|0}___assert_fail(19832,11088,309,50456)}else{r15=r1+72|0}}while(0);r13=_acmod_score(r9,r8);r8=r1+152|0;HEAP32[r8>>2]=HEAP32[r8>>2]+HEAP32[r9+52>>2];HEAP32[HEAP32[r1+56>>2]+8>>2]=r13;r13=r1+68|0;HEAP32[r1+136>>2]=HEAP32[HEAP32[HEAP32[r13>>2]+4>>2]+12>>2];r9=HEAP32[r15>>2];r8=r1+120|0;do{if((r9|0)==0){_err_msg(4,11088,331,20256,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r8>>2],r4));STACKTOP=r4}else{r10=r9;r12=-536870912;r11=0;while(1){if((r10|0)==0){break}r14=HEAP32[r10>>2];if((HEAP32[r14+112>>2]|0)!=(HEAP32[r8>>2]|0)){r3=12;break}r16=_hmm_vit_eval(r14+40|0);r10=HEAP32[r10+8>>2];r12=(r16|0)>(r12|0)?r16:r12;r11=r11+1|0}if(r3==12){___assert_fail(19832,11088,340,50560)}r10=r1+148|0;HEAP32[r10>>2]=HEAP32[r10>>2]+r11;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],15576,r7)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=15576,r4));STACKTOP=r4;r17=0;r3=18}else{r10=HEAP32[r7>>2];if((r10|0)==0){r17=0;r3=18;break}r16=HEAP32[r10>>2];if((r16|0)==-1){r3=21}else{r17=r16;r3=18}}}while(0);do{if(r3==18){if((r11|0)<=(r17|0)){r3=21;break}r16=r1+92|0;r10=HEAPF32[r16>>2];if(r10<=.1){break}r14=r10*.8999999761581421;HEAPF32[r16>>2]=r14;HEAP32[r1+96>>2]=HEAP32[r1+80>>2]*r14&-1;HEAP32[r1+100>>2]=HEAP32[r1+84>>2]*r14&-1;HEAP32[r1+104>>2]=HEAP32[r1+88>>2]*r14&-1}}while(0);if(r3==21){HEAPF32[r1+92>>2]=1;HEAP32[r1+96>>2]=HEAP32[r1+80>>2];HEAP32[r1+100>>2]=HEAP32[r1+84>>2];HEAP32[r1+104>>2]=HEAP32[r1+88>>2]}r14=HEAP32[HEAP32[r1+64>>2]+36>>2];if((r11|0)>(r14|0)){_err_msg(5,11088,389,18856,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=HEAP32[r8>>2],HEAP32[r4+8>>2]=r11,HEAP32[r4+16>>2]=r14,r4));STACKTOP=r4;_exit(1)}else{HEAP32[r1+132>>2]=r12;break}}}while(0);r4=r1+76|0;if((HEAP32[r4>>2]|0)!=0){___assert_fail(42520,11088,501,50528)}r8=r1+132|0;r17=HEAP32[r8>>2];r7=r1+96|0;r9=r17+HEAP32[r7>>2]|0;r14=r17+HEAP32[r1+100>>2]|0;r16=r17+HEAP32[r1+104>>2]|0;r17=r1+120|0;r10=r17;r18=r1+60|0;r19=r1+16|0;r1=r15;L37:while(1){r20=HEAP32[r1>>2];if((r20|0)==0){r3=59;break}r21=HEAP32[r20>>2];L40:do{if((HEAP32[r21+104>>2]|0)>=(r9|0)){r22=r21+112|0;r23=HEAP32[r22>>2];r24=HEAP32[r10>>2];if((r23|0)==(r24|0)){HEAP32[r22>>2]=r23+1;r22=_glist_add_ptr(HEAP32[r4>>2],r21);HEAP32[r4>>2]=r22}else{if((r23|0)!=(r24+1|0)){r3=33;break L37}}r24=HEAP32[r21+84>>2];if((HEAP8[r21+35|0]|0)==0){if((r24|0)<(r14|0)){break}if((r21|0)==0){r3=37;break L37}r23=HEAP32[r10>>2]+1|0;r22=HEAP32[r8>>2]+HEAP32[r7>>2]|0;r25=r21+84|0;r26=r21+88|0;r27=r21;while(1){r28=HEAP32[r27>>2];if((r28|0)==0){break L40}r29=HEAP32[r25>>2]+HEAP32[r28+12>>2]|0;do{if((r29|0)>(r22|0)){r30=r28+44|0;if((r29|0)<=(HEAP32[r30>>2]|0)){break}if((HEAP32[r28+112>>2]|0)<(r23|0)){r31=_glist_add_ptr(HEAP32[r4>>2],r28);HEAP32[r4>>2]=r31}r31=HEAP32[r26>>2];HEAP32[r30>>2]=r29;HEAP32[r28+64>>2]=r31;HEAP32[r28+112>>2]=r23}}while(0);r27=r28+8|0}}else{if((r24|0)<(r16|0)){break}r27=HEAP32[r21>>2];if((r27|0)==0){r3=48;break L37}r23=HEAP32[r27+12>>2];if((r23|0)<=-1){r3=50;break L37}r26=HEAP32[r18>>2];r22=HEAP32[r26+20>>2];if((r22|0)==0){r3=53}else{if((HEAP32[r22+(((r23|0)/32&-1)<<2)>>2]&1<<(r23&31)|0)==0){r3=53}else{r32=0}}do{if(r3==53){r3=0;r22=_dict_wordid(HEAP32[r19>>2],HEAP32[HEAP32[r26+16>>2]+(r23<<2)>>2]);if((HEAP32[HEAP32[HEAP32[r19>>2]+8>>2]+(r22*20&-1)+8>>2]|0)==1){r32=0;break}_fsg_history_entry_add(HEAP32[r13>>2],r27,HEAP32[r10>>2],HEAP32[r21+84>>2],HEAP32[r21+88>>2],HEAPU16[r21+32>>1],r21+16|0);break L40}}while(0);while(1){if((r32|0)>=4){break}HEAP32[r6+(r32<<2)>>2]=-1;r32=r32+1|0}_fsg_history_entry_add(HEAP32[r13>>2],r27,HEAP32[r10>>2],HEAP32[r21+84>>2],HEAP32[r21+88>>2],HEAPU16[r21+32>>1],r6);break}}}while(0);r1=r20+8|0}if(r3==33){___assert_fail(24088,11088,520,50528)}else if(r3==37){___assert_fail(22728,11088,402,50480)}else if(r3==48){___assert_fail(21768,11088,443,50504)}else if(r3==50){___assert_fail(21264,11088,446,50504)}else if(r3==59){_fsg_history_end_frame(HEAP32[r13>>2]);_fsg_search_null_prop(r2);_fsg_history_end_frame(HEAP32[r13>>2]);_fsg_search_word_trans(r2);r2=r15;while(1){r13=HEAP32[r2>>2];if((r13|0)==0){break}r1=HEAP32[r13>>2];r6=HEAP32[r1+112>>2];r32=HEAP32[r10>>2];if((r6|0)==(r32|0)){r19=r1+40|0;HEAP32[r1+44>>2]=-536870912;HEAP32[r1+64>>2]=-1;r18=r1+117|0;r16=1;while(1){if((r16|0)>=(HEAPU8[r18]|0)){break}HEAP32[r19+4+(r16<<2)>>2]=-536870912;HEAP32[r19+24+(r16<<2)>>2]=-1;r16=r16+1|0}HEAP32[r1+84>>2]=-536870912;HEAP32[r1+88>>2]=-1;HEAP32[r1+104>>2]=-536870912;HEAP32[r1+112>>2]=-1}else{if((r6|0)!=(r32+1|0)){r3=67;break}}r2=r13+8|0}if(r3==67){___assert_fail(47192,11088,734,50416)}r3=HEAP32[r15>>2];while(1){if((r3|0)==0){break}r2=HEAP32[r3+8>>2];_free(r3);r3=r2}HEAP32[r15>>2]=HEAP32[r4>>2];HEAP32[r4>>2]=0;HEAP32[r17>>2]=HEAP32[r10>>2]+1;STACKTOP=r5;return 1}}function _fsg_search_null_prop(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r2=HEAP32[r1+60>>2];r3=HEAP32[r1+132>>2]+HEAP32[r1+104>>2]|0;r4=r1+68|0;r5=HEAP32[HEAP32[HEAP32[r4>>2]+4>>2]+12>>2];r6=r2+36|0;r7=HEAP32[r1+136>>2];while(1){if((r7|0)>=(r5|0)){break}r1=HEAP32[HEAP32[r4>>2]+4>>2];if((HEAP32[r1+12>>2]|0)>(r7|0)){r8=HEAP32[r1+8>>2];r9=(r7|0)/(r8|0)&-1;r10=r7-Math_imul(r9,r8)|0;r11=HEAP32[HEAP32[HEAP32[r1>>2]+(r9<<2)>>2]+(r10<<2)>>2]}else{r11=0}r10=HEAP32[r11>>2];r9=r11+4|0;r1=r11+12|0;r8=r11+16|0;r12=r11+20|0;r13=_fsg_model_arcs(r2,HEAP32[((r10|0)==0?r6:r10+4|0)>>2]);while(1){if((r13|0)==0){break}r10=HEAP32[r13+8>>2];if((r10|0)==0){r14=HEAP32[HEAP32[HEAP32[r13+4>>2]+4>>2]+8>>2]}else{r14=HEAP32[r10>>2]}r10=r14;do{if((HEAP32[r10+12>>2]|0)==-1){r15=HEAP32[r9>>2]+(HEAP32[r10+8>>2]>>10)|0;if((r15|0)<(r3|0)){break}_fsg_history_entry_add(HEAP32[r4>>2],r10,HEAP32[r1>>2],r15,r7,HEAP16[r8>>1]|0,r12)}}while(0);r13=_fsg_arciter_next(r13)}r7=r7+1|0}return}function _fsg_search_word_trans(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r2=0;r3=r1+68|0;r4=HEAP32[HEAP32[HEAP32[r3>>2]+4>>2]+12>>2];r5=HEAP32[r1+132>>2]+HEAP32[r1+96>>2]|0;r6=r1+120|0;r7=HEAP32[r6>>2]+1|0;r8=r1+60|0;r9=r1+64|0;r10=r1+76|0;r11=HEAP32[r1+136>>2];while(1){if((r11|0)>=(r4|0)){r2=22;break}r1=HEAP32[HEAP32[r3>>2]+4>>2];if((HEAP32[r1+12>>2]|0)<=(r11|0)){r2=5;break}r12=HEAP32[r1+8>>2];r13=(r11|0)/(r12|0)&-1;r14=r11-Math_imul(r13,r12)|0;r12=HEAP32[HEAP32[HEAP32[r1>>2]+(r13<<2)>>2]+(r14<<2)>>2];r14=r12;if((r12|0)==0){r2=5;break}r13=HEAP32[r12+4>>2];if((HEAP32[r6>>2]|0)!=(HEAP32[r12+12>>2]|0)){r2=7;break}r1=HEAP32[r12>>2];if((r1|0)==0){r15=HEAP32[r8>>2]+36|0}else{r15=r1+4|0}r1=HEAP16[r12+16>>1]|0;r12=r1>>5;r16=1<<(r1&31);r1=HEAP32[HEAP32[r9>>2]+28>>2]+(HEAP32[r15>>2]<<2)|0;while(1){r17=HEAP32[r1>>2];if((r17|0)==0){break}r18=HEAPU16[r17+32>>1];do{if((HEAP32[r17+16+(r12<<2)>>2]&r16|0)!=0){if((HEAP32[r14+20+(r18>>>5<<2)>>2]&1<<(r18&31)|0)==0){break}r19=r13+HEAP32[r17+12>>2]|0;if((r19|0)<=(r5|0)){break}r20=r17+44|0;if((r19|0)<=(HEAP32[r20>>2]|0)){break}if((HEAP32[r17+112>>2]|0)<(r7|0)){r21=_glist_add_ptr(HEAP32[r10>>2],r17);HEAP32[r10>>2]=r21}HEAP32[r20>>2]=r19;HEAP32[r17+64>>2]=r11;HEAP32[r17+112>>2]=r7}}while(0);r1=r17+8|0}r11=r11+1|0}if(r2==5){___assert_fail(26192,11088,617,50392)}else if(r2==7){___assert_fail(25128,11088,619,50392)}else if(r2==22){return}}function _fsg_search_start(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+16|0;r4=r3;r5=r1;HEAPF32[r1+92>>2]=1;HEAP32[r1+96>>2]=HEAP32[r1+80>>2];HEAP32[r1+100>>2]=HEAP32[r1+84>>2];HEAP32[r1+104>>2]=HEAP32[r1+88>>2];r6=_bin_mdef_ciphone_id(HEAP32[HEAP32[r1+12>>2]+20>>2],18312);r7=r1+72|0;if((HEAP32[r7>>2]|0)!=0){___assert_fail(43808,11088,773,50432)}r8=r1+76|0;if((HEAP32[r8>>2]|0)!=0){___assert_fail(42520,11088,774,50432)}r9=r1+68|0;_blkarray_list_reset(HEAP32[HEAP32[r9>>2]+4>>2]);r10=HEAP32[r9>>2];r9=r10;if((HEAP32[HEAP32[r10+4>>2]+12>>2]|0)!=0){___assert_fail(29656,12632,282,50688)}r11=HEAP32[r10+8>>2];r12=r11;if((r11|0)==0){___assert_fail(21096,12632,283,50688)}r11=HEAP32[HEAP32[r10>>2]+32>>2];r13=HEAP32[r10+12>>2];r10=0;L13:while(1){if((r10|0)<(r11|0)){r14=0}else{break}while(1){if((r14|0)>=(r13|0)){break}if((HEAP32[HEAP32[r12+(r10<<2)>>2]+(r14<<2)>>2]|0)!=0){r2=13;break L13}r14=r14+1|0}r10=r10+1|0}if(r2==13){___assert_fail(16456,12632,290,50688)}HEAP8[r1+124|0]=0;r2=0;while(1){if((r2|0)>=4){break}HEAP32[r4+(r2<<2)>>2]=-1;r2=r2+1|0}r2=r1+120|0;HEAP32[r2>>2]=-1;HEAP32[r1+132>>2]=0;_fsg_history_entry_add(r9,0,-1,0,-1,r6,r4);HEAP32[r1+136>>2]=0;_fsg_search_null_prop(r5);_fsg_search_word_trans(r5);HEAP32[r7>>2]=HEAP32[r8>>2];HEAP32[r8>>2]=0;HEAP32[r2>>2]=HEAP32[r2>>2]+1;HEAP32[r1+148>>2]=0;HEAP32[r1+152>>2]=0;STACKTOP=r3;return 0}function _fsg_search_finish(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r2=0;r3=STACKTOP;r4=HEAP32[r1+72>>2];while(1){if((r4|0)==0){break}r5=HEAP32[r4>>2];r6=r5+40|0;HEAP32[r5+44>>2]=-536870912;HEAP32[r5+64>>2]=-1;r7=r5+117|0;r8=1;while(1){if((r8|0)>=(HEAPU8[r7]|0)){break}HEAP32[r6+4+(r8<<2)>>2]=-536870912;HEAP32[r6+24+(r8<<2)>>2]=-1;r8=r8+1|0}HEAP32[r5+84>>2]=-536870912;HEAP32[r5+88>>2]=-1;HEAP32[r5+104>>2]=-536870912;HEAP32[r5+112>>2]=-1;r4=HEAP32[r4+8>>2]}r4=r1+76|0;r8=r4;while(1){r6=HEAP32[r8>>2];if((r6|0)==0){break}r7=HEAP32[r6>>2];r9=r7+40|0;HEAP32[r7+44>>2]=-536870912;HEAP32[r7+64>>2]=-1;r10=r7+117|0;r11=1;while(1){if((r11|0)>=(HEAPU8[r10]|0)){break}HEAP32[r9+4+(r11<<2)>>2]=-536870912;HEAP32[r9+24+(r11<<2)>>2]=-1;r11=r11+1|0}HEAP32[r7+84>>2]=-536870912;HEAP32[r7+88>>2]=-1;HEAP32[r7+104>>2]=-536870912;HEAP32[r7+112>>2]=-1;r8=r6+8|0}r8=r1+72|0;r11=HEAP32[r8>>2];while(1){if((r11|0)==0){break}r9=HEAP32[r11+8>>2];_free(r11);r11=r9}HEAP32[r8>>2]=0;r8=HEAP32[r4>>2];while(1){if((r8|0)==0){break}r11=HEAP32[r8+8>>2];_free(r8);r8=r11}HEAP32[r4>>2]=0;HEAP8[r1+124|0]=1;r4=HEAP32[HEAP32[HEAP32[r1+68>>2]+4>>2]+12>>2];r8=HEAP32[r1+120>>2];r11=HEAP32[r1+148>>2];if((r8|0)>0){r9=HEAP32[r1+152>>2];r12=(r4|0)/(r8|0)&-1;r13=r9;r14=(r11|0)/(r8|0)&-1;r15=(r9|0)/(r8|0)&-1;_err_msg(1,11088,843,41248,(r2=STACKTOP,STACKTOP=STACKTOP+56|0,HEAP32[r2>>2]=r8,HEAP32[r2+8>>2]=r11,HEAP32[r2+16>>2]=r14,HEAP32[r2+24>>2]=r13,HEAP32[r2+32>>2]=r15,HEAP32[r2+40>>2]=r4,HEAP32[r2+48>>2]=r12,r2));STACKTOP=r2;STACKTOP=r3;return 0}else{r12=0;r13=HEAP32[r1+152>>2];r14=0;r15=0;_err_msg(1,11088,843,41248,(r2=STACKTOP,STACKTOP=STACKTOP+56|0,HEAP32[r2>>2]=r8,HEAP32[r2+8>>2]=r11,HEAP32[r2+16>>2]=r14,HEAP32[r2+24>>2]=r13,HEAP32[r2+32>>2]=r15,HEAP32[r2+40>>2]=r4,HEAP32[r2+48>>2]=r12,r2));STACKTOP=r2;STACKTOP=r3;return 0}}function _fsg_search_hyp(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r4=0;r5=0;r6=STACKTOP;r7=r1;r8=HEAP32[r1+16>>2];r9=r1+124|0;r10=_fsg_search_find_exit(r7,HEAP32[r1+120>>2],HEAPU8[r9],r2,r3);if((r10|0)<1){r11=0;STACKTOP=r6;return r11}do{if((HEAP8[r7+125|0]|0)!=0){if((HEAP8[r9]|0)==0){break}r3=_fsg_search_lattice(r1);if((r3|0)==0){_err_msg(3,11088,967,40088,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r11=0;STACKTOP=r6;return r11}r12=_fsg_search_bestpath(r1,r2,0);if((r12|0)==0){_err_msg(3,11088,971,38576,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r11=0;STACKTOP=r6;return r11}else{r11=_ps_lattice_hyp(r3,r12);STACKTOP=r6;return r11}}}while(0);r5=r1+68|0;r2=r1+60|0;r9=r8+8|0;r7=0;r12=r10;while(1){if((r12|0)<=0){break}r3=HEAP32[HEAP32[r5>>2]+4>>2];r13=HEAP32[r3+8>>2];r14=(r12|0)/(r13|0)&-1;r15=r12-Math_imul(r14,r13)|0;r13=HEAP32[HEAP32[HEAP32[r3>>2]+(r14<<2)>>2]+(r15<<2)>>2];r15=HEAP32[r13+8>>2];r14=HEAP32[HEAP32[r13>>2]+12>>2];if((r14|0)<0){r7=r7;r12=r15;continue}r13=HEAP32[r2>>2];r3=HEAP32[r13+20>>2];if((r3|0)!=0){if((HEAP32[r3+(((r14|0)/32&-1)<<2)>>2]&1<<(r14&31)|0)!=0){r7=r7;r12=r15;continue}}r3=_dict_wordid(r8,HEAP32[HEAP32[r13+16>>2]+(r14<<2)>>2]);r14=HEAP32[r9>>2];r7=r7+(_strlen(HEAP32[r14+(HEAP32[r14+(r3*20&-1)+16>>2]*20&-1)>>2])+1)|0;r12=r15}r12=r1+24|0;_free(HEAP32[r12>>2]);if((r7|0)==0){HEAP32[r12>>2]=0;r11=0;STACKTOP=r6;return r11}r1=___ckd_calloc__(1,r7,11088,1e3);HEAP32[r12>>2]=r1;r15=r1+(r7-1)|0;r7=r10;L29:while(1){r10=r7;while(1){if((r10|0)<=0){break L29}r1=HEAP32[HEAP32[r5>>2]+4>>2];r3=HEAP32[r1+8>>2];r14=(r10|0)/(r3|0)&-1;r13=r10-Math_imul(r14,r3)|0;r3=HEAP32[HEAP32[HEAP32[r1>>2]+(r14<<2)>>2]+(r13<<2)>>2];r16=HEAP32[r3+8>>2];r17=HEAP32[HEAP32[r3>>2]+12>>2];if((r17|0)<0){r10=r16;continue}r18=HEAP32[r2>>2];r3=HEAP32[r18+20>>2];if((r3|0)==0){r4=24;break}if((HEAP32[r3+(((r17|0)/32&-1)<<2)>>2]&1<<(r17&31)|0)==0){r4=23;break}else{r10=r16}}if(r4==23){r4=0;if((r17|0)==-1){r19=37448}else{r4=24}}if(r4==24){r4=0;r19=HEAP32[HEAP32[r18+16>>2]+(r17<<2)>>2]}r10=_dict_wordid(r8,r19);r3=HEAP32[r9>>2];r13=HEAP32[r3+(HEAP32[r3+(r10*20&-1)+16>>2]*20&-1)>>2];r10=_strlen(r13);r3=r15+ -r10|0;_memcpy(r3,r13,r10)|0;if(r3>>>0<=HEAP32[r12>>2]>>>0){r15=r3;r7=r16;continue}r3=r15+~r10|0;HEAP8[r3]=32;r15=r3;r7=r16}r11=HEAP32[r12>>2];STACKTOP=r6;return r11}function _fsg_search_find_exit(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r6=0;r7=0;r8=STACKTOP;if((r2|0)==-1){r9=HEAP32[r1+120>>2]-1|0}else{r9=r2}r2=r1+68|0;r10=HEAP32[HEAP32[r2>>2]+4>>2];r11=HEAP32[r10+12>>2];r12=r11-1|0;r13=(r12|0)>0;r14=0;while(1){if(!r13){r15=r9;r16=r14;break}r17=HEAP32[r10+8>>2];r18=(r12|0)/(r17|0)&-1;r19=r12-Math_imul(r18,r17)|0;r17=HEAP32[HEAP32[HEAP32[r10>>2]+(r18<<2)>>2]+(r19<<2)>>2];r19=HEAP32[r17+12>>2];if((r19|0)>(r9|0)){r14=r17}else{r15=r19;r16=r17;break}}if((r11|0)<2){r20=r12;STACKTOP=r8;return r20}r14=HEAP32[r1+60>>2]+40|0;r1=(r3|0)==0;r3=-2147483648;r13=-1;r17=r15;r19=r12;r12=r16;while(1){if((r17|0)!=(r15|0)){r21=r3;r22=r13;break}r16=HEAP32[r12>>2];r18=HEAP32[r12+4>>2];if((r16|0)==0){r21=r3;r22=r13;break}if((r18|0)==(r3|0)){if((HEAP32[r16+4>>2]|0)==(HEAP32[r14>>2]|0)){r23=r3;r24=r19}else{r6=12}}else{r6=12}do{if(r6==12){r6=0;if((r18|0)>(r3|0)){if(r1){r23=r18;r24=r19;break}if((HEAP32[r16+4>>2]|0)==(HEAP32[r14>>2]|0)){r23=r18;r24=r19;break}}r23=r3;r24=r13}}while(0);r18=r19-1|0;if((r19|0)<1){r21=r23;r22=r24;break}if((r11|0)>(r18|0)){r16=HEAP32[r10+8>>2];r25=(r18|0)/(r16|0)&-1;r26=r18-Math_imul(r25,r16)|0;r27=HEAP32[HEAP32[HEAP32[r10>>2]+(r25<<2)>>2]+(r26<<2)>>2]}else{r27=0}r3=r23;r13=r24;r17=HEAP32[r27+12>>2];r19=r18;r12=r27}if((r22|0)==-1){_err_msg(4,11088,909,27160,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=r9,r7));STACKTOP=r7;r20=-1;STACKTOP=r8;return r20}if((r4|0)!=0){HEAP32[r4>>2]=r21}if((r5|0)==0){r20=r22;STACKTOP=r8;return r20}r21=HEAP32[HEAP32[r2>>2]+4>>2];r2=HEAP32[r21+8>>2];r4=(r22|0)/(r2|0)&-1;r7=r22-Math_imul(r4,r2)|0;HEAP32[r5>>2]=(HEAP32[HEAP32[HEAP32[HEAP32[HEAP32[r21>>2]+(r4<<2)>>2]+(r7<<2)>>2]>>2]+4>>2]|0)==(HEAP32[r14>>2]|0);r20=r22;STACKTOP=r8;return r20}function _fsg_search_lattice(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+16|0;r5=r4;r6=r4+8;r7=r1+28|0;r8=HEAP32[r7>>2];do{if((r8|0)==0){r9=0;r10=r1+120|0}else{r11=r1+120|0;if((HEAP32[r8+36>>2]|0)==(HEAP32[r11>>2]|0)){r12=r8}else{r9=r8;r10=r11;break}STACKTOP=r4;return r12}}while(0);_ps_lattice_free(r9);HEAP32[r7>>2]=0;r9=_ps_lattice_init_search(r1,HEAP32[r10>>2]);r8=r1+60|0;r11=HEAP32[r8>>2];r13=r11;r14=r1+68|0;r15=HEAP32[HEAP32[HEAP32[r14>>2]+4>>2]+12>>2];r16=0;while(1){r17=HEAP32[HEAP32[r14>>2]+4>>2];r18=HEAP32[r17+12>>2];if((r16|0)>=(r15|0)){break}if((r18|0)>(r16|0)){r19=HEAP32[r17+8>>2];r20=(r16|0)/(r19|0)&-1;r21=r16-Math_imul(r20,r19)|0;r22=HEAP32[HEAP32[HEAP32[r17>>2]+(r20<<2)>>2]+(r21<<2)>>2]}else{r22=0}r21=HEAP32[r22>>2];do{if((r21|0)!=0){r20=HEAP32[r21+12>>2];if((r20|0)==-1){break}r19=HEAP32[r22+8>>2];if((r19|0)==0){r23=0;r24=HEAP32[r22+4>>2]}else{r25=HEAP32[r17+8>>2];r26=(r19|0)/(r25|0)&-1;r27=r19-Math_imul(r26,r25)|0;r25=HEAP32[HEAP32[HEAP32[r17>>2]+(r26<<2)>>2]+(r27<<2)>>2];r23=HEAP32[r25+12>>2]+1|0;r24=HEAP32[r22+4>>2]-HEAP32[r25+4>>2]|0}_new_node(r9,r13,r23,HEAP32[r22+12>>2],r20,HEAP32[r21+4>>2],r24)}}while(0);r16=r16+1|0}r16=r9+24|0;r24=0;while(1){if((r24|0)>=(r18|0)){r28=r16;r29=0;r30=0;break}r22=HEAP32[HEAP32[r14>>2]+4>>2];if((HEAP32[r22+12>>2]|0)>(r24|0)){r23=HEAP32[r22+8>>2];r15=(r24|0)/(r23|0)&-1;r21=r24-Math_imul(r15,r23)|0;r31=HEAP32[HEAP32[HEAP32[r22>>2]+(r15<<2)>>2]+(r21<<2)>>2]}else{r31=0}r21=HEAP32[r31>>2];L27:do{if((r21|0)!=0){r15=HEAP32[r21+12>>2];if((r15|0)==-1){break}r23=HEAP32[r31+8>>2];if((r23|0)==0){r32=0;r33=HEAP32[r31+4>>2]}else{r17=HEAP32[r22+8>>2];r20=(r23|0)/(r17|0)&-1;r25=r23-Math_imul(r20,r17)|0;r17=HEAP32[HEAP32[HEAP32[r22>>2]+(r20<<2)>>2]+(r25<<2)>>2];r32=HEAP32[r17+12>>2]+1|0;r33=HEAP32[r31+4>>2]-HEAP32[r17+4>>2]|0}r17=HEAP32[r21+4>>2];r25=r16;L34:while(1){r34=HEAP32[r25>>2];if((r34|0)==0){break}do{if((HEAP32[r34+20>>2]|0)==(r32|0)){if((HEAP32[r34+4>>2]|0)!=(r15|0)){break}if((HEAP32[r34+28>>2]|0)==(r17|0)){break L34}}}while(0);r25=r34+48|0}r25=r31+12|0;r15=HEAP32[r25>>2]+1|0;r20=_fsg_model_arcs(r13,r17);while(1){if((r20|0)==0){break L27}r23=HEAP32[r20+8>>2];if((r23|0)==0){r35=HEAP32[HEAP32[HEAP32[r20+4>>2]+4>>2]+8>>2]}else{r35=HEAP32[r23>>2]}r23=r35;r27=HEAP32[r23+12>>2];r26=HEAP32[r23+4>>2];L49:do{if((r27|0)>-1){r23=r16;L70:while(1){r19=HEAP32[r23>>2];if((r19|0)==0){break L49}do{if((HEAP32[r19+20>>2]|0)==(r15|0)){if((HEAP32[r19+4>>2]|0)!=(r27|0)){break}if((HEAP32[r19+28>>2]|0)==(r26|0)){r36=r19;break L70}}}while(0);r23=r19+48|0}if((r36|0)==0){break}_ps_lattice_link(r9,r34,r36,r33,HEAP32[r25>>2])}else{r23=_fsg_model_arcs(r13,r26);while(1){if((r23|0)==0){break L49}r37=HEAP32[r23+8>>2];if((r37|0)==0){r38=HEAP32[HEAP32[HEAP32[r23+4>>2]+4>>2]+8>>2]}else{r38=HEAP32[r37>>2]}r37=r38;r39=HEAP32[r37+12>>2];L58:do{if((r39|0)!=-1){r40=HEAP32[r37+4>>2];r41=r16;L60:while(1){r42=HEAP32[r41>>2];if((r42|0)==0){break L58}do{if((HEAP32[r42+20>>2]|0)==(r15|0)){if((HEAP32[r42+4>>2]|0)!=(r39|0)){break}if((HEAP32[r42+28>>2]|0)==(r40|0)){r43=r42;break L60}}}while(0);r41=r42+48|0}if((r43|0)==0){break}_ps_lattice_link(r9,r34,r43,r33,HEAP32[r25>>2])}}while(0);r23=_fsg_arciter_next(r23)}}}while(0);r20=_fsg_arciter_next(r20)}}}while(0);r24=r24+1|0}while(1){r24=HEAP32[r28>>2];if((r24|0)==0){break}do{if((HEAP32[r24+20>>2]|0)==0){if((HEAP32[r24+36>>2]|0)==0){r44=r29;r45=r30;break}r33=HEAP32[r24+4>>2];if((r33|0)==-1){r46=37448}else{r46=HEAP32[HEAP32[HEAP32[r8>>2]+16>>2]+(r33<<2)>>2]}r33=HEAP32[r24+12>>2];r43=HEAP32[r24+16>>2];_err_msg(1,11088,1224,28952,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r46,HEAP32[r3+8>>2]=0,HEAP32[r3+16>>2]=r33,HEAP32[r3+24>>2]=r43,r3));STACKTOP=r3;r44=_glist_add_ptr(r29,r24);r45=r30+1|0}else{r44=r29;r45=r30}}while(0);r28=r24+48|0;r29=r44;r30=r45}L92:do{if((r30|0)==1){r47=HEAP32[r29>>2]}else{r45=_fsg_model_word_add(HEAP32[r8>>2],15496);r44=HEAP32[r8>>2];r28=HEAP32[r44+20>>2];if((r28|0)==0){r48=r44}else{r44=r28+(((r45|0)/32&-1)<<2)|0;HEAP32[r44>>2]=HEAP32[r44>>2]|1<<(r45&31);r48=HEAP32[r8>>2]}r44=_new_node(r9,r48,0,0,r45,-1,0);r45=r29;while(1){if((r45|0)==0){r47=r44;break L92}_ps_lattice_link(r9,r44,HEAP32[r45>>2],0,0);r45=HEAP32[r45+8>>2]}}}while(0);r48=r29;while(1){if((r48|0)==0){break}r29=HEAP32[r48+8>>2];_free(r48);r48=r29}r48=r9+28|0;HEAP32[r48>>2]=r47;do{if((r47|0)==0){_err_msg(3,11088,1476,36064,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3}else{r29=r9+36|0;r30=r16;r45=0;r44=0;while(1){r24=HEAP32[r30>>2];if((r24|0)==0){break}r28=HEAP32[r24+16>>2];do{if((r28|0)==(HEAP32[r29>>2]-1|0)){if((HEAP32[r24+40>>2]|0)==0){r49=r45;r50=r44;break}r46=HEAP32[r24+4>>2];if((r46|0)==-1){r51=37448}else{r51=HEAP32[HEAP32[HEAP32[r8>>2]+16>>2]+(r46<<2)>>2]}r46=HEAP32[r24+20>>2];r43=HEAP32[r24+12>>2];r33=HEAP32[r24+32>>2];_err_msg(1,11088,1263,30632,(r3=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r3>>2]=r51,HEAP32[r3+8>>2]=r46,HEAP32[r3+16>>2]=r43,HEAP32[r3+24>>2]=r28,HEAP32[r3+32>>2]=r33,r3));STACKTOP=r3;r49=_glist_add_ptr(r45,r24);r50=r44+1|0}else{r49=r45;r50=r44}}while(0);r30=r24+48|0;r45=r49;r44=r50}L120:do{if((r44|0)==1){r52=HEAP32[r45>>2]}else if((r44|0)==0){r30=r16;r29=0;r28=0;while(1){r33=HEAP32[r30>>2];if((r33|0)==0){break}r43=HEAP32[r33+16>>2];if((r43|0)>(r28|0)){r46=(HEAP32[r33+40>>2]|0)==0;r53=r46?r29:r33;r54=r46?r28:r43}else{r53=r29;r54=r28}r30=r33+48|0;r29=r53;r28=r54}if((r29|0)==0){r52=0;break}r28=HEAP32[r29+4>>2];if((r28|0)==-1){r55=37448}else{r55=HEAP32[HEAP32[HEAP32[r8>>2]+16>>2]+(r28<<2)>>2]}r28=HEAP32[r29+20>>2];r30=HEAP32[r29+12>>2];r24=HEAP32[r29+16>>2];r33=HEAP32[r29+32>>2];_err_msg(1,11088,1288,30632,(r3=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r3>>2]=r55,HEAP32[r3+8>>2]=r28,HEAP32[r3+16>>2]=r30,HEAP32[r3+24>>2]=r24,HEAP32[r3+32>>2]=r33,r3));STACKTOP=r3;r52=r29}else{r33=_fsg_model_word_add(HEAP32[r8>>2],12968);r24=HEAP32[r8>>2];r30=HEAP32[r24+20>>2];if((r30|0)==0){r56=r24}else{r24=r30+(((r33|0)/32&-1)<<2)|0;HEAP32[r24>>2]=HEAP32[r24>>2]|1<<(r33&31);r56=HEAP32[r8>>2]}r24=HEAP32[r10>>2];r30=_new_node(r9,r56,r24,r24,r33,-1,0);r33=r45;while(1){if((r33|0)==0){r52=r30;break L120}r24=HEAP32[r33>>2];_ps_lattice_link(r9,r24,r30,HEAP32[r24+32>>2],HEAP32[r10>>2]);r33=HEAP32[r33+8>>2]}}}while(0);r44=r45;while(1){if((r44|0)==0){break}r33=HEAP32[r44+8>>2];_free(r44);r44=r33}r44=r9+32|0;HEAP32[r44>>2]=r52;if((r52|0)==0){_err_msg(3,11088,1480,35184,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break}r45=HEAP32[r48>>2];r33=HEAP32[r45+4>>2];if((r33|0)==-1){r57=37448}else{r57=HEAP32[HEAP32[r11+16>>2]+(r33<<2)>>2]}r33=HEAP32[r45+20>>2];r45=HEAP32[r52+4>>2];r30=r11+16|0;if((r45|0)==-1){r58=37448}else{r58=HEAP32[HEAP32[r30>>2]+(r45<<2)>>2]}r45=HEAP32[r52+20>>2];_err_msg(1,11088,1487,25992,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r57,HEAP32[r3+8>>2]=r33,HEAP32[r3+16>>2]=r58,HEAP32[r3+24>>2]=r45,r3));STACKTOP=r3;r45=r9+8|0;r33=r16;while(1){r29=HEAP32[r33>>2];if((r29|0)==0){break}r24=r29+4|0;r28=HEAP32[r24>>2];if((r28|0)==-1){r59=37448}else{r59=HEAP32[HEAP32[r30>>2]+(r28<<2)>>2]}r28=_dict_wordid(HEAP32[HEAP32[r45>>2]+16>>2],r59);HEAP32[r24>>2]=r28;HEAP32[r29+8>>2]=HEAP32[HEAP32[HEAP32[HEAP32[r45>>2]+16>>2]+8>>2]+(r28*20&-1)+16>>2];r33=r29+48|0}r33=HEAP32[r44>>2];HEAP16[r33+24>>1]=1;r45=_glist_add_ptr(0,r33);L161:while(1){if((r45|0)==0){break}r33=HEAP32[r45>>2];r30=HEAP32[r45+8>>2];_free(r45);r29=r33+40|0;r33=r30;while(1){r30=HEAP32[r29>>2];if((r30|0)==0){r45=r33;continue L161}r28=HEAP32[HEAP32[r30>>2]>>2];r24=r28+24|0;if((HEAP16[r24>>1]|0)==0){HEAP16[r24>>1]=1;r60=_glist_add_ptr(r33,r28)}else{r60=r33}r29=r30+4|0;r33=r60}}_ps_lattice_delete_unreachable(r9);r45=r11+28|0;r44=HEAP32[r45>>2];r33=r44;r29=r1+8|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r29>>2]+4>>2],14160,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=14160,r3));STACKTOP=r3;r2=127}else{r30=HEAP32[r5>>2];if((r30|0)==0){r2=127;break}r28=HEAPF64[r30>>3];if(r28<=0){r2=127;break}r30=Math_log(r28);r61=(r30*HEAPF64[r44+48>>3]&-1)>>HEAP8[r33+9|0]}}while(0);if(r2==127){r61=HEAP32[r44+64>>2]}r33=r11+44|0;r30=(r61*HEAPF32[r33>>2]&-1)>>10;r28=HEAP32[r45>>2];r24=r28;do{if((_hash_table_lookup(HEAP32[HEAP32[r29>>2]+4>>2],13848,r6)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=13848,r3));STACKTOP=r3;r2=133}else{r43=HEAP32[r6>>2];if((r43|0)==0){r2=133;break}r46=HEAPF64[r43>>3];if(r46<=0){r2=133;break}r43=Math_log(r46);r62=(r43*HEAPF64[r28+48>>3]&-1)>>HEAP8[r24+9|0]}}while(0);if(r2==133){r62=HEAP32[r28+64>>2]}_ps_lattice_bypass_fillers(r9,r30,(r62*HEAPF32[r33>>2]&-1)>>10);HEAP32[r7>>2]=r9;r12=r9;STACKTOP=r4;return r12}}while(0);_ps_lattice_free(r9);r12=0;STACKTOP=r4;return r12}function _fsg_search_bestpath(r1,r2,r3){var r4,r5,r6,r7,r8;r3=r1+32|0;do{if((HEAP32[r3>>2]|0)==0){r4=r1+28|0;r5=r1+128|0;r6=_ps_lattice_bestpath(HEAP32[r4>>2],0,1,HEAPF32[r5>>2]);HEAP32[r3>>2]=r6;if((r6|0)==0){r7=0;return r7}r6=r1+36|0;if((HEAP32[r6>>2]|0)!=0){break}r8=_ps_lattice_posterior(HEAP32[r4>>2],0,HEAPF32[r5>>2]);HEAP32[r6>>2]=r8}}while(0);if((r2|0)!=0){HEAP32[r2>>2]=HEAP32[HEAP32[r3>>2]+16>>2]+HEAP32[HEAP32[r1+28>>2]+44>>2]}r7=HEAP32[r3>>2];return r7}function _new_node(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14;r2=0;r8=r1+24|0;r9=r8;L1:while(1){r10=HEAP32[r9>>2];if((r10|0)==0){break}do{if((HEAP32[r10+20>>2]|0)==(r3|0)){if((HEAP32[r10+4>>2]|0)!=(r5|0)){break}if((HEAP32[r10+28>>2]|0)==(r6|0)){r11=r10;r2=7;break L1}}}while(0);r9=r10+48|0}do{if(r2==7){if((r11|0)==0){break}r9=r11+16|0;r12=HEAP32[r9>>2];if((r12|0)==-1|(r12|0)<(r4|0)){HEAP32[r9>>2]=r4}r9=r11+12|0;r12=HEAP32[r9>>2];if((r12|0)==-1|(r12|0)>(r4|0)){HEAP32[r9>>2]=r4}if((HEAP32[r11+32>>2]|0)>=(r7|0)){r13=r11;return r13}HEAP32[r11+32>>2]=r7;r13=r11;return r13}}while(0);r11=HEAP32[r1+56>>2];r2=r11|0;r9=HEAP32[r2>>2];if((r9|0)==0){_listelem_add_block(r11,11088,1194);r14=HEAP32[r2>>2]}else{r14=r9}HEAP32[r2>>2]=HEAP32[r14>>2];r2=r11+24|0;HEAP32[r2>>2]=HEAP32[r2>>2]+1;r2=r14;HEAP32[r14+4>>2]=r5;HEAP32[r14+20>>2]=r3;HEAP32[r14+16>>2]=r4;HEAP32[r14+12>>2]=r4;HEAP16[r14+24>>1]=0;HEAP32[r14+40>>2]=0;HEAP32[r14+36>>2]=0;HEAP32[r14+32>>2]=r7;HEAP32[r14+28>>2]=r6;HEAP32[r14+48>>2]=HEAP32[r8>>2];HEAP32[r8>>2]=r2;r8=r1+40|0;HEAP16[r8>>1]=HEAP16[r8>>1]+1;r13=r2;return r13}function _fsg_search_prob(r1){var r2;do{if((HEAP8[r1+125|0]|0)==0){r2=0}else{if((HEAP8[r1+124|0]|0)==0){r2=0;break}if((_fsg_search_lattice(r1)|0)==0){r2=0;break}if((_fsg_search_bestpath(r1,0,1)|0)==0){r2=0;break}r2=HEAP32[r1+36>>2]}}while(0);return r2}function _fsg_search_seg_iter(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;r3=0;r4=STACKTOP;r5=r1;r6=_fsg_search_find_exit(r5,HEAP32[r1+120>>2],HEAPU8[r1+124|0],r2,0);if((r6|0)<1){r7=0;STACKTOP=r4;return r7}do{if((HEAP8[r5+125|0]|0)!=0){if((HEAP8[r1+124|0]|0)==0){break}r8=_fsg_search_lattice(r1);if((r8|0)==0){r7=0;STACKTOP=r4;return r7}r9=_fsg_search_bestpath(r1,r2,1);if((r9|0)==0){r7=0;STACKTOP=r4;return r7}r7=_ps_lattice_seg_iter(r8,r9,1);STACKTOP=r4;return r7}}while(0);r2=_malloc(48);if((r2|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=48,HEAP32[r3+16>>2]=11088,HEAP32[r3+24>>2]=1111,r3));STACKTOP=r3}if((HEAP32[r2-4>>2]&3|0)!=0){_memset(r2,0,48)|0}HEAP32[r2>>2]=4960;HEAP32[r2+4>>2]=r1;HEAPF32[r2+36>>2]=1;r3=r2+44|0;HEAP16[r3>>1]=0;r5=r1+68|0;r1=r6;r9=0;while(1){if((r1|0)<=0){break}r8=HEAP32[HEAP32[r5>>2]+4>>2];r10=HEAP32[r8+8>>2];r11=(r1|0)/(r10|0)&-1;r12=r1-Math_imul(r11,r10)|0;r10=HEAP32[HEAP32[HEAP32[HEAP32[r8>>2]+(r11<<2)>>2]+(r12<<2)>>2]+8>>2];r12=r9+1&65535;HEAP16[r3>>1]=r12;r1=r10;r9=r12}if(r9<<16>>16==0){_free(r2);r7=0;STACKTOP=r4;return r7}r1=___ckd_calloc__(r9<<16>>16,4,11088,1126);r9=r2+40|0;HEAP32[r9>>2]=r1;r1=r6;r6=HEAP16[r3>>1]|0;while(1){r3=r6-1|0;if((r1|0)<=0){break}r12=HEAP32[HEAP32[r5>>2]+4>>2];if((HEAP32[r12+12>>2]|0)>(r1|0)){r10=HEAP32[r12+8>>2];r11=(r1|0)/(r10|0)&-1;r8=r1-Math_imul(r11,r10)|0;r13=HEAP32[HEAP32[HEAP32[r12>>2]+(r11<<2)>>2]+(r8<<2)>>2]}else{r13=0}HEAP32[HEAP32[r9>>2]+(r3<<2)>>2]=r13;r1=HEAP32[r13+8>>2];r6=r3}r6=r2;_fsg_seg_bp2itor(r6,HEAP32[HEAP32[r9>>2]>>2]);r7=r6;STACKTOP=r4;return r7}function _fsg_seg_bp2itor(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11;r3=HEAP32[r1+4>>2];r4=HEAP32[r2+8>>2];do{if((r4|0)>-1){r5=HEAP32[HEAP32[r3+68>>2]+4>>2];if((HEAP32[r5+12>>2]|0)<=(r4|0)){r6=0;break}r7=HEAP32[r5+8>>2];r8=(r4|0)/(r7|0)&-1;r9=r4-Math_imul(r8,r7)|0;r6=HEAP32[HEAP32[HEAP32[r5>>2]+(r8<<2)>>2]+(r9<<2)>>2]}else{r6=0}}while(0);r4=r2|0;r9=HEAP32[HEAP32[r4>>2]+12>>2];if((r9|0)==-1){r10=37448}else{r10=HEAP32[HEAP32[HEAP32[r3+60>>2]+16>>2]+(r9<<2)>>2]}HEAP32[r1+8>>2]=r10;r10=HEAP32[r2+12>>2];HEAP32[r1+16>>2]=r10;r9=(r6|0)==0;if(r9){r11=0}else{r11=HEAP32[r6+12>>2]+1|0}HEAP32[r1+12>>2]=(r11|0)>(r10|0)?r10:r11;HEAP32[r1+28>>2]=0;HEAP32[r1+32>>2]=1;r11=HEAP32[HEAP32[r4>>2]+8>>2]>>10;HEAP32[r1+24>>2]=r11;r4=HEAP32[r2+4>>2];if(r9){HEAP32[r1+20>>2]=r4-r11;return}else{HEAP32[r1+20>>2]=r4-HEAP32[r6+4>>2]-r11;return}}function _fsg_seg_next(r1){var r2,r3,r4;r2=r1+46|0;r3=HEAP16[r2>>1]+1&65535;HEAP16[r2>>1]=r3;if(r3<<16>>16==(HEAP16[r1+44>>1]|0)){_free(HEAP32[r1+40>>2]);_free(r1);r4=0;return r4}else{_fsg_seg_bp2itor(r1,HEAP32[HEAP32[r1+40>>2]+(r3<<16>>16<<2)>>2]);r4=r1;return r4}}function _fsg_seg_free(r1){_free(HEAP32[r1+40>>2]);_free(r1);return}function _hmm_context_init(r1,r2,r3){var r4,r5,r6,r7;r4=0;r5=STACKTOP;if((r1|0)<=0){___assert_fail(10392,39760,63,50272)}if((r1|0)>5){_err_msg(4,39760,65,28808,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=5,r4));STACKTOP=r4;r6=0;STACKTOP=r5;return r6}r7=_malloc(28);if((r7|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=28,HEAP32[r4+16>>2]=39760,HEAP32[r4+24>>2]=69,r4));STACKTOP=r4}if((HEAP32[r7-4>>2]&3|0)!=0){_memset(r7,0,28)|0}HEAP32[r7>>2]=r1;HEAP32[r7+4>>2]=r2;HEAP32[r7+8>>2]=0;HEAP32[r7+12>>2]=r3;r3=___ckd_calloc__(r1,4,39760,74);HEAP32[r7+16>>2]=r3;r6=r7;STACKTOP=r5;return r6}function _hmm_init(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10;HEAP32[r2>>2]=r1;HEAP8[r2+76|0]=r3;r6=HEAP32[r1>>2];r7=r6&255;r8=r2+77|0;HEAP8[r8]=r7;L1:do{if((r3|0)==0){HEAP16[r2+52>>1]=r4;_memcpy(r2+54|0,HEAP32[HEAP32[r1+12>>2]+(r4<<2)>>2],r6<<1&510)|0}else{HEAP16[r2+52>>1]=-1;HEAP16[r2+54>>1]=r4;r9=1;r10=r7;while(1){if((r9|0)>=(r10&255|0)){break L1}HEAP16[r2+54+(r9<<1)>>1]=-1;r9=r9+1|0;r10=HEAP8[r8]}}}while(0);HEAP16[r2+68>>1]=r5;HEAP32[r2+4>>2]=-536870912;HEAP32[r2+24>>2]=-1;r5=1;while(1){if((r5|0)>=(HEAPU8[r8]|0)){break}HEAP32[r2+4+(r5<<2)>>2]=-536870912;HEAP32[r2+24+(r5<<2)>>2]=-1;r5=r5+1|0}HEAP32[r2+44>>2]=-536870912;HEAP32[r2+48>>2]=-1;HEAP32[r2+64>>2]=-536870912;HEAP32[r2+72>>2]=-1;return}function _hmm_vit_eval(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61;r2=HEAP8[r1+77|0];r3=r2<<24>>24==5;if((HEAP8[r1+76|0]|0)==0){if(!r3){if(r2<<24>>24!=3){r4=_hmm_vit_eval_anytopo(r1);return r4}r5=HEAP32[r1>>2];r6=HEAP32[r5+8>>2];r7=HEAP32[HEAP32[HEAP32[r5+4>>2]+(HEAP16[r1+68>>1]<<2)>>2]>>2];r5=r1+12|0;r8=HEAP32[r5>>2]-HEAP16[r6+(HEAPU16[r1+58>>1]<<1)>>1]|0;r9=r1+8|0;r10=HEAP32[r9>>2]-HEAP16[r6+(HEAPU16[r1+56>>1]<<1)>>1]|0;r11=r1+4|0;r12=HEAP32[r11>>2]-HEAP16[r6+(HEAPU16[r1+54>>1]<<1)>>1]|0;if((r10|0)>-536870912){r6=r8-HEAPU8[r7+11|0]|0;r13=HEAPU8[r7+7|0];r14=(-r13|0)>-255?r10-r13|0:-2147483648;if((r6|0)>(r14|0)){HEAP32[r1+48>>2]=HEAP32[r1+32>>2];r15=r6}else{HEAP32[r1+48>>2]=HEAP32[r1+28>>2];r15=r14}r6=(r15|0)<-536870912?-536870912:r15;HEAP32[r1+44>>2]=r6;r16=r6;r17=r14}else{r16=-536870912;r17=-2147483648}r14=r8-HEAPU8[r7+10|0]|0;r8=r10-HEAPU8[r7+6|0]|0;r6=HEAPU8[r7+2|0];r15=(-r6|0)>-255?r12-r6|0:r17;do{if((r14|0)>(r8|0)){if((r15|0)<=(r14|0)){r18=r14;break}HEAP32[r1+32>>2]=HEAP32[r1+24>>2];r18=r15}else{if((r15|0)>(r8|0)){HEAP32[r1+32>>2]=HEAP32[r1+24>>2];r18=r15;break}else{HEAP32[r1+32>>2]=HEAP32[r1+28>>2];r18=r8;break}}}while(0);r8=(r18|0)<-536870912?-536870912:r18;r18=(r8|0)>(r16|0)?r8:r16;HEAP32[r5>>2]=r8;r8=r10-HEAPU8[r7+5|0]|0;r10=r12-HEAPU8[r7+1|0]|0;if((r8|0)>(r10|0)){r19=r8}else{HEAP32[r1+28>>2]=HEAP32[r1+24>>2];r19=r10}r10=(r19|0)<-536870912?-536870912:r19;r19=(r10|0)>(r18|0)?r10:r18;HEAP32[r9>>2]=r10;r10=r12-HEAPU8[r7]|0;r7=(r10|0)<-536870912?-536870912:r10;r10=(r7|0)>(r19|0)?r7:r19;HEAP32[r11>>2]=r7;HEAP32[r1+64>>2]=r10;r4=r10;return r4}r10=HEAP32[r1>>2];r7=HEAP32[r10+8>>2];r11=HEAP32[HEAP32[HEAP32[r10+4>>2]+(HEAP16[r1+68>>1]<<2)>>2]>>2];r10=r1+54|0;r19=r1+20|0;r12=HEAP32[r19>>2]-HEAP16[r7+(HEAPU16[r1+62>>1]<<1)>>1]|0;r9=r1+16|0;r18=HEAP32[r9>>2]-HEAP16[r7+(HEAPU16[r1+60>>1]<<1)>>1]|0;if((r18|0)>-536870912){r8=r12-HEAPU8[r11+29|0]|0;r5=r18-HEAPU8[r11+23|0]|0;if((r8|0)>(r5|0)){HEAP32[r1+48>>2]=HEAP32[r1+40>>2];r20=r8}else{HEAP32[r1+48>>2]=HEAP32[r1+36>>2];r20=r5}r5=(r20|0)<-536870912?-536870912:r20;HEAP32[r1+44>>2]=r5;r21=r5}else{r21=-536870912}r5=r1+12|0;r20=HEAP32[r5>>2]-HEAP16[r7+(HEAPU16[r1+58>>1]<<1)>>1]|0;if((r20|0)>-536870912){r8=r12-HEAPU8[r11+28|0]|0;r12=r18-HEAPU8[r11+22|0]|0;r16=r20-HEAPU8[r11+16|0]|0;do{if((r8|0)>(r12|0)){if((r16|0)<=(r8|0)){r22=r8;break}HEAP32[r1+40>>2]=HEAP32[r1+32>>2];r22=r16}else{if((r16|0)>(r12|0)){HEAP32[r1+40>>2]=HEAP32[r1+32>>2];r22=r16;break}else{HEAP32[r1+40>>2]=HEAP32[r1+36>>2];r22=r12;break}}}while(0);r12=(r22|0)<-536870912?-536870912:r22;HEAP32[r19>>2]=r12;r23=(r12|0)>(r21|0)?r12:r21}else{r23=r21}r21=r1+8|0;r12=HEAP32[r21>>2]-HEAP16[r7+(HEAPU16[r1+56>>1]<<1)>>1]|0;if((r12|0)>-536870912){r19=r18-HEAPU8[r11+21|0]|0;r18=r20-HEAPU8[r11+15|0]|0;r22=r12-HEAPU8[r11+9|0]|0;do{if((r19|0)>(r18|0)){if((r22|0)<=(r19|0)){r24=r19;break}HEAP32[r1+36>>2]=HEAP32[r1+28>>2];r24=r22}else{if((r22|0)>(r18|0)){HEAP32[r1+36>>2]=HEAP32[r1+28>>2];r24=r22;break}else{HEAP32[r1+36>>2]=HEAP32[r1+32>>2];r24=r18;break}}}while(0);r18=(r24|0)<-536870912?-536870912:r24;HEAP32[r9>>2]=r18;r25=(r18|0)>(r23|0)?r18:r23}else{r25=r23}r23=r1+4|0;r18=HEAP32[r23>>2]-HEAP16[r7+(HEAPU16[r10>>1]<<1)>>1]|0;r10=r20-HEAPU8[r11+14|0]|0;r20=r12-HEAPU8[r11+8|0]|0;r7=r18-HEAPU8[r11+2|0]|0;do{if((r10|0)>(r20|0)){if((r7|0)<=(r10|0)){r26=r10;break}HEAP32[r1+32>>2]=HEAP32[r1+24>>2];r26=r7}else{if((r7|0)>(r20|0)){HEAP32[r1+32>>2]=HEAP32[r1+24>>2];r26=r7;break}else{HEAP32[r1+32>>2]=HEAP32[r1+28>>2];r26=r20;break}}}while(0);r20=(r26|0)<-536870912?-536870912:r26;r26=(r20|0)>(r25|0)?r20:r25;HEAP32[r5>>2]=r20;r20=r12-HEAPU8[r11+7|0]|0;r12=r18-HEAPU8[r11+1|0]|0;if((r20|0)>(r12|0)){r27=r20}else{HEAP32[r1+28>>2]=HEAP32[r1+24>>2];r27=r12}r12=(r27|0)<-536870912?-536870912:r27;r27=(r12|0)>(r26|0)?r12:r26;HEAP32[r21>>2]=r12;r12=r18-HEAPU8[r11]|0;r11=(r12|0)<-536870912?-536870912:r12;r12=(r11|0)>(r27|0)?r11:r27;HEAP32[r23>>2]=r11;HEAP32[r1+64>>2]=r12;r4=r12;return r4}if(!r3){if(r2<<24>>24!=3){r4=_hmm_vit_eval_anytopo(r1);return r4}r2=HEAP32[r1>>2];r3=HEAP32[HEAP32[HEAP32[r2+4>>2]+(HEAP16[r1+68>>1]<<2)>>2]>>2];r12=HEAP32[r2+8>>2];r11=HEAP32[r2+12>>2];r2=HEAP16[r1+58>>1];if(r2<<16>>16==-1){r28=-536870912;r29=-536870912}else{r23=HEAP32[r1+12>>2]-HEAP16[r12+(HEAPU16[HEAP32[r11+((r2&65535)<<2)>>2]+4>>1]<<1)>>1]|0;r28=r23-HEAPU8[r3+11|0]|0;r29=r23}r23=r1+56|0;r2=HEAP16[r23>>1];if(r2<<16>>16==-1){r30=-536870912;r31=-536870912;r32=-1}else{r27=HEAP32[r1+8>>2]-HEAP16[r12+(HEAPU16[HEAP32[r11+((r2&65535)<<2)>>2]+2>>1]<<1)>>1]|0;r18=HEAPU8[r3+7|0];r30=(-r18|0)>-255?r27-r18|0:-2147483648;r31=r27;r32=r2}if((r28|0)>(r30|0)){HEAP32[r1+48>>2]=HEAP32[r1+32>>2];r33=r28}else{HEAP32[r1+48>>2]=HEAP32[r1+28>>2];r33=r30}r28=(r33|0)<-536870912?-536870912:r33;HEAP32[r1+44>>2]=r28;r33=r1+4|0;r2=HEAP16[r1+54>>1];r27=HEAP32[r33>>2]-HEAP16[r12+(HEAPU16[HEAP32[r11+((r2&65535)<<2)>>2]>>1]<<1)>>1]|0;if((r29|0)==-536870912){r34=-536870912}else{r34=r29-HEAPU8[r3+10|0]|0}r29=(r31|0)==-536870912;if(r29){r35=-536870912}else{r35=r31-HEAPU8[r3+6|0]|0}r11=HEAPU8[r3+2|0];r12=(-r11|0)>-255?r27-r11|0:r30;do{if((r34|0)>(r35|0)){if((r12|0)<=(r34|0)){r36=r34;break}HEAP32[r1+32>>2]=HEAP32[r1+24>>2];HEAP16[r1+58>>1]=r2;r36=r12}else{if((r12|0)>(r35|0)){HEAP32[r1+32>>2]=HEAP32[r1+24>>2];HEAP16[r1+58>>1]=r2;r36=r12;break}else{HEAP32[r1+32>>2]=HEAP32[r1+28>>2];HEAP16[r1+58>>1]=r32;r36=r35;break}}}while(0);r35=(r36|0)<-536870912?-536870912:r36;r36=(r35|0)>(r28|0)?r35:r28;HEAP32[r1+12>>2]=r35;if(r29){r37=-536870912}else{r37=r31-HEAPU8[r3+5|0]|0}r31=r27-HEAPU8[r3+1|0]|0;if((r37|0)>(r31|0)){r38=r37}else{HEAP32[r1+28>>2]=HEAP32[r1+24>>2];HEAP16[r23>>1]=r2;r38=r31}r31=(r38|0)<-536870912?-536870912:r38;r38=(r31|0)>(r36|0)?r31:r36;HEAP32[r1+8>>2]=r31;r31=r27-HEAPU8[r3]|0;r3=(r31|0)<-536870912?-536870912:r31;r31=(r3|0)>(r38|0)?r3:r38;HEAP32[r33>>2]=r3;HEAP32[r1+64>>2]=r31;r4=r31;return r4}r31=HEAP32[r1>>2];r3=HEAP32[HEAP32[HEAP32[r31+4>>2]+(HEAP16[r1+68>>1]<<2)>>2]>>2];r33=HEAP32[r31+8>>2];r38=HEAP32[r31+12>>2];r31=r1+54|0;r27=HEAP16[r1+62>>1];if(r27<<16>>16==-1){r39=-536870912;r40=-536870912}else{r36=HEAP32[r1+20>>2]-HEAP16[r33+(HEAPU16[HEAP32[r38+((r27&65535)<<2)>>2]+8>>1]<<1)>>1]|0;r39=r36-HEAPU8[r3+29|0]|0;r40=r36}r36=r1+60|0;r27=HEAP16[r36>>1];if(r27<<16>>16==-1){r41=-536870912;r42=-536870912;r43=-1}else{r2=HEAP32[r1+16>>2]-HEAP16[r33+(HEAPU16[HEAP32[r38+((r27&65535)<<2)>>2]+6>>1]<<1)>>1]|0;r41=r2-HEAPU8[r3+23|0]|0;r42=r2;r43=r27}if((r39|0)>(r41|0)){HEAP32[r1+48>>2]=HEAP32[r1+40>>2];r44=r39}else{HEAP32[r1+48>>2]=HEAP32[r1+36>>2];r44=r41}r41=(r44|0)<-536870912?-536870912:r44;HEAP32[r1+44>>2]=r41;r44=r1+58|0;r39=HEAP16[r44>>1];if(r39<<16>>16==-1){r45=-536870912;r46=-536870912;r47=-1}else{r27=HEAP32[r1+12>>2]-HEAP16[r33+(HEAPU16[HEAP32[r38+((r39&65535)<<2)>>2]+4>>1]<<1)>>1]|0;r45=r27-HEAPU8[r3+16|0]|0;r46=r27;r47=r39}if((r40|0)==-536870912){r48=-536870912}else{r48=r40-HEAPU8[r3+28|0]|0}r40=(r42|0)==-536870912;if(r40){r49=-536870912}else{r49=r42-HEAPU8[r3+22|0]|0}do{if((r48|0)>(r49|0)){if((r45|0)<=(r48|0)){r50=r48;break}HEAP32[r1+40>>2]=HEAP32[r1+32>>2];HEAP16[r1+62>>1]=r47;r50=r45}else{if((r45|0)>(r49|0)){HEAP32[r1+40>>2]=HEAP32[r1+32>>2];HEAP16[r1+62>>1]=r47;r50=r45;break}else{HEAP32[r1+40>>2]=HEAP32[r1+36>>2];HEAP16[r1+62>>1]=r43;r50=r49;break}}}while(0);r49=(r50|0)<-536870912?-536870912:r50;r50=(r49|0)>(r41|0)?r49:r41;HEAP32[r1+20>>2]=r49;r49=r1+56|0;r41=HEAP16[r49>>1];if(r41<<16>>16==-1){r51=-536870912;r52=-536870912;r53=-1}else{r43=HEAP32[r1+8>>2]-HEAP16[r33+(HEAPU16[HEAP32[r38+((r41&65535)<<2)>>2]+2>>1]<<1)>>1]|0;r51=r43-HEAPU8[r3+9|0]|0;r52=r43;r53=r41}if(r40){r54=-536870912}else{r54=r42-HEAPU8[r3+21|0]|0}r42=(r46|0)==-536870912;if(r42){r55=-536870912}else{r55=r46-HEAPU8[r3+15|0]|0}do{if((r54|0)>(r55|0)){if((r51|0)<=(r54|0)){r56=r54;break}HEAP32[r1+36>>2]=HEAP32[r1+28>>2];HEAP16[r36>>1]=r53;r56=r51}else{if((r51|0)>(r55|0)){HEAP32[r1+36>>2]=HEAP32[r1+28>>2];HEAP16[r36>>1]=r53;r56=r51;break}else{HEAP32[r1+36>>2]=HEAP32[r1+32>>2];HEAP16[r36>>1]=r47;r56=r55;break}}}while(0);r55=(r56|0)<-536870912?-536870912:r56;r56=(r55|0)>(r50|0)?r55:r50;HEAP32[r1+16>>2]=r55;r55=r1+4|0;r50=HEAP16[r31>>1];r31=HEAP32[r55>>2]-HEAP16[r33+(HEAPU16[HEAP32[r38+((r50&65535)<<2)>>2]>>1]<<1)>>1]|0;if(r42){r57=-536870912}else{r57=r46-HEAPU8[r3+14|0]|0}r46=(r52|0)==-536870912;if(r46){r58=-536870912}else{r58=r52-HEAPU8[r3+8|0]|0}r42=r31-HEAPU8[r3+2|0]|0;do{if((r57|0)>(r58|0)){if((r42|0)<=(r57|0)){r59=r57;break}HEAP32[r1+32>>2]=HEAP32[r1+24>>2];HEAP16[r44>>1]=r50;r59=r42}else{if((r42|0)>(r58|0)){HEAP32[r1+32>>2]=HEAP32[r1+24>>2];HEAP16[r44>>1]=r50;r59=r42;break}else{HEAP32[r1+32>>2]=HEAP32[r1+28>>2];HEAP16[r44>>1]=r53;r59=r58;break}}}while(0);r58=(r59|0)<-536870912?-536870912:r59;r59=(r58|0)>(r56|0)?r58:r56;HEAP32[r1+12>>2]=r58;if(r46){r60=-536870912}else{r60=r52-HEAPU8[r3+7|0]|0}r52=r31-HEAPU8[r3+1|0]|0;if((r60|0)>(r52|0)){r61=r60}else{HEAP32[r1+28>>2]=HEAP32[r1+24>>2];HEAP16[r49>>1]=r50;r61=r52}r52=(r61|0)<-536870912?-536870912:r61;r61=(r52|0)>(r59|0)?r52:r59;HEAP32[r1+8>>2]=r52;r52=r31-HEAPU8[r3]|0;r3=(r52|0)<-536870912?-536870912:r52;r52=(r3|0)>(r61|0)?r3:r61;HEAP32[r55>>2]=r3;HEAP32[r1+64>>2]=r52;r4=r52;return r4}function _hmm_vit_eval_anytopo(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r2=0;r3=r1|0;r4=HEAP32[r3>>2];r5=r1+4|0;r6=HEAP32[r5>>2];r7=r1+76|0;r8=(HEAP8[r7]|0)==0;r9=HEAP16[r1+54>>1];do{if(r8){r10=r9;r11=r9;r2=4}else{if(r9<<16>>16==-1){r12=-536870912;break}r10=HEAP16[HEAP32[HEAP32[r4+12>>2]+((r9&65535)<<2)>>2]>>1];r11=r9;r2=4}}while(0);do{if(r2==4){if(r10<<16>>16==-1){r12=-536870912;break}do{if(r8){r13=r11&65535}else{if(r11<<16>>16==-1){r13=65535;break}r13=HEAPU16[HEAP32[HEAP32[r4+12>>2]+((r11&65535)<<2)>>2]>>1]}}while(0);r12=-(HEAP16[HEAP32[r4+8>>2]+(r13<<1)>>1]|0)|0}}while(0);r13=r4+16|0;HEAP32[HEAP32[r13>>2]>>2]=r6+r12;r12=r1+77|0;r6=1;while(1){r14=HEAPU8[r12];if((r6|0)>=(r14|0)){break}r4=HEAP32[r1+4+(r6<<2)>>2];r11=(HEAP8[r7]|0)==0;r8=HEAP16[r1+54+(r6<<1)>>1];do{if(r11){r15=r8;r16=r8;r2=15}else{if(r8<<16>>16==-1){r17=-536870912;break}r15=HEAP16[HEAP32[HEAP32[HEAP32[r3>>2]+12>>2]+((r8&65535)<<2)>>2]+(r6<<1)>>1];r16=r8;r2=15}}while(0);do{if(r2==15){r2=0;if(r15<<16>>16==-1){r17=-536870912;break}do{if(r11){r18=r16&65535}else{if(r16<<16>>16==-1){r18=65535;break}r18=HEAPU16[HEAP32[HEAP32[HEAP32[r3>>2]+12>>2]+((r16&65535)<<2)>>2]+(r6<<1)>>1]}}while(0);r17=-(HEAP16[HEAP32[HEAP32[r3>>2]+8>>2]+(r18<<1)>>1]|0)|0}}while(0);r11=r4+r17|0;HEAP32[HEAP32[r13>>2]+(r6<<2)>>2]=r11;if((r11|0)<-536870912){HEAP32[HEAP32[r13>>2]+(r6<<2)>>2]=-536870912}r6=r6+1|0}r6=r1+68|0;r17=r14;r18=-536870912;r16=-1;while(1){r15=r17-1|0;if((r17|0)<=0){break}r12=HEAPU8[HEAP32[HEAP32[HEAP32[HEAP32[r3>>2]+4>>2]+(HEAP16[r6>>1]<<2)>>2]+(r15<<2)>>2]+r14|0];if((-r12|0)<=-255){r17=r15;r18=r18;r16=r16;continue}r11=HEAP32[HEAP32[r13>>2]+(r15<<2)>>2]-r12|0;r12=(r11|0)>(r18|0);r17=r15;r18=r12?r11:r18;r16=r12?r15:r16}HEAP32[r1+44>>2]=r18;if((r16|0)>-1){HEAP32[r1+48>>2]=HEAP32[r1+24+(r16<<2)>>2]}r16=r1+24|0;r17=r14;r14=r18;while(1){r18=r17-1|0;if((r17|0)<=0){break}r15=HEAP32[HEAP32[HEAP32[r3>>2]+4>>2]+(HEAP16[r6>>1]<<2)>>2];r12=HEAPU8[HEAP32[r15+(r18<<2)>>2]+r18|0];if((-r12|0)>-255){r19=r18;r20=HEAP32[HEAP32[r13>>2]+(r18<<2)>>2]-r12|0;r21=-1}else{r19=r18;r20=-536870912;r21=-1}while(1){r12=r19-1|0;if((r19|0)<=0){break}r11=HEAPU8[HEAP32[r15+(r12<<2)>>2]+r18|0];if((-r11|0)<=-255){r19=r12;r20=r20;r21=r21;continue}r8=HEAP32[HEAP32[r13>>2]+(r12<<2)>>2]-r11|0;r11=(r8|0)>(r20|0);r19=r12;r20=r11?r8:r20;r21=r11?r12:r21}do{if((r18|0)==0){HEAP32[r5>>2]=r20;if((r21|0)<=-1){break}HEAP32[r16>>2]=HEAP32[r1+24+(r21<<2)>>2];r2=42}else{HEAP32[r1+4+(r18<<2)>>2]=r20;if((r21|0)<=-1){break}HEAP32[r1+24+(r18<<2)>>2]=HEAP32[r1+24+(r21<<2)>>2];r2=42}}while(0);do{if(r2==42){r2=0;if((r21|0)<=-1){break}if((HEAP8[r7]|0)==0){break}HEAP16[r1+54+(r18<<1)>>1]=HEAP16[r1+54+(r21<<1)>>1]}}while(0);r17=r18;r14=(r14|0)<(r20|0)?r20:r14}HEAP32[r1+64>>2]=r14;return r14}function _mdef_free_recursive_lc(r1){var r2;if((r1|0)==0){return}r2=HEAP32[r1+4>>2];if((r2|0)!=0){_mdef_free_recursive_rc(r2)}r2=HEAP32[r1+8>>2];if((r2|0)!=0){_mdef_free_recursive_lc(r2)}_free(r1);return}function _mdef_free_recursive_rc(r1){var r2;if((r1|0)==0){return}r2=HEAP32[r1+8>>2];if((r2|0)!=0){_mdef_free_recursive_rc(r2)}_free(r1);return}function _mdef_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9;if((r1|0)==0){return}r2=HEAP32[r1+48>>2];if((r2|0)!=0){_free(r2)}r2=HEAP32[r1+44>>2];if((r2|0)!=0){_free(r2)}r2=r1|0;r3=r1+56|0;r4=0;while(1){if((r4|0)<4){r5=0}else{r6=0;break}while(1){if((r5|0)>=(HEAP32[r2>>2]|0)){break}r7=HEAP32[HEAP32[HEAP32[r3>>2]+(r4<<2)>>2]+(r5<<2)>>2];if((r7|0)!=0){_mdef_free_recursive_lc(HEAP32[r7+8>>2]);_mdef_free_recursive_rc(HEAP32[HEAP32[HEAP32[HEAP32[r3>>2]+(r4<<2)>>2]+(r5<<2)>>2]+4>>2])}r5=r5+1|0}r4=r4+1|0}while(1){if((r6|0)<4){r8=0}else{break}while(1){if((r8|0)>=(HEAP32[r2>>2]|0)){break}r4=HEAP32[HEAP32[HEAP32[r3>>2]+(r6<<2)>>2]+(r8<<2)>>2];if((r4|0)!=0){_free(r4)}r8=r8+1|0}r6=r6+1|0}r6=HEAP32[r3>>2];if((r6|0)!=0){_free(HEAP32[r6>>2]);_free(r6)}r6=HEAP32[r1+36>>2];if((r6|0)!=0){_free(HEAP32[r6>>2]);_free(r6)}r6=HEAP32[r1+32>>2];if((r6|0)!=0){_free(r6)}r6=HEAP32[r1+24>>2];if((r6|0)!=0){_hash_table_free(r6)}r6=r1+28|0;r3=0;while(1){r9=HEAP32[r6>>2];if((r3|0)>=(HEAP32[r2>>2]|0)){break}r8=HEAP32[r9+(r3<<3)>>2];if((r8|0)!=0){_free(r8)}r3=r3+1|0}if((r9|0)!=0){_free(r9)}_free(r1);return}function _triphone_add(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r7=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+4096|0;r10=r9;r11=r1+4|0;if((HEAP32[r11>>2]|0)<=(r6|0)){___assert_fail(9824,39104,142,49752)}r12=r1+32|0;HEAP16[HEAP32[r12>>2]+(r6*20&-1)+8>>1]=r2;r13=r3&65535;HEAP16[HEAP32[r12>>2]+(r6*20&-1)+10>>1]=r13;r14=r4&65535;HEAP16[HEAP32[r12>>2]+(r6*20&-1)+12>>1]=r14;HEAP32[HEAP32[r12>>2]+(r6*20&-1)+16>>2]=r5;r15=r1|0;if((HEAP32[r15>>2]|0)>(r6|0)){STACKTOP=r9;return}r16=r1+56|0;r17=HEAP32[HEAP32[r16>>2]+(r5<<2)>>2]+(r2<<2)|0;while(1){r18=HEAP32[r17>>2];if((r18|0)==0){r7=8;break}if((HEAP16[r18>>1]|0)==(r3|0)){r19=r18;break}r17=r18+8|0}if(r7==8){r17=_malloc(12);if((r17|0)==0){_ckd_fail(29016,(r8=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r8>>2]=1,HEAP32[r8+8>>2]=12,HEAP32[r8+16>>2]=39104,HEAP32[r8+24>>2]=154,r8));STACKTOP=r8}if((HEAP32[r17-4>>2]&3|0)!=0){_memset(r17,0,12)|0}r3=r17;HEAP16[r17>>1]=r13;HEAP32[r17+8>>2]=HEAP32[HEAP32[HEAP32[r16>>2]+(r5<<2)>>2]+(r2<<2)>>2];HEAP32[HEAP32[HEAP32[r16>>2]+(r5<<2)>>2]+(r2<<2)>>2]=r3;r19=r3}r3=r19+4|0;r19=r3;while(1){r20=HEAP32[r19>>2];if((r20|0)==0){r7=32;break}if((HEAP16[r20>>1]|0)==(r4|0)){break}r19=r20+8|0}if(r7==32){r7=_malloc(12);if((r7|0)==0){_ckd_fail(29016,(r8=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r8>>2]=1,HEAP32[r8+8>>2]=12,HEAP32[r8+16>>2]=39104,HEAP32[r8+24>>2]=166,r8));STACKTOP=r8}if((HEAP32[r7-4>>2]&3|0)!=0){_memset(r7,0,12)|0}HEAP16[r7>>1]=r14;HEAP32[r7+4>>2]=r6;HEAP32[r7+8>>2]=HEAP32[r3>>2];HEAP32[r3>>2]=r7;STACKTOP=r9;return}r9=HEAP32[r20+4>>2];r20=r10|0;if((r1|0)==0){___assert_fail(9688,39104,200,50144)}if((r9|0)<=-1){___assert_fail(20504,39104,201,50144)}if((r9|0)>=(HEAP32[r11>>2]|0)){___assert_fail(20504,39104,201,50144)}HEAP8[r20]=0;r11=HEAP32[r15>>2];if((r9|0)<(r11|0)){r15=HEAP32[HEAP32[r1+28>>2]+(r9<<3)>>2];_memcpy(r20,r15,_strlen(r15)+1|0)|0;_err_msg(5,39104,163,9400,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r20,r8));STACKTOP=r8;_exit(1)}r15=HEAP32[r12>>2];r12=HEAP16[r15+(r9*20&-1)+8>>1];r10=r12<<16>>16;if(!(r12<<16>>16>-1&(r10|0)<(r11|0))){___assert_fail(28568,39104,189,50160)}r12=HEAP32[r1+28>>2];r1=HEAP32[r12+(r10<<3)>>2];r10=HEAP16[r15+(r9*20&-1)+10>>1];r7=r10<<16>>16;if(!(r10<<16>>16>-1&(r7|0)<(r11|0))){___assert_fail(28568,39104,189,50160)}r10=HEAP32[r12+(r7<<3)>>2];r7=HEAP16[r15+(r9*20&-1)+12>>1];r3=r7<<16>>16;if(!(r7<<16>>16>-1&(r3|0)<(r11|0))){___assert_fail(28568,39104,189,50160)}r11=HEAP32[r12+(r3<<3)>>2];r3=HEAP8[16032+HEAP32[r15+(r9*20&-1)+16>>2]|0]|0;_sprintf(r20,10576,(r8=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r8>>2]=r1,HEAP32[r8+8>>2]=r10,HEAP32[r8+16>>2]=r11,HEAP32[r8+24>>2]=r3,r8));STACKTOP=r8;_err_msg(5,39104,163,9400,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r20,r8));STACKTOP=r8;_exit(1)}function _parse_tmat_senmap(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+1048|0;r8=r7;r9=r7+8;r10=r7+16;r11=r7+24;r12=_sscanf(r2+r3|0,35616,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r9,HEAP32[r6+8>>2]=r8,r6));STACKTOP=r6;if((r12|0)!=1){_err_msg(5,39104,282,11232,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r2,r6));STACKTOP=r6;_exit(1)}r12=HEAP32[r9>>2];if((r12|0)<0){_err_msg(5,39104,282,11232,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r2,r6));STACKTOP=r6;_exit(1)}HEAP32[HEAP32[r1+32>>2]+(r4*20&-1)+4>>2]=r12;r12=HEAP32[r1+20>>2];r13=HEAP32[r9>>2];if((r12|0)<=(r13|0)){_err_msg(5,39104,286,10936,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r13,HEAP32[r6+8>>2]=r12,HEAP32[r6+16>>2]=r2,r6));STACKTOP=r6;_exit(1)}r12=r1+8|0;r13=r1|0;r14=r1+12|0;r15=r1+16|0;r16=r1+36|0;r1=0;r17=r2+(HEAP32[r8>>2]+r3)|0;while(1){HEAP32[r9>>2]=r1;if((r1|0)>=(HEAP32[r12>>2]|0)){r5=17;break}r3=_sscanf(r17,35616,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r10,HEAP32[r6+8>>2]=r8,r6));STACKTOP=r6;if((r3|0)!=1){r5=10;break}r18=HEAP32[r10>>2];if((r18|0)<0){r5=10;break}if((HEAP32[r13>>2]|0)>(r4|0)){r19=HEAP32[r14>>2];if((r19|0)<=(r18|0)){r5=13;break}}r20=HEAP32[r15>>2];if((r20|0)<=(r18|0)){r5=15;break}HEAP16[HEAP32[HEAP32[r16>>2]+(r4<<2)>>2]+(HEAP32[r9>>2]<<1)>>1]=r18;r1=HEAP32[r9>>2]+1|0;r17=r17+HEAP32[r8>>2]|0}if(r5==10){_err_msg(5,39104,293,10784,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=HEAP32[r9>>2],HEAP32[r6+8>>2]=r2,r6));STACKTOP=r6;_exit(1)}else if(r5==13){_err_msg(5,39104,297,10632,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r18,HEAP32[r6+8>>2]=r19,HEAP32[r6+16>>2]=r2,r6));STACKTOP=r6;_exit(1)}else if(r5==15){_err_msg(5,39104,300,10488,(r6=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r6>>2]=r18,HEAP32[r6+8>>2]=r20,HEAP32[r6+16>>2]=r2,r6));STACKTOP=r6;_exit(1)}else if(r5==17){r5=r11|0;r11=_sscanf(r17,9440,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r5,HEAP32[r6+8>>2]=r8,r6));STACKTOP=r6;if((r11|0)==1&(HEAP8[r5]|0)==78){r21=r5;r22=42912}else{_err_msg(5,39104,308,10224,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r2,r6));STACKTOP=r6;_exit(1)}while(1){r11=r21+1|0;r20=r22+1|0;r23=HEAP8[r11];r24=HEAP8[r20];if(r23<<24>>24!=r24<<24>>24|r23<<24>>24==0|r24<<24>>24==0){break}else{r21=r11;r22=r20}}if(r23<<24>>24!=r24<<24>>24){_err_msg(5,39104,308,10224,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r2,r6));STACKTOP=r6;_exit(1)}r24=_sscanf(r17+HEAP32[r8>>2]|0,9440,(r6=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r6>>2]=r5,HEAP32[r6+8>>2]=r8,r6));STACKTOP=r6;if((r24|0)==1){_err_msg(5,39104,313,10080,(r6=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r6>>2]=r2,r6));STACKTOP=r6;_exit(1)}else{STACKTOP=r7;return}}}function _gauden_init(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r5=0;r6=0;r7=STACKTOP;STACKTOP=STACKTOP+40|0;r8=r7;r9=r7+8;r10=r7+16;r11=r7+24;r12=r7+32;if((r1|0)==0){___assert_fail(7048,8416,367,50312)}if((r2|0)==0){___assert_fail(6072,8416,368,50312)}if(r3<=0){___assert_fail(48464,8416,369,50312)}r13=_malloc(32);if((r13|0)==0){_ckd_fail(29016,(r6=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r6>>2]=1,HEAP32[r6+8>>2]=32,HEAP32[r6+16>>2]=8416,HEAP32[r6+24>>2]=371,r6));STACKTOP=r6}if((HEAP32[r13-4>>2]&3|0)!=0){_memset(r13,0,32)|0}r14=r13;HEAP32[r13+12>>2]=r4;HEAP32[r12>>2]=0;r15=r13+16|0;r16=r13+20|0;r17=r13+24|0;r18=r13+28|0;_gauden_param_read(r12,r15,r16,r17,r18,r1);HEAP32[r13>>2]=HEAP32[r12>>2];HEAP32[r12>>2]=0;_gauden_param_read(r12,r8,r9,r10,r11,r2);HEAP32[r13+4>>2]=HEAP32[r12>>2];if((HEAP32[r8>>2]|0)!=(HEAP32[r15>>2]|0)){_err_msg(5,8416,386,47024,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;_exit(1)}r15=HEAP32[r9>>2];if((r15|0)!=(HEAP32[r16>>2]|0)){_err_msg(5,8416,386,47024,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;_exit(1)}if((HEAP32[r10>>2]|0)!=(HEAP32[r17>>2]|0)){_err_msg(5,8416,386,47024,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;_exit(1)}r17=HEAP32[r11>>2];r11=0;while(1){if((r11|0)>=(r15|0)){r5=20;break}if((HEAP32[HEAP32[r18>>2]+(r11<<2)>>2]|0)!=(HEAP32[r17+(r11<<2)>>2]|0)){r5=18;break}r11=r11+1|0}if(r5==18){_err_msg(5,8416,389,45224,(r6=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r6>>2]=0,r6));STACKTOP=r6;_exit(1)}else if(r5==20){_free(r17);_gauden_dist_precompute(r14,r4,r3);STACKTOP=r7;return r14}}function _gauden_param_read(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42;r7=0;r8=0;r9=STACKTOP;STACKTOP=STACKTOP+72|0;r10=r9;r11=r9+8;r12=r9+16;r13=r9+24;r14=r9+32;r15=r9+40;r16=r9+48;r17=r9+56;r18=r9+64;_err_msg(1,8416,198,36008,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;r19=_fopen(r6,45688);if((r19|0)==0){r20=___errno_location();r21=HEAP32[r20>>2];r20=_malloc(42);_memcpy(r20,34064,37)|0;r22=r20+_strlen(r20)|0;HEAP8[r22]=HEAP8[6400];HEAP8[r22+1|0]=HEAP8[6401];HEAP8[r22+2|0]=HEAP8[6402];HEAP8[r22+3|0]=HEAP8[6403];HEAP8[r22+4|0]=HEAP8[6404];HEAP8[r22+5|0]=HEAP8[6405];r22=_strerror(r21);_err_msg(5,8416,201,r20,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r22,r8));STACKTOP=r8;_free(r20);_exit(r21)}if((_bio_readhdr(r19,r16,r17,r15)|0)<0){_err_msg(5,8416,205,8144,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}r21=HEAP32[r16>>2];r20=0;r22=0;while(1){r23=HEAP32[r21+(r20<<2)>>2];if((r23|0)==0){break}r24=HEAP8[r23];do{if(r24<<24>>24==99){r25=r23;r26=46256;r7=15}else if(r24<<24>>24==118){r27=r23;r28=45992;while(1){r29=r27+1|0;r30=r28+1|0;r31=HEAP8[r29];r32=HEAP8[r30];if(r31<<24>>24!=r32<<24>>24|r31<<24>>24==0|r32<<24>>24==0){break}else{r27=r29;r28=r30}}if(r31<<24>>24!=r32<<24>>24){if(r24<<24>>24==99){r25=r23;r26=46256;r7=15;break}else{r33=r22;break}}r28=HEAP32[HEAP32[r17>>2]+(r20<<2)>>2];if((HEAP8[r28]|0)==49){r27=r28;r30=49488;while(1){r29=r27+1|0;r34=r30+1|0;r35=HEAP8[r29];r36=HEAP8[r34];if(r35<<24>>24!=r36<<24>>24|r35<<24>>24==0|r36<<24>>24==0){break}else{r27=r29;r30=r34}}if(r35<<24>>24==r36<<24>>24){r33=r22;break}}_err_msg(3,8416,213,47984,(r8=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r28,HEAP32[r8+16>>2]=49488,r8));STACKTOP=r8;r33=r22}else{r33=r22}}while(0);if(r7==15){while(1){r7=0;r23=r25+1|0;r24=r26+1|0;r37=HEAP8[r23];r38=HEAP8[r24];if(r37<<24>>24!=r38<<24>>24|r37<<24>>24==0|r38<<24>>24==0){break}else{r25=r23;r26=r24;r7=15}}r33=r37<<24>>24==r38<<24>>24?1:r22}r20=r20+1|0;r22=r33}_bio_hdrarg_free(r21,HEAP32[r17>>2]);HEAP32[r17>>2]=0;HEAP32[r16>>2]=0;HEAP32[r18>>2]=0;r16=HEAP32[r15>>2];if((_bio_fread(r12,4,1,r19,r16,r18)|0)!=1){_err_msg(5,8416,226,27e3,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}r15=HEAP32[r12>>2];HEAP32[r2>>2]=r15;if((_bio_fread(r13,4,1,r19,r16,r18)|0)!=1){_err_msg(5,8416,231,26040,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}r2=HEAP32[r13>>2];HEAP32[r3>>2]=r2;if((_bio_fread(r14,4,1,r19,r16,r18)|0)!=1){_err_msg(5,8416,236,25032,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}r3=HEAP32[r14>>2];HEAP32[r4>>2]=r3;r4=___ckd_calloc__(r2,4,8416,240);r14=r4;HEAP32[r5>>2]=r14;if((_bio_fread(r4,4,r2,r19,r16,r18)|0)==(r2|0)){r39=0;r40=0}else{_err_msg(5,8416,244,23896,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}while(1){if((r39|0)>=(r2|0)){break}r4=r40+HEAP32[r14+(r39<<2)>>2]|0;r39=r39+1|0;r40=r4}if((_bio_fread(r11,4,1,r19,r16,r18)|0)!=1){_err_msg(5,8416,252,22576,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}r39=HEAP32[r11>>2];if((r39|0)!=(Math_imul(Math_imul(r15,r3)|0,r40)|0)){_err_msg(5,8416,256,22112,(r8=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r8>>2]=r6,HEAP32[r8+8>>2]=r39,HEAP32[r8+16>>2]=r15,HEAP32[r8+24>>2]=r3,HEAP32[r8+32>>2]=r40,r8));STACKTOP=r8;_exit(1)}r40=HEAP32[r1>>2];L49:do{if((r40|0)==0){r11=___ckd_calloc_3d__(r15,r2,r3,4,8416,262);r4=___ckd_calloc__(r39,4,8416,263);r5=0;r13=0;while(1){if((r5|0)>=(r15|0)){r41=r4;r42=r11;break L49}r12=r11+(r5<<2)|0;r17=0;r21=r13;while(1){if((r17|0)>=(r2|0)){break}r33=r14+(r17<<2)|0;r20=0;r38=r21;while(1){if((r20|0)>=(r3|0)){break}HEAP32[HEAP32[HEAP32[r12>>2]+(r17<<2)>>2]+(r20<<2)>>2]=r4+(r38<<2);r20=r20+1|0;r38=r38+HEAP32[r33>>2]|0}r17=r17+1|0;r21=r38}r5=r5+1|0;r13=r21}}else{r41=HEAP32[HEAP32[HEAP32[r40>>2]>>2]>>2];r42=r40}}while(0);if((_bio_fread(r41,4,r39,r19,r16,r18)|0)!=(r39|0)){_err_msg(5,8416,280,21664,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}if((r22|0)!=0){_bio_verify_chksum(r19,r16,HEAP32[r18>>2])}if((_fread(r10,1,1,r19)|0)==1){_err_msg(5,8416,286,22384,(r8=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r8>>2]=r6,r8));STACKTOP=r8;_exit(1)}_fclose(r19);HEAP32[r1>>2]=r42;_err_msg(1,8416,292,20720,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r15,HEAP32[r8+8>>2]=r2,r8));STACKTOP=r8;r15=0;while(1){if((r15|0)>=(r2|0)){break}r42=HEAP32[r14+(r15<<2)>>2];_err_msg(1,8416,294,20208,(r8=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r8>>2]=r3,HEAP32[r8+8>>2]=r42,r8));STACKTOP=r8;r15=r15+1|0}STACKTOP=r9;return}function _gauden_dist_precompute(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28;r4=0;r5=STACKTOP;r6=r1+16|0;r7=r1+20|0;r8=r1+24|0;r9=___ckd_calloc_3d__(HEAP32[r6>>2],HEAP32[r7>>2],HEAP32[r8>>2],4,8416,323);r10=r1+8|0;HEAP32[r10>>2]=r9;r9=r1+28|0;r11=r1+4|0;r1=r2+48|0;r12=r2+9|0;r13=r2+64|0;r2=0;r14=0;while(1){if((r2|0)<(HEAP32[r6>>2]|0)){r15=0;r16=r14}else{break}while(1){if((r15|0)>=(HEAP32[r7>>2]|0)){break}r17=HEAP32[HEAP32[r9>>2]+(r15<<2)>>2];r18=HEAP32[HEAP32[HEAP32[r10>>2]+(r2<<2)>>2]+(r15<<2)>>2];r19=r16;r20=0;while(1){if((r20|0)>=(HEAP32[r8>>2]|0)){break}HEAPF32[r18>>2]=0;r21=0;r22=r19;r23=HEAP32[HEAP32[HEAP32[HEAP32[r11>>2]+(r2<<2)>>2]+(r15<<2)>>2]+(r20<<2)>>2];while(1){if((r21|0)>=(r17|0)){break}r24=HEAPF32[r23>>2];if(r24<r3){HEAPF32[r23>>2]=r3;r25=r22+1|0;r26=r3}else{r25=r22;r26=r24}r24=1/Math_sqrt(r26*2*3.141592653589793);if(r24>0){r27=Math_log(r24);r28=(r27*HEAPF64[r1>>3]&-1)>>HEAP8[r12]}else{r28=HEAP32[r13>>2]}HEAPF32[r18>>2]=HEAPF32[r18>>2]+(r28|0);HEAPF32[r23>>2]=(HEAPF64[r1>>3]*(1/(HEAPF32[r23>>2]*2))&-1)>>HEAP8[r12]|0;r21=r21+1|0;r22=r25;r23=r23+4|0}r18=r18+4|0;r19=r22;r20=r20+1|0}r15=r15+1|0;r16=r19}r2=r2+1|0;r14=r16}_err_msg(1,8416,354,37272,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=r14,r4));STACKTOP=r4;STACKTOP=r5;return}function _gauden_free(r1){var r2,r3;if((r1|0)==0){return}r2=HEAP32[r1>>2];if((r2|0)!=0){_gauden_param_free(r2)}r2=HEAP32[r1+4>>2];if((r2|0)!=0){_gauden_param_free(r2)}r2=HEAP32[r1+8>>2];if((r2|0)!=0){r3=HEAP32[r2>>2];if((r3|0)!=0){_free(HEAP32[r3>>2])}_free(HEAP32[r2>>2]);_free(r2)}r2=HEAP32[r1+28>>2];if((r2|0)!=0){_free(r2)}_free(r1);return}function _gauden_param_free(r1){var r2,r3;_free(HEAP32[HEAP32[HEAP32[r1>>2]>>2]>>2]);if((r1|0)==0){r2=r1;_free(r2);return}r3=HEAP32[r1>>2];if((r3|0)!=0){_free(HEAP32[r3>>2])}_free(HEAP32[r1>>2]);r2=r1;_free(r2);return}function _gauden_dist(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31;r6=0;if((r3|0)<=0){___assert_fail(43608,8416,535,50328)}r7=r1+24|0;if((HEAP32[r7>>2]|0)<(r3|0)){___assert_fail(43608,8416,535,50328)}r8=r1+20|0;r9=r1+28|0;r10=r1|0;r11=r1+4|0;r12=r1+8|0;r1=r3-1|0;r13=0;L7:while(1){if((r13|0)>=(HEAP32[r8>>2]|0)){r6=30;break}r14=HEAP32[r5+(r13<<2)>>2];r15=HEAP32[r4+(r13<<2)>>2];r16=HEAP32[HEAP32[r9>>2]+(r13<<2)>>2];r17=HEAP32[HEAP32[HEAP32[r10>>2]+(r2<<2)>>2]+(r13<<2)>>2];r18=HEAP32[HEAP32[HEAP32[r11>>2]+(r2<<2)>>2]+(r13<<2)>>2];r19=HEAP32[HEAP32[HEAP32[r12>>2]+(r2<<2)>>2]+(r13<<2)>>2];r20=HEAP32[r7>>2];L10:do{if((r20|0)>(r3|0)){r21=0;while(1){if((r21|0)>=(r3|0)){break}HEAPF32[r14+(r21<<3)+4>>2]=-2147483648;r21=r21+1|0}r21=r14+(r1<<3)+4|0;r22=0;while(1){if((r22|0)>=(r20|0)){break L10}r23=HEAP32[r17+(r22<<2)>>2];r24=HEAP32[r18+(r22<<2)>>2];r25=0;r26=HEAPF32[r19+(r22<<2)>>2];while(1){r27=HEAPF32[r21>>2];if((r25|0)>=(r16|0)){r6=20;break}if(r26<r27){break}r28=HEAPF32[r15+(r25<<2)>>2]-HEAPF32[r23+(r25<<2)>>2];r29=r26-r28*r28*HEAPF32[r24+(r25<<2)>>2];r25=r25+1|0;r26=r29}do{if(r6==20){r6=0;if(r26<r27){break}else{r30=0}while(1){if((r30|0)>=(r3|0)){r6=24;break L7}if(r26>=HEAPF32[r14+(r30<<3)+4>>2]){r31=r3;break}r30=r30+1|0}while(1){r25=r31-1|0;if((r25|0)<=(r30|0)){break}r24=r14+(r31-2<<3)|0;r23=r14+(r25<<3)|0;r29=HEAP32[r24+4>>2];HEAP32[r23>>2]=HEAP32[r24>>2];HEAP32[r23+4>>2]=r29;r31=r25}HEAPF32[r14+(r30<<3)+4>>2]=r26;HEAP32[r14+(r30<<3)>>2]=r22}}while(0);r22=r22+1|0}}else{r22=0;while(1){if((r22|0)>=(r20|0)){break L10}r21=HEAP32[r17+(r22<<2)>>2];r26=HEAP32[r18+(r22<<2)>>2];r25=0;r29=HEAPF32[r19+(r22<<2)>>2];while(1){if((r25|0)>=(r16|0)){break}r23=HEAPF32[r15+(r25<<2)>>2]-HEAPF32[r21+(r25<<2)>>2];r24=r29-r23*r23*HEAPF32[r26+(r25<<2)>>2];r25=r25+1|0;r29=r24}HEAPF32[r14+(r22<<3)+4>>2]=r29;HEAP32[r14+(r22<<3)>>2]=r22;r22=r22+1|0}}}while(0);r13=r13+1|0}if(r6==24){___assert_fail(38504,8416,513,51200)}else if(r6==30){return}}function _gauden_mllr_transform(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+64|0;r7=r6;r8=r6+8;r9=r6+16;r10=r6+24;r11=r6+32;r12=r6+40;r13=r6+48;r14=r6+56;r15=r1|0;r16=HEAP32[r15>>2];if((r16|0)!=0){_gauden_param_free(r16)}r16=r1+4|0;r17=HEAP32[r16>>2];if((r17|0)!=0){_gauden_param_free(r17)}r17=r1+8|0;r18=HEAP32[r17>>2];if((r18|0)!=0){r19=HEAP32[r18>>2];if((r19|0)!=0){_free(HEAP32[r19>>2])}_free(HEAP32[r18>>2]);_free(r18)}r18=r1+28|0;r19=HEAP32[r18>>2];if((r19|0)!=0){_free(r19)}HEAP32[r15>>2]=0;HEAP32[r16>>2]=0;HEAP32[r17>>2]=0;HEAP32[r18>>2]=0;HEAP32[r14>>2]=0;r17=r1+16|0;r19=r1+20|0;r20=r1+24|0;r21=r3+4|0;do{if((_hash_table_lookup(HEAP32[r21>>2],34360,r9)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=34360,r5));STACKTOP=r5;r22=0}else{r3=HEAP32[r9>>2];if((r3|0)==0){r22=0;break}r22=HEAP32[r3>>2]}}while(0);_gauden_param_read(r14,r17,r19,r20,r18,r22);HEAP32[r15>>2]=HEAP32[r14>>2];HEAP32[r14>>2]=0;do{if((_hash_table_lookup(HEAP32[r21>>2],24208,r8)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=24208,r5));STACKTOP=r5;r23=0}else{r22=HEAP32[r8>>2];if((r22|0)==0){r23=0;break}r23=HEAP32[r22>>2]}}while(0);_gauden_param_read(r14,r10,r11,r12,r13,r23);HEAP32[r16>>2]=HEAP32[r14>>2];if((HEAP32[r10>>2]|0)!=(HEAP32[r17>>2]|0)){_err_msg(5,8416,581,47024,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;_exit(1)}r14=HEAP32[r11>>2];if((r14|0)!=(HEAP32[r19>>2]|0)){_err_msg(5,8416,581,47024,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;_exit(1)}if((HEAP32[r12>>2]|0)!=(HEAP32[r20>>2]|0)){_err_msg(5,8416,581,47024,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;_exit(1)}r23=HEAP32[r13>>2];r13=0;while(1){if((r13|0)>=(r14|0)){break}if((HEAP32[HEAP32[r18>>2]+(r13<<2)>>2]|0)!=(HEAP32[r23+(r13<<2)>>2]|0)){r4=26;break}r13=r13+1|0}if(r4==26){_err_msg(5,8416,584,45224,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;_exit(1)}_free(r23);r23=r2+16|0;r4=r2+20|0;r13=r2+24|0;r2=0;while(1){if((r2|0)<(HEAP32[r17>>2]|0)){r24=0}else{break}while(1){if((r24|0)>=(HEAP32[r19>>2]|0)){break}r14=___ckd_calloc__(HEAP32[HEAP32[r18>>2]+(r24<<2)>>2],8,8416,591);r8=r14;r22=0;while(1){if((r22|0)<(HEAP32[r20>>2]|0)){r25=0}else{break}while(1){r9=HEAP32[HEAP32[r18>>2]+(r24<<2)>>2];if((r25|0)>=(r9|0)){r26=0;r27=r9;break}r9=r8+(r25<<3)|0;HEAPF64[r9>>3]=0;r3=0;r28=0;while(1){if((r3|0)>=(HEAP32[HEAP32[r18>>2]+(r24<<2)>>2]|0)){break}r29=r28+HEAPF32[HEAP32[HEAP32[HEAP32[HEAP32[r23>>2]+(r24<<2)>>2]>>2]+(r25<<2)>>2]+(r3<<2)>>2]*HEAPF32[HEAP32[HEAP32[HEAP32[HEAP32[r15>>2]+(r2<<2)>>2]+(r24<<2)>>2]+(r22<<2)>>2]+(r3<<2)>>2];HEAPF64[r9>>3]=r29;r3=r3+1|0;r28=r29}HEAP32[r10>>2]=r3;HEAPF64[r9>>3]=r28+HEAPF32[HEAP32[HEAP32[HEAP32[r4>>2]+(r24<<2)>>2]>>2]+(r25<<2)>>2];r25=r25+1|0}while(1){if((r26|0)>=(r27|0)){break}HEAPF32[HEAP32[HEAP32[HEAP32[HEAP32[r15>>2]+(r2<<2)>>2]+(r24<<2)>>2]+(r22<<2)>>2]+(r26<<2)>>2]=HEAPF64[r8+(r26<<3)>>3];r29=HEAP32[HEAP32[HEAP32[HEAP32[r16>>2]+(r2<<2)>>2]+(r24<<2)>>2]+(r22<<2)>>2]+(r26<<2)|0;HEAPF32[r29>>2]=HEAPF32[r29>>2]*HEAPF32[HEAP32[HEAP32[HEAP32[r13>>2]+(r24<<2)>>2]>>2]+(r26<<2)>>2];r26=r26+1|0;r27=HEAP32[HEAP32[r18>>2]+(r24<<2)>>2]}r22=r22+1|0}HEAP32[r12>>2]=r22;_free(r14);r24=r24+1|0}HEAP32[r11>>2]=r24;r2=r2+1|0}r2=HEAP32[r1+12>>2];if((_hash_table_lookup(HEAP32[r21>>2],18472,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=18472,r5));STACKTOP=r5;r30=0;_gauden_dist_precompute(r1,r2,r30);STACKTOP=r6;return}r5=HEAP32[r7>>2];if((r5|0)==0){r30=0;_gauden_dist_precompute(r1,r2,r30);STACKTOP=r6;return}r30=HEAPF64[r5>>3];_gauden_dist_precompute(r1,r2,r30);STACKTOP=r6;return}function _ms_mgau_init(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+168|0;r7=r6;r8=r6+8;r9=r6+16;r10=r6+24;r11=r6+32;r12=r6+40;r13=r6+48;r14=r6+56;r15=r6+64;r16=r6+72;r17=r6+80;r18=r6+88;r19=r6+96;r20=r6+104;r21=r6+112;r22=r6+120;r23=r6+128;r24=r6+136;r25=r6+144;r26=r6+152;r27=r6+160;r28=HEAP32[r1>>2];r29=_malloc(32);if((r29|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=32,HEAP32[r5+16>>2]=7400,HEAP32[r5+24>>2]=94,r5));STACKTOP=r5}if((HEAP32[r29-4>>2]&3|0)!=0){_memset(r29,0,32)|0}HEAP32[r29+28>>2]=r28;r30=r29+8|0;HEAP32[r30>>2]=0;r31=r29+12|0;HEAP32[r31>>2]=0;r32=r28+4|0;do{if((_hash_table_lookup(HEAP32[r32>>2],34360,r27)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=34360,r5));STACKTOP=r5;r33=0}else{r28=HEAP32[r27>>2];if((r28|0)==0){r33=0;break}r33=HEAP32[r28>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[r32>>2],24208,r26)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=24208,r5));STACKTOP=r5;r34=0}else{r27=HEAP32[r26>>2];if((r27|0)==0){r34=0;break}r34=HEAP32[r27>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[r32>>2],18472,r25)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=18472,r5));STACKTOP=r5;r35=0}else{r26=HEAP32[r25>>2];if((r26|0)==0){r35=0;break}r35=HEAPF64[r26>>3]}}while(0);r25=_gauden_init(r33,r34,r35,r2);HEAP32[r30>>2]=r25;r35=r25+20|0;r34=HEAP32[r35>>2];r33=HEAP32[r1+16>>2];r1=r33+24|0;r26=(HEAP32[r1>>2]|0)==0;do{if((r34|0)==(HEAP32[(r26?r33+12|0:r1)>>2]|0)){r27=r25+28|0;r28=0;while(1){if((r28|0)>=(r34|0)){break}r36=HEAP32[HEAP32[r27>>2]+(r28<<2)>>2];r37=(HEAP32[r33+84>>2]|0)==0;do{if(r37){r38=HEAP32[r33+28>>2];if((r38|0)==0){r39=HEAP32[r33+16>>2]+(r28<<2)|0;break}else{r39=r38+(r28<<2)|0;break}}else{r39=r33+92|0}}while(0);if((r36|0)!=(HEAP32[r39>>2]|0)){r4=27;break}r28=r28+1|0}if(r4==27){do{if(r37){r27=HEAP32[r33+28>>2];if((r27|0)==0){r40=HEAP32[r33+16>>2]+(r28<<2)|0;break}else{r40=r27+(r28<<2)|0;break}}else{r40=r33+92|0}}while(0);r27=HEAP32[r40>>2];_err_msg(4,7400,113,12176,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r28,HEAP32[r5+8>>2]=r36,HEAP32[r5+16>>2]=r27,r5));STACKTOP=r5;break}do{if((_hash_table_lookup(HEAP32[r32>>2],8184,r24)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=8184,r5));STACKTOP=r5;r41=0}else{r27=HEAP32[r24>>2];if((r27|0)==0){r41=0;break}r41=HEAP32[r27>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[r32>>2],40016,r23)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=40016,r5));STACKTOP=r5;r42=0}else{r28=HEAP32[r23>>2];if((r28|0)==0){r42=0;break}r42=HEAP32[r28>>2]}}while(0);do{if((_hash_table_lookup(HEAP32[r32>>2],6760,r22)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=6760,r5));STACKTOP=r5;r43=0}else{r28=HEAP32[r22>>2];if((r28|0)==0){r43=0;break}r43=HEAPF64[r28>>3]}}while(0);r28=_malloc(40);if((r28|0)==0){_ckd_fail(29016,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=1,HEAP32[r5+8>>2]=40,HEAP32[r5+16>>2]=7168,HEAP32[r5+24>>2]=281,r5));STACKTOP=r5}if((HEAP32[r28-4>>2]&3|0)!=0){_memset(r28,0,40)|0}r27=r28;r38=_logmath_init(HEAPF64[r2+24>>3],10,1);HEAP32[r28+4>>2]=r38;r38=r28+24|0;HEAPF32[r38>>2]=r43;r44=r25+16|0;r45=HEAP32[r44>>2];r46=r28+20|0;r47=r46;HEAP32[r47>>2]=r45;L67:do{if((r42|0)==0){if((r45|0)==1){r48=37480;r49=0;break}r48=(r45|0)==(HEAP32[r3+4>>2]|0)?27280:19864;r49=0}else{r50=(HEAP8[r42]|0)==46;do{if(r50){r51=r42;r52=37480;while(1){r53=r51+1|0;r54=r52+1|0;r55=HEAP8[r53];r56=HEAP8[r54];if(r55<<24>>24!=r56<<24>>24|r55<<24>>24==0|r56<<24>>24==0){break}else{r51=r53;r52=r54}}if(r55<<24>>24==r56<<24>>24){r48=r42;r49=0;break L67}if(r50){r57=r42;r58=27280}else{break}while(1){r52=r57+1|0;r51=r58+1|0;r59=HEAP8[r52];r60=HEAP8[r51];if(r59<<24>>24!=r60<<24>>24|r59<<24>>24==0|r60<<24>>24==0){break}else{r57=r52;r58=r51}}if(r59<<24>>24==r60<<24>>24){r48=r42;r49=0;break L67}if(r50){r61=r42;r62=19864}else{break}while(1){r51=r61+1|0;r52=r62+1|0;r63=HEAP8[r51];r64=HEAP8[r52];if(r63<<24>>24!=r64<<24>>24|r63<<24>>24==0|r64<<24>>24==0){break}else{r61=r51;r62=r52}}if(r63<<24>>24==r64<<24>>24){r48=r42;r49=0;break L67}}}while(0);_err_msg(1,7168,64,23656,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r42,r5));STACKTOP=r5;r50=_fopen(r42,45688);if((r50|0)==0){r52=___errno_location();r51=HEAP32[r52>>2];r52=_malloc(46);_memcpy(r52,22528,41)|0;r54=r52+_strlen(r52)|0;HEAP8[r54]=HEAP8[6400];HEAP8[r54+1|0]=HEAP8[6401];HEAP8[r54+2|0]=HEAP8[6402];HEAP8[r54+3|0]=HEAP8[6403];HEAP8[r54+4|0]=HEAP8[6404];HEAP8[r54+5|0]=HEAP8[6405];r54=_strerror(r51);_err_msg(5,7168,67,r52,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r42,HEAP32[r5+8>>2]=r54,r5));STACKTOP=r5;_free(r52);_exit(r51)}if((_bio_readhdr(r50,r18,r19,r15)|0)<0){_err_msg(5,7168,71,8144,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r42,r5));STACKTOP=r5;_exit(1)}r51=HEAP32[r18>>2];r52=0;r54=0;r53=0;L90:while(1){r65=HEAP32[r51+(r52<<2)>>2];if((r65|0)==0){break}r66=HEAP8[r65];do{if(r66<<24>>24==118){r67=r65;r68=45992;while(1){r69=r67+1|0;r70=r68+1|0;r71=HEAP8[r69];r72=HEAP8[r70];if(r71<<24>>24!=r72<<24>>24|r71<<24>>24==0|r72<<24>>24==0){break}else{r67=r69;r68=r70}}if(r71<<24>>24!=r72<<24>>24){if(r66<<24>>24==99){r73=r65;r74=46256;r4=77;break}else{r75=r54;r76=r53;break}}r77=HEAP32[r19>>2]+(r52<<2)|0;r68=HEAP32[r77>>2];if((HEAP8[r68]|0)==49){r67=r68;r70=22104;while(1){r69=r67+1|0;r78=r70+1|0;r79=HEAP8[r69];r80=HEAP8[r78];if(r79<<24>>24!=r80<<24>>24|r79<<24>>24==0|r80<<24>>24==0){break}else{r67=r69;r70=r78}}if(r79<<24>>24==r80<<24>>24){r81=r68}else{r4=72}}else{r4=72}if(r4==72){r4=0;_err_msg(3,7168,80,47984,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r42,HEAP32[r5+8>>2]=r68,HEAP32[r5+16>>2]=22104,r5));STACKTOP=r5;r81=HEAP32[r77>>2]}r70=_sscanf(r81,21656,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r21,r5));STACKTOP=r5;if((r70|0)!=1){r4=74;break L90}r75=r54;r76=HEAPF32[r21>>2]>1.1|0}else if(r66<<24>>24==99){r73=r65;r74=46256;r4=77}else{r75=r54;r76=r53}}while(0);if(r4==77){while(1){r4=0;r65=r73+1|0;r66=r74+1|0;r82=HEAP8[r65];r83=HEAP8[r66];if(r82<<24>>24!=r83<<24>>24|r82<<24>>24==0|r83<<24>>24==0){break}else{r73=r65;r74=r66;r4=77}}r75=r82<<24>>24==r83<<24>>24?1:r54;r76=r53}r52=r52+1|0;r54=r75;r53=r76}if(r4==74){r52=HEAP32[r77>>2];_err_msg(5,7168,86,21192,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r42,HEAP32[r5+8>>2]=r52,r5));STACKTOP=r5;_exit(1)}_bio_hdrarg_free(r51,HEAP32[r19>>2]);HEAP32[r19>>2]=0;HEAP32[r18>>2]=0;HEAP32[r16>>2]=0;r52=(r53|0)==0;do{if(r52){r84=HEAP32[r15>>2]}else{_err_msg(1,7168,101,20680,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r42,r5));STACKTOP=r5;r66=HEAP32[r15>>2];if((_bio_fread(r46,4,1,r50,r66,r16)|0)==1){r84=r66;break}_err_msg(5,7168,104,20176,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r42,r5));STACKTOP=r5;_exit(1)}}while(0);r53=r28+8|0;if((_bio_fread_1d(r20,4,r53,r50,r84,r16)|0)<0){_err_msg(5,7168,110,19760,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r42,r5));STACKTOP=r5;_exit(1)}r51=r28+28|0;HEAP32[r51>>2]=HEAP32[r20>>2];r66=HEAP32[r47>>2];_err_msg(1,7168,113,19136,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=HEAP32[r53>>2],HEAP32[r5+8>>2]=r66,r5));STACKTOP=r5;L124:do{if(r52){HEAP32[r47>>2]=1;r66=HEAP32[r53>>2];r65=0;r70=1;while(1){if(r65>>>0>=r66>>>0){break L124}r67=HEAP32[HEAP32[r51>>2]+(r65<<2)>>2];if(r67>>>0<r70>>>0){r85=r70}else{r78=r67+1|0;HEAP32[r47>>2]=r78;r85=r78}r65=r65+1|0;r70=r85}}}while(0);if((r54|0)!=0){_bio_verify_chksum(r50,r84,HEAP32[r16>>2])}if((_fread(r17,1,1,r50)|0)==1){r51=HEAP8[r17]|0;_err_msg(5,7168,127,18776,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r42,HEAP32[r5+8>>2]=r51,r5));STACKTOP=r5;_exit(1)}else{_fclose(r50);r51=HEAP32[r47>>2];_err_msg(1,7168,132,18160,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=HEAP32[r53>>2],HEAP32[r5+8>>2]=r51,r5));STACKTOP=r5;r48=r42;r49=HEAP32[r53>>2];break}}}while(0);r46=r12;_err_msg(1,7168,149,45064,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;r45=_fopen(r41,45688);if((r45|0)==0){r51=___errno_location();r52=HEAP32[r51>>2];r51=_malloc(58);_memcpy(r51,34832,53)|0;r70=r51+_strlen(r51)|0;HEAP8[r70]=HEAP8[6400];HEAP8[r70+1|0]=HEAP8[6401];HEAP8[r70+2|0]=HEAP8[6402];HEAP8[r70+3|0]=HEAP8[6403];HEAP8[r70+4|0]=HEAP8[6404];HEAP8[r70+5|0]=HEAP8[6405];r70=_strerror(r52);_err_msg(5,7168,152,r51,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r41,HEAP32[r5+8>>2]=r70,r5));STACKTOP=r5;_free(r51);_exit(r52)}if((_bio_readhdr(r45,r13,r14,r10)|0)<0){_err_msg(5,7168,156,8144,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}r52=HEAP32[r13>>2];r51=0;r70=0;while(1){HEAP32[r12>>2]=r51;r65=HEAP32[r52+(r51<<2)>>2];if((r65|0)==0){break}r66=HEAP8[r65];do{if(r66<<24>>24==99){r86=r65;r87=46256;r4=113}else if(r66<<24>>24==118){r78=r65;r67=45992;while(1){r69=r78+1|0;r88=r67+1|0;r89=HEAP8[r69];r90=HEAP8[r88];if(r89<<24>>24!=r90<<24>>24|r89<<24>>24==0|r90<<24>>24==0){break}else{r78=r69;r67=r88}}if(r89<<24>>24!=r90<<24>>24){if(r66<<24>>24==99){r86=r65;r87=46256;r4=113;break}else{r91=r70;break}}r67=HEAP32[HEAP32[r14>>2]+(r51<<2)>>2];if((HEAP8[r67]|0)==49){r78=r67;r88=49488;while(1){r69=r78+1|0;r92=r88+1|0;r93=HEAP8[r69];r94=HEAP8[r92];if(r93<<24>>24!=r94<<24>>24|r93<<24>>24==0|r94<<24>>24==0){break}else{r78=r69;r88=r92}}if(r93<<24>>24==r94<<24>>24){r91=r70;break}}_err_msg(3,7168,164,47984,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=r41,HEAP32[r5+8>>2]=r67,HEAP32[r5+16>>2]=49488,r5));STACKTOP=r5;r91=r70}else{r91=r70}}while(0);if(r4==113){while(1){r4=0;r65=r86+1|0;r66=r87+1|0;r95=HEAP8[r65];r96=HEAP8[r66];if(r95<<24>>24!=r96<<24>>24|r95<<24>>24==0|r96<<24>>24==0){break}else{r86=r65;r87=r66;r4=113}}r91=r95<<24>>24==r96<<24>>24?1:r70}r51=r51+1|0;r70=r91}_bio_hdrarg_free(r52,HEAP32[r14>>2]);HEAP32[r14>>2]=0;HEAP32[r13>>2]=0;HEAP32[r11>>2]=0;r51=r28+8|0;r66=r51;r65=HEAP32[r10>>2];if((_bio_fread(r51,4,1,r45,r65,r11)|0)!=1){_err_msg(5,7168,184,27856,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}r51=r28+12|0;r53=r51;if((_bio_fread(r51,4,1,r45,r65,r11)|0)!=1){_err_msg(5,7168,184,27856,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}r51=r28+16|0;r50=r51;if((_bio_fread(r51,4,1,r45,r65,r11)|0)!=1){_err_msg(5,7168,184,27856,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}if((_bio_fread(r46,4,1,r45,r65,r11)|0)!=1){_err_msg(5,7168,184,27856,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}r51=HEAP32[r12>>2];r54=HEAP32[r66>>2];r88=HEAP32[r53>>2];r78=Math_imul(r54,r88)|0;r92=HEAP32[r50>>2];if((r51|0)!=(Math_imul(r78,r92)|0)){_err_msg(5,7168,189,32400,(r5=STACKTOP,STACKTOP=STACKTOP+40|0,HEAP32[r5>>2]=r41,HEAP32[r5+8>>2]=r51,HEAP32[r5+16>>2]=r54,HEAP32[r5+24>>2]=r88,HEAP32[r5+32>>2]=r92,r5));STACKTOP=r5;_exit(1)}r92=HEAPF32[r38>>2];if(!(r92>0&r92<1)){_err_msg(5,7168,197,31304,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAPF64[r5>>3]=r92,r5));STACKTOP=r5;_exit(1)}_err_msg(1,7168,200,30368,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=10,r5));STACKTOP=r5;if(HEAP32[r47>>2]>>>0>1){_err_msg(1,7168,207,29848,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r92=___ckd_calloc_3d__(HEAP32[r66>>2],HEAP32[r53>>2],HEAP32[r50>>2],1,7168,210);HEAP32[r28>>2]=r92}else{_err_msg(1,7168,213,28888,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r92=___ckd_calloc_3d__(HEAP32[r53>>2],HEAP32[r50>>2],HEAP32[r66>>2],1,7168,216);HEAP32[r28>>2]=r92}r92=___ckd_calloc__(HEAP32[r50>>2],4,7168,220);r88=r92;r54=r2+48|0;r51=r2+9|0;r78=r28;r69=r2+64|0;r97=0;r98=0;L189:while(1){if(r97>>>0<HEAP32[r66>>2]>>>0){r99=0;r100=r98}else{break}while(1){if(r99>>>0>=HEAP32[r53>>2]>>>0){break}r101=_bio_fread(r92,4,HEAP32[r50>>2],r45,r65,r11);if((r101|0)!=(HEAP32[r50>>2]|0)){r4=132;break L189}r102=_vector_sum_norm(r88,r101)>0;r101=r102?r100:r100+1|0;r102=HEAP32[r50>>2];r103=HEAPF32[r38>>2];r104=0;while(1){if((r104|0)>=(r102|0)){break}r105=r88+(r104<<2)|0;if(HEAPF32[r105>>2]<r103){HEAPF32[r105>>2]=r103}r104=r104+1|0}_vector_sum_norm(r88,HEAP32[r50>>2]);r104=0;while(1){if(r104>>>0>=HEAP32[r50>>2]>>>0){break}r103=HEAPF32[r88+(r104<<2)>>2];if(r103>0){r102=Math_log(r103);r106=(r102*HEAPF64[r54>>3]&-1)>>HEAP8[r51]}else{r106=HEAP32[r69>>2]}r102=511-r106|0;r103=(r102|0)<261120;if(HEAP32[r47>>2]>>>0>1){if(r103){r107=r102>>>10&255}else{r107=-1}HEAP8[HEAP32[HEAP32[HEAP32[r78>>2]+(r97<<2)>>2]+(r99<<2)>>2]+r104|0]=r107}else{if(r103){r108=r102>>>10&255}else{r108=-1}HEAP8[HEAP32[HEAP32[HEAP32[r78>>2]+(r99<<2)>>2]+(r104<<2)>>2]+r97|0]=r108}r104=r104+1|0}r99=r99+1|0;r100=r101}r97=r97+1|0;r98=r100}if(r4==132){_err_msg(5,7168,230,24664,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}HEAP32[r12>>2]=r97;if((r98|0)>0){_err_msg(3,7168,254,23160,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r98,r5));STACKTOP=r5}_free(r92);if((r70|0)!=0){_bio_verify_chksum(r45,r65,HEAP32[r11>>2])}if((_fread(r9,1,1,r45)|0)==1){_err_msg(5,7168,262,22384,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r41,r5));STACKTOP=r5;_exit(1)}_fclose(r45);r78=HEAP32[r53>>2];r69=HEAP32[r50>>2];_err_msg(1,7168,268,24960,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=HEAP32[r66>>2],HEAP32[r5+8>>2]=r78,HEAP32[r5+16>>2]=r69,r5));STACKTOP=r5;r69=(HEAP8[r48]|0)==46;L233:do{if(r69){r78=r48;r51=37480;while(1){r54=r78+1|0;r88=r51+1|0;r109=HEAP8[r54];r110=HEAP8[r88];if(r109<<24>>24!=r110<<24>>24|r109<<24>>24==0|r110<<24>>24==0){break}else{r78=r54;r51=r88}}if(r109<<24>>24==r110<<24>>24){_err_msg(1,7168,307,15816,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r51=___ckd_calloc__(HEAP32[r66>>2],4,7168,308);HEAP32[r28+28>>2]=r51;break}if(r69){r111=r48;r112=27280}else{r4=181;break}while(1){r51=r111+1|0;r78=r112+1|0;r113=HEAP8[r51];r114=HEAP8[r78];if(r113<<24>>24!=r114<<24>>24|r113<<24>>24==0|r114<<24>>24==0){break}else{r111=r51;r112=r78}}if(r113<<24>>24==r114<<24>>24){_err_msg(1,7168,312,13032,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r78=___ckd_calloc__(HEAP32[r66>>2],4,7168,313);r51=r28+28|0;HEAP32[r51>>2]=r78;r78=r3+72|0;r88=0;while(1){if(r88>>>0>=HEAP32[r66>>2]>>>0){break L233}HEAP32[HEAP32[r51>>2]+(r88<<2)>>2]=HEAP16[HEAP32[r78>>2]+(r88<<1)>>1]|0;r88=r88+1|0}}if(r69){r115=r48;r116=19864}else{r4=181;break}while(1){r88=r115+1|0;r78=r116+1|0;r117=HEAP8[r88];r118=HEAP8[r78];if(r117<<24>>24!=r118<<24>>24|r117<<24>>24==0|r118<<24>>24==0){break}else{r115=r88;r116=r78}}if(r117<<24>>24!=r118<<24>>24){if(r69){r119=r48;r120=10416}else{r4=181;break}while(1){r78=r119+1|0;r88=r120+1|0;r121=HEAP8[r78];r122=HEAP8[r88];if(r121<<24>>24!=r122<<24>>24|r121<<24>>24==0|r122<<24>>24==0){break}else{r119=r78;r120=r88}}if(r121<<24>>24!=r122<<24>>24){r4=181;break}}_err_msg(1,7168,320,8696,(r5=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r5>>2]=0,r5));STACKTOP=r5;r88=HEAP32[r66>>2];if(r88>>>0<2){_err_msg(5,7168,322,7016,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r88,r5));STACKTOP=r5;_exit(1)}r78=___ckd_calloc__(r88,4,7168,324);r88=r28+28|0;HEAP32[r88>>2]=r78;r78=0;while(1){r123=HEAP32[r66>>2];if(r78>>>0>=r123>>>0){break}HEAP32[HEAP32[r88>>2]+(r78<<2)>>2]=r78;r78=r78+1|0}HEAP32[r47>>2]=r123}else{r4=181}}while(0);do{if(r4==181){r69=HEAP32[r66>>2];if((r69|0)==(r49|0)){break}_err_msg(5,7168,333,6e3,(r5=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r5>>2]=r49,HEAP32[r5+8>>2]=r48,HEAP32[r5+16>>2]=r69,HEAP32[r5+24>>2]=r41,r5));STACKTOP=r5;_exit(1)}}while(0);HEAP32[r28+32>>2]=0;HEAP32[r31>>2]=r27;do{if((_hash_table_lookup(HEAP32[r32>>2],6048,r8)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=6048,r5));STACKTOP=r5;r124=0}else{r66=HEAP32[r8>>2];if((r66|0)==0){r124=0;break}r124=HEAP32[r66>>2]}}while(0);HEAP32[r28+36>>2]=r124;r27=HEAP32[r53>>2];r66=HEAP32[r35>>2];if((r27|0)!=(r66|0)){_err_msg(5,7400,129,48384,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r66,HEAP32[r5+8>>2]=r27,r5));STACKTOP=r5;_exit(1)}r27=HEAP32[r50>>2];r66=HEAP32[r25+24>>2];if((r27|0)!=(r66|0)){_err_msg(5,7400,132,46912,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r66,HEAP32[r5+8>>2]=r27,r5));STACKTOP=r5;_exit(1)}r27=HEAP32[r47>>2];r66=HEAP32[r44>>2];if(r27>>>0>r66>>>0){_err_msg(5,7400,135,45104,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r27,HEAP32[r5+8>>2]=r66,r5));STACKTOP=r5;_exit(1)}if(r27>>>0<r66>>>0){_err_msg(4,7400,138,43472,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r27,HEAP32[r5+8>>2]=r66,r5));STACKTOP=r5}do{if((_hash_table_lookup(HEAP32[r32>>2],48024,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=48024,r5));STACKTOP=r5;r125=0}else{r66=HEAP32[r7>>2];if((r66|0)==0){r125=0;break}r125=HEAP32[r66>>2]}}while(0);r47=r29+16|0;HEAP32[r47>>2]=r125;_err_msg(1,7400,141,41144,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=r125,r5));STACKTOP=r5;r50=HEAP32[r47>>2];r53=HEAP32[HEAP32[r30>>2]+24>>2];if((r50|0)==0){r126=0;r127=r53;r4=201}else{if((r50|0)>(r53|0)){r126=r50;r127=r53;r4=201}else{r128=r50}}if(r4==201){_err_msg(3,7400,145,39888,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r126,HEAP32[r5+8>>2]=r127,r5));STACKTOP=r5;r50=HEAP32[HEAP32[r30>>2]+24>>2];HEAP32[r47>>2]=r50;r128=r50}r50=___ckd_calloc_3d__(HEAP32[r44>>2],HEAP32[r35>>2],r128,8,7400,151);HEAP32[r29+20>>2]=r50;r50=___ckd_calloc__(HEAP32[r44>>2],1,7400,152);HEAP32[r29+24>>2]=r50;HEAP32[r29>>2]=4864;r129=r29;STACKTOP=r6;return r129}else{r50=HEAP32[(r26?r33+12|0:r1)>>2];_err_msg(4,7400,107,15104,(r5=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r5>>2]=r34,HEAP32[r5+8>>2]=r50,r5));STACKTOP=r5}}while(0);_ms_mgau_free(r29);r129=0;STACKTOP=r6;return r129}function _ms_mgau_free(r1){var r2,r3,r4,r5;if((r1|0)==0){return}r2=HEAP32[r1+8>>2];if((r2|0)!=0){_gauden_free(r2)}r2=HEAP32[r1+12>>2];if((r2|0)!=0){r3=HEAP32[r2>>2];if((r3|0)!=0){r4=HEAP32[r3>>2];if((r4|0)!=0){_free(HEAP32[r4>>2])}_free(HEAP32[r3>>2]);_free(r3)}r3=HEAP32[r2+28>>2];if((r3|0)!=0){_free(r3)}r3=HEAP32[r2+32>>2];if((r3|0)!=0){_free(r3)}r3=HEAP32[r2+4>>2];do{if((r3|0)!=0){r4=r3+12|0;r5=HEAP32[r4>>2]-1|0;HEAP32[r4>>2]=r5;if((r5|0)>0){break}r5=HEAP32[r3+16>>2];if((r5|0)==0){_free(HEAP32[r3>>2])}else{_mmio_file_unmap(r5)}_free(r3)}}while(0);_free(r2)}r2=HEAP32[r1+20>>2];if((r2|0)!=0){r3=HEAP32[r2>>2];if((r3|0)!=0){_free(HEAP32[r3>>2])}_free(HEAP32[r2>>2]);_free(r2)}r2=HEAP32[r1+24>>2];if((r2|0)!=0){_free(r2)}_free(r1);return}function _ms_mgau_mllr_transform(r1,r2){_gauden_mllr_transform(HEAP32[r1+8>>2],r2,HEAP32[r1+28>>2]);return 0}function _ms_cont_mgau_frame_eval(r1,r2,r3,r4,r5,r6,r7){var r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25;r6=HEAP32[r1+16>>2];r8=HEAP32[r1+8>>2];r9=HEAP32[r1+12>>2];r10=r8+16|0;if((r7|0)!=0){r7=r1+20|0;r11=0;while(1){if((r11|0)>=(HEAP32[r10>>2]|0)){break}_gauden_dist(r8,r11,r6,r5,HEAP32[HEAP32[r7>>2]+(r11<<2)>>2]);r11=r11+1|0}r11=r9+8|0;r12=r9+28|0;r13=0;r14=2147483647;while(1){r15=HEAP32[r11>>2];if(r13>>>0>=r15>>>0){r16=0;r17=r15;break}r15=_senone_eval(r9,r13,HEAP32[HEAP32[r7>>2]+(HEAP32[HEAP32[r12>>2]+(r13<<2)>>2]<<2)>>2],r6)&65535;HEAP16[r2+(r13<<1)>>1]=r15;r18=r15<<16>>16;r13=r13+1|0;r14=(r14|0)>(r18|0)?r18:r14}while(1){if(r16>>>0>=r17>>>0){break}r13=r2+(r16<<1)|0;r12=HEAP16[r13>>1]-r14|0;if((r12|0)>32767){r19=32767}else{r19=(r12|0)<-32768?-32768:r12&65535}HEAP16[r13>>1]=r19;r16=r16+1|0;r17=HEAP32[r11>>2]}return 0}r11=r1+24|0;r17=0;while(1){if((r17|0)>=(HEAP32[r10>>2]|0)){break}HEAP8[HEAP32[r11>>2]+r17|0]=0;r17=r17+1|0}r17=r9+28|0;r16=0;r19=0;while(1){if((r16|0)>=(r4|0)){break}r14=HEAPU8[r3+r16|0]+r19|0;HEAP8[HEAP32[r11>>2]+HEAP32[HEAP32[r17>>2]+(r14<<2)>>2]|0]=1;r16=r16+1|0;r19=r14}r19=r1+20|0;r1=0;while(1){if((r1|0)>=(HEAP32[r10>>2]|0)){r20=0;r21=2147483647;r22=0;break}if((HEAP8[HEAP32[r11>>2]+r1|0]|0)!=0){_gauden_dist(r8,r1,r6,r5,HEAP32[HEAP32[r19>>2]+(r1<<2)>>2])}r1=r1+1|0}while(1){if((r20|0)>=(r4|0)){r23=0;r24=0;break}r1=HEAPU8[r3+r20|0]+r22|0;r5=_senone_eval(r9,r1,HEAP32[HEAP32[r19>>2]+(HEAP32[HEAP32[r17>>2]+(r1<<2)>>2]<<2)>>2],r6)&65535;HEAP16[r2+(r1<<1)>>1]=r5;r8=r5<<16>>16;r20=r20+1|0;r21=(r21|0)>(r8|0)?r8:r21;r22=r1}while(1){if((r23|0)>=(r4|0)){break}r22=HEAPU8[r3+r23|0]+r24|0;r20=r2+(r22<<1)|0;r6=HEAP16[r20>>1]-r21|0;if((r6|0)>32767){r25=32767}else{r25=(r6|0)<-32768?-32768:r6&65535}HEAP16[r20>>1]=r25;r23=r23+1|0;r24=r22}return 0}function _senone_eval(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;if((r2|0)<=-1){___assert_fail(48352,7168,371,49800)}if(HEAP32[r1+8>>2]>>>0<=r2>>>0){___assert_fail(48352,7168,371,49800)}if((r4|0)<=0){___assert_fail(46872,7168,372,49800)}if(HEAP32[r1+16>>2]>>>0<r4>>>0){___assert_fail(46872,7168,372,49800)}r5=HEAP32[r1+12>>2];r6=r1+20|0;r7=r1|0;r8=r1+4|0;r9=0;r10=0;while(1){if(r9>>>0>=r5>>>0){break}r11=HEAP32[r3+(r9<<2)>>2];r12=HEAP32[r6>>2]>>>0>1;r13=HEAP32[r11>>2];r14=HEAP32[r7>>2];if(r12){r15=HEAP32[HEAP32[r14+(r2<<2)>>2]+(r9<<2)>>2]+r13|0}else{r15=HEAP32[HEAP32[r14+(r9<<2)>>2]+(r13<<2)>>2]+r2|0}r13=1;r16=((HEAPF32[r11+4>>2]&-1)+1023>>10)-HEAPU8[r15]|0;while(1){if((r13|0)>=(r4|0)){break}r17=HEAP32[r11+(r13<<3)>>2];if(r12){r18=HEAP32[HEAP32[r14+(r2<<2)>>2]+(r9<<2)>>2]+r17|0}else{r18=HEAP32[HEAP32[r14+(r9<<2)>>2]+(r17<<2)>>2]+r2|0}r17=_logmath_add(HEAP32[r8>>2],r16,((HEAPF32[r11+(r13<<3)+4>>2]&-1)+1023>>10)-HEAPU8[r18]|0);r13=r13+1|0;r16=r17}r9=r9+1|0;r10=r10-r16|0}r9=(r10|0)/(HEAP32[r1+36>>2]|0)&-1;if((r9|0)>32767){return 32767}else{return(r9|0)<-32768?-32768:r9}}function _ngram_search_calc_beams(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+152|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r4+32;r10=r4+40;r11=r4+48;r12=r4+56;r13=r4+64;r14=r4+72;r15=r4+80;r16=r4+88;r17=r4+96;r18=r4+104;r19=r4+112;r20=r4+120;r21=r4+128;r22=r4+136;r23=r4+144;r24=HEAP32[r1+12>>2]+4|0;r25=HEAP32[r24>>2];r26=HEAP32[r1+8>>2]+4|0;do{if((_hash_table_lookup(HEAP32[r26>>2],47184,r23)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47184,r3));STACKTOP=r3;r2=5}else{r27=HEAP32[r23>>2];if((r27|0)==0){r2=5;break}r28=HEAPF64[r27>>3];if(r28<=0){r2=5;break}r27=Math_log(r28);r29=(r27*HEAPF64[r25+48>>3]&-1)>>HEAP8[r25+9|0]}}while(0);if(r2==5){r29=HEAP32[r25+64>>2]}HEAP32[r1+484>>2]=r29>>10;r29=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],17400,r22)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=17400,r3));STACKTOP=r3;r2=11}else{r25=HEAP32[r22>>2];if((r25|0)==0){r2=11;break}r23=HEAPF64[r25>>3];if(r23<=0){r2=11;break}r25=Math_log(r23);r30=(r25*HEAPF64[r29+48>>3]&-1)>>HEAP8[r29+9|0]}}while(0);if(r2==11){r30=HEAP32[r29+64>>2]}HEAP32[r1+496>>2]=r30>>10;r30=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],17144,r21)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=17144,r3));STACKTOP=r3;r2=17}else{r29=HEAP32[r21>>2];if((r29|0)==0){r2=17;break}r22=HEAPF64[r29>>3];if(r22<=0){r2=17;break}r29=Math_log(r22);r31=(r29*HEAPF64[r30+48>>3]&-1)>>HEAP8[r30+9|0]}}while(0);if(r2==17){r31=HEAP32[r30+64>>2]}HEAP32[r1+492>>2]=r31>>10;r31=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],16848,r20)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16848,r3));STACKTOP=r3;r2=23}else{r30=HEAP32[r20>>2];if((r30|0)==0){r2=23;break}r21=HEAPF64[r30>>3];if(r21<=0){r2=23;break}r30=Math_log(r21);r32=(r30*HEAPF64[r31+48>>3]&-1)>>HEAP8[r31+9|0]}}while(0);if(r2==23){r32=HEAP32[r31+64>>2]}HEAP32[r1+500>>2]=r32>>10;r32=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],16488,r19)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16488,r3));STACKTOP=r3;r2=29}else{r31=HEAP32[r19>>2];if((r31|0)==0){r2=29;break}r20=HEAPF64[r31>>3];if(r20<=0){r2=29;break}r31=Math_log(r20);r33=(r31*HEAPF64[r32+48>>3]&-1)>>HEAP8[r32+9|0]}}while(0);if(r2==29){r33=HEAP32[r32+64>>2]}HEAP32[r1+504>>2]=r33>>10;r33=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],16192,r18)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16192,r3));STACKTOP=r3;r2=35}else{r32=HEAP32[r18>>2];if((r32|0)==0){r2=35;break}r19=HEAPF64[r32>>3];if(r19<=0){r2=35;break}r32=Math_log(r19);r34=(r32*HEAPF64[r33+48>>3]&-1)>>HEAP8[r33+9|0]}}while(0);if(r2==35){r34=HEAP32[r33+64>>2]}HEAP32[r1+508>>2]=r34>>10;r34=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],16008,r17)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=16008,r3));STACKTOP=r3;r2=41}else{r33=HEAP32[r17>>2];if((r33|0)==0){r2=41;break}r18=HEAPF64[r33>>3];if(r18<=0){r2=41;break}r33=Math_log(r18);r35=(r33*HEAPF64[r34+48>>3]&-1)>>HEAP8[r34+9|0]}}while(0);if(r2==41){r35=HEAP32[r34+64>>2]}HEAP32[r1+512>>2]=r35>>10;do{if((_hash_table_lookup(HEAP32[r26>>2],15792,r16)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15792,r3));STACKTOP=r3;r36=0}else{r35=HEAP32[r16>>2];if((r35|0)==0){r36=0;break}r36=HEAP32[r35>>2]}}while(0);HEAP32[r1+536>>2]=r36;do{if((_hash_table_lookup(HEAP32[r26>>2],15576,r15)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=15576,r3));STACKTOP=r3;r37=0}else{r36=HEAP32[r15>>2];if((r36|0)==0){r37=0;break}r37=HEAP32[r36>>2]}}while(0);HEAP32[r1+540>>2]=r37;r37=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],6472,r14)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=6472,r3));STACKTOP=r3;r2=55}else{r15=HEAP32[r14>>2];if((r15|0)==0){r2=55;break}r36=HEAPF64[r15>>3];if(r36<=0){r2=55;break}r15=Math_log(r36);r38=(r15*HEAPF64[r37+48>>3]&-1)>>HEAP8[r37+9|0]}}while(0);if(r2==55){r38=HEAP32[r37+64>>2]}HEAP32[r1+524>>2]=r38>>10;r38=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],14880,r13)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=14880,r3));STACKTOP=r3;r2=61}else{r37=HEAP32[r13>>2];if((r37|0)==0){r2=61;break}r14=HEAPF64[r37>>3];if(r14<=0){r2=61;break}r37=Math_log(r14);r39=(r37*HEAPF64[r38+48>>3]&-1)>>HEAP8[r38+9|0]}}while(0);if(r2==61){r39=HEAP32[r38+64>>2]}HEAP32[r1+528>>2]=r39>>10;r39=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],24800,r12)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=24800,r3));STACKTOP=r3;r2=67}else{r38=HEAP32[r12>>2];if((r38|0)==0){r2=67;break}r13=HEAPF64[r38>>3];if(r13<=0){r2=67;break}r38=Math_log(r13);r40=(r38*HEAPF64[r39+48>>3]&-1)>>HEAP8[r39+9|0]}}while(0);if(r2==67){r40=HEAP32[r39+64>>2]}r39=r40>>10;r40=r1+532|0;HEAP32[r40>>2]=r39;r12=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],14160,r11)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=14160,r3));STACKTOP=r3;r2=73}else{r38=HEAP32[r11>>2];if((r38|0)==0){r2=73;break}r13=HEAPF64[r38>>3];if(r13<=0){r2=73;break}r38=Math_log(r13);r41=(r38*HEAPF64[r12+48>>3]&-1)>>HEAP8[r12+9|0]}}while(0);if(r2==73){r41=HEAP32[r12+64>>2]}HEAP32[r1+520>>2]=r39+(r41>>10);r41=HEAP32[r40>>2];r40=HEAP32[r24>>2];do{if((_hash_table_lookup(HEAP32[r26>>2],13848,r10)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=13848,r3));STACKTOP=r3;r2=79}else{r24=HEAP32[r10>>2];if((r24|0)==0){r2=79;break}r39=HEAPF64[r24>>3];if(r39<=0){r2=79;break}r24=Math_log(r39);r42=(r24*HEAPF64[r40+48>>3]&-1)>>HEAP8[r40+9|0]}}while(0);if(r2==79){r42=HEAP32[r40+64>>2]}HEAP32[r1+516>>2]=r41+(r42>>10);do{if((_hash_table_lookup(HEAP32[r26>>2],13616,r9)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=13616,r3));STACKTOP=r3;r43=0}else{r42=HEAP32[r9>>2];if((r42|0)==0){r43=0;break}r43=HEAPF64[r42>>3]}}while(0);do{if((_hash_table_lookup(HEAP32[r26>>2],7760,r8)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=7760,r3));STACKTOP=r3;r44=0}else{r9=HEAP32[r8>>2];if((r9|0)==0){r44=0;break}r44=HEAPF64[r9>>3]}}while(0);HEAPF32[r1+244>>2]=r43/r44;do{if((_hash_table_lookup(HEAP32[r26>>2],13256,r7)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=13256,r3));STACKTOP=r3;r45=0}else{r44=HEAP32[r7>>2];if((r44|0)==0){r45=0;break}r45=HEAPF64[r44>>3]}}while(0);do{if((_hash_table_lookup(HEAP32[r26>>2],7760,r6)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=7760,r3));STACKTOP=r3;r46=0}else{r7=HEAP32[r6>>2];if((r7|0)==0){r46=0;break}r46=HEAPF64[r7>>3]}}while(0);HEAPF32[r1+260>>2]=r45/r46;if((_hash_table_lookup(HEAP32[r26>>2],12984,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=12984,r3));STACKTOP=r3;r47=0;r48=1/r47;r49=r1+264|0;HEAPF32[r49>>2]=r48;STACKTOP=r4;return}r3=HEAP32[r5>>2];if((r3|0)==0){r47=0;r48=1/r47;r49=r1+264|0;HEAPF32[r49>>2]=r48;STACKTOP=r4;return}r47=HEAPF64[r3>>3];r48=1/r47;r49=r1+264|0;HEAPF32[r49>>2]=r48;STACKTOP=r4;return}function _ngram_search_update_widmap(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r2=STACKTOP;STACKTOP=STACKTOP+16|0;r3=r2;r4=r2+8;r5=HEAP32[r1+40>>2];r6=___ckd_calloc__(r5,4,19544,89);r7=r6;r8=r1+16|0;r9=0;while(1){if((r9|0)>=(r5|0)){break}if((r9|0)<0){r10=0}else{r10=HEAP32[HEAP32[HEAP32[r8>>2]+8>>2]+(r9*20&-1)>>2]}HEAP32[r7+(r9<<2)>>2]=r10;r9=r9+1|0}r9=HEAP32[r1+56>>2];r1=r9+18|0;L8:do{if((HEAP8[r1]|0)==0){r11=r9+48|0}else{r10=r9+12|0;r8=r9+48|0;r12=0;while(1){if((r12|0)>=(HEAP32[r10>>2]|0)){r11=r8;break L8}_free(HEAP32[HEAP32[r8>>2]+(r12<<2)>>2]);r12=r12+1|0}}}while(0);_free(HEAP32[r11>>2]);r12=r9+88|0;r8=HEAP32[r12>>2];if((r8|0)!=0){_free(HEAP32[r8>>2])}_free(r8);HEAP8[r1]=1;HEAP32[r9+8>>2]=r5;HEAP32[r9+12>>2]=r5;r1=___ckd_calloc__(r5,4,30416,654);HEAP32[r11>>2]=r1;r1=r9+68|0;r8=___ckd_calloc_2d__(r5,HEAP32[r1>>2],4,30416,655);HEAP32[r12>>2]=r8;r8=r9+52|0;r10=HEAP32[r8>>2];r13=r10+4|0;r14=r10|0;r15=0;while(1){if((r15|0)>=(HEAP32[r13>>2]|0)){break}r16=HEAP32[HEAP32[r14>>2]+(r15<<4)+12>>2];while(1){if((r16|0)==0){break}r17=HEAP32[r16+12>>2];_free(r16);r16=r17}r16=HEAP32[r14>>2]+(r15<<4)|0;HEAP32[r16>>2]=0;HEAP32[r16+4>>2]=0;HEAP32[r16+8>>2]=0;HEAP32[r16+12>>2]=0;r15=r15+1|0}HEAP32[r10+8>>2]=0;r10=r9+76|0;r9=0;while(1){if((r9|0)>=(r5|0)){break}r15=___ckd_salloc__(HEAP32[r7+(r9<<2)>>2],30416,659);HEAP32[HEAP32[r11>>2]+(r9<<2)>>2]=r15;r15=HEAP32[r8>>2];r14=HEAP32[HEAP32[r11>>2]+(r9<<2)>>2];r13=_key2hash(r15,r14);_enter(r15,r13,r14,_strlen(r14),r9,0);r14=0;while(1){if((r14|0)>=(HEAP32[r1>>2]|0)){break}r13=HEAP32[HEAP32[r10>>2]+(r14<<2)>>2]+52|0;r15=_hash_table_lookup(HEAP32[r13>>2],HEAP32[HEAP32[r11>>2]+(r9<<2)>>2],r4);do{if((r15|0)==0){r18=HEAP32[r4>>2]}else{if((r15|0)!=-1){r18=0;break}r16=_hash_table_lookup(HEAP32[r13>>2],40464,r3);if((r16|0)==0){r19=HEAP32[r3>>2]}else{if((r16|0)==-1){r18=-1;break}else{r19=0}}r18=r19}}while(0);HEAP32[HEAP32[HEAP32[r12>>2]+(r9<<2)>>2]+(r14<<2)>>2]=r18;r14=r14+1|0}r9=r9+1|0}_free(r6);STACKTOP=r2;return}function _ngram_search_free(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r2=0;r3=STACKTOP;STACKTOP=STACKTOP+24|0;r4=r3;r5=r3+8;r6=r3+16;r7=r1;_dict_free(HEAP32[r1+16>>2]);_dict2pid_free(HEAP32[r1+20>>2]);_free(HEAP32[r1+24>>2]);_ps_lattice_free(HEAP32[r1+28>>2]);r8=r1+64|0;if((HEAP8[r8]|0)!=0){r9=HEAP32[r1+480>>2]|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r6)|0)<0){_err_msg(4,45384,945,22936,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=47176,r2));STACKTOP=r2;r10=0}else{r11=HEAP32[r6>>2];if((r11|0)==0){r10=0;break}r10=HEAP32[r11>>2]|0}}while(0);r6=r9/r10;r10=HEAPF64[r1+336>>3];_err_msg(1,6096,432,26120,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r2>>3]=r10,HEAPF64[r2+8>>3]=r10/r6,r2));STACKTOP=r2;r10=HEAPF64[r1+344>>3];_err_msg(1,6096,435,19176,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r2>>3]=r10,HEAPF64[r2+8>>3]=r10/r6,r2));STACKTOP=r2;_reinit_search_tree(r7);_deinit_search_tree(r7);HEAP32[r1+96>>2]=0;r6=r1+128|0;r10=HEAP32[r6>>2];if((r10|0)!=0){_free(HEAP32[r10>>2])}_free(r10);HEAP32[r6>>2]=0;r6=r1+168|0;_free(HEAP32[r6>>2]);HEAP32[r6>>2]=0;r6=r1+172|0;_free(HEAP32[r6>>2]);HEAP32[r6>>2]=0;r6=r1+152|0;_free(HEAP32[r6>>2]);HEAP32[r6>>2]=0}if((HEAP8[r7+65|0]|0)!=0){r6=HEAP32[r1+480>>2]|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r5)|0)<0){_err_msg(4,45384,945,22936,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=47176,r2));STACKTOP=r2;r12=0}else{r10=HEAP32[r5>>2];if((r10|0)==0){r12=0;break}r12=HEAP32[r10>>2]|0}}while(0);r5=r6/r12;r12=HEAPF64[r1+392>>3];_err_msg(1,49384,176,15416,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r2>>3]=r12,HEAPF64[r2+8>>3]=r12/r5,r2));STACKTOP=r2;r12=HEAPF64[r1+400>>3];_err_msg(1,49384,179,12552,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r2>>3]=r12,HEAPF64[r2+8>>3]=r12/r5,r2));STACKTOP=r2;if((HEAP8[r8]|0)==0){_ngram_fwdflat_free_1ph(r7)}_free(HEAP32[r1+220>>2]);_free(HEAP32[r1+224>>2]);_free(HEAP32[r1+228>>2]);_free(HEAP32[r1+216>>2])}if((HEAP8[r7+66|0]|0)!=0){r7=HEAP32[r1+480>>2]|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r4)|0)<0){_err_msg(4,45384,945,22936,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=47176,r2));STACKTOP=r2;r13=0}else{r8=HEAP32[r4>>2];if((r8|0)==0){r13=0;break}r13=HEAP32[r8>>2]|0}}while(0);r4=r7/r13;r13=HEAPF64[r1+448>>3];_err_msg(1,19544,303,44920,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r2>>3]=r13,HEAPF64[r2+8>>3]=r13/r4,r2));STACKTOP=r2;r13=HEAPF64[r1+456>>3];_err_msg(1,19544,306,43432,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r2>>3]=r13,HEAPF64[r2+8>>3]=r13/r4,r2));STACKTOP=r2}r2=HEAP32[r1+60>>2];if((r2|0)!=0){_free(HEAP32[r2+16>>2]);_free(r2)}_listelem_alloc_free(HEAP32[r1+68>>2]);_listelem_alloc_free(HEAP32[r1+72>>2]);_listelem_alloc_free(HEAP32[r1+76>>2]);_ngram_model_free(HEAP32[r1+56>>2]);_free(HEAP32[r1+104>>2]);_free(HEAP32[r1+212>>2]);_free(HEAP32[r1+108>>2]);_free(HEAP32[r1+176>>2]);_free(HEAP32[r1+188>>2]);r2=HEAP32[r1+208>>2];if((r2|0)!=0){_free(r2-4|0)}r2=HEAP32[r1+140>>2];if((r2|0)==0){r14=r2;_free(r14);r15=r1+160|0;r16=r15;r17=HEAP32[r16>>2];r18=r17;_free(r18);r19=r1;_free(r19);STACKTOP=r3;return}_free(HEAP32[r2>>2]);r14=r2;_free(r14);r15=r1+160|0;r16=r15;r17=HEAP32[r16>>2];r18=r17;_free(r18);r19=r1;_free(r19);STACKTOP=r3;return}function _ngram_search_mark_bptable(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;r3=0;r4=STACKTOP;r5=r1+200|0;r6=HEAP32[r5>>2];if((r6|0)>(r2|0)){r7=HEAP32[r1+208>>2];r8=r1+180|0;r9=HEAP32[r8>>2];r10=r7+(r2<<2)|0;HEAP32[r10>>2]=r9;STACKTOP=r4;return}HEAP32[r5>>2]=r6<<1;r11=r1+208|0;r12=r6<<3|4;r6=_realloc(HEAP32[r11>>2]-4|0,r12);if((r6|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r12,HEAP32[r3+8>>2]=19544,HEAP32[r3+16>>2]=334,r3));STACKTOP=r3}r12=r6;HEAP32[r11>>2]=r12;r6=r1+216|0;r13=HEAP32[r6>>2];do{if((r13|0)==0){r14=r12}else{r15=HEAP32[r5>>2]<<2;r16=_realloc(r13,r15);if((r16|0)==0){_ckd_fail(45472,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r15,HEAP32[r3+8>>2]=19544,HEAP32[r3+16>>2]=338,r3));STACKTOP=r3}else{HEAP32[r6>>2]=r16;r14=HEAP32[r11>>2];break}}}while(0);r6=r14+4|0;HEAP32[r11>>2]=r6;r7=r6;r8=r1+180|0;r9=HEAP32[r8>>2];r10=r7+(r2<<2)|0;HEAP32[r10>>2]=r9;STACKTOP=r4;return}function _ngram_search_save_bp(r1,r2,r3,r4,r5,r6){var r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r7=0;r8=STACKTOP;r9=r1+212|0;r10=HEAP32[HEAP32[r9>>2]+(r3<<2)>>2];if((r10|0)!=-1){r11=r1+176|0;r12=HEAP32[r11>>2];r13=r2-HEAP32[r12+(r5*36&-1)>>2]|0;if((r13|0)>2e3){if((r3|0)<0){r14=0}else{r14=HEAP32[HEAP32[HEAP32[r1+16>>2]+8>>2]+(r3*20&-1)>>2]}_err_msg(3,19544,395,42272,(r7=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r7>>2]=r14,HEAP32[r7+8>>2]=r13,r7));STACKTOP=r7;r15=HEAP32[r11>>2]}else{r15=r12}if((HEAP32[r15+(r10*36&-1)+16>>2]|0)<(r4|0)){if((r10|0)==(r5|0)){___assert_fail(41080,19544,402,49992)}r12=HEAP32[r15+(r10*36&-1)+12>>2];if((r12|0)==(r5|0)){r16=r15}else{if((r12|0)==-1){r17=-1;r18=-1}else{r17=HEAP32[r15+(r12*36&-1)+24>>2];r18=HEAP32[r15+(r12*36&-1)+28>>2]}if((r5|0)==-1){r19=-1;r20=-1}else{r19=HEAP32[r15+(r5*36&-1)+24>>2];r20=HEAP32[r15+(r5*36&-1)+28>>2]}if((r18|0)==(r20|0)&(r17|0)==(r19|0)){r21=r15}else{_set_real_wid(r1,r10);r21=HEAP32[r11>>2]}HEAP32[r21+(r10*36&-1)+12>>2]=r5;r16=HEAP32[r11>>2]}HEAP32[r16+(r10*36&-1)+16>>2]=r4;r22=HEAP32[r11>>2]}else{r22=r15}r15=HEAP32[r22+(r10*36&-1)+20>>2];if((r15|0)==-1){STACKTOP=r8;return}HEAP32[HEAP32[r1+188>>2]+(r15+r6<<2)>>2]=r4;STACKTOP=r8;return}r15=r1+180|0;r10=HEAP32[r15>>2];if((r10|0)==-1){_err_msg(4,19544,448,39712,(r7=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r7>>2]=0,r7));STACKTOP=r7;STACKTOP=r8;return}r22=r1+184|0;r11=HEAP32[r22>>2];do{if((r10|0)>=(r11|0)){HEAP32[r22>>2]=r11<<1;r16=r1+176|0;r21=r11*72&-1;r19=_realloc(HEAP32[r16>>2],r21);if((r19|0)==0){_ckd_fail(45472,(r7=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r7>>2]=r21,HEAP32[r7+8>>2]=19544,HEAP32[r7+16>>2]=457,r7));STACKTOP=r7}else{HEAP32[r16>>2]=r19;_err_msg(1,19544,458,38432,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r22>>2],r7));STACKTOP=r7;break}}}while(0);r22=r1+192|0;r11=r1+196|0;r10=HEAP32[r11>>2];do{if((HEAP32[r22>>2]|0)>=(r10-HEAP32[HEAP32[HEAP32[r1+12>>2]+20>>2]+4>>2]|0)){HEAP32[r11>>2]=r10<<1;r19=r1+188|0;r16=r10<<3;r21=_realloc(HEAP32[r19>>2],r16);if((r21|0)==0){_ckd_fail(45472,(r7=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r7>>2]=r16,HEAP32[r7+8>>2]=19544,HEAP32[r7+16>>2]=465,r7));STACKTOP=r7}else{HEAP32[r19>>2]=r21;_err_msg(1,19544,466,37192,(r7=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r7>>2]=HEAP32[r11>>2],r7));STACKTOP=r7;break}}}while(0);HEAP32[HEAP32[r9>>2]+(r3<<2)>>2]=HEAP32[r15>>2];r9=HEAP32[r15>>2];r7=HEAP32[r1+176>>2];HEAP32[r7+(r9*36&-1)+8>>2]=r3;HEAP32[r7+(r9*36&-1)>>2]=r2;HEAP32[r7+(r9*36&-1)+12>>2]=r5;HEAP32[r7+(r9*36&-1)+16>>2]=r4;r2=r7+(r9*36&-1)+20|0;HEAP32[r2>>2]=HEAP32[r22>>2];HEAP8[r7+(r9*36&-1)+4|0]=1;if((HEAP32[r15>>2]|0)==(r5|0)){___assert_fail(35920,19544,477,49992)}r5=r1+16|0;r11=HEAP32[HEAP32[r5>>2]+8>>2];r10=HEAP16[HEAP32[r11+(r3*20&-1)+4>>2]+(HEAP32[r11+(r3*20&-1)+8>>2]-1<<1)>>1];HEAP16[r7+(r9*36&-1)+32>>1]=r10;r11=HEAP32[HEAP32[r5>>2]+8>>2];r5=HEAP32[r11+(r3*20&-1)+8>>2];if((r5|0)==1){HEAP16[r7+(r9*36&-1)+34>>1]=-1;HEAP32[r2>>2]=-1;r23=0}else{r2=HEAP16[HEAP32[r11+(r3*20&-1)+4>>2]+(r5-2<<1)>>1];HEAP16[r7+(r9*36&-1)+34>>1]=r2;r23=HEAP32[HEAP32[HEAP32[HEAP32[r1+20>>2]+16>>2]+(r10<<16>>16<<2)>>2]+((r2<<16>>16)*12&-1)+8>>2]}r2=r1+188|0;r10=0;while(1){if((r10|0)>=(r23|0)){break}HEAP32[HEAP32[r2>>2]+(HEAP32[r22>>2]+r10<<2)>>2]=-536870912;r10=r10+1|0}if((r23|0)!=0){HEAP32[HEAP32[r2>>2]+(HEAP32[r22>>2]+r6<<2)>>2]=r4}_set_real_wid(r1,HEAP32[r15>>2]);HEAP32[r15>>2]=HEAP32[r15>>2]+1;HEAP32[r22>>2]=HEAP32[r22>>2]+r23;STACKTOP=r8;return}function _set_real_wid(r1,r2){var r3,r4,r5;if((r2|0)==-1){___assert_fail(18760,19544,351,49784)}r3=HEAP32[r1+176>>2];r4=HEAP32[r3+(r2*36&-1)+12>>2];if((r4|0)==-1){r5=0}else{r5=r3+(r4*36&-1)|0}r4=r1+16|0;r1=r3+(r2*36&-1)+8|0;if((_dict_filler_word(HEAP32[r4>>2],HEAP32[r1>>2])|0)==0){HEAP32[r3+(r2*36&-1)+24>>2]=HEAP32[HEAP32[HEAP32[r4>>2]+8>>2]+(HEAP32[r1>>2]*20&-1)+16>>2];if((r5|0)==0){HEAP32[r3+(r2*36&-1)+28>>2]=-1;return}else{HEAP32[r3+(r2*36&-1)+28>>2]=HEAP32[r5+24>>2];return}}else{if((r5|0)==0){HEAP32[r3+(r2*36&-1)+24>>2]=HEAP32[HEAP32[HEAP32[r4>>2]+8>>2]+(HEAP32[r1>>2]*20&-1)+16>>2];HEAP32[r3+(r2*36&-1)+28>>2]=-1;return}else{HEAP32[r3+(r2*36&-1)+24>>2]=HEAP32[r5+24>>2];HEAP32[r3+(r2*36&-1)+28>>2]=HEAP32[r5+28>>2];return}}}function _ngram_search_find_exit(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;r4=HEAP32[r1+204>>2];if((r4|0)==0){r5=-1;return r5}r6=r4-1|0;r4=HEAP32[r1+208>>2];r7=HEAP32[r4+(r6<<2)>>2];r8=r6;while(1){if((r8|0)<=-1){break}if((HEAP32[r4+(r8<<2)>>2]|0)!=(r7|0)){break}r8=r8-1|0}if((r8|0)<0){r5=-1;return r5}if((r7|0)>=(HEAP32[r1+184>>2]|0)){___assert_fail(35072,19544,531,50040)}r6=r1+176|0;r9=r1+52|0;r1=HEAP32[r4+(r8<<2)>>2];r8=-536870912;r4=-1;while(1){if((r1|0)>=(r7|0)){r10=r8;r11=r4;break}r12=HEAP32[r6>>2];r13=HEAP32[r12+(r1*36&-1)+16>>2];if((HEAP32[r12+(r1*36&-1)+8>>2]|0)==(HEAP32[r9>>2]|0)){r10=r13;r11=r1;break}r12=(r13|0)>(r8|0);r14=r12?r1:r4;r1=r1+1|0;r8=r12?r13:r8;r4=r14}if((r2|0)!=0){HEAP32[r2>>2]=r10}if((r3|0)==0){r5=r11;return r5}HEAP32[r3>>2]=(HEAP32[HEAP32[r6>>2]+(r1*36&-1)+8>>2]|0)==(HEAP32[r9>>2]|0);r5=r11;return r5}function _ngram_search_alloc_all_rc(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r3=0;r4=HEAP32[HEAP32[r1+16>>2]+8>>2];r5=HEAP32[r4+(r2*20&-1)+8>>2];if((r5|0)==1){___assert_fail(39512,19544,608,50088)}r6=HEAP32[r4+(r2*20&-1)+4>>2];r4=HEAP16[r6+(r5-1<<1)>>1]|0;r7=HEAP16[r6+(r5-2<<1)>>1]|0;r5=HEAP32[HEAP32[HEAP32[r1+20>>2]+16>>2]+(r4<<2)>>2];r6=r5+(r7*12&-1)|0;r8=HEAP32[HEAP32[HEAP32[r1+12>>2]+20>>2]+56>>2]+(r4*12&-1)+4|0;r9=HEAPU8[r8]|HEAPU8[r8+1|0]<<8|HEAPU8[r8+2|0]<<16|HEAPU8[r8+3|0]<<24|0;r8=r1+104|0;r10=HEAP32[HEAP32[r8>>2]+(r2<<2)>>2];do{if((r10|0)==0){r3=6}else{if((HEAP16[r10+52>>1]|0)!=(HEAP16[HEAP32[r6>>2]>>1]|0)){r3=6;break}r11=r10;r12=r1+68|0;r13=r1+60|0}}while(0);if(r3==6){r10=r1+68|0;r14=HEAP32[r10>>2];r15=r14|0;r16=HEAP32[r15>>2];if((r16|0)==0){_listelem_add_block(r14,19544,616);r17=HEAP32[r15>>2]}else{r17=r16}HEAP32[r15>>2]=HEAP32[r17>>2];r15=r14+24|0;HEAP32[r15>>2]=HEAP32[r15>>2]+1;r15=r17;HEAP32[r17+80>>2]=HEAP32[HEAP32[r8>>2]+(r2<<2)>>2];HEAP32[HEAP32[r8>>2]+(r2<<2)>>2]=r15;HEAP32[r17+92>>2]=0;HEAP32[r17+88>>2]=r4;r2=r1+60|0;_hmm_init(HEAP32[r2>>2],r17,0,HEAPU16[HEAP32[r6>>2]>>1],r9);r11=r15;r12=r10;r13=r2}r2=r5+(r7*12&-1)+8|0;r7=r6|0;r6=1;r5=r11;while(1){if((r6|0)>=(HEAP32[r2>>2]|0)){break}r11=r5+80|0;r10=HEAP32[r11>>2];if((r10|0)==0){r3=13}else{if((HEAP16[r10+52>>1]|0)==(HEAP16[HEAP32[r7>>2]+(r6<<1)>>1]|0)){r18=r10}else{r3=13}}if(r3==13){r3=0;r10=HEAP32[r12>>2];r15=r10|0;r17=HEAP32[r15>>2];if((r17|0)==0){_listelem_add_block(r10,19544,630);r19=HEAP32[r15>>2]}else{r19=r17}HEAP32[r15>>2]=HEAP32[r19>>2];r15=r10+24|0;HEAP32[r15>>2]=HEAP32[r15>>2]+1;r15=r19;HEAP32[r19+80>>2]=HEAP32[r11>>2];HEAP32[r11>>2]=r15;HEAP32[r19+92>>2]=r6;HEAP32[r19+88>>2]=r4;_hmm_init(HEAP32[r13>>2],r19,0,HEAPU16[HEAP32[r7>>2]+(r6<<1)>>1],r9);r18=r15}r6=r6+1|0;r5=r18}return}function _ngram_compute_seg_score(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;r6=STACKTOP;STACKTOP=STACKTOP+16|0;r7=r6;r8=r6+8;r9=HEAP32[r2+12>>2];if((r9|0)==-1){HEAP32[r4>>2]=HEAP32[r2+16>>2];HEAP32[r5>>2]=0;STACKTOP=r6;return}r10=HEAP32[r1+176>>2];r11=HEAP32[r2+8>>2];r12=HEAP32[r1+16>>2];r13=HEAP16[r10+(r9*36&-1)+34>>1];if(r13<<16>>16==-1){r14=r10+(r9*36&-1)+16|0}else{r14=HEAP32[r1+188>>2]+(HEAP32[r10+(r9*36&-1)+20>>2]+HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r1+20>>2]+16>>2]+(HEAP16[r10+(r9*36&-1)+32>>1]<<2)>>2]+((r13<<16>>16)*12&-1)+4>>2]+(HEAP16[HEAP32[HEAP32[r12+8>>2]+(r11*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r13=HEAP32[r14>>2];if((r13|0)<=-536870912){___assert_fail(39672,19544,704,50120)}do{if((r11|0)==(HEAP32[r1+48>>2]|0)){r14=HEAP32[r1+520>>2];HEAP32[r5>>2]=r14;r15=r14}else{if((_dict_filler_word(r12,r11)|0)==0){r14=HEAP32[r1+56>>2];r16=HEAP32[r2+24>>2];r17=HEAP32[r10+(r9*36&-1)+28>>2];r18=r7|0;HEAP32[r18>>2]=HEAP32[r10+(r9*36&-1)+24>>2];HEAP32[r7+4>>2]=r17;r17=(_ngram_ng_score(r14,r16,r18,2,r8)>>10)*r3&-1;HEAP32[r5>>2]=r17;r15=r17;break}else{r17=HEAP32[r1+516>>2];HEAP32[r5>>2]=r17;r15=r17;break}}}while(0);HEAP32[r4>>2]=HEAP32[r2+16>>2]-r13-r15;STACKTOP=r6;return}function _ngram_search_lattice(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+40|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+24;r9=r4+32;r10=r1;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],26840,r7)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=26840,r3));STACKTOP=r3;r11=0}else{r12=HEAP32[r7>>2];if((r12|0)==0){r11=0;break}r11=HEAP32[r12>>2]}}while(0);r7=HEAP32[r1+248>>2];if((r7|0)==-536870912|(r7|0)<-536870912){r13=0;STACKTOP=r4;return r13}r7=r1+28|0;r12=HEAP32[r7>>2];do{if((r12|0)==0){r14=0;r15=r1+204|0}else{r16=r1+204|0;if((HEAP32[r12+36>>2]|0)==(HEAP32[r16>>2]|0)){r13=r12}else{r14=r12;r15=r16;break}STACKTOP=r4;return r13}}while(0);_ps_lattice_free(r14);HEAP32[r7>>2]=0;r14=_ps_lattice_init_search(r1,HEAP32[r15>>2]);if((HEAP8[r10+65|0]|0)==0){r17=1}else{r17=HEAPF32[r1+244>>2]}r15=r1+176|0;r12=r1+180|0;r16=r14+36|0;r18=r1+52|0;r19=r1+16|0;r20=r1+56|0;r21=r14+24|0;r22=r14+56|0;r23=r14+40|0;r24=HEAP32[r15>>2];r25=0;L17:while(1){if((r25|0)>=(HEAP32[r12>>2]|0)){break}do{if((HEAP8[r24+4|0]|0)!=0){r26=HEAP32[r24+12>>2];if((r26|0)<0){r27=0}else{r27=HEAP32[HEAP32[r15>>2]+(r26*36&-1)>>2]+1|0}r26=HEAP32[r24>>2];r28=HEAP32[r24+8>>2];r29=HEAP32[r16>>2];if((r26|0)>=(r29|0)){r2=17;break L17}if((r28|0)==(HEAP32[r18>>2]|0)){if((r26|0)<(r29-1|0)){break}}if((_dict_filler_word(HEAP32[r19>>2],r28)|0)==0){if((_ngram_model_set_known_wid(HEAP32[r20>>2],HEAP32[HEAP32[HEAP32[r19>>2]+8>>2]+(r28*20&-1)+16>>2])|0)==0){break}else{r30=r21}}else{r30=r21}while(1){r31=HEAP32[r30>>2];if((r31|0)==0){break}if((HEAP32[r31+4>>2]|0)==(r28|0)){if((HEAP32[r31+20>>2]|0)==(r27|0)){r2=26;break}}r30=r31+48|0}if(r2==26){r2=0;HEAP32[r31+16>>2]=r25;break}r29=HEAP32[r22>>2];r26=r29|0;r32=HEAP32[r26>>2];if((r32|0)==0){_listelem_add_block(r29,19544,1111);r33=HEAP32[r26>>2]}else{r33=r32}HEAP32[r26>>2]=HEAP32[r33>>2];r26=r29+24|0;HEAP32[r26>>2]=HEAP32[r26>>2]+1;HEAP32[r33+4>>2]=r28;HEAP32[r33+20>>2]=r27;HEAP32[r33+16>>2]=r25;HEAP32[r33+12>>2]=r25;HEAP16[r33+24>>1]=0;HEAP32[r33+40>>2]=0;HEAP32[r33+36>>2]=0;HEAP32[r33+48>>2]=HEAP32[r21>>2];HEAP32[r21>>2]=r33;HEAP16[r23>>1]=HEAP16[r23>>1]+1}}while(0);r24=r24+36|0;r25=r25+1|0}if(r2==17){___assert_fail(19112,19544,1089,51176)}r25=r1+44|0;r24=r21;while(1){r33=HEAP32[r24>>2];if((r33|0)==0){r2=36;break}if((HEAP32[r33+4>>2]|0)==(HEAP32[r25>>2]|0)){if((HEAP32[r33+20>>2]|0)==0){r34=r33;r2=37;break}}r24=r33+48|0}L53:do{if(r2==36){_err_msg(4,19544,1141,19720,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;HEAP32[r14+28>>2]=0}else if(r2==37){r24=r14+28|0;HEAP32[r24>>2]=r34;if((r34|0)==0){break}r25=HEAPF32[r1+260>>2];r33=r21;while(1){r27=HEAP32[r33>>2];if((r27|0)==0){r2=43;break}if((HEAP32[r27+4>>2]|0)==(HEAP32[r18>>2]|0)){if((HEAP32[HEAP32[r15>>2]+(HEAP32[r27+16>>2]*36&-1)>>2]|0)==(HEAP32[r16>>2]-1|0)){r35=r27;r2=60;break}}r33=r27+48|0}L62:do{if(r2==43){r33=r1+208|0;r27=HEAP32[r16>>2];while(1){r36=r27-1|0;if((r27|0)<=0){r2=46;break}if((HEAP32[HEAP32[r33>>2]+(r36<<2)>>2]|0)==(HEAP32[r12>>2]|0)){r27=r36}else{r2=47;break}}do{if(r2==46){_err_msg(4,19544,1170,21608,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3}else if(r2==47){r28=HEAP32[r33>>2];r31=r5|0;r30=r5+4|0;r26=HEAP32[r28+(r36<<2)>>2];r29=-1;r32=-536870912;r37=r28;while(1){if((r26|0)>=(HEAP32[r37+(r27<<2)>>2]|0)){r38=r29;break}r28=HEAP32[r15>>2];r39=HEAP32[r28+(r26*36&-1)+24>>2];r40=HEAP32[r18>>2];if((r39|0)==(r40|0)){r38=r26;break}r41=HEAP32[r28+(r26*36&-1)+28>>2];r28=HEAP32[r20>>2];HEAP32[r31>>2]=r39;HEAP32[r30>>2]=r41;r41=(_ngram_ng_score(r28,r40,r31,2,r6)>>10)*r25&-1;r40=HEAP32[HEAP32[r15>>2]+(r26*36&-1)+16>>2]+r41|0;r41=(r40|0)>(r32|0);r28=r41?r26:r29;r26=r26+1|0;r29=r28;r32=r41?r40:r32;r37=HEAP32[r33>>2]}if((r38|0)==-1){_err_msg(4,19544,1195,21120,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r36,r3));STACKTOP=r3;break}r37=HEAP32[HEAP32[r19>>2]+8>>2];_err_msg(1,19544,1199,20624,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=HEAP32[r37+(HEAP32[r37+(HEAP32[HEAP32[r15>>2]+(r38*36&-1)+8>>2]*20&-1)+16>>2]*20&-1)>>2],HEAP32[r3+8>>2]=r36,r3));STACKTOP=r3;r37=r21;while(1){r42=HEAP32[r37>>2];if((r42|0)==0){r2=58;break}if((HEAP32[r42+16>>2]|0)==(r38|0)){r2=56;break}r37=r42+48|0}if(r2==56){r37=r14+32|0;HEAP32[r37>>2]=r42;r43=r42;r44=r37;break L62}else if(r2==58){r37=HEAP32[HEAP32[r19>>2]+8>>2];_err_msg(4,19544,1209,20128,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=HEAP32[r37+(HEAP32[r37+(HEAP32[HEAP32[r15>>2]+(r38*36&-1)+8>>2]*20&-1)+16>>2]*20&-1)>>2],r3));STACKTOP=r3;break}}}while(0);HEAP32[r14+32>>2]=0;break L53}else if(r2==60){r33=r14+32|0;HEAP32[r33>>2]=r35;if((r35|0)==0){break L53}else{r43=r35;r44=r33}}}while(0);r25=HEAP32[r24>>2];r33=HEAP32[r25+4>>2];if((r33|0)<0){r45=0}else{r45=HEAP32[HEAP32[HEAP32[r1+16>>2]+8>>2]+(r33*20&-1)>>2]}r33=HEAP32[r25+20>>2];r25=HEAP32[r43+4>>2];if((r25|0)<0){r46=0}else{r46=HEAP32[HEAP32[HEAP32[r1+16>>2]+8>>2]+(r25*20&-1)>>2]}r25=HEAP32[r43+20>>2];_err_msg(1,19544,1252,25992,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r45,HEAP32[r3+8>>2]=r33,HEAP32[r3+16>>2]=r46,HEAP32[r3+24>>2]=r25,r3));STACKTOP=r3;_ngram_compute_seg_score(r10,HEAP32[r15>>2]+(HEAP32[HEAP32[r44>>2]+16>>2]*36&-1)|0,r17,r14+44|0,r9);r25=0;r33=HEAP32[r21>>2];while(1){if((r33|0)==0){break}if((r33|0)==(HEAP32[r44>>2]|0)){break}r27=HEAP32[r33+48>>2];r37=HEAP32[r22>>2];r32=r37|0;HEAP32[r33>>2]=HEAP32[r32>>2];HEAP32[r32>>2]=r33;r32=r37+28|0;HEAP32[r32>>2]=HEAP32[r32>>2]+1;HEAP32[r21>>2]=r27;r25=r25+1|0;r33=r27}_err_msg(1,19544,1278,24920,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r25,r3));STACKTOP=r3;HEAP16[HEAP32[r44>>2]+24>>1]=1;r33=r1+20|0;r27=r1+188|0;r32=r44;r37=0;L99:while(1){r29=HEAP32[r32>>2];if((r29|0)==0){break}r26=r29+24|0;L102:do{if((HEAP16[r26>>1]|0)==0){r47=r37}else{r31=HEAP32[r15>>2];do{if((r29|0)!=(HEAP32[r44>>2]|0)){if((HEAP32[r31+(HEAP32[r29+16>>2]*36&-1)>>2]-HEAP32[r31+(HEAP32[r29+12>>2]*36&-1)>>2]|0)>=(r11|0)){break}HEAP16[r26>>1]=0;r47=r37;break L102}}while(0);r31=r29+20|0;r30=r29+4|0;r40=r29;r41=r37;L108:while(1){r28=HEAP32[r40+48>>2];if((r28|0)==0){r47=r41;break L102}r39=HEAP32[r28+12>>2];r48=HEAP32[r15>>2];r49=HEAP32[r48+(r39*36&-1)>>2];r50=HEAP32[r28+16>>2];r51=HEAP32[r48+(r50*36&-1)>>2];r52=HEAP32[r31>>2];if((r52|0)<=(r49|0)){r40=r28;r41=r41;continue}if((r52|0)>(r51+1|0)){r40=r28;r41=r41;continue}if((r51-r49|0)<(r11|0)){if((HEAP16[r28+24>>1]|0)==0){r40=r28;r41=r41;continue}else{r2=81;break L99}}r49=r28+4|0;r51=r48+(r39*36&-1)|0;r48=r39;while(1){r53=(r48|0)>(r50|0);if(r53){r40=r28;r41=r41;continue L108}if((HEAP32[r51+8>>2]|0)==(HEAP32[r49>>2]|0)){if((HEAP32[r51>>2]|0)>=(r52-1|0)){break}}r51=r51+36|0;r48=r48+1|0}if(r53){r40=r28;r41=r41;continue}r48=r51|0;if((HEAP32[r48>>2]|0)!=(r52-1|0)){r40=r28;r41=r41;continue}_ngram_compute_seg_score(r10,r51,r17,r8,r9);r49=HEAP16[r51+34>>1];if(r49<<16>>16==-1){r54=r51+16|0}else{r54=HEAP32[r27>>2]+(HEAP32[r51+20>>2]+HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r33>>2]+16>>2]+(HEAP16[r51+32>>1]<<2)>>2]+((r49<<16>>16)*12&-1)+4>>2]+(HEAP16[HEAP32[HEAP32[HEAP32[r19>>2]+8>>2]+(HEAP32[r30>>2]*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r49=HEAP32[r54>>2];if((r49|0)==-536870912){r40=r28;r41=r41;continue}r50=HEAP32[r8>>2]+(r49-HEAP32[r51+16>>2])|0;if((r50|0)>0){_ps_lattice_link(r14,r28,r29,-424242,HEAP32[r48>>2]);HEAP16[r28+24>>1]=1;r40=r28;r41=r41+1|0;continue}if((r50|0)<=-536870912){r40=r28;r41=r41;continue}_ps_lattice_link(r14,r28,r29,r50,HEAP32[r48>>2]);HEAP16[r28+24>>1]=1;r40=r28;r41=r41+1|0}}}while(0);r32=r29+48|0;r37=r47}if(r2==81){___assert_fail(23480,19544,1307,50016)}if((HEAP16[HEAP32[r24>>2]+24>>1]|0)==0){_err_msg(4,19544,1359,22472,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;break}r32=r1+16|0;r33=r21;while(1){r27=HEAP32[r33>>2];if((r27|0)==0){r55=r21;break}r25=r27+12|0;HEAP32[r25>>2]=HEAP32[HEAP32[r15>>2]+(HEAP32[r25>>2]*36&-1)>>2];r25=r27+16|0;HEAP32[r25>>2]=HEAP32[HEAP32[r15>>2]+(HEAP32[r25>>2]*36&-1)>>2];HEAP32[r27+8>>2]=HEAP32[HEAP32[HEAP32[r32>>2]+8>>2]+(HEAP32[r27+4>>2]*20&-1)+16>>2];r33=r27+48|0}while(1){r33=HEAP32[r55>>2];if((r33|0)==0){break}r32=r33+20|0;r24=r33+8|0;r27=r33;while(1){r56=HEAP32[r27+48>>2];if((r56|0)==0){break}if((HEAP32[r56+20>>2]|0)!=(HEAP32[r32>>2]|0)){break}if((HEAP32[r56+8>>2]|0)==(HEAP32[r24>>2]|0)){r2=108;break}else{r27=r56}}if(r2==108){r2=0;r27=r33+44|0;HEAP32[r56+44>>2]=HEAP32[r27>>2];HEAP32[r27>>2]=r56}r55=r33+48|0}_err_msg(1,19544,1383,22072,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=HEAP16[r23>>1]|0,HEAP32[r3+8>>2]=r37,r3));STACKTOP=r3;if((_dict_filler_word(HEAP32[r19>>2],HEAP32[HEAP32[r44>>2]+4>>2])|0)!=0){HEAP32[HEAP32[r44>>2]+8>>2]=HEAP32[r18>>2]}_ps_lattice_delete_unreachable(r14);_ps_lattice_bypass_fillers(r14,HEAP32[r1+520>>2],HEAP32[r1+516>>2]);HEAP32[r7>>2]=r14;r13=r14;STACKTOP=r4;return r13}}while(0);_ps_lattice_free(r14);r13=0;STACKTOP=r4;return r13}function _ngram_search_start(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10;r2=STACKTOP;STACKTOP=STACKTOP+144|0;r3=r2;r4=r2+8;r5=r1;HEAP8[r5+67|0]=0;r6=HEAP32[r1+56>>2];r7=HEAP32[r6+64>>2];do{if((r7|0)!=0){r8=HEAP32[r7+20>>2];if((r8|0)==0){break}FUNCTION_TABLE[r8](r6)}}while(0);if((HEAP8[r1+64|0]|0)==0){if((HEAP8[r5+65|0]|0)==0){r9=-1;STACKTOP=r2;return r9}_ngram_fwdflat_start(r5);r9=0;STACKTOP=r2;return r9}r5=HEAP32[r1+40>>2];_memset(r1+268|0,0,40)|0;r6=r1+312|0;HEAPF64[r1+320>>3]=0;HEAPF64[r6+16>>3]=0;_getrusage(0,r4);HEAPF64[r6+40>>3]=(HEAP32[r4>>2]|0)+(HEAP32[r4+4>>2]|0)*1e-6+((HEAP32[r4+8>>2]|0)+(HEAP32[r4+12>>2]|0)*1e-6);_gettimeofday(r3,0);HEAPF64[r6+48>>3]=(HEAP32[r3>>2]|0)+(HEAP32[r3+4>>2]|0)*1e-6;HEAP32[r1+180>>2]=0;HEAP32[r1+192>>2]=0;r3=r1+212|0;r6=0;while(1){if((r6|0)>=(r5|0)){break}HEAP32[HEAP32[r3>>2]+(r6<<2)>>2]=-1;r6=r6+1|0}HEAP32[r1+136>>2]=0;HEAP32[r1+132>>2]=0;HEAP32[r1+148>>2]=0;HEAP32[r1+144>>2]=0;HEAP32[r1+248>>2]=0;HEAP32[r1+256>>2]=0;r6=r1+160|0;r3=0;while(1){if((r3|0)>=(r5|0)){break}HEAP32[HEAP32[r6>>2]+(r3*12&-1)>>2]=-1;r3=r3+1|0}HEAP32[r1+204>>2]=0;r3=r1+24|0;_free(HEAP32[r3>>2]);HEAP32[r3>>2]=0;r3=r1+120|0;r6=r1+116|0;r5=r1+104|0;r4=0;while(1){if((r4|0)>=(HEAP32[r3>>2]|0)){break}r7=HEAP32[HEAP32[r5>>2]+(HEAP32[HEAP32[r6>>2]+(r4<<2)>>2]<<2)>>2];HEAP32[r7+4>>2]=-536870912;HEAP32[r7+24>>2]=-1;r8=r7+77|0;r10=1;while(1){if((r10|0)>=(HEAPU8[r8]|0)){break}HEAP32[r7+4+(r10<<2)>>2]=-536870912;HEAP32[r7+24+(r10<<2)>>2]=-1;r10=r10+1|0}HEAP32[r7+44>>2]=-536870912;HEAP32[r7+48>>2]=-1;HEAP32[r7+64>>2]=-536870912;HEAP32[r7+72>>2]=-1;r4=r4+1|0}r4=HEAP32[HEAP32[r5>>2]+(HEAP32[HEAP32[r1+16>>2]+32>>2]<<2)>>2];HEAP32[r4+4>>2]=-536870912;HEAP32[r4+24>>2]=-1;r1=r4+77|0;r5=1;while(1){if((r5|0)>=(HEAPU8[r1]|0)){break}HEAP32[r4+4+(r5<<2)>>2]=-536870912;HEAP32[r4+24+(r5<<2)>>2]=-1;r5=r5+1|0}HEAP32[r4+44>>2]=-536870912;HEAP32[r4+48>>2]=-1;HEAP32[r4+64>>2]=-536870912;HEAP32[r4+4>>2]=0;HEAP32[r4+24>>2]=-1;HEAP32[r4+72>>2]=0;r9=0;STACKTOP=r2;return r9}function _ngram_search_step(r1,r2){var r3,r4;r3=r1;if((HEAP8[r1+64|0]|0)!=0){r4=_ngram_fwdtree_search(r3,r2);return r4}if((HEAP8[r3+65|0]|0)==0){r4=-1;return r4}r4=_ngram_fwdflat_search(r3,r2);return r4}function _ngram_search_finish(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+152|0;r5=r4;r6=r4+8;r7=r4+16;r8=r1;r9=r1+480|0;HEAP32[r9>>2]=HEAP32[r9>>2]+HEAP32[r1+204>>2];do{if((HEAP8[r1+64|0]|0)==0){if((HEAP8[r8+65|0]|0)==0){break}_ngram_fwdflat_finish(r8)}else{r9=r1+12|0;r10=HEAP32[HEAP32[r9>>2]+92>>2];_ngram_search_mark_bptable(r8,r10);r11=HEAP32[r1+80>>2];r12=HEAP32[r1+88>>2];while(1){if((r12|0)<=0){break}HEAP32[r11+4>>2]=-536870912;HEAP32[r11+24>>2]=-1;r13=r11+77|0;r14=1;while(1){if((r14|0)>=(HEAPU8[r13]|0)){break}HEAP32[r11+4+(r14<<2)>>2]=-536870912;HEAP32[r11+24+(r14<<2)>>2]=-1;r14=r14+1|0}HEAP32[r11+44>>2]=-536870912;HEAP32[r11+48>>2]=-1;HEAP32[r11+64>>2]=-536870912;HEAP32[r11+72>>2]=-1;r11=r11+96|0;r12=r12-1|0}r12=r10&1;r11=HEAP32[HEAP32[r1+128>>2]+(r12<<2)>>2];r14=HEAP32[r8+132+(r12<<2)>>2];while(1){r13=r11+4|0;r15=HEAP32[r11>>2];if((r14|0)<=0){break}HEAP32[r15+4>>2]=-536870912;HEAP32[r15+24>>2]=-1;r16=r15+77|0;r17=1;while(1){if((r17|0)>=(HEAPU8[r16]|0)){break}HEAP32[r15+4+(r17<<2)>>2]=-536870912;HEAP32[r15+24+(r17<<2)>>2]=-1;r17=r17+1|0}HEAP32[r15+44>>2]=-536870912;HEAP32[r15+48>>2]=-1;HEAP32[r15+64>>2]=-536870912;HEAP32[r15+72>>2]=-1;r11=r13;r14=r14-1|0}r14=r1+16|0;r11=r1+108|0;r17=r1+104|0;r16=r1+68|0;r18=HEAP32[HEAP32[r1+140>>2]+(r12<<2)>>2];r19=HEAP32[r8+144+(r12<<2)>>2];while(1){r20=r18+4|0;r21=HEAP32[r18>>2];if((r19|0)<=0){break}do{if((HEAP32[HEAP32[HEAP32[r14>>2]+8>>2]+(r21*20&-1)+8>>2]|0)!=1){r22=HEAP32[r11>>2]+(((r21|0)/32&-1)<<2)|0;HEAP32[r22>>2]=HEAP32[r22>>2]&~(1<<(r21&31));r22=HEAP32[HEAP32[r17>>2]+(r21<<2)>>2];if((r22|0)==0){break}else{r23=r22}while(1){if((r23|0)==0){break}r22=HEAP32[r23+80>>2];r24=HEAP32[r16>>2];HEAP32[r23>>2]=HEAP32[r24>>2];HEAP32[r24>>2]=r23;r25=r24+28|0;HEAP32[r25>>2]=HEAP32[r25>>2]+1;r23=r22}HEAP32[HEAP32[r17>>2]+(r21<<2)>>2]=0}}while(0);r18=r20;r19=r19-1|0}r19=r1+312|0;_getrusage(0,r7);r18=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6+((HEAP32[r7+8>>2]|0)+(HEAP32[r7+12>>2]|0)*1e-6)-HEAPF64[r19+40>>3];_gettimeofday(r6,0);r17=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6-HEAPF64[r19+48>>3];r16=r19+8|0;HEAPF64[r16>>3]=HEAPF64[r16>>3]+r18;r16=r19+16|0;HEAPF64[r16>>3]=HEAPF64[r16>>3]+r17;r16=r19+24|0;HEAPF64[r16>>3]=HEAPF64[r16>>3]+r18;r18=r19+32|0;HEAPF64[r18>>3]=HEAPF64[r18>>3]+r17;if((r10|0)>0){r17=r10+1|0;r18=r17|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47176,r3));STACKTOP=r3;r26=0}else{r19=HEAP32[r5>>2];if((r19|0)==0){r26=0;break}r26=HEAP32[r19>>2]|0}}while(0);r19=r18/r26;r16=HEAP32[r1+180>>2];r11=r10>>1;_err_msg(1,6096,1550,8328,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r16,HEAP32[r3+8>>2]=(r16+r11|0)/(r17|0)&-1,r3));STACKTOP=r3;r16=HEAP32[r1+304>>2];_err_msg(1,6096,1552,6856,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r16,HEAP32[r3+8>>2]=(r16+r11|0)/(r17|0)&-1,r3));STACKTOP=r3;r11=HEAP32[r1+272>>2];r16=r11+HEAP32[r1+276>>2]|0;r14=HEAP32[r1+280>>2];_err_msg(1,6096,1556,8528,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=r16,HEAP32[r3+8>>2]=(r16|0)/(r17|0)&-1,HEAP32[r3+16>>2]=r11,HEAP32[r3+24>>2]=r14,r3));STACKTOP=r3;r14=HEAP32[r1+284>>2];_err_msg(1,6096,1559,6904,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r14,HEAP32[r3+8>>2]=(r14|0)/(r17|0)&-1,r3));STACKTOP=r3;r14=HEAP32[r1+288>>2];_err_msg(1,6096,1561,5872,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r14,HEAP32[r3+8>>2]=(r14|0)/(r17|0)&-1,r3));STACKTOP=r3;r14=HEAPF64[r1+320>>3];_err_msg(1,6096,1564,48264,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r14,HEAPF64[r3+8>>3]=r14/r19,r3));STACKTOP=r3;r14=HEAPF64[r1+328>>3];_err_msg(1,6096,1567,46664,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r14,HEAPF64[r3+8>>3]=r14/r19,r3));STACKTOP=r3}if((HEAP8[r8+65|0]|0)==0){break}r19=HEAP32[r9>>2];r14=r19+92|0;r11=HEAP32[r14>>2];r16=HEAP32[r19+108>>2];if((r11|0)>(r16|0)){_err_msg(4,44200,880,36560,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r11,HEAP32[r3+8>>2]=r16,r3));STACKTOP=r3;r27=-1;STACKTOP=r4;return r27}r16=r19+112|0;HEAP32[r16>>2]=r11+HEAP32[r16>>2];HEAP32[r19+116>>2]=0;HEAP32[r14>>2]=0;HEAP32[r19+48>>2]=-1;HEAP32[HEAP32[r19+28>>2]+4>>2]=0;_ngram_fwdflat_start(r8);r19=0;while(1){if((HEAP32[HEAP32[r9>>2]+112>>2]|0)<=0){r2=35;break}r14=_ngram_fwdflat_search(r8,r19);if((r14|0)<0){r27=r14;r2=39;break}r14=HEAP32[r9>>2];r16=r14+116|0;r11=HEAP32[r16>>2]+1|0;HEAP32[r16>>2]=r11;HEAP32[r16>>2]=(r11|0)==(HEAP32[r14+108>>2]|0)?0:r11;r11=r14+112|0;HEAP32[r11>>2]=HEAP32[r11>>2]-1;r11=HEAP32[r14+28>>2]+4|0;HEAP32[r11>>2]=HEAP32[r11>>2]+1;r11=r14+92|0;HEAP32[r11>>2]=HEAP32[r11>>2]+1;r19=r19+1|0}if(r2==35){_ngram_fwdflat_finish(r8);break}else if(r2==39){STACKTOP=r4;return r27}}}while(0);HEAP8[r8+67|0]=1;r27=0;STACKTOP=r4;return r27}function _ngram_search_reinit(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10;r4=r1;r5=r1+40|0;r6=HEAP32[r2+20>>2];if((HEAP32[r5>>2]|0)!=(r6|0)){HEAP32[r5>>2]=r6;r6=r1+212|0;_free(HEAP32[r6>>2]);r7=r1+108|0;_free(HEAP32[r7>>2]);r8=r1+160|0;_free(HEAP32[r8>>2]);r9=r1+140|0;r10=HEAP32[r9>>2];if((r10|0)!=0){_free(HEAP32[r10>>2])}_free(r10);r10=___ckd_calloc__(HEAP32[r5>>2],4,19544,254);HEAP32[r6>>2]=r10;r10=___ckd_calloc__((HEAP32[r5>>2]+31|0)/32&-1,4,19544,255);HEAP32[r7>>2]=r10;r10=___ckd_calloc__(HEAP32[r5>>2],12,19544,256);HEAP32[r8>>2]=r10;r10=___ckd_calloc_2d__(2,HEAP32[r5>>2],4,19544,259);HEAP32[r9>>2]=r10}_ps_search_base_reinit(r1,r2,r3);if((HEAP32[r1+56>>2]|0)==0){return 0}_ngram_search_calc_beams(r4);_ngram_search_update_widmap(r4);r3=r1+64|0;if((HEAP8[r3]|0)!=0){_reinit_search_tree(r4);_deinit_search_tree(r4);r2=r1+152|0;_free(HEAP32[r2>>2]);r10=r1+40|0;r9=___ckd_calloc__(HEAP32[r10>>2],16,6096,463);HEAP32[r2>>2]=r9;r9=r1+104|0;_free(HEAP32[r9>>2]);r2=___ckd_calloc__(HEAP32[r10>>2],4,6096,466);HEAP32[r9>>2]=r2;_init_search_tree(r4);_create_search_tree(r4)}if((HEAP8[r4+65|0]|0)==0){return 0}r2=r1+220|0;_free(HEAP32[r2>>2]);r9=r1+228|0;_free(HEAP32[r9>>2]);r10=r1+224|0;_free(HEAP32[r10>>2]);r5=HEAP32[r1+40>>2];r8=r5+1|0;r7=___ckd_calloc__(r8,4,49384,201);HEAP32[r2>>2]=r7;r7=___ckd_calloc__((r5+31|0)/32&-1,4,49384,202);HEAP32[r10>>2]=r7;r7=___ckd_calloc__(r8,4,49384,203);HEAP32[r9>>2]=r7;if((HEAP8[r3]|0)!=0){return 0}_ngram_fwdflat_free_1ph(r4);r3=r1+104|0;_free(HEAP32[r3>>2]);r7=___ckd_calloc__(HEAP32[HEAP32[r1+16>>2]+20>>2],4,49384,212);HEAP32[r3>>2]=r7;_ngram_fwdflat_expand_all(r4);_ngram_fwdflat_allocate_1ph(r4);return 0}function _ngram_search_hyp(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+296|0;r6=r5;r7=r5+8;r8=r5+16;r9=r5+152;r10=r5+160;r11=r1;do{if((HEAP8[r11+66|0]|0)!=0){if((HEAP8[r11+67|0]|0)==0){break}r12=r1+424|0;r13=r1+432|0;HEAPF64[r13>>3]=0;r14=r12+16|0;HEAPF64[r14>>3]=0;_getrusage(0,r10);r15=r12+40|0;HEAPF64[r15>>3]=(HEAP32[r10>>2]|0)+(HEAP32[r10+4>>2]|0)*1e-6+((HEAP32[r10+8>>2]|0)+(HEAP32[r10+12>>2]|0)*1e-6);_gettimeofday(r9,0);r16=r12+48|0;HEAPF64[r16>>3]=(HEAP32[r9>>2]|0)+(HEAP32[r9+4>>2]|0)*1e-6;r17=_ngram_search_lattice(r1);if((r17|0)==0){r18=0;STACKTOP=r5;return r18}r19=_ngram_search_bestpath(r1,r2,0);if((r19|0)==0){r18=0;STACKTOP=r5;return r18}r20=_ps_lattice_hyp(r17,r19);_getrusage(0,r8);r19=(HEAP32[r8>>2]|0)+(HEAP32[r8+4>>2]|0)*1e-6+((HEAP32[r8+8>>2]|0)+(HEAP32[r8+12>>2]|0)*1e-6)-HEAPF64[r15>>3];_gettimeofday(r7,0);r15=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6-HEAPF64[r16>>3];r16=r12+8|0;HEAPF64[r16>>3]=HEAPF64[r16>>3]+r19;HEAPF64[r14>>3]=HEAPF64[r14>>3]+r15;r14=r12+24|0;HEAPF64[r14>>3]=HEAPF64[r14>>3]+r19;r19=r12+32|0;HEAPF64[r19>>3]=HEAPF64[r19>>3]+r15;r15=HEAP32[r17+36>>2]|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r6)|0)<0){_err_msg(4,45384,945,22936,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=47176,r4));STACKTOP=r4;r21=0}else{r17=HEAP32[r6>>2];if((r17|0)==0){r21=0;break}r21=HEAP32[r17>>2]|0}}while(0);r17=r15/r21;r19=HEAPF64[r13>>3];_err_msg(1,19544,874,12592,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r4>>3]=r19,HEAPF64[r4+8>>3]=r19/r17,r4));STACKTOP=r4;r19=HEAPF64[r1+440>>3];_err_msg(1,19544,877,11976,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r4>>3]=r19,HEAPF64[r4+8>>3]=r19/r17,r4));STACKTOP=r4;r18=r20;STACKTOP=r5;return r18}}while(0);r4=_ngram_search_find_exit(r11,r2,r3);if((r4|0)==-1){r18=0;STACKTOP=r5;return r18}r3=r1+176|0;r2=r1+16|0;r11=0;r21=r4;while(1){if((r21|0)==-1){break}r6=HEAP32[r3>>2];r7=HEAP32[r6+(r21*36&-1)+12>>2];r8=r6+(r21*36&-1)+8|0;if((_dict_real_word(HEAP32[r2>>2],HEAP32[r8>>2])|0)==0){r11=r11;r21=r7;continue}r6=HEAP32[HEAP32[r2>>2]+8>>2];r11=r11+(_strlen(HEAP32[r6+(HEAP32[r6+(HEAP32[r8>>2]*20&-1)+16>>2]*20&-1)>>2])+1)|0;r21=r7}r21=r1+24|0;_free(HEAP32[r21>>2]);if((r11|0)==0){HEAP32[r21>>2]=0;r18=0;STACKTOP=r5;return r18}r1=___ckd_calloc__(1,r11,19544,576);HEAP32[r21>>2]=r1;r7=r1+(r11-1)|0;r11=r4;L29:while(1){r4=r11;while(1){if((r4|0)==-1){break L29}r1=HEAP32[r3>>2];r22=HEAP32[r1+(r4*36&-1)+12>>2];r23=r1+(r4*36&-1)+8|0;if((_dict_real_word(HEAP32[r2>>2],HEAP32[r23>>2])|0)==0){r4=r22}else{break}}r4=HEAP32[HEAP32[r2>>2]+8>>2];r20=HEAP32[r4+(HEAP32[r4+(HEAP32[r23>>2]*20&-1)+16>>2]*20&-1)>>2];r4=_strlen(r20);r13=r7+ -r4|0;_memcpy(r13,r20,r4)|0;if(r13>>>0<=HEAP32[r21>>2]>>>0){r7=r13;r11=r22;continue}r13=r7+~r4|0;HEAP8[r13]=32;r7=r13;r11=r22}r18=HEAP32[r21>>2];STACKTOP=r5;return r18}function _ngram_search_prob(r1){var r2,r3;r2=r1;do{if((HEAP8[r2+66|0]|0)==0){r3=0}else{if((HEAP8[r2+67|0]|0)==0){r3=0;break}if((_ngram_search_lattice(r1)|0)==0){r3=0;break}if((_ngram_search_bestpath(r1,0,1)|0)==0){r3=0;break}r3=HEAP32[r1+36>>2]}}while(0);return r3}function _ngram_search_seg_iter(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+296|0;r5=r4;r6=r4+8;r7=r4+16;r8=r4+152;r9=r4+160;r10=r1;r11=r10+67|0;do{if((HEAP8[r10+66|0]|0)==0){r12=r11}else{if((HEAP8[r11]|0)==0){r12=r11;break}r13=r1+424|0;r14=r1+432|0;HEAPF64[r14>>3]=0;r15=r13+16|0;HEAPF64[r15>>3]=0;_getrusage(0,r9);r16=r13+40|0;HEAPF64[r16>>3]=(HEAP32[r9>>2]|0)+(HEAP32[r9+4>>2]|0)*1e-6+((HEAP32[r9+8>>2]|0)+(HEAP32[r9+12>>2]|0)*1e-6);_gettimeofday(r8,0);r17=r13+48|0;HEAPF64[r17>>3]=(HEAP32[r8>>2]|0)+(HEAP32[r8+4>>2]|0)*1e-6;r18=_ngram_search_lattice(r1);if((r18|0)==0){r19=0;STACKTOP=r4;return r19}r20=_ngram_search_bestpath(r1,r2,1);if((r20|0)==0){r19=0;STACKTOP=r4;return r19}r21=_ps_lattice_seg_iter(r18,r20,HEAPF32[r1+260>>2]);_getrusage(0,r7);r20=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6+((HEAP32[r7+8>>2]|0)+(HEAP32[r7+12>>2]|0)*1e-6)-HEAPF64[r16>>3];_gettimeofday(r6,0);r16=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6-HEAPF64[r17>>3];r17=r13+8|0;HEAPF64[r17>>3]=HEAPF64[r17>>3]+r20;HEAPF64[r15>>3]=HEAPF64[r15>>3]+r16;r15=r13+24|0;HEAPF64[r15>>3]=HEAPF64[r15>>3]+r20;r20=r13+32|0;HEAPF64[r20>>3]=HEAPF64[r20>>3]+r16;r16=HEAP32[r18+36>>2]|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47176,r3));STACKTOP=r3;r22=0}else{r18=HEAP32[r5>>2];if((r18|0)==0){r22=0;break}r22=HEAP32[r18>>2]|0}}while(0);r18=r16/r22;r20=HEAPF64[r14>>3];_err_msg(1,19544,1029,12592,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r20,HEAPF64[r3+8>>3]=r20/r18,r3));STACKTOP=r3;r20=HEAPF64[r1+440>>3];_err_msg(1,19544,1032,11976,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r20,HEAPF64[r3+8>>3]=r20/r18,r3));STACKTOP=r3;r19=r21;STACKTOP=r4;return r19}}while(0);r22=_ngram_search_find_exit(r10,r2,0);do{if((HEAP8[r12]|0)==0){r23=1}else{if((HEAP8[r10+65|0]|0)==0){r23=1;break}r23=HEAPF32[r1+244>>2]}}while(0);r10=_malloc(48);if((r10|0)==0){_ckd_fail(29016,(r3=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r3>>2]=1,HEAP32[r3+8>>2]=48,HEAP32[r3+16>>2]=19544,HEAP32[r3+24>>2]=973,r3));STACKTOP=r3}if((HEAP32[r10-4>>2]&3|0)!=0){_memset(r10,0,48)|0}HEAP32[r10>>2]=4832;HEAP32[r10+4>>2]=r1;HEAPF32[r10+36>>2]=r23;r23=r10+44|0;HEAP16[r23>>1]=0;r3=r1+176|0;r1=r22;r12=0;while(1){if((r1|0)==-1){break}r2=HEAP32[HEAP32[r3>>2]+(r1*36&-1)+12>>2];r5=r12+1&65535;HEAP16[r23>>1]=r5;r1=r2;r12=r5}if(r12<<16>>16==0){_free(r10);r19=0;STACKTOP=r4;return r19}r1=___ckd_calloc__(r12<<16>>16,4,19544,988);r12=r10+40|0;HEAP32[r12>>2]=r1;r1=r22;r22=HEAP16[r23>>1]|0;while(1){r23=r22-1|0;if((r1|0)==-1){break}r5=HEAP32[r3>>2];HEAP32[HEAP32[r12>>2]+(r23<<2)>>2]=r1;r1=HEAP32[r5+(r1*36&-1)+12>>2];r22=r23}r22=r10;_ngram_search_bp2itor(r22,HEAP32[HEAP32[r12>>2]>>2]);r19=r22;STACKTOP=r4;return r19}function _ngram_search_bestpath(r1,r2,r3){var r4,r5,r6,r7,r8,r9;r3=r1+32|0;do{if((HEAP32[r3>>2]|0)==0){r4=r1+28|0;r5=r1+56|0;r6=r1+264|0;r7=_ps_lattice_bestpath(HEAP32[r4>>2],HEAP32[r5>>2],HEAPF32[r1+260>>2],HEAPF32[r6>>2]);HEAP32[r3>>2]=r7;if((r7|0)==0){r8=0;return r8}r7=r1+36|0;if((HEAP32[r7>>2]|0)!=0){break}r9=_ps_lattice_posterior(HEAP32[r4>>2],HEAP32[r5>>2],HEAPF32[r6>>2]);HEAP32[r7>>2]=r9}}while(0);if((r2|0)!=0){HEAP32[r2>>2]=HEAP32[HEAP32[r3>>2]+16>>2]+HEAP32[HEAP32[r1+28>>2]+44>>2]}r8=HEAP32[r3>>2];return r8}function _ngram_search_bp2itor(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r3=STACKTOP;STACKTOP=STACKTOP+8|0;r4=r3;r5=HEAP32[r1+4>>2];r6=HEAP32[r5+176>>2];r7=r6;r8=HEAP32[r7+(r2*36&-1)+12>>2];if((r8|0)==-1){r9=0}else{r9=r6+(r8*36&-1)|0}r8=r7+(r2*36&-1)+8|0;r6=HEAP32[r8>>2];if((r6|0)<0){r10=0}else{r10=HEAP32[HEAP32[HEAP32[r5+16>>2]+8>>2]+(r6*20&-1)>>2]}HEAP32[r1+8>>2]=r10;HEAP32[r1+16>>2]=HEAP32[r7+(r2*36&-1)>>2];if((r9|0)==0){HEAP32[r1+12>>2]=0;HEAP32[r1+28>>2]=0;HEAP32[r1+20>>2]=HEAP32[r7+(r2*36&-1)+16>>2];HEAP32[r1+24>>2]=0;HEAP32[r1+32>>2]=0;STACKTOP=r3;return}HEAP32[r1+12>>2]=HEAP32[r9>>2]+1;HEAP32[r1+28>>2]=0;r10=HEAP32[r8>>2];r8=HEAP32[r5+16>>2];r6=HEAP16[r9+34>>1];if(r6<<16>>16==-1){r11=r9+16|0}else{r11=HEAP32[r5+188>>2]+(HEAP32[r9+20>>2]+HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r5+20>>2]+16>>2]+(HEAP16[r9+32>>1]<<2)>>2]+((r6<<16>>16)*12&-1)+4>>2]+(HEAP16[HEAP32[HEAP32[r8+8>>2]+(r10*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r6=HEAP32[r11>>2];if((r6|0)<=-536870912){___assert_fail(39672,19544,916,50064)}do{if((r10|0)==(HEAP32[r5+48>>2]|0)){r11=HEAP32[r5+520>>2];HEAP32[r1+24>>2]=r11;r12=r11}else{if((_dict_filler_word(r8,r10)|0)==0){r11=HEAP32[r5+56>>2];r13=HEAP32[r7+(r2*36&-1)+24>>2];r14=HEAP32[r9+28>>2];r15=r4|0;HEAP32[r15>>2]=HEAP32[r9+24>>2];HEAP32[r4+4>>2]=r14;r14=_ngram_ng_score(r11,r13,r15,2,r1+32|0)>>10|0;r15=r14*HEAPF32[r1+36>>2]&-1;HEAP32[r1+24>>2]=r15;r12=r15;break}else{r15=HEAP32[r5+516>>2];HEAP32[r1+24>>2]=r15;r12=r15;break}}}while(0);HEAP32[r1+20>>2]=HEAP32[r7+(r2*36&-1)+16>>2]-r6-r12;STACKTOP=r3;return}function _ngram_bp_seg_next(r1){var r2,r3,r4;r2=r1+46|0;r3=HEAP16[r2>>1]+1&65535;HEAP16[r2>>1]=r3;if(r3<<16>>16==(HEAP16[r1+44>>1]|0)){_free(HEAP32[r1+40>>2]);_free(r1);r4=0;return r4}else{_ngram_search_bp2itor(r1,HEAP32[HEAP32[r1+40>>2]+(r3<<16>>16<<2)>>2]);r4=r1;return r4}}function _ngram_bp_seg_free(r1){_free(HEAP32[r1+40>>2]);_free(r1);return}function _init_search_tree(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;r2=0;r3=STACKTOP;r4=HEAP32[r1+16>>2];r5=HEAP32[r1+40>>2];r6=___ckd_calloc__(r5,4,6096,75);HEAP32[r1+112>>2]=r6;r6=r1+120|0;HEAP32[r6>>2]=0;r7=r1+12|0;r8=HEAP32[HEAP32[HEAP32[r7>>2]+20>>2]+4>>2];r9=___ckd_calloc__((Math_imul(r8,r8)+31|0)>>>5,4,6096,82);r10=r9;r11=r4+8|0;r12=0;r13=0;while(1){if((r12|0)>=(r5|0)){break}do{if((_dict_real_word(r4,r12)|0)==0){r14=r13}else{r15=HEAP32[r11>>2];if((HEAP32[r15+(r12*20&-1)+8>>2]|0)==1){HEAP32[r6>>2]=HEAP32[r6>>2]+1;r14=r13;break}r16=HEAP32[r15+(r12*20&-1)+4>>2];r15=Math_imul(HEAP16[r16>>1]|0,r8)+HEAP16[r16+2>>1]|0;r16=r10+(((r15|0)/32&-1)<<2)|0;r17=HEAP32[r16>>2];r18=1<<(r15&31);if((r17&r18|0)!=0){r14=r13;break}HEAP32[r16>>2]=r17|r18;r14=r13+1|0}}while(0);r12=r12+1|0;r13=r14}_err_msg(1,6096,99,26752,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=r13,r2));STACKTOP=r2;_free(r9);HEAP32[r6>>2]=HEAP32[r6>>2]+(HEAP32[r4+28>>2]-HEAP32[r4+24>>2]+2);r9=r1+84|0;HEAP32[r9>>2]=r13+1;r13=0;while(1){if((r13|0)>=(r5|0)){break}do{if((_dict_real_word(r4,r13)|0)==0){r14=HEAP32[r11>>2];if((HEAP32[r14+(r13*20&-1)+8>>2]|0)==1){break}if((r13|0)<0){r19=0}else{r19=HEAP32[r14+(r13*20&-1)>>2]}_err_msg(3,6096,112,25848,(r2=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r2>>2]=r13,HEAP32[r2+8>>2]=r19,r2));STACKTOP=r2;HEAP32[r6>>2]=HEAP32[r6>>2]-1}}while(0);r13=r13+1|0}r13=___ckd_calloc__(HEAP32[r9>>2],96,6096,119);r19=r1+80|0;HEAP32[r19>>2]=r13;r13=r1+60|0;r4=0;while(1){if((r4|0)>=(HEAP32[r9>>2]|0)){break}_hmm_init(HEAP32[r13>>2],HEAP32[r19>>2]+(r4*96&-1)|0,1,-1,-1);HEAP32[HEAP32[r19>>2]+(r4*96&-1)+84>>2]=-1;HEAP32[HEAP32[r19>>2]+(r4*96&-1)+80>>2]=0;r4=r4+1|0}r4=___ckd_calloc__(HEAP32[r6>>2],96,6096,128);r19=r1+100|0;HEAP32[r19>>2]=r4;r4=r1+104|0;r9=0;r14=0;while(1){if((r9|0)>=(r5|0)){break}if((HEAP32[HEAP32[r11>>2]+(r9*20&-1)+8>>2]|0)==1){HEAP16[HEAP32[r19>>2]+(r14*96&-1)+94>>1]=HEAP16[HEAP32[HEAP32[r7>>2]+20>>2]+40>>1];HEAP16[HEAP32[r19>>2]+(r14*96&-1)+92>>1]=HEAP16[HEAP32[HEAP32[r11>>2]+(r9*20&-1)+4>>2]>>1];r12=HEAP32[r19>>2];r10=HEAP16[r12+(r14*96&-1)+92>>1]|0;r8=HEAP32[HEAP32[HEAP32[r7>>2]+20>>2]+56>>2];r18=r8+(r10*12&-1)|0;r17=r8+(r10*12&-1)+4|0;_hmm_init(HEAP32[r13>>2],r12+(r14*96&-1)|0,1,HEAPU8[r18]|HEAPU8[r18+1|0]<<8|HEAPU8[r18+2|0]<<16|HEAPU8[r18+3|0]<<24|0,HEAPU8[r17]|HEAPU8[r17+1|0]<<8|HEAPU8[r17+2|0]<<16|HEAPU8[r17+3|0]<<24|0);HEAP32[HEAP32[r19>>2]+(r14*96&-1)+80>>2]=0;HEAP32[HEAP32[r4>>2]+(r9<<2)>>2]=HEAP32[r19>>2]+(r14*96&-1);r20=r14+1|0}else{r20=r14}r9=r9+1|0;r14=r20}r20=___ckd_calloc__(HEAP32[r6>>2],4,6096,146);HEAP32[r1+116>>2]=r20;r20=HEAP32[r1+92>>2];r14=HEAP32[r6>>2];_err_msg(1,6096,148,24720,(r2=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r2>>2]=HEAP32[r1+88>>2],HEAP32[r2+8>>2]=r20,HEAP32[r2+16>>2]=r14,r2));STACKTOP=r2;STACKTOP=r3;return}function _create_search_tree(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46;r2=0;r3=0;r4=STACKTOP;r5=HEAP32[r1+16>>2];r6=HEAP32[r1+20>>2];r7=HEAP32[r1+40>>2];_err_msg(1,6096,186,30344,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r8=r1+112|0;r9=0;while(1){if((r9|0)>=(r7|0)){break}HEAP32[HEAP32[r8>>2]+(r9<<2)>>2]=-1;r9=r9+1|0}r9=r1+88|0;r10=r1+92|0;r11=HEAP32[r10>>2];r12=r1+120|0;r13=HEAP32[r12>>2];_err_msg(1,6096,192,29768,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=HEAP32[r9>>2],HEAP32[r3+8>>2]=r11,HEAP32[r3+16>>2]=r13,r3));STACKTOP=r3;r13=r1+124|0;HEAP32[r13>>2]=0;HEAP32[r9>>2]=0;HEAP32[r10>>2]=0;r11=r1+56|0;r14=r5+8|0;r15=r1+116|0;r16=r1+80|0;r17=r1+12|0;r18=r6+4|0;r19=r6+8|0;r6=r1+68|0;r20=r1+60|0;r21=0;while(1){if((r21|0)>=(r7|0)){break}do{if((_ngram_model_set_known_wid(HEAP32[r11>>2],HEAP32[HEAP32[r14>>2]+(r21*20&-1)+16>>2])|0)!=0){r22=HEAP32[r14>>2];r23=HEAP32[r22+(r21*20&-1)+8>>2];if((r23|0)==1){r24=HEAP32[r13>>2];HEAP32[r13>>2]=r24+1;HEAP32[HEAP32[r15>>2]+(r24<<2)>>2]=r21;break}r24=HEAP32[r22+(r21*20&-1)+4>>2];r22=HEAP16[r24>>1];r25=r22<<16>>16;r26=HEAP16[r24+2>>1];r24=HEAP32[r9>>2];r27=0;while(1){if((r27|0)>=(r24|0)){break}r28=HEAP32[r16>>2];if((HEAP16[r28+(r27*96&-1)+92>>1]|0)==r22<<16>>16){if((HEAP16[r28+(r27*96&-1)+94>>1]|0)==r26<<16>>16){break}}r27=r27+1|0}r28=HEAP32[r16>>2];if((r27|0)==(r24|0)){r29=HEAP32[HEAP32[HEAP32[r17>>2]+20>>2]+56>>2]+(r25*12&-1)+4|0;HEAP16[r28+(r24*96&-1)+68>>1]=HEAPU8[r29]|HEAPU8[r29+1|0]<<8|HEAPU8[r29+2|0]<<16|HEAPU8[r29+3|0]<<24;r29=HEAP32[HEAP32[HEAP32[r17>>2]+20>>2]+56>>2]+(r25*12&-1)|0;HEAP16[r28+(r24*96&-1)+54>>1]=HEAPU8[r29]|HEAPU8[r29+1|0]<<8|HEAPU8[r29+2|0]<<16|HEAPU8[r29+3|0]<<24;HEAP16[r28+(r24*96&-1)+92>>1]=r22;HEAP16[r28+(r24*96&-1)+94>>1]=r26;HEAP32[r9>>2]=HEAP32[r9>>2]+1;r30=r28+(r24*96&-1)|0;r31=HEAP32[HEAP32[r14>>2]+(r21*20&-1)+8>>2]}else{r30=r28+(r27*96&-1)|0;r31=r23}if((r31|0)==2){r28=r30+84|0;r29=HEAP32[r28>>2];if((r29|0)<0){HEAP32[r28>>2]=r21;break}r28=HEAP32[r8>>2];r32=r29;while(1){r33=r28+(r32<<2)|0;r29=HEAP32[r33>>2];if((r29|0)>-1){r32=r29}else{break}}HEAP32[r33>>2]=r21;break}r32=_dict2pid_internal(HEAP32[r18>>2],HEAP32[r19>>2],r21,1);r28=r32&65535;r23=HEAP32[HEAP32[HEAP32[r17>>2]+20>>2]+56>>2]+(HEAP16[HEAP32[HEAP32[r14>>2]+(r21*20&-1)+4>>2]+2>>1]*12&-1)+4|0;r27=HEAPU8[r23]|HEAPU8[r23+1|0]<<8|HEAPU8[r23+2|0]<<16|HEAPU8[r23+3|0]<<24|0;r23=r30+80|0;r24=HEAP32[r23>>2];do{if((r24|0)==0){r26=HEAP32[r6>>2];r22=r26|0;r25=HEAP32[r22>>2];if((r25|0)==0){_listelem_add_block(r26,6096,252);r34=HEAP32[r22>>2]}else{r34=r25}HEAP32[r22>>2]=HEAP32[r34>>2];r22=r26+24|0;HEAP32[r22>>2]=HEAP32[r22>>2]+1;r22=r34;HEAP32[r23>>2]=r22;r26=HEAP16[HEAP32[HEAP32[r14>>2]+(r21*20&-1)+4>>2]+2>>1]|0;HEAP32[r34+80>>2]=0;HEAP32[r34+84>>2]=0;HEAP32[r34+92>>2]=-1;HEAP32[r34+88>>2]=r26;_hmm_init(HEAP32[r20>>2],r34,0,r28,r27);HEAP32[r10>>2]=HEAP32[r10>>2]+1;r35=2;r36=r22}else{r22=0;r26=r24;while(1){if((r26|0)==0){break}if((HEAP16[r26+52>>1]|0)==r32<<16>>16){r2=30;break}r22=r26;r26=HEAP32[r26+84>>2]}if(r2==30){r2=0;if((r26|0)!=0){r35=2;r36=r26;break}}r25=HEAP32[r6>>2];r29=r25|0;r37=HEAP32[r29>>2];if((r37|0)==0){_listelem_add_block(r25,6096,262);r38=HEAP32[r29>>2]}else{r38=r37}HEAP32[r29>>2]=HEAP32[r38>>2];r29=r25+24|0;HEAP32[r29>>2]=HEAP32[r29>>2]+1;r29=r38;HEAP32[r22+84>>2]=r29;r25=HEAP16[HEAP32[HEAP32[r14>>2]+(r21*20&-1)+4>>2]+2>>1]|0;HEAP32[r38+80>>2]=0;HEAP32[r38+84>>2]=0;HEAP32[r38+92>>2]=-1;HEAP32[r38+88>>2]=r25;_hmm_init(HEAP32[r20>>2],r38,0,r28,r27);HEAP32[r10>>2]=HEAP32[r10>>2]+1;r35=2;r36=r29}}while(0);while(1){if((r35|0)>=(HEAP32[HEAP32[r14>>2]+(r21*20&-1)+8>>2]-1|0)){break}r27=_dict2pid_internal(HEAP32[r18>>2],HEAP32[r19>>2],r21,r35);r28=r27&65535;r32=HEAP32[HEAP32[HEAP32[r17>>2]+20>>2]+56>>2]+(HEAP16[HEAP32[HEAP32[r14>>2]+(r21*20&-1)+4>>2]+(r35<<1)>>1]*12&-1)+4|0;r24=HEAPU8[r32]|HEAPU8[r32+1|0]<<8|HEAPU8[r32+2|0]<<16|HEAPU8[r32+3|0]<<24|0;r32=r36+80|0;r23=HEAP32[r32>>2];L51:do{if((r23|0)==0){r29=HEAP32[r6>>2];r25=r29|0;r37=HEAP32[r25>>2];if((r37|0)==0){_listelem_add_block(r29,6096,274);r39=HEAP32[r25>>2]}else{r39=r37}HEAP32[r25>>2]=HEAP32[r39>>2];r25=r29+24|0;HEAP32[r25>>2]=HEAP32[r25>>2]+1;r25=r39;HEAP32[r32>>2]=r25;r29=HEAP16[HEAP32[HEAP32[r14>>2]+(r21*20&-1)+4>>2]+(r35<<1)>>1]|0;HEAP32[r39+80>>2]=0;HEAP32[r39+84>>2]=0;HEAP32[r39+92>>2]=-1;HEAP32[r39+88>>2]=r29;_hmm_init(HEAP32[r20>>2],r39,0,r28,r24);HEAP32[r10>>2]=HEAP32[r10>>2]+1;r40=r25}else{r25=0;r29=r23;while(1){if((r29|0)==0){break}if((HEAP16[r29+52>>1]|0)==r27<<16>>16){r40=r29;break L51}r25=r29;r29=HEAP32[r29+84>>2]}r29=HEAP32[r6>>2];r37=r29|0;r41=HEAP32[r37>>2];if((r41|0)==0){_listelem_add_block(r29,6096,286);r42=HEAP32[r37>>2]}else{r42=r41}HEAP32[r37>>2]=HEAP32[r42>>2];r37=r29+24|0;HEAP32[r37>>2]=HEAP32[r37>>2]+1;r37=r42;HEAP32[r25+84>>2]=r37;r29=HEAP16[HEAP32[HEAP32[r14>>2]+(r21*20&-1)+4>>2]+(r35<<1)>>1]|0;HEAP32[r42+80>>2]=0;HEAP32[r42+84>>2]=0;HEAP32[r42+92>>2]=-1;HEAP32[r42+88>>2]=r29;_hmm_init(HEAP32[r20>>2],r42,0,r28,r24);HEAP32[r10>>2]=HEAP32[r10>>2]+1;r40=r37}}while(0);r35=r35+1|0;r36=r40}r24=r36+92|0;r28=HEAP32[r24>>2];if((r28|0)<0){HEAP32[r24>>2]=r21;break}r24=HEAP32[r8>>2];r27=r28;while(1){r43=r24+(r27<<2)|0;r28=HEAP32[r43>>2];if((r28|0)>-1){r27=r28}else{break}}HEAP32[r43>>2]=r21}}while(0);r21=r21+1|0}HEAP32[r12>>2]=HEAP32[r13>>2];r13=0;while(1){if((r13|0)>=(r7|0)){break}do{if((HEAP32[HEAP32[r14>>2]+(r13*20&-1)+8>>2]|0)==1){if((_dict_real_word(r5,r13)|0)!=0){break}if((_ngram_model_set_known_wid(HEAP32[r11>>2],HEAP32[HEAP32[r14>>2]+(r13*20&-1)+16>>2])|0)!=0){break}r21=HEAP32[r12>>2];HEAP32[r12>>2]=r21+1;HEAP32[HEAP32[r15>>2]+(r21<<2)>>2]=r13}}while(0);r13=r13+1|0}r13=HEAP32[r10>>2];r15=r1+96|0;if((r13|0)>=(HEAP32[r15>>2]|0)){r14=r13+128|0;HEAP32[r15>>2]=r14;_err_msg(1,6096,326,29608,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r14,r3));STACKTOP=r3;r14=r1+128|0;r1=HEAP32[r14>>2];if((r1|0)!=0){_free(HEAP32[r1>>2]);_free(r1)}r1=___ckd_calloc_2d__(2,HEAP32[r15>>2],4,6096,332);HEAP32[r14>>2]=r1}r1=HEAP32[r9>>2];if((r1|0)!=0){r44=r1;r45=HEAP32[r10>>2];r46=HEAP32[r12>>2];_err_msg(1,6096,339,27984,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r44,HEAP32[r3+8>>2]=r45,HEAP32[r3+16>>2]=r46,r3));STACKTOP=r3;STACKTOP=r4;return}_err_msg(4,6096,336,28696,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;r44=HEAP32[r9>>2];r45=HEAP32[r10>>2];r46=HEAP32[r12>>2];_err_msg(1,6096,339,27984,(r3=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r3>>2]=r44,HEAP32[r3+8>>2]=r45,HEAP32[r3+16>>2]=r46,r3));STACKTOP=r3;STACKTOP=r4;return}function _reinit_search_tree(r1){var r2,r3,r4,r5,r6;r2=r1+88|0;r3=r1+80|0;r4=0;while(1){if((r4|0)>=(HEAP32[r2>>2]|0)){break}r5=HEAP32[HEAP32[r3>>2]+(r4*96&-1)+80>>2];while(1){if((r5|0)==0){break}r6=HEAP32[r5+84>>2];_reinit_search_subtree(r1,r5);r5=r6}HEAP32[HEAP32[r3>>2]+(r4*96&-1)+84>>2]=-1;HEAP32[HEAP32[r3>>2]+(r4*96&-1)+80>>2]=0;r4=r4+1|0}HEAP32[r1+92>>2]=0;return}function _deinit_search_tree(r1){var r2,r3,r4,r5,r6,r7,r8;r2=HEAP32[r1+40>>2];r3=r1+84|0;r4=HEAP32[r3>>2];r5=0;while(1){if((r5|0)>=(r4|0)){break}r5=r5+1|0}r5=r1+100|0;r4=HEAP32[r5>>2];if((r4|0)!=0){r6=r1+16|0;r7=0;r8=0;while(1){if((r8|0)>=(r2|0)){break}r7=(HEAP32[HEAP32[HEAP32[r6>>2]+8>>2]+(r8*20&-1)+8>>2]|0)==1?r7+1|0:r7;r8=r8+1|0}_free(r4);HEAP32[r5>>2]=0}HEAP32[r1+88>>2]=0;HEAP32[r3>>2]=0;r3=r1+80|0;_free(HEAP32[r3>>2]);HEAP32[r3>>2]=0;r3=r1+116|0;_free(HEAP32[r3>>2]);HEAP32[r3>>2]=0;r3=r1+112|0;_free(HEAP32[r3>>2]);HEAP32[r3>>2]=0;return}function _ngram_fwdtree_search(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+1056|0;r6=r5;r7=r5+8;r8=r5+16;r9=r5+24;r10=r5+1048;HEAP32[r10>>2]=r2;r11=r1+12|0;r12=HEAP32[r11>>2];if((HEAP8[r12+89|0]|0)==0){_memset(HEAP32[r12+40>>2],0,((HEAP32[HEAP32[r12+20>>2]+20>>2]+31|0)/32&-1)<<2)|0;HEAP32[r12+52>>2]=0;r13=HEAP32[r1+80>>2];r14=HEAP32[r1+88>>2];while(1){if((r14|0)<=0){break}if((HEAP32[r13+72>>2]|0)==(r2|0)){_acmod_activate_hmm(HEAP32[r11>>2],r13|0)}r13=r13+96|0;r14=r14-1|0}r14=r2&1;r13=HEAP32[HEAP32[r1+128>>2]+(r14<<2)>>2];r15=HEAP32[r1+132+(r14<<2)>>2];while(1){if((r15|0)<=0){break}_acmod_activate_hmm(HEAP32[r11>>2],HEAP32[r13>>2]|0);r13=r13+4|0;r15=r15-1|0}r15=r1+104|0;r13=HEAP32[HEAP32[r1+140>>2]+(r14<<2)>>2];r16=HEAP32[r1+144+(r14<<2)>>2];while(1){r14=r13+4|0;if((r16|0)<=0){break}r17=HEAP32[r15>>2]+(HEAP32[r13>>2]<<2)|0;while(1){r18=HEAP32[r17>>2];if((r18|0)==0){break}_acmod_activate_hmm(HEAP32[r11>>2],r18|0);r17=r18+80|0}r13=r14;r16=r16-1|0}r16=r1+120|0;r13=r1+116|0;r17=0;while(1){if((r17|0)>=(HEAP32[r16>>2]|0)){break}r18=HEAP32[HEAP32[r15>>2]+(HEAP32[HEAP32[r13>>2]+(r17<<2)>>2]<<2)>>2];if((HEAP32[r18+72>>2]|0)==(r2|0)){_acmod_activate_hmm(HEAP32[r11>>2],r18|0)}r17=r17+1|0}r19=HEAP32[r11>>2]}else{r19=r12}r12=_acmod_score(r19,r10);if((r12|0)==0){r20=0;STACKTOP=r5;return r20}r19=r1+304|0;HEAP32[r19>>2]=HEAP32[r19>>2]+HEAP32[HEAP32[r11>>2]+52>>2];_ngram_search_mark_bptable(r1,HEAP32[r10>>2]);r19=r1+248|0;r17=HEAP32[r19>>2];if((r17|0)==-536870912|(r17|0)<-536870912){r20=0;STACKTOP=r5;return r20}r2=r1+484|0;if((r17+(HEAP32[r2>>2]<<1)|0)<-536870912){_err_msg(1,6096,1478,8272,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=HEAP32[r10>>2],HEAP32[r4+8>>2]=r17,r4));STACKTOP=r4;r17=HEAP32[r10>>2];r13=HEAP32[r19>>2];r15=r1+88|0;r16=r1+80|0;r18=HEAP32[r16>>2];r21=HEAP32[r15>>2];while(1){if((r21|0)<=0){break}do{if((HEAP32[r18+72>>2]|0)==(r17|0)){r22=r18+77|0;r23=0;while(1){if((r23|0)>=(HEAPU8[r22]|0)){break}r24=r18+4+(r23<<2)|0;r25=HEAP32[r24>>2];if((r25|0)>-536870912){HEAP32[r24>>2]=r25-r13}r23=r23+1|0}r23=r18+44|0;r22=HEAP32[r23>>2];if((r22|0)<=-536870912){break}HEAP32[r23>>2]=r22-r13}}while(0);r18=r18+96|0;r21=r21-1|0}r21=r17&1;r18=HEAP32[HEAP32[r1+128>>2]+(r21<<2)>>2];r14=HEAP32[r1+132+(r21<<2)>>2];while(1){r22=r18+4|0;if((r14|0)<=0){break}r23=HEAP32[r18>>2];r25=r23+77|0;r24=0;while(1){if((r24|0)>=(HEAPU8[r25]|0)){break}r26=r23+4+(r24<<2)|0;r27=HEAP32[r26>>2];if((r27|0)>-536870912){HEAP32[r26>>2]=r27-r13}r24=r24+1|0}r24=r23+44|0;r25=HEAP32[r24>>2];if((r25|0)>-536870912){HEAP32[r24>>2]=r25-r13}r18=r22;r14=r14-1|0}r14=r1+104|0;r18=HEAP32[HEAP32[r1+140>>2]+(r21<<2)>>2];r25=HEAP32[r1+144+(r21<<2)>>2];while(1){r21=r18+4|0;if((r25|0)<=0){break}r24=HEAP32[r14>>2]+(HEAP32[r18>>2]<<2)|0;while(1){r27=HEAP32[r24>>2];if((r27|0)==0){break}r26=r27+77|0;r28=0;while(1){if((r28|0)>=(HEAPU8[r26]|0)){break}r29=r27+4+(r28<<2)|0;r30=HEAP32[r29>>2];if((r30|0)>-536870912){HEAP32[r29>>2]=r30-r13}r28=r28+1|0}r28=r27+44|0;r26=HEAP32[r28>>2];if((r26|0)>-536870912){HEAP32[r28>>2]=r26-r13}r24=r27+80|0}r18=r21;r25=r25-1|0}r25=r1+120|0;r18=r1+116|0;r24=0;while(1){if((r24|0)>=(HEAP32[r25>>2]|0)){break}r22=HEAP32[HEAP32[r14>>2]+(HEAP32[HEAP32[r18>>2]+(r24<<2)>>2]<<2)>>2];do{if((HEAP32[r22+72>>2]|0)==(r17|0)){r23=r22+77|0;r26=0;while(1){if((r26|0)>=(HEAPU8[r23]|0)){break}r28=r22+4+(r26<<2)|0;r30=HEAP32[r28>>2];if((r30|0)>-536870912){HEAP32[r28>>2]=r30-r13}r26=r26+1|0}r26=r22+44|0;r23=HEAP32[r26>>2];if((r23|0)<=-536870912){break}HEAP32[r26>>2]=r23-r13}}while(0);r24=r24+1|0}HEAP32[r1+256>>2]=1;r31=r15;r32=r16}else{r31=r1+88|0;r32=r1+80|0}r16=HEAP32[r10>>2];HEAP32[HEAP32[r1+60>>2]+8>>2]=r12;r12=r1+272|0;r15=HEAP32[r32>>2];r24=-536870912;r13=HEAP32[r31>>2];while(1){if((r13|0)<=0){break}if((HEAP32[r15+72>>2]|0)==(r16|0)){r17=_hmm_vit_eval(r15|0);HEAP32[r12>>2]=HEAP32[r12>>2]+1;r33=(r17|0)>(r24|0)?r17:r24}else{r33=r24}r15=r15+96|0;r24=r33;r13=r13-1|0}HEAP32[r19>>2]=r24;r24=r16&1;r13=HEAP32[r1+132+(r24<<2)>>2];r33=r1+128|0;r15=HEAP32[HEAP32[r33>>2]+(r24<<2)>>2];r17=r1+276|0;HEAP32[r17>>2]=HEAP32[r17>>2]+r13;r18=r15;r15=-536870912;r14=r13;while(1){r13=HEAP32[r18>>2];if((r14|0)<=0){break}r25=_hmm_vit_eval(r13|0);if((HEAP32[r13+72>>2]|0)!=(r16|0)){r3=80;break}r18=r18+4|0;r15=(r25|0)>(r15|0)?r25:r15;r14=r14-1|0}if(r3==80){___assert_fail(31168,6096,640,51040)}if((r15|0)>(HEAP32[r19>>2]|0)){HEAP32[r19>>2]=r15}r15=r1+140|0;r14=r1+144+(r24<<2)|0;r18=r1+108|0;r25=r1+104|0;r13=HEAP32[HEAP32[r15>>2]+(r24<<2)>>2];r24=0;r22=-536870912;r21=HEAP32[r14>>2];L119:while(1){r23=r13+4|0;r26=HEAP32[r13>>2];if((r21|0)<=0){r3=95;break}r27=HEAP32[r18>>2]+(((r26|0)/32&-1)<<2)|0;r30=HEAP32[r27>>2];r28=1<<(r26&31);if((r30&r28|0)==0){r3=87;break}HEAP32[r27>>2]=r30&~r28;r28=HEAP32[HEAP32[r25>>2]+(r26<<2)>>2];if((r28|0)==0){r3=89;break}else{r34=r24;r35=r22;r36=r28}while(1){if((r36|0)==0){break}if((HEAP32[r36+72>>2]|0)!=(r16|0)){r3=92;break L119}r28=_hmm_vit_eval(r36|0);r34=r34+1|0;r35=(r28|0)>(r35|0)?r28:r35;r36=HEAP32[r36+80>>2]}r13=r23;r24=r34;r22=r35;r21=r21-1|0}if(r3==87){___assert_fail(33520,6096,661,51024)}else if(r3==89){___assert_fail(32192,6096,663,51024)}else if(r3==92){___assert_fail(31168,6096,668,51024)}else if(r3==95){r21=r1+120|0;r35=r1+116|0;r34=r1+52|0;r13=0;r36=0;r28=r22;while(1){if((r13|0)>=(HEAP32[r21>>2]|0)){break}r22=HEAP32[HEAP32[r35>>2]+(r13<<2)>>2];r26=HEAP32[HEAP32[r25>>2]+(r22<<2)>>2];if((HEAP32[r26+72>>2]|0)<(r16|0)){r37=r36;r38=r28}else{r30=_hmm_vit_eval(r26|0);if((r30|0)>(r28|0)){r39=(r22|0)==(HEAP32[r34>>2]|0)?r28:r30}else{r39=r28}r37=r36+1|0;r38=r39}r13=r13+1|0;r36=r37;r28=r38}r38=r24+r36|0;r24=r1+280|0;HEAP32[r24>>2]=HEAP32[r24>>2]+r38;r24=HEAP32[r17>>2]+r38|0;HEAP32[r17>>2]=r24;r17=r1+284|0;HEAP32[r17>>2]=HEAP32[r17>>2]+(HEAP32[r14>>2]+r36);r36=HEAP32[r19>>2];if((r28|0)>(r36|0)){HEAP32[r19>>2]=r28;r40=r28}else{r40=r36}r36=r1+252|0;HEAP32[r36>>2]=r28;r28=HEAP32[r10>>2];r14=r9;r17=r1+156|0;HEAP32[r17>>2]=0;r38=HEAP32[r2>>2];r2=r1+488|0;HEAP32[r2>>2]=r38;r37=HEAP32[r1+540>>2];do{if((r37|0)==-1){r41=r38}else{if((HEAP32[r12>>2]+r24|0)<=(r37|0)){r41=r38;break}r13=(r38|0)/-256&-1;_memset(r14,0,1024)|0;r39=HEAP32[r31>>2];r16=HEAP32[r32>>2];r30=0;while(1){if((r30|0)>=(r39|0)){break}r22=(r40-HEAP32[r16+64>>2]|0)/(r13|0)&-1;r26=r9+(((r22|0)>255?255:r22)<<2)|0;HEAP32[r26>>2]=HEAP32[r26>>2]+1;r16=r16+96|0;r30=r30+1|0}r30=r28&1;r16=HEAP32[HEAP32[r33>>2]+(r30<<2)>>2];r39=HEAP32[r1+132+(r30<<2)>>2];while(1){if((r39|0)<=0){r42=0;r43=0;break}r30=(r40-HEAP32[HEAP32[r16>>2]+64>>2]|0)/(r13|0)&-1;r23=r9+(((r30|0)>255?255:r30)<<2)|0;HEAP32[r23>>2]=HEAP32[r23>>2]+1;r16=r16+4|0;r39=r39-1|0}while(1){if((r42|0)>=256){break}r39=r43+HEAP32[r9+(r42<<2)>>2]|0;if((r39|0)>(r37|0)){break}r42=r42+1|0;r43=r39}r39=-(Math_imul(r42,r13)|0)|0;HEAP32[r2>>2]=r39;r41=r39}}while(0);r42=r28+1|0;r43=r40+r41|0;r41=r1+492|0;r37=r40+HEAP32[r41>>2]|0;r9=r1+500|0;r14=r40+HEAP32[r9>>2]|0;r40=r42&1;r38=r1+4|0;r24=HEAP32[r38>>2];r12=r1+532|0;r39=(r24|0)==0;r16=r24+64|0;r23=r24+68|0;r24=r1+152|0;r30=r1+528|0;r26=r1+112|0;r22=r1+16|0;r27=HEAP32[r32>>2];r29=0;r44=HEAP32[HEAP32[r33>>2]+(r40<<2)>>2];while(1){if((r29|0)>=(HEAP32[r31>>2]|0)){break}r45=r27+72|0;L165:do{if((HEAP32[r45>>2]|0)<(r28|0)){r46=r44}else{if((HEAP32[r27+64>>2]|0)<=(r43|0)){r46=r44;break}HEAP32[r45>>2]=r42;r47=HEAP32[r27+44>>2]+HEAP32[r12>>2]|0;if(r39^1|(r47|0)>(r37|0)){r48=r27+48|0;r49=r27+80|0;r50=r44;while(1){r51=HEAP32[r49>>2];if((r51|0)==0){r52=r50;break}if(r39){r53=0}else{r53=HEAP32[HEAP32[r16>>2]+(HEAP32[r51+88>>2]*84&-1)+64>>2]-HEAP32[r23>>2]|0}r54=r47+r53|0;do{if((r54|0)>(r37|0)){r55=r51+4|0;if((HEAP32[r51+72>>2]|0)<(r28|0)){r56=r55}else{if((r54|0)>(HEAP32[r55>>2]|0)){r56=r55}else{r57=r50;break}}r55=HEAP32[r48>>2];HEAP32[r56>>2]=r54;HEAP32[r51+24>>2]=r55;HEAP32[r51+72>>2]=r42;HEAP32[r50>>2]=r51;r57=r50+4|0}else{r57=r50}}while(0);r49=r51+84|0;r50=r57}if(r39){r58=r52;r3=131}else{r59=r52}}else{r58=r44;r3=131}if(r3==131){r3=0;if((r47|0)>(r14|0)){r59=r58}else{r46=r58;break}}r50=r27+48|0;r49=r27+84|0;while(1){r48=HEAP32[r49>>2];if((r48|0)<=-1){r46=r59;break L165}if(r39){r60=0}else{r54=HEAP32[HEAP32[r22>>2]+8>>2];r60=HEAP32[HEAP32[r16>>2]+(HEAP16[HEAP32[r54+(r48*20&-1)+4>>2]+(HEAP32[r54+(r48*20&-1)+8>>2]-1<<1)>>1]*84&-1)+64>>2]-HEAP32[r23>>2]|0}r54=r47+r60|0;if((r54|0)>(r14|0)){r55=HEAP32[r24>>2];r61=HEAP32[r17>>2];HEAP32[r17>>2]=r61+1;HEAP32[r55+(r61<<4)>>2]=r48;HEAP32[r55+(r61<<4)+4>>2]=r54-HEAP32[r30>>2];HEAP32[r55+(r61<<4)+8>>2]=HEAP32[r50>>2]}r49=HEAP32[r26>>2]+(r48<<2)|0}}}while(0);r27=r27+96|0;r29=r29+1|0;r44=r46}r46=r44-HEAP32[HEAP32[r33>>2]+(r40<<2)>>2]>>2;r44=r1+132+(r40<<2)|0;HEAP32[r44>>2]=r46;r29=HEAP32[r19>>2];r27=r29+HEAP32[r2>>2]|0;r14=r29+HEAP32[r41>>2]|0;r41=r29+HEAP32[r9>>2]|0;r9=HEAP32[r38>>2];r29=r28&1;r60=HEAP32[r33>>2];r23=(r9|0)==0;r16=r9+64|0;r39=r9+68|0;r9=HEAP32[r60+(r29<<2)>>2];r59=HEAP32[r1+132+(r29<<2)>>2];r58=HEAP32[r60+(r40<<2)>>2]+(r46<<2)|0;while(1){r46=r9+4|0;r60=HEAP32[r9>>2];if((r59|0)<=0){break}r52=r60+72|0;r57=HEAP32[r52>>2];if((r57|0)<(r28|0)){r3=143;break}r56=(r57|0)==(r42|0);L201:do{if((HEAP32[r60+64>>2]|0)>(r27|0)){if(r56){r62=r58}else{HEAP32[r52>>2]=r42;HEAP32[r58>>2]=r60;r62=r58+4|0}r57=HEAP32[r60+44>>2]+HEAP32[r12>>2]|0;if(r23^1|(r57|0)>(r14|0)){r37=r60+48|0;r53=r60+80|0;r43=r62;while(1){r45=HEAP32[r53>>2];if((r45|0)==0){r63=r43;break}if(r23){r64=0}else{r64=HEAP32[HEAP32[r16>>2]+(HEAP32[r45+88>>2]*84&-1)+64>>2]-HEAP32[r39>>2]|0}r13=r57+r64|0;do{if((r13|0)>(r14|0)){r49=HEAP32[r45+72>>2];if((r49|0)>=(r28|0)){if((r13|0)<=(HEAP32[r45+4>>2]|0)){r65=r43;break}}if((r49|0)==(r42|0)){r66=r43}else{HEAP32[r43>>2]=r45;r66=r43+4|0}r49=HEAP32[r37>>2];HEAP32[r45+4>>2]=r13;HEAP32[r45+24>>2]=r49;HEAP32[r45+72>>2]=r42;r65=r66}else{r65=r43}}while(0);r53=r45+84|0;r43=r65}if(r23){r67=r63;r3=160}else{r68=r63}}else{r67=r62;r3=160}if(r3==160){r3=0;if((r57|0)>(r41|0)){r68=r67}else{r69=r67;break}}r43=r60+48|0;r53=r60+92|0;while(1){r37=HEAP32[r53>>2];if((r37|0)<=-1){r69=r68;break L201}if(r23){r70=0}else{r13=HEAP32[HEAP32[r22>>2]+8>>2];r70=HEAP32[HEAP32[r16>>2]+(HEAP16[HEAP32[r13+(r37*20&-1)+4>>2]+(HEAP32[r13+(r37*20&-1)+8>>2]-1<<1)>>1]*84&-1)+64>>2]-HEAP32[r39>>2]|0}r13=r57+r70|0;if((r13|0)>(r41|0)){r51=HEAP32[r24>>2];r49=HEAP32[r17>>2];HEAP32[r17>>2]=r49+1;HEAP32[r51+(r49<<4)>>2]=r37;HEAP32[r51+(r49<<4)+4>>2]=r13-HEAP32[r30>>2];HEAP32[r51+(r49<<4)+8>>2]=HEAP32[r43>>2]}r53=HEAP32[r26>>2]+(r37<<2)|0}}else{if(r56){r69=r58;break}HEAP32[r60+4>>2]=-536870912;HEAP32[r60+24>>2]=-1;r53=r60+77|0;r43=1;while(1){if((r43|0)>=(HEAPU8[r53]|0)){break}HEAP32[r60+4+(r43<<2)>>2]=-536870912;HEAP32[r60+24+(r43<<2)>>2]=-1;r43=r43+1|0}HEAP32[r60+44>>2]=-536870912;HEAP32[r60+48>>2]=-1;HEAP32[r60+64>>2]=-536870912;HEAP32[r60+72>>2]=-1;r69=r58}}while(0);r9=r46;r59=r59-1|0;r58=r69}if(r3==143){___assert_fail(42232,6096,825,49936)}HEAP32[r44>>2]=r58-HEAP32[HEAP32[r33>>2]+(r40<<2)>>2]>>2;r33=HEAP32[HEAP32[r15>>2]+(r40<<2)>>2];r58=HEAP32[r17>>2];r44=r1+288|0;HEAP32[r44>>2]=HEAP32[r44>>2]+r58;r44=r1+176|0;r69=r1+160|0;r59=r1+168|0;r9=r1+164|0;r26=r1+20|0;r41=r1+188|0;r70=HEAP32[r24>>2];r39=0;r16=0;r23=r58;L246:while(1){if((r39|0)>=(r23|0)){r3=176;break}r58=HEAP32[r70+8>>2];do{if((r58|0)==-1){r71=r16}else{r68=HEAP32[r44>>2];r67=r70|0;r62=HEAP32[r67>>2];r63=HEAP16[r68+(r58*36&-1)+34>>1];if(r63<<16>>16==-1){r72=r68+(r58*36&-1)+16|0}else{r72=HEAP32[r41>>2]+(HEAP32[r68+(r58*36&-1)+20>>2]+HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r26>>2]+16>>2]+(HEAP16[r68+(r58*36&-1)+32>>1]<<2)>>2]+((r63<<16>>16)*12&-1)+4>>2]+(HEAP16[HEAP32[HEAP32[HEAP32[r22>>2]+8>>2]+(r62*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r63=HEAP32[r72>>2];if((r63|0)<=-536870912){r3=182;break L246}r65=r70+4|0;HEAP32[r65>>2]=HEAP32[r65>>2]-r63;r63=r68+(r58*36&-1)|0;r68=HEAP32[r63>>2];if((HEAP32[HEAP32[r69>>2]+(r62*12&-1)>>2]|0)==(r68+1|0)){r71=r16;break}else{r73=0}while(1){if((r73|0)>=(r16|0)){r3=188;break}if((HEAP32[HEAP32[r59>>2]+(r73<<3)>>2]|0)==(r68|0)){r3=187;break}r73=r73+1|0}if(r3==187){r3=0;HEAP32[r70+12>>2]=HEAP32[HEAP32[r59>>2]+(r73<<3)+4>>2];r74=r73;r75=r16}else if(r3==188){r3=0;r68=HEAP32[r9>>2];do{if((r16|0)>=(r68|0)){if((r68|0)!=0){r62=r68+32|0;HEAP32[r9>>2]=r62;r76=r62<<3;r62=_realloc(HEAP32[r59>>2],r76);if((r62|0)==0){r3=196;break L246}HEAP32[r59>>2]=r62;_err_msg(1,6096,952,38392,(r4=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r4>>2]=HEAP32[r9>>2],r4));STACKTOP=r4;break}r62=_malloc(256);if((r62|0)==0){r3=193;break L246}if((HEAP32[r62-4>>2]&3|0)!=0){_memset(r62,0,256)|0}HEAP32[r59>>2]=r62;HEAP32[r9>>2]=32}}while(0);HEAP32[r70+12>>2]=-1;HEAP32[HEAP32[r59>>2]+(r16<<3)>>2]=HEAP32[r63>>2];r74=r16;r75=r16+1|0}HEAP32[HEAP32[r59>>2]+(r74<<3)+4>>2]=r39;HEAP32[HEAP32[r69>>2]+(HEAP32[r67>>2]*12&-1)+4>>2]=-536870912;HEAP32[HEAP32[r69>>2]+(HEAP32[r67>>2]*12&-1)>>2]=HEAP32[r63>>2]+1;r71=r75}}while(0);r70=r70+16|0;r39=r39+1|0;r16=r71;r23=HEAP32[r17>>2]}if(r3==176){r23=r1+208|0;r71=r1+56|0;r39=r7|0;r70=r7+4|0;r7=0;L279:while(1){if((r7|0)>=(r16|0)){break}r75=HEAP32[HEAP32[r59>>2]+(r7<<3)>>2];r74=HEAP32[r23>>2];r9=HEAP32[r74+(r75<<2)>>2];r73=HEAP32[r74+(r75+1<<2)>>2];r75=HEAP32[r44>>2]+(r9*36&-1)|0;r74=r9;while(1){if((r74|0)>=(r73|0)){break}L285:do{if((HEAP8[r75+4|0]|0)!=0){r9=r75+34|0;r72=r75+16|0;r58=r75+24|0;r46=r75+28|0;r68=r75+32|0;r62=r75+20|0;r65=HEAP32[r59>>2]+(r7<<3)+4|0;while(1){r66=HEAP32[r65>>2];if((r66|0)<=-1){break L285}r14=HEAP32[r24>>2];r64=r14+(r66<<4)|0;r27=HEAP32[r64>>2];r60=HEAP32[r22>>2];r56=HEAP16[r9>>1];if(r56<<16>>16==-1){r77=r72}else{r77=HEAP32[r41>>2]+(HEAP32[r62>>2]+HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r26>>2]+16>>2]+(HEAP16[r68>>1]<<2)>>2]+((r56<<16>>16)*12&-1)+4>>2]+(HEAP16[HEAP32[HEAP32[r60+8>>2]+(r27*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r56=HEAP32[r77>>2];if((r56|0)>-536870912){if((_dict_filler_word(r60,r27)|0)!=0){r3=211;break L279}r60=HEAP32[r71>>2];r52=HEAP32[HEAP32[HEAP32[r22>>2]+8>>2]+(HEAP32[r64>>2]*20&-1)+16>>2];r43=HEAP32[r46>>2];HEAP32[r39>>2]=HEAP32[r58>>2];HEAP32[r70>>2]=r43;r43=r56+(_ngram_ng_score(r60,r52,r39,2,r8)>>10)|0;r78=r43;r79=HEAP32[r64>>2]}else{r78=r56;r79=r27}r27=HEAP32[r69>>2]+(r79*12&-1)+4|0;if((r78|0)>(HEAP32[r27>>2]|0)){HEAP32[r27>>2]=r78;HEAP32[HEAP32[r69>>2]+(HEAP32[r64>>2]*12&-1)+8>>2]=r74}r65=r14+(r66<<4)+12|0}}}while(0);r75=r75+36|0;r74=r74+1|0}r7=r7+1|0}if(r3==211){___assert_fail(37136,6096,985,50224)}r7=HEAP32[r24>>2];r78=0;r79=HEAP32[r36>>2];while(1){r80=HEAP32[r17>>2];if((r78|0)>=(r80|0)){break}r8=HEAP32[r7>>2];r77=r7+4|0;r59=HEAP32[r77>>2]+HEAP32[HEAP32[r69>>2]+(r8*12&-1)+4>>2]|0;HEAP32[r77>>2]=r59;HEAP32[r7+8>>2]=HEAP32[HEAP32[r69>>2]+(r8*12&-1)+8>>2];r7=r7+16|0;r78=r78+1|0;r79=(r59|0)>(r79|0)?r59:r79}HEAP32[r36>>2]=r79;r78=r1+504|0;r7=r79+HEAP32[r78>>2]|0;r79=HEAP32[r24>>2];r24=r80;r80=r33;L309:while(1){if((r24|0)<=0){r3=239;break}r33=r79+4|0;do{if((HEAP32[r33>>2]|0)>(r7|0)){r17=HEAP32[r79>>2];_ngram_search_alloc_all_rc(r1,r17);r59=r79+8|0;r8=HEAP32[r25>>2]+(r17<<2)|0;r77=0;while(1){r16=HEAP32[r8>>2];if((r16|0)==0){break}r74=HEAP32[r16+72>>2];if((r74|0)<(r28|0)){r3=228}else{if((HEAP32[r33>>2]|0)>(HEAP32[r16+4>>2]|0)){r3=228}else{r81=r77}}if(r3==228){r3=0;if((r74|0)==(r42|0)){r3=229;break L309}r74=HEAP32[r59>>2];HEAP32[r16+4>>2]=HEAP32[r33>>2];HEAP32[r16+24>>2]=r74;HEAP32[r16+72>>2]=r42;r81=r77+1|0}r8=r16+80|0;r77=r81}if((r77|0)<=0){r82=r80;break}r8=(r17|0)/32&-1;r59=1<<(r17&31);if((HEAP32[HEAP32[r18>>2]+(r8<<2)>>2]&r59|0)!=0){r3=234;break L309}if((HEAP32[HEAP32[HEAP32[r22>>2]+8>>2]+(r17*20&-1)+8>>2]|0)==1){r3=236;break L309}HEAP32[r80>>2]=r17;r16=HEAP32[r18>>2]+(r8<<2)|0;HEAP32[r16>>2]=HEAP32[r16>>2]|r59;r82=r80+4|0}else{r82=r80}}while(0);r79=r79+16|0;r24=r24-1|0;r80=r82}if(r3==229){___assert_fail(35880,6096,1024,50224)}else if(r3==234){___assert_fail(35032,6096,1031,50224)}else if(r3==236){___assert_fail(39512,6096,1032,50224)}else if(r3==239){r82=r80-HEAP32[HEAP32[r15>>2]+(r40<<2)>>2]>>2;r80=r1+144+(r40<<2)|0;HEAP32[r80>>2]=r82;r24=HEAP32[r36>>2];r36=r24+HEAP32[r1+496>>2]|0;r79=r24+HEAP32[r78>>2]|0;r78=HEAP32[r15>>2];r24=r1+68|0;r81=HEAP32[r78+(r29<<2)>>2];r7=HEAP32[r1+144+(r29<<2)>>2];r29=HEAP32[r78+(r40<<2)>>2]+(r82<<2)|0;L333:while(1){r82=r81+4|0;r78=HEAP32[r81>>2];if((r7|0)<=0){r3=258;break}r33=HEAP32[r25>>2]+(r78<<2)|0;r59=HEAP32[r33>>2];r16=r33;r33=0;L336:while(1){r8=r59;r74=r16;L338:while(1){r83=r8;while(1){if((r83|0)==0){break L336}r84=r83+72|0;r75=HEAP32[r84>>2];if((r75|0)<(r28|0)){r3=246;break L333}r85=r83+80|0;r86=HEAP32[r85>>2];if((HEAP32[r83+64>>2]|0)>(r79|0)){break L338}if((r75|0)==(r42|0)){r8=r86;r74=r85;continue L338}r75=HEAP32[r24>>2];r73=r75|0;HEAP32[r83>>2]=HEAP32[r73>>2];HEAP32[r73>>2]=r83;r73=r75+28|0;HEAP32[r73>>2]=HEAP32[r73>>2]+1;HEAP32[r74>>2]=r86;r83=r86}}HEAP32[r84>>2]=r42;r74=r33+1|0;r8=HEAP32[r83+44>>2];if((r8|0)<=(r36|0)){r59=r86;r16=r85;r33=r74;continue}_ngram_search_save_bp(r1,r28,r78,r8,HEAP32[r83+48>>2],HEAP32[r83+92>>2]);r59=r86;r16=r85;r33=r74}do{if((r33|0)>0){r16=(r78|0)/32&-1;r59=1<<(r78&31);if((HEAP32[HEAP32[r18>>2]+(r16<<2)>>2]&r59|0)!=0){r87=r29;break}if((HEAP32[HEAP32[HEAP32[r22>>2]+8>>2]+(r78*20&-1)+8>>2]|0)==1){r3=255;break L333}HEAP32[r29>>2]=r78;r74=HEAP32[r18>>2]+(r16<<2)|0;HEAP32[r74>>2]=HEAP32[r74>>2]|r59;r87=r29+4|0}else{r87=r29}}while(0);r81=r82;r7=r7-1|0;r29=r87}if(r3==246){___assert_fail(42232,6096,1068,49920)}else if(r3==255){___assert_fail(39512,6096,1096,49920)}else if(r3==258){HEAP32[r80>>2]=r29-HEAP32[HEAP32[r15>>2]+(r40<<2)>>2]>>2;r40=0;while(1){if((r40|0)>=(HEAP32[r21>>2]|0)){break}r15=HEAP32[HEAP32[r35>>2]+(r40<<2)>>2];r29=HEAP32[HEAP32[r25>>2]+(r15<<2)>>2];do{if((HEAP32[r29+72>>2]|0)>=(r28|0)){if((HEAP32[r29+64>>2]|0)<=(r79|0)){break}HEAP32[r29+72>>2]=r42;r80=HEAP32[r29+44>>2];if((r80|0)<=(r36|0)){break}_ngram_search_save_bp(r1,r28,r15,r80,HEAP32[r29+48>>2],0)}}while(0);r40=r40+1|0}r40=HEAP32[r10>>2];r28=r1+536|0;r36=HEAP32[r28>>2];do{if((r36|0)==-1){r88=r40}else{if((r36|0)==(HEAP32[r1+40>>2]|0)){r88=r40;break}r42=r1+180|0;r79=HEAP32[HEAP32[r23>>2]+(r40<<2)>>2];r29=0;r15=-2147483648;r82=0;while(1){r89=HEAP32[r42>>2];if((r79|0)>=(r89|0)){break}r80=HEAP32[r44>>2];if((_dict_filler_word(HEAP32[r22>>2],HEAP32[r80+(r79*36&-1)+8>>2])|0)==0){r90=r29;r91=r15;r92=r82}else{r87=HEAP32[r80+(r79*36&-1)+16>>2];r7=(r87|0)>(r15|0);HEAP8[r80+(r79*36&-1)+4|0]=0;r90=r29+1|0;r91=r7?r87:r15;r92=r7?r80+(r79*36&-1)|0:r82}r79=r79+1|0;r29=r90;r15=r91;r82=r92}if((r82|0)==0){r93=r29;r94=r89}else{HEAP8[r82+4|0]=1;r93=r29-1|0;r94=HEAP32[r42>>2]}r15=r94-HEAP32[HEAP32[r23>>2]+(r40<<2)>>2]-r93|0;while(1){if((r15|0)<=(HEAP32[r28>>2]|0)){r3=284;break}r79=HEAP32[r42>>2];r80=HEAP32[HEAP32[r23>>2]+(r40<<2)>>2];r7=2147483647;r87=0;while(1){if((r80|0)>=(r79|0)){break}r81=HEAP32[r44>>2];if((HEAP8[r81+(r80*36&-1)+4|0]|0)==0){r95=r7;r96=r87}else{r18=HEAP32[r81+(r80*36&-1)+16>>2];r85=(r18|0)<(r7|0);r95=r85?r18:r7;r96=r85?r81+(r80*36&-1)|0:r87}r80=r80+1|0;r7=r95;r87=r96}if((r87|0)==0){r3=282;break}HEAP8[r87+4|0]=0;r15=r15-1|0}if(r3==282){_err_msg(5,6096,1239,43304,(r4=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r4>>2]=0,r4));STACKTOP=r4;_exit(1)}else if(r3==284){r88=HEAP32[r10>>2];break}}}while(0);r96=HEAP32[r22>>2];r95=HEAP32[r26>>2];r40=r1+172|0;r28=HEAP32[HEAP32[HEAP32[r11>>2]+20>>2]+4>>2];while(1){r93=r28-1|0;if((r28|0)<=0){break}HEAP32[HEAP32[r40>>2]+(r93*12&-1)>>2]=-536870912;r28=r93}r28=HEAP32[r38>>2];r38=r1+180|0;r93=r1+212|0;r94=r95+16|0;r89=HEAP32[HEAP32[r23>>2]+(r88<<2)>>2];r92=0;while(1){if((r89|0)>=(HEAP32[r38>>2]|0)){break}r91=HEAP32[r44>>2];HEAP32[HEAP32[r93>>2]+(HEAP32[r91+(r89*36&-1)+8>>2]<<2)>>2]=-1;L401:do{if((HEAP32[r91+(r89*36&-1)+8>>2]|0)==(HEAP32[r34>>2]|0)){r97=r92}else{r90=r92+1|0;r36=HEAP16[r91+(r89*36&-1)+34>>1];if(r36<<16>>16==-1){r15=r91+(r89*36&-1)+16|0;r42=r91+(r89*36&-1)+32|0;r29=0;while(1){if((r29|0)>=(HEAP32[HEAP32[HEAP32[r11>>2]+20>>2]+4>>2]|0)){r97=r90;break L401}r82=HEAP32[r15>>2];r7=HEAP32[r40>>2]+(r29*12&-1)|0;if((r82|0)>(HEAP32[r7>>2]|0)){HEAP32[r7>>2]=r82;HEAP32[HEAP32[r40>>2]+(r29*12&-1)+4>>2]=r89;HEAP32[HEAP32[r40>>2]+(r29*12&-1)+8>>2]=HEAP16[r42>>1]|0}r29=r29+1|0}}else{r29=r91+(r89*36&-1)+32|0;r42=HEAP32[r91+(r89*36&-1)+20>>2];r15=HEAP32[r41>>2];r87=HEAP32[HEAP32[r94>>2]+(HEAP16[r29>>1]<<2)>>2]+((r36<<16>>16)*12&-1)+4|0;r82=0;while(1){if((r82|0)>=(HEAP32[HEAP32[HEAP32[r11>>2]+20>>2]+4>>2]|0)){r97=r90;break L401}r7=HEAP32[r15+(r42+HEAP16[HEAP32[r87>>2]+(r82<<1)>>1]<<2)>>2];r80=HEAP32[r40>>2]+(r82*12&-1)|0;if((r7|0)>(HEAP32[r80>>2]|0)){HEAP32[r80>>2]=r7;HEAP32[HEAP32[r40>>2]+(r82*12&-1)+4>>2]=r89;HEAP32[HEAP32[r40>>2]+(r82*12&-1)+8>>2]=HEAP16[r29>>1]|0}r82=r82+1|0}}}}while(0);r89=r89+1|0;r92=r97}L420:do{if((r92|0)!=0){r97=r88+1|0;r89=HEAP32[r19>>2]+HEAP32[r2>>2]|0;r94=(r28|0)==0;r34=r95+12|0;r93=r28+64|0;r91=r28+68|0;r82=HEAP32[r32>>2];r29=HEAP32[r31>>2];L422:while(1){if((r29|0)<=0){break}r87=HEAP16[r82+92>>1]|0;r42=HEAP32[r40>>2];if(r94){r98=0}else{r98=HEAP32[HEAP32[r93>>2]+(r87*84&-1)+64>>2]-HEAP32[r91>>2]|0}r15=HEAP32[r42+(r87*12&-1)>>2]+HEAP32[r30>>2]+HEAP32[r12>>2]+r98|0;do{if((r15|0)>(r89|0)){r90=r82+4|0;if((HEAP32[r82+72>>2]|0)<(r88|0)){r99=r90}else{if((r15|0)>(HEAP32[r90>>2]|0)){r99=r90}else{break}}r90=HEAP32[r42+(r87*12&-1)+4>>2];HEAP32[r99>>2]=r15;HEAP32[r82+24>>2]=r90;HEAP32[r82+72>>2]=r97;r90=HEAP16[HEAP32[HEAP32[HEAP32[r34>>2]+(r87<<2)>>2]+(HEAP16[r82+94>>1]<<2)>>2]+(HEAP32[r42+(r87*12&-1)+8>>2]<<1)>>1];HEAP16[r82+54>>1]=r90;if(r90<<16>>16==-1){r3=313;break L422}}}while(0);r82=r82+96|0;r29=r29-1|0}if(r3==313){___assert_fail(44864,6096,1329,49736)}r29=r1+124|0;r82=0;while(1){r100=HEAP32[r29>>2];if((r82|0)>=(r100|0)){break}HEAP32[HEAP32[r69>>2]+(HEAP32[HEAP32[r35>>2]+(r82<<2)>>2]*12&-1)+4>>2]=-2147483648;r82=r82+1|0}r82=r96+8|0;r87=HEAP32[HEAP32[r23>>2]+(r88<<2)>>2];r42=r100;while(1){if((r87|0)>=(HEAP32[r38>>2]|0)){r101=0;r102=r42;break}r15=HEAP32[r44>>2];L444:do{if((HEAP8[r15+(r87*36&-1)+4|0]|0)==0){r103=r42}else{r90=r15+(r87*36&-1)+34|0;r36=r15+(r87*36&-1)+16|0;r7=r15+(r87*36&-1)+24|0;r80=r15+(r87*36&-1)+28|0;r79=r15+(r87*36&-1)+32|0;r81=r15+(r87*36&-1)+20|0;r85=0;r18=r42;while(1){if((r85|0)>=(r18|0)){r103=r18;break L444}r86=HEAP32[HEAP32[r35>>2]+(r85<<2)>>2];r83=HEAP32[r82>>2];r84=HEAP16[r90>>1];if(r84<<16>>16==-1){r104=r36}else{r104=HEAP32[r41>>2]+(HEAP32[r81>>2]+HEAP16[HEAP32[HEAP32[HEAP32[HEAP32[r26>>2]+16>>2]+(HEAP16[r79>>1]<<2)>>2]+((r84<<16>>16)*12&-1)+4>>2]+(HEAP16[HEAP32[r83+(r86*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r84=HEAP32[r104>>2];if((r84|0)==-536870912){r105=-536870912}else{r24=HEAP32[r71>>2];r78=HEAP32[r83+(r86*20&-1)+16>>2];r83=HEAP32[r80>>2];HEAP32[r39>>2]=HEAP32[r7>>2];HEAP32[r70>>2]=r83;r105=r84+(_ngram_ng_score(r24,r78,r39,2,r6)>>10)|0}r78=HEAP32[r69>>2]+(r86*12&-1)+4|0;if((r105|0)>(HEAP32[r78>>2]|0)){HEAP32[r78>>2]=r105;HEAP32[HEAP32[r69>>2]+(r86*12&-1)+8>>2]=r87}r85=r85+1|0;r18=HEAP32[r29>>2]}}}while(0);r87=r87+1|0;r42=r103}L459:while(1){if((r101|0)>=(r102|0)){break}r42=HEAP32[HEAP32[r35>>2]+(r101<<2)>>2];do{if((r42|0)==(HEAP32[HEAP32[r22>>2]+32>>2]|0)){r106=r102}else{r87=HEAP32[HEAP32[r25>>2]+(r42<<2)>>2];r15=r87;r18=HEAP32[r69>>2];if(r94){r107=0}else{r107=HEAP32[HEAP32[r93>>2]+(HEAP16[r87+92>>1]*84&-1)+64>>2]-HEAP32[r91>>2]|0}r85=HEAP32[r18+(r42*12&-1)+4>>2]+HEAP32[r12>>2]+r107|0;if((r85|0)<=(r89|0)){r106=r102;break}r7=HEAP32[r44>>2];r80=HEAP32[r18+(r42*12&-1)+8>>2];r18=r87+4|0;if((HEAP32[r87+72>>2]|0)<(r88|0)){r108=r18}else{if((r85|0)>(HEAP32[r18>>2]|0)){r108=r18}else{r106=r102;break}}HEAP32[r108>>2]=r85;HEAP32[r87+24>>2]=r80;HEAP32[r87+72>>2]=r97;r85=HEAP32[r7+(r80*36&-1)+8>>2];r80=HEAP32[r82>>2];r7=HEAP16[HEAP32[HEAP32[HEAP32[r34>>2]+(HEAP16[r87+92>>1]<<2)>>2]+(HEAP16[r15+94>>1]<<2)>>2]+(HEAP16[HEAP32[r80+(r85*20&-1)+4>>2]+(HEAP32[r80+(r85*20&-1)+8>>2]-1<<1)>>1]<<1)>>1];HEAP16[r87+54>>1]=r7;if(r7<<16>>16==-1){r3=339;break L459}r106=HEAP32[r29>>2]}}while(0);r101=r101+1|0;r102=r106}if(r3==339){___assert_fail(44864,6096,1391,49736)}r29=r1+48|0;r34=HEAP32[HEAP32[r25>>2]+(HEAP32[r29>>2]<<2)>>2];r82=HEAP16[HEAP32[HEAP32[r11>>2]+20>>2]+40>>1]|0;r42=HEAP32[r40>>2];r7=r42+(r82*12&-1)|0;if(r94){r109=0}else{r109=HEAP32[HEAP32[r93>>2]+(HEAP16[r34+92>>1]*84&-1)+64>>2]-HEAP32[r91>>2]|0}r87=HEAP32[r7>>2]+HEAP32[r1+520>>2]+HEAP32[r12>>2]+r109|0;do{if((r87|0)>(r89|0)){r85=r34+4|0;if((HEAP32[r34+72>>2]|0)<(r88|0)){r110=r85}else{if((r87|0)>(HEAP32[r85>>2]|0)){r110=r85}else{break}}r85=HEAP32[r42+(r82*12&-1)+4>>2];HEAP32[r110>>2]=r87;HEAP32[r34+24>>2]=r85;HEAP32[r34+72>>2]=r97}}while(0);r34=r96+28|0;r87=r1+516|0;r85=r42+(r82*12&-1)+4|0;r80=HEAP32[r96+24>>2];while(1){if((r80|0)>(HEAP32[r34>>2]|0)){break L420}do{if((r80|0)!=(HEAP32[r29>>2]|0)){if((r80|0)==(HEAP32[HEAP32[r22>>2]+32>>2]|0)){break}r15=HEAP32[HEAP32[r25>>2]+(r80<<2)>>2];if((r15|0)==0){break}if(r94){r111=0}else{r111=HEAP32[HEAP32[r93>>2]+(HEAP16[r15+92>>1]*84&-1)+64>>2]-HEAP32[r91>>2]|0}r18=HEAP32[r7>>2]+HEAP32[r87>>2]+HEAP32[r12>>2]+r111|0;if((r18|0)<=(r89|0)){break}r79=r15+4|0;if((HEAP32[r15+72>>2]|0)<(r88|0)){r112=r79}else{if((r18|0)>(HEAP32[r79>>2]|0)){r112=r79}else{break}}r79=HEAP32[r85>>2];HEAP32[r112>>2]=r18;HEAP32[r15+24>>2]=r79;HEAP32[r15+72>>2]=r97}}while(0);r80=r80+1|0}}}while(0);r112=HEAP32[r10>>2];r10=HEAP32[r32>>2];r32=HEAP32[r31>>2];while(1){if((r32|0)<=0){r113=0;break}if((HEAP32[r10+72>>2]|0)==(r112|0)){HEAP32[r10+4>>2]=-536870912;HEAP32[r10+24>>2]=-1;r31=r10+77|0;r88=1;while(1){if((r88|0)>=(HEAPU8[r31]|0)){break}HEAP32[r10+4+(r88<<2)>>2]=-536870912;HEAP32[r10+24+(r88<<2)>>2]=-1;r88=r88+1|0}HEAP32[r10+44>>2]=-536870912;HEAP32[r10+48>>2]=-1;HEAP32[r10+64>>2]=-536870912;HEAP32[r10+72>>2]=-1}r10=r10+96|0;r32=r32-1|0}while(1){if((r113|0)>=(HEAP32[r21>>2]|0)){break}r32=HEAP32[HEAP32[r25>>2]+(HEAP32[HEAP32[r35>>2]+(r113<<2)>>2]<<2)>>2];if((HEAP32[r32+72>>2]|0)==(r112|0)){HEAP32[r32+4>>2]=-536870912;HEAP32[r32+24>>2]=-1;r10=r32+77|0;r88=1;while(1){if((r88|0)>=(HEAPU8[r10]|0)){break}HEAP32[r32+4+(r88<<2)>>2]=-536870912;HEAP32[r32+24+(r88<<2)>>2]=-1;r88=r88+1|0}HEAP32[r32+44>>2]=-536870912;HEAP32[r32+48>>2]=-1;HEAP32[r32+64>>2]=-536870912;HEAP32[r32+72>>2]=-1}r113=r113+1|0}r113=r1+204|0;HEAP32[r113>>2]=HEAP32[r113>>2]+1;r20=1;STACKTOP=r5;return r20}}}else if(r3==182){___assert_fail(39672,6096,918,50224)}else if(r3==193){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=32,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=6096,HEAP32[r4+24>>2]=943,r4));STACKTOP=r4}else if(r3==196){_ckd_fail(45472,(r4=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r4>>2]=r76,HEAP32[r4+8>>2]=6096,HEAP32[r4+16>>2]=950,r4));STACKTOP=r4}}}function _reinit_search_subtree(r1,r2){var r3,r4;r3=HEAP32[r2+80>>2];while(1){if((r3|0)==0){break}r4=HEAP32[r3+84>>2];_reinit_search_subtree(r1,r3);r3=r4}r3=HEAP32[r1+68>>2];r1=r3|0;HEAP32[r2>>2]=HEAP32[r1>>2];HEAP32[r1>>2]=r2;r2=r3+28|0;HEAP32[r2>>2]=HEAP32[r2>>2]+1;return}function _ngram_fwdflat_expand_all(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;r2=0;r3=STACKTOP;r4=r1+232|0;HEAP32[r4>>2]=0;r5=HEAP32[r1+40>>2];r6=r1+224|0;_memset(HEAP32[r6>>2],0,((r5+31|0)/32&-1)<<2)|0;r7=r1+56|0;r8=r1+16|0;r9=r1+220|0;r10=r1+228|0;r1=0;while(1){if((r1|0)>=(r5|0)){break}if((_ngram_model_set_known_wid(HEAP32[r7>>2],HEAP32[HEAP32[HEAP32[r8>>2]+8>>2]+(r1*20&-1)+16>>2])|0)!=0){HEAP32[HEAP32[r9>>2]+(HEAP32[r4>>2]<<2)>>2]=r1;HEAP32[HEAP32[r10>>2]+(HEAP32[r4>>2]<<2)>>2]=r1;r11=HEAP32[r6>>2]+(((r1|0)/32&-1)<<2)|0;HEAP32[r11>>2]=HEAP32[r11>>2]|1<<(r1&31);HEAP32[r4>>2]=HEAP32[r4>>2]+1}r1=r1+1|0}_err_msg(1,49384,85,35656,(r2=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r2>>2]=HEAP32[r4>>2],r2));STACKTOP=r2;HEAP32[HEAP32[r10>>2]+(HEAP32[r4>>2]<<2)>>2]=-1;HEAP32[HEAP32[r9>>2]+(HEAP32[r4>>2]<<2)>>2]=-1;STACKTOP=r3;return}function _ngram_fwdflat_allocate_1ph(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r2=HEAP32[r1+16>>2];r3=HEAP32[r1+40>>2];r4=r1+120|0;HEAP32[r4>>2]=0;r5=r2+8|0;r2=0;r6=0;while(1){if((r2|0)>=(r3|0)){break}if((HEAP32[HEAP32[r5>>2]+(r2*20&-1)+8>>2]|0)==1){r7=r6+1|0;HEAP32[r4>>2]=r7;r8=r7}else{r8=r6}r2=r2+1|0;r6=r8}r8=___ckd_calloc__(r6,4,49384,105);r6=r1+116|0;HEAP32[r6>>2]=r8;r8=___ckd_calloc__(HEAP32[r4>>2],96,49384,106);r4=r1+100|0;HEAP32[r4>>2]=r8;r8=r1+12|0;r2=r1+60|0;r7=r1+104|0;r1=0;r9=0;while(1){if((r1|0)>=(r3|0)){break}r10=HEAP32[r5>>2];if((HEAP32[r10+(r1*20&-1)+8>>2]|0)==1){HEAP16[HEAP32[r4>>2]+(r9*96&-1)+92>>1]=HEAP16[HEAP32[r10+(r1*20&-1)+4>>2]>>1];HEAP16[HEAP32[r4>>2]+(r9*96&-1)+94>>1]=HEAP16[HEAP32[HEAP32[r8>>2]+20>>2]+40>>1];r10=HEAP32[r4>>2];r11=HEAP16[r10+(r9*96&-1)+92>>1]|0;r12=HEAP32[HEAP32[HEAP32[r8>>2]+20>>2]+56>>2];r13=r12+(r11*12&-1)|0;r14=r12+(r11*12&-1)+4|0;_hmm_init(HEAP32[r2>>2],r10+(r9*96&-1)|0,1,HEAPU8[r13]|HEAPU8[r13+1|0]<<8|HEAPU8[r13+2|0]<<16|HEAPU8[r13+3|0]<<24|0,HEAPU8[r14]|HEAPU8[r14+1|0]<<8|HEAPU8[r14+2|0]<<16|HEAPU8[r14+3|0]<<24|0);HEAP32[HEAP32[r4>>2]+(r9*96&-1)+80>>2]=0;HEAP32[HEAP32[r7>>2]+(r1<<2)>>2]=HEAP32[r4>>2]+(r9*96&-1);HEAP32[HEAP32[r6>>2]+(r9<<2)>>2]=r1;r15=r9+1|0}else{r15=r9}r1=r1+1|0;r9=r15}return}function _ngram_fwdflat_free_1ph(r1){var r2,r3,r4,r5;r2=HEAP32[r1+40>>2];r3=r1+16|0;r4=0;r5=0;while(1){if((r5|0)>=(r2|0)){break}r4=(HEAP32[HEAP32[HEAP32[r3>>2]+8>>2]+(r5*20&-1)+8>>2]|0)==1?r4+1|0:r4;r5=r5+1|0}r5=r1+100|0;_free(HEAP32[r5>>2]);HEAP32[r5>>2]=0;_free(HEAP32[r1+116>>2]);return}function _ngram_fwdflat_start(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+144|0;r5=r4;r6=r4+8;HEAPF64[r1+376>>3]=0;HEAPF64[r1+384>>3]=0;_getrusage(0,r6);HEAPF64[r1+408>>3]=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6+((HEAP32[r6+8>>2]|0)+(HEAP32[r6+12>>2]|0)*1e-6);_gettimeofday(r5,0);HEAPF64[r1+416>>3]=(HEAP32[r5>>2]|0)+(HEAP32[r5+4>>2]|0)*1e-6;r5=r1+64|0;if((HEAP8[r5]|0)==0){r7=r1+16|0;r8=r1+220|0}else{r6=r1+216|0;_memset(HEAP32[r6>>2],0,HEAP32[r1+200>>2]<<2)|0;r9=r1+176|0;r10=r1+180|0;r11=r1+56|0;r12=r1+16|0;r13=r1+76|0;r14=HEAP32[r9>>2];r15=0;while(1){if((r15|0)>=(HEAP32[r10>>2]|0)){break}r16=HEAP32[r14+12>>2];if((r16|0)<0){r17=0}else{r17=HEAP32[HEAP32[r9>>2]+(r16*36&-1)>>2]+1|0}r16=HEAP32[r14>>2];r18=HEAP32[r14+8>>2];do{if((_ngram_model_set_known_wid(HEAP32[r11>>2],HEAP32[HEAP32[HEAP32[r12>>2]+8>>2]+(r18*20&-1)+16>>2])|0)!=0){r19=HEAP32[r6>>2]+(r17<<2)|0;while(1){r20=HEAP32[r19>>2];if((r20|0)==0){break}if((HEAP32[r20+4>>2]|0)==(r18|0)){r2=13;break}r19=r20+48|0}if(r2==13){r2=0;HEAP32[r20+16>>2]=r16;break}r19=HEAP32[r13>>2];r21=r19|0;r22=HEAP32[r21>>2];if((r22|0)==0){_listelem_add_block(r19,49384,261);r23=HEAP32[r21>>2]}else{r23=r22}HEAP32[r21>>2]=HEAP32[r23>>2];r21=r19+24|0;HEAP32[r21>>2]=HEAP32[r21>>2]+1;HEAP32[r23+4>>2]=r18;HEAP32[r23+16>>2]=r16;HEAP32[r23+12>>2]=r16;HEAP32[r23+48>>2]=HEAP32[HEAP32[r6>>2]+(r17<<2)>>2];HEAP32[HEAP32[r6>>2]+(r17<<2)>>2]=r23}}while(0);r14=r14+36|0;r15=r15+1|0}r15=r1+204|0;r14=r1+236|0;r23=r1+52|0;r17=0;while(1){if((r17|0)>=(HEAP32[r15>>2]|0)){break}r20=HEAP32[HEAP32[r6>>2]+(r17<<2)>>2];r11=0;L27:while(1){r9=(r11|0)==0;r10=r11+48|0;r16=r20;while(1){if((r16|0)==0){break L27}r18=HEAP32[r16+48>>2];r21=HEAP32[r16+16>>2];if((r21-HEAP32[r16+12>>2]|0)>=(HEAP32[r14>>2]|0)){if((HEAP32[r16+4>>2]|0)!=(HEAP32[r23>>2]|0)){r20=r18;r11=r16;continue L27}if((r21|0)>=(HEAP32[r15>>2]-1|0)){r20=r18;r11=r16;continue L27}}if(r9){HEAP32[HEAP32[r6>>2]+(r17<<2)>>2]=r18}else{HEAP32[r10>>2]=r18}r21=HEAP32[r13>>2];r19=r21|0;HEAP32[r16>>2]=HEAP32[r19>>2];HEAP32[r19>>2]=r16;r19=r21+28|0;HEAP32[r19>>2]=HEAP32[r19>>2]+1;r16=r18}}r17=r17+1|0}r17=r1+108|0;_memset(HEAP32[r17>>2],0,((HEAP32[r1+40>>2]+31|0)/32&-1)<<2)|0;r13=r1+220|0;r23=0;r14=0;while(1){if((r23|0)>=(HEAP32[r15>>2]|0)){break}r11=HEAP32[r6>>2]+(r23<<2)|0;r20=r14;while(1){r16=HEAP32[r11>>2];if((r16|0)==0){break}r10=r16+4|0;r9=HEAP32[r10>>2];r18=HEAP32[r17>>2]+(((r9|0)/32&-1)<<2)|0;r19=HEAP32[r18>>2];r21=1<<(r9&31);if((r19&r21|0)==0){HEAP32[r18>>2]=r19|r21;HEAP32[HEAP32[r13>>2]+(r20<<2)>>2]=HEAP32[r10>>2];r24=r20+1|0}else{r24=r20}r11=r16+48|0;r20=r24}r23=r23+1|0;r14=r20}HEAP32[HEAP32[r13>>2]+(r14<<2)>>2]=-1;_err_msg(1,49384,302,35656,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=r14,r3));STACKTOP=r3;r7=r12;r8=r13}r13=HEAP32[r1+20>>2];r12=HEAP32[r7>>2]+8|0;r7=r1+104|0;r3=r1+72|0;r14=r1+60|0;r23=r1+12|0;r24=r1+68|0;r17=r13+4|0;r6=r13+8|0;r13=0;while(1){r15=HEAP32[HEAP32[r8>>2]+(r13<<2)>>2];if((r15|0)<=-1){break}if((HEAP32[HEAP32[r12>>2]+(r15*20&-1)+8>>2]|0)!=1){if((HEAP32[HEAP32[r7>>2]+(r15<<2)>>2]|0)!=0){r2=43;break}r11=HEAP32[r3>>2];r16=r11|0;r10=HEAP32[r16>>2];if((r10|0)==0){_listelem_add_block(r11,49384,333);r25=HEAP32[r16>>2]}else{r25=r10}HEAP32[r16>>2]=HEAP32[r25>>2];r16=r11+24|0;HEAP32[r16>>2]=HEAP32[r16>>2]+1;HEAP16[r25+94>>1]=HEAP16[HEAP32[HEAP32[r12>>2]+(r15*20&-1)+4>>2]+2>>1];r16=HEAP16[HEAP32[HEAP32[r12>>2]+(r15*20&-1)+4>>2]>>1];HEAP16[r25+92>>1]=r16;r11=r25+80|0;HEAP32[r11>>2]=0;r10=r16<<16>>16;r16=HEAP32[HEAP32[HEAP32[r23>>2]+20>>2]+56>>2];r21=r16+(r10*12&-1)|0;r19=r16+(r10*12&-1)+4|0;_hmm_init(HEAP32[r14>>2],r25,1,HEAPU8[r21]|HEAPU8[r21+1|0]<<8|HEAPU8[r21+2|0]<<16|HEAPU8[r21+3|0]<<24|0,HEAPU8[r19]|HEAPU8[r19+1|0]<<8|HEAPU8[r19+2|0]<<16|HEAPU8[r19+3|0]<<24|0);r19=1;r21=0;while(1){if((r19|0)>=(HEAP32[HEAP32[r12>>2]+(r15*20&-1)+8>>2]-1|0)){break}r10=HEAP32[r24>>2];r16=r10|0;r18=HEAP32[r16>>2];if((r18|0)==0){_listelem_add_block(r10,49384,344);r26=HEAP32[r16>>2]}else{r26=r18}HEAP32[r16>>2]=HEAP32[r26>>2];r16=r10+24|0;HEAP32[r16>>2]=HEAP32[r16>>2]+1;r16=r26;r10=r26+88|0;HEAP32[r10>>2]=HEAP16[HEAP32[HEAP32[r12>>2]+(r15*20&-1)+4>>2]+(r19<<1)>>1]|0;HEAP32[r26+92>>2]=((r19|0)!=(HEAP32[HEAP32[r12>>2]+(r15*20&-1)+8>>2]-1|0))<<31>>31;HEAP32[r26+80>>2]=0;r18=HEAP32[r14>>2];r9=_dict2pid_internal(HEAP32[r17>>2],HEAP32[r6>>2],r15,r19)&65535;r22=HEAP32[HEAP32[HEAP32[r23>>2]+20>>2]+56>>2]+(HEAP32[r10>>2]*12&-1)+4|0;_hmm_init(r18,r26,0,r9,HEAPU8[r22]|HEAPU8[r22+1|0]<<8|HEAPU8[r22+2|0]<<16|HEAPU8[r22+3|0]<<24|0);if((r21|0)==0){HEAP32[r11>>2]=r26}else{HEAP32[r21+80>>2]=r16}r19=r19+1|0;r21=r16}_ngram_search_alloc_all_rc(r1,r15);r19=HEAP32[HEAP32[r7>>2]+(r15<<2)>>2];if((r21|0)==0){HEAP32[r11>>2]=r19}else{HEAP32[r21+80>>2]=r19}HEAP32[HEAP32[r7>>2]+(r15<<2)>>2]=r25}r13=r13+1|0}if(r2==43){___assert_fail(37008,49384,328,51280)}HEAP32[r1+180>>2]=0;HEAP32[r1+192>>2]=0;r2=r1+40|0;r13=r1+212|0;r25=0;while(1){if((r25|0)>=(HEAP32[r2>>2]|0)){break}HEAP32[HEAP32[r13>>2]+(r25<<2)>>2]=-1;r25=r25+1|0}r25=r1+120|0;r13=r1+116|0;r26=0;while(1){if((r26|0)>=(HEAP32[r25>>2]|0)){break}r23=HEAP32[HEAP32[r7>>2]+(HEAP32[HEAP32[r13>>2]+(r26<<2)>>2]<<2)>>2];HEAP32[r23+4>>2]=-536870912;HEAP32[r23+24>>2]=-1;r6=r23+77|0;r17=1;while(1){if((r17|0)>=(HEAPU8[r6]|0)){break}HEAP32[r23+4+(r17<<2)>>2]=-536870912;HEAP32[r23+24+(r17<<2)>>2]=-1;r17=r17+1|0}HEAP32[r23+44>>2]=-536870912;HEAP32[r23+48>>2]=-1;HEAP32[r23+64>>2]=-536870912;HEAP32[r23+72>>2]=-1;r26=r26+1|0}r26=r1+44|0;r13=HEAP32[HEAP32[r7>>2]+(HEAP32[r26>>2]<<2)>>2];HEAP32[r13+4>>2]=0;HEAP32[r13+24>>2]=-1;HEAP32[r13+72>>2]=0;HEAP32[HEAP32[HEAP32[r1+140>>2]>>2]>>2]=HEAP32[r26>>2];HEAP32[r1+144>>2]=1;HEAP32[r1+248>>2]=0;HEAP32[r1+256>>2]=0;r26=r1+160|0;r13=0;while(1){if((r13|0)>=(HEAP32[r2>>2]|0)){break}HEAP32[HEAP32[r26>>2]+(r13*12&-1)>>2]=-1;r13=r13+1|0}if((HEAP8[r5]|0)!=0){r27=r1+292|0;r28=r27;HEAP32[r28>>2]=0;HEAP32[r28+4>>2]=0;HEAP32[r28+8>>2]=0;HEAP32[r28+12>>2]=0;STACKTOP=r4;return}HEAP32[r1+204>>2]=0;r27=r1+292|0;r28=r27;HEAP32[r28>>2]=0;HEAP32[r28+4>>2]=0;HEAP32[r28+8>>2]=0;HEAP32[r28+12>>2]=0;STACKTOP=r4;return}function _ngram_fwdflat_search(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+24|0;r6=r5;r7=r5+8;r8=r5+16;HEAP32[r8>>2]=r2;r9=r1+12|0;r10=HEAP32[r9>>2];if((HEAP8[r10+89|0]|0)==0){_memset(HEAP32[r10+40>>2],0,((HEAP32[HEAP32[r10+20>>2]+20>>2]+31|0)/32&-1)<<2)|0;HEAP32[r10+52>>2]=0;r11=r2&1;r12=r1+104|0;r13=HEAP32[HEAP32[r1+140>>2]+(r11<<2)>>2];r14=HEAP32[r1+144+(r11<<2)>>2];while(1){r11=r13+4|0;if((r14|0)<=0){break}r15=HEAP32[HEAP32[r12>>2]+(HEAP32[r13>>2]<<2)>>2];if((HEAP32[r15+72>>2]|0)==(r2|0)){_acmod_activate_hmm(HEAP32[r9>>2],r15|0);r16=r15}else{r16=r15}while(1){r15=HEAP32[r16+80>>2];if((r15|0)==0){break}if((HEAP32[r15+72>>2]|0)!=(r2|0)){r16=r15;continue}_acmod_activate_hmm(HEAP32[r9>>2],r15|0);r16=r15}r13=r11;r14=r14-1|0}r17=HEAP32[r9>>2]}else{r17=r10}r10=_acmod_score(r17,r8);r17=r1+304|0;HEAP32[r17>>2]=HEAP32[r17>>2]+HEAP32[HEAP32[r9>>2]+52>>2];_ngram_search_mark_bptable(r1,HEAP32[r8>>2]);r17=r1+248|0;r14=HEAP32[r17>>2];if((r14|0)==-536870912|(r14|0)<-536870912){r18=0;STACKTOP=r5;return r18}if((r14+(HEAP32[r1+484>>2]<<1)|0)<-536870912){_err_msg(1,49384,832,8272,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=HEAP32[r8>>2],HEAP32[r4+8>>2]=r14,r4));STACKTOP=r4;r4=HEAP32[r8>>2];r14=HEAP32[r17>>2];r13=r4&1;r16=r1+140|0;r2=r1+104|0;r12=HEAP32[HEAP32[r16>>2]+(r13<<2)>>2];r15=HEAP32[r1+144+(r13<<2)>>2];while(1){r13=r12+4|0;if((r15|0)<=0){break}r19=HEAP32[HEAP32[r2>>2]+(HEAP32[r12>>2]<<2)>>2];do{if((HEAP32[r19+72>>2]|0)==(r4|0)){r20=r19+77|0;r21=0;while(1){if((r21|0)>=(HEAPU8[r20]|0)){break}r22=r19+4+(r21<<2)|0;r23=HEAP32[r22>>2];if((r23|0)>-536870912){HEAP32[r22>>2]=r23-r14}r21=r21+1|0}r21=r19+44|0;r20=HEAP32[r21>>2];if((r20|0)<=-536870912){r24=r19;break}HEAP32[r21>>2]=r20-r14;r24=r19}else{r24=r19}}while(0);while(1){r19=HEAP32[r24+80>>2];if((r19|0)==0){break}if((HEAP32[r19+72>>2]|0)!=(r4|0)){r24=r19;continue}r11=r19+77|0;r20=0;while(1){if((r20|0)>=(HEAPU8[r11]|0)){break}r21=r19+4+(r20<<2)|0;r23=HEAP32[r21>>2];if((r23|0)>-536870912){HEAP32[r21>>2]=r23-r14}r20=r20+1|0}r20=r19+44|0;r11=HEAP32[r20>>2];if((r11|0)<=-536870912){r24=r19;continue}HEAP32[r20>>2]=r11-r14;r24=r19}r12=r13;r15=r15-1|0}HEAP32[r1+256>>2]=1;r25=r16;r26=r2}else{r25=r1+140|0;r26=r1+104|0}HEAP32[r17>>2]=-536870912;HEAP32[HEAP32[r1+60>>2]+8>>2]=r10;r10=HEAP32[r8>>2];r2=r10&1;r16=HEAP32[r1+144+(r2<<2)>>2];r15=HEAP32[HEAP32[r25>>2]+(r2<<2)>>2];r2=r1+296|0;HEAP32[r2>>2]=HEAP32[r2>>2]+r16;r2=r1+52|0;r12=r1+292|0;r24=r15;r15=r16;r16=-536870912;while(1){r14=r24+4|0;r4=HEAP32[r24>>2];if((r15|0)<=0){break}r11=HEAP32[HEAP32[r26>>2]+(r4<<2)>>2];if((HEAP32[r11+72>>2]|0)==(r10|0)){r20=_hmm_vit_eval(r11|0);if((r20|0)>(r16|0)){r27=(r4|0)==(HEAP32[r2>>2]|0)?r16:r20}else{r27=r16}HEAP32[r12>>2]=HEAP32[r12>>2]+1;r28=r11;r29=r27}else{r28=r11;r29=r16}while(1){r11=HEAP32[r28+80>>2];if((r11|0)==0){break}if((HEAP32[r11+72>>2]|0)!=(r10|0)){r28=r11;r29=r29;continue}r20=_hmm_vit_eval(r11|0);HEAP32[r12>>2]=HEAP32[r12>>2]+1;r28=r11;r29=(r20|0)>(r29|0)?r20:r29}r24=r14;r15=r15-1|0;r16=r29}HEAP32[r17>>2]=r16;r16=HEAP32[r8>>2];r29=r16+1|0;r15=r16&1;r24=HEAP32[r1+144+(r15<<2)>>2];r28=HEAP32[HEAP32[r25>>2]+(r15<<2)>>2];r15=r1+108|0;r12=r1+40|0;_memset(HEAP32[r15>>2],0,((HEAP32[r12>>2]+31|0)/32&-1)<<2)|0;r10=HEAP32[r17>>2];r27=r1+508|0;r13=r10+HEAP32[r27>>2]|0;r20=r10+HEAP32[r1+512>>2]|0;r10=r1+532|0;r11=HEAP32[r10>>2];r4=r1+16|0;r23=r28;r28=r24;L63:while(1){r24=r23+4|0;r21=HEAP32[r23>>2];if((r28|0)<=0){r3=91;break}r22=HEAP32[HEAP32[r26>>2]+(r21<<2)>>2];L66:do{if((HEAP32[r22+72>>2]|0)==(r16|0)){if((HEAP32[r22+64>>2]|0)<=(r13|0)){break}HEAP32[r22+72>>2]=r29;r30=HEAP32[r15>>2]+(((r21|0)/32&-1)<<2)|0;HEAP32[r30>>2]=HEAP32[r30>>2]|1<<(r21&31);r30=HEAP32[r22+44>>2];r31=HEAP32[r22+80>>2];r32=(HEAP32[HEAP32[HEAP32[r4>>2]+8>>2]+(r21*20&-1)+8>>2]|0)==1;if((r31|0)==0){if(!r32){r3=64;break L63}if((r30|0)<=(r20|0)){break}_ngram_search_save_bp(r1,r16,r21,r30,HEAP32[r22+48>>2],0);break}if(r32){r3=51;break L63}r32=r30+r11|0;if((r32|0)<=(r13|0)){break}if((HEAP32[r31+92>>2]|0)<=-1){r30=r31+4|0;if((HEAP32[r31+72>>2]|0)<(r16|0)){r33=r30}else{if((r32|0)>(HEAP32[r30>>2]|0)){r33=r30}else{break}}r30=HEAP32[r22+48>>2];HEAP32[r33>>2]=r32;HEAP32[r31+24>>2]=r30;HEAP32[r31+72>>2]=r29;break}r30=r22+48|0;r34=r31;while(1){if((r34|0)==0){break L66}r31=r34+4|0;if((HEAP32[r34+72>>2]|0)<(r16|0)){r35=r31;r3=58}else{if((r32|0)>(HEAP32[r31>>2]|0)){r35=r31;r3=58}}if(r3==58){r3=0;r31=HEAP32[r30>>2];HEAP32[r35>>2]=r32;HEAP32[r34+24>>2]=r31;HEAP32[r34+72>>2]=r29}r34=HEAP32[r34+80>>2]}}}while(0);r14=1<<(r21&31);r34=(r21|0)/32&-1;r32=r22;L91:while(1){r30=HEAP32[r32+80>>2];if((r30|0)==0){break}r19=r30+72|0;r31=HEAP32[r19>>2];if((r31|0)<(r16|0)){r32=r30;continue}if((HEAP32[r30+64>>2]|0)<=(r13|0)){if((r31|0)==(r29|0)){r32=r30;continue}HEAP32[r30+4>>2]=-536870912;r31=r30+77|0;r36=1;while(1){if((r36|0)>=(HEAPU8[r31]|0)){break}HEAP32[r30+4+(r36<<2)>>2]=-536870912;r36=r36+1|0}HEAP32[r30+44>>2]=-536870912;HEAP32[r30+64>>2]=-536870912;r32=r30;continue}HEAP32[r19>>2]=r29;r36=HEAP32[r15>>2]+(r34<<2)|0;HEAP32[r36>>2]=HEAP32[r36>>2]|r14;r36=HEAP32[r30+44>>2];r31=HEAP32[r30+92>>2];if((r31|0)>=0){if((r36|0)<=(r20|0)){r32=r30;continue}_ngram_search_save_bp(r1,r16,r21,r36,HEAP32[r30+48>>2],r31);r32=r30;continue}r31=r36+r11|0;if((r31|0)<=(r13|0)){r32=r30;continue}r36=HEAP32[r30+80>>2];if((HEAP32[r36+92>>2]|0)<=-1){r37=r36+4|0;if((HEAP32[r36+72>>2]|0)<(r16|0)){r38=r37}else{if((r31|0)>(HEAP32[r37>>2]|0)){r38=r37}else{r32=r30;continue}}r37=HEAP32[r30+48>>2];HEAP32[r38>>2]=r31;HEAP32[r36+24>>2]=r37;HEAP32[r36+72>>2]=r29;r32=r30;continue}r37=r30+48|0;r39=r36;while(1){if((r39|0)==0){r32=r30;continue L91}r36=r39+4|0;if((HEAP32[r39+72>>2]|0)<(r16|0)){r40=r36;r3=78}else{if((r31|0)>(HEAP32[r36>>2]|0)){r40=r36;r3=78}}if(r3==78){r3=0;r36=HEAP32[r37>>2];HEAP32[r40>>2]=r31;HEAP32[r39+24>>2]=r36;HEAP32[r39+72>>2]=r29}r39=HEAP32[r39+80>>2]}}r23=r24;r28=r28-1|0}if(r3==51){___assert_fail(39512,49384,514,50368)}else if(r3==64){___assert_fail(38280,49384,540,50368)}else if(r3==91){r28=HEAP32[r8>>2];r23=HEAP32[r4>>2];r4=HEAP32[r1+20>>2];r29=r28+1|0;r40=HEAP32[r17>>2]+HEAP32[r27>>2]|0;r27=HEAP32[r10>>2];r10=HEAPF32[r1+244>>2];r17=HEAP32[r1+240>>2];r16=r1+64|0;if((HEAP8[r16]|0)==0){r38=r1+300|0;HEAP32[r38>>2]=HEAP32[r38>>2]+HEAP32[r1+232>>2];r41=r1+228|0}else{r38=r28-r17|0;r13=r28+r17|0;r17=HEAP32[r1+204>>2];r11=(r13|0)>(r17|0)?r17:r13;r13=r1+224|0;_memset(HEAP32[r13>>2],0,((HEAP32[r12>>2]+31|0)/32&-1)<<2)|0;r17=r1+232|0;HEAP32[r17>>2]=0;r20=r1+216|0;r35=r1+228|0;r33=(r38|0)<0?0:r38;while(1){if((r33|0)>=(r11|0)){break}r38=HEAP32[r20>>2]+(r33<<2)|0;while(1){r32=HEAP32[r38>>2];if((r32|0)==0){break}r21=r32+4|0;r14=HEAP32[r21>>2];if((HEAP32[HEAP32[r13>>2]+(((r14|0)/32&-1)<<2)>>2]&1<<(r14&31)|0)==0){r34=HEAP32[r17>>2];HEAP32[r17>>2]=r34+1;HEAP32[HEAP32[r35>>2]+(r34<<2)>>2]=r14;r14=HEAP32[r21>>2];r21=HEAP32[r13>>2]+(((r14|0)/32&-1)<<2)|0;HEAP32[r21>>2]=HEAP32[r21>>2]|1<<(r14&31)}r38=r32+48|0}r33=r33+1|0}HEAP32[HEAP32[r35>>2]+(HEAP32[r17>>2]<<2)>>2]=-1;r33=r1+300|0;HEAP32[r33>>2]=HEAP32[r33>>2]+HEAP32[r17>>2];r41=r35}r35=r1+180|0;r17=r1+176|0;r33=r1+212|0;r13=r1+188|0;r20=r1+56|0;r11=r23+8|0;r23=r6|0;r38=r6+4|0;r6=r4+12|0;r24=r4+16|0;r4=HEAP32[HEAP32[r1+208>>2]+(r28<<2)>>2];r32=-536870912;r14=0;L141:while(1){if((r4|0)>=(HEAP32[r35>>2]|0)){break}r21=HEAP32[r17>>2];HEAP32[HEAP32[r33>>2]+(HEAP32[r21+(r4*36&-1)+8>>2]<<2)>>2]=-1;r34=r21+(r4*36&-1)+8|0;if((HEAP32[r34>>2]|0)==(HEAP32[r2>>2]|0)){r42=r32;r43=r14}else{r22=HEAP32[r13>>2];r39=HEAP32[r21+(r4*36&-1)+20>>2];r31=HEAP16[r21+(r4*36&-1)+34>>1];if(r31<<16>>16==-1){r44=0}else{r44=HEAP32[HEAP32[r24>>2]+(HEAP16[r21+(r4*36&-1)+32>>1]<<2)>>2]+((r31<<16>>16)*12&-1)|0}r31=(r44|0)==0;r37=r21+(r4*36&-1)+16|0;r30=r21+(r4*36&-1)+24|0;r19=r21+(r4*36&-1)+28|0;r21=r44+4|0;r36=0;while(1){r45=HEAP32[HEAP32[r41>>2]+(r36<<2)>>2];if((r45|0)<=-1){break}if(r31){r46=r37}else{r46=r22+(r39+HEAP16[HEAP32[r21>>2]+(HEAP16[HEAP32[HEAP32[r11>>2]+(r45*20&-1)+4>>2]>>1]<<1)>>1]<<2)|0}r47=HEAP32[r46>>2];do{if((r47|0)!=-536870912){r48=HEAP32[r20>>2];r49=HEAP32[HEAP32[r11>>2]+(r45*20&-1)+16>>2];r50=HEAP32[r19>>2];HEAP32[r23>>2]=HEAP32[r30>>2];HEAP32[r38>>2]=r50;r50=(r47+r10*(_ngram_ng_score(r48,r49,r23,2,r7)>>10)&-1)+r27|0;if((r50|0)<=(r40|0)){break}r49=HEAP32[HEAP32[r26>>2]+(r45<<2)>>2];r48=r49;r51=r49+4|0;if((HEAP32[r49+72>>2]|0)<(r28|0)){r52=r51}else{if((r50|0)>(HEAP32[r51>>2]|0)){r52=r51}else{break}}HEAP32[r52>>2]=r50;HEAP32[r49+24>>2]=r4;HEAP32[r49+72>>2]=r29;r50=HEAP32[r34>>2];r51=HEAP32[r11>>2];r53=HEAP16[HEAP32[HEAP32[HEAP32[r6>>2]+(HEAP16[r49+92>>1]<<2)>>2]+(HEAP16[r48+94>>1]<<2)>>2]+(HEAP16[HEAP32[r51+(r50*20&-1)+4>>2]+(HEAP32[r51+(r50*20&-1)+8>>2]-1<<1)>>1]<<1)>>1];HEAP16[r49+54>>1]=r53;if(r53<<16>>16==-1){r3=116;break L141}r53=HEAP32[r15>>2]+(((r45|0)/32&-1)<<2)|0;HEAP32[r53>>2]=HEAP32[r53>>2]|1<<(r45&31)}}while(0);r36=r36+1|0}if(r31){r54=r37}else{r54=r22+(r39+HEAP16[HEAP32[r21>>2]+(HEAP16[HEAP32[HEAP32[r9>>2]+20>>2]+40>>1]<<1)>>1]<<2)|0}r36=HEAP32[r54>>2];r34=(r36|0)>(r32|0);r42=r34?r36:r32;r43=r34?r4:r14}r4=r4+1|0;r32=r42;r14=r43}if(r3==116){___assert_fail(40816,49384,720,50344)}r3=r32+HEAP32[r1+520>>2]+r27|0;do{if((r3|0)>(r40|0)&(r3|0)>-536870912){r43=HEAP32[r1+48>>2];r42=HEAP32[HEAP32[r26>>2]+(r43<<2)>>2];r4=r42+4|0;if((HEAP32[r42+72>>2]|0)<(r28|0)){r55=r4}else{if((r3|0)>(HEAP32[r4>>2]|0)){r55=r4}else{break}}HEAP32[r55>>2]=r3;HEAP32[r42+24>>2]=r14;HEAP32[r42+72>>2]=r29;r42=HEAP32[r15>>2]+(((r43|0)/32&-1)<<2)|0;HEAP32[r42>>2]=HEAP32[r42>>2]|1<<(r43&31)}}while(0);r3=r32+HEAP32[r1+516>>2]+r27|0;L177:do{if((r3|0)>(r40|0)&(r3|0)>-536870912){r27=HEAP32[r1+48>>2];while(1){r32=r27+1|0;if((r32|0)>=(HEAP32[r12>>2]|0)){break L177}r55=HEAP32[HEAP32[r26>>2]+(r32<<2)>>2];if((r55|0)==0){r27=r32;continue}r43=r55+4|0;if((HEAP32[r55+72>>2]|0)<(r28|0)){r56=r43}else{if((r3|0)>(HEAP32[r43>>2]|0)){r56=r43}else{r27=r32;continue}}HEAP32[r56>>2]=r3;HEAP32[r55+24>>2]=r14;HEAP32[r55+72>>2]=r29;r55=HEAP32[r15>>2]+(((r32|0)/32&-1)<<2)|0;HEAP32[r55>>2]=HEAP32[r55>>2]|1<<(r32&31);r27=r32}}}while(0);r29=r28&1;r14=HEAP32[HEAP32[r25>>2]+(r29<<2)>>2];r3=HEAP32[r1+144+(r29<<2)>>2];while(1){r29=r14+4|0;if((r3|0)<=0){break}r56=HEAP32[HEAP32[r26>>2]+(HEAP32[r14>>2]<<2)>>2];if((HEAP32[r56+72>>2]|0)==(r28|0)){HEAP32[r56+4>>2]=-536870912;r40=r56+77|0;r27=1;while(1){if((r27|0)>=(HEAPU8[r40]|0)){break}HEAP32[r56+4+(r27<<2)>>2]=-536870912;r27=r27+1|0}HEAP32[r56+44>>2]=-536870912;HEAP32[r56+64>>2]=-536870912}r14=r29;r3=r3-1|0}r3=HEAP32[r8>>2]&1^1;r8=r1+220|0;r14=HEAP32[HEAP32[r25>>2]+(r3<<2)>>2];r25=0;r28=0;while(1){r26=HEAP32[HEAP32[r8>>2]+(r28<<2)>>2];if((r26|0)<=-1){break}if((HEAP32[HEAP32[r15>>2]+(((r26|0)/32&-1)<<2)>>2]&1<<(r26&31)|0)==0){r57=r14;r58=r25}else{HEAP32[r14>>2]=r26;r57=r14+4|0;r58=r25+1|0}r14=r57;r25=r58;r28=r28+1|0}r28=HEAP32[r1+44>>2];r58=r14;r14=r25;while(1){if((r28|0)>=(HEAP32[r12>>2]|0)){break}if((HEAP32[HEAP32[r15>>2]+(((r28|0)/32&-1)<<2)>>2]&1<<(r28&31)|0)==0){r59=r58;r60=r14}else{HEAP32[r58>>2]=r28;r59=r58+4|0;r60=r14+1|0}r28=r28+1|0;r58=r59;r14=r60}if((HEAP8[r16]|0)==0){r16=r1+204|0;HEAP32[r16>>2]=HEAP32[r16>>2]+1}HEAP32[r1+144+(r3<<2)>>2]=r14;r18=1;STACKTOP=r5;return r18}}function _ngram_fwdflat_finish(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;r2=0;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+152|0;r5=r4;r6=r4+8;r7=r4+16;r8=r1+220|0;r9=r1+16|0;r10=r1+104|0;r11=r1+72|0;r12=r1+68|0;r13=0;while(1){r14=HEAP32[HEAP32[r8>>2]+(r13<<2)>>2];if((r14|0)<=-1){break}if((HEAP32[HEAP32[HEAP32[r9>>2]+8>>2]+(r14*20&-1)+8>>2]|0)!=1){r15=HEAP32[HEAP32[r10>>2]+(r14<<2)>>2];if((r15|0)==0){r2=5;break}r16=HEAP32[r15+80>>2];r17=HEAP32[r11>>2];r18=r17|0;HEAP32[r15>>2]=HEAP32[r18>>2];HEAP32[r18>>2]=r15;r15=r17+28|0;HEAP32[r15>>2]=HEAP32[r15>>2]+1;HEAP32[HEAP32[r10>>2]+(r14<<2)>>2]=r16;r16=HEAP32[HEAP32[r10>>2]+(r14<<2)>>2];while(1){if((r16|0)==0){break}r15=HEAP32[r16+80>>2];r17=HEAP32[r12>>2];r18=r17|0;HEAP32[r16>>2]=HEAP32[r18>>2];HEAP32[r18>>2]=r16;r18=r17+28|0;HEAP32[r18>>2]=HEAP32[r18>>2]+1;r16=r15}HEAP32[HEAP32[r10>>2]+(r14<<2)>>2]=0}r13=r13+1|0}if(r2==5){___assert_fail(42144,49384,903,51152)}L15:do{if((HEAP8[r1+64|0]|0)!=0){r2=r1+204|0;r13=r1+216|0;r10=r1+76|0;r12=0;while(1){if((r12|0)>=(HEAP32[r2>>2]|0)){break L15}r11=HEAP32[HEAP32[r13>>2]+(r12<<2)>>2];while(1){if((r11|0)==0){break}r9=HEAP32[r11+48>>2];r8=HEAP32[r10>>2];r16=r8|0;HEAP32[r11>>2]=HEAP32[r16>>2];HEAP32[r16>>2]=r11;r16=r8+28|0;HEAP32[r16>>2]=HEAP32[r16>>2]+1;r11=r9}r12=r12+1|0}}}while(0);_memset(HEAP32[r1+108>>2],0,((HEAP32[r1+40>>2]+31|0)/32&-1)<<2)|0;r12=HEAP32[HEAP32[r1+12>>2]+92>>2];_ngram_search_mark_bptable(r1,r12);_getrusage(0,r7);r10=(HEAP32[r7>>2]|0)+(HEAP32[r7+4>>2]|0)*1e-6+((HEAP32[r7+8>>2]|0)+(HEAP32[r7+12>>2]|0)*1e-6)-HEAPF64[r1+408>>3];_gettimeofday(r6,0);r7=(HEAP32[r6>>2]|0)+(HEAP32[r6+4>>2]|0)*1e-6-HEAPF64[r1+416>>3];r6=r1+376|0;HEAPF64[r6>>3]=HEAPF64[r6>>3]+r10;r6=r1+384|0;HEAPF64[r6>>3]=HEAPF64[r6>>3]+r7;r6=r1+392|0;HEAPF64[r6>>3]=HEAPF64[r6>>3]+r10;r10=r1+400|0;HEAPF64[r10>>3]=HEAPF64[r10>>3]+r7;if((r12|0)<=0){STACKTOP=r4;return}r7=r12+1|0;r10=r7|0;do{if((_hash_table_lookup(HEAP32[HEAP32[r1+8>>2]+4>>2],47176,r5)|0)<0){_err_msg(4,45384,945,22936,(r3=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r3>>2]=47176,r3));STACKTOP=r3;r19=0}else{r6=HEAP32[r5>>2];if((r6|0)==0){r19=0;break}r19=HEAP32[r6>>2]|0}}while(0);r5=r10/r19;r19=HEAP32[r1+180>>2];r10=r12>>1;_err_msg(1,49384,938,8328,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r19,HEAP32[r3+8>>2]=(r19+r10|0)/(r7|0)&-1,r3));STACKTOP=r3;r19=HEAP32[r1+304>>2];_err_msg(1,49384,940,6856,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r19,HEAP32[r3+8>>2]=(r19+r10|0)/(r7|0)&-1,r3));STACKTOP=r3;r10=HEAP32[r1+292>>2];_err_msg(1,49384,942,49656,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r10,HEAP32[r3+8>>2]=(r10|0)/(r7|0)&-1,r3));STACKTOP=r3;r10=HEAP32[r1+296>>2];_err_msg(1,49384,944,48104,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r10,HEAP32[r3+8>>2]=(r10|0)/(r7|0)&-1,r3));STACKTOP=r3;r10=HEAP32[r1+300>>2];_err_msg(1,49384,947,46528,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r3>>2]=r10,HEAP32[r3+8>>2]=(r10|0)/(r7|0)&-1,r3));STACKTOP=r3;r7=HEAPF64[r1+376>>3];_err_msg(1,49384,950,44736,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r7,HEAPF64[r3+8>>3]=r7/r5,r3));STACKTOP=r3;r7=HEAPF64[r1+384>>3];_err_msg(1,49384,953,43232,(r3=STACKTOP,STACKTOP=STACKTOP+16|0,HEAPF64[r3>>3]=r7,HEAPF64[r3+8>>3]=r7/r5,r3));STACKTOP=r3;STACKTOP=r4;return}function _phone_loop_search_reinit(r1,r2,r3){var r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r4=0;r5=0;r6=STACKTOP;STACKTOP=STACKTOP+24|0;r7=r6;r8=r6+8;r9=r6+16;r10=HEAP32[r1+8>>2];r11=HEAP32[r1+12>>2];_ps_search_base_reinit(r1,r2,r3);r3=r1+56|0;r2=r3;r12=HEAP32[r2>>2];if((r12|0)!=0){_free(HEAP32[r12+16>>2]);_free(r12)}r12=r11+20|0;r13=HEAP32[r12>>2];r14=_hmm_context_init(HEAP32[r13+12>>2],HEAP32[HEAP32[r11+24>>2]>>2],HEAP32[r13+60>>2]);HEAP32[r3>>2]=r14;if((r14|0)==0){r15=-1;STACKTOP=r6;return r15}r14=r1+64|0;r3=HEAP32[r14>>2];r13=r1+62|0;if((r3|0)==0){r16=r13}else{r17=HEAP16[r13>>1]|0;r18=0;while(1){if((r18|0)>=(r17|0)){break}r18=r18+1|0}_free(r3);r16=r13}r13=HEAP32[HEAP32[r12>>2]+4>>2]&65535;HEAP16[r16>>1]=r13;r3=___ckd_calloc__(r13<<16>>16,84,48640,94);HEAP32[r14>>2]=r3;r3=0;while(1){if((r3|0)>=(HEAP16[r16>>1]|0)){break}HEAP16[HEAP32[r14>>2]+(r3*84&-1)+80>>1]=r3;r13=HEAP32[HEAP32[r12>>2]+56>>2];r18=r13+(r3*12&-1)|0;r17=r13+(r3*12&-1)+4|0;_hmm_init(HEAP32[r2>>2],HEAP32[r14>>2]+(r3*84&-1)|0,0,HEAPU8[r18]|HEAPU8[r18+1|0]<<8|HEAPU8[r18+2|0]<<16|HEAPU8[r18+3|0]<<24|0,HEAPU8[r17]|HEAPU8[r17+1|0]<<8|HEAPU8[r17+2|0]<<16|HEAPU8[r17+3|0]<<24|0);r3=r3+1|0}r3=r11+4|0;r11=HEAP32[r3>>2];r14=r10+4|0;do{if((_hash_table_lookup(HEAP32[r14>>2],48136,r9)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=48136,r5));STACKTOP=r5;r4=16}else{r10=HEAP32[r9>>2];if((r10|0)==0){r4=16;break}r2=HEAPF64[r10>>3];if(r2<=0){r4=16;break}r10=Math_log(r2);r19=(r10*HEAPF64[r11+48>>3]&-1)>>HEAP8[r11+9|0]}}while(0);if(r4==16){r19=HEAP32[r11+64>>2]}r11=r1+72|0;r9=r11;HEAP32[r11>>2]=r19;r19=HEAP32[r3>>2];do{if((_hash_table_lookup(HEAP32[r14>>2],34992,r8)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=34992,r5));STACKTOP=r5;r4=22}else{r11=HEAP32[r8>>2];if((r11|0)==0){r4=22;break}r10=HEAPF64[r11>>3];if(r10<=0){r4=22;break}r11=Math_log(r10);r20=(r11*HEAPF64[r19+48>>3]&-1)>>HEAP8[r19+9|0]}}while(0);if(r4==22){r20=HEAP32[r19+64>>2]}r19=r1+76|0;r8=r19;HEAP32[r19>>2]=r20;r20=HEAP32[r3>>2];do{if((_hash_table_lookup(HEAP32[r14>>2],24800,r7)|0)<0){_err_msg(4,45384,945,22936,(r5=STACKTOP,STACKTOP=STACKTOP+8|0,HEAP32[r5>>2]=24800,r5));STACKTOP=r5;r4=28}else{r3=HEAP32[r7>>2];if((r3|0)==0){r4=28;break}r19=HEAPF64[r3>>3];if(r19<=0){r4=28;break}r3=Math_log(r19);r21=(r3*HEAPF64[r20+48>>3]&-1)>>HEAP8[r20+9|0]}}while(0);if(r4==28){r21=HEAP32[r20+64>>2]}HEAP32[r1+80>>2]=r21;r1=HEAP32[r8>>2];_err_msg(1,48640,106,18704,(r5=STACKTOP,STACKTOP=STACKTOP+24|0,HEAP32[r5>>2]=HEAP32[r9>>2],HEAP32[r5+8>>2]=r1,HEAP32[r5+16>>2]=r21,r5));STACKTOP=r5;r15=0;STACKTOP=r6;return r15}function _phone_loop_search_start(r1){var r2,r3,r4,r5,r6,r7,r8;r2=r1+62|0;r3=r1+64|0;r4=0;while(1){if((r4|0)>=(HEAP16[r2>>1]|0)){break}r5=HEAP32[r3>>2];HEAP32[r5+(r4*84&-1)+4>>2]=-536870912;r6=r5+(r4*84&-1)+24|0;HEAP32[r6>>2]=-1;r7=r5+(r4*84&-1)+77|0;r8=1;while(1){if((r8|0)>=(HEAPU8[r7]|0)){break}HEAP32[r5+(r4*84&-1)+4+(r8<<2)>>2]=-536870912;HEAP32[r5+(r4*84&-1)+24+(r8<<2)>>2]=-1;r8=r8+1|0}HEAP32[r5+(r4*84&-1)+44>>2]=-536870912;HEAP32[r5+(r4*84&-1)+48>>2]=-1;HEAP32[r5+(r4*84&-1)+64>>2]=-536870912;HEAP32[r5+(r4*84&-1)+4>>2]=0;HEAP32[r6>>2]=-1;HEAP32[r5+(r4*84&-1)+72>>2]=0;r4=r4+1|0}r4=r1+84|0;r3=r4;while(1){r2=HEAP32[r3>>2];if((r2|0)==0){break}_free(HEAP32[r2>>2]);r3=r2+8|0}r3=HEAP32[r4>>2];while(1){if((r3|0)==0){break}r2=HEAP32[r3+8>>2];_free(r3);r3=r2}HEAP32[r4>>2]=0;HEAP32[r1+68>>2]=0;return 0}function _phone_loop_search_step(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;r3=0;r4=0;r5=STACKTOP;STACKTOP=STACKTOP+8|0;r6=r5;HEAP32[r6>>2]=r2;r2=r1;r7=HEAP32[r1+12>>2];L1:do{if((HEAP8[r7+89|0]|0)==0){r8=r2+62|0;r9=r1+64|0;r10=0;while(1){if((r10|0)>=(HEAP16[r8>>1]|0)){break L1}_acmod_activate_hmm(r7,HEAP32[r9>>2]+(r10*84&-1)|0);r10=r10+1|0}}}while(0);r10=_acmod_score(r7,r6);r7=r1+68|0;r9=r7;r8=HEAP32[r9>>2];r11=r1+72|0;L7:do{if((r8+(HEAP32[r11>>2]<<1)|0)<-536870912){_err_msg(1,48640,282,8272,(r4=STACKTOP,STACKTOP=STACKTOP+16|0,HEAP32[r4>>2]=HEAP32[r6>>2],HEAP32[r4+8>>2]=r8,r4));STACKTOP=r4;r12=HEAP32[r6>>2];r13=HEAP32[r9>>2];r14=_malloc(8);if((r14|0)==0){_ckd_fail(29016,(r4=STACKTOP,STACKTOP=STACKTOP+32|0,HEAP32[r4>>2]=1,HEAP32[r4+8>>2]=8,HEAP32[r4+16>>2]=48640,HEAP32[r4+24>>2]=174,r4));STACKTOP=r4}if((HEAP32[r14-4>>2]&3|0)!=0){r15=r14;r16=r15|0;tempBigInt=0;HEAP8[r16]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r16+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r16+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r16+3|0]=tempBigInt;r16=r15+4|0;tempBigInt=0;HEAP8[r16]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r16+1|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r16+2|0]=tempBigInt;tempBigInt=tempBigInt>>8;HEAP8[r16+3|0]=tempBigInt}r16=r1+84|0;r15=_glist_add_ptr(HEAP32[r16>>2],r14);HEAP32[r16>>2]=r15;HEAP32[r14>>2]=r12;HEAP32[r14+4>>2]=r13;r14=r2+62|0;r12=r1+64|0;r15=0;while(1){if((r15|0)>=(HEAP16[r14>>1]|0)){r17=r14;r18=r12;break L7}r16=HEAP32[r12>>2];r19=r16+(r15*84&-1)+77|0;r20=0;while(1){if((r20|0)>=(HEAPU8[r19]|0)){break}r21=r16+(r15*84&-1)+4+(r20<<2)|0;r22=HEAP32[r21>>2];if((r22|0)>-536870912){HEAP32[r21>>2]=r22-r13}r20=r20+1|0}r20=r16+(r15*84&-1)+44|0;r19=HEAP32[r20>>2];if((r19|0)>-536870912){HEAP32[r20>>2]=r19-r13}r15=r15+1|0}}else{r17=r2+62|0;r18=r1+64|0}}while(0);r2=HEAP32[r6>>2];HEAP32[HEAP32[r1+56>>2]+8>>2]=r10;r10=0;r4=-536870912;while(1){r23=HEAP16[r17>>1];if((r10|0)>=(r23<<16>>16|0)){break}r8=HEAP32[r18>>2];if((HEAP32[r8+(r10*84&-1)+72>>2]|0)<(r2|0)){r24=r4}else{r15=_hmm_vit_eval(r8+(r10*84&-1)|0);r24=(r15|0)>(r4|0)?r15:r4}r10=r10+1|0;r4=r24}HEAP32[r7>>2]=r4;r7=HEAP32[r6>>2];r24=r4+HEAP32[r11>>2]|0;r11=r7+1|0;r4=0;r10=r23;while(1){if((r4|0)>=(r10<<16>>16|0)){break}r23=HEAP32[r18>>2];do{if((HEAP32[r23+(r4*84&-1)+72>>2]|0)>=(r7|0)){r2=r23+(r4*84&-1)+64|0;if((HEAP32[r2>>2]|0)>(r24|0)){HEAP32[r23+(r4*84&-1)+72>>2]=r11;break}HEAP32[r23+(r4*84&-1)+4>>2]=-536870912;r15=r23+(r4*84&-1)+77|0;r8=1;while(1){if((r8|0)>=(HEAPU8[r15]|0)){break}HEAP32[r23+(r4*84&-1)+4+(r8<<2)>>2]=-536870912;r8=r8+1|0}HEAP32[r23+(r4*84&-1)+44>>2]=-536870912;HEAP32[r2>>2]=-536870912}}while(0);r4=r4+1|0;r10=HEAP16[r17>>1]}r4=HEAP32[r6>>2];r6=HEAP32[r9>>2]+HEAP32[r1+76>>2]|0;r9=r4+1|0;r11=r1+80|0;r1=0;r24=r10;while(1){if((r1|0)>=(r24<<16>>16|0)){break}r10=HEAP32[r18>>2];L54:do{if((HEAP32[r10+(r1*84&-1)+72>>2]|0)==(r9|0)){r7=HEAP32[r10+(r1*84&-1)+44>>2]+HEAP32[r11>>2]|0;if((r7|0)<=(r6|0)){r25=r24;break}r23=r10+(r1*84&-1)+48|0;r8=0;r15=r24;while(1){if((r8|0)>=(r15<<16>>16|0)){r25=r15;break L54}r16=HEAP32[r18>>2];r13=r16+(r8*84&-1)+4|0;if((HEAP32[r16+(r8*84&-1)+72>>2]|0)<(r4|0)){r26=r13;r3=44}else{if((r7|0)>(HEAP32[r13>>2]|0)){r26=r13;r3=44}else{r27=r15}}if(r3==44){r3=0;r13=HEAP32[r23>>2];HEAP32[r26>>2]=r7;HEAP32[r16+(r8*84&-1)+24>>2]=r13;HEAP32[r16+(r8*84&-1)+72>>2]=r9;r27=HEAP16[r17>>1]}r8=r8+1|0;r15=r27}}else{r25=r24}}while(0);r1=r1+1|0;r24=r25}STACKTOP=r5;return 0}function _phone_loop_search_finish(r1){return 0}function _phone_loop_search_free(r1){var r2,r3,r4,r5;_dict_free(HEAP32[r1+16>>2]);_dict2pid_free(HEAP32[r1+20>>2]);_free(HEAP32[r1+24>>2]);_ps_lattice_free(HEAP32[r1+28>>2]);r2=HEAP16[r1+62>>1]|0;r3=0;while(1){if((r3|0)>=(r2|0)){break}r3=r3+1|0}r3=r1+84|0;r2=r3;while(1){r4=HEAP32[r2>>2];if((r4|0)==0){break}_free(HEAP32[r4>>2]);r2=r4+8|0}r2=HEAP32[r3>>2];while(1){if((r2|0)==0){break}r4=HEAP32[r2+8>>2];_free(r2);r2=r4}HEAP32[r3>>2]=0;_free(HEAP32[r1+64>>2]);r3=HEAP32[r1+56>>2];if((r3|0)==0){r5=r1;_free(r5);return}_free(HEAP32[r3+16>>2]);_free(r3);r5=r1;_free(r5);return}function _phone_loop_search_hyp(r1,r2,r3){r3=0;r2=STACKTOP;_err_msg(3,48640,308,12480,(r3=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r3>>2]=0,r3));STACKTOP=r3;STACKTOP=r2;return 0}function _phone_loop_search_prob(r1){var r2;r1=0;r2=STACKTOP;_err_msg(3,48640,316,10016,(r1=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r1>>2]=0,r1));STACKTOP=r1;STACKTOP=r2;return 0}function _phone_loop_search_seg_iter(r1,r2){r2=0;r1=STACKTOP;_err_msg(3,48640,323,12480,(r2=STACKTOP,STACKTOP=STACKTOP+1|0,STACKTOP=STACKTOP+7&-8,HEAP32[r2>>2]=0,r2));STACKTOP=r2;STACKTOP=r1;return 0}



function ___floatscan(r1,r2){var r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,r105,r106,r107,r108,r109,r110,r111,r112,r113,r114,r115,r116,r117,r118,r119,r120,r121,r122,r123,r124,r125,r126,r127,r128,r129,r130,r131,r132,r133,r134,r135,r136,r137,r138,r139,r140,r141,r142,r143,r144,r145,r146,r147,r148,r149,r150,r151,r152,r153,r154,r155,r156,r157,r158,r159,r160,r161,r162,r163,r164,r165,r166,r167,r168,r169,r170,r171,r172,r173,r174,r175,r176,r177,r178,r179,r180,r181,r182,r183,r184,r185,r186,r187,r188,r189,r190,r191,r192,r193,r194,r195,r196,r197,r198,r199,r200;r3=0;r4=STACKTOP;STACKTOP=STACKTOP+512|0;r5=r4;if((r2|0)==2){r6=-1074;r7=53}else if((r2|0)==0){r6=-149;r7=24}else if((r2|0)==1){r6=-1074;r7=53}else{r8=0;STACKTOP=r4;return r8}r2=r1+4|0;r9=r1+100|0;while(1){r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r11=HEAPU8[r10]}else{r11=___shgetc(r1)}if((_isspace(r11)|0)==0){break}}do{if((r11|0)==45|(r11|0)==43){r10=1-(((r11|0)==45)<<1)|0;r12=HEAP32[r2>>2];if(r12>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r12+1;r13=HEAPU8[r12];r14=r10;break}else{r13=___shgetc(r1);r14=r10;break}}else{r13=r11;r14=1}}while(0);r11=0;r10=r13;while(1){if((r10|32|0)!=(HEAP8[r11+12536|0]|0)){r15=r11;r16=r10;break}do{if(r11>>>0<7){r13=HEAP32[r2>>2];if(r13>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r13+1;r17=HEAPU8[r13];break}else{r17=___shgetc(r1);break}}else{r17=r10}}while(0);r13=r11+1|0;if(r13>>>0<8){r11=r13;r10=r17}else{r15=r13;r16=r17;break}}do{if((r15|0)==3){r3=23}else if((r15|0)!=8){if(r15>>>0>=4){if((r15|0)==8){break}else{r3=23;break}}L34:do{if((r15|0)==0){r17=0;r10=r16;while(1){if((r10|32|0)!=(HEAP8[r17+39504|0]|0)){r18=r10;r19=r17;break L34}do{if(r17>>>0<2){r11=HEAP32[r2>>2];if(r11>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r11+1;r20=HEAPU8[r11];break}else{r20=___shgetc(r1);break}}else{r20=r10}}while(0);r11=r17+1|0;if(r11>>>0<3){r17=r11;r10=r20}else{r18=r20;r19=r11;break}}}else{r18=r16;r19=r15}}while(0);if((r19|0)==3){r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r21=HEAPU8[r10]}else{r21=___shgetc(r1)}if((r21|0)==40){r22=1}else{if((HEAP32[r9>>2]|0)==0){r8=NaN;STACKTOP=r4;return r8}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r8=NaN;STACKTOP=r4;return r8}while(1){r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r23=HEAPU8[r10]}else{r23=___shgetc(r1)}if(!((r23-48|0)>>>0<10|(r23-65|0)>>>0<26)){if(!((r23-97|0)>>>0<26|(r23|0)==95)){break}}r22=r22+1|0}if((r23|0)==41){r8=NaN;STACKTOP=r4;return r8}if((HEAP32[r9>>2]|0)==0){r8=NaN;STACKTOP=r4;return r8}r10=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r10;if((r22|0)==0){r8=NaN;STACKTOP=r4;return r8}else{r24=r22;r25=r10}while(1){r10=r24-1|0;r26=r25-1|0;if((r10|0)==0){break}else{r24=r10;r25=r26}}HEAP32[r2>>2]=r26;r8=NaN;STACKTOP=r4;return r8}else if((r19|0)==0){do{if((r18|0)==48){r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r27=HEAPU8[r10]}else{r27=___shgetc(r1)}if((r27|32|0)!=120){if((HEAP32[r9>>2]|0)==0){r28=48;break}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r28=48;break}r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r29=HEAPU8[r10];r30=0}else{r29=___shgetc(r1);r30=0}while(1){if((r29|0)==46){r3=67;break}else if((r29|0)!=48){r31=r29;r32=0;r33=0;r34=0;r35=0;r36=r30;r37=0;r38=0;r39=1;r40=0;r41=0;break}r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r29=HEAPU8[r10];r30=1;continue}else{r29=___shgetc(r1);r30=1;continue}}L104:do{if(r3==67){r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r42=HEAPU8[r10]}else{r42=___shgetc(r1)}if((r42|0)==48){r43=-1;r44=-1}else{r31=r42;r32=0;r33=0;r34=0;r35=0;r36=r30;r37=1;r38=0;r39=1;r40=0;r41=0;break}while(1){r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r45=HEAPU8[r10]}else{r45=___shgetc(r1)}if((r45|0)!=48){r31=r45;r32=0;r33=0;r34=r43;r35=r44;r36=1;r37=1;r38=0;r39=1;r40=0;r41=0;break L104}r10=_i64Add(r44,r43,-1,-1);r43=tempRet0;r44=r10}}}while(0);L117:while(1){r10=r31-48|0;do{if(r10>>>0<10){r46=r10;r3=81}else{r17=r31|32;r11=(r31|0)==46;if(!((r17-97|0)>>>0<6|r11)){r47=r31;break L117}if(r11){if((r37|0)==0){r48=r32;r49=r33;r50=r32;r51=r33;r52=r36;r53=1;r54=r38;r55=r39;r56=r40;r57=r41;break}else{r47=46;break L117}}else{r46=(r31|0)>57?r17-87|0:r10;r3=81;break}}}while(0);if(r3==81){r3=0;r10=0;do{if((r32|0)<(r10|0)|(r32|0)==(r10|0)&r33>>>0<8>>>0){r58=r38;r59=r39;r60=r40;r61=r46+(r41<<4)|0}else{r17=0;if((r32|0)<(r17|0)|(r32|0)==(r17|0)&r33>>>0<14>>>0){r17=r39*.0625;r58=r38;r59=r17;r60=r40+r17*(r46|0);r61=r41;break}if(!((r46|0)!=0&(r38|0)==0)){r58=r38;r59=r39;r60=r40;r61=r41;break}r58=1;r59=r39;r60=r40+r39*.5;r61=r41}}while(0);r10=_i64Add(r33,r32,1,0);r48=tempRet0;r49=r10;r50=r34;r51=r35;r52=1;r53=r37;r54=r58;r55=r59;r56=r60;r57=r61}r10=HEAP32[r2>>2];if(r10>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r10+1;r31=HEAPU8[r10];r32=r48;r33=r49;r34=r50;r35=r51;r36=r52;r37=r53;r38=r54;r39=r55;r40=r56;r41=r57;continue}else{r31=___shgetc(r1);r32=r48;r33=r49;r34=r50;r35=r51;r36=r52;r37=r53;r38=r54;r39=r55;r40=r56;r41=r57;continue}}if((r36|0)==0){do{if((HEAP32[r9>>2]|0)!=0){r10=HEAP32[r2>>2];HEAP32[r2>>2]=r10-2;if((r37|0)==0){break}HEAP32[r2>>2]=r10-3}}while(0);r8=(r14|0)*0;STACKTOP=r4;return r8}r10=(r37|0)==0;r17=r10?r33:r35;r11=r10?r32:r34;r10=0;if((r32|0)<(r10|0)|(r32|0)==(r10|0)&r33>>>0<8>>>0){r10=r41;r13=r32;r12=r33;while(1){r62=r10<<4;r63=_i64Add(r12,r13,1,0);r64=tempRet0;r65=0;if((r64|0)<(r65|0)|(r64|0)==(r65|0)&r63>>>0<8>>>0){r10=r62;r13=r64;r12=r63}else{r66=r62;break}}}else{r66=r41}do{if((r47|32|0)==112){r12=_scanexp(r1);r13=tempRet0;if(!((r12|0)==0&(r13|0)==(-2147483648|0))){r67=r13;r68=r12;break}if((HEAP32[r9>>2]|0)==0){r67=0;r68=0;break}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r67=0;r68=0}else{if((HEAP32[r9>>2]|0)==0){r67=0;r68=0;break}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r67=0;r68=0}}while(0);r12=_i64Add(r17<<2|0>>>30,r11<<2|r17>>>30,-32,-1);r13=_i64Add(r12,tempRet0,r68,r67);r12=tempRet0;if((r66|0)==0){r8=(r14|0)*0;STACKTOP=r4;return r8}r10=0;if((r12|0)>(r10|0)|(r12|0)==(r10|0)&r13>>>0>(-r6|0)>>>0){r10=___errno_location();HEAP32[r10>>2]=34;r8=(r14|0)*1.7976931348623157e+308*1.7976931348623157e+308;STACKTOP=r4;return r8}r10=r6-106|0;r62=(r10|0)<0|0?-1:0;if((r12|0)<(r62|0)|(r12|0)==(r62|0)&r13>>>0<r10>>>0){r10=___errno_location();HEAP32[r10>>2]=34;r8=(r14|0)*2.2250738585072014e-308*2.2250738585072014e-308;STACKTOP=r4;return r8}if((r66|0)>-1){r10=r66;r62=r40;r63=r12;r64=r13;while(1){r65=r10<<1;if(r62<.5){r69=r62;r70=r65}else{r69=r62-1;r70=r65|1}r65=r62+r69;r71=_i64Add(r64,r63,-1,-1);r72=tempRet0;if((r70|0)>-1){r10=r70;r62=r65;r63=r72;r64=r71}else{r73=r70;r74=r65;r75=r72;r76=r71;break}}}else{r73=r66;r74=r40;r75=r12;r76=r13}r64=0;r63=_i64Subtract(32,0,r6,(r6|0)<0|0?-1:0);r62=_i64Add(r76,r75,r63,tempRet0);r63=tempRet0;if((r64|0)>(r63|0)|(r64|0)==(r63|0)&r7>>>0>r62>>>0){r63=r62;r77=(r63|0)<0?0:r63}else{r77=r7}do{if((r77|0)<53){r63=84-r77|0;do{if((r63|0)>1023){r62=r63-1023|0;if((r62|0)<=1023){r78=8.98846567431158e+307;r79=r62;break}r62=r63-2046|0;r78=Infinity;r79=(r62|0)>1023?1023:r62}else{if((r63|0)>=-1022){r78=1;r79=r63;break}r62=r63+1022|0;if((r62|0)>=-1022){r78=2.2250738585072014e-308;r79=r62;break}r62=r63+2044|0;r78=0;r79=(r62|0)<-1022?-1022:r62}}while(0);r63=r14|0;r62=_copysign(r78*(HEAP32[tempDoublePtr>>2]=0<<20|0>>>12,HEAP32[tempDoublePtr+4>>2]=r79+1023<<20|0>>>12,HEAPF64[tempDoublePtr>>3]),r63);if(!((r77|0)<32&r74!=0)){r80=r74;r81=r73;r82=r62;r83=r63;break}r64=r73&1;r80=(r64|0)==0?0:r74;r81=(r64^1)+r73|0;r82=r62;r83=r63}else{r80=r74;r81=r73;r82=0;r83=r14|0}}while(0);r13=r83*r80+(r82+r83*(r81>>>0))-r82;if(r13==0){r12=___errno_location();HEAP32[r12>>2]=34}r12=r76;do{if((r12|0)>1023){r63=r13*8.98846567431158e+307;r62=r12-1023|0;if((r62|0)<=1023){r84=r63;r85=r62;break}r62=r12-2046|0;r84=r63*8.98846567431158e+307;r85=(r62|0)>1023?1023:r62}else{if((r12|0)>=-1022){r84=r13;r85=r12;break}r62=r13*2.2250738585072014e-308;r63=r12+1022|0;if((r63|0)>=-1022){r84=r62;r85=r63;break}r63=r12+2044|0;r84=r62*2.2250738585072014e-308;r85=(r63|0)<-1022?-1022:r63}}while(0);r8=r84*(HEAP32[tempDoublePtr>>2]=0<<20|0>>>12,HEAP32[tempDoublePtr+4>>2]=r85+1023<<20|0>>>12,HEAPF64[tempDoublePtr>>3]);STACKTOP=r4;return r8}else{r28=r18}}while(0);r12=r6+r7|0;r13=-r12|0;r63=r28;r62=0;while(1){if((r63|0)==46){r3=142;break}else if((r63|0)!=48){r86=r63;r87=0;r88=r62;r89=0;r90=0;break}r64=HEAP32[r2>>2];if(r64>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r64+1;r63=HEAPU8[r64];r62=1;continue}else{r63=___shgetc(r1);r62=1;continue}}L211:do{if(r3==142){r63=HEAP32[r2>>2];if(r63>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r63+1;r91=HEAPU8[r63]}else{r91=___shgetc(r1)}if((r91|0)==48){r92=-1;r93=-1}else{r86=r91;r87=1;r88=r62;r89=0;r90=0;break}while(1){r63=HEAP32[r2>>2];if(r63>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r63+1;r94=HEAPU8[r63]}else{r94=___shgetc(r1)}if((r94|0)!=48){r86=r94;r87=1;r88=1;r89=r92;r90=r93;break L211}r63=_i64Add(r93,r92,-1,-1);r92=tempRet0;r93=r63}}}while(0);r62=r5|0;HEAP32[r62>>2]=0;r63=r86-48|0;r64=(r86|0)==46;L225:do{if(r63>>>0<10|r64){r10=r5+496|0;r17=r89;r11=r90;r71=0;r72=0;r65=0;r95=r88;r96=r87;r97=0;r98=0;r99=r86;r100=r63;r101=r64;while(1){do{if(r101){if((r96|0)==0){r102=r98;r103=r97;r104=1;r105=r95;r106=r65;r107=r71;r108=r72;r109=r71;r110=r72}else{r111=r17;r112=r11;r113=r71;r114=r72;r115=r65;r116=r95;r117=r97;r118=r98;r119=r99;break L225}}else{r120=_i64Add(r72,r71,1,0);r121=tempRet0;r122=(r99|0)!=48;if((r97|0)>=125){if(!r122){r102=r98;r103=r97;r104=r96;r105=r95;r106=r65;r107=r121;r108=r120;r109=r17;r110=r11;break}HEAP32[r10>>2]=HEAP32[r10>>2]|1;r102=r98;r103=r97;r104=r96;r105=r95;r106=r65;r107=r121;r108=r120;r109=r17;r110=r11;break}r123=r5+(r97<<2)|0;if((r98|0)==0){r124=r100}else{r124=r99-48+(HEAP32[r123>>2]*10&-1)|0}HEAP32[r123>>2]=r124;r123=r98+1|0;r125=(r123|0)==9;r102=r125?0:r123;r103=(r125&1)+r97|0;r104=r96;r105=1;r106=r122?r120:r65;r107=r121;r108=r120;r109=r17;r110=r11}}while(0);r120=HEAP32[r2>>2];if(r120>>>0<HEAP32[r9>>2]>>>0){HEAP32[r2>>2]=r120+1;r126=HEAPU8[r120]}else{r126=___shgetc(r1)}r120=r126-48|0;r121=(r126|0)==46;if(r120>>>0<10|r121){r17=r109;r11=r110;r71=r107;r72=r108;r65=r106;r95=r105;r96=r104;r97=r103;r98=r102;r99=r126;r100=r120;r101=r121}else{r127=r109;r128=r110;r129=r107;r130=r108;r131=r106;r132=r105;r133=r104;r134=r103;r135=r102;r136=r126;r3=165;break}}}else{r127=r89;r128=r90;r129=0;r130=0;r131=0;r132=r88;r133=r87;r134=0;r135=0;r136=r86;r3=165}}while(0);if(r3==165){r64=(r133|0)==0;r111=r64?r129:r127;r112=r64?r130:r128;r113=r129;r114=r130;r115=r131;r116=r132;r117=r134;r118=r135;r119=r136}r64=(r116|0)!=0;do{if(r64){if((r119|32|0)!=101){r3=172;break}r63=_scanexp(r1);r101=tempRet0;do{if((r63|0)==0&(r101|0)==(-2147483648|0)){if((HEAP32[r9>>2]|0)==0){r137=0;r138=0;break}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r137=0;r138=0}else{r137=r101;r138=r63}}while(0);r63=_i64Add(r138,r137,r112,r111);r139=tempRet0;r140=r63}else{r3=172}}while(0);do{if(r3==172){if((r119|0)<=-1){r139=r111;r140=r112;break}if((HEAP32[r9>>2]|0)==0){r139=r111;r140=r112;break}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r139=r111;r140=r112}}while(0);if(!r64){r63=___errno_location();HEAP32[r63>>2]=22;HEAP32[r1+104>>2]=0;r63=HEAP32[r1+8>>2];HEAP32[r1+108>>2]=r63-HEAP32[r2>>2];HEAP32[r9>>2]=r63;r8=0;STACKTOP=r4;return r8}r63=HEAP32[r62>>2];if((r63|0)==0){r8=(r14|0)*0;STACKTOP=r4;return r8}r101=0;do{if((r140|0)==(r114|0)&(r139|0)==(r113|0)&((r113|0)<(r101|0)|(r113|0)==(r101|0)&r114>>>0<10>>>0)){if(r7>>>0<=30){if((r63>>>(r7>>>0)|0)!=0){break}}r8=(r14|0)*(r63>>>0);STACKTOP=r4;return r8}}while(0);r63=(r6|0)/-2&-1;r101=(r63|0)<0|0?-1:0;if((r139|0)>(r101|0)|(r139|0)==(r101|0)&r140>>>0>r63>>>0){r63=___errno_location();HEAP32[r63>>2]=34;r8=(r14|0)*1.7976931348623157e+308*1.7976931348623157e+308;STACKTOP=r4;return r8}r63=r6-106|0;r101=(r63|0)<0|0?-1:0;if((r139|0)<(r101|0)|(r139|0)==(r101|0)&r140>>>0<r63>>>0){r63=___errno_location();HEAP32[r63>>2]=34;r8=(r14|0)*2.2250738585072014e-308*2.2250738585072014e-308;STACKTOP=r4;return r8}if((r118|0)==0){r141=r117}else{if((r118|0)<9){r63=r5+(r117<<2)|0;r101=r118;r64=HEAP32[r63>>2];while(1){r142=r64*10&-1;r100=r101+1|0;if((r100|0)<9){r101=r100;r64=r142}else{break}}HEAP32[r63>>2]=r142}r141=r117+1|0}r64=r140;do{if((r115|0)<9){if(!((r115|0)<=(r64|0)&(r64|0)<18)){break}if((r64|0)==9){r8=(r14|0)*(HEAP32[r62>>2]>>>0);STACKTOP=r4;return r8}if((r64|0)<9){r8=(r14|0)*(HEAP32[r62>>2]>>>0)/(HEAP32[5736+(8-r64<<2)>>2]|0);STACKTOP=r4;return r8}r101=r7+27+(r64*-3&-1)|0;r100=HEAP32[r62>>2];if((r101|0)<=30){if((r100>>>(r101>>>0)|0)!=0){break}}r8=(r14|0)*(r100>>>0)*(HEAP32[5736+(r64-10<<2)>>2]|0);STACKTOP=r4;return r8}}while(0);r62=(r64|0)%9&-1;if((r62|0)==0){r143=0;r144=r141;r145=0;r146=r64}else{r63=(r64|0)>-1?r62:r62+9|0;r62=HEAP32[5736+(8-r63<<2)>>2];do{if((r141|0)==0){r147=0;r148=0;r149=r64}else{r100=1e9/(r62|0)&-1;r101=r64;r99=0;r98=0;r97=0;while(1){r96=r5+(r98<<2)|0;r95=HEAP32[r96>>2];r65=((r95>>>0)/(r62>>>0)&-1)+r97|0;HEAP32[r96>>2]=r65;r150=Math_imul((r95>>>0)%(r62>>>0)&-1,r100)|0;r95=r98+1|0;if((r98|0)==(r99|0)&(r65|0)==0){r151=r95&127;r152=r101-9|0}else{r151=r99;r152=r101}if((r95|0)==(r141|0)){break}else{r101=r152;r99=r151;r98=r95;r97=r150}}if((r150|0)==0){r147=r141;r148=r151;r149=r152;break}HEAP32[r5+(r141<<2)>>2]=r150;r147=r141+1|0;r148=r151;r149=r152}}while(0);r143=r148;r144=r147;r145=0;r146=9-r63+r149|0}L319:while(1){r62=r5+(r143<<2)|0;if((r146|0)<18){r64=r144;r97=r145;while(1){r98=0;r99=r64+127|0;r101=r64;while(1){r100=r99&127;r95=r5+(r100<<2)|0;r65=HEAP32[r95>>2];r96=_i64Add(r65<<29|0>>>3,0<<29|r65>>>3,r98,0);r65=tempRet0;r72=0;if(r65>>>0>r72>>>0|r65>>>0==r72>>>0&r96>>>0>1e9>>>0){r72=___udivdi3(r96,r65,1e9,0);r71=___uremdi3(r96,r65,1e9,0);r153=r72;r154=r71}else{r153=0;r154=r96}HEAP32[r95>>2]=r154;r95=(r100|0)==(r143|0);if((r100|0)!=(r101+127&127|0)|r95){r155=r101}else{r155=(r154|0)==0?r100:r101}if(r95){break}else{r98=r153;r99=r100-1|0;r101=r155}}r101=r97-29|0;if((r153|0)==0){r64=r155;r97=r101}else{r156=r101;r157=r155;r158=r153;break}}}else{if((r146|0)==18){r159=r144;r160=r145}else{r161=r143;r162=r144;r163=r145;r164=r146;break}while(1){if(HEAP32[r62>>2]>>>0>=9007199){r161=r143;r162=r159;r163=r160;r164=18;break L319}r97=0;r64=r159+127|0;r101=r159;while(1){r99=r64&127;r98=r5+(r99<<2)|0;r100=HEAP32[r98>>2];r95=_i64Add(r100<<29|0>>>3,0<<29|r100>>>3,r97,0);r100=tempRet0;r96=0;if(r100>>>0>r96>>>0|r100>>>0==r96>>>0&r95>>>0>1e9>>>0){r96=___udivdi3(r95,r100,1e9,0);r71=___uremdi3(r95,r100,1e9,0);r165=r96;r166=r71}else{r165=0;r166=r95}HEAP32[r98>>2]=r166;r98=(r99|0)==(r143|0);if((r99|0)!=(r101+127&127|0)|r98){r167=r101}else{r167=(r166|0)==0?r99:r101}if(r98){break}else{r97=r165;r64=r99-1|0;r101=r167}}r101=r160-29|0;if((r165|0)==0){r159=r167;r160=r101}else{r156=r101;r157=r167;r158=r165;break}}}r62=r143+127&127;if((r62|0)==(r157|0)){r101=r157+127&127;r64=r5+((r157+126&127)<<2)|0;HEAP32[r64>>2]=HEAP32[r64>>2]|HEAP32[r5+(r101<<2)>>2];r168=r101}else{r168=r157}HEAP32[r5+(r62<<2)>>2]=r158;r143=r62;r144=r168;r145=r156;r146=r146+9|0}L350:while(1){r169=r162+1&127;r63=r5+((r162+127&127)<<2)|0;r62=r161;r101=r163;r64=r164;while(1){r97=(r64|0)==18;r99=(r64|0)>27?9:1;r170=r62;r171=r101;while(1){r98=0;while(1){r95=r98+r170&127;if((r95|0)==(r162|0)){r172=2;break}r71=HEAP32[r5+(r95<<2)>>2];r95=HEAP32[5728+(r98<<2)>>2];if(r71>>>0<r95>>>0){r172=2;break}r96=r98+1|0;if(r71>>>0>r95>>>0){r172=r98;break}if((r96|0)<2){r98=r96}else{r172=r96;break}}if((r172|0)==2&r97){break L350}r173=r99+r171|0;if((r170|0)==(r162|0)){r170=r162;r171=r173}else{break}}r97=(1<<r99)-1|0;r98=1e9>>>(r99>>>0);r96=r64;r95=r170;r71=r170;r100=0;while(1){r72=r5+(r71<<2)|0;r65=HEAP32[r72>>2];r11=(r65>>>(r99>>>0))+r100|0;HEAP32[r72>>2]=r11;r174=Math_imul(r65&r97,r98)|0;r65=(r71|0)==(r95|0)&(r11|0)==0;r11=r71+1&127;r175=r65?r96-9|0:r96;r176=r65?r11:r95;if((r11|0)==(r162|0)){break}else{r96=r175;r95=r176;r71=r11;r100=r174}}if((r174|0)==0){r62=r176;r101=r173;r64=r175;continue}if((r169|0)!=(r176|0)){break}HEAP32[r63>>2]=HEAP32[r63>>2]|1;r62=r176;r101=r173;r64=r175}HEAP32[r5+(r162<<2)>>2]=r174;r161=r176;r162=r169;r163=r173;r164=r175}r64=r170&127;if((r64|0)==(r162|0)){HEAP32[r5+(r169-1<<2)>>2]=0;r177=r169}else{r177=r162}r101=HEAP32[r5+(r64<<2)>>2]>>>0;r64=r170+1&127;if((r64|0)==(r177|0)){r62=r177+1&127;HEAP32[r5+(r62-1<<2)>>2]=0;r178=r62}else{r178=r177}r62=r14|0;r63=r62*(r101*1e9+(HEAP32[r5+(r64<<2)>>2]>>>0));r64=r171+53|0;r101=r64-r6|0;if((r101|0)<(r7|0)){r179=(r101|0)<0?0:r101;r180=1}else{r179=r7;r180=0}if((r179|0)<53){r100=105-r179|0;do{if((r100|0)>1023){r71=r100-1023|0;if((r71|0)<=1023){r181=8.98846567431158e+307;r182=r71;break}r71=r100-2046|0;r181=Infinity;r182=(r71|0)>1023?1023:r71}else{if((r100|0)>=-1022){r181=1;r182=r100;break}r71=r100+1022|0;if((r71|0)>=-1022){r181=2.2250738585072014e-308;r182=r71;break}r71=r100+2044|0;r181=0;r182=(r71|0)<-1022?-1022:r71}}while(0);r100=_copysign(r181*(HEAP32[tempDoublePtr>>2]=0<<20|0>>>12,HEAP32[tempDoublePtr+4>>2]=r182+1023<<20|0>>>12,HEAPF64[tempDoublePtr>>3]),r63);r71=53-r179|0;do{if((r71|0)>1023){r95=r71-1023|0;if((r95|0)<=1023){r183=8.98846567431158e+307;r184=r95;break}r95=r71-2046|0;r183=Infinity;r184=(r95|0)>1023?1023:r95}else{if((r71|0)>=-1022){r183=1;r184=r71;break}r95=r71+1022|0;if((r95|0)>=-1022){r183=2.2250738585072014e-308;r184=r95;break}r95=r71+2044|0;r183=0;r184=(r95|0)<-1022?-1022:r95}}while(0);r71=_fmod(r63,r183*(HEAP32[tempDoublePtr>>2]=0<<20|0>>>12,HEAP32[tempDoublePtr+4>>2]=r184+1023<<20|0>>>12,HEAPF64[tempDoublePtr>>3]));r185=r100;r186=r71;r187=r100+(r63-r71)}else{r185=0;r186=0;r187=r63}r71=r170+2&127;do{if((r71|0)==(r178|0)){r188=r186}else{r95=HEAP32[r5+(r71<<2)>>2];do{if(r95>>>0<5e8){if((r95|0)==0){if((r170+3&127|0)==(r178|0)){r189=r186;break}}r189=r62*.25+r186}else{if(r95>>>0>5e8){r189=r62*.75+r186;break}if((r170+3&127|0)==(r178|0)){r189=r62*.5+r186;break}else{r189=r62*.75+r186;break}}}while(0);if((53-r179|0)<=1){r188=r189;break}if(_fmod(r189,1)!=0){r188=r189;break}r188=r189+1}}while(0);r62=r187+r188-r185;do{if((r64&2147483647|0)>(-2-r12|0)){if(Math_abs(r62)<9007199254740992){r190=r62;r191=r180;r192=r171}else{r190=r62*.5;r191=(r180|0)!=0&(r179|0)==(r101|0)?0:r180;r192=r171+1|0}if((r192+50|0)<=(r13|0)){if(!((r191|0)!=0&r188!=0)){r193=r190;r194=r192;break}}r71=___errno_location();HEAP32[r71>>2]=34;r193=r190;r194=r192}else{r193=r62;r194=r171}}while(0);do{if((r194|0)>1023){r62=r193*8.98846567431158e+307;r13=r194-1023|0;if((r13|0)<=1023){r195=r62;r196=r13;break}r13=r194-2046|0;r195=r62*8.98846567431158e+307;r196=(r13|0)>1023?1023:r13}else{if((r194|0)>=-1022){r195=r193;r196=r194;break}r13=r193*2.2250738585072014e-308;r62=r194+1022|0;if((r62|0)>=-1022){r195=r13;r196=r62;break}r62=r194+2044|0;r195=r13*2.2250738585072014e-308;r196=(r62|0)<-1022?-1022:r62}}while(0);r8=r195*(HEAP32[tempDoublePtr>>2]=0<<20|0>>>12,HEAP32[tempDoublePtr+4>>2]=r196+1023<<20|0>>>12,HEAPF64[tempDoublePtr>>3]);STACKTOP=r4;return r8}else{r62=HEAP32[r2>>2];if((HEAP32[r9>>2]|0)==0){r197=r62}else{r13=r62-1|0;HEAP32[r2>>2]=r13;r197=r13}r13=___errno_location();HEAP32[r13>>2]=22;HEAP32[r1+104>>2]=0;r13=HEAP32[r1+8>>2];HEAP32[r1+108>>2]=r13-r197;HEAP32[r9>>2]=r13;r8=0;STACKTOP=r4;return r8}}}while(0);do{if(r3==23){if((HEAP32[r9>>2]|0)==0){break}r197=HEAP32[r2>>2]-1|0;HEAP32[r2>>2]=r197;if(r15>>>0<4){break}else{r198=r15;r199=r197}while(1){r200=r199-1|0;r197=r198-1|0;if(r197>>>0>3){r198=r197;r199=r200}else{break}}HEAP32[r2>>2]=r200}}while(0);r8=(r14|0)*Infinity;STACKTOP=r4;return r8}function _scanexp(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;r2=r1+4|0;r3=HEAP32[r2>>2];r4=r1+100|0;if(r3>>>0<HEAP32[r4>>2]>>>0){HEAP32[r2>>2]=r3+1;r5=HEAPU8[r3]}else{r5=___shgetc(r1)}do{if((r5|0)==45|(r5|0)==43){r3=(r5|0)==45|0;r6=HEAP32[r2>>2];if(r6>>>0<HEAP32[r4>>2]>>>0){HEAP32[r2>>2]=r6+1;r7=HEAPU8[r6]}else{r7=___shgetc(r1)}if((r7-48|0)>>>0<10){r8=r3;r9=r7;break}if((HEAP32[r4>>2]|0)==0){r8=r3;r9=r7;break}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r8=r3;r9=r7}else{r8=0;r9=r5}}while(0);if((r9-48|0)>>>0>9){if((HEAP32[r4>>2]|0)==0){r10=-2147483648;r11=0;return tempRet0=r10,r11}HEAP32[r2>>2]=HEAP32[r2>>2]-1;r10=-2147483648;r11=0;return tempRet0=r10,r11}else{r12=r9;r13=0}while(1){r14=r12-48+r13|0;r9=HEAP32[r2>>2];if(r9>>>0<HEAP32[r4>>2]>>>0){HEAP32[r2>>2]=r9+1;r15=HEAPU8[r9]}else{r15=___shgetc(r1)}r16=(r15-48|0)>>>0<10;if(!(r16&(r14|0)<214748364)){break}r12=r15;r13=r14*10&-1}r13=r14;r12=(r14|0)<0|0?-1:0;if(r16){r16=r15;r14=r12;r9=r13;while(1){r5=___muldi3(r9,r14,10,0);r7=tempRet0;r3=_i64Add(r16,(r16|0)<0|0?-1:0,-48,-1);r6=_i64Add(r3,tempRet0,r5,r7);r7=tempRet0;r5=HEAP32[r2>>2];if(r5>>>0<HEAP32[r4>>2]>>>0){HEAP32[r2>>2]=r5+1;r17=HEAPU8[r5]}else{r17=___shgetc(r1)}r5=21474836;if((r17-48|0)>>>0<10&((r7|0)<(r5|0)|(r7|0)==(r5|0)&r6>>>0<2061584302>>>0)){r16=r17;r14=r7;r9=r6}else{r18=r17;r19=r7;r20=r6;break}}}else{r18=r15;r19=r12;r20=r13}if((r18-48|0)>>>0<10){while(1){r18=HEAP32[r2>>2];if(r18>>>0<HEAP32[r4>>2]>>>0){HEAP32[r2>>2]=r18+1;r21=HEAPU8[r18]}else{r21=___shgetc(r1)}if((r21-48|0)>>>0>=10){break}}}if((HEAP32[r4>>2]|0)!=0){HEAP32[r2>>2]=HEAP32[r2>>2]-1}r2=(r8|0)!=0;r8=_i64Subtract(0,0,r20,r19);r10=r2?tempRet0:r19;r11=r2?r8:r20;return tempRet0=r10,r11}function ___shgetc(r1){var r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;r2=0;r3=r1+104|0;r4=HEAP32[r3>>2];if((r4|0)==0){r2=3}else{if((HEAP32[r1+108>>2]|0)<(r4|0)){r2=3}}do{if(r2==3){r4=___uflow(r1);if((r4|0)<0){break}r5=HEAP32[r3>>2];r6=HEAP32[r1+8>>2];r7=HEAP32[r1+4>>2];do{if((r5|0)==0){r8=r7;r2=8}else{r9=r5-HEAP32[r1+108>>2]-1|0;if((r6-r7|0)<=(r9|0)){r8=r7;r2=8;break}HEAP32[r1+100>>2]=r7+r9;r10=r7}}while(0);if(r2==8){HEAP32[r1+100>>2]=r6;r10=r8}if((r6|0)!=0){r7=r1+108|0;HEAP32[r7>>2]=r6+1-r10+HEAP32[r7>>2]}r7=r10-1|0;if((HEAPU8[r7]|0)==(r4|0)){r11=r4;return r11}HEAP8[r7]=r4;r11=r4;return r11}}while(0);HEAP32[r1+100>>2]=0;r11=-1;return r11}function ___uflow(r1){var r2,r3,r4,r5,r6,r7,r8,r9;r2=STACKTOP;STACKTOP=STACKTOP+8|0;r3=r2;r4=r1+8|0;do{if((HEAP32[r4>>2]|0)==0){r5=r1+74|0;r6=HEAP8[r5];HEAP8[r5]=r6-1&255|r6;r6=r1+20|0;r5=r1+44|0;if(HEAP32[r6>>2]>>>0>HEAP32[r5>>2]>>>0){FUNCTION_TABLE[HEAP32[r1+36>>2]](r1,0,0)}HEAP32[r1+16>>2]=0;HEAP32[r1+28>>2]=0;HEAP32[r6>>2]=0;r6=r1|0;r7=HEAP32[r6>>2];if((r7&20|0)==0){r8=HEAP32[r5>>2];HEAP32[r4>>2]=r8;HEAP32[r1+4>>2]=r8;break}if((r7&4|0)==0){r9=-1;STACKTOP=r2;return r9}HEAP32[r6>>2]=r7|32;r9=-1;STACKTOP=r2;return r9}}while(0);if((FUNCTION_TABLE[HEAP32[r1+32>>2]](r1,r3,1)|0)!=1){r9=-1;STACKTOP=r2;return r9}r9=HEAPU8[r3];STACKTOP=r2;return r9}function _i64Add(r1,r2,r3,r4){var r5,r6;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0;r5=r1+r3>>>0;r6=r2+r4+(r5>>>0<r1>>>0|0)>>>0;return tempRet0=r6,r5|0}function _i64Subtract(r1,r2,r3,r4){var r5,r6;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0;r5=r1-r3>>>0;r6=r2-r4>>>0;r6=r2-r4-(r3>>>0>r1>>>0|0)>>>0;return tempRet0=r6,r5|0}function _bitshift64Shl(r1,r2,r3){var r4;r1=r1|0;r2=r2|0;r3=r3|0;r4=0;if((r3|0)<32){r4=(1<<r3)-1|0;tempRet0=r2<<r3|(r1&r4<<32-r3)>>>32-r3;return r1<<r3}tempRet0=r1<<r3-32;return 0}function _bitshift64Lshr(r1,r2,r3){var r4;r1=r1|0;r2=r2|0;r3=r3|0;r4=0;if((r3|0)<32){r4=(1<<r3)-1|0;tempRet0=r2>>>r3;return r1>>>r3|(r2&r4)<<32-r3}tempRet0=0;return r2>>>r3-32|0}function _bitshift64Ashr(r1,r2,r3){var r4;r1=r1|0;r2=r2|0;r3=r3|0;r4=0;if((r3|0)<32){r4=(1<<r3)-1|0;tempRet0=r2>>r3;return r1>>>r3|(r2&r4)<<32-r3}tempRet0=(r2|0)<0?-1:0;return r2>>r3-32|0}function _llvm_ctlz_i32(r1){var r2;r1=r1|0;r2=0;r2=HEAP8[ctlz_i8+(r1>>>24)|0];if((r2|0)<8)return r2|0;r2=HEAP8[ctlz_i8+(r1>>16&255)|0];if((r2|0)<8)return r2+8|0;r2=HEAP8[ctlz_i8+(r1>>8&255)|0];if((r2|0)<8)return r2+16|0;return HEAP8[ctlz_i8+(r1&255)|0]+24|0}var ctlz_i8=allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_DYNAMIC);function _llvm_cttz_i32(r1){var r2;r1=r1|0;r2=0;r2=HEAP8[cttz_i8+(r1&255)|0];if((r2|0)<8)return r2|0;r2=HEAP8[cttz_i8+(r1>>8&255)|0];if((r2|0)<8)return r2+8|0;r2=HEAP8[cttz_i8+(r1>>16&255)|0];if((r2|0)<8)return r2+16|0;return HEAP8[cttz_i8+(r1>>>24)|0]+24|0}var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function ___muldsi3(r1,r2){var r3,r4,r5,r6,r7,r8,r9;r1=r1|0;r2=r2|0;r3=0,r4=0,r5=0,r6=0,r7=0,r8=0,r9=0;r3=r1&65535;r4=r2&65535;r5=Math_imul(r4,r3)|0;r6=r1>>>16;r7=(r5>>>16)+Math_imul(r4,r6)|0;r8=r2>>>16;r9=Math_imul(r8,r3)|0;return(tempRet0=(r7>>>16)+Math_imul(r8,r6)+(((r7&65535)+r9|0)>>>16)|0,r7+r9<<16|r5&65535|0)|0}function ___divdi3(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0,r7=0,r8=0,r9=0,r10=0,r11=0,r12=0,r13=0,r14=0,r15=0;r5=r2>>31|((r2|0)<0?-1:0)<<1;r6=((r2|0)<0?-1:0)>>31|((r2|0)<0?-1:0)<<1;r7=r4>>31|((r4|0)<0?-1:0)<<1;r8=((r4|0)<0?-1:0)>>31|((r4|0)<0?-1:0)<<1;r9=_i64Subtract(r5^r1,r6^r2,r5,r6)|0;r10=tempRet0;r11=_i64Subtract(r7^r3,r8^r4,r7,r8)|0;r12=r7^r5;r13=r8^r6;r14=___udivmoddi4(r9,r10,r11,tempRet0,0)|0;r15=_i64Subtract(r14^r12,tempRet0^r13,r12,r13)|0;return(tempRet0=tempRet0,r15)|0}function ___remdi3(r1,r2,r3,r4){var r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0,r7=0,r8=0,r9=0,r10=0,r11=0,r12=0,r13=0,r14=0,r15=0;r15=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r15|0;r6=r2>>31|((r2|0)<0?-1:0)<<1;r7=((r2|0)<0?-1:0)>>31|((r2|0)<0?-1:0)<<1;r8=r4>>31|((r4|0)<0?-1:0)<<1;r9=((r4|0)<0?-1:0)>>31|((r4|0)<0?-1:0)<<1;r10=_i64Subtract(r6^r1,r7^r2,r6,r7)|0;r11=tempRet0;r12=_i64Subtract(r8^r3,r9^r4,r8,r9)|0;___udivmoddi4(r10,r11,r12,tempRet0,r5)|0;r13=_i64Subtract(HEAP32[r5>>2]^r6,HEAP32[r5+4>>2]^r7,r6,r7)|0;r14=tempRet0;STACKTOP=r15;return(tempRet0=r14,r13)|0}function ___muldi3(r1,r2,r3,r4){var r5,r6,r7,r8,r9;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0,r7=0,r8=0,r9=0;r5=r1;r6=r3;r7=___muldsi3(r5,r6)|0;r8=tempRet0;r9=Math_imul(r2,r6)|0;return(tempRet0=Math_imul(r4,r5)+r9+r8|r8&0,r7&-1|0)|0}function ___udivdi3(r1,r2,r3,r4){var r5;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0;r5=___udivmoddi4(r1,r2,r3,r4,0)|0;return(tempRet0=tempRet0,r5)|0}function ___uremdi3(r1,r2,r3,r4){var r5,r6;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=0,r6=0;r6=STACKTOP;STACKTOP=STACKTOP+8|0;r5=r6|0;___udivmoddi4(r1,r2,r3,r4,r5)|0;STACKTOP=r6;return(tempRet0=HEAP32[r5+4>>2]|0,HEAP32[r5>>2]|0)|0}function ___udivmoddi4(r1,r2,r3,r4,r5){var r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69;r1=r1|0;r2=r2|0;r3=r3|0;r4=r4|0;r5=r5|0;r6=0,r7=0,r8=0,r9=0,r10=0,r11=0,r12=0,r13=0,r14=0,r15=0,r16=0,r17=0,r18=0,r19=0,r20=0,r21=0,r22=0,r23=0,r24=0,r25=0,r26=0,r27=0,r28=0,r29=0,r30=0,r31=0,r32=0,r33=0,r34=0,r35=0,r36=0,r37=0,r38=0,r39=0,r40=0,r41=0,r42=0,r43=0,r44=0,r45=0,r46=0,r47=0,r48=0,r49=0,r50=0,r51=0,r52=0,r53=0,r54=0,r55=0,r56=0,r57=0,r58=0,r59=0,r60=0,r61=0,r62=0,r63=0,r64=0,r65=0,r66=0,r67=0,r68=0,r69=0;r6=r1;r7=r2;r8=r7;r9=r3;r10=r4;r11=r10;if((r8|0)==0){r12=(r5|0)!=0;if((r11|0)==0){if(r12){HEAP32[r5>>2]=(r6>>>0)%(r9>>>0);HEAP32[r5+4>>2]=0}r69=0;r68=(r6>>>0)/(r9>>>0)>>>0;return(tempRet0=r69,r68)|0}else{if(!r12){r69=0;r68=0;return(tempRet0=r69,r68)|0}HEAP32[r5>>2]=r1&-1;HEAP32[r5+4>>2]=r2&0;r69=0;r68=0;return(tempRet0=r69,r68)|0}}r13=(r11|0)==0;do{if((r9|0)==0){if(r13){if((r5|0)!=0){HEAP32[r5>>2]=(r8>>>0)%(r9>>>0);HEAP32[r5+4>>2]=0}r69=0;r68=(r8>>>0)/(r9>>>0)>>>0;return(tempRet0=r69,r68)|0}if((r6|0)==0){if((r5|0)!=0){HEAP32[r5>>2]=0;HEAP32[r5+4>>2]=(r8>>>0)%(r11>>>0)}r69=0;r68=(r8>>>0)/(r11>>>0)>>>0;return(tempRet0=r69,r68)|0}r14=r11-1|0;if((r14&r11|0)==0){if((r5|0)!=0){HEAP32[r5>>2]=r1&-1;HEAP32[r5+4>>2]=r14&r8|r2&0}r69=0;r68=r8>>>((_llvm_cttz_i32(r11|0)|0)>>>0);return(tempRet0=r69,r68)|0}r15=_llvm_ctlz_i32(r11|0)|0;r16=r15-_llvm_ctlz_i32(r8|0)|0;if(r16>>>0<=30){r17=r16+1|0;r18=31-r16|0;r37=r17;r36=r8<<r18|r6>>>(r17>>>0);r35=r8>>>(r17>>>0);r34=0;r33=r6<<r18;break}if((r5|0)==0){r69=0;r68=0;return(tempRet0=r69,r68)|0}HEAP32[r5>>2]=r1&-1;HEAP32[r5+4>>2]=r7|r2&0;r69=0;r68=0;return(tempRet0=r69,r68)|0}else{if(!r13){r28=_llvm_ctlz_i32(r11|0)|0;r29=r28-_llvm_ctlz_i32(r8|0)|0;if(r29>>>0<=31){r30=r29+1|0;r31=31-r29|0;r32=r29-31>>31;r37=r30;r36=r6>>>(r30>>>0)&r32|r8<<r31;r35=r8>>>(r30>>>0)&r32;r34=0;r33=r6<<r31;break}if((r5|0)==0){r69=0;r68=0;return(tempRet0=r69,r68)|0}HEAP32[r5>>2]=r1&-1;HEAP32[r5+4>>2]=r7|r2&0;r69=0;r68=0;return(tempRet0=r69,r68)|0}r19=r9-1|0;if((r19&r9|0)!=0){r21=_llvm_ctlz_i32(r9|0)+33|0;r22=r21-_llvm_ctlz_i32(r8|0)|0;r23=64-r22|0;r24=32-r22|0;r25=r24>>31;r26=r22-32|0;r27=r26>>31;r37=r22;r36=r24-1>>31&r8>>>(r26>>>0)|(r8<<r24|r6>>>(r22>>>0))&r27;r35=r27&r8>>>(r22>>>0);r34=r6<<r23&r25;r33=(r8<<r23|r6>>>(r26>>>0))&r25|r6<<r24&r22-33>>31;break}if((r5|0)!=0){HEAP32[r5>>2]=r19&r6;HEAP32[r5+4>>2]=0}if((r9|0)==1){r69=r7|r2&0;r68=r1&-1|0;return(tempRet0=r69,r68)|0}else{r20=_llvm_cttz_i32(r9|0)|0;r69=r8>>>(r20>>>0)|0;r68=r8<<32-r20|r6>>>(r20>>>0)|0;return(tempRet0=r69,r68)|0}}}while(0);if((r37|0)==0){r64=r33;r63=r34;r62=r35;r61=r36;r60=0;r59=0}else{r38=r3&-1|0;r39=r10|r4&0;r40=_i64Add(r38,r39,-1,-1)|0;r41=tempRet0;r47=r33;r46=r34;r45=r35;r44=r36;r43=r37;r42=0;while(1){r48=r46>>>31|r47<<1;r49=r42|r46<<1;r50=r44<<1|r47>>>31|0;r51=r44>>>31|r45<<1|0;_i64Subtract(r40,r41,r50,r51)|0;r52=tempRet0;r53=r52>>31|((r52|0)<0?-1:0)<<1;r54=r53&1;r55=_i64Subtract(r50,r51,r53&r38,(((r52|0)<0?-1:0)>>31|((r52|0)<0?-1:0)<<1)&r39)|0;r56=r55;r57=tempRet0;r58=r43-1|0;if((r58|0)==0){break}else{r47=r48;r46=r49;r45=r57;r44=r56;r43=r58;r42=r54}}r64=r48;r63=r49;r62=r57;r61=r56;r60=0;r59=r54}r65=r63;r66=0;r67=r64|r66;if((r5|0)!=0){HEAP32[r5>>2]=r61;HEAP32[r5+4>>2]=r62}r69=(r65|0)>>>31|r67<<1|(r66<<1|r65>>>31)&0|r60;r68=(r65<<1|0>>>31)&-2|r59;return(tempRet0=r69,r68)|0}




// EMSCRIPTEN_END_FUNCS
Module["___getTypeName"] = ___getTypeName;
Module["_malloc"] = _malloc;
Module["_free"] = _free;
Module["_realloc"] = _realloc;

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}
/*global Module*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');

function throwInternalError(message) {
    throw new InternalError(message);
}

function throwBindingError(message) {
    throw new BindingError(message);
}

function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);
    
    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}

// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }            
}

/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.

   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }
        
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}

function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}

// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;

        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };

    return errorClass;
}


// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}

function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}

// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};

// typeID -> [callback]
var awaitingDependencies = {};

// typeID -> [dependentTypes]
var typeDependencies = {};

// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};

function registerType(rawType, registeredInstance) {
    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }

    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];

    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });

    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }

    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}

var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();

function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}

function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}

function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}

function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}

function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}

function __embind_register_bool(rawType, name, trueValue, falseValue) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }
    registerType(primitiveType, {
        name: name,
        minRange: minRange,
        maxRange: maxRange,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_float(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }

            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }

            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,        
    ];

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
    });
}

function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}

// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }

    /*
     * Previously, the following line was just:

     function dummy() {};

     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;

    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}

// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;

    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    
    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);

    if (!isClassMethodFunc && !FUNCTION_TABLE[cppTargetFunc]) {
        throwBindingError('Global function '+humanName+' is not defined!');
    }

    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount-2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }

    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";

    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;
    
    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }

    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }

    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "classType", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, classType, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];

    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }

    for(var i = 0; i < argCount-2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }

    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }

    var returns = (argTypes[0].name !== "void");

    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
    
    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i-2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }
    
    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";

    args1.push(invokerFnBody);

    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __embind_register_function(name, argCount, rawArgTypesAddr, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    rawInvoker = FUNCTION_TABLE[rawInvoker];

    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);

    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}

var tupleRegistrations = {};

function __embind_register_value_array(rawType, name, rawConstructor, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        elements: [],
    };
}

function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}

function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
 
    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}

var structRegistrations = {};

function __embind_register_value_object(
    rawType,
    name,
    rawConstructor,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        fields: [],
    };
}

function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}

function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}

var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
        
        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;
            
            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;
            
            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;
            
            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};

// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,

    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;

    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;

    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in 
        //       craftInvokerFunction altogether.
    }
}

RegisteredPointer.prototype.getPointee = function(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};

RegisteredPointer.prototype.destructor = function(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};

RegisteredPointer.prototype['fromWireType'] = function(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)

    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }

    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }

    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }

    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};

function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}

// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}

function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}

ClassHandle.prototype['isAliasOf'] = function(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }

    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;

    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }

    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }
    
    return leftClass === rightClass && left === right;
};

function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}

ClassHandle.prototype['clone'] = function() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    var clone = Object.create(Object.getPrototypeOf(this), {
        $$: {
            value: shallowCopy(this.$$),
        }
    });

    clone.$$.count.value += 1;
    return clone;
};

function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}

ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }

    this.$$.count.value -= 1;
    if (0 === this.$$.count.value) {
        runDestructor(this);
    }
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
};

var deletionQueue = [];

ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};

ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};

function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;

var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};
        
function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
}

function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        rv[k] = o[k];
    }
    return rv;
}

function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualType,
    upcast,
    downcast,
    name,
    rawDestructor
) {
    name = readLatin1String(name);
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    getActualType = FUNCTION_TABLE[getActualType];
    upcast = FUNCTION_TABLE[upcast];
    downcast = FUNCTION_TABLE[downcast];
    var legalFunctionName = makeLegalFunctionName(name);

    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });

    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];

            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }

            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });

            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });

            constructor.prototype = instancePrototype;

            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);

            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);
        
            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);

            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);

            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };

            replacePublicSymbol(legalFunctionName, constructor);

            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}

function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = FUNCTION_TABLE[invoker];

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }
                
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                
                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}

function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }
    // O(depth) stack space used
    return desiredClass.downcast(
        downcastPointer(ptr, ptrClass, desiredClass.baseClass));
}

function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}

function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }

    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}

function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    rawInvoker,
    context
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        var unboundTypesHandler = function() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        };

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount-2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount-2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
        
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount-2] = memberFunction;
            }

            return [];
        });
        return [];
    });
}

function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        var unboundTypesHandler = function() {
                throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
            };

        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}

function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = FUNCTION_TABLE[getter];

    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }

        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);

        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };

            if (setter) {
                setter = FUNCTION_TABLE[setter];
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }

            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });

        return [];
    });
}

var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}

function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = FUNCTION_TABLE[rawGetPointee];
    rawConstructor = FUNCTION_TABLE[rawConstructor];
    rawShare = FUNCTION_TABLE[rawShare];
    rawDestructor = FUNCTION_TABLE[rawDestructor];

    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];

        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}

function __embind_register_enum(
    rawType,
    name
) {
    name = readLatin1String(name);

    function constructor() {
    }
    constructor.values = {};

    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}

function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);

    var Enum = enumType.constructor;

    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}

function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError, runDestructors*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */

var Module = Module || {};

var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];

// Public JS API

/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};

/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};

// Private C++ API

var _emval_symbols = {}; // address -> string

function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}

function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}

function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
}

function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;

    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}

function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}

function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}

function __emval_run_destructors(handle) {
    var destructors = _emval_handle_array[handle].value;
    runDestructors(destructors);
    __emval_decref(handle);
}

function __emval_new_array() {
    return __emval_register([]);
}

function __emval_new_object() {
    return __emval_register({});
}

function __emval_undefined() {
    return __emval_register(undefined);
}

function __emval_null() {
    return __emval_register(null);
}

function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}

function __emval_take_value(type, v) {
    type = requireRegisteredType(type, '_emval_take_value');
    v = type['fromWireType'](v);
    return __emval_register(v);
}

var __newers = {}; // arity -> function


function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(handle, argTypes, arg0Wired, arg1Wired, arg2Wired) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.fromWireType(arg0Wired);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.fromWireType(arg1Wired);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.fromWireType(arg2Wired);
        var constructor = _emval_handle_array[handle].value;
        var emval = new constructor(arg0, arg1, arg2);
        return emval;
    } */

    var args1 = ["requireRegisteredType", "HEAP32", "_emval_handle_array", "__emval_register"];
    var args2 = [requireRegisteredType, HEAP32, _emval_handle_array, __emval_register];

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
        argsListWired += ", arg"+i+"Wired"; // ', arg0Wired, arg1Wired, ..., argnWired'
    }

    var invokerFnBody =
        "return function emval_allocator_"+argCount+"(handle, argTypes " + argsListWired + ") {\n";

    for(var i = 0; i < argCount; ++i) {
        invokerFnBody += 
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".fromWireType(arg"+i+"Wired);\n";
    }
    invokerFnBody +=
        "var constructor = _emval_handle_array[handle].value;\n" +
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";

    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __emval_new(handle, argCount, argTypes) {
    requireHandle(handle);
    
    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }

    if (argCount === 0) {
        return newer(handle, argTypes);
    } else if (argCount === 1) {
        return newer(handle, argTypes, arguments[3]);
    } else if (argCount === 2) {
        return newer(handle, argTypes, arguments[3], arguments[4]);
    } else if (argCount === 3) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5]);
    } else if (argCount === 4) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5], arguments[6]);
    } else {
        // This is a slow path! (.apply and .splice are slow), so a few specializations are present above.
        return newer.apply(null, arguments.splice(1));
    }
}

// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();

function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}

function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}

function __emval_get_property(handle, key) {
    requireHandle(handle);
    return __emval_register(_emval_handle_array[handle].value[_emval_handle_array[key].value]);
}

function __emval_set_property(handle, key, value) {
    requireHandle(handle);
    _emval_handle_array[handle].value[_emval_handle_array[key].value] = _emval_handle_array[value].value;
}

function __emval_as(handle, returnType, destructorsRef) {
    requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    var rd = __emval_register(destructors);
    HEAP32[destructorsRef >> 2] = rd;
    return returnType['toWireType'](destructors, _emval_handle_array[handle].value);
}

function parseParameters(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var argType = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
        a[i] = argType['fromWireType'](argWireTypes[i]);
    }
    return a;
}

function __emval_call(handle, argCount, argTypes) {
    requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);

    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        args[i] = types[i]['fromWireType'](arguments[3 + i]);
    }

    var fn = _emval_handle_array[handle].value;
    var rv = fn.apply(undefined, args);
    return __emval_register(rv);
}

function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}

function allocateDestructors(destructorsRef) {
    var destructors = [];
    HEAP32[destructorsRef >> 2] = __emval_register(destructors);
    return destructors;
}

function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);

    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";

    var args1 = ["addFunction", "createNamedFunction", "requireHandle", "getStringOrSymbol", "_emval_handle_array", "retType", "allocateDestructors"];
    var args2 = [Runtime.addFunction, createNamedFunction, requireHandle, getStringOrSymbol, _emval_handle_array, retType, allocateDestructors];

    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    var argsListWired = ""; // 'arg0Wired, ..., argNWired'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += ", arg" + i + "Wired";
        args1.push("argType" + i);
        args2.push(types[1 + i]);
    }

    var invokerFnBody =
        "return addFunction(createNamedFunction('" + signatureName + "', function (handle, name, destructorsRef" + argsListWired + ") {\n" +
        "    requireHandle(handle);\n" +
        "    name = getStringOrSymbol(name);\n";

    for (var i = 0; i < argCount - 1; ++i) {
        invokerFnBody += "    var arg" + i + " = argType" + i + ".fromWireType(arg" + i + "Wired);\n";
    }
    invokerFnBody +=
        "    var obj = _emval_handle_array[handle].value;\n" +
        "    var rv = obj[name](" + argsList + ");\n" +
        "    return retType.toWireType(allocateDestructors(destructorsRef), rv);\n" +
        "}));\n";

    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __emval_has_function(handle, name) {
    name = getStringOrSymbol(name);
    return _emval_handle_array[handle].value[name] instanceof Function;
}


if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






